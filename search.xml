<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bootstrap相关笔记</title>
    <url>/2018/08/18/Bootstrap%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.bootstrap.cn/doc/read/194">Bootstrap5</a></p>
<h4 id="Bootstrap3与Bootstrap4的区别"><a href="#Bootstrap3与Bootstrap4的区别" class="headerlink" title="Bootstrap3与Bootstrap4的区别"></a>Bootstrap3与Bootstrap4的区别</h4><table>
<thead>
<tr>
<th>Bootstrap3</th>
<th>Bootstrap4</th>
</tr>
</thead>
<tbody><tr>
<td>Less</td>
<td>Sass</td>
</tr>
<tr>
<td>4种栅格类</td>
<td>5种栅格类</td>
</tr>
<tr>
<td>使用px为单位</td>
<td>使用rem和em为单位（除部分margin和padding使用px）</td>
</tr>
<tr>
<td>使用push和pull向左右移动</td>
<td>偏移列通过offset-类设置</td>
</tr>
<tr>
<td>使用float的布局方式</td>
<td>选择弹性盒模型(flexbox)</td>
</tr>
</tbody></table>
<ul>
<li>Bootstrap4中的栅格系统可以不用添加指定的列数 如row 里面有2个col 会任何尺寸下均分row</li>
<li>Bootstrap3只有4种栅格类 分别为（col-xs特小，col-sm小,col-md,中col-lg大）</li>
<li>Bootstrap4有5种栅格类，（col-特小，col-sm-小，col-md-中，col-lg-大，col-xl-超大）</li>
<li>Bootstrap4设置列偏移时通过 offset-sm-4,而Bootstrap3通过col-sm-offset-4</li>
<li>Bootstrap4增加了响应式容器如 container-sm ,container-md….,当小于屏幕尺寸小于栅格类时会占满整个屏幕</li>
</ul>
<h4 id="Bootstrap4与Bootstrap5之间的区别"><a href="#Bootstrap4与Bootstrap5之间的区别" class="headerlink" title="Bootstrap4与Bootstrap5之间的区别"></a><a href="https://www.imangodoc.com/120811.html">Bootstrap4与Bootstrap5之间的区别</a></h4><p>Bootstrap5删除的一些类是：</p>
<ul>
<li>表格-行</li>
<li>表格-内联</li>
<li>清单-内联</li>
<li>卡-甲板</li>
</ul>
<p>一些添加的类：</p>
<ul>
<li>gx-*(类控制水平/列装订线的宽度)</li>
<li>gy-*(类控制垂直/行装订线的宽度)</li>
<li>g-*(类控制水平和垂直装订线的宽度)</li>
<li>行cols自动</li>
</ul>
<h4 id="日期插件"><a href="#日期插件" class="headerlink" title="日期插件"></a><a href="https://getdatepicker.com/4/">日期插件</a></h4><p><a href="https://bootstrap-datepicker.readthedocs.io/en/stable/">文档</a></p>
<p><a href="https://uxsolutions.github.io/bootstrap-datepicker/?markup=input&format=&weekStart=&startDate=&endDate=&startView=0&minViewMode=0&maxViewMode=4&todayBtn=false&clearBtn=false&language=en&orientation=auto&multidate=&multidateSeparator=&keyboardNavigation=on&forceParse=on#sandbox">demo</a></p>
<p><a href="https://github.com/uxsolutions/bootstrap-datepicker">github</a>——存在安全缺陷组件的影响</p>
<p><a href="https://www.bootcdn.cn/bootstrap-datetimepicker/">CDN</a></p>
<p><a href="https://www.eyecon.ro/bootstrap-datepicker/">示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- bootstrap样式表 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器样式表 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- jquery --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- bootstrap脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器前置脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/moment.js/2.22.1/moment-with-locales.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器核心脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Bootstrap-Table"><a href="#Bootstrap-Table" class="headerlink" title="Bootstrap Table"></a><a href="https://bootstrap-table.com/">Bootstrap Table</a></h4><p><a href="https://blog.csdn.net/Mr_XiMu/article/details/106059687">bootstrapTable的使用及表格的导出</a></p>
<p><a href="https://social.msdn.microsoft.com/Forums/en-US/f2f830ed-3e66-4774-aa14-3fb4cb6ef135/bootstrap-modal?forum=aspdotnetwebpages">Bootstrap Modal</a></p>
<p><a href="https://www.runoob.com/bootstrap/bootstrap-modal-plugin.html">Bootstrap 模态框（Modal）插件</a></p>
<p><a href="http://www.bootstrap.cn/doc/read/219.html">第26节 Bootstrap5模态弹框Modal组件用法</a></p>
]]></content>
      <categories>
        <category>前端UI框架</category>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>CMS-笔记</title>
    <url>/2021/01/19/CMS-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.phome.net/">帝国cms官网</a></p>
<p><a href="http://phome.net/doc/ecmsedu/template/ecmsinfo.html">万能标签</a></p>
<p><a href="http://www.phome.net/doc/manual/">帝国网站管理系统(EmpireCMS)使用教程手册</a></p>
<p><a href="http://www.phome.net/doc/manual/install/">帝国网站管理系统(EmpireCMS)－安装手册</a></p>
<h4 id="帝国CMS模板的策划"><a href="#帝国CMS模板的策划" class="headerlink" title="帝国CMS模板的策划"></a>帝国CMS模板的策划</h4><p>1、 确定网站的栏目</p>
<p>2、 添加自定义字段</p>
<p>3、 定制系统模型</p>
<p><a href="http://www.phome.net/doc/manual/install/">帝国网站管理系统(EmpireCMS)－安装手册</a></p>
<h5 id="采集教程"><a href="#采集教程" class="headerlink" title="采集教程"></a>采集教程</h5><p><a href="https://www.jb51.net/cms/44793_2.html">帝国cms采集图文教程(上,中,下)全集</a></p>
<p><a href="http://www.baiwanzhan.com/site/t125853/?tdsourcetag=s_pctim_aiomsg">百万站官网资料-帝国cms采集图文教程（上）</a></p>
<p>采集思路:</p>
<p>1.先确定你的服务器是否支持采集</p>
<p>2.寻找响应速度快的目标网站,当然首先要看准目标网站是否防采集的</p>
<p>3.查看源文件,写正则</p>
<p>4.正则写好,先预览,预览正常后再采集</p>
<p>影响采集速度:</p>
<p>1.本身空间的质量与速度</p>
<p>2.本身网站的数据大小,即数据库的使用情况.</p>
<p>3.目标网站的速度及代码结构</p>
<h4 id="URL地址栏-新闻自动生成的目录修改"><a href="#URL地址栏-新闻自动生成的目录修改" class="headerlink" title="URL地址栏-新闻自动生成的目录修改"></a>URL地址栏-新闻自动生成的目录修改</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CMS-%E7%AC%94%E8%AE%B0/CMS1.png" alt="cms"></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>CMS</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式Demo</title>
    <url>/2019/08/22/CSS%E6%A0%B7%E5%BC%8FDemo/</url>
    <content><![CDATA[<h4 id="使用flex布局实现上下布局，整屏背景图设置—图片会变形"><a href="#使用flex布局实现上下布局，整屏背景图设置—图片会变形" class="headerlink" title="使用flex布局实现上下布局，整屏背景图设置—图片会变形"></a>使用flex布局实现上下布局，整屏背景图设置—图片会变形</h4><p>优点：铺满</p>
<p>缺点：图片变形</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>contain</td>
<td>此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
<tr>
<td>cover</td>
<td>此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
</tbody></table>
<p><code>注：使用 background-size: cover;  ，背景图会根据屏幕高度铺满，图片会发生变形</code></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE1.png" alt="背景图设置"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;上下布局，背景图设置&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    background: url(./images/pubuliu/24.jpg) center center no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">.form-box&#123;</span><br><span class="line">    width: 90%;</span><br><span class="line">    margin: 200rem auto 0;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用img和定位，设置背景图–图片不变形"><a href="#使用img和定位，设置背景图–图片不变形" class="headerlink" title="使用img和定位，设置背景图–图片不变形"></a>使用img和定位，设置背景图–图片不变形</h4><p>优点：图片不 变形</p>
<p>缺点：不铺满</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE2.png" alt="设置背景图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;使用img和定位，设置背景图--图片不变形&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;img src=&quot;./images/pubuliu/24.jpg&quot; alt=&quot;&quot; class=&quot;bg&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">&#125;</span><br><span class="line">.bg&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 200rem;</span><br><span class="line">    left: 5%;</span><br><span class="line">    z-index: 100;</span><br><span class="line">    width: 90%;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="直接给body设置背景图–图片会变形"><a href="#直接给body设置背景图–图片会变形" class="headerlink" title="直接给body设置背景图–图片会变形"></a>直接给body设置背景图–图片会变形</h4><p>优点：铺满</p>
<p>缺点：图片变形</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE3.png" alt="设置背景"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;直接给body设置背景图--图片会变形&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">    background: url(./images/pubuliu/24.jpg) center center no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    padding-top: 88rem;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    margin: 200rem auto 0;</span><br><span class="line">    width: 90%;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现水平垂直居中</title>
    <url>/2020/08/22/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="方法一：父元素：-display-flex-子元素：margin-auto"><a href="#方法一：父元素：-display-flex-子元素：margin-auto" class="headerlink" title="方法一：父元素： display: flex; + 子元素：margin: auto;"></a>方法一：父元素：<code> display: flex;</code> + 子元素：<code>margin: auto;</code></h4><ol>
<li><p>适用于有宽高的盒子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;big-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.big-box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: darkseagreen;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inner-box &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgb(243, 236, 132);</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/0.png" alt="垂直水平居中"></p>
<ol start="2">
<li><p>适用于<code>文字内容所在的元素没有宽高</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.inner-box &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgb(243, 236, 132);</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/1.png" alt="垂直水平居中"></p>
<blockquote>
<p>如果给文字内容所在p元素设置宽高，使用这个方法，文字就不居中了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.inner-box &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: rgb(243, 236, 132);</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">    margin: auto;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>inner-box</code> 有宽高,显示如下图:</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/1_2.png" alt="垂直水平居中"></p>
<blockquote>
<p>如果给文字内容所在p元素设置宽高，使用这个方法，文字就不居中了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.inner-box &#123;</span><br><span class="line">    /* width: 200px;</span><br><span class="line">    height: 200px; */</span><br><span class="line">    background-color: rgb(243, 236, 132);</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"> p &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">    margin: auto;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>inner-box</code> 没有宽高,显示如下图:</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/1_3.png" alt="垂直水平居中"></p>
<h4 id="方法二：使用Flexbox（弹性布局）"><a href="#方法二：使用Flexbox（弹性布局）" class="headerlink" title="方法二：使用Flexbox（弹性布局）"></a>方法二：使用<code>Flexbox</code>（弹性布局）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;big-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line">        你好</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #bfc;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center; /* 水平居中 */</span><br><span class="line">    align-items: center; /* 垂直居中 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/2.png" alt="垂直水平居中"></p>
<h4 id="方法三：父元素：text-align-center-和line-height"><a href="#方法三：父元素：text-align-center-和line-height" class="headerlink" title="方法三：父元素：text-align: center;和line-height: *;"></a>方法三：父元素：<code>text-align: center;</code>和<code>line-height: *;</code></h4><blockquote>
<p>适用于内联元素，如文本或行内块元素。(文字内容所在盒子没有设置宽高的情况下。)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;big-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line">        你好</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.big-box &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #bfc;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 400px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果文字内容所在盒子有宽高，则不水平居中对齐。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.inner-box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/3.png" alt="垂直水平居中"></p>
<h4 id="方法四：使用Grid（网格布局）"><a href="#方法四：使用Grid（网格布局）" class="headerlink" title="方法四：使用Grid（网格布局）"></a>方法四：使用Grid（网格布局）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.big-box  &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    place-items: center; /* 同时实现水平和垂直居中 */</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #bfc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法五：使用绝对定位"><a href="#方法五：使用绝对定位" class="headerlink" title="方法五：使用绝对定位"></a>方法五：使用绝对定位</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.big-box  &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #bfc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inner-box &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%); /* 负的50%来实现水平和垂直居中 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法六：使用表格布局"><a href="#方法六：使用表格布局" class="headerlink" title="方法六：使用表格布局"></a>方法六：使用表格布局</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.big-box &#123;</span><br><span class="line">    display: table;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #bfc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.inner-box &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    text-align: center; /* 水平居中 */</span><br><span class="line">    vertical-align: middle; /* 垂直居中 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Clipboard的使用</title>
    <url>/2020/11/04/Clipboard%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="如果存在clipboard-先将它销毁"><a href="#如果存在clipboard-先将它销毁" class="headerlink" title="如果存在clipboard,先将它销毁"></a>如果存在clipboard,先将它销毁</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(clipboard) &#123;</span><br><span class="line">    clipboard.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Clipboard官网使用教程"><a href="#Clipboard官网使用教程" class="headerlink" title="Clipboard官网使用教程"></a><a href="http://www.clipboardjs.cn/">Clipboard官网使用教程</a></h5><h5 id="复制成功和复制失败的提示"><a href="#复制成功和复制失败的提示" class="headerlink" title="复制成功和复制失败的提示"></a>复制成功和复制失败的提示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="line">    layer.msg(&#x27;复制成功&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    e.clearSelection();</span><br><span class="line">&#125;);</span><br><span class="line">clipboard.on(&#x27;error&#x27;, function(e) &#123;</span><br><span class="line">    if(u.indexOf(&#x27;UCBrowser&#x27;) &gt; -1)&#123;</span><br><span class="line">        layer.msg(&#x27;您的浏览器不支持，请长按内容手动复制！&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        layer.msg(&#x27;复制失败&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="如果提示信息弹两次"><a href="#如果提示信息弹两次" class="headerlink" title="如果提示信息弹两次"></a>如果提示信息弹两次</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自己写一个copySuccessTip提示信息</span><br><span class="line">$(&quot;.copySuccessTip&quot;).addClass(&quot;mymove&quot;);</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    $(&quot;.copySuccessTip&quot;).removeClass(&quot;mymove&quot;);</span><br><span class="line">&#125;,1000);</span><br></pre></td></tr></table></figure>

<h4 id="解决clipboard复制弹多次提示的问题"><a href="#解决clipboard复制弹多次提示的问题" class="headerlink" title="解决clipboard复制弹多次提示的问题"></a>解决clipboard复制弹多次提示的问题</h4><p>1、使用destroy（在单页面里面，回来页面，如果存在这个对象，就删除。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果存在clipboard，先将它销毁</span><br><span class="line">if(clipboard)&#123;</span><br><span class="line">	clipboard.destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var clipboard =new ClipboardJS(&#x27;.copyBtn&#x27;, &#123;</span><br><span class="line">	text: function(trigger)&#123;</span><br><span class="line">		var txt = $(trigger).data( &quot;clipboard-text&quot;);</span><br><span class="line">		return txt;		//	返回需要复制的内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var u = navigator.userAgent;</span><br><span class="line"></span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e)&#123;</span><br><span class="line">	layer.msg(&#x27;复制成功&#x27;);</span><br><span class="line">	e.clearselection();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">clipboard.on(&#x27;error&#x27;, function(e) &#123;</span><br><span class="line">	if(u.indexOf(&quot;UCBrowser&quot;) &gt;-1)&#123;</span><br><span class="line">		layer.msg(&#x27;您的浏览器不支持，请长按内容手动复制!&#x27;);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		layer.msg(&#x27;复制失败&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、换成setTimeout，不用layer.msg（copySuccessTip的样式模拟layer.msg的样式即可）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clipboard.on(&#x27;success&#x27;, function(e)&#123;</span><br><span class="line">	$(&#x27;.copySuccessTip&#x27;).show();</span><br><span class="line">	</span><br><span class="line">	setTimeout(function()&#123;</span><br><span class="line">		$(&#x27;.copySuccessTip&#x27;).hide();</span><br><span class="line">	&#125;, 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端插件</category>
        <category>Clipboard</category>
      </categories>
      <tags>
        <tag>Clipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-UI笔记</title>
    <url>/2021/05/13/Element-UI%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i element-ui -S</span><br></pre></td></tr></table></figure>

<h4 id="引入element-ui"><a href="#引入element-ui" class="headerlink" title="引入element-ui"></a>引入element-ui</h4><p>在 main.js 中写入以下内容（完整引入）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="ElementUI表格合并单元格"><a href="#ElementUI表格合并单元格" class="headerlink" title="ElementUI表格合并单元格"></a>ElementUI表格合并单元格</h4><p>摘抄自<a href="https://www.cnblogs.com/yuwenjing0727/p/10110721.html">博客</a>，仅用于学习。</p>
<table>
  <tr>
    <th>序号</th>
    <th>工单类型</th>
    <th>taskKey</th>
    <th>templateUrl</th>
    <th>操作</th>
  </tr>
  <tr>
    <td rowspan="3">1</td>
    <td rowspan="3">事件单</td>
    <td>shijian_01</td>
    <td>/shijian_01</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_02</td>
    <td>/shijian_02</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_03</td>
    <td>/shijian_03</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td rowspan="3">2</td>
    <td rowspan="3">问题单</td>
    <td>shijian_04</td>
    <td>/shijian_04</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_05</td>
    <td>/shijian_05</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_06</td>
    <td>/shijian_06</td>
    <td>编辑   删除</td>
  </tr>
</table>


<p>代码附上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">        :data=&quot;listData&quot;</span><br><span class="line">        :span-method=&quot;objectSpanMethod&quot;</span><br><span class="line">        class=&quot;tableArea&quot;</span><br><span class="line">        style=&quot;width: 100%&quot;&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;type&quot;</span><br><span class="line">          label=&quot;序号&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">          width=&quot;200&quot;/&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;sheetType&quot;</span><br><span class="line">          label=&quot;工单类型&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;taskKey&quot;</span><br><span class="line">          label=&quot;taskKey&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;templateUrl&quot;</span><br><span class="line">          label=&quot;templateUrl&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          label=&quot;操作&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">              &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; content=&quot;修改&quot; placement=&quot;top-start&quot;&gt;</span><br><span class="line">                      &lt;i class=&quot;el-icon-edit-outline&quot;  @click=&quot;modify(scope)&quot; /&gt;</span><br><span class="line">                    &lt;/el-tooltip&gt;</span><br><span class="line">                    &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; content=&quot;删除&quot; placement=&quot;top-start&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-delete&quot; @click=&quot;deleteData(scope)&quot; /&gt;</span><br><span class="line">                    &lt;/el-tooltip&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column &gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;myNeedDeal&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      rowList: [],</span><br><span class="line">      spanArr: [],</span><br><span class="line">      position: 0,</span><br><span class="line">      listData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">      queryData()&#123;//查询操作</span><br><span class="line">          this.listData = [</span><br><span class="line">              &#123;</span><br><span class="line">            id:1,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_01&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_01&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:2,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_02&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_02&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:3,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_03&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_04&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:4,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_01&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_01&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:5,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_02&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_02&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:6,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_03&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_03&quot;</span><br><span class="line">        &#125;</span><br><span class="line">          ];</span><br><span class="line">          this.rowspan()</span><br><span class="line">      &#125;,</span><br><span class="line">      rowspan() &#123;</span><br><span class="line">          this.listData.forEach((item,index) =&gt; &#123;</span><br><span class="line">            if( index === 0)&#123;</span><br><span class="line">                this.spanArr.push(1);</span><br><span class="line">                this.position = 0;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(this.listData[index].type === this.listData[index-1].type )&#123;</span><br><span class="line">                    this.spanArr[this.position] += 1;</span><br><span class="line">                    this.spanArr.push(0);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    this.spanArr.push(1);</span><br><span class="line">                    this.position = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    objectSpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;  //表格合并行</span><br><span class="line">        if (columnIndex === 0) &#123;</span><br><span class="line">            const _row = this.spanArr[rowIndex];</span><br><span class="line">            const _col = _row&gt;0 ? 1 : 0;</span><br><span class="line">            return &#123;</span><br><span class="line">                rowspan: _row,</span><br><span class="line">                colspan: _col</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(columnIndex === 1)&#123;</span><br><span class="line">            const _row = this.spanArr[rowIndex];</span><br><span class="line">            const _col = _row&gt;0 ? 1 : 0;</span><br><span class="line">            return &#123;</span><br><span class="line">                rowspan: _row,</span><br><span class="line">                colspan: _col</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.queryData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.el-select &#123;</span><br><span class="line">  margin-right: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.el-input &#123;</span><br><span class="line">  margin-right: 15px;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.tableArea &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  box-shadow: 0 0 8px 0 #aaa;</span><br><span class="line">&#125;</span><br><span class="line">i[class^=&quot;el-icon&quot;] &#123;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.modify_table&#123;</span><br><span class="line">    td&#123;</span><br><span class="line">        padding: 10px ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.item_title&#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>详细说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:span-method=&quot;objectSpanMethod&quot;  </span><br></pre></td></tr></table></figure>

<p>这个是官方给定的绑定属性和对应的方法，objectSpanMethod 传入了 { row, column, rowIndex, columnIndex }</p>
<p>row: 当前行</p>
<p>column: 当前列</p>
<p>rowIndex：当前行号</p>
<p>columnIndex ：当前列号</p>
<p>该函数可以返回一个包含两个元素的数组，第一个元素代表<code>rowspan</code>，第二个元素代表<code>colspan</code>。 也可以返回一个键名为<code>rowspan</code>和<code>colspan</code>的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.spanArr 数组 ，返回的是相对应的行合并行数</span><br></pre></td></tr></table></figure>

<p>这个示例打印出的this.spanArr为 [3, 0, 0, 3, 0, 0]，比如，第一个元素为3，表示第一行应该向下合并3行（即第一行的rowspan为3），第二个元素的rowspan为0，就让它“消失”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rowspan（）这个函数就是用来返回 this.spanArr 数组的，定义每一行的 rowspan</span><br></pre></td></tr></table></figure>

<p>rowspan（）函数，if( index === 0)，第一行，直接先给数组push进一个1，表示自己先占一行，this.position是数组元素的位置（此时是从数组元素的第一个开始，所以this.position为0）， this.position为0意思表示的就是数组的第一个元素。</p>
<p>当到了index为2的时候，if(this.listData[index].type === this.listData[index-1].type )，让第二行与第一行作比较，</p>
<p>如果第二行与第一行相等的话，this.position就+1，当有n行第一行相同，this.position就为n，表示向下合并n行；第二行自己就this.spanArr.push(0)，表示第二行“消失”，因为第一行和第二行合并了啊。</p>
<p>如果第二行与第一行不相等的话，那么this.spanArr.push(1);就让第二行自己独占一行；this.position = index意思就是把指针拿到index这行来，表示设置数组this.spanArr[this.position]的元素值，然后定义从此行开始向下合并几行（可能这句话我表述的不是很清楚你可以根据我这个示例研究下，当index为3时，this.position为3，当index为4时，第四行与第三行需要合并，那么在数组的this.position元素就要+1了，也就是this.spanArr[this.position] += 1）</p>
<p>还有最后一句话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const _col = _row&gt;0 ? 1 : 0;</span><br></pre></td></tr></table></figure>

<p>定义的这一个单元格列的合并，我们项目只合并行，不合并列；</p>
<p>_row：代表合并行的行数，_row的值要么是1，或者更大的自然正整数，要么是0。</p>
<p>1代表：独占一行</p>
<p>更大的自然数：代表合并了若干行</p>
<p>0：代表“消失”的哪那一个单元格，后面的单元格向前推一格</p>
<p>注意：如果配合分页一起渲染数据，要在rowspan函数中，先将this.spanArr清空数组。不添加，点分页加载数据会导致表格错乱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rowspan() &#123;</span><br><span class="line">    this.spanArr=[];</span><br><span class="line">    .......</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/weixin_33982670/article/details/91446060">elementui表格动态数据单元格合并</a></p>
<p><a href="https://www.imooc.com/wenda/detail/522127">elementUI table合并相同数据的单元格</a></p>
<p><a href="https://segmentfault.com/a/1190000019176628">elementUI table表格动态合并</a></p>
<h3 id="slot的使用"><a href="#slot的使用" class="headerlink" title="slot的使用"></a>slot的使用</h3><h5 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h5><table>
<thead>
<tr>
<th>事件名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>标题内容</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-page-header @back=<span class="string">&quot;goBack&quot;</span> content=<span class="string">&quot;管理&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>修改标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/el-page-header&gt;</span><br></pre></td></tr></table></figure>

<h4 id="解决引用Element-UI-导致弹出多个message消息提示的问题"><a href="#解决引用Element-UI-导致弹出多个message消息提示的问题" class="headerlink" title="解决引用Element UI 导致弹出多个message消息提示的问题"></a><a href="https://www.cnblogs.com/cndarren/p/14691315.html">解决引用Element UI 导致弹出多个message消息提示的问题</a></h4><h4 id="改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框"><a href="#改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框" class="headerlink" title="改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框"></a><a href="https://blog.csdn.net/yangmiemie120/article/details/100736154">改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框</a></h4><h4 id="element-ui-change事件传值"><a href="#element-ui-change事件传值" class="headerlink" title="element-ui change事件传值"></a><a href="https://blog.csdn.net/qq_15601471/article/details/89048951">element-ui change事件传值</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@change=<span class="string">&quot;handleSelect($event)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">handleSelect</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="vue使用elementUI表单的获取select-checkbox的value值"><a href="#vue使用elementUI表单的获取select-checkbox的value值" class="headerlink" title="vue使用elementUI表单的获取select,checkbox的value值"></a><a href="https://blog.csdn.net/weixin_43834855/article/details/108817517">vue使用elementUI表单的获取select,checkbox的value值</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;el-checkbox</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;game in gameData&quot;</span></span><br><span class="line">  :label=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :key=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :data-id=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :data-group=<span class="string">&quot;game.group_id&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;game.<span class="property">name</span>&#125;&#125;&lt;/el-checkbox&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把想要的value值放在label中，将需要显示的内容放在 &lt;el-checkbox&gt;标签之间</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:label</span>=<span class="string">&quot;想要获取的value值&quot;</span>&gt;</span>&#123;&#123;显示的内容值&#125;&#125;<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>checkbox的获取可以通过label来获得，将原来的label写在<el-checkbox>{名称}&lt;/&gt;中，因为elementUI获取绑定的是label，<br>即<el-checkbox label=[value]>[label]&lt;/&gt;</p>
<p>事件传多参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;ul-list txt-left&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;(game, index) in checkedData&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label</span>=<span class="string">&quot;game.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;game.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     @<span class="attr">click</span>=<span class="string">&quot;chooseGame(index, game.id)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span> = <span class="string">&quot;isactive == index ? &#x27;blue-txt&#x27; : &#x27;&#x27; &quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;game.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">isactive</span>: <span class="number">0</span>,</span><br><span class="line">  </span><br><span class="line"><span class="title function_">chooseGame</span>(<span class="params">index, id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isactive</span> = index</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">thisGameChannels</span> = <span class="variable language_">this</span>.<span class="property">allGameChannels</span>[id]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="Element-ui-el-row-el-col里面高度不一致的问题"><a href="#Element-ui-el-row-el-col里面高度不一致的问题" class="headerlink" title="Element ui el-row el-col里面高度不一致的问题"></a><a href="https://blog.csdn.net/sinat_33255495/article/details/114366877">Element ui el-row el-col里面高度不一致的问题</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-row type=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-textarea__inner&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 33.2333px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span>test<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>用饿了吗el-row，el-col布局页面的时候会因为el-col的内容高度不统一，造成布局混乱，解决方案就是在el-row中添加type=”flex”。</p>
<p>注意：里面的内容要有设定的高度，不然加上flex也无效。</p>
]]></content>
      <categories>
        <category>前端UI框架</category>
        <category>Element</category>
      </categories>
      <tags>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-笔记</title>
    <url>/2021/01/14/Git-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在Git安装目录下，可以查看相关命令的使用（help）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git/mingw64/share/doc/git-doc/</span><br></pre></td></tr></table></figure>

<p>正确的github工作流</p>
<h4 id="提交到远程仓库报错"><a href="#提交到远程仓库报错" class="headerlink" title="提交到远程仓库报错"></a>提交到远程仓库报错</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br><span class="line"> </span><br><span class="line"> 或</span><br><span class="line"> </span><br><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:403</span><br></pre></td></tr></table></figure>

<p>解决方法，将.git/config：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = https://github.com/winney07/winney07.github.io.git</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = git@github.com:winney07/winney07.github.io.git</span><br></pre></td></tr></table></figure>



<h4 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Git-%E7%AC%94%E8%AE%B0/create.png" alt="Github创建仓库"></p>
<h3 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h3><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><ol>
<li><p>克隆远程版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化本地版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h4><ol>
<li><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看变更内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟踪所有改动过的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟踪指定的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv &lt;old&gt; &lt;new&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止跟踪文件但不删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交所有更新过的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改最后一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><ol>
<li><p>查看提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看指定文件的提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以列表方式查看指定文件的提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ol>
<li><p>撤销工作目录中所有未提交文件的修改内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销指定的未提交文件的修改内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销指定的提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h4><ol>
<li><p>显示所有本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到指定分支或标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch/tag&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有本地标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
</li>
<li><p>给予最新提交创建标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h4><ol>
<li><p>合并指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>衍合指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><ol>
<li><p>查看远程版本库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看指定远程版本库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>添加远程版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>从远程库获取代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>下载代码及快速合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>上传代码及快速合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>删除远程分支或标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; : &lt;branch/tag-name&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>上传所有标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="管理分支"><a href="#管理分支" class="headerlink" title="管理分支"></a>管理分支</h3><h4 id="1、查看本地分支"><a href="#1、查看本地分支" class="headerlink" title="1、查看本地分支"></a>1、查看本地分支</h4><p>使用 git branch命令，如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>*<strong>标识的是你当前所在的分支。</strong></p>
<h4 id="2、查看远程分支"><a href="#2、查看远程分支" class="headerlink" title="2、查看远程分支"></a>2、查看远程分支</h4><p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h4 id="3、查看所有分支"><a href="#3、查看所有分支" class="headerlink" title="3、查看所有分支"></a>3、查看所有分支</h4><p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h4 id="2、本地创建新的分支"><a href="#2、本地创建新的分支" class="headerlink" title="2、本地创建新的分支"></a>2、本地创建新的分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch save</span><br></pre></td></tr></table></figure>

<h4 id="3、切换到新的分支"><a href="#3、切换到新的分支" class="headerlink" title="3、切换到新的分支"></a>3、切换到新的分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git checkout <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout save</span><br></pre></td></tr></table></figure>

<h4 id="4、创建-切换分支"><a href="#4、创建-切换分支" class="headerlink" title="4、创建+切换分支"></a>4、创建+切换分支</h4><p>创建分支的同时切换到该分支上，命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>git checkout -b [branch name] 的效果相当于以下两步操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch <span class="selector-attr">[branch name]</span></span><br><span class="line">git checkout <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<h4 id="5、将新分支推送到github"><a href="#5、将新分支推送到github" class="headerlink" title="5、将新分支推送到github"></a>5、将新分支推送到github</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push origin <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin save</span><br></pre></td></tr></table></figure>

<h4 id="6、删除本地分支"><a href="#6、删除本地分支" class="headerlink" title="6、删除本地分支"></a>6、删除本地分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch -d <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d save</span><br></pre></td></tr></table></figure>

<h4 id="7、删除github远程分支"><a href="#7、删除github远程分支" class="headerlink" title="7、删除github远程分支"></a>7、删除github远程分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push origin :[branch name]</span><br></pre></td></tr></table></figure>

<p>分支名前的冒号代表删除。<br> 例如：</p>
<p>git push origin :save</p>
<h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h4 id="提交工作区文件到暂存区"><a href="#提交工作区文件到暂存区" class="headerlink" title="提交工作区文件到暂存区"></a>提交工作区文件到暂存区</h4><ol>
<li><p>提交工作区中所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交工作区中指定文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>提交工作区中某个文件夹中所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><ol>
<li><p>将暂存区中的文件提交到本地仓库中，即打上新版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commit_info&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a -m “commit_info”</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="查看本地仓库关联的远程仓库"><a href="#查看本地仓库关联的远程仓库" class="headerlink" title="查看本地仓库关联的远程仓库"></a>查看本地仓库关联的远程仓库</h4><ol>
<li><p>查看本地仓库关联的远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看远程仓库的url地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="解决git-pull后本地写的代码没了的问题"><a href="#解决git-pull后本地写的代码没了的问题" class="headerlink" title="解决git pull后本地写的代码没了的问题"></a>解决git pull后本地写的代码没了的问题</h4><p>第一步：git reflog</p>
<p>第二步：git reset –hard HEAD@{n}   (HEAD:为版本号，就前面那一串数字，n是你要回退到的引用位置)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 84ef223</span><br></pre></td></tr></table></figure>

<h4 id="创建分支，回退到某个版本"><a href="#创建分支，回退到某个版本" class="headerlink" title="创建分支，回退到某个版本"></a>创建分支，回退到某个版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch pagination 96ba9b3</span><br><span class="line">git branch 分支名称 版本号</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果为了测试原来的代码，将它回退到某个版本，但是为了不影响当前分支里面的内容，创建一个新的分支。  如果git branch 分支名称，不加版本号，会在当前版本下创建分支。   如果需要回退到某个版本，需要在创建分支的时候加上版本号。</p>
</blockquote>
<p>如果要切换回原来的分支(master)，要先对新创建的分支(pagination)的内容提交，这个提交只会提交到pagination分支里面，不会影响到master分支</p>
<p>提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;复习&quot;</span><br></pre></td></tr></table></figure>

<p>切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h4 id="解决pre-commit-hook-failed-add-–no-verify-的问题"><a href="#解决pre-commit-hook-failed-add-–no-verify-的问题" class="headerlink" title="解决pre -commit hook failed (add –no-verify)的问题"></a><a href="https://www.jianshu.com/p/aac394600727">解决pre -commit hook failed (add –no-verify)的问题</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .git</span><br><span class="line"></span><br><span class="line">rm hooks/pre-commit</span><br></pre></td></tr></table></figure>



<p>git commit 不单保存了当前的版本号还保存了他的父版本号</p>
<h4 id="查看命令："><a href="#查看命令：" class="headerlink" title="查看命令："></a>查看命令：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git / git help</span><br></pre></td></tr></table></figure>

<h4 id="查看所有命令："><a href="#查看所有命令：" class="headerlink" title="查看所有命令："></a>查看所有命令：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help -a</span><br></pre></td></tr></table></figure>

<blockquote>
<p>向下翻页：F；向上翻页：B；退出：Q</p>
</blockquote>
<h4 id="查看使用手册："><a href="#查看使用手册：" class="headerlink" title="查看使用手册："></a>查看使用手册：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help -g</span><br></pre></td></tr></table></figure>

<h4 id="查看某个命令的详细使用："><a href="#查看某个命令的详细使用：" class="headerlink" title="查看某个命令的详细使用："></a>查看某个命令的详细使用：</h4><p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help add</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按Q可以退出</p>
</blockquote>
<p><code>.git</code>是做版本控制的，如果想去除，直接删了这个目录。</p>
<p>是隐藏文件，在mac 用<code>open .git</code>打开（在.git的上层目录）</p>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><blockquote>
<p>这些提交会包含在git提交里面</p>
</blockquote>
<h5 id="查看config信息"><a href="#查看config信息" class="headerlink" title="查看config信息"></a>查看config信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h5 id="配置name和email"><a href="#配置name和email" class="headerlink" title="配置name和email"></a>配置name和email</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#x27;winney&#x27;</span><br><span class="line">git config --global user.email &#x27;...@..&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --unset --global user.name</span><br></pre></td></tr></table></figure>

<h5 id="重新设置"><a href="#重新设置" class="headerlink" title="重新设置"></a>重新设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#x27;winney&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="设置ui"><a href="#设置ui" class="headerlink" title="设置ui"></a>设置ui</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure>



<blockquote>
<p>这些配置会保存到一个.gitconfig文件里</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.gitconfig      // ~：代表当前用户的主目录</span><br></pre></td></tr></table></figure>



<h4 id="项目版本管理"><a href="#项目版本管理" class="headerlink" title="项目版本管理"></a>项目版本管理</h4><h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 目录名</span><br><span class="line">cd 目录名</span><br><span class="line">git init   // 生成.git目录   用于版本控制  git需要或生成的东西都会放这里面   进行跟踪</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不想用git跟踪这个项目，可以把.git目录删除掉</p>
</blockquote>
<p>查看<code>.git</code>目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .git</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<blockquote>
<p>config目录：存储项目配置的信息</p>
</blockquote>
<p>Mac系统，视图中查看.git目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open .git     //  回到项目的根目录，执行这句</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因在Mac系统中，看不到隐藏的目录</p>
</blockquote>
<h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;备注信息&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log       //  查看提交记录</span><br></pre></td></tr></table></figure>



<p>Git基本工作流程</p>
<p>Git初始化及仓库创建和操作</p>
<p>Git管理远程仓库</p>
<p>Github Pages搭建网站</p>
<h4 id="客户端提交软件"><a href="#客户端提交软件" class="headerlink" title="客户端提交软件"></a>客户端提交软件</h4><h5 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h5>]]></content>
      <categories>
        <category>版本控制系统</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Git命令</title>
    <url>/2021/02/19/Github-Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Git Cheat Sheet 中文版：<a href="https://github.com/flyhigher139/Git-Cheat-Sheet">Git-Cheat-Sheet</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="列出当前配置："><a href="#列出当前配置：" class="headerlink" title="列出当前配置："></a>列出当前配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h4 id="列出repository配置："><a href="#列出repository配置：" class="headerlink" title="列出repository配置："></a>列出repository配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --local --list</span><br></pre></td></tr></table></figure>

<h4 id="列出全局配置："><a href="#列出全局配置：" class="headerlink" title="列出全局配置："></a>列出全局配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>



<h4 id="列出系统配置："><a href="#列出系统配置：" class="headerlink" title="列出系统配置："></a>列出系统配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure>



<h4 id="设置用户名："><a href="#设置用户名：" class="headerlink" title="设置用户名："></a>设置用户名：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name “[firstname lastname]”</span><br></pre></td></tr></table></figure>



<h4 id="设置用户邮箱："><a href="#设置用户邮箱：" class="headerlink" title="设置用户邮箱："></a>设置用户邮箱：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email “[valid-email]”</span><br></pre></td></tr></table></figure>



<h4 id="设置git命令输出为彩色："><a href="#设置git命令输出为彩色：" class="headerlink" title="设置git命令输出为彩色："></a>设置git命令输出为彩色：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure>



<h4 id="设置git使用的文本编辑器设："><a href="#设置git使用的文本编辑器设：" class="headerlink" title="设置git使用的文本编辑器设："></a>设置git使用的文本编辑器设：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.editor vi</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="Repository配置对应的配置文件路径-–local-："><a href="#Repository配置对应的配置文件路径-–local-：" class="headerlink" title="Repository配置对应的配置文件路径[–local]："></a>Repository配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;repo&gt;/.git/config</span><br></pre></td></tr></table></figure>



<h4 id="用户全局配置对应的配置文件路径-–global-："><a href="#用户全局配置对应的配置文件路径-–global-：" class="headerlink" title="用户全局配置对应的配置文件路径[–global]："></a>用户全局配置对应的配置文件路径[–global]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure>



<h4 id="系统配置对应的配置文件路径-–local-："><a href="#系统配置对应的配置文件路径-–local-：" class="headerlink" title="系统配置对应的配置文件路径[–local]："></a>系统配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/gitconfig</span><br></pre></td></tr></table></figure>



<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="复制一个已创建的仓库"><a href="#复制一个已创建的仓库" class="headerlink" title="复制一个已创建的仓库:"></a>复制一个已创建的仓库:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过 SSH</span><br><span class="line">git clone ssh://user@domain.com/repo.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过 HTTP</span><br><span class="line">git clone http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure>



<h4 id="创建一个新的本地仓库"><a href="#创建一个新的本地仓库" class="headerlink" title="创建一个新的本地仓库:"></a>创建一个新的本地仓库:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>



<h3 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h3><h4 id="显示工作路径下已修改的文件："><a href="#显示工作路径下已修改的文件：" class="headerlink" title="显示工作路径下已修改的文件："></a>显示工作路径下已修改的文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>



<h4 id="显示与上次提交版本文件的不同："><a href="#显示与上次提交版本文件的不同：" class="headerlink" title="显示与上次提交版本文件的不同："></a>显示与上次提交版本文件的不同：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>



<h4 id="把当前所有修改添加到下次提交中："><a href="#把当前所有修改添加到下次提交中：" class="headerlink" title="把当前所有修改添加到下次提交中："></a>把当前所有修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>



<h4 id="把对某个文件的修改添加到下次提交中："><a href="#把对某个文件的修改添加到下次提交中：" class="headerlink" title="把对某个文件的修改添加到下次提交中："></a>把对某个文件的修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -p &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="提交本地的所有修改："><a href="#提交本地的所有修改：" class="headerlink" title="提交本地的所有修改："></a>提交本地的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>



<h4 id="提交之前已标记的变化："><a href="#提交之前已标记的变化：" class="headerlink" title="提交之前已标记的变化："></a>提交之前已标记的变化：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<h4 id="附加消息提交："><a href="#附加消息提交：" class="headerlink" title="附加消息提交："></a>附加消息提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;message here&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="提交，并将提交时间设置为之前的某个日期"><a href="#提交，并将提交时间设置为之前的某个日期" class="headerlink" title="提交，并将提交时间设置为之前的某个日期:"></a>提交，并将提交时间设置为之前的某个日期:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --date=&quot;`date --date=&#x27;n day ago&#x27;`&quot; -am &quot;Commit Message&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h4><blockquote>
<p>注：请勿修改已发布的提交记录!</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交的committer-date："><a href="#修改上次提交的committer-date：" class="headerlink" title="修改上次提交的committer date："></a>修改上次提交的committer date：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=&quot;date&quot; git commit --amend</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交的author-date："><a href="#修改上次提交的author-date：" class="headerlink" title="修改上次提交的author date："></a>修改上次提交的author date：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend --date=&quot;date&quot;</span><br></pre></td></tr></table></figure>

<h4 id="把当前分支中未提交的修改移动到其他分支："><a href="#把当前分支中未提交的修改移动到其他分支：" class="headerlink" title="把当前分支中未提交的修改移动到其他分支："></a>把当前分支中未提交的修改移动到其他分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git checkout branch2</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>



<h4 id="将-stashed-changes-应用到当前分支："><a href="#将-stashed-changes-应用到当前分支：" class="headerlink" title="将 stashed changes 应用到当前分支："></a>将 stashed changes 应用到当前分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>



<h4 id="删除最新一次的-stashed-changes："><a href="#删除最新一次的-stashed-changes：" class="headerlink" title="删除最新一次的 stashed changes："></a>删除最新一次的 stashed changes：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>



<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="从当前目录的所有文件中查找文本内容："><a href="#从当前目录的所有文件中查找文本内容：" class="headerlink" title="从当前目录的所有文件中查找文本内容："></a>从当前目录的所有文件中查找文本内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git grep &quot;Hello&quot;</span><br></pre></td></tr></table></figure>



<h4 id="在某一版本中搜索文本："><a href="#在某一版本中搜索文本：" class="headerlink" title="在某一版本中搜索文本："></a>在某一版本中搜索文本：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git grep &quot;Hello&quot; v2.5</span><br></pre></td></tr></table></figure>



<h3 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h3><h4 id="从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）："><a href="#从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）：" class="headerlink" title="从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）："></a>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>



<h4 id="显示所有提交（仅显示提交的hash和message）："><a href="#显示所有提交（仅显示提交的hash和message）：" class="headerlink" title="显示所有提交（仅显示提交的hash和message）："></a>显示所有提交（仅显示提交的hash和message）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>



<h4 id="显示某个用户的所有提交："><a href="#显示某个用户的所有提交：" class="headerlink" title="显示某个用户的所有提交："></a>显示某个用户的所有提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --author=&quot;username&quot;</span><br></pre></td></tr></table></figure>



<h4 id="显示某个文件的所有修改："><a href="#显示某个文件的所有修改：" class="headerlink" title="显示某个文件的所有修改："></a>显示某个文件的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集："><a href="#仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集：" class="headerlink" title="仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集："></a>仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline &lt;origin/master&gt;..&lt;remote/master&gt; --left-right</span><br></pre></td></tr></table></figure>



<h4 id="谁，在什么时间，修改了文件的什么内容："><a href="#谁，在什么时间，修改了文件的什么内容：" class="headerlink" title="谁，在什么时间，修改了文件的什么内容："></a>谁，在什么时间，修改了文件的什么内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="显示reflog："><a href="#显示reflog：" class="headerlink" title="显示reflog："></a>显示reflog：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog show </span><br></pre></td></tr></table></figure>



<h3 id="删除reflog："><a href="#删除reflog：" class="headerlink" title="删除reflog："></a>删除reflog：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog delete</span><br></pre></td></tr></table></figure>



<h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><h4 id="列出所有的分支："><a href="#列出所有的分支：" class="headerlink" title="列出所有的分支："></a>列出所有的分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>



<h4 id="列出所有的远端分支："><a href="#列出所有的远端分支：" class="headerlink" title="列出所有的远端分支："></a>列出所有的远端分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>



<h4 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支:"></a>创建并切换到新分支:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="基于当前分支创建新分支："><a href="#基于当前分支创建新分支：" class="headerlink" title="基于当前分支创建新分支："></a>基于当前分支创建新分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="基于远程分支创建新的可追溯的分支："><a href="#基于远程分支创建新的可追溯的分支：" class="headerlink" title="基于远程分支创建新的可追溯的分支："></a>基于远程分支创建新的可追溯的分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --track &lt;new-branch&gt;&lt;remote-branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支:"></a>删除本地分支:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="强制删除一个本地分支："><a href="#强制删除一个本地分支：" class="headerlink" title="强制删除一个本地分支："></a>强制删除一个本地分支：</h4><blockquote>
<p>注：将会丢失未合并的修改</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="给当前版本打标签："><a href="#给当前版本打标签：" class="headerlink" title="给当前版本打标签："></a>给当前版本打标签：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>



<h4 id="给当前版本打标签并附加消息："><a href="#给当前版本打标签并附加消息：" class="headerlink" title="给当前版本打标签并附加消息："></a>给当前版本打标签并附加消息：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>



<h3 id="更新与发布"><a href="#更新与发布" class="headerlink" title="更新与发布"></a>更新与发布</h3><h4 id="列出当前配置的远程端："><a href="#列出当前配置的远程端：" class="headerlink" title="列出当前配置的远程端："></a>列出当前配置的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>



<h4 id="显示远程端的信息："><a href="#显示远程端的信息：" class="headerlink" title="显示远程端的信息："></a>显示远程端的信息：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>



<h4 id="添加新的远程端："><a href="#添加新的远程端：" class="headerlink" title="添加新的远程端："></a>添加新的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt;&lt;url&gt;</span><br></pre></td></tr></table></figure>



<h4 id="下载远程端版本，但不合并到HEAD中："><a href="#下载远程端版本，但不合并到HEAD中：" class="headerlink" title="下载远程端版本，但不合并到HEAD中："></a>下载远程端版本，但不合并到HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>



<h4 id="下载远程端版本，并自动与HEAD版本合并："><a href="#下载远程端版本，并自动与HEAD版本合并：" class="headerlink" title="下载远程端版本，并自动与HEAD版本合并："></a>下载远程端版本，并自动与HEAD版本合并：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote pull &lt;remote&gt;&lt;url&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将远程端版本合并到本地版本中："><a href="#将远程端版本合并到本地版本中：" class="headerlink" title="将远程端版本合并到本地版本中："></a>将远程端版本合并到本地版本中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>



<h4 id="以rebase方式将远端分支与本地合并："><a href="#以rebase方式将远端分支与本地合并：" class="headerlink" title="以rebase方式将远端分支与本地合并："></a>以rebase方式将远端分支与本地合并：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt;&lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将本地版本发布到远程端："><a href="#将本地版本发布到远程端：" class="headerlink" title="将本地版本发布到远程端："></a>将本地版本发布到远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push remote &lt;remote&gt;&lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除远程端分支："><a href="#删除远程端分支：" class="headerlink" title="删除远程端分支："></a>删除远程端分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</span><br></pre></td></tr></table></figure>



<h4 id="发布标签"><a href="#发布标签" class="headerlink" title="发布标签:"></a>发布标签:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>



<h3 id="合并与重置-Rebase"><a href="#合并与重置-Rebase" class="headerlink" title="合并与重置(Rebase)"></a>合并与重置(Rebase)</h3><h4 id="将分支合并到当前HEAD中："><a href="#将分支合并到当前HEAD中：" class="headerlink" title="将分支合并到当前HEAD中："></a>将分支合并到当前HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将当前HEAD版本重置到分支中"><a href="#将当前HEAD版本重置到分支中" class="headerlink" title="将当前HEAD版本重置到分支中:"></a>将当前HEAD版本重置到分支中:</h4><blockquote>
<p>注：请勿重置已发布的提交!</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="退出重置"><a href="#退出重置" class="headerlink" title="退出重置:"></a>退出重置:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure>



<h4 id="解决冲突后继续重置："><a href="#解决冲突后继续重置：" class="headerlink" title="解决冲突后继续重置："></a>解决冲突后继续重置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>



<h4 id="使用配置好的merge-tool-解决冲突："><a href="#使用配置好的merge-tool-解决冲突：" class="headerlink" title="使用配置好的merge tool 解决冲突："></a>使用配置好的merge tool 解决冲突：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>



<h4 id="在编辑器中手动解决冲突后，标记文件为已解决冲突："><a href="#在编辑器中手动解决冲突后，标记文件为已解决冲突：" class="headerlink" title="在编辑器中手动解决冲突后，标记文件为已解决冲突："></a>在编辑器中手动解决冲突后，标记文件为已解决冲突：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;resolved-file&gt;</span><br><span class="line"></span><br><span class="line">git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="合并提交："><a href="#合并提交：" class="headerlink" title="合并提交："></a>合并提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i &lt;commit-just-before-first&gt;</span><br></pre></td></tr></table></figure>



<h4 id="把上面的内容替换为下面的内容："><a href="#把上面的内容替换为下面的内容：" class="headerlink" title="把上面的内容替换为下面的内容："></a>把上面的内容替换为下面的内容：</h4><h4 id="原内容："><a href="#原内容：" class="headerlink" title="原内容："></a>原内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line">pick &lt;commit_id2&gt;</span><br><span class="line"></span><br><span class="line">pick &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure>



<h4 id="替换为："><a href="#替换为：" class="headerlink" title="替换为："></a>替换为：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line">squash &lt;commit_id2&gt;</span><br><span class="line"></span><br><span class="line">squash &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure>



<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><h4 id="放弃工作目录下的所有修改："><a href="#放弃工作目录下的所有修改：" class="headerlink" title="放弃工作目录下的所有修改："></a>放弃工作目录下的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>



<h4 id="移除缓存区的所有文件（i-e-撤销上次git-add）"><a href="#移除缓存区的所有文件（i-e-撤销上次git-add）" class="headerlink" title="移除缓存区的所有文件（i.e. 撤销上次git add）:"></a>移除缓存区的所有文件（i.e. 撤销上次git add）:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure>



<h4 id="放弃某个文件的所有本地修改："><a href="#放弃某个文件的所有本地修改：" class="headerlink" title="放弃某个文件的所有本地修改："></a>放弃某个文件的所有本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="重置一个提交（通过创建一个截然不同的新提交）"><a href="#重置一个提交（通过创建一个截然不同的新提交）" class="headerlink" title="重置一个提交（通过创建一个截然不同的新提交）"></a>重置一个提交（通过创建一个截然不同的新提交）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："><a href="#将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：" class="headerlink" title="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："></a>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="用远端分支强制覆盖本地分支："><a href="#用远端分支强制覆盖本地分支：" class="headerlink" title="用远端分支强制覆盖本地分支："></a>用远端分支强制覆盖本地分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;remote/branch&gt; e.g., upstream/master, origin/my-feature</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："><a href="#将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："></a>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："><a href="#将HEAD重置到上一次提交的版本，并保留未提交的本地修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："></a>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除添加-gitignore文件前错误提交的文件："><a href="#删除添加-gitignore文件前错误提交的文件：" class="headerlink" title="删除添加.gitignore文件前错误提交的文件："></a>删除添加.gitignore文件前错误提交的文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &quot;remove xyz file&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git-Flow"></a>Git-Flow</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%AE%89%E8%A3%85">安装</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%BC%80%E5%A7%8B">开始</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E7%89%B9%E6%80%A7">特性</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%81%9A%E4%B8%80%E4%B8%AArelease%E7%89%88%E6%9C%AC">做一个release版本</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E7%B4%A7%E6%80%A5%E4%BF%AE%E5%A4%8D">紧急修复</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#commands">Commands</a></li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>你需要有一个可以工作的 git 作为前提。</li>
<li>Git     flow 可以工作在 OSX, Linux 和 Windows之下</li>
</ul>
<h5 id="OSX-Homebrew"><a href="#OSX-Homebrew" class="headerlink" title="OSX Homebrew:"></a>OSX Homebrew:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git-flow</span><br></pre></td></tr></table></figure>

<h5 id="OSX-Macports"><a href="#OSX-Macports" class="headerlink" title="OSX Macports:"></a>OSX Macports:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port install git-flow</span><br></pre></td></tr></table></figure>



<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install git-flow</span><br></pre></td></tr></table></figure>



<h5 id="Windows-Cygwin"><a href="#Windows-Cygwin" class="headerlink" title="Windows (Cygwin):"></a>Windows (Cygwin):</h5><p>安装 git-flow, 你需要 wget 和 util-linux。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure>



<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><ul>
<li>为了自定义你的项目，Git flow 需要初始化过程。</li>
<li>使用     git-flow，从初始化一个现有的 git 库内开始。</li>
<li>初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure>



<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>为即将发布的版本开发新功能特性。</li>
<li>这通常只存在开发者的库中。</li>
</ul>
<h4 id="创建一个新特性"><a href="#创建一个新特性" class="headerlink" title="创建一个新特性:"></a>创建一个新特性:</h4><p>下面操作创建了一个新的feature分支，并切换到该分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature start MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="完成新特性的开发"><a href="#完成新特性的开发" class="headerlink" title="完成新特性的开发:"></a>完成新特性的开发:</h4><p>完成开发新特性。这个动作执行下面的操作：</p>
<ol>
<li>合并 MYFEATURE     分支到 ‘develop’</li>
<li>删除这个新特性分支</li>
<li>切换回     ‘develop’ 分支</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature finish MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="发布新特性"><a href="#发布新特性" class="headerlink" title="发布新特性:"></a>发布新特性:</h4><p>你是否合作开发一项新特性？ 发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature publish MYFEATURE</span><br></pre></td></tr></table></figure>

<p>取得一个发布的新特性分支:</p>
<p>取得其它用户发布的新特性分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature pull origin MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="追溯远端上的特性"><a href="#追溯远端上的特性" class="headerlink" title="追溯远端上的特性:"></a>追溯远端上的特性:</h4><p>通过下面命令追溯远端上的特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature track MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="做一个release版本"><a href="#做一个release版本" class="headerlink" title="做一个release版本"></a>做一个release版本</h4><ul>
<li>支持一个新的用于生产环境的发布版本。</li>
<li>允许修正小问题，并为发布版本准备元数据。</li>
</ul>
<h4 id="开始创建release版本"><a href="#开始创建release版本" class="headerlink" title="开始创建release版本:"></a>开始创建release版本:</h4><ul>
<li>开始创建release版本，使用 git flow release 命令。</li>
<li>‘release’     分支的创建基于 ‘develop’ 分支。</li>
<li>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。</li>
<li>这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。</li>
</ul>
<p>git flow release start RELEASE [BASE]</p>
<p>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow release publish RELEASE</span><br></pre></td></tr></table></figure>

<p>(你可以通过 git flow release track RELEASE 命令追溯远端的 release 版本)</p>
<h4 id="完成-release-版本"><a href="#完成-release-版本" class="headerlink" title="完成 release 版本:"></a>完成 release 版本:</h4><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：</p>
<ol>
<li>归并     release 分支到 ‘master’ 分支。</li>
<li>用     release 分支名打 Tag</li>
<li>归并     release 分支到 ‘develop’</li>
<li>移除     release 分支。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow release finish RELEASE</span><br></pre></td></tr></table></figure>

<p>不要忘记使用git push –tags将tags推送到远端</p>
<h4 id="紧急修复"><a href="#紧急修复" class="headerlink" title="紧急修复"></a>紧急修复</h4><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>
<p>开始 git flow 紧急修复:</p>
<p>像其它 git flow 命令一样, 紧急修复分支开始自：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow hotfix start VERSION [BASENAME]</span><br></pre></td></tr></table></figure>

<p>VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]`为finish release时填写的版本号</p>
<h4 id="完成紧急修复"><a href="#完成紧急修复" class="headerlink" title="完成紧急修复:"></a>完成紧急修复:</h4><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow hotfix finish VERSION</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4></li>
<li><ul>
<li><p>有人说是这3个单词的缩写</p>
</li>
<li><ul>
<li>global 全局</li>
<li>information 信息</li>
<li>track 跟踪器</li>
</ul>
</li>
<li><p>版本控制工具</p>
</li>
</ul>
</li>
<li></li>
<li><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4></li>
<li><ul>
<li><p>Git和Linux之父，Linus</p>
</li>
<li><p>Github让Git变得更易用</p>
</li>
<li><p>官网</p>
</li>
<li><ul>
<li><p>浏览器中使用</p>
</li>
<li><ul>
<li>commit（当前版本）</li>
<li>在提交版本的时候，还保存了父版本号，parent</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端</p>
</li>
<li><p>客户端操作</p>
</li>
<li><ul>
<li><p>简单分支操作</p>
</li>
<li><ul>
<li>master分支（一般是放到服务器跑的代码）。master分支是默认分支，是不可以被删除的。</li>
<li>例如创建idea分支，用于开发测试性代码是非常方便的，不会对原来分支的有影响。</li>
<li>当前分支是不能被删除的，要想删除idea分支，就要切换到其他分支，然后删除idea分支</li>
<li>如果只想删除github上的idea分支，本地的idea分支不删除的话，选择unpublic，而不是使用delete，如果使用delete，就会将本地和github的都删除。</li>
<li>可以在github修改默认分支，不是master，但一般不做这样的修改。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h5><p><a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands.png">https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands.png</a></p>
<h5 id="Git-flow-schema"><a href="#Git-flow-schema" class="headerlink" title="Git flow schema"></a>Git flow schema</h5><p><a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands-without-flow.png">https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands-without-flow.png</a></p>
]]></content>
      <categories>
        <category>版本控制系统</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2021/02/19/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596">git基本操作，一篇文章就够了！</a></p>
<p>git的通用操作流程如下图（来源于网络）</p>
<h4 id="主要涉及到四个关键点："><a href="#主要涉及到四个关键点：" class="headerlink" title="主要涉及到四个关键点："></a>主要涉及到四个关键点：</h4><ol>
<li><p>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</p>
</li>
<li><p>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</p>
</li>
<li><p>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</p>
<p>在<code>Git/RybyDemo/grit/.git/refs/heads</code> 目录中修改master:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ebdec5ff037c7368b2b1827fadc66741d1ed14ed</span><br></pre></td></tr></table></figure>

<p>修改<code>HEAD</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ref:refs/heads/master</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</p>
</li>
</ol>
<p>更细节的来看：</p>
<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>
<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>
<ol>
<li><p>git管理配置的命令；</p>
<p><strong>几个核心存储区的交互命令：</strong></p>
</li>
<li><p>工作区与暂存区的交互；</p>
</li>
<li><p>暂存区与本地仓库（分支）上的交互；</p>
</li>
<li><p>本地仓库与远程仓库的交互。</p>
</li>
</ol>
<h4 id="2-git配置命令"><a href="#2-git配置命令" class="headerlink" title="2. git配置命令"></a>2. git配置命令</h4><p>查询配置信息</p>
<ol>
<li>列出当前配置：<code>gitconfig     --list</code>;</li>
<li>列出repository配置：<code>gitconfig --local     --list</code>;</li>
<li>列出全局配置：<code>gitconfig     --global --list</code>;</li>
<li>列出系统配置：<code>gitconfig     --system --list</code>;</li>
</ol>
<p>第一次使用git，配置用户信息</p>
<ol>
<li>配置用户名：<code>gitconfig     --global user.name &quot;your name&quot;</code>;</li>
<li>配置用户邮箱：<code>gitconfig     --global user.email &quot;youremail@github.com&quot;</code>;</li>
</ol>
<p>其他配置</p>
<ol>
<li>配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：<code>gitconfig --global     merge.toolvimdiff</code>;</li>
<li>配置git命令输出为彩色的：<code>gitconfig     --global color.ui auto</code>;</li>
<li>配置git使用的文本编辑器：<code>gitconfig     --global core.editor vi</code>;</li>
</ol>
<h4 id="3-工作区上的操作命令"><a href="#3-工作区上的操作命令" class="headerlink" title="3. 工作区上的操作命令"></a>3. 工作区上的操作命令</h4><p>新建仓库</p>
<ol>
<li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>gitinit</code>；</li>
<li>从远程git仓库复制项目：<code>git clone     &lt;url&gt;</code>，如：git clone git://github.com/wasd/example.git;克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone     git://github.com/wasd/example.git mygit</code>；</li>
</ol>
<p>提交</p>
<ol>
<li>提交工作区所有文件到暂存区：<code>git     add .</code></li>
<li>提交工作区中指定文件到暂存区：<code>git     add &lt;file1&gt;&lt;file2&gt; ...</code>;</li>
<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git     add [dir]</code>;</li>
</ol>
<p>撤销</p>
<ol>
<li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>gitrm&lt;file1&gt;&lt;file2&gt;</code>;</li>
<li>从暂存区中删除文件，但是工作区依然还有该文件:<code>gitrm --cached &lt;file&gt;</code>;</li>
<li>取消暂存区已经暂存的文件：<code>git     reset HEAD &lt;file&gt;...</code>;</li>
<li>撤销上一次对文件的操作：<code>git     checkout --&lt;file&gt;</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li>
<li>隐藏当前变更，以便能够切换分支：<code>git     stash</code>；</li>
<li>查看当前所有的储藏：<code>git     stash list</code>；</li>
<li>应用最新的储藏：<code>git     stash apply</code>，如果想应用更早的储藏：<code>git     stash apply stash@&#123;2&#125;</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply     --index</code>;</li>
<li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git     stash drop stash&#123;0&#125;</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git     stash pop</code>;</li>
<li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git     stash show -p stash@&#123;0&#125; | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p     | git apply -R</code>；</li>
</ol>
<p>更新文件</p>
<ol>
<li>重命名文件，并将已改名文件提交到暂存区：<code>git mv     [file-original] [file-renamed]</code>;</li>
</ol>
<p>查新信息</p>
<ol>
<li>查询当前工作区所有文件的状态：<code>git     status</code>;</li>
<li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git     diff &lt;file-name&gt;</code>;</li>
</ol>
<h4 id="4-暂存区上的操作命令"><a href="#4-暂存区上的操作命令" class="headerlink" title="4. 暂存区上的操作命令"></a>4. 暂存区上的操作命令</h4><p>提交文件到版本库</p>
<ol>
<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git     commit -m &quot;commit_info&quot;</code>;</li>
<li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git     commit -a -m &quot;commit_info&quot;</code>;</li>
<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git     commit --amend</code>;</li>
</ol>
<p>查看信息</p>
<ol>
<li>比较暂存区与上一版本的差异：<code>git     diff --cached</code>;</li>
<li>指定文件在暂存区和本地仓库的不同：<code>git     diff &lt;file-name&gt; --cached</code>;</li>
<li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git     log -p -2</code>;</li>
</ol>
<p>打标签</p>
<p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
<ol>
<li>列出现在所有的标签：<code>git     tag</code>;</li>
<li>使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：<code>git tag -l     &quot;v1.4.2.*&quot;</code>;</li>
<li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4     -m &quot;my version 1.4&quot;</code>;</li>
<li>使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git     show v1.4</code>;</li>
<li>如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5     -m &quot;my signed 1.5 tag&quot;</code>;</li>
<li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li>
<li>创建一个轻量级标签的话，就直接使用git tag命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git     tag v1.5</code>;</li>
<li>将标签推送到远程仓库中：git push origin ，如<code>git push origin     v1.5</code>；</li>
<li>将本地所有的标签全部推送到远程仓库中：<code>git     push origin --tags</code>;</li>
</ol>
<p>分支管理</p>
<ol>
<li>创建分支：<code>git     branch &lt;branch-name&gt;</code>，如<code>git     branch testing</code>；</li>
<li>从当前所处的分支切换到其他分支：<code>git     checkout &lt;branch-name&gt;</code>，如<code>git     checkout testing</code>；</li>
<li>新建并切换到新建分支上：<code>git     checkout -b &lt;branch-name&gt;</code>;</li>
<li>删除分支：<code>git     branch -d &lt;branch-name&gt;</code>；</li>
<li>将当前分支与指定分支进行合并：<code>git     merge &lt;branch-name&gt;</code>;</li>
<li>显示本地仓库的所有分支：<code>git     branch</code>;</li>
<li>查看各个分支最后一个提交对象的信息：<code>git     branch -v</code>;</li>
<li>查看哪些分支已经合并到当前分支：<code>git     branch --merged</code>;</li>
<li>查看当前哪些分支还没有合并到当前分支：<code>git     branch --no-merged</code>;</li>
<li>把远程分支合并到当前分支：<code>git     merge &lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git merge     origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>
<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b     &lt;branch-name&gt;&lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git checkout -b     serverfix origin/serverfix</code>;</li>
<li>从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git     push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git     pull</code>；</li>
<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git     rebase &lt;rebase-branch&gt;&lt;branch-name&gt;</code>，如<code>git rebase master     server</code>，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto     &lt;rebase-branch&gt;&lt;feature branch&gt;&lt;sub-feature-branch&gt;</code>，如<code>git rebase --onto     master server client</code>；使用rebase操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作</strong>；</li>
</ol>
<h4 id="5-本地仓库上的操作"><a href="#5-本地仓库上的操作" class="headerlink" title="5.本地仓库上的操作"></a>5.本地仓库上的操作</h4><ol>
<li>查看本地仓库关联的远程仓库：<code>git     remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li>
<li>添加远程仓库，一般会取一个简短的别名：<code>git     remote add [remote-name] [url]</code>，比如：<code>git remote     add example git://github.com/example/example.git</code>;</li>
<li>从远程仓库中抓取本地仓库中没有的更新：<code>git     fetch [remote-name]</code>，如<code>git     fetch origin</code>;使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git     pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li>
<li>将本地仓库某分支推送到远程仓库上：<code>git     push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git     push &lt;remote-name&gt;&lt;local-branch&gt;:&lt;remote-branch&gt;</code>，如<code>git push origin     serverfix:awesomebranch</code>;如果想删除远程分支：<code>git     push [romote-name] :&lt;remote-branch&gt;</code>，如<code>git push origin     :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li>
<li>查看远程仓库的详细信息：<code>git     remote show origin</code>；</li>
<li>修改某个远程仓库在本地的简称：<code>git     remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li>
<li>移除远程仓库：<code>git     remote rm [remote-name]</code>；</li>
</ol>
<h4 id="6-忽略文件-gitignore"><a href="#6-忽略文件-gitignore" class="headerlink" title="6. 忽略文件.gitignore"></a>6. 忽略文件.gitignore</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。如下例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略 build/ 目录下的所有文件</span><br><span class="line">build/</span><br><span class="line"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc/**/*.txt</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>参考资料</p>
<p><a href="">非常详细准确的git学习资料</a>；</p>
<p><a href="">git-cheat-sheet中文版</a></p>
<p><a href="">命令总结，资料一般，不够详细，作参考</a></p>
<p><a href="">常用命令很全</a></p>
<p> 作者：你听___<br> 链接：<a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a><br> 来源：掘金<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>阮一峰网络日志：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<h3 id="1-常用-Git-命令清单"><a href="#1-常用-Git-命令清单" class="headerlink" title="1.常用 Git 命令清单"></a>1.常用 Git 命令清单</h3><p>我每天使用 Git ，但是很多命令记不住。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="../images/clip_image005.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<p>§ Workspace：工作区</p>
<p>§ Index / Stage：暂存区</p>
<p>§ Repository：仓库区（或本地仓库）</p>
<p>§ Remote：远程仓库</p>
<h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ gitinit</span><br><span class="line"> </span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ gitinit[project-name]</span><br><span class="line"> </span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 显示当前的Git配置</span><br><span class="line">$ gitconfig--list</span><br><span class="line"> </span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ gitconfig-e [--global]</span><br><span class="line"> </span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ gitconfig[--global] user.name &quot;[name]&quot;</span><br><span class="line">$ gitconfig[--global]user.email&quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1][file2]...</span><br><span class="line"> </span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"> </span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"> </span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"> </span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ gitrm[file1][file2]...</span><br><span class="line"> </span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ gitrm--cached [file]</span><br><span class="line"> </span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original][file-renamed]</span><br></pre></td></tr></table></figure>

<h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"> </span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1][file2]...-m [message]</span><br><span class="line"> </span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"> </span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"> </span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"> </span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1][file2]...</span><br></pre></td></tr></table></figure>

<h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"> </span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"> </span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch][commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch][remote-branch]</span><br><span class="line"> </span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"> </span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"> </span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch][remote-branch]</span><br><span class="line"> </span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"> </span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"> </span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"> </span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr[remote/branch]</span><br></pre></td></tr></table></figure>

<h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag][commit]</span><br><span class="line"> </span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"> </span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"> </span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"> </span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote][tag]</span><br><span class="line"> </span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote]--tags</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch][tag]</span><br></pre></td></tr></table></figure>

<h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"> </span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"> </span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"> </span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ gitwhatchanged[file]</span><br><span class="line"> </span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"> </span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5--pretty --oneline</span><br><span class="line"> </span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ gitshortlog-sn</span><br><span class="line"> </span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"> </span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"> </span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"> </span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat&quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"> </span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ gitreflog</span><br></pre></td></tr></table></figure>

<h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"> </span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"> </span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"> </span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname][url]</span><br><span class="line"> </span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote][branch]</span><br><span class="line"> </span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote][branch]</span><br><span class="line"> </span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote]--force</span><br><span class="line"> </span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote]--all</span><br></pre></td></tr></table></figure>

<h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"> </span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit][file]</span><br><span class="line"> </span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"> </span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"> </span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"> </span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>

<h3 id="Git-W3C"><a href="#Git-W3C" class="headerlink" title="Git-W3C"></a>Git-W3C</h3><p><a href="https://www.w3cschool.cn/git/git-tutorial.html">Git教程</a></p>
<p><strong>window平台下， 下载网址：</strong><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
<p>安装完之后，在电脑 开始，输入 git 找到 Git Bash</p>
<h3 id="查看git安装目录"><a href="#查看git安装目录" class="headerlink" title="查看git安装目录"></a>查看git安装目录</h3><p>有时候需要知道Git在电脑中的安装位置，这里简单介绍下:</p>
<ul>
<li><strong>Mac平台</strong>:在命令行中输入which git, 就会显示git的安装位置了;</li>
<li><strong>Windows平台</strong>:打开cmd,输入where git就会显示git的安装路径了.</li>
</ul>
<p>查看git的安装所在目录：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">where git</span><br></pre></td></tr></table></figure>

<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>配置个人的用户名称和电子邮件地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;w3c&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> w3c@w3cschool.<span class="property">cn</span> </span><br></pre></td></tr></table></figure>

<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p>
<p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config user.<span class="property">name</span> </span><br></pre></td></tr></table></figure>



<h3 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h3><p>一般工作流程如下：</p>
<ul>
<li>克隆 Git 资源作为工作目录。</li>
<li>在克隆的资源上添加或修改文件。</li>
<li>如果其他人修改了，你可以更新资源。</li>
<li>在提交前查看修改。</li>
<li>提交修改。</li>
<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1625735948386-2d856f3e-28c4-444f-b636-66e4a3f90d2b.png" alt="img"></p>
<hr>
<h3 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h3><ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1625735948884-5d823c71-5984-442e-97fe-ea336d058dc3.png" alt="img"></p>
<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>
<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>
<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>
<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>
<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
<p>当执行 “git rm –cached “ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>
<p>当执行 “git checkout .” 或者 “git checkout – “ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>
<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD “ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<hr>
<h3 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h3><p>使用您当前目录作为Git仓库，我们只需使它初始化。</p>
<p>初始化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>使用我们指定的目录作为Git仓库：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init <span class="title function_">winneyGit</span>(指定的目录名称)</span><br></pre></td></tr></table></figure>

<p>执行完这命令，在目录下新建一个winneyGit文件夹</p>
<h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">git</span>:<span class="comment">//github.com/schacon/grit.git </span></span><br></pre></td></tr></table></figure>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">git</span>:<span class="comment">//github.com/schacon/grit.git mygrit</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>版本控制系统</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2020/03/22/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="将目录的内容提交到Github的私有仓库中"><a href="#将目录的内容提交到Github的私有仓库中" class="headerlink" title="将目录的内容提交到Github的私有仓库中"></a>将目录的内容提交到<code>Github</code>的私有仓库中</h3><ol>
<li><p>在服务器的目录中，确保已经初始化了 Git 仓库，执行了 <code>git init</code> 命令</p>
</li>
<li><p>配置 <code>Git</code> 用户信息，使用以下命令替换 <code>&lt;YOUR_NAME&gt;</code> 和 <code>&lt;YOUR_EMAIL&gt;</code> 为您的 <code>GitHub</code> 用户名和邮箱地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;&lt;YOUR_NAME&gt;&quot;</span><br><span class="line">git config --global user.email &quot;&lt;YOUR_EMAIL&gt;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加要提交的文件到暂存区。如果您要提交整个目录的内容，可以使用 <code>.</code> 来表示当前目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更改到本地仓库，并添加提交信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;Your commit message&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>GitHub</code> 上创建一个私有仓库，并将其作为远程仓库添加到您的本地仓库。执行以下命令，将 <code>&lt;YOUR_GITHUB_REPO_URL&gt;</code> 替换为您的 <code>GitHub</code> 私有仓库的 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;YOUR_GITHUB_REPO_URL&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>推送本地提交到 <code>GitHub</code> 私有仓库。执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果您的默认分支不是 <code>master</code>，请将 <code>master</code> 替换为您的默认分支名称。</p>
</blockquote>
</li>
</ol>
<h3 id="git切换分支"><a href="#git切换分支" class="headerlink" title="git切换分支"></a>git切换分支</h3><ol>
<li><p>列出所有可用的分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到已存在的分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并切换到新分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;new_branch_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制切换分支（丢弃当前分支的更改）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -f &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到远程分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;remote_name&gt;/&lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="更改分支的名称"><a href="#更改分支的名称" class="headerlink" title="更改分支的名称"></a>更改分支的名称</h3><p>将 <code>master</code> 分支的名称更改为 <code>wordpress</code></p>
<ol>
<li><p>确保您当前不在要更改名称的分支上。如果当前在 <code>master</code> 分支上，请先切换到其他分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;other_branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改分支的名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -m master wordpress</span><br></pre></td></tr></table></figure>
</li>
<li><p>将远程仓库中的分支名称也更新为新的名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :master wordpress</span><br><span class="line">git push origin -u wordpress</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ol>
<li><p>删除本地分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果分支还有未合并的更改，使用 <code>-d</code> 选项会提示您进行确认。如果要强制删除分支，无论是否合并，可以使用 <code>-D</code> 选项。</p>
</blockquote>
</li>
<li><p>删除远程分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="克隆远程仓库并指定某个分支"><a href="#克隆远程仓库并指定某个分支" class="headerlink" title="克隆远程仓库并指定某个分支"></a>克隆远程仓库并指定某个分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b &lt;branch_name&gt; &lt;remote_repository_url&gt;</span><br></pre></td></tr></table></figure>

<h3 id="云服务器拉取代码"><a href="#云服务器拉取代码" class="headerlink" title="云服务器拉取代码"></a>云服务器拉取代码</h3><p>在云服务器上拉取从本地提交到 Git 远程仓库的 <code>WordPress</code> 分支的代码</p>
<ol>
<li><p>首先，进入您的 <code>WordPress</code> 项目所在的目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /path/to/wordpress</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>/path/to/wordpress</code> 替换为您 <code>WordPress</code> 项目的实际路径。</p>
</blockquote>
</li>
<li><p>确保您已经将远程仓库添加为 Git 的远程仓库。如果尚未添加，请执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;remote_repository_url&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>&lt;remote_repository_url&gt;</code> 替换为您的远程仓库的 URL。</p>
</blockquote>
</li>
<li><p>切换到目标分支（即 <code>WordPress</code> 分支）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout wordpress</span><br></pre></td></tr></table></figure>

<p>这将切换到名为 <code>wordpress</code> 的分支，确保您使用正确的分支名称。</p>
</li>
<li><p>拉取最新的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin wordpress</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="本地仓库重新关联到远程新仓库"><a href="#本地仓库重新关联到远程新仓库" class="headerlink" title="本地仓库重新关联到远程新仓库"></a>本地仓库重新关联到远程新仓库</h3><ol>
<li><p>查看当前本地仓库关联的远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p> 这将显示当前本地仓库关联的远程仓库信息，包括远程仓库的名称（通常是 <code>origin</code>）和对应的 URL。</p>
</li>
<li><p>移除当前关联的远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>
<p> 这将移除本地仓库当前关联的远程仓库（假设当前远程仓库的名称是 <code>origin</code>）</p>
</li>
<li><p>添加新的远程仓库地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin 新的远程仓库URL</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证新的远程仓库是否关联成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p> 现在，您的本地仓库已经重新关联到新的远程仓库。在将代码推送到远程仓库时，可以使用 <code>git push</code> 命令，例如：</p>
</li>
<li><p>将代码推送到远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p> 其中，<code>origin</code> 是新远程仓库的名称，<code>master</code> 是要推送的分支名。</p>
<p>请注意，如果您之前的本地分支与远程仓库有相关联，新关联的远程仓库可能不会自动与这些分支关联。如果需要将旧的本地分支与新的远程仓库关联，您可以使用 git branch –set-upstream-to 命令。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>

<p>这将把本地 <code>master</code> 分支与新的远程仓库的 <code>master</code> 分支关联起来。</p>
<p><code>请确保在进行这些操作之前备份您的本地仓库，以防意外情况。</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML特殊符号</title>
    <url>/2020/07/09/HTML%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="常用的特殊符号"><a href="#常用的特殊符号" class="headerlink" title="常用的特殊符号"></a>常用的特殊符号</h2><table>
<thead>
<tr>
<th>特殊符号</th>
<th>HTML写法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><code>&amp;nbsp;</code></td>
<td>空格</td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
<td>和、与</td>
</tr>
<tr>
<td>“</td>
<td><code>&amp;quot;</code></td>
<td>英文双引号</td>
</tr>
<tr>
<td>‘</td>
<td><code>&amp;apos;</code></td>
<td>英文单引号</td>
</tr>
<tr>
<td>&gt;</td>
<td><code>&amp;gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td>≥</td>
<td><code>&amp;ge;</code></td>
<td>大于等于</td>
</tr>
<tr>
<td>＜</td>
<td><code>&amp;lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td>≤</td>
<td><code>&amp;le;</code></td>
<td>小于等于</td>
</tr>
<tr>
<td>≠</td>
<td><code>&amp;ne;</code></td>
<td>不等于</td>
</tr>
<tr>
<td>¥</td>
<td><code>&amp;yen;</code></td>
<td>人民币符号</td>
</tr>
<tr>
<td>&infin;</td>
<td><code>&amp;infin;</code></td>
<td>无穷</td>
</tr>
</tbody></table>
<p><a href="https://tool.chinaz.com/tools/htmlchar.aspx">HTML 特殊符号编码对照表</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_currency.asp">货币符号</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_letterlike.asp">字母符号</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_arrows.asp">箭头</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_math.asp">数学运算符</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_geometric.asp">几何形状</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_utf_symbols.asp">杂项符号</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_emoji_smileys.asp">笑脸表情符号</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_html_entities_4.asp">完整的 HTML 4 实体参考手册</a></p>
<p><a href="https://www.w3school.com.cn/charsets/ref_html_entities_4.asp">特殊符号</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML页面之间传参-iframe父子页面传参</title>
    <url>/2021/08/25/HTML%E9%A1%B5%E9%9D%A2%E4%B9%8B%E9%97%B4%E4%BC%A0%E5%8F%82-iframe%E7%88%B6%E5%AD%90%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h4 id="A域名下的参数传给B域名下的页面"><a href="#A域名下的参数传给B域名下的页面" class="headerlink" title="A域名下的参数传给B域名下的页面"></a>A域名下的参数传给B域名下的页面</h4><p>场景1：推广页面要求一定要使用A域名，而推广页面的网页内容是在B域名下，而B域名推广页需要从A域名的推广链接上获取参数。</p>
<blockquote>
<p>这里是填写的推广链接是A域名下的，但是实际用户访问的页面是B域名下的<code>game.html</code>页面</p>
</blockquote>
<p>例如：</p>
<p>A域名的推广链接：<a href="http://a.com/iframeParentPage.html?app_id=70116&amp;user=admin&amp;age=18">http://A.com/iframeParentPage.html?app_id=70116&amp;user=admin&amp;age=18</a></p>
<p>B域名推广页面：<a href="http://b.com/game.html?game_id=10002&amp;platform_id=205&amp;type=game">http://B.com/game.html?game_id=10002&amp;platform_id=205&amp;type=game</a></p>
<blockquote>
<p>A、B域名在不同的主体下，不能把B域名下的页面放到A域名的服务器上。</p>
<p>B域名需要拿到<code>app_id</code>等参数。</p>
</blockquote>
<ol>
<li><p>A域名下<code>iframeParentPage.html</code>中获取参数：<code>window.location.search</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(window.location.search);	// ?app_id=70116&amp;user=admin&amp;age=18</span><br></pre></td></tr></table></figure>
</li>
<li><p>携带A域名下<code>iframeParentPage.html</code>中的参数，进行页面跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href = &quot;http://B.com/game.html?game_id=10002&amp;platform_id=205&amp;type=game&amp;&quot; + window.location.search.substring(1);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注：</p>
<ol>
<li><p>使用<code>window.location.search.substring(1);</code>是要把<code>?</code>去掉</p>
</li>
<li><p>要在<code>type=game</code>后面加上<code>&amp;</code></p>
</li>
</ol>
</blockquote>
</li>
<li><p>在B域名下的<code>game.html</code>页面中获取参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const queryParams = new URLSearchParams(window.location.search);</span><br><span class="line">console.log(&#x27;queryParams&#x27;);</span><br><span class="line">console.log(queryParams);</span><br><span class="line">console.log(queryParams.get(&#x27;app_id&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;user&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;age&#x27;));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="iframe嵌套页面-父子页面传参"><a href="#iframe嵌套页面-父子页面传参" class="headerlink" title="iframe嵌套页面-父子页面传参"></a><code>iframe</code>嵌套页面-父子页面传参</h3><h4 id="查询字符串（URL-参数）"><a href="#查询字符串（URL-参数）" class="headerlink" title="查询字符串（URL 参数）"></a>查询字符串（URL 参数）</h4><p>场景2：推广页面要求一定要使用A域名，而推广页面的网页内容是在B域名下，而B域名推广页需要从A域名的推广链接上获取参数。</p>
<blockquote>
<p>这里是填写的推广链接是A域名下的，但是实际用户访问的页面是A域名下<code>iframe</code>嵌套了B域名下的<code>game.html</code>的页面，也就是URL中显示的是A域名</p>
</blockquote>
<p>A域名下的页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe title=&quot;游戏页面&quot; src=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.querySelector(&#x27;iframe&#x27;).src= &quot;http://A.com/iframeParentPage.html?app_id=70116&amp;user=admin&amp;age=18&amp;&quot; + window.location.search.substring(1);</span><br></pre></td></tr></table></figure>

<p>B域名下的页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const queryParams = new URLSearchParams(window.location.search);</span><br><span class="line">console.log(&#x27;queryParams&#x27;);</span><br><span class="line">console.log(queryParams);</span><br><span class="line">console.log(queryParams.get(&#x27;app_id&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;user&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;age&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="同域名下-使用缓存"><a href="#同域名下-使用缓存" class="headerlink" title="同域名下-使用缓存"></a>同域名下-使用缓存</h4><p>A页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(&#x27;params&#x27;, window.location.search.substring(1));</span><br></pre></td></tr></table></figure>

<p>B页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var params = localStorage.getItem(&#x27;params&#x27;);</span><br><span class="line">console.log(params);</span><br><span class="line">const queryParams = new URLSearchParams(params);</span><br><span class="line">console.log(queryParams.get(&#x27;app_id&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;user&#x27;));</span><br><span class="line">console.log(queryParams.get(&#x27;age&#x27;));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：不同域名，使用这个方法不可以。</p>
<p>根据需要，使用<code>localStorage</code>或<code>sessionStorage</code></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-GitHub-Pages-搭建个人博客</title>
    <url>/2018/08/01/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h3><ol>
<li><p>下载Node.js：<a href="https://nodejs.org/en/download/">官网下载地址</a>（这里以Windows 为例）：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/download.png" alt="下载Node.js"></p>
</li>
<li><p> 双击下载好的<code>.msi</code>文件，按下一步下一步，安装好就可以；</p>
</li>
<li><p>在cmd命令窗口，输入下面的这个命令，如果能够显示Node.js的版本，说明安装成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node-v.png" alt="查看node版本"></p>
<h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3></li>
<li><p> 下载Git：<a href="https://gitforwindows.org/">官网下载地址</a>（这里以Windows 为例，我是在这里下载的） 你也可以到<a href="https://git-scm.com/downloads">官网下载</a>  ；</p>
</li>
<li><p>双击下载好的Git安装包，按下一步下一步，进行安装即可；</p>
</li>
<li><p>在cmd命令窗口，输入下面的这个命令，如果能够显示Git的版本，说明安装成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git -version</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-v.png" alt="查看git版本"></p>
</li>
<li><p>想对Git有更多的了解，可以从下面几个网站学习，若你有更好的网站，也可以推荐给我：</p>
<ul>
<li><a href="https://git-scm.com/book/zh/v2">官网</a></li>
<li><a href="https://www.w3cschool.cn/git/">W3Cschool</a></li>
<li> <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰网站教程</a></li>
</ul>
</li>
</ol>
<h2 id="二、Hexo搭建博客"><a href="#二、Hexo搭建博客" class="headerlink" title="二、Hexo搭建博客"></a>二、Hexo搭建博客</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h3><ol>
<li><p>在计算机中，新建一个<code>winneyBlog</code>文件夹，用于存放自己的博客内容。</p>
</li>
<li><p>在<code>winneyBlog</code>文件夹内，鼠标右键，选择<code>Git Bash</code>,进入到命令窗口<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog-path.png" alt="博客目录-进入命令窗口"></p>
</li>
<li><p>在命令窗口中，输入下面代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-cli.png" alt="安装hexo-cli"></p>
</li>
</ol>
<h3 id="2-初始化Hexo"><a href="#2-初始化Hexo" class="headerlink" title="2. 初始化Hexo"></a>2. 初始化Hexo</h3><ol>
<li><p>在命令窗口中，输入下面代码：(会在<code>winneyBlog</code>目录下，新建了一个<code>hexo</code>文件夹)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure>

<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-init.png" alt="初始化hexo"></p>
</li>
</ol>
<h3 id="3-配置Hexo"><a href="#3-配置Hexo" class="headerlink" title="3. 配置Hexo"></a>3. 配置Hexo</h3><ol>
<li><p>进入hexo文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署形成的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-gen.png" alt="部署形成的文件"></p>
</li>
</ol>
<h3 id="4-启动服务器"><a href="#4-启动服务器" class="headerlink" title="4. 启动服务器"></a>4. 启动服务器</h3><ol>
<li><p>在命令窗口执行下面代码：</p>
<p>如图所示：（想要进行别的命令操作，可以按<code>Ctrl + C</code>停止服务器）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-server.png" alt="启动服务器"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器地址栏中输入<a href="http://localhost:4000/">http://localhost:4000/</a>  （默认端口是4000），如果能够看到如图所示的效果，说明初始化的Hexo博客搭建成功了。<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-blog.png" alt="浏览器中查看博客"> </p>
</li>
</ol>
<h2 id="三、将本地的-Hexo-博客部署到-GitHub-Pages上"><a href="#三、将本地的-Hexo-博客部署到-GitHub-Pages上" class="headerlink" title="三、将本地的 Hexo 博客部署到 GitHub Pages上"></a>三、将本地的 Hexo 博客部署到 GitHub Pages上</h2><ol>
<li><p>新建一个仓库，仓库名为<code>winney07.github.io</code>（这个仓库的名称必须严格按照 <code>username.github.io</code> 的格式来命名）【前提是你要有一个Github账号】<br>如图所示：（因为我已经创建过这个库了，所以会显示红色警告，只是后来为了截图，重新写一个同名的）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-git.png" alt="创建仓库"></p>
</li>
<li><p>进入已经创建好的仓库（点击自己的头像，选择Your profile，点击刚创建好的那个仓库进去仓库里面），点击settings，找到GitHub Pages 选项，点击 Choose a theme 选择一个主题（可以选择也可以不选择，根据自己的需求决定是否操作这一步）<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-pages.png" alt="配置Github Pages"></p>
</li>
<li><p>配置Git个人信息，在<code>winneyBlog</code>目录下，鼠标右键，选择<code>Git Bash</code>，进入命令窗口，输入下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Github用户名&quot;       //自己Github的账号名</span><br><span class="line">git config --global user.email &quot;Github邮箱&quot;        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成SSH KEY,意思是生成一个公钥和密钥，因为Github需要一个密钥才能与本地相连接。在命令窗口输入下面的命令，然后需要连续按3次回车生成密钥（每按一次回车你可以看到对应的信息） 【你也可以先查看是否已经有了ssh密钥：<code>cd ~/.ssh</code>   如果没有密钥则不会有此文件夹，有则备份删除】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C  &quot;Github邮箱&quot;        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>

<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-key.png" alt="生成SSH KEY"></p>
</li>
<li><p>生成的SSH KEY会保存到 <code>C:/Users/电脑名用户名/.ssh</code> 目录中（根据你自己电脑用户名，打开对应的目录）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/win-user.png" alt="SSH KEY存放目录"><br>（1）打开.ssh 这个目录，打开 id_rsa.pub 文件，复制里面的全部内容（这些内容就是密钥）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/user-ssh.png" alt="打开 id_rsa.pub 文件"></p>
</li>
<li><p>在GitHub中添加<code>SSH keys</code></p>
<ol>
<li>打开Github，点击头像，选择<code>Settings</code>；<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/set.png" alt="设置"></li>
<li>选择<code>SSH and GPG keys</code>项,点击右上角<code>New SSH key</code>按钮，将刚刚复制到的密钥粘贴到<code>key</code>输入框中，title自己给它命一个名就好<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/add-key.png" alt="添加ssh key 到仓库"></li>
<li>最后点击<code>Add Key</code>，如果显示这样的界面，说明SSH KEY 配置成功：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-keys.png" alt="SSH KEY 配置成功"></li>
</ol>
</li>
<li><p>修改全局配置文件</p>
<ol>
<li>在hexo文件夹下，找到<code>_config.yml</code>文件；<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/config1.png" alt="_config.yml文件"></li>
<li>复制仓库地址：<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-href.png" alt="复制仓库地址"></li>
<li>修改<code>_config.yml</code>文件里的deploy属性(目的是将本地hexo项目放到Github上)<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy.png" alt="修改_config.yml文件里的deploy属性"><br>注：【如果<code>repository</code>中填写的是<code>https</code>协议的，<code>hexo d</code>上传代码到Github时有下面类似错误，可以将<code>repository</code>改为<code>ssh</code>的链接】<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy-error.png" alt="报错信息"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-link.png" alt="使用 SSH链接"></li>
</ol>
</li>
<li><p>安装<code>hexo-deployer-git</code> 插件，目的是将代码快速托管到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>将hexo项目托管到GitHub上（命令可以分开写也可以一起写）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>  <strong>备注：</strong><br>  <code>hexo clean</code> ：清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>  <code>hexo generate</code> ：部署之前预先生成静态文件，简写为<code>hexo g</code><br>  <code>hexo deploy</code> : 文件生成后立即部署网站，简写为<code>hexo d</code></p>
</li>
<li><p>在浏览器地址栏输入 <a href="https://username.github.io/">https://username.github.io/</a> 即可访问，（username也就是你的Github账户名），如果能够正常访问，并且跟本地hexo项目显示的内容是一样的，那么说明你已经把本地hexo项目部署到Github上了。</p>
</li>
</ol>
<h2 id="四、配置博客的个人信息"><a href="#四、配置博客的个人信息" class="headerlink" title="四、配置博客的个人信息"></a>四、配置博客的个人信息</h2><ol>
<li><p>在hexo目录中，找到全局配置文件<code>_config.yml</code></p>
</li>
<li><p>配置信息如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site 站点信息配置</span><br><span class="line">title: winney     #站点名</span><br><span class="line">subtitle: It is never too old to learn.  #站点副标题</span><br><span class="line">description: Doing is better than saying.     #站点信息简介</span><br><span class="line">keywords: winneyBlog   博客</span><br><span class="line">author: winney   #站点作者</span><br><span class="line">language: zh-Hans     #站点语言，default默认是英文，zh-Hans是中文</span><br><span class="line">timezone: Asia/Shanghai      #时区</span><br><span class="line"></span><br><span class="line"># URL   博客地址</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: https://AAAAAAAAAA.github.io/</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory  目录设置</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing 文章布局</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: true</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Home page setting  主页设置</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 3  #每页文章数量</span><br><span class="line">  order_by: -date</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag   分类和标签</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format  日期 / 时间格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination    归档显示</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions  扩展</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git    #部署的类型</span><br><span class="line">  repository: https://github.com/AAAAAAA/AAAAAAA.github.io.git    #仓库地址</span><br><span class="line">  branch: master    #分支名称</span><br><span class="line">  message: hexo deploy  #提交信息</span><br><span class="line"></span><br><span class="line">#Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>  <code>注意</code>：<code>.yml</code> 文件有严格的格式要求，文件里所有的配置都是：冒号 空格 值，并且冒号是英文状态下的输入。想了解更多的可以前往 官网 。</p>
</li>
<li><p>在博客目录下，右键点击Git Bash，进去命令窗口，输入下面的命令，即可在浏览器中看到刚刚设置的内容显示在页面中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server    // 简写为 hexo s</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="提交到远程仓库报错"><a href="#提交到远程仓库报错" class="headerlink" title="提交到远程仓库报错"></a>提交到远程仓库报错</h4><p>报403或者每次提交都要输入账号密码</p>
<p>可以将<code>_config.yml</code>里的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repository: https://github.com/*********.github.io.git   #仓库地址</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repository: git@github.com:*********.github.io.git   #仓库地址</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Gitee-Pages搭建个人博客</title>
    <url>/2020/07/07/Hexo-Gitee-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><p>node.js  <a href="https://nodejs.org/zh-cn/" title="" target="">官网</a><br>Git   <a href="https://git-scm.com/" title="" target="">官网</a></p>
<h3 id="二、Hexo的安装与基本命令"><a href="#二、Hexo的安装与基本命令" class="headerlink" title="二、Hexo的安装与基本命令"></a>二、Hexo的安装与基本命令</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>如果没有安装hexo的，只需要在目录中单击右键启动Git Bash Here，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo </span><br></pre></td></tr></table></figure>
<h4 id="初始化在本地生成Hexo相关目录"><a href="#初始化在本地生成Hexo相关目录" class="headerlink" title="初始化在本地生成Hexo相关目录"></a>初始化在本地生成Hexo相关目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Note  # 初始化创建，会再桌面创建Note文件夹</span><br><span class="line">cd Note         # 进入Note目录</span><br><span class="line">npm install     # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure>
<h4 id="Hexo三连"><a href="#Hexo三连" class="headerlink" title="Hexo三连"></a>Hexo三连</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean(or c)          # 清空已有hexo网站文件</span><br><span class="line">hexo generate(or g)   # 依据网页文本与新的CSS样式生成新网站文件</span><br><span class="line">hexo server(or s)     # 启动本地服务器，可以在localhost:4000查看网站修改效果</span><br></pre></td></tr></table></figure>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><p>Git 全局设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Github用户名&quot;       //自己Github的账号名</span><br><span class="line">git config --global user.email &quot;Github邮箱&quot;        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>
<p>创建 git 仓库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@gitee.com:AAAA/AAAA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>已有仓库?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd existing_git_repo</span><br><span class="line">git remote add origin git@gitee.com:AAAA/AAAA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="三、主题下载与安装"><a href="#三、主题下载与安装" class="headerlink" title="三、主题下载与安装"></a>三、主题下载与安装</h3><p>Hexo官网上提供了丰富的主题可选，你只需要打开对应的界面（<a href="https://hexo.io/themes/" rel="nofollow noreferrer" target="_blank">https://hexo.io/themes/</a>）选择喜欢的，然后点击<strong>名称</strong>跳转到<strong>GitHub</strong>仓库选择<em>下载或者克隆</em>对应的<strong>zip</strong>文件到本地，并且解压到网站目录下的<strong>themes</strong>目录即可。</p>
<p>然后接下来，你需要修改两个配置文件：</p>
<li>你的网站根目录下的<strong>_config.yml</strong>文件，即网站配置文件；</li>
<li>你选择的主题的自带配置文件<strong>_config.yml</strong>，即主题样式配置文件；</li>

<h4 id="生成-添加-SSH-公钥之后，测试是否连接成功"><a href="#生成-添加-SSH-公钥之后，测试是否连接成功" class="headerlink" title="生成/添加 SSH 公钥之后，测试是否连接成功:"></a>生成/添加 SSH 公钥之后，测试是否连接成功:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line"></span><br><span class="line">如果成功，会显示：</span><br><span class="line">Hi xxx! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="图片路径设置"><a href="#图片路径设置" class="headerlink" title="图片路径设置"></a>图片路径设置</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-Gitee-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images-set.png" alt="图片路径设置"></p>
]]></content>
      <categories>
        <category>文档网站生成工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT主题博客相关设置</title>
    <url>/2018/08/02/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、添加文章版权声明功能"><a href="#一、添加文章版权声明功能" class="headerlink" title="一、添加文章版权声明功能"></a>一、添加文章版权声明功能</h2><p>打开博客目录下的主题配置文件<code>（/themes/next/_config.yml）</code>，找到<code>Declare license on posts</code> 标签，进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line">post_copyright:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>    <span class="comment">#激活版权声明模块</span></span><br><span class="line">  license: CC BY-NC-SA 3.0     <span class="comment">#版权许可协议</span></span><br><span class="line">  license_url: https://winney07.github.io/      <span class="comment">#声明的文章的可点击链接（域名）</span></span><br></pre></td></tr></table></figure>
<p>配置完后，执行以下命令，在浏览器中访问，效果如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/next-set1.png" alt="版本声明设置"></p>
<h2 id="二、设置favicon图标"><a href="#二、设置favicon图标" class="headerlink" title="二、设置favicon图标"></a>二、设置favicon图标</h2><p>1、选择一个<code>favicon</code>制作网站完成制作，例如：<a href="http://www.bitbug.net/">比特虫</a> ，制作一个<code>16*16</code>，一个<code>32*32</code>的；<br>2、两个不同尺寸大小的文件，重名为<code>favicon-16x16-next.png</code>和<code>favicon-32x32-next.png</code>；<br>2、将重命名的两个图片文件放到博客目录下的<code>themes/next/source/images</code>中（覆盖原来的两个默认的）<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/favicon.png" alt="设置favicon图标"></p>
<h2 id="三、添加头像"><a href="#三、添加头像" class="headerlink" title="三、添加头像"></a>三、添加头像</h2><p>1、把想要设置的头像图片放到<code>hexo/themes/next/source/images</code>目录下;<br>2、在<code>hexo/themes/next/layout/_macro</code>目录中找到<code>sidebar.swig</code>文件;<br>3、在<code>sidebar.swig</code>文件中找到类名为：<code>site-overview-wrap sidebar-panel sidebar-panel-active</code>的<code>section</code>标签，进行如图所示的修改：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/user-head.png" alt="添加头像"><br>效果如图所示：(若想去掉边框，可以根据头像标签的类名，全局搜索，找到对应的样式进行修改)<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/user-header.png" alt="修改头像样式"></p>
<h2 id="四、添加友情链接"><a href="#四、添加友情链接" class="headerlink" title="四、添加友情链接"></a>四、添加友情链接</h2><p>打开主题配置文件<code>（/themes/next/_config.yml）</code>，找到以下内容进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line">links_icon: <span class="built_in">link</span></span><br><span class="line">links_title: 友情链接 </span><br><span class="line"><span class="comment"># links_layout: block   //块状显示（选择了行内显示，这个要注释掉，不然会报错）</span></span><br><span class="line">links_layout: inline    //行内显示</span><br><span class="line">links:</span><br><span class="line">  小超: https://www.xiaochao.me/</span><br><span class="line">  Github: https://www.github.com</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/friend-link.png" alt="添加友情链接"></p>
<h2 id="五、调整hexo页面宽度"><a href="#五、调整hexo页面宽度" class="headerlink" title="五、调整hexo页面宽度"></a>五、调整hexo页面宽度</h2><p>博客在浏览器上的留白太多，因此想增加文章的宽度。</p>
<p>打开<code>/Hexo/themes/hexo-theme-next/source//css/_variables/custom.styl</code> 添加两行代码即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$main-desktop = 1400px </span><br><span class="line">$content-desktop = 1100px</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博文置顶（自定义排序）</title>
    <url>/2021/01/14/Hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
    <content><![CDATA[<h4 id="Hexo博文置顶（自定义排序）"><a href="#Hexo博文置顶（自定义排序）" class="headerlink" title="Hexo博文置顶（自定义排序）"></a>Hexo博文置顶（自定义排序）</h4><blockquote>
<p>使用的是<code>top</code>属性，<code>top</code>值越高，排序越在前，不设置<code>top</code>值得博文按照时间顺序排序。<br>修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js</p>
</blockquote>
<p>原来代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const config = this.config;</span><br><span class="line">const posts = locals.posts.sort(config.index_ generator.order by);</span><br><span class="line"></span><br><span class="line">sort(posts.data, (a， b) =&gt; (b.sticky || 0) - (a.sticky || 0));</span><br><span class="line"></span><br><span class="line">const paginationDir.config.pagination_ dir || &#x27;page&#x27;;</span><br><span class="line">const path.config.index_ generator.path || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">return pagination(path, posts, &#123;</span><br><span class="line">	perPage: config.index_ generator.per_page,</span><br><span class="line">	layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">	format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">	data: &#123;</span><br><span class="line">    	_index: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">const pagination = require(&#x27;hexo-pagination&#x27;);</span><br><span class="line">const &#123; sort &#125; = require(&#x27;timsort&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals) &#123;</span><br><span class="line">  const config = this.config;</span><br><span class="line">  const posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">  // sort(posts.data, (a, b) =&gt; (b.sticky || 0) - (a.sticky || 0));</span><br><span class="line"></span><br><span class="line">  posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">        else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">    &#125;</span><br><span class="line">    else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">&#125;);</span><br><span class="line">  const paginationDir = config.pagination_dir || &#x27;page&#x27;;</span><br><span class="line">  const path = config.index_generator.path || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  return pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">    format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1、即在<code>const posts = locals.posts.sort(config.index_generator.order_by);</code>下面添加如下<code>javascript</code>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">      if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">          if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">          else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">      &#125;</span><br><span class="line">      else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">          return -1;</span><br><span class="line">      &#125;</span><br><span class="line">      else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          return 1;</span><br><span class="line">      &#125;</span><br><span class="line">      else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>2、在对应的md文件中添加top属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 网站素材</span><br><span class="line">date: 2021-01-08 11:23:25</span><br><span class="line">tags:</span><br><span class="line">- 网站素材</span><br><span class="line">categories: </span><br><span class="line">- 工作笔记</span><br><span class="line">- 网站素材</span><br><span class="line">top: 102</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_32454537/article/details/79482920">参考文献</a></p>
]]></content>
      <categories>
        <category>文档网站生成工具</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo笔记</title>
    <url>/2018/03/07/Hexo%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="本地预览："><a href="#本地预览：" class="headerlink" title="本地预览："></a>本地预览：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>当默认端口4000被占用时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL Port 4000 has been used. Try other port instead.</span><br></pre></td></tr></table></figure>

<h4 id="解决默认端口4000被占用："><a href="#解决默认端口4000被占用：" class="headerlink" title="解决默认端口4000被占用："></a>解决默认端口4000被占用：</h4><ol>
<li><p>直接在终端命令行中指定端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server -p 4002</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改项目运行所在端口号</p>
<blockquote>
<p>修改<code>package.json</code>文件里的server,修改前: <code>&quot;server&quot;: &quot;hexo server&quot;</code> 修改后: <code>&quot;server&quot;: &quot;hexo server -p 4001&quot;</code> 注意:这时候你需.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HighChart相关笔记</title>
    <url>/2021/01/15/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="修改导出excel表表头的表名"><a href="#修改导出excel表表头的表名" class="headerlink" title="修改导出excel表表头的表名"></a>修改导出excel表表头的表名</h4><ol>
<li><p>默认情况下，标题显示为Chart</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table1.png" alt="标题显示为Chart"></p>
</li>
<li><p>加上title属性之后，标题显示为title属性的值</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table2.png" alt="标题显示为title属性的值"></p>
</li>
<li><p>如果不想标题显示在页面中，就加样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.highcharts-title&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="修改下载的excel表名"><a href="#修改下载的excel表名" class="headerlink" title="修改下载的excel表名"></a>修改下载的excel表名</h4><p>设置title对象的text属性为图表的名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">    text: filename</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>若不想表名显示在页面的图表中，可以用样式将它隐藏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display：none</span><br></pre></td></tr></table></figure>

<h4 id="修改导出后的excel表的第一列的标题Category"><a href="#修改导出后的excel表的第一列的标题Category" class="headerlink" title="修改导出后的excel表的第一列的标题Category"></a>修改导出后的excel表的第一列的标题Category</h4><ol>
<li><p>第一列的标题默认是Category</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table3.png" alt=" 第一列的标题默认是Category"></p>
</li>
<li><p>修改modules 中的export-data.src.js（导出excel表功能的js，未压缩版）</p>
<blockquote>
<p>调试可知，dataRows的值决定了标题的显示；而dataRows的值由topHeaders和subHeaders决定，所以动态将它的值修改。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table4.png" alt="修改modules 中的export-data.src.js"></p>
</li>
<li><p>给options添加一个excelTitle0属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">topHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">subHeaders[0] = this.options.exporting.excelTitle0;    </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Find longest row</span><br><span class="line">for (var i = 0, len = rows.length; i &lt; len; ++i) &#123;</span><br><span class="line">	if (rows[i].length &gt; rowLength) &#123;</span><br><span class="line">		rowLength = rows[i].length;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">topHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">subHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">// Add header</span><br><span class="line">html += getTableHeaderHTML(</span><br><span class="line">	topHeaders ,</span><br><span class="line">	subHeaders ,</span><br><span class="line">	Math.max(rowLength, subHeaders.length)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在下载excel表格之前，动态设置excelTitle0属性</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getCategory() &#123;</span><br><span class="line">	var category = $(this).data(&quot;category&quot;);</span><br><span class="line">	if(category == &quot;&quot; || category == undefined)&#123;</span><br><span class="line">		var val = $(&quot;#dateRange&quot;).val();</span><br><span class="line">		var start = val.substring(0, 10);</span><br><span class="line">		var end = val.substring(13, 24);</span><br><span class="line">        // 算两个日期之间的间隔</span><br><span class="line">        var inter = getDays(start, end);</span><br><span class="line"></span><br><span class="line">        if(inter = 0) &#123;</span><br><span class="line">            category = &quot;小时&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            category = &quot;日期&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Highcharts.charts[chartId].options.exporting.excelTitle0 = getCategory.call(this);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="修改数据表格category值"><a href="#修改数据表格category值" class="headerlink" title="修改数据表格category值"></a>修改数据表格category值</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table7.png" alt="修改数据表格category值"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table8.png" alt="修改数据表格category值"></p>
<p>1、给点击按钮加上data-category属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;eptWrap rc&quot; data-chart=&quot;Ø&quot; data-category=&quot;渠道&quot;&gt;</span><br><span class="line">    &lt;span class= &quot;eptList&quot; &gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class&quot;eptwrap ml10 down-file&quot; data-chart=&quot;0&quot; data-category=&quot;渠道&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;eptout&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>2、重新调用hightcharts修改category属性的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getCategory() &#123;</span><br><span class="line">	var category = $(this).data(&quot;category&quot;);</span><br><span class="line">	if(category == &quot;&quot; || category == undefined)&#123;</span><br><span class="line">		var val = $(&quot;#dateRange&quot;).val();</span><br><span class="line">		var start = val.substring(0, 10);</span><br><span class="line">		var end = val.substring(13, 24);</span><br><span class="line">        // 算两个日期之间的间隔</span><br><span class="line">        var inter = getDays(start, end);</span><br><span class="line"></span><br><span class="line">        if(inter = 0) &#123;</span><br><span class="line">            category = &quot;小时&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            category = &quot;日期&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Highcharts.charts[chartId].options.exporting.excelTitle0 = getCategory.call(this);</span><br></pre></td></tr></table></figure>

<h4 id="修改条形图柱子的宽度"><a href="#修改条形图柱子的宽度" class="headerlink" title="修改条形图柱子的宽度"></a>修改条形图柱子的宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plotOptions: &#123;</span><br><span class="line">  bar: &#123;</span><br><span class="line">     maxPointWidth: 20</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table11.png" alt="修改条形图柱子的宽度"></p>
<h4 id="在条形图柱子后面加上数值"><a href="#在条形图柱子后面加上数值" class="headerlink" title="在条形图柱子后面加上数值"></a>在条形图柱子后面加上数值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plotOptions: &#123;</span><br><span class="line">  bar: &#123;</span><br><span class="line">     dataLabels: &#123;</span><br><span class="line">     	enabled: true,</span><br><span class="line">     	allowOverlap: true   // 允许数据标签重叠</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table12.png" alt="在条形图柱子后面加上数值"></p>
<p><a href="https://blog.csdn.net/wade01274536/article/details/50419114">将Highcharts图表数据生成Table表格</a></p>
<p><a href="https://blog.csdn.net/eengel/article/details/73497208">重绘</a></p>
]]></content>
      <categories>
        <category>图表库</category>
        <category>HighChart</category>
      </categories>
      <tags>
        <tag>HighChart</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中对象数组的操作</title>
    <url>/2019/08/09/JS%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="判断一个对象数组的某个对象是否具体某个属性，如果没有就追加对象"><a href="#判断一个对象数组的某个对象是否具体某个属性，如果没有就追加对象" class="headerlink" title="判断一个对象数组的某个对象是否具体某个属性，如果没有就追加对象"></a>判断一个对象数组的某个对象是否具体某个属性，如果没有就追加对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// records是对象数组</span><br><span class="line">if (!records.some(obj =&gt; obj.username === value.username)) &#123;</span><br><span class="line">    records.push(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js高效修改对象数组里的对象属性名"><a href="#js高效修改对象数组里的对象属性名" class="headerlink" title="js高效修改对象数组里的对象属性名"></a>js高效修改对象数组里的对象属性名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appList: [</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试1&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试11&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试111&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试2&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试22&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试222&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>（因为插件的要求）改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">productArr: [</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试1&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试11&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试111&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试2&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试22&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试222&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var productArr = JSON.parse(JSON.stringify(appList).replace(/list/g, &#x27;children&#x27;));</span><br><span class="line">productArr = JSON.parse(JSON.stringify(productArr).replace(/id/g, &#x27;value&#x27;));</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js高效修改对象数组里的对象属性名"><a href="#【参考】：-js高效修改对象数组里的对象属性名" class="headerlink" title="【参考】： js高效修改对象数组里的对象属性名"></a>【参考】： <a href="https://blog.csdn.net/Mr_JavaScript/article/details/85236957">js高效修改对象数组里的对象属性名</a></h6>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中数组的操作</title>
    <url>/2019/08/09/JS%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="js中数组常用方法总结"><a href="#js中数组常用方法总结" class="headerlink" title="js中数组常用方法总结"></a><a href="https://www.cnblogs.com/jinzhou/p/9072614.html">js中数组常用方法总结</a></h4><h4 id="数组增删元素"><a href="#数组增删元素" class="headerlink" title="数组增删元素"></a>数组增删元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 数组添加或删除元素</span><br><span class="line">function filterArr(arr, item) &#123;</span><br><span class="line">    var _index;  //是否含有该选项</span><br><span class="line">    var html = &quot;&quot;;</span><br><span class="line">    _index = arr.indexOf(item);</span><br><span class="line">    if(_index &gt; -1) &#123;</span><br><span class="line">        arr.splice(_index, 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        arr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数组转字符串</span><br><span class="line">    html = arr.join(&#x27;,&#x27;);</span><br><span class="line"></span><br><span class="line">    return html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach()</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">arr.forEach(function (item) &#123;</span><br><span class="line">    if (item === 3) &#123;</span><br><span class="line">        return;		// ----&gt;3的元素跳过</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">// 输出结果：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h4 id="判断某变量的值是否等于某数组中的一个元素"><a href="#判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="判断某变量的值是否等于某数组中的一个元素"></a>判断某变量的值是否等于某数组中的一个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">var testStr=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">return testStr.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">var test=[&#x27;a&#x27;,23,-1];</span><br><span class="line">alert(IsInArray(test,&#x27;a&#x27;));//true</span><br><span class="line">alert(IsInArray(test,2));//false</span><br><span class="line">alert(IsInArray(test,-1));//true</span><br></pre></td></tr></table></figure>

<p>需求：</p>
<p>在后台的某些模块中，不显示表头的游戏下拉筛选框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当前页URL</span><br><span class="line">var page = window.location.hash.split(&quot;?&quot;)[0];</span><br><span class="line">// 当前模块值</span><br><span class="line">var this_module = page.split(&quot;/&quot;)[2];</span><br><span class="line">（判断连接中是否是这几个模块下的链接）</span><br><span class="line">// 需要去掉游戏选择下拉框的模块</span><br><span class="line">var moduleArr = [&quot;app&quot;,&quot;channel&quot;,&quot;agent&quot;,&quot;config&quot;,&quot;white_list&quot;,&quot;account&quot;];</span><br><span class="line"></span><br><span class="line">// 判断模块值是否等于数组中的其中一个</span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">    var str=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">    return str.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">//是否在模块组中</span><br><span class="line">var flag = IsInArray(moduleArr, this_module);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">    $(&quot;.product-select&quot;).hide();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $(&quot;.product-select&quot;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js-判断某变量的值是否等于某数组中的一个元素"><a href="#【参考】：-js-判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="【参考】： js:判断某变量的值是否等于某数组中的一个元素"></a>【参考】： <a href="http://www.imooc.com/wenda/detail/476679">js:判断某变量的值是否等于某数组中的一个元素</a></h6><h4 id="js高效修改对象数组里的对象属性名"><a href="#js高效修改对象数组里的对象属性名" class="headerlink" title="js高效修改对象数组里的对象属性名"></a>js高效修改对象数组里的对象属性名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appList: [</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试1&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试11&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试111&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试2&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试22&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试222&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>（因为插件的要求）改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">productArr: [</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试1&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试11&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试111&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试2&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试22&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试222&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var productArr = JSON.parse(JSON.stringify(appList).replace(/list/g, &#x27;children&#x27;));</span><br><span class="line">productArr = JSON.parse(JSON.stringify(productArr).replace(/id/g, &#x27;value&#x27;));</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js高效修改对象数组里的对象属性名"><a href="#【参考】：-js高效修改对象数组里的对象属性名" class="headerlink" title="【参考】： js高效修改对象数组里的对象属性名"></a>【参考】： <a href="https://blog.csdn.net/Mr_JavaScript/article/details/85236957">js高效修改对象数组里的对象属性名</a></h6><h4 id="用js实现模糊查询的几种方法"><a href="#用js实现模糊查询的几种方法" class="headerlink" title="用js实现模糊查询的几种方法"></a><a href="https://www.jianshu.com/p/4cd4f74a0b20">用js实现模糊查询的几种方法</a></h4><h5 id="1-indexof-方法"><a href="#1-indexof-方法" class="headerlink" title="1. indexof 方法"></a>1. indexof 方法</h5><blockquote>
<p>语法：stringObject.indexOf(searchvalue, fromindex)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定需检索的字符串值。 fromindex<br>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>
</blockquote>
<blockquote>
<p>说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用indexof方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].indexOf(keyWord) &gt;= 0) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-split-方法"><a href="#2-split-方法" class="headerlink" title="2. split 方法"></a>2. split 方法</h5><blockquote>
<p>语法：stringObject.split(separator, howmany)</p>
</blockquote>
<blockquote>
<p>参数：separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
</blockquote>
<blockquote>
<p>说明：该方法通过在 separator 指定的边界处将字符串 stringObject 分割成子串并返回子串数组。返回的数组中的字串不包括 separator 自身。如果 stringObject 中不存在 separator，将返回一个只包含stringObject的数组。故可以根据返回数组的长度来判断是否存在子字符串 separator 。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用spilt方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].split(keyWord).length &gt; 1) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-match-方法"><a href="#3-match-方法" class="headerlink" title="3. match 方法"></a>3. match 方法</h5><blockquote>
<p>语法：stringObject.match(searchvalue) 或 stringObject.match(regexp)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定要检索的字符串值。regexp 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>
</blockquote>
<blockquote>
<p>说明：该方法将在字符串 stringObject 内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本，将返回 null 。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用match方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].match(keyWord) != null) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-test方法（正则匹配）"><a href="#4-test方法（正则匹配）" class="headerlink" title="4. test方法（正则匹配）"></a>4. test方法（正则匹配）</h5><blockquote>
<p>语法：RegExpObject.test(string)</p>
</blockquote>
<blockquote>
<p>参数：string 必需。要检测的字符串。</p>
</blockquote>
<blockquote>
<p>说明：该方法用于检测一个字符串是否匹配某个模式。如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 使用test方法实现模糊查询</span><br><span class="line">   * @param  &#123;Array&#125;  list     原数组</span><br><span class="line">   * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line">   * @return &#123;Array&#125;           查询的结果</span><br><span class="line">   */</span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var reg =  new RegExp(keyWord);</span><br><span class="line">    var arr = [];</span><br><span class="line">    for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">      if (reg.test(list[i])) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><blockquote>
<p>测试条件：一个长度为100的数组，每个方法测试50次，取平均值。<br>indexof 方法耗费时间： 0.048ms<br>split 方法耗费时间： 0.037ms<br>match 方法耗费时间： 0.178ms<br>test 方法耗费时间： 0.039ms</p>
</blockquote>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>从上面测试结果可以看出在几百几千甚至几万条数据量的情况下，前端去处理都是没问题的，相比发送一个 ajax 请求去后台来说，前端还是具有很大优势的，能节省不少时间。</li>
<li>相比其他方法，match 方法性能最差，消耗的时间差不多是其他方法的3-4倍，虽说这一点点时间相比发送ajax来说，也算提高了很多既然我们在一开始就是为了提高用户体验，那么我们也应该追求极致啦，所以 match 选手落败。</li>
<li>除了 match 方法，其他三个方法在性能上差不多。不过在这里有一点需要提出的就是， test 方法因为使用到了正则表达式，所以能够实现的功能会比较强大，写出来的代码也更加简洁。打个比方，在不区分大小写的模糊搜索条件下， test 方法只需在正则表达式中添加修饰符 i 即可实现不区分大小写，而 indexof 方法和 split 方法则要通过多次的方法调用和逻辑运算符才能实现效果。</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中操作URL的相关方法</title>
    <url>/2019/08/09/JS%E4%B8%AD%E6%93%8D%E4%BD%9CURL%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="获取URL中的参数："><a href="#获取URL中的参数：" class="headerlink" title="获取URL中的参数："></a>获取URL中的参数：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">** @param name&#123;string&#125;    // 参数名</span><br><span class="line">*/</span><br><span class="line">function getURLParam(name) &#123;</span><br><span class="line">    // 获取完整的查询参数字符串</span><br><span class="line">    const queryString = window.location.search;</span><br><span class="line"></span><br><span class="line">    // 创建URLSearchParams对象来解析查询参数</span><br><span class="line">    const params = new URLSearchParams(queryString);</span><br><span class="line"></span><br><span class="line">    // 使用get方法获取指定名称的参数值</span><br><span class="line">    return params.get(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>http://127.0.0.1:5500/URL.html?username=test&amp;age=18</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const username = getURLParam(&#x27;username&#x27;);</span><br><span class="line">console.log(username); // &quot;test&quot;</span><br><span class="line"></span><br><span class="line">const age = getURLParam(&#x27;age&#x27;);</span><br><span class="line">console.log(age); // &quot;18&quot;</span><br></pre></td></tr></table></figure>

<h3 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const urlString = &#x27;https://www.test.com:8080/path/url.html?username=test&amp;age=18&#x27;;</span><br><span class="line">const url = new URL(urlString);</span><br><span class="line"></span><br><span class="line">console.log(url.protocol);  // &quot;https:&quot;</span><br><span class="line">console.log(url.host);      // &quot;www.test.com:8080&quot;</span><br><span class="line">console.log(url.pathname);  // &quot;/path/url.html&quot;</span><br><span class="line">console.log(url.search);    // &quot;?username=test&amp;age=18&quot;</span><br><span class="line">console.log(url.hostname);  // www.test.com</span><br><span class="line">console.log(url.href);      // https://www.test.com:8080/path/url.html?username=test&amp;age=18</span><br><span class="line">console.log(url.origin);    // https://www.test.com:8080</span><br><span class="line">console.log(url.port);      // 8080</span><br><span class="line"></span><br><span class="line">// 解析查询参数</span><br><span class="line">const searchParams = new URLSearchParams(url.search);</span><br><span class="line">console.log(searchParams.get(&#x27;username&#x27;)); // &quot;test&quot;</span><br><span class="line">console.log(searchParams.get(&#x27;age&#x27;)); // &quot;18&quot;</span><br></pre></td></tr></table></figure>

<h3 id="构建URL"><a href="#构建URL" class="headerlink" title="构建URL"></a>构建URL</h3><blockquote>
<p>在页面之间传参，不想手动把参数使用<code>&amp;</code>符号一个一个拼起来时</p>
</blockquote>
<ol>
<li><p>使用URL构造函数构建URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = new URL(&#x27;https://www.test.com&#x27;);</span><br><span class="line">url.pathname = &#x27;/path&#x27;;</span><br><span class="line">url.searchParams.set(&#x27;username&#x27;, &#x27;test&#x27;);</span><br><span class="line">url.searchParams.set(&#x27;age&#x27;, &#x27;18&#x27;);</span><br><span class="line">console.log(url.toString()); // &quot;https://www.test.com/path?username=test&amp;age=18&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用字符串拼接构建URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const baseUrl = &#x27;https://www.test.com&#x27;;</span><br><span class="line">const path = &#x27;/path&#x27;;</span><br><span class="line">const params = new URLSearchParams(&#123; username: &#x27;test&#x27;, age: &#x27;18&#x27; &#125;);</span><br><span class="line">const constructedUrl = `$&#123;baseUrl&#125;$&#123;path&#125;?$&#123;params.toString()&#125;`;</span><br><span class="line">console.log(constructedUrl); // &quot;https://www.test.com/path?username=test&amp;age=18&quot;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h4 id="参数对应的值带-号"><a href="#参数对应的值带-号" class="headerlink" title="参数对应的值带=号"></a>参数对应的值带<code>=</code>号</h4><p>如果动态传参时，参数对应的值含有<code>=</code>号，避免浏览器自动处理等号，使用<code>encodeURIComponent</code>方法</p>
<p>发送端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const key = &quot;BANXB1cAPFcEAGwFZgk=&quot;;</span><br><span class="line">const encodedValue = encodeURIComponent(key);</span><br><span class="line">const url = `edit.html?key=$&#123;encodedValue&#125;`;</span><br><span class="line">window.location.href = url;</span><br></pre></td></tr></table></figure>

<p>接收端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const queryString = window.location.search;</span><br><span class="line">const urlParams = new URLSearchParams(queryString);</span><br><span class="line">const encodedValue = urlParams.get(&quot;key&quot;);</span><br><span class="line">const decodedValue = decodeURIComponent(encodedValue);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因在项目中使用<code>$.form.href(&quot;&#123;:url(&#39;xy/test/group&#39;)&#125;&quot; + &quot;?id=&quot; + id + &#39;&amp;key=&#39;+key);</code>这样跳转到页面2。其中<code>key</code>的值最后可能带有<code>=</code>号，跳转到页面2的时候，在页面2中获取到的key参数少了最后的<code>=</code>号</p>
</blockquote>
<blockquote>
<p>如果大家使用<code>window.location.href</code>进行页面跳转时，在链接上传参，没有问题，可以忽略这个问题。</p>
</blockquote>
<h3 id="将网址url中的参数转化为JSON格式的两种方法"><a href="#将网址url中的参数转化为JSON格式的两种方法" class="headerlink" title="将网址url中的参数转化为JSON格式的两种方法"></a><a href="https://www.cnblogs.com/wangshucheng/p/11203097.html">将网址url中的参数转化为JSON格式的两种方法</a></h3><h4 id="第一种：-for-循环方式"><a href="#第一种：-for-循环方式" class="headerlink" title="第一种： for 循环方式"></a>第一种： for 循环方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第一种： for循环</span><br><span class="line">var GetQueryJson1 = function () &#123;</span><br><span class="line">  let url = location.href; // 获取当前浏览器的URL</span><br><span class="line">  let arr = []; // 存储参数的数组</span><br><span class="line">  let res = &#123;&#125;; // 存储最终JSON结果对象</span><br><span class="line">  arr = url.split(&#x27;?&#x27;)[1].split(&#x27;&amp;&#x27;); // 获取浏览器地址栏中的参数</span><br><span class="line">   </span><br><span class="line">  for (let i = 0; i &lt; arr.length; i++) &#123; // 遍历参数</span><br><span class="line">    if (arr[i].indexOf(&#x27;=&#x27;) != -1)&#123; // 如果参数中有值</span><br><span class="line">      let str = arr[i].split(&#x27;=&#x27;);</span><br><span class="line">      res[str[0]] = str[1];</span><br><span class="line">    &#125; else &#123; // 如果参数中无值</span><br><span class="line">      res[arr[i]] = &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line">console.log(GetQueryJson1());</span><br></pre></td></tr></table></figure>

<h4 id="第二种：正则表达式方式"><a href="#第二种：正则表达式方式" class="headerlink" title="第二种：正则表达式方式"></a>第二种：正则表达式方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第二种：正则表达式</span><br><span class="line">var GetQueryJson2 = function () &#123;</span><br><span class="line">  let url = location.href; // 获取当前浏览器的URL</span><br><span class="line">  let param = &#123;&#125;; // 存储最终JSON结果对象</span><br><span class="line">  url.replace(/([^?&amp;]+)=([^?&amp;]+)/g, function(s, v, k) &#123;</span><br><span class="line">    param[v] = decodeURIComponent(k);//解析字符为中文</span><br><span class="line">    return k + &#x27;=&#x27; +  v;</span><br><span class="line">  &#125;);</span><br><span class="line">  return param;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">console.log(GetQueryJson2());</span><br></pre></td></tr></table></figure>

<h4 id="URL参数改为json格式"><a href="#URL参数改为json格式" class="headerlink" title="URL参数改为json格式"></a>URL参数改为json格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(formEl).serialize()                // 表单数据（筛选条件)</span><br><span class="line">    ,arr = decodeURIComponent(data).split(&quot;&amp;&quot;)  // 对数据拆分处理</span><br><span class="line">    ,formData = &#123;&#125;                              // 需要缓存的数据对象</span><br><span class="line">// 转为JSON对象</span><br><span class="line">arr.map(function(item) &#123;</span><br><span class="line">    formData[item.split(&#x27;=&#x27;)[0]] =  item.split(&#x27;=&#x27;)[1];</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改url参数"><a href="#修改url参数" class="headerlink" title="修改url参数"></a>修改url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function changeURLArg(url,arg,arg_val)&#123; </span><br><span class="line">    var pattern=arg+&#x27;=([^&amp;]*)&#x27;; </span><br><span class="line">    var replaceText=arg+&#x27;=&#x27;+arg_val; </span><br><span class="line">    if(url.match(pattern))&#123; </span><br><span class="line">        var tmp=&#x27;/(&#x27;+ arg+&#x27;=)([^&amp;]*)/gi&#x27;; </span><br><span class="line">        tmp=url.replace(eval(tmp),replaceText); </span><br><span class="line">        return tmp; </span><br><span class="line">    &#125;else&#123; </span><br><span class="line">        if(url.match(&#x27;[\?]&#x27;))&#123; </span><br><span class="line">            return url+&#x27;&amp;&#x27;+replaceText; </span><br><span class="line">        &#125;else&#123; </span><br><span class="line">            return url+&#x27;?&#x27;+replaceText; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return url+&#x27;\n&#x27;+arg+&#x27;\n&#x27;+arg_val; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变hash值"><a href="#改变hash值" class="headerlink" title="改变hash值"></a>改变hash值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//改变hash值</span><br><span class="line">function changeHash(key, val) &#123;</span><br><span class="line">    location.hash= location.hash.match(key+&quot;=([^&amp;]*)&quot;) ? location.hash.replace(eval(&#x27;/(&#x27;+ key+&#x27;=)([^&amp;]*)/gi&#x27;), key+&quot;=&quot;+val) : location.hash + &quot;&amp;&quot;+key+&quot;=&quot;+val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断当前设备</title>
    <url>/2018/09/14/JS%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h2 id="判断当前设备是否为移动端"><a href="#判断当前设备是否为移动端" class="headerlink" title="判断当前设备是否为移动端"></a>判断当前设备是否为移动端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isMobile() &#123;</span><br><span class="line">    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断当前设备是否为Android设备"><a href="#判断当前设备是否为Android设备" class="headerlink" title="判断当前设备是否为Android设备"></a>判断当前设备是否为Android设备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isAndroid() &#123;</span><br><span class="line">  return /Android/i.test(navigator.userAgent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断当前设备是否为iOS设备"><a href="#判断当前设备是否为iOS设备" class="headerlink" title="判断当前设备是否为iOS设备"></a>判断当前设备是否为iOS设备</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isIOS() &#123;</span><br><span class="line">  return /iPhone|iPad|iPod/i.test(navigator.userAgent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断当前设备是否为PC端"><a href="#判断当前设备是否为PC端" class="headerlink" title="判断当前设备是否为PC端"></a>判断当前设备是否为PC端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isDesktop() &#123;</span><br><span class="line">    const userAgent = navigator.userAgent;</span><br><span class="line">    // 移动设备关键词</span><br><span class="line">    const mobileKeywords = [&#x27;Mobile&#x27;, &#x27;Android&#x27;, &#x27;iPhone&#x27;, &#x27;iPad&#x27;, &#x27;Windows Phone&#x27;, &#x27;BlackBerry&#x27;, &#x27;Nokia&#x27;, &#x27;SymbianOS&#x27;];</span><br><span class="line"></span><br><span class="line">    // 判断是否包含移动设备关键词</span><br><span class="line">    for (let keyword of mobileKeywords) &#123;</span><br><span class="line">        if (userAgent.includes(keyword)) &#123;</span><br><span class="line">            return false; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JavaScript中的navigator.userAgent属性来获取用户代理字符串</p>
</blockquote>
<blockquote>
<p>如果将iPod也视为移动设备，可以将<code>iPod</code>添加到<code>mobileKeywords</code>中。</p>
</blockquote>
<h2 id="判断当前环境-当前所在客户端"><a href="#判断当前环境-当前所在客户端" class="headerlink" title="判断当前环境(当前所在客户端)"></a>判断当前环境(当前所在客户端)</h2><h3 id="判断是否为微信"><a href="#判断是否为微信" class="headerlink" title="判断是否为微信"></a>判断是否为微信</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isWeChat() &#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    return ua.indexOf(&#x27;micromessenger&#x27;) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为QQ"><a href="#判断是否为QQ" class="headerlink" title="判断是否为QQ"></a>判断是否为QQ</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isQQ() &#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    return ua.indexOf(&quot;qq&quot;) !== -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为支付宝"><a href="#判断是否为支付宝" class="headerlink" title="判断是否为支付宝"></a>判断是否为支付宝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isAlipay() &#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    return ua.indexOf(&#x27;alipayclient&#x27;) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为微博"><a href="#判断是否为微博" class="headerlink" title="判断是否为微博"></a>判断是否为微博</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isWeibo() &#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    return ua.indexOf(&#x27;weibo&#x27;) &gt; -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript对象的相关操作</title>
    <url>/2022/07/09/JavaScript%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="删除对象某个属性"><a href="#删除对象某个属性" class="headerlink" title="删除对象某个属性"></a>删除对象某个属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    name: &#x27;zhagnsan&#x27;,</span><br><span class="line">    age: 19 </span><br><span class="line">&#125;</span><br><span class="line">delete obj.name //true</span><br></pre></td></tr></table></figure>

<h4 id="数组对象按照某个属性排序"><a href="#数组对象按照某个属性排序" class="headerlink" title="数组对象按照某个属性排序"></a>数组对象按照某个属性排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group.sort(function(a, b)&#123;return Number(a.year) - Number(b.year)&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="判断对象是否为空"><a href="#判断对象是否为空" class="headerlink" title="判断对象是否为空"></a>判断对象是否为空</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断对象是否为空</span><br><span class="line">var obj = JSON.stringify(data);</span><br><span class="line">if(obj === &#x27;&#123;&#125;&#x27;) &#123;</span><br><span class="line">    console.log(&quot;对象为空&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    console.log(&quot;对象不为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者直接判断是否具有某属性</span><br><span class="line"></span><br><span class="line">var title = data.id ? &quot;编辑&quot; : &quot;新增&quot;;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/jpfss/p/9105119.html">js判断对象是否为空对象的几种方法</a></p>
<p><a href="https://m.html.cn/qa/javascript/11178.html">javascript怎么判断对象是否为空？</a></p>
<h4 id="js拷贝对象，不改变原来对象"><a href="#js拷贝对象，不改变原来对象" class="headerlink" title="js拷贝对象，不改变原来对象"></a>js拷贝对象，不改变原来对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a:1,b:2&#125;  </span><br><span class="line">var newObj = JSON.parse(JSON.stringify(obj)); </span><br></pre></td></tr></table></figure>

<h4 id="对象格式转换"><a href="#对象格式转换" class="headerlink" title="对象格式转换"></a>对象格式转换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;aaaaaa&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;0&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;bbbb&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;1&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">转为这样的格式：</span><br><span class="line">var idPidArr = &#123;</span><br><span class="line">    aaaaaa: &quot;0&quot;,</span><br><span class="line">    bbbb: &quot;1&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">var idPidArr = &#123;&#125;;</span><br><span class="line">for(var i = 0; i&lt; data.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">    idPidArr[data[i].id] = data[i].pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(idPidArr);</span><br></pre></td></tr></table></figure>

<h4 id="如果动态设置json对象的key"><a href="#如果动态设置json对象的key" class="headerlink" title="如果动态设置json对象的key"></a><a href="https://www.cnblogs.com/strangerqt/p/4465114.html">如果动态设置json对象的key</a></h4><p>项目中要求动态设置json的key属性，如果按照一般的json设置方法是不行的。假如你把一个key设置为一个变量的话，那么最后js解析出来的就是key为这个变量名而不是这个变量的值。</p>
<p>解决：通过使用</p>
<p><code>var o = &#123;&#125;;</code></p>
<p><code>o[变量名] = 变量值</code></p>
<p>再把这个变量赋值给json即可</p>
<h4 id="计算对象属性个数"><a href="#计算对象属性个数" class="headerlink" title="计算对象属性个数"></a>计算对象属性个数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  p1: 123,</span><br><span class="line">  p2: 456</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.keys(obj).length // 2</span><br><span class="line">Object.getOwnPropertyNames(obj).length // 2</span><br></pre></td></tr></table></figure>

<p>多字词语来作为属性名，必须给它们加上引号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">  name: &quot;John&quot;,</span><br><span class="line">  age: 30,</span><br><span class="line">  &quot;likes birds&quot;: true  // 多词属性名必须加引号</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>列表中的最后一个属性应以逗号结尾：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这叫做尾随（trailing）或悬挂（hanging）逗号。这样便于我们添加、删除和移动属性，因为所有的行都是相似的。</p>
<p>当创建一个对象时，我们可以在对象字面量中使用方括号。这叫做 <strong>计算属性</strong>。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="title function_">prompt</span>(<span class="string">&quot;Which fruit to buy?&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit]: <span class="number">5</span>, <span class="comment">// 属性名是从 fruit 变量中得到的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( bag.<span class="property">apple</span> ); <span class="comment">// 5 如果 fruit=&quot;apple&quot;</span></span><br></pre></td></tr></table></figure>

<p>计算属性的含义很简单：<code>[fruit]</code> 含义是属性名应该从 <code>fruit</code> 变量中获取。</p>
<p>所以，如果一个用户输入 <code>&quot;apple&quot;</code>，<code>bag</code> 将变为 <code>&#123;apple: 5&#125;</code>。</p>
<p>本质上，这跟下面的语法效果相同：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="title function_">prompt</span>(<span class="string">&quot;Which fruit to buy?&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> bag = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 fruit 变量中获取值</span></span><br><span class="line">bag[fruit] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>……但是看起来更好。</p>
<p>我们可以在方括号中使用更复杂的表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> bag = &#123;</span><br><span class="line">  [fruit + <span class="string">&#x27;Computers&#x27;</span>]: <span class="number">5</span> <span class="comment">// bag.appleComputers = 5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方括号比点符号更强大。它允许任何属性名和变量，但写起来也更加麻烦。</p>
<p>所以，大部分时间里，当属性名是已知且简单的时候，就使用点符号。如果我们需要一些更复杂的内容，那么就用方括号。</p>
<h4 id="克隆与合并，Object-assign"><a href="#克隆与合并，Object-assign" class="headerlink" title="克隆与合并，Object.assign"></a><a href="https://zh.javascript.info/object-copy#cloning-and-merging-object-assign">克隆与合并，Object.assign</a></h4><h4 id="在html中显示JSON数据的方法"><a href="#在html中显示JSON数据的方法" class="headerlink" title="在html中显示JSON数据的方法"></a>在html中显示JSON数据的方法</h4><p>其实JSON.stringify本身就可以将JSON格式化，具体的用法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(res, null, 2);	// res是要JSON化的对象，2是spacing</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/web/553898.html">在html中显示JSON数据的方法</a></p>
<h4 id="serialize获取的数据格式转换为json对象"><a href="#serialize获取的数据格式转换为json对象" class="headerlink" title="serialize获取的数据格式转换为json对象"></a>serialize获取的数据格式转换为json对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(formEl).serialize()                // 表单数据（筛选条件)</span><br><span class="line">    ,arr = decodeURIComponent(data).split(&quot;&amp;&quot;)  // 对数据拆分处理</span><br><span class="line">    ,formData = &#123;&#125;                              // 需要缓存的数据对象</span><br><span class="line"></span><br><span class="line">// 转为JSON对象</span><br><span class="line">arr.map(function(item) &#123;</span><br><span class="line">    formData[item.split(&#x27;=&#x27;)[0]] =  item.split(&#x27;=&#x27;)[1];</span><br><span class="line">&#125;)</span><br><span class="line">// 缓存formData</span><br><span class="line">setItem(&#x27;formData&#x27;, formData);</span><br></pre></td></tr></table></figure>

<p><a href="https://segmentfault.com/a/1190000013107871">JavaScript 深拷贝性能分析</a></p>
<p><a href="https://www.cnblogs.com/makai/p/11249986.html">深入 js 深拷贝对象</a></p>
<p>日常深拷贝，建议序列化反序列化方法。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用代码</title>
    <url>/2018/08/20/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>在谷歌浏览器控制台（console）中，编写多行代码时，实现换行的快捷键：<code>shift + 回车</code></p>
<p>谷歌浏览器全局搜索关键字：<code>alt + shift + f</code></p>
<h4 id="日期时间Date的处理"><a href="#日期时间Date的处理" class="headerlink" title="日期时间Date的处理"></a>日期时间Date的处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">var n = d.toLocaleDateString();    // 2020/10/11</span><br><span class="line">var n = d.toLocaleString(); 	  	  // 2020/10/11 15:53:22</span><br><span class="line">var n = d.toLocaleTimeString(); 	  // 15:53:22</span><br></pre></td></tr></table></figure>

<h4 id="jQuery获取动态生成的元素"><a href="#jQuery获取动态生成的元素" class="headerlink" title="jQuery获取动态生成的元素"></a>jQuery获取动态生成的元素</h4><p><a href="https://www.jb51.net/article/51085.htm">jQuery获取动态生成的元素示例</a></p>
<p><a href="https://blog.csdn.net/h_025/article/details/51821766">jquery获取动态生成的元素</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.button&quot;).live(&quot;click&quot;,function()&#123; </span><br><span class="line">     console.info($(&quot;#mytd&quot;).html()); </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;td&quot;).on(&quot;focus&quot;,&quot;input&quot;,function()&#123;</span><br><span class="line">    alert(&quot;niha&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="返回上一页"><a href="#返回上一页" class="headerlink" title="返回上一页"></a>返回上一页</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">href=&quot;javascript:window.history.back(-1);&quot;</span><br></pre></td></tr></table></figure>

<h4 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h4><p>当需要获取页面中的元素时，如果这script放在元素的前面，那么需要加window.onload；如果script放在元素后面，就不需要加window.onload。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 回到顶部</span><br><span class="line">window.onscroll = function()&#123;</span><br><span class="line">    if (document.documentElement.scrollTop || document.body.scrollTop &gt; 0) &#123;</span><br><span class="line">        document.getElementById(&quot;toTop&quot;).style.display=&#x27;block&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        document.getElementById(&quot;toTop&quot;).style.display=&#x27;none&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;toTop&quot;).onclick = function()&#123;</span><br><span class="line">    document.body.scrollTop = document.documentElement.scrollTop = 0;</span><br><span class="line">    document.getElementById(&quot;toTop&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原生ajax请求"><a href="#原生ajax请求" class="headerlink" title="原生ajax请求"></a>原生ajax请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &#x27;POST&#x27;,</span><br><span class="line">    async:false,</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    url: &quot;http://api.qmgjs.weiduanxian.com:7000/account/registerVerifyCode.json?telMobile=&quot;+mobile+&quot;&amp;token=&quot;+tokenValue+&quot;&amp;resultCode=&quot;+postResultCode,</span><br><span class="line">    success: function(data)&#123;</span><br><span class="line">      if(data.code == &#x27;0&#x27;)&#123;</span><br><span class="line">           //做处理，如果正确</span><br><span class="line">          toastShow();</span><br><span class="line">          $(&quot;.toast_content&quot;).text(&quot;验证码已发送，请查收！&quot;);</span><br><span class="line"></span><br><span class="line">      &#125;else&#123;</span><br><span class="line">           errorShow();</span><br><span class="line">           $(&quot;#error&quot;).text(data.errMsg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(data) &#123;</span><br><span class="line">       errorShow();</span><br><span class="line">       $(&quot;#error&quot;).text(data.errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="自动执行的函数"><a href="#自动执行的函数" class="headerlink" title="自动执行的函数"></a>自动执行的函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line">  var a;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="追加列表"><a href="#追加列表" class="headerlink" title="追加列表"></a>追加列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var template=&quot;&quot;,wqListLen,strHtml=&quot;&quot;;//整个列表的html内容，单个li的内容</span><br><span class="line">var area = document.getElementById(&#x27;ssq_list&#x27;);//往期列表的盒子</span><br><span class="line">for(var i=0;i &lt; wqListLen;i++)&#123;</span><br><span class="line">    strHtml+= &#x27;&lt;li&gt;&lt;span&gt;第&#x27;+wqList[i].issue+&#x27;期&lt;/span&gt;&lt;span&gt;&#x27;+wqList[i].time+&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">template = template + strHtml; </span><br><span class="line">area.innerHTML = template;</span><br></pre></td></tr></table></figure>

<h4 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.reload(); //刷新页面</span><br></pre></td></tr></table></figure>

<h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href=&quot;cashCoupon.html&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="是否允许页面滑动"><a href="#是否允许页面滑动" class="headerlink" title="是否允许页面滑动"></a>是否允许页面滑动</h4><p>例如：在弹出弹窗和蒙层的情况下，是否允许蒙层底下的页面滑动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mo=function(e)&#123;e.preventDefault();&#125;; //默认事件</span><br></pre></td></tr></table></figure>

<h5 id="1-允许滑动"><a href="#1-允许滑动" class="headerlink" title="(1)允许滑动"></a>(1)允许滑动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.style.overflow=&#x27;&#x27;;//出现滚动条</span><br><span class="line">document.removeEventListener(&quot;touchmove&quot;,mo,false);  </span><br></pre></td></tr></table></figure>

<h5 id="2-禁止滑动"><a href="#2-禁止滑动" class="headerlink" title="(2)禁止滑动"></a>(2)禁止滑动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.style.overflow=&#x27;hidden&#x27;;        </span><br><span class="line">document.addEventListener(&quot;touchmove&quot;,mo,false);//禁止页面滑动</span><br></pre></td></tr></table></figure>

<h4 id="控制移动端显示倍数"><a href="#控制移动端显示倍数" class="headerlink" title="控制移动端显示倍数"></a>控制移动端显示倍数</h4><p>可行：直接把maximum-scale改为一个放大倍数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;target-densitydpi=device-dpi, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.5, user-scalable=yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="https://www.jb51.net/article/67670.htm">JS制作手机端自适应缩放显示</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _width = parseInt(window.screen.width);</span><br><span class="line">var dpr =  parseInt(window.devicePixelRatio);</span><br><span class="line">var scale = (_width/640)*dpr;</span><br><span class="line">var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">var result = /android (\d+\.\d+)/.exec(ua);</span><br><span class="line">if (result)&#123;</span><br><span class="line">var version = parseFloat(result[1]);</span><br><span class="line">if(version&gt;2.3)&#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale = &#x27;+scale+&#x27;,minimum-scale = 1.0, maximum-scale = 3,user-scalable=yes, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=640, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">alert(dpr);</span><br><span class="line">alert(scale);</span><br></pre></td></tr></table></figure>

<h4 id="监听输入框是否有值，改变按钮的可用性和背景颜色"><a href="#监听输入框是否有值，改变按钮的可用性和背景颜色" class="headerlink" title="监听输入框是否有值，改变按钮的可用性和背景颜色"></a>监听输入框是否有值，改变按钮的可用性和背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#tel&#x27;).keyup(function () &#123;</span><br><span class="line">	var v = $(&#x27;#tel&#x27;).val();</span><br><span class="line">	if (!v) &#123;</span><br><span class="line">		$(&#x27;.telBtn&#x27;).attr(&#x27;disabled&#x27;, true)</span><br><span class="line">		$(&#x27;.telBtn&#x27;).css(&quot;background&quot;, &quot;#abb2c1&quot;)</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		$(&#x27;.telBtn&#x27;).attr(&#x27;disabled&#x27;, false);</span><br><span class="line">		$(&#x27;.telBtn&#x27;).css(&quot;background&quot;, &quot;#0087e2&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="输入框获取焦点，页面放大，解决方法："><a href="#输入框获取焦点，页面放大，解决方法：" class="headerlink" title="输入框获取焦点，页面放大，解决方法："></a>输入框获取焦点，页面放大，解决方法：</h4><p><a href="http://www.qdfuns.com/notes/16438/5e38b8c6cf888c6f69adc98048d7836f.html">参考博客</a></p>
<h4 id="监听点击事件"><a href="#监听点击事件" class="headerlink" title="监听点击事件"></a>监听点击事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;text&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, function(event)&#123;alert(&quot;请输入内容&quot;)&#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="设备判断："><a href="#设备判断：" class="headerlink" title="设备判断："></a>设备判断：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent.toLowerCase(); </span><br><span class="line">var browser = &#123;</span><br><span class="line">versions: function () &#123;</span><br><span class="line">   var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">   return &#123;//移动终端浏览器版本信息</span><br><span class="line">       trident: u.indexOf(&#x27;Trident&#x27;) &gt; -1, //IE内核</span><br><span class="line">       presto: u.indexOf(&#x27;Presto&#x27;) &gt; -1, //opera内核</span><br><span class="line">       webKit: u.indexOf(&#x27;AppleWebKit&#x27;) &gt; -1, //苹果、谷歌内核</span><br><span class="line">       gecko: u.indexOf(&#x27;Gecko&#x27;) &gt; -1 &amp;&amp; u.indexOf(&#x27;KHTML&#x27;) == -1, //火狐内核</span><br><span class="line">       mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class="line">       ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class="line">       android: u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Linux&#x27;) &gt; -1, //android终端或uc浏览器</span><br><span class="line">       iPhone: u.indexOf(&#x27;iPhone&#x27;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class="line">       iPad: u.indexOf(&#x27;iPad&#x27;) &gt; -1, //是否iPad</span><br><span class="line">       webApp: u.indexOf(&#x27;Safari&#x27;) == -1 //是否web应该程序，没有头部与底部</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;(),</span><br><span class="line">language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为移动端"><a href="#判断是否为移动端" class="headerlink" title="判断是否为移动端"></a>判断是否为移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent;</span><br><span class="line">var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">isIphone = !ipad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">isAndroid = ua.match(/(Android)\s+([\d.]+)/),</span><br><span class="line">isMobile = isIphone || isAndroid;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否为微信"><a href="#判断是否为微信" class="headerlink" title="判断是否为微信"></a>判断是否为微信</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isWeiXin() &#123;   </span><br><span class="line">  var ua = window.navigator.userAgent.toLowerCase();</span><br><span class="line">  // alert(ua);</span><br><span class="line">  if (ua.match(/MicroMessenger/i) == &#x27;micromessenger&#x27;) &#123;</span><br><span class="line">      return true;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否为PC端"><a href="#判断是否为PC端" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function IsPC()&#123;  </span><br><span class="line">  var userAgentInfo = navigator.userAgent;  </span><br><span class="line">  var Agents = new Array(&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;);  </span><br><span class="line">  var flag = true;  </span><br><span class="line">  for (var v = 0; v &lt; Agents.length; v++) &#123;  </span><br><span class="line">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123; flag = false; break; &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   return flag;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="是不是手机端"><a href="#是不是手机端" class="headerlink" title="是不是手机端"></a>是不是手机端</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isMobile)&#123;</span><br><span class="line">  if(isIphone)&#123;</span><br><span class="line">          location.href = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">  &#125;else if(isAndroid)&#123;</span><br><span class="line">          location.href = &#x27;http://dl.fa.weiduanxian.com/downloads/guijsh-wd.apk&#x27;;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&quot;computer&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="是不是微信"><a href="#是不是微信" class="headerlink" title="是不是微信"></a>是不是微信</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isWeiXin()) &#123;</span><br><span class="line">  //跳转到中转页</span><br><span class="line">  window.location=&quot;slide.html&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   // &#x27;不是微信</span><br><span class="line">   if(isMobile)&#123;</span><br><span class="line">        if(isIphone)&#123;</span><br><span class="line">                location.href = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">        &#125;else if(isAndroid)&#123;</span><br><span class="line">                 location.href = &#x27;http://dl.fa.weiduanxian.com/downloads/guijsh-wd.apk&#x27;;</span><br><span class="line">        &#125; </span><br><span class="line">   &#125;else&#123;</span><br><span class="line">        console.log(&quot;computer&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   // window.location = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">   // window.location=&quot;http://weiduanxian.com/downloads/guijsh-wd.apk&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="截取url参数"><a href="#截取url参数" class="headerlink" title="截取url参数"></a>截取url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r != null) return unescape(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="截取url参数-1"><a href="#截取url参数-1" class="headerlink" title="截取url参数"></a>截取url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r != null) return decodeURIComponent(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var platform=GetQueryString(&#x27;platform&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="修改页面Title"><a href="#修改页面Title" class="headerlink" title="修改页面Title"></a>修改页面Title</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.title = &quot;第&quot; + data.data.imgData.issue + &quot;期图库&quot; ;</span><br></pre></td></tr></table></figure>

<h4 id="设置定时器"><a href="#设置定时器" class="headerlink" title="设置定时器"></a>设置定时器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(&quot;show()&quot;,1900);//1000为1秒钟,设置为1分钟。</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;location.reload();&#125;,1000);</span><br></pre></td></tr></table></figure>

<h4 id="动态生成的节点，触发点击事件"><a href="#动态生成的节点，触发点击事件" class="headerlink" title="动态生成的节点，触发点击事件"></a>动态生成的节点，触发点击事件</h4><h5 id="移动端触屏点击要用：touchend"><a href="#移动端触屏点击要用：touchend" class="headerlink" title="移动端触屏点击要用：touchend"></a>移动端触屏点击要用：touchend</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).on(&#x27;touchend&#x27;,&#x27;#rechargeList li&#x27;,function()&#123;</span><br><span class="line">  $(this).addClass(&quot;cur&quot;).siblings().removeClass(&quot;cur&quot;);</span><br><span class="line">  rechargeValue = $(this).data(&quot;money&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="设置电脑定时关机"><a href="#设置电脑定时关机" class="headerlink" title="设置电脑定时关机"></a>设置电脑定时关机</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -s -t 7200   // （两个小时后自动关机）</span><br></pre></td></tr></table></figure>

<p><strong>Math.PI</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.141592653589793</span><br></pre></td></tr></table></figure>

<h4 id="微信返回按钮监听函数"><a href="#微信返回按钮监听函数" class="headerlink" title="微信返回按钮监听函数"></a>微信返回按钮监听函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function pushHistory() &#123; </span><br><span class="line">  var state = &#123; </span><br><span class="line">      title: &quot;title&quot;, </span><br><span class="line">      url: &quot;#&quot;</span><br><span class="line">  &#125;; </span><br><span class="line">  window.history.pushState(state, &quot;title&quot;, &quot;#&quot;); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="微信处理返回按钮"><a href="#微信处理返回按钮" class="headerlink" title="微信处理返回按钮"></a>微信处理返回按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pushHistory(); </span><br><span class="line">window.addEventListener(&quot;popstate&quot;, function(e) &#123; </span><br><span class="line">    （这里写按了返回按钮之后，执行的事件）</span><br><span class="line">例如：</span><br><span class="line">     $(&quot;#couponNoUse&quot;).show();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure>

<h4 id="捕捉页面错误信息"><a href="#捕捉页面错误信息" class="headerlink" title="捕捉页面错误信息"></a>捕捉页面错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onclick=&quot;adlert(&#x27;函数函数&#x27;)&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">  var errorTxt = &quot;&quot;;</span><br><span class="line">  window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h4 id="监听手机输入框值变化的事件"><a href="#监听手机输入框值变化的事件" class="headerlink" title="监听手机输入框值变化的事件"></a>监听手机输入框值变化的事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#username&#x27;).bind(&#x27;input propertychange&#x27;, function() &#123;  </span><br><span class="line">   $(&#x27;#result&#x27;).html($(this).val().length + &#x27; characters&#x27;);  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<h4 id="判断对象是否为空对象"><a href="#判断对象是否为空对象" class="headerlink" title="判断对象是否为空对象"></a>判断对象是否为空对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isEmptyObject(obj) &#123;</span><br><span class="line">    if (obj.length != null &amp;&amp; obj.length == 0) return false;</span><br><span class="line">    if (Object.prototype.toString.apply(obj) !== &#x27;[object Object]&#x27;) return false;</span><br><span class="line">    for (var p in obj) if (obj.hasOwnProperty(p)) return false;</span><br><span class="line">    return true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="console-log-在IE浏览器的兼容模式下不可用"><a href="#console-log-在IE浏览器的兼容模式下不可用" class="headerlink" title="console.log()在IE浏览器的兼容模式下不可用"></a>console.log()在IE浏览器的兼容模式下不可用</h4><p><a href="https://blog.csdn.net/escapeplan/article/details/55210495">关于console.log()在IE浏览器的兼容模式下不可用的问题</a></p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    if(!window.console)&#123;</span><br><span class="line">        window.console = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!window.console.log)&#123;</span><br><span class="line">        window.console.log = function(msg)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSON字符串与JSON对象之间的转换"><a href="#JSON字符串与JSON对象之间的转换" class="headerlink" title="JSON字符串与JSON对象之间的转换"></a>JSON字符串与JSON对象之间的转换</h4><p><a href="https://blog.csdn.net/chenxiaodan_danny/article/details/40656559">JS 处理JSON数据及javascript处理对象、JSON对象、hash对象、数组对象的方法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str1 = &#x27;&#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;&#x27;;//JSON字符串</span><br><span class="line">var str2 = &#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;//JSON对象</span><br><span class="line">var str3 = eval(&#x27;(&#x27; + str1 + &#x27;)&#x27;);//JSON字符串转换为JSON对象</span><br><span class="line">console.log(JSON.parse(str1));//JSON字符串转换为JSON对象</span><br><span class="line">console.log(JSON.stringify(str2));//JSON对象转换为JSON字符串</span><br></pre></td></tr></table></figure>

<h4 id="获取对象的长度"><a href="#获取对象的长度" class="headerlink" title="获取对象的长度"></a>获取对象的长度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function countProperties (obj) &#123;</span><br><span class="line">    var count = 0;</span><br><span class="line">    for (var property in obj) &#123;</span><br><span class="line">        if (Object.prototype.hasOwnProperty.call(obj, property)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for-in"><a href="#for-in" class="headerlink" title="for  in"></a>for  in</h4><p><a href="http://caibaojian.com/js-loop-for-in.html">javascript中的for in循环和for循环的使用</a></p>
<h4 id="将字符串反向排序"><a href="#将字符串反向排序" class="headerlink" title="将字符串反向排序"></a>将字符串反向排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var message = &quot;yangyanyi&quot;;</span><br><span class="line">message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);    //iynaygnay</span><br></pre></td></tr></table></figure>

<h4 id="JavaScript获取页面宽度高度大全"><a href="#JavaScript获取页面宽度高度大全" class="headerlink" title="JavaScript获取页面宽度高度大全"></a><a href="https://www.cnblogs.com/wcg249165510/archive/2009/02/20/1394749.html">JavaScript获取页面宽度高度大全</a></h4><p>网页可见区域宽：document.body.clientWidth</p>
<p>网页可见区域高：document.body.clientHeight</p>
<p>网页可见区域宽：document.body.offsetWidth(包括边线的宽)</p>
<p>网页可见区域高：document.body.offsetHeight(包括边线的宽)</p>
<p>网页正文全文宽：document.body.scrollWidth</p>
<p>网页正文全文高：document.body.scrollHeight</p>
<p>网页被卷去的高：document.body.scrollTop(IE7无效)</p>
<p>网页被卷去的左：document.body.scrollLeft(IE7无效)</p>
<p>网页被卷去的高：document.documentElement.scrollTop(IE7有效)</p>
<p>网页被卷去的左：document.documentElement.scrollLeft(IE7有效)</p>
<p>网页正文部分上：window.screenTop</p>
<p>网页正文部分左：window.screenLeft</p>
<p>屏幕分辨率的高：window.screen.height</p>
<p>屏幕分辨率的宽：window.screen.width</p>
<p>屏幕可用工作区高度：window.screen.availHeight</p>
<p>屏幕可用工作区宽度：window.screen.availWidth</p>
<p>相对于窗口左上角的X：window.event.clientX</p>
<p>相对于窗口左上角的Y：window.event.clientY</p>
<p>相对于整个页面的X：window.event.X</p>
<p>相对于整个页面的Y：window.event.Y</p>
<h4 id="iOS移动端-H5-alert-confirm提示信息去除网址-URL"><a href="#iOS移动端-H5-alert-confirm提示信息去除网址-URL" class="headerlink" title="iOS移动端(H5)alert/confirm提示信息去除网址(URL)"></a>iOS移动端(H5)alert/confirm提示信息去除网址(URL)</h4><p><a href="https://www.jb51.net/article/97633.htm">iOS移动端(H5)alert/confirm提示信息去除网址(URL)</a></p>
<p>重写alert方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.alert = function(name)&#123;</span><br><span class="line">  var iframe = document.createElement(&quot;IFRAME&quot;);</span><br><span class="line">  iframe.style.display=&quot;none&quot;;</span><br><span class="line">  iframe.setAttribute(&quot;src&quot;, &#x27;data:text/plain,&#x27;);</span><br><span class="line">  document.documentElement.appendChild(iframe);</span><br><span class="line">  window.frames[0].window.alert(name);</span><br><span class="line">  iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="js获取网页屏幕可见区域高度"><a href="#js获取网页屏幕可见区域高度" class="headerlink" title="js获取网页屏幕可见区域高度"></a><a href="http://qiaolevip.iteye.com/blog/2076034">js获取网页屏幕可见区域高度</a></h4><p>获取页面高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var windowHeight =  document.documentElement.clientHeight;</span><br><span class="line">console.log(windowHeight);</span><br><span class="line">$(&#x27;.content&#x27;).css(&#x27;height&#x27;, (windowHeight- 80)+&#x27;px&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取当前页面可视高度(注意，此处行到的是当前页面的可视高度，而不是浏览器的可视高度</span><br><span class="line">function getClientHeight()&#123;</span><br><span class="line">    var clientEeight = 0 ;</span><br><span class="line">    if(document.body.clientHeight &amp;&amp; document.documentElement.clientHeight)&#123;</span><br><span class="line">        clientHeight = Math.min(document.body.clientHeight, document.documentElement.clientHeight);</span><br><span class="line">    &#125;else&#123; </span><br><span class="line">        clientHeight = Math.max(document.body.clientHeight, document.documentElement.clientHeight) ;</span><br><span class="line">    return clientHeight ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上这个就可以直接使用document.body.clientHeight</span><br><span class="line"></span><br><span class="line">html, body&#123;</span><br><span class="line">	height:100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><ol>
<li>localStorage是一个普通对象，任何对象的操作都适用。</li>
<li>localStorage对象的属性值只能是字符串。</li>
</ol>
<p>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.getItem(key):获取指定key本地存储的值</span><br><span class="line">localStorage.setItem(key,value)：将value存储到key字段</span><br><span class="line">localStorage.removeItem(key):删除指定key本地存储的值</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加键值对：localStorage.setItem(key,value)</span><br><span class="line">获取键值：localStorage.getItem(key)</span><br><span class="line">删除键值对：localStorage.removeItem(key)。</span><br><span class="line">清除所有键值对：localStorage.clear()。</span><br><span class="line">获取localStorage的属性名称（键名称）：localStorage.key(index)。</span><br><span class="line">还有一个和普通对象不一样的属性length:</span><br><span class="line">获取localStorage中保存的键值对的数量：localStorage.length。</span><br></pre></td></tr></table></figure>

<h4 id="删除对象属性"><a href="#删除对象属性" class="headerlink" title="删除对象属性"></a>删除对象属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete localObj.username;//删除属性</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/goweb/p/5357640.html">关于给javascript对象添加、删除、修改对象的属性</a></p>
<h4 id="IE浏览器-点击事件不生效"><a href="#IE浏览器-点击事件不生效" class="headerlink" title="IE浏览器  点击事件不生效"></a>IE浏览器  点击事件不生效</h4><p>当按F12有点击有反应的时候，查一下代码中有没有console.log()的代码，因为ie没有这个方法。</p>
<h4 id="点击动态生成的元素"><a href="#点击动态生成的元素" class="headerlink" title="点击动态生成的元素"></a>点击动态生成的元素</h4><h5 id="使用on-要阻止冒泡事件"><a href="#使用on-要阻止冒泡事件" class="headerlink" title="使用on.()   要阻止冒泡事件"></a>使用on.()   要阻止冒泡事件</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E7%82%B9%E5%87%BB%E5%90%8E%E6%9C%9F%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0.png" alt="动态生成元素"></p>
<h4 id="浏览器的重绘与重排"><a href="#浏览器的重绘与重排" class="headerlink" title="浏览器的重绘与重排"></a><a href="https://www.cnblogs.com/gyjWEB/p/4547140.html">浏览器的重绘与重排</a></h4><p>将需要多次重排的元素，position属性设为absolute或fixed</p>
<h4 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HTTP请求</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param type</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_request(url, data, type, async, dataType) &#123;</span><br><span class="line">    // 默认能数</span><br><span class="line">    async = (async ? async : false);</span><br><span class="line">    data = (data ? data : &#x27;&#x27;);</span><br><span class="line">    type = (type ? type : &#x27;POST&#x27;);</span><br><span class="line">    dataType = (dataType ? dataType : &#x27;JSON&#x27;);</span><br><span class="line"></span><br><span class="line">    var result;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        &#x27;url&#x27; : url,</span><br><span class="line">        &#x27;type&#x27; : type,</span><br><span class="line">        &#x27;data&#x27; : data,</span><br><span class="line">        &#x27;async&#x27; : async,</span><br><span class="line">        &#x27;dataType&#x27; : dataType,</span><br><span class="line">        &#x27;success&#x27; : function(res) &#123;</span><br><span class="line">            result = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HTTP_GET</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_get(url, data, async) &#123;</span><br><span class="line">    return http_request(url, data, &#x27;GET&#x27;, async, &#x27;JSON&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HTTP_POST</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_post(url, data, async) &#123;</span><br><span class="line">    return http_request(url, data, &#x27;POST&#x27;, async, &#x27;JSON&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取字符串的首字母"><a href="#获取字符串的首字母" class="headerlink" title="获取字符串的首字母"></a>获取字符串的首字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.charAt(0)</span><br><span class="line">str.substr(0, 1)</span><br></pre></td></tr></table></figure>

<h4 id="获取字符串的末字母"><a href="#获取字符串的末字母" class="headerlink" title="获取字符串的末字母"></a>获取字符串的末字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.charAt(str.length - 1)</span><br></pre></td></tr></table></figure>

<h4 id="获取汉字首字母"><a href="#获取汉字首字母" class="headerlink" title="获取汉字首字母"></a>获取汉字首字母</h4><p><a href="https://blog.csdn.net/testcs_dn/article/details/25116655">JS获取中文拼音首字母，并通过拼音首字母快速查找页面内的中文内容</a></p>
<h4 id="F12审核元素，搜索全部文件有没有某字符"><a href="#F12审核元素，搜索全部文件有没有某字符" class="headerlink" title="F12审核元素，搜索全部文件有没有某字符"></a>F12审核元素，搜索全部文件有没有某字符</h4><p> 快捷键 ：<code>ctrl +shift +F</code></p>
<h4 id="用QQ登录"><a href="#用QQ登录" class="headerlink" title="用QQ登录"></a>用<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta property=&quot;qc:admins&quot; content=&quot;2432050734660161756375&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个是让网站加入<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录接口，这段代码可放在之间。</p>
<p>申请腾讯接口后，会得到这样的代码，加入接口之后，你的网站上面的注册登录功能，别人可以直接用<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录，省去注册的麻烦。</p>
</blockquote>
<h4 id="去除字符串两端的空白字符"><a href="#去除字符串两端的空白字符" class="headerlink" title="去除字符串两端的空白字符"></a>去除字符串两端的空白字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.trim( str )</span><br></pre></td></tr></table></figure>

<h4 id="previousSibling、previousElementSibling的区别"><a href="#previousSibling、previousElementSibling的区别" class="headerlink" title="previousSibling、previousElementSibling的区别"></a><a href="https://blog.csdn.net/sunlizhen/article/details/73437102">previousSibling、previousElementSibling的区别</a></h4><p>previousSibling：获取元素的上一个兄弟节点；（既包含元素节点、文本节点、注释节点）；</p>
<p>previousElementSibling：获取上一个兄弟元素节点；（只包含元素节点）；</p>
<h4 id="解决ios软键盘弹起遮盖住底部输入框的问题"><a href="#解决ios软键盘弹起遮盖住底部输入框的问题" class="headerlink" title="解决ios软键盘弹起遮盖住底部输入框的问题"></a>解决ios软键盘弹起遮盖住底部输入框的问题</h4><p>解决ios软键盘弹起遮盖住底部输入框的问题（终极解决方案！！！绝对好用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layout_flex&quot;&gt;</span><br><span class="line">    &lt;!-- 头部 --&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;</span><br><span class="line">    &lt;!-- 中间内容区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot; id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dataList&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 底部输入框部 --&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;foter&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;/&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;fcont&quot;&gt;使用定时器是为了让输入框上滑时更加自然&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">css样式</span><br><span class="line"></span><br><span class="line">/*flex布局*/</span><br><span class="line">html, body&#123;height:100%;&#125;</span><br><span class="line">.layout_flex&#123;display:-webkit-box;-webkit-box-orient:vertical;height:100%;&#125;</span><br><span class="line">.layout_flex .content&#123;-webkit-box-flex:1;overflow:auto;-webkit-overflow-scrolling:touch;position:relative;height:100%;&#125;</span><br><span class="line"></span><br><span class="line">/*头部*/</span><br><span class="line">.header&#123;height: 5rem;background-color: red;font-size: 2rem;line-height: 5rem;color: #fff;&#125;</span><br><span class="line"></span><br><span class="line">/*底部评论框*/</span><br><span class="line">.footer&#123;background-color: green;font-size: 2rem;color: #fff;padding: 0 1rem;&#125;</span><br><span class="line">.foter&#123;padding: 1rem 0;&#125;</span><br><span class="line">.foter input&#123;width: 100%;height: 3rem;line-height: 3rem;text-indent: 1rem;&#125;</span><br><span class="line">.content&#123;background-color: yellow;&#125;</span><br><span class="line">.fcont&#123;height: 2rem;line-height: 2rem;color: #fff;font-size: 1rem;&#125;</span><br><span class="line"></span><br><span class="line">js代码(可以不使用js)</span><br><span class="line"></span><br><span class="line">var bfscrolltop = document.body.scrollTop;</span><br><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    interval = setInterval(function()&#123;</span><br><span class="line">    document.body.scrollTop = document.body.scrollHeight;</span><br><span class="line">    &#125;,100)</span><br><span class="line">&#125;).blur(function()&#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">    document.body.scrollTop = bfscrolltop;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态改变和获取input的checked属性值"><a href="#动态改变和获取input的checked属性值" class="headerlink" title="动态改变和获取input的checked属性值"></a>动态改变和获取input的checked属性值</h4><p>pop()方法</p>
<h4 id="搜索匹配，keyup事件"><a href="#搜索匹配，keyup事件" class="headerlink" title="搜索匹配，keyup事件"></a>搜索匹配，keyup事件</h4><h5 id="中文输入时，要等输入法按确定之后才匹配"><a href="#中文输入时，要等输入法按确定之后才匹配" class="headerlink" title="中文输入时，要等输入法按确定之后才匹配"></a>中文输入时，要等输入法按确定之后才匹配</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/compositionstart"><strong>compositionstart</strong> </a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/compositionend"><strong>compositionend</strong></a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/keyup.png" alt="keyup"></p>
<h4 id="获取url的参数"><a href="#获取url的参数" class="headerlink" title="获取url的参数"></a>获取url的参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function parseParams(url)&#123;</span><br><span class="line">    if( url == undefined)&#123;</span><br><span class="line">        url = window.location.href;</span><br><span class="line">    &#125;   </span><br><span class="line">    var indexOfQ = url.indexOf(&#x27;?&#x27;);</span><br><span class="line">    if( indexOfQ == -1)&#123;</span><br><span class="line">        return &#123;&#125;; </span><br><span class="line">    &#125;   </span><br><span class="line">    var search = url.slice(indexOfQ + 1); </span><br><span class="line">    var hashes = search.split(&#x27;&amp;&#x27;);</span><br><span class="line">    var params = &#123;&#125;;</span><br><span class="line">    for(var i = 0; i &lt; hashes.length; i++)&#123;</span><br><span class="line">        var hash = hashes[i].split(&#x27;=&#x27;, 2); </span><br><span class="line">        if ( hash.length == 1)&#123; </span><br><span class="line">            params[hash[0]] = &#x27;&#x27;; </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            params[hash[0]] = decodeURIComponent(hash[1]).replace(/\+/g, &quot; &quot;);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    return params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getParam(key)&#123;</span><br><span class="line">    var params = parseParams();</span><br><span class="line">    return params[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="设备判断"><a href="#设备判断" class="headerlink" title="设备判断"></a>设备判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent.toLowerCase(); </span><br><span class="line">// 设备判断</span><br><span class="line">var browser = &#123;</span><br><span class="line">   versions: function () &#123;</span><br><span class="line">       var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">       return &#123;//移动终端浏览器版本信息</span><br><span class="line">           trident: u.indexOf(&#x27;Trident&#x27;) &gt; -1, //IE内核</span><br><span class="line">           presto: u.indexOf(&#x27;Presto&#x27;) &gt; -1, //opera内核</span><br><span class="line">           webKit: u.indexOf(&#x27;AppleWebKit&#x27;) &gt; -1, //苹果、谷歌内核</span><br><span class="line">           gecko: u.indexOf(&#x27;Gecko&#x27;) &gt; -1 &amp;&amp; u.indexOf(&#x27;KHTML&#x27;) == -1, //火狐内核</span><br><span class="line">           mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class="line">           ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class="line">           android: u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Linux&#x27;) &gt; -1, //android终端或uc浏览器</span><br><span class="line">           iPhone: u.indexOf(&#x27;iPhone&#x27;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class="line">           iPad: u.indexOf(&#x27;iPad&#x27;) &gt; -1, //是否iPad</span><br><span class="line">           webApp: u.indexOf(&#x27;Safari&#x27;) == -1 //是否web应该程序，没有头部与底部</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;(),</span><br><span class="line">   language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="显示弹窗时，禁止页面滚动"><a href="#显示弹窗时，禁止页面滚动" class="headerlink" title="显示弹窗时，禁止页面滚动"></a>显示弹窗时，禁止页面滚动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 遮罩层</span><br><span class="line">var tipIos = document.getElementById(&quot;tipIos&quot;);		//ios提示语</span><br><span class="line">var tipAndroid = document.getElementById(&quot;tipAndroid&quot;);		//安卓提示语</span><br><span class="line">var mask = document.getElementById(&quot;mask&quot;);		//透明度遮罩层</span><br><span class="line">var mo=function(e)&#123;e.preventDefault();&#125;;		//默认事件</span><br><span class="line"></span><br><span class="line">// 显示遮罩层和提示语</span><br><span class="line">function showMask()&#123;</span><br><span class="line">    mask.style.display=&quot;block&quot;;		//透明度遮罩层</span><br><span class="line">    document.body.style.overflow=&#x27;hidden&#x27;;		//溢出隐藏        </span><br><span class="line">    document.addEventListener(&quot;touchmove&quot;,mo,false);		//禁止页面滑动</span><br><span class="line">    //根据不同平台显示不同提示语</span><br><span class="line">    if(navigator.userAgent.match(/(iPhone|iPod|iPad);?/i))&#123;</span><br><span class="line">        tipIos.style.display=&quot;block&quot;;</span><br><span class="line">        </span><br><span class="line">    &#125;else if(navigator.userAgent.match(/android/i))&#123;</span><br><span class="line">        tipAndroid.style.display=&quot;block&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 隐藏遮罩层和提示语</span><br><span class="line">function hide()&#123;</span><br><span class="line">  tipIos.style.display=&quot;none&quot;;</span><br><span class="line">  tipAndroid.style.display=&quot;none&quot;;</span><br><span class="line">  mask.style.display=&quot;none&quot;;</span><br><span class="line">  document.body.style.overflow=&#x27;&#x27;;		//出现滚动条</span><br><span class="line">  document.removeEventListener(&quot;touchmove&quot;,mo,false);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 提示信息</span><br><span class="line">function errorShow()&#123;</span><br><span class="line">   document.getElementById(&quot;error&quot;).style.display=&quot;block&quot;;</span><br><span class="line">   window.setTimeout(function() &#123;</span><br><span class="line">        document.getElementById(&quot;error&quot;).style.display=&quot;none&quot;;</span><br><span class="line">   &#125;,2500)</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开App-安装App"><a href="#打开App-安装App" class="headerlink" title="打开App/安装App"></a>打开App/安装App</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   // 打开APP/安装APP</span><br><span class="line">function openApp()&#123;</span><br><span class="line">    if (ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;) &#123;	//微信</span><br><span class="line">        showMask();	 //显示提示语</span><br><span class="line">    &#125;else if(ua.match(/WeiBo/i) == &quot;weibo&quot;)&#123;//微博</span><br><span class="line">        showMask();	 //显示提示语</span><br><span class="line">    &#125;else if(browser.versions.ios)&#123;//ios浏览器</span><br><span class="line">        window.location.href = &quot;quanminguijinshu://&quot;;//ios app协议</span><br><span class="line">        window.setTimeout(function() &#123;</span><br><span class="line">            window.location.href = &quot;https://itunes.apple.com/cn/app/***?mt=8&quot;;//ios下载链</span><br><span class="line">        &#125;,2000)</span><br><span class="line">        document.getElementById(&quot;error&quot;).innerHTML=&quot;正在尝试打开APP&quot;;</span><br><span class="line">        errorShow();    //提示信息</span><br><span class="line">    &#125;else if(browser.versions.android)&#123;//安卓浏览器</span><br><span class="line">       // window.location.href = &quot;myapp://xxx/openwith?data=mydata&quot;;//android app协议</span><br><span class="line">        window.location.href = &quot;myapp1://xxx/openwith1?data=mydata&quot;;//android app协议</span><br><span class="line">        document.getElementById(&quot;error&quot;).innerHTML=&quot;正在尝试打开APP&quot;;</span><br><span class="line">        errorShow();    //提示信息</span><br><span class="line">        window.setTimeout(function() &#123;</span><br><span class="line">            document.getElementById(&quot;error&quot;).innerHTML=&quot;您还没下载我们的APP&quot;;</span><br><span class="line">            errorShow();</span><br><span class="line">        &#125;, 3500)</span><br><span class="line">        window.setTimeout(function() &#123;</span><br><span class="line">           window.location.href = &quot;http://***/downloads/qmgjsh_wd.apk&quot;;	//android下载地址</span><br><span class="line">       &#125;,4000)    </span><br><span class="line">    &#125;else&#123;	//PC端</span><br><span class="line">        document.getElementById(&quot;btn1&quot;).href=&quot;http://***&quot;;	//跳转官网</span><br><span class="line">       	document.getElementById(&quot;btn3&quot;).href=&quot;http://***&quot;;	//跳官网页面</span><br><span class="line">		document.getElementById(&quot;footer&quot;).href=&quot;http://***&quot;;	//跳官网页面</span><br><span class="line">        document.getElementById(&quot;btn-logo&quot;).href=&quot;http://***&quot;;	//跳官网页面</span><br><span class="line">     // document.getElementById(&quot;btn3&quot;).href=&quot;eia1013.html?platform=else&quot;;	//跳初请页面</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取参数platform的值</span><br><span class="line">function getPlatform()&#123;</span><br><span class="line">    var params = parseParams();</span><br><span class="line">    var platform = params.platform;</span><br><span class="line">    return platform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//platform的值</span><br><span class="line">var platform = getPlatform();</span><br><span class="line">// 活动页面分享之后</span><br><span class="line">if(platform ==&quot;else&quot;)&#123;</span><br><span class="line">   //  document.getElementById(&quot;btn3&quot;).href=&quot;adp1102.html?platform=else&quot;;//跳初请页面</span><br><span class="line">    //分享TOP小弹窗</span><br><span class="line">     document.getElementById(&quot;TopBer&quot;).style.display=&quot;block&quot;;   //document.getElementById(&quot;Oa&quot;).style.paddingBottom=&quot;1.4rem&quot;; </span><br><span class="line">    if(browser.versions.ios)&#123;</span><br><span class="line">        document.getElementById(&quot;btn1&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">        if(ua.match(/QQ/i) == &quot;qq&quot;)&#123;</span><br><span class="line">           document.getElementById(&quot;btn1&quot;).href=&quot;quanminguijinshu://&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;btn3&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">        if(ua.match(/QQ/i) == &quot;qq&quot;)&#123;</span><br><span class="line">           document.getElementById(&quot;btn3&quot;).href=&quot;quanminguijinshu://&quot;;</span><br><span class="line">        &#125; </span><br><span class="line">		document.getElementById(&quot;footer&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">        if(ua.match(/QQ/i) == &quot;qq&quot;)&#123;</span><br><span class="line">           document.getElementById(&quot;footer&quot;).href=&quot;quanminguijinshu://&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&quot;btn-logo&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">        if(ua.match(/QQ/i) == &quot;qq&quot;)&#123;</span><br><span class="line">           document.getElementById(&quot;btn-logo&quot;).href=&quot;quanminguijinshu://&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(browser.versions.android)&#123;</span><br><span class="line">       document.getElementById(&quot;btn&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">       document.getElementById(&quot;btn2&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">     //   document.getElementById(&quot;btn-logo&quot;).href=&quot;javascript:;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //点击按钮时触发打开APP/安装APP</span><br><span class="line">    document.getElementById(&quot;btn1&quot;).onclick = function()&#123;</span><br><span class="line">        openApp();</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;btn3&quot;).onclick = function()&#123;</span><br><span class="line">        openApp();</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;footer&quot;).onclick = function()&#123;</span><br><span class="line">        openApp();</span><br><span class="line">    &#125;;</span><br><span class="line">	document.getElementById(&quot;btn-logo&quot;).onclick = function()&#123;</span><br><span class="line">        openApp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;//在平台内</span><br><span class="line">   document.getElementById(&quot;btn1&quot;).href=&quot;open_index=cz&quot;;//跳交易页面</span><br><span class="line">    document.getElementById(&quot;btn3&quot;).href=&quot;open_index=3&quot;;//跳直播间页面</span><br><span class="line">	document.getElementById(&quot;footer&quot;).href=&quot;open_index=3&quot;;//跳直播间页面</span><br><span class="line"> //  document.getElementById(&quot;btn-logo&quot;).href=&quot;open_index=3&quot;;//跳直播间页面</span><br><span class="line"> //  document.getElementById(&quot;btn3&quot;).href=&quot;adp1102.html&quot;;//跳初请页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为微信-1"><a href="#判断是否为微信-1" class="headerlink" title="判断是否为微信"></a>判断是否为微信</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为微信</span><br><span class="line">function isWechat()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    return ua.indexOf(&#x27;micromessenger&#x27;) != -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为iPhone"><a href="#判断是否为iPhone" class="headerlink" title="判断是否为iPhone"></a>判断是否为iPhone</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为iPhone</span><br><span class="line">function isIphone()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line"></span><br><span class="line">    var params = parseParams();</span><br><span class="line">    var channel_id = params.channel_id;</span><br><span class="line">   </span><br><span class="line">    if(channel_id == &#x27;9ff9&#x27; || channel_id == &#x27;9ff8&#x27;)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return ua.indexOf(&#x27;iphone&#x27;) != -1 || ua.indexOf(&#x27;ipad&#x27;) != -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为PC端-1"><a href="#判断是否为PC端-1" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为PC端</span><br><span class="line">function isPC() &#123;</span><br><span class="line">    var userAgentInfo = navigator.userAgent;</span><br><span class="line">    var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">                &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">                &quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">    var flag = true;</span><br><span class="line">    for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="添加雪花动画"><a href="#添加雪花动画" class="headerlink" title="添加雪花动画"></a>添加雪花动画</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    body&#123;background-color: #999;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">//添加雪花动画</span><br><span class="line">//canvas init</span><br><span class="line">var canvas = document.getElementById(&quot;canvas&quot;);</span><br><span class="line">var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line"></span><br><span class="line">//canvas dimensions</span><br><span class="line">var W = window.innerWidth;</span><br><span class="line">var H = window.innerHeight;</span><br><span class="line">canvas.width = W;</span><br><span class="line">canvas.height = H;</span><br><span class="line"></span><br><span class="line">//snowflake particles</span><br><span class="line">var mp = 60; //max particles</span><br><span class="line">var particles = [];</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">particles.push(&#123;</span><br><span class="line">  x: Math.random()*W, //x-coordinate</span><br><span class="line">  y: Math.random()*H, //y-coordinate</span><br><span class="line">  r: Math.random()*4+1, //radius</span><br><span class="line">  d: Math.random()*mp //density</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Lets draw the flakes</span><br><span class="line">function draw()</span><br><span class="line">&#123;</span><br><span class="line">ctx.clearRect(0, 0, W, H);</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = &quot;rgba(255, 255, 255, 0.6)&quot;;</span><br><span class="line">ctx.strokeStyle = &#x27;rgba(255, 255, 255, 0.4)&#x27;;</span><br><span class="line">ctx.lineWidth = &#x27;0.01&#x27;;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">  var p = particles[i];</span><br><span class="line">  ctx.moveTo(p.x, p.y);</span><br><span class="line">  ctx.arc(p.x, p.y, p.r, 0, Math.PI*2, true);</span><br><span class="line">&#125;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Function to move the snowflakes</span><br><span class="line">//angle will be an ongoing incremental flag. Sin and Cos functions will be applied to it to create vertical and horizontal movements of the flakes</span><br><span class="line">var angle = 0;</span><br><span class="line">function update()</span><br><span class="line">&#123;</span><br><span class="line">angle += 0.01;</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">  var p = particles[i];</span><br><span class="line">  //Updating X and Y coordinates</span><br><span class="line">  //We will add 1 to the cos function to prevent negative values which will lead flakes to move upwards</span><br><span class="line">  //Every particle has its own density which can be used to make the downward movement different for each flake</span><br><span class="line">  //Lets make it more random by adding in the radius</span><br><span class="line">  p.y += Math.cos(angle+p.d) + 1 + p.r/6;</span><br><span class="line">  p.x += Math.sin(angle) * 2; </span><br><span class="line"></span><br><span class="line">  //Sending flakes back from the top when it exits</span><br><span class="line">  //Lets make it a bit more organic and let flakes enter from the left and right also.</span><br><span class="line">  if(p.x &gt; W+5 || p.x &lt; -5 || p.y &gt; H)</span><br><span class="line">  &#123;</span><br><span class="line">    if(i%3 &gt; 0) //66.67% of the flakes</span><br><span class="line">    &#123;</span><br><span class="line">      particles[i] = &#123;x: Math.random()*W, y: -10, r: p.r, d: p.d&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      //If the flake is exitting from the right</span><br><span class="line">      if(Math.sin(angle) &gt; 0)</span><br><span class="line">      &#123;</span><br><span class="line">        //Enter from the left</span><br><span class="line">        particles[i] = &#123;x: -5, y: Math.random()*H, r: p.r, d: p.d&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        //Enter from the right</span><br><span class="line">        particles[i] = &#123;x: W+5, y: Math.random()*H, r: p.r, d: p.d&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//animation loop</span><br><span class="line">setInterval(draw, 33);</span><br></pre></td></tr></table></figure>

<h4 id="判断一个数组的某个对象是否具体某个属性，如果没有就追加对象"><a href="#判断一个数组的某个对象是否具体某个属性，如果没有就追加对象" class="headerlink" title="判断一个数组的某个对象是否具体某个属性，如果没有就追加对象"></a>判断一个数组的某个对象是否具体某个属性，如果没有就追加对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// records是对象数组</span><br><span class="line">if (!records.some(obj =&gt; obj.username === value.username)) &#123;</span><br><span class="line">    records.push(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript生成随机密码</title>
    <url>/2020/05/21/JavaScript%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h3 id="生成一个长度为N位的随机密码"><a href="#生成一个长度为N位的随机密码" class="headerlink" title="生成一个长度为N位的随机密码"></a>生成一个长度为N位的随机密码</h3><p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function generateRandomPassword(length) &#123;</span><br><span class="line">  const charset = &#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">  let password = &#x27;&#x27;;</span><br><span class="line">  </span><br><span class="line">  for (let i = 0; i &lt; length; i++) &#123;</span><br><span class="line">    const randomIndex = Math.floor(Math.random() * charset.length);</span><br><span class="line">    password += charset[randomIndex];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const randomPassword = generateRandomPassword(10); // 生成一个10位的随机密码</span><br><span class="line">console.log(randomPassword); // 打印随机生成的密码</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function generateRandomPassword(length) &#123;</span><br><span class="line">  const chars = &#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">  let password = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  for (let i = 0; i &lt; length; i++) &#123;</span><br><span class="line">    const charType = Math.floor(Math.random() * 3); // 0: 数字, 1: 大写字母, 2: 小写字母</span><br><span class="line">    let randomChar = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    if (charType === 0) &#123;</span><br><span class="line">      randomChar = String.fromCharCode(Math.floor(Math.random() * 10) + 48); // 48-57 是数字的 Unicode 范围</span><br><span class="line">    &#125; else if (charType === 1) &#123;</span><br><span class="line">      randomChar = String.fromCharCode(Math.floor(Math.random() * 26) + 65); // 65-90 是大写字母的 Unicode 范围</span><br><span class="line">    &#125; else if (charType === 2) &#123;</span><br><span class="line">      randomChar = String.fromCharCode(Math.floor(Math.random() * 26) + 97); // 97-122 是小写字母的 Unicode 范围</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    password += randomChar;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const randomPassword = generateRandomPassword(10); // 生成一个10位的随机密码</span><br><span class="line">console.log(randomPassword); // 打印随机生成的密码</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getRandom(min, max) &#123;</span><br><span class="line">    return Math.round(Math.random() * (max - min) + min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCode(length) &#123;</span><br><span class="line">    let code = &#x27;&#x27;;</span><br><span class="line">    for (var i = 0; i &lt; length; i++) &#123;</span><br><span class="line">        var type = getRandom(1, 3);</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                code += String.fromCharCode(getRandom(48, 57));//数字</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                code += String.fromCharCode(getRandom(97, 122));//小写字母</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                code += String.fromCharCode(getRandom(65, 90));//大写字母</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var randomPassword = getCode(15);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据自己喜欢的风格，选其一就好</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2021/06/10/Markdown/</url>
    <content><![CDATA[<h4 id="Markdown合并表格单元格"><a href="#Markdown合并表格单元格" class="headerlink" title="Markdown合并表格单元格"></a>Markdown合并表格单元格</h4><p>Markdown本身不支持单元格合并</p>
<blockquote>
<p>考虑到 Markdown 支持 html ，<br>所以，我们可以通过插入 html 中的 table 来实现。</p>
</blockquote>
<h4 id="Html-合并行"><a href="#Html-合并行" class="headerlink" title="Html 合并行"></a>Html 合并行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;这里是合并行&lt;/td&gt;    </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;这里也是合并行&lt;/td&gt;    </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Html-合并列"><a href="#Html-合并列" class="headerlink" title="Html 合并列"></a>Html 合并列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td rowspan=&quot;2&quot;&gt;这里是合并列&lt;/td&gt;    </span><br><span class="line">        &lt;td &gt;行二列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td &gt;行三列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Html-合并行和列"><a href="#Html-合并行和列" class="headerlink" title="Html 合并行和列"></a>Html 合并行和列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;我是合并行&lt;/td&gt;    </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;行二列一&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;行二列二&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td rowspan=&quot;2&quot;&gt;我是合并列&lt;/td&gt;    </span><br><span class="line">        &lt;td &gt;行三列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td &gt;行四列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h5 id="在markdown文档中使用GitHub仓库的图片地址"><a href="#在markdown文档中使用GitHub仓库的图片地址" class="headerlink" title="在markdown文档中使用GitHub仓库的图片地址"></a>在markdown文档中使用GitHub仓库的图片地址</h5><ol>
<li><p>在GitHub中创建一个<code>Public</code>仓库存放图片</p>
<p>注意：建立<code>Private</code>仓库，图片访问时，后面会加上一个token值，过一段时间就会失效。（这个很关键）</p>
</li>
<li><p>在仓库中选择“Add file”——Upload files，直接把图片上传到仓库；也可以将仓库下载到本地，然后push上去</p>
</li>
<li><p>在仓库中，选择需要的图片点进去，然后选择“Download”按钮，会新开一个窗口显示图片</p>
</li>
<li><p>复制新开窗口中，复制图片的访问路径(域名地址栏)</p>
</li>
<li><p>在markdown中插入图片标签，如： <code>![加载失败的文字提示](图片的链接)</code></p>
</li>
</ol>
<h4 id="如何用markdown文档做任务清单"><a href="#如何用markdown文档做任务清单" class="headerlink" title="如何用markdown文档做任务清单"></a><a href="https://jingyan.baidu.com/article/ab69b27090131d2ca7189f85.html">如何用markdown文档做任务清单</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] aaa</span><br><span class="line">- [ ] bbb</span><br><span class="line">-空格[空格]空格aaaa</span><br></pre></td></tr></table></figure>

<h3 id="markdown编辑软件"><a href="#markdown编辑软件" class="headerlink" title="markdown编辑软件"></a>markdown编辑软件</h3><ul>
<li>Typora（收费了）</li>
<li>在VSCode中，安装Typora扩展（Edit markdown like typora in vscode.），还不错。跟Typora真的挺像的。</li>
</ul>
<h3 id="markdown自动生成器"><a href="#markdown自动生成器" class="headerlink" title="markdown自动生成器"></a>markdown自动生成器</h3><h5 id="docsify"><a href="#docsify" class="headerlink" title="docsify"></a><a href="https://docsify.js.org/#/">docsify</a></h5><h4 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h4><h4 id="修改图片的相对路径"><a href="#修改图片的相对路径" class="headerlink" title="修改图片的相对路径"></a>修改图片的相对路径</h4><p>（可以不需要在Typora里面设置，直接写相对路径）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![备注文字](./images/note6.png)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/3.png" alt="修改图片的相对路径"></p>
]]></content>
      <categories>
        <category>文档网站生成工具</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript方法</title>
    <url>/2020/04/07/Javascript%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="关于-lt-input-type-“number”-gt-可以输入字母e"><a href="#关于-lt-input-type-“number”-gt-可以输入字母e" class="headerlink" title="关于&lt; input type=“number” /&gt;可以输入字母e"></a><a href="https://www.cnblogs.com/ysx215/p/14654648.html">关于&lt; input type=“number” /&gt;可以输入字母e</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onKeypress=&quot;return(/[\d\.]/.test(String.fromCharCode(event.keyCode)))&quot;</span><br></pre></td></tr></table></figure>

<p><strong>主要原因是：e在数学上代表的是无理数，是一个无限不循环的小数，其值约为2.7182818284，所以在输入e的时候，输入框会把e当成一个数字看待。</strong></p>
<p>可以采用下面的方式来避免这个BUG，在input标签中添加如下属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;number&quot; class=&quot;form-control&quot; onKeypress=&quot;return(/[\d\.]/.test(String.fromCharCode(event.keyCode)))&quot;  placeholder=&quot;number&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除对象某个属性"><a href="#删除对象某个属性" class="headerlink" title="删除对象某个属性"></a>删除对象某个属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    name: &#x27;zhagnsan&#x27;,</span><br><span class="line">    age: 19 </span><br><span class="line">&#125;</span><br><span class="line">delete obj.name //true</span><br></pre></td></tr></table></figure>

<h4 id="数组对象按照某个属性排序"><a href="#数组对象按照某个属性排序" class="headerlink" title="数组对象按照某个属性排序"></a>数组对象按照某个属性排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group.sort(function(a, b)&#123;return Number(a.year) - Number(b.year)&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="js获取当前时间-昨天、今天、明天"><a href="#js获取当前时间-昨天、今天、明天" class="headerlink" title="js获取当前时间(昨天、今天、明天)"></a><a href="https://www.cnblogs.com/menxiaojin/p/13753525.html">js获取当前时间(昨天、今天、明天)</a></h4><h4 id="获取时间戳-valueOf"><a href="#获取时间戳-valueOf" class="headerlink" title="获取时间戳-valueOf()"></a>获取时间戳-valueOf()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date().valueOf();</span><br></pre></td></tr></table></figure>

<h4 id="new-Date-方法"><a href="#new-Date-方法" class="headerlink" title="new Date()方法"></a>new Date()方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toDateString()</span><br><span class="line">Wed Mar 02 2020</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleDateString()</span><br><span class="line">2020/3/2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleTimeString()</span><br><span class="line">17:50:21</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleString();</span><br><span class="line">2020/3/2 17:46:52</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toTimeString()</span><br><span class="line">17:50:59 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toUTCString()</span><br><span class="line">Wed, 02 Mar 2020 09:51:30 GMT</span><br></pre></td></tr></table></figure>

<h4 id="获取明天的日期并格式化"><a href="#获取明天的日期并格式化" class="headerlink" title="获取明天的日期并格式化"></a>获取明天的日期并格式化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 格式化日期</span><br><span class="line">function format(t, symbol)&#123;</span><br><span class="line">    var year = t.getFullYear()       // 年份</span><br><span class="line">        , month = t.getMonth() + 1   // 月份</span><br><span class="line">        , date = t.getDate()         // 日</span><br><span class="line">        , symbol = symbol || &#x27;-&#x27;;    // 分隔符，默认为-</span><br><span class="line">    month = month &lt; 10 ? &#x27;0&#x27; + month : month;</span><br><span class="line">    date = date &lt; 10 ? &#x27;0&#x27; + date : date;</span><br><span class="line">    return year + symbol + month + symbol + date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var now = new Date()               // 获取当前时间</span><br><span class="line">    , time_stamp = now.setDate(now.getDate() +  1)</span><br><span class="line">    , tomorrow = format(new Date(time_stamp));  // 明天</span><br></pre></td></tr></table></figure>

<h4 id="获取前后相隔n天的日期"><a href="#获取前后相隔n天的日期" class="headerlink" title="获取前后相隔n天的日期"></a>获取前后相隔n天的日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据间隔天数获取日期</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function getDate(interval, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date()               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据某天的前后几天获取日期"><a href="#根据某天的前后几天获取日期" class="headerlink" title="根据某天的前后几天获取日期"></a>根据某天的前后几天获取日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据某天的前/后几天</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param value：某天的日期</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line">function getPreDate(interval, value, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date(value)               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="实现倒计时功能"><a href="#实现倒计时功能" class="headerlink" title="实现倒计时功能"></a>实现倒计时功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 倒计时功能</span><br><span class="line">var div = document.getElementById(&quot;showtime&quot;);</span><br><span class="line">setInterval (function () &#123;</span><br><span class="line">    div.innerHTML = showtime();</span><br><span class="line">&#125;, 1000); </span><br><span class="line"></span><br><span class="line">var showtime = function () &#123;</span><br><span class="line">    var nowTime = new Date(),  // 获取当前时间</span><br><span class="line">        // endTime = new Date(&quot;2022/8/20&quot;);  // 定义结束时间  </span><br><span class="line">        endTime = new Date(&quot;2022/8/20 23:59:59&quot;);  // 定义结束具体时间——即8月21凌晨结束</span><br><span class="line">    var time = endTime.getTime() - nowTime.getTime(),  // 距离结束时间的毫秒数</span><br><span class="line">        d = Math.floor(time/(1000*60*60*24)),  // 计算天数</span><br><span class="line">        h = Math.floor(time/(1000*60*60)%24),  // 计算小时数</span><br><span class="line">        m = Math.floor(time/(1000*60)%60),  // 计算分钟数</span><br><span class="line">        s = Math.floor(time/1000%60);  // 计算秒数</span><br><span class="line"></span><br><span class="line">    h = h &lt; 10 ? &quot;0&quot; + h : h;</span><br><span class="line">    m = m &lt; 10 ? &quot;0&quot; + m : m;</span><br><span class="line">    s = s &lt; 10 ? &quot;0&quot; + s : s;</span><br><span class="line">    return d + &quot;天&quot; + h + &quot;:&quot; + m + &quot;:&quot; + s;  //返回倒计时的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach()</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">arr.forEach(function (item) &#123;</span><br><span class="line">    if (item === 3) &#123;</span><br><span class="line">        return;		// ----&gt;3的元素跳过</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">// 输出结果：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>



<h4 id="js中数组常用方法总结"><a href="#js中数组常用方法总结" class="headerlink" title="js中数组常用方法总结"></a><a href="https://www.cnblogs.com/jinzhou/p/9072614.html">js中数组常用方法总结</a></h4><h4 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h4><p>1、当看到script标签的时候就会进入到js作用</p>
<p>2、调用一个function的时候</p>
<h4 id="二、进入到作用域之后，发生了什么事情"><a href="#二、进入到作用域之后，发生了什么事情" class="headerlink" title="二、进入到作用域之后，发生了什么事情??"></a>二、进入到作用域之后，发生了什么事情??</h4><p>1、js预解析</p>
<p>​        开辟一个空间，找有没有var，有没有方法参数，有没有function，如果有var，有方法参数，就把var和方法参数定义的变量设置成undefined，如果有function，那么就储存function里面的所有内容。</p>
<p>2、js逐行执行</p>
<p>​     从上往下执行，找有没有表达式，+  - * 、==   ++   – ，如果有表达式，就修改js作用域里面的变量的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">	console.log(a);</span><br><span class="line">	var a = 1;</span><br><span class="line">	console.log(a);</span><br><span class="line">    function a() &#123;</span><br><span class="line">        console.log(2); </span><br><span class="line">    &#125;</span><br><span class="line">	console.log(a);</span><br><span class="line">    var a = 3;</span><br><span class="line">    console.log(a);</span><br><span class="line">    function a() &#123; </span><br><span class="line">        console.log(4);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a);</span><br><span class="line">	a();</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="判断对象是否为空"><a href="#判断对象是否为空" class="headerlink" title="判断对象是否为空"></a>判断对象是否为空</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断对象是否为空</span><br><span class="line">var obj = JSON.stringify(data);</span><br><span class="line">if(obj === &#x27;&#123;&#125;&#x27;) &#123;</span><br><span class="line">    console.log(&quot;对象为空&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    console.log(&quot;对象不为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者直接判断是否具有某属性</span><br><span class="line"></span><br><span class="line">var title = data.id ? &quot;编辑&quot; : &quot;新增&quot;;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/jpfss/p/9105119.html">js判断对象是否为空对象的几种方法</a></p>
<p><a href="https://m.html.cn/qa/javascript/11178.html">javascript怎么判断对象是否为空？</a></p>
<h4 id="判断某变量的值是否等于某数组中的一个元素"><a href="#判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="判断某变量的值是否等于某数组中的一个元素"></a>判断某变量的值是否等于某数组中的一个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">var testStr=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">return testStr.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">var test=[&#x27;a&#x27;,23,-1];</span><br><span class="line">alert(IsInArray(test,&#x27;a&#x27;));//true</span><br><span class="line">alert(IsInArray(test,2));//false</span><br><span class="line">alert(IsInArray(test,-1));//true</span><br></pre></td></tr></table></figure>
<p>需求：</p>
<p>在后台的某些模块中，不显示表头的游戏下拉筛选框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当前页URL</span><br><span class="line">var page = window.location.hash.split(&quot;?&quot;)[0];</span><br><span class="line">// 当前模块值</span><br><span class="line">var this_module = page.split(&quot;/&quot;)[2];</span><br><span class="line">（判断连接中是否是这几个模块下的链接）</span><br><span class="line">// 需要去掉游戏选择下拉框的模块</span><br><span class="line">var moduleArr = [&quot;app&quot;,&quot;channel&quot;,&quot;agent&quot;,&quot;config&quot;,&quot;white_list&quot;,&quot;account&quot;];</span><br><span class="line"></span><br><span class="line">// 判断模块值是否等于数组中的其中一个</span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">    var str=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">    return str.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">//是否在模块组中</span><br><span class="line">var flag = IsInArray(moduleArr, this_module);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">    $(&quot;.product-select&quot;).hide();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $(&quot;.product-select&quot;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js-判断某变量的值是否等于某数组中的一个元素"><a href="#【参考】：-js-判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="【参考】： js:判断某变量的值是否等于某数组中的一个元素"></a>【参考】： <a href="http://www.imooc.com/wenda/detail/476679">js:判断某变量的值是否等于某数组中的一个元素</a></h6><h4 id="js高效修改对象数组里的对象属性名"><a href="#js高效修改对象数组里的对象属性名" class="headerlink" title="js高效修改对象数组里的对象属性名"></a>js高效修改对象数组里的对象属性名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appList: [</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试1&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试11&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试111&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试2&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试22&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试222&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（因为插件的要求）改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">productArr: [</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试1&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试11&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试111&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试2&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试22&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试222&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var productArr = JSON.parse(JSON.stringify(appList).replace(/list/g, &#x27;children&#x27;));</span><br><span class="line">productArr = JSON.parse(JSON.stringify(productArr).replace(/id/g, &#x27;value&#x27;));</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js高效修改对象数组里的对象属性名"><a href="#【参考】：-js高效修改对象数组里的对象属性名" class="headerlink" title="【参考】： js高效修改对象数组里的对象属性名"></a>【参考】： <a href="https://blog.csdn.net/Mr_JavaScript/article/details/85236957">js高效修改对象数组里的对象属性名</a></h6><h4 id="数组相减"><a href="#数组相减" class="headerlink" title="数组相减"></a>数组相减</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//数组相减函数</span><br><span class="line">function array_diff(a, b) &#123;</span><br><span class="line">    //拷贝数组</span><br><span class="line">    var arr = [].concat(a);</span><br><span class="line"></span><br><span class="line">    // 数组相减</span><br><span class="line">    for (var i = 0; i &lt; b.length; i++) &#123;</span><br><span class="line">        for (var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            if (arr[j][&quot;id&quot;] == b[i][&quot;id&quot;]) &#123;</span><br><span class="line">                arr.splice(j, 1);</span><br><span class="line">                j = j - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="js拷贝对象，不改变原来对象"><a href="#js拷贝对象，不改变原来对象" class="headerlink" title="js拷贝对象，不改变原来对象"></a>js拷贝对象，不改变原来对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a:1,b:2&#125;  </span><br><span class="line">var newObj = JSON.parse(JSON.stringify(obj)); </span><br></pre></td></tr></table></figure>

<h4 id="JS-模拟浏览器-F5-自动刷新页面效果"><a href="#JS-模拟浏览器-F5-自动刷新页面效果" class="headerlink" title="JS 模拟浏览器 F5 自动刷新页面效果"></a>JS 模拟浏览器 F5 自动刷新页面效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. window.location.replace(window.location.href);</span><br><span class="line"></span><br><span class="line">2. window.location.href = window.location.href;</span><br><span class="line"></span><br><span class="line">3. window.document.location.reload();</span><br><span class="line"> </span><br><span class="line">有iframe的使用这个：</span><br><span class="line">4. window.top.document.location.reload();</span><br><span class="line"> </span><br><span class="line">5.window.top.document.location = “url”</span><br><span class="line"></span><br><span class="line">6.window.document.location. = “url”</span><br></pre></td></tr></table></figure>

<h4 id="对象格式转换"><a href="#对象格式转换" class="headerlink" title="对象格式转换"></a>对象格式转换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;aaaaaa&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;0&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;bbbb&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;1&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">转为这样的格式：</span><br><span class="line">var idPidArr = &#123;</span><br><span class="line">    aaaaaa: &quot;0&quot;,</span><br><span class="line">    bbbb: &quot;1&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">var idPidArr = &#123;&#125;;</span><br><span class="line">for(var i = 0; i&lt; data.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">    idPidArr[data[i].id] = data[i].pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(idPidArr);</span><br></pre></td></tr></table></figure>

<h4 id="控制滚动条滚动到某个位置"><a href="#控制滚动条滚动到某个位置" class="headerlink" title="控制滚动条滚动到某个位置"></a>控制滚动条滚动到某个位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;scrollBox&#x27;).scrollTop = $(el).offset().top;</span><br><span class="line"></span><br><span class="line">scrollBox：滚动的盒子的id</span><br><span class="line">$(el).offset().top: 元素的位置</span><br></pre></td></tr></table></figure>

<h4 id="js字符串连接换行符没有效果解决办法"><a href="#js字符串连接换行符没有效果解决办法" class="headerlink" title="js字符串连接换行符没有效果解决办法"></a>js字符串连接换行符没有效果解决办法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;aaaaa&#x27;, b = &#x27;bbbbb&#x27;, c = &#x27;ccccc&#x27;;</span><br><span class="line">var arr = [a,b,c];</span><br><span class="line">var str = arr.join(&quot;\n&quot;);</span><br><span class="line">console.log(str);  </span><br></pre></td></tr></table></figure>

<h4 id="js-去掉字符串前后空格"><a href="#js-去掉字符串前后空格" class="headerlink" title="js 去掉字符串前后空格"></a>js 去掉字符串前后空格</h4><h6 id="js去掉字符串前后空格的五种方法"><a href="#js去掉字符串前后空格的五种方法" class="headerlink" title="js去掉字符串前后空格的五种方法"></a><a href="https://www.cnblogs.com/yingjie13/p/3534615.html">js去掉字符串前后空格的五种方法</a></h6><h6 id="js-去掉字符串前后空格-1"><a href="#js-去掉字符串前后空格-1" class="headerlink" title="js 去掉字符串前后空格"></a><a href="https://www.cnblogs.com/mingforyou/p/3930638.html">js 去掉字符串前后空格</a></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用jquery</span><br><span class="line"></span><br><span class="line">$.trim(str) </span><br><span class="line"></span><br><span class="line">jquery内部实现为：</span><br><span class="line"></span><br><span class="line">function trim(str)&#123;   </span><br><span class="line">    return str.replace(/^(\s|\u00A0)+/,&#x27;&#x27;).replace(/(\s|\u00A0)+$/,&#x27;&#x27;);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">　　 function trim(str)&#123; //删除左右两端的空格</span><br><span class="line">　　   return str.replace(/(^s*)|(s*$)/g, &quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function ltrim(str)&#123; //删除左边的空格</span><br><span class="line">　　   return str.replace(/(^s*)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function rtrim(str)&#123; //删除右边的空格</span><br><span class="line">　　   return str.replace(/(s*$)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JS 去字符串空格 总结</span><br><span class="line"></span><br><span class="line">str为要去除空格的字符串:</span><br><span class="line">去除所有空格: </span><br><span class="line">str = str.replace(/\s+/g,&quot;&quot;); </span><br><span class="line">去除两头空格: </span><br><span class="line">str = str.replace(/^\s+|\s+$/g,&quot;&quot;);</span><br><span class="line">去除左空格：</span><br><span class="line">str=str.replace( /^\s*/, &#x27;&#x27;);</span><br><span class="line">去除右空格：</span><br><span class="line">str=str.replace(/(\s*$)/g, &quot;&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="如果动态设置json对象的key"><a href="#如果动态设置json对象的key" class="headerlink" title="如果动态设置json对象的key"></a><a href="https://www.cnblogs.com/strangerqt/p/4465114.html">如果动态设置json对象的key</a></h4><p>项目中要求动态设置json的key属性，如果按照一般的json设置方法是不行的。假如你把一个key设置为一个变量的话，那么最后js解析出来的就是key为这个变量名而不是这个变量的值。</p>
<p>解决：通过使用</p>
<p>var o = {};</p>
<p>o[变量名] = 变量值</p>
<p>再把这个变量赋值给json即可</p>
<h4 id="用js实现模糊查询的几种方法"><a href="#用js实现模糊查询的几种方法" class="headerlink" title="用js实现模糊查询的几种方法"></a><a href="https://www.jianshu.com/p/4cd4f74a0b20">用js实现模糊查询的几种方法</a></h4><h5 id="1-indexof-方法"><a href="#1-indexof-方法" class="headerlink" title="1. indexof 方法"></a>1. indexof 方法</h5><blockquote>
<p>语法：stringObject.indexOf(searchvalue, fromindex)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定需检索的字符串值。 fromindex<br>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>
</blockquote>
<blockquote>
<p>说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用indexof方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].indexOf(keyWord) &gt;= 0) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-split-方法"><a href="#2-split-方法" class="headerlink" title="2. split 方法"></a>2. split 方法</h5><blockquote>
<p>语法：stringObject.split(separator, howmany)</p>
</blockquote>
<blockquote>
<p>参数：separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
</blockquote>
<blockquote>
<p>说明：该方法通过在 separator 指定的边界处将字符串 stringObject 分割成子串并返回子串数组。返回的数组中的字串不包括 separator 自身。如果 stringObject 中不存在 separator，将返回一个只包含stringObject的数组。故可以根据返回数组的长度来判断是否存在子字符串 separator 。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用spilt方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].split(keyWord).length &gt; 1) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-match-方法"><a href="#3-match-方法" class="headerlink" title="3. match 方法"></a>3. match 方法</h5><blockquote>
<p>语法：stringObject.match(searchvalue) 或 stringObject.match(regexp)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定要检索的字符串值。regexp 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>
</blockquote>
<blockquote>
<p>说明：该方法将在字符串 stringObject 内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本，将返回 null 。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用match方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].match(keyWord) != null) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-test方法（正则匹配）"><a href="#4-test方法（正则匹配）" class="headerlink" title="4. test方法（正则匹配）"></a>4. test方法（正则匹配）</h5><blockquote>
<p>语法：RegExpObject.test(string)</p>
</blockquote>
<blockquote>
<p>参数：string 必需。要检测的字符串。</p>
</blockquote>
<blockquote>
<p>说明：该方法用于检测一个字符串是否匹配某个模式。如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 使用test方法实现模糊查询</span><br><span class="line">   * @param  &#123;Array&#125;  list     原数组</span><br><span class="line">   * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line">   * @return &#123;Array&#125;           查询的结果</span><br><span class="line">   */</span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var reg =  new RegExp(keyWord);</span><br><span class="line">    var arr = [];</span><br><span class="line">    for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">      if (reg.test(list[i])) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><blockquote>
<p>测试条件：一个长度为100的数组，每个方法测试50次，取平均值。<br>indexof 方法耗费时间： 0.048ms<br>split 方法耗费时间： 0.037ms<br>match 方法耗费时间： 0.178ms<br>test 方法耗费时间： 0.039ms</p>
</blockquote>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li><p>从上面测试结果可以看出在几百几千甚至几万条数据量的情况下，前端去处理都是没问题的，相比发送一个 ajax 请求去后台来说，前端还是具有很大优势的，能节省不少时间。</p>
</li>
<li><p>相比其他方法，match 方法性能最差，消耗的时间差不多是其他方法的3-4倍，虽说这一点点时间相比发送ajax来说，也算提高了很多既然我们在一开始就是为了提高用户体验，那么我们也应该追求极致啦，所以 match 选手落败。</p>
</li>
<li><p>除了 match 方法，其他三个方法在性能上差不多。不过在这里有一点需要提出的就是， test 方法因为使用到了正则表达式，所以能够实现的功能会比较强大，写出来的代码也更加简洁。打个比方，在不区分大小写的模糊搜索条件下， test 方法只需在正则表达式中添加修饰符 i 即可实现不区分大小写，而 indexof 方法和 split 方法则要通过多次的方法调用和逻辑运算符才能实现效果。</p>
</li>
</ol>
<h4 id="屏蔽Backspace键返回上个页面"><a href="#屏蔽Backspace键返回上个页面" class="headerlink" title="屏蔽Backspace键返回上个页面"></a>屏蔽Backspace键返回上个页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//屏蔽Backspace键返回上个页面</span><br><span class="line">function banBackSpace(e) &#123;</span><br><span class="line">    var ev = e || window.event;//获取event对象  </span><br><span class="line">    var flag=(ev.keyCode == 8) ? true:false;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">     //禁止后退键 作用于Firefox、Opera</span><br><span class="line">     document.onkeypress=banBackSpace;</span><br><span class="line">     //禁止后退键  作用于IE、Chrome</span><br><span class="line">     document.onkeydown=banBackSpace;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止浏览器默认行为触发的通用方法"><a href="#阻止浏览器默认行为触发的通用方法" class="headerlink" title="阻止浏览器默认行为触发的通用方法"></a>阻止浏览器默认行为触发的通用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //阻止浏览器默认行为触发的通用方法 </span><br><span class="line"> function stopDefault(e) &#123;</span><br><span class="line">    if (e &amp;&amp; e.preventDefault) &#123;</span><br><span class="line">        e.preventDefault();//防止浏览器默认行为(W3C) </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       window.event.returnValue = false;//IE中阻止浏览器行为 </span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="H5本地缓存"><a href="#H5本地缓存" class="headerlink" title="H5本地缓存"></a>H5本地缓存</h4><h4 id="jquery实时监听input输入框值的变化事件"><a href="#jquery实时监听input输入框值的变化事件" class="headerlink" title="jquery实时监听input输入框值的变化事件"></a>jquery实时监听input输入框值的变化事件</h4><p><a href="https://blog.csdn.net/qq_41756580/article/details/81287095">参考</a></p>
<p>1.只需要同时绑定 oninput 和 onpropertychange 两个事件，获取input元素,并实时监听用户输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input&#x27;).bind(&#x27;input propertychange&#x27;, function()&#123;</span><br><span class="line">	if($(this).val())&#123;</span><br><span class="line">		console.log(&quot;hhhhhhhh&quot;);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		console.log(&quot;xxxxxxxx&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但这并不完美，因为用的bind，所以当遇到追加的新input标签时，则不能监听了。</p>
<p>2.为了解决上面的问题，可以使用live替代</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input&#x27;).live(&#x27;input propertychange&#x27;, function()</span><br><span class="line">&#123;</span><br><span class="line">  //获取input 元素,并实时监听用户输入</span><br><span class="line">  //逻辑</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后期生成的元素，用:</span><br><span class="line">$(本来存在的父元素).on(&quot;input propertychange&quot;,&quot;监听的元素&quot;, function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="表单input中disabled提交后得不到值的解决办法"><a href="#表单input中disabled提交后得不到值的解决办法" class="headerlink" title="表单input中disabled提交后得不到值的解决办法"></a>表单input中disabled提交后得不到值的解决办法</h4><p><a href="https://www.cnblogs.com/yuanwenha/p/7390326.html">参考</a></p>
<p>使用readonly</p>
<p>模拟下拉框获取不了角度，可以让它附近的文字获取焦点。   【文字是可以获取焦点的，不是文字，一般的元素获取不了焦点】</p>
<h4 id="javascript禁止页面滚动（但是ie8及以下不支持）"><a href="#javascript禁止页面滚动（但是ie8及以下不支持）" class="headerlink" title="javascript禁止页面滚动（但是ie8及以下不支持）"></a>javascript禁止页面滚动（但是ie8及以下不支持）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var scrollFunc=function(e)&#123;</span><br><span class="line">	e=e||window.event;</span><br><span class="line">    if (e&amp;&amp;e.preventDefault)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.returnvalue=false;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(window.addEventListener)&#123;</span><br><span class="line">    window.addEventListener(&#x27;DOMMouseScroll&#x27;,scrollFunc,false);</span><br><span class="line">    window.addEventListener(&#x27;mousewheel&#x27;,scrollFunc,false);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    window.onmousewheel=scrollFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js数组与字符串的相互转换"><a href="#js数组与字符串的相互转换" class="headerlink" title="js数组与字符串的相互转换"></a>js数组与字符串的相互转换</h4><h6 id="一、数组转字符串"><a href="#一、数组转字符串" class="headerlink" title="一、数组转字符串"></a>一、数组转字符串</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要将数组元素用某个字符连接成字符串，示例代码如下：</span><br><span class="line">var a, b,c; </span><br><span class="line">a = new Array(a,b,c,d,e); </span><br><span class="line">b = a.join(&#x27;-&#x27;); //a-b-c-d-e  使用-拼接数组元素</span><br><span class="line">c = a.join(&#x27;&#x27;); //abcde</span><br></pre></td></tr></table></figure>

<h6 id="二、字符串转数组"><a href="#二、字符串转数组" class="headerlink" title="二、字符串转数组"></a>二、字符串转数组</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：</span><br><span class="line">var str = &#x27;ab+c+de&#x27;;</span><br><span class="line">var a = str.split(&#x27;+&#x27;); // [ab, c, de]</span><br><span class="line">var b = str.split(&#x27;&#x27;); //[a, b, +, c, +, d, e]</span><br></pre></td></tr></table></figure>

<h4 id="防止事件冒泡"><a href="#防止事件冒泡" class="headerlink" title="防止事件冒泡"></a>防止事件冒泡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.event? window.event.cancelBubble = true : e.stopPropagation();</span><br></pre></td></tr></table></figure>

<h4 id="返回上一页"><a href="#返回上一页" class="headerlink" title="返回上一页"></a>返回上一页</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript:window.history.go(-1);</span><br></pre></td></tr></table></figure>

<h4 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.reload(); </span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/124389.htm">参考教程</a></p>
<h4 id="设置复选框选中"><a href="#设置复选框选中" class="headerlink" title="设置复选框选中"></a>设置复选框选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, true);</span><br><span class="line">或</span><br><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="判断复选框是否被选中"><a href="#判断复选框是否被选中" class="headerlink" title="判断复选框是否被选中"></a>判断复选框是否被选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isChecked = $(&quot;input&quot;).is(&quot;:checked&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="设置复选框不选中"><a href="#设置复选框不选中" class="headerlink" title="设置复选框不选中"></a>设置复选框不选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, false); </span><br><span class="line">或</span><br><span class="line">$(&quot;input&quot;).prop(&quot;checked&quot;, false); </span><br></pre></td></tr></table></figure>

<h4 id="全选-全不选复选框"><a href="#全选-全不选复选框" class="headerlink" title="全选/全不选复选框"></a>全选/全不选复选框</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#selectAll&#x27;).bind(&#x27;change&#x27;,function(event) &#123;</span><br><span class="line">    var isCheck=$(&quot;#selectAll&quot;).is(&#x27;:checked&#x27;);  //获得全选复选框是否选中</span><br><span class="line">    $(&quot;input[name=&#x27;platform&#x27;]&quot;).each(function() &#123;  </span><br><span class="line">        this.checked = isCheck;       //循环赋值给每个复选框是否选中</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var selectArr = [], checkbox;  </span><br><span class="line">    checkbox = $(&#x27;input[name =&quot;platform&quot;]&#x27;);</span><br><span class="line"></span><br><span class="line">    for(var i = 0; i &lt; checkbox.length;i++)&#123;</span><br><span class="line">        if(checkbox[i].checked == true)&#123;</span><br><span class="line">            selectArr.push(checkbox[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(selectArr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="全选复选框和普通复选框联合"><a href="#全选复选框和普通复选框联合" class="headerlink" title="全选复选框和普通复选框联合"></a>全选复选框和普通复选框联合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var $all_check = $(&#x27;#all_check&#x27;);</span><br><span class="line">var $check = $(&#x27;.check&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全选按钮点击事件</span><br><span class="line"> */</span><br><span class="line">$all_check.bind(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    if ($(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">        $check.prop(&#x27;checked&#x27;, true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $check.prop(&#x27;checked&#x27;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 普通按钮点击事件</span><br><span class="line"> */</span><br><span class="line">$check.bind(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    if ($(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">        var isAllCheck = true;</span><br><span class="line">        $check.each(function () &#123;</span><br><span class="line">            if (!$(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">                isAllCheck = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if(isAllCheck)&#123;</span><br><span class="line">            $all_check.prop(&#x27;checked&#x27;, true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $all_check.prop(&#x27;checked&#x27;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="获取单选框选中的值"><a href="#获取单选框选中的值" class="headerlink" title="获取单选框选中的值"></a>获取单选框选中的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[name=&quot;plan&quot;]:checked&#x27;).val();</span><br></pre></td></tr></table></figure>

<h4 id="监听单选按钮事件改变"><a href="#监听单选按钮事件改变" class="headerlink" title="监听单选按钮事件改变"></a>监听单选按钮事件改变</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[type=radio][name=type]&#x27;).change(function() &#123;</span><br><span class="line">    if (this.value == 3) &#123;</span><br><span class="line">        $(&quot;.license_tr&quot;).hide();</span><br><span class="line">        $(&quot;.license_code_tr&quot;).hide();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        $(&quot;.license_tr&quot;).show();</span><br><span class="line">        $(&quot;.license_code_tr&quot;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值"><a href="#JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值" class="headerlink" title="JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值"></a>JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值</h4><p><a href="https://blog.csdn.net/tg928600774/article/details/83651608">参考教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var newModel = $.extend(true,&#123;&#125;,oldModel)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var newModel = $.extend(true,[],oldModel)</span><br></pre></td></tr></table></figure>

<h4 id="只赋值不改变原来对象"><a href="#只赋值不改变原来对象" class="headerlink" title="只赋值不改变原来对象"></a>只赋值不改变原来对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data=&#123;a:1,b:2,c:3,d:4&#125;;</span><br><span class="line">var newData= $.extend(true,&#123;&#125;,data);;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为移动端"><a href="#判断是否为移动端" class="headerlink" title="判断是否为移动端"></a>判断是否为移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isMobile = /Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var o=navigator.userAgent;</span><br><span class="line">    if(o.indexOf(&quot;iPhone&quot;)!=-1 || o.indexOf(&quot;iPad&quot;)!=-1 || o.indexOf(&quot;iPod&quot;)!=-1 || o.indexOf(&quot;Android&quot;)!=-1)&#123;</span><br><span class="line">        self.location=&#x27;/mobile/&#x27;;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>



<h4 id="判断输入框是否获取焦点"><a href="#判断输入框是否获取焦点" class="headerlink" title="判断输入框是否获取焦点"></a>判断输入框是否获取焦点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isFocus=$(&quot;#tRow&quot;).is(&quot;:focus&quot;);  </span><br></pre></td></tr></table></figure>

<h4 id="单页面应用判断页面是不是刷新（谷歌浏览器）"><a href="#单页面应用判断页面是不是刷新（谷歌浏览器）" class="headerlink" title="单页面应用判断页面是不是刷新（谷歌浏览器）"></a>单页面应用判断页面是不是刷新（谷歌浏览器）</h4><p>在刷新页面的时候使用window.onbeforeunload向sessionstorage或localstorage存入一个标记譬如reloadFlag作为判断是否是刷新的依据，页面刷新后从sessionstorage或localstorage中获取存储的标记，然后执行相应的回调向后端发起请求，完成之后将sessionstorage或localstorage中获取存储的标记删除即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// reLoadFlag.js</span><br><span class="line">;(function()&#123;</span><br><span class="line">   	window.onbeforeunload = function()&#123;</span><br><span class="line">   		sessionStorage.setItem(&#x27;reLoadFlag&#x27;, &#x27;true&#x27;);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 需要判断的地方进行判断操作</span><br><span class="line">if (sessionStorage.getItem(&#x27;reLoadFlag&#x27;) === &#x27;true&#x27;) &#123;</span><br><span class="line">   // 执行其他的逻辑</span><br><span class="line">   // ...............</span><br><span class="line">   sessionStorage.removeItem(&#x27;reLoadFlag&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次向后端发起请求得到数据后存储到sessionstorage或localstorage之中，之后的逻辑是每次需要数据时从sessionstorage或localstorage中去取，取不到的时候（比如关闭页面重新打开或者手动清除缓存）再重新向后端发起请求获取数据。但是这样会存在一个问题，即希望通过刷新页面向后端重新发起请求的时候因为sessionstorage或localstorage的数据仍然存在，所以不会向后端发起请求。</p>
</blockquote>
<h4 id="filter函数做数据匹配"><a href="#filter函数做数据匹配" class="headerlink" title="filter函数做数据匹配"></a>filter函数做数据匹配</h4><p>只有一个筛选条件的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var res = datas.filter(function (data) &#123;</span><br><span class="line">     return data[type] === val;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多个筛选条件的时候（注意：要加上  &gt; -1，不然返回有问题）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var searchList = [];</span><br><span class="line">searchList = list.filter(function(item) &#123;</span><br><span class="line">  var flag = (item.name.indexOf(txt) &gt; -1) || (item.key.indexOf(txt)  &gt;-1) || (item.account_id.indexOf(txt)  &gt;-1) || (item.user_name.indexOf(txt)  &gt;-1) || (item.user_id.indexOf(txt)  &gt;-1);					</span><br><span class="line">   return flag;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="处理textarea换行数据"><a href="#处理textarea换行数据" class="headerlink" title="处理textarea换行数据"></a>处理textarea换行数据</h4><p>先使用换行符“\n”截取，然后用”~”获取</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E6%96%B9%E6%B3%95/br.png" alt="处理textarea换行数据"></p>
<h4 id="火狐浏览器，报ev-is-undefined"><a href="#火狐浏览器，报ev-is-undefined" class="headerlink" title="火狐浏览器，报ev is undefined"></a>火狐浏览器，报ev is undefined</h4><ul>
<li><p>获取当前操作对象时，要记得传参</p>
</li>
<li><p>封装函数加上事件参数e</p>
</li>
<li><p>调用时加上事件参数e</p>
</li>
</ul>
<h4 id="搜索框——实时匹配"><a href="#搜索框——实时匹配" class="headerlink" title="搜索框——实时匹配"></a>搜索框——实时匹配</h4><p>（输入完文字就直接匹配，包括中文输入）实现中文输入法下，仅在选词后触发input事件。<a href="https://www.jianshu.com/p/e9c837eba083">参考教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述</span><br><span class="line">在使用oninput监控输入框内容变化时，我们期望仅在value值变化时，才触发oninput事件，而在中文输入下，未选词时的按键也会触发oninput事件。</span><br><span class="line">input事件触发效果</span><br><span class="line"></span><br><span class="line">关键</span><br><span class="line">compositionstart事件</span><br><span class="line">compositionend事件</span><br><span class="line"></span><br><span class="line">方法</span><br><span class="line">使用一个变量表示拼写状态，在oninput事件中判断是否在拼写状态，当拼写状态结束，继续执行下一步操作。</span><br><span class="line">var typing = false;</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;compositionstart&#x27;,function()&#123;</span><br><span class="line">    typing = true;</span><br><span class="line">&#125;)</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;compositionend&#x27;,function()&#123;</span><br><span class="line">    typing = false;</span><br><span class="line">&#125;)</span><br><span class="line">//oninput在oncompositionend之前执行，需加定时器</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;input&#x27;,function()&#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        if(!typing) &#123;</span><br><span class="line">            //To do something...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,0);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//或用keyup代替input</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;input&#x27;,function()&#123;</span><br><span class="line">    if(!typing) &#123;</span><br><span class="line">        //To do something...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="获取横向滚动条位置"><a href="#获取横向滚动条位置" class="headerlink" title="获取横向滚动条位置"></a>获取横向滚动条位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var left = $(&quot;.layui-table-body&quot;).scrollLeft();</span><br></pre></td></tr></table></figure>

<h4 id="设置横向滚动条位置"><a href="#设置横向滚动条位置" class="headerlink" title="设置横向滚动条位置"></a>设置横向滚动条位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.layui-table-body&quot;).scrollLeft(left);</span><br></pre></td></tr></table></figure>

<h4 id="利用js打开新页面（在另外新建窗口中打开窗口）"><a href="#利用js打开新页面（在另外新建窗口中打开窗口）" class="headerlink" title="利用js打开新页面（在另外新建窗口中打开窗口）"></a>利用js打开新页面（在另外新建窗口中打开窗口）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.open(&quot;http://doc.trackingio.com/qu-dao-pei-zhi-shuo-ming/guang-dian-tong.html&quot;,&quot;_blank&quot;);  </span><br></pre></td></tr></table></figure>

<h4 id="jQuery–复制克隆（复制节点）"><a href="#jQuery–复制克隆（复制节点）" class="headerlink" title="jQuery–复制克隆（复制节点）"></a>jQuery–复制克隆（复制节点）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //文档准备就绪函数</span><br><span class="line">$(function () &#123;</span><br><span class="line">    //获取li标签及点击事件</span><br><span class="line">    $(&quot;ul li&quot;).click(function () &#123;</span><br><span class="line">        //对这个li标签使用clone克隆（clone(true)添加true使复制过的还能继续复制）</span><br><span class="line">        //，然后添加到ul标签里面</span><br><span class="line">        $(this).clone(true).appendTo(&quot;ul&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="js获取日期（例如：昨天、今天和明天）"><a href="#js获取日期（例如：昨天、今天和明天）" class="headerlink" title="js获取日期（例如：昨天、今天和明天）"></a>js获取日期（例如：昨天、今天和明天）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetDateStr(AddDayCount, nowDay) &#123; </span><br><span class="line">var dd = new Date(nowDay); </span><br><span class="line"></span><br><span class="line">console.log(&quot;dd&quot;);</span><br><span class="line">console.log(dd);</span><br><span class="line">dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期 </span><br><span class="line">var y = dd.getFullYear(); </span><br><span class="line">var m = dd.getMonth()+1;//获取当前月份的日期 </span><br><span class="line">var d = dd.getDate(); </span><br><span class="line"></span><br><span class="line">if(m &lt; 10) &#123;</span><br><span class="line">	m = &quot;0&quot; + m;</span><br><span class="line">&#125;</span><br><span class="line">				</span><br><span class="line">if(d &lt; 10) &#123;</span><br><span class="line">	d = &quot;0&quot; + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return y+&quot;-&quot;+m+&quot;-&quot;+d; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetDateStr(-1, 2019-04-02);</span><br><span class="line"></span><br><span class="line">new Date(curDate);</span><br><span class="line">var preDate = new Date(curDate.getTime() - 24*60*60*1000); //前一天</span><br></pre></td></tr></table></figure>

<h4 id="给对象添加变量属性（空数组）"><a href="#给对象添加变量属性（空数组）" class="headerlink" title="给对象添加变量属性（空数组）"></a>给对象添加变量属性（空数组）</h4><p>使用[]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selectChannel[selectList[i]] = [];</span><br><span class="line">使用selectChannel.push(&#123;selectList[i]]:[]&#125;)是错的。</span><br></pre></td></tr></table></figure>

<h4 id="改变checkbox选中状态"><a href="#改变checkbox选中状态" class="headerlink" title="改变checkbox选中状态"></a>改变checkbox选中状态</h4><p><a href="https://blog.csdn.net/brucecheng22/article/details/50408199">参考教程</a></p>
<p>使用prop方法    <a href="https://www.jianshu.com/p/d544167bd715">动态改变checkbox的选中状态</a></p>
<blockquote>
<p>使用1.6.1 以上版本（测试使用1.10.1版本可以）</p>
</blockquote>
<h4 id="按回车触发的事件"><a href="#按回车触发的事件" class="headerlink" title="按回车触发的事件"></a>按回车触发的事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.onkeydown = function(e)&#123; </span><br><span class="line">    var ev = document.all ? window.event : e;</span><br><span class="line">    if(ev.keyCode==13) &#123;</span><br><span class="line">        $(&quot;.login-btn&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="捕获错误信息"><a href="#捕获错误信息" class="headerlink" title="捕获错误信息"></a>捕获错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取页面错误信息&quot; onclick=&quot;adlert(&#x27;函数函数&#x27;)&quot; /&gt;</span><br><span class="line">&lt;/body&gt; </span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line"> var errorTxt = &quot;&quot;;</span><br><span class="line"> window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h4 id="返回文档的根节点（html）"><a href="#返回文档的根节点（html）" class="headerlink" title="返回文档的根节点（html）"></a>返回文档的根节点（html）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.documentElement</span><br></pre></td></tr></table></figure>

<h4 id="返回DOM对象中的body节点"><a href="#返回DOM对象中的body节点" class="headerlink" title="返回DOM对象中的body节点"></a>返回DOM对象中的body节点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在标准模式下，document.body.scrollTop恒为0；</p>
<p>但在怪异模式下，document.documentElement.scrollTop；</p>
<p>但是document.documentElement.scrollTop和document.body.scrollTop在标准模式或者是奇怪模式下都只有一个会返回有效的值，所以获取scrollTop时两个都加上</p>
</blockquote>
<h4 id="获取滚动条当前位置高度"><a href="#获取滚动条当前位置高度" class="headerlink" title="获取滚动条当前位置高度"></a>获取滚动条当前位置高度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getScrollTop()&#123;</span><br><span class="line">	var scrollTop = 0;</span><br><span class="line">	if(document.documentElement &amp;&amp; document.documentElement.scrollTop)&#123;</span><br><span class="line"></span><br><span class="line">		scrollTop = document.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line">	&#125;else if(document.body)&#123;</span><br><span class="line"></span><br><span class="line">		scrollTop = document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	return scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取当前页面可视高度-注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度"><a href="#获取当前页面可视高度-注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度" class="headerlink" title="获取当前页面可视高度(注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度)"></a>获取当前页面可视高度(注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getClientHeight()&#123;</span><br><span class="line"></span><br><span class="line">	var clientHeight = 0;</span><br><span class="line">	if(document.body.clientHeight &amp;&amp; document.documentElement.clientHeight)&#123;</span><br><span class="line"></span><br><span class="line">		clientHeight = Math.min(document.body.clientHeight,document.documentElement.clientHeight);</span><br><span class="line"></span><br><span class="line">	&#125;else&#123;</span><br><span class="line"></span><br><span class="line">		clientHeight = Math.max(document.body.clientHeight,document.documentElement.clientHeight);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取文档完整高度"><a href="#获取文档完整高度" class="headerlink" title="获取文档完整高度"></a>获取文档完整高度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getScrollHeight()&#123;</span><br><span class="line"></span><br><span class="line">	return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否到达页面底部"><a href="#判断是否到达页面底部" class="headerlink" title="判断是否到达页面底部"></a>判断是否到达页面底部</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当滚动条高度加上页面可视高度等于整个文档完整高度，则页面已达到底部</span><br><span class="line">getScrollTop() + getClientHeight() == getScrollHeight() </span><br></pre></td></tr></table></figure>

<h4 id="清空尚未执行完的动画队列"><a href="#清空尚未执行完的动画队列" class="headerlink" title="清空尚未执行完的动画队列"></a>清空尚未执行完的动画队列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.mobie_show&quot;).stop().animate(&#123;&quot;top&quot;:&quot;70px&quot;,&quot;opacity&quot;:&quot;1&quot;&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把当前元素接下来尚未执行完的动画队列清空    （例如：当用户鼠标经过某元素的时候，执行某个动画，用户不断地让鼠标经过元素，但上一个动画还没有执行完毕。  加上stop是为了避免用户不停地操作）</p>
</blockquote>
<h4 id="swobject的使用"><a href="#swobject的使用" class="headerlink" title="swobject的使用"></a>swobject的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var params = &#123;wmode:&quot;transparent&quot;&#125;;</span><br><span class="line">swfobject.embedSWF(&quot;http://images.vxinyou.com/gd/images1510/hh.swf&quot;, &quot;hh&quot;, &quot;1920&quot;, &quot;450&quot;, &quot;9.0.0&quot;,&quot;http://images.vxinyou.com/jsCommon/expressinstall.swf&quot;, &#123;&#125;, params);  </span><br></pre></td></tr></table></figure>

<h4 id="JS禁止查看网页源代码的实现方法"><a href="#JS禁止查看网页源代码的实现方法" class="headerlink" title="JS禁止查看网页源代码的实现方法"></a>JS禁止查看网页源代码的实现方法</h4><p>查看源代码的方法：</p>
<p>1、直接按F12</p>
<p>2、Ctrl+Shift+I查看</p>
<p>3、鼠标点击右键查看</p>
<blockquote>
<p>把以上三种状态都屏蔽掉就可以了，document有onkeydown(键盘按键事件)，该事件里面找到对应的keycode并处理就可以，document也有oncontextmenu鼠标右键事件，屏蔽即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    document.onkeydown = function()&#123;</span><br><span class="line">        var e = window.event || arguments[0];</span><br><span class="line">        console.log(e);</span><br><span class="line">        if(e.keyCode == 123)&#123;</span><br><span class="line">            // alert(&quot;小样你想干嘛？&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else if((e.ctrlKey)&amp;&amp;(e.shiftKey)&amp;&amp;(e.keyCode == 73))&#123;</span><br><span class="line">            // alert(&quot;还是不给你看。。&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    document.oncontextmenu = function()&#123;</span><br><span class="line">        // alert(&quot;小样不给你看&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网站个性化设置-换肤"><a href="#网站个性化设置-换肤" class="headerlink" title="网站个性化设置-换肤"></a>网站个性化设置-换肤</h4><p>结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body class=&quot;green&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;theme&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default&quot;&gt;默认&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-green”&gt;绿色&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-blue&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-orange&quot;&gt;橙色&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-nav&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#”&gt;首页&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司概况&lt;span&gt;Company&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;新闻中心&lt;span&gt;News&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p&gt;网站个性化设置-换肤!&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#content p &#123;</span><br><span class="line">	padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">/*默认主题*/</span><br><span class="line">body.default &#123;</span><br><span class="line">	background:url(../images/bg1.jpg) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">.default .main-nav &#123;</span><br><span class="line">	background: #c5000;</span><br><span class="line">&#125;</span><br><span class="line">.default #content &#123;</span><br><span class="line">	background: #c5000;</span><br><span class="line">&#125;</span><br><span class="line">/*绿色主题*/</span><br><span class="line">body.green &#123;</span><br><span class="line">	background:ur1(../images/bg2-jpg) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">.green .main-nav &#123;</span><br><span class="line">	background: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">.green #content &#123;</span><br><span class="line">	background: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">/*蓝色主题*/</span><br><span class="line">body.blue &#123;</span><br><span class="line">	background:url(../images/bg3.jpg) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<ul>
<li><p>方法一：点击按钮改变body的样式</p>
<p>用replace替换，拿到后面的值（default、green）用replace把（btn btn-）替换为空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line">	// 单击不同的按纽,加载不同的样式</span><br><span class="line">	$(&quot;.theme button&quot;).click(function()&#123;</span><br><span class="line">	// replace()用于替换字符串</span><br><span class="line">	// attr()获取属性</span><br><span class="line">	var theme = $(this).attr(&#x27;class&#x27;).replace(&#x27;btn btn-&#x27;,&#x27;&#x27;);</span><br><span class="line">	alert(theme);</span><br><span class="line">	$(&quot;body&quot;).attr(&#x27;class&#x27;, theme);  // body添加属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>弊端（如果button 后面还有别的类名，就不好使了）</p>
</blockquote>
</li>
<li><p>方法二：自定义属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-default&quot; btn-name=&quot;default&quot;&gt;默认&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-green” btn-name=&quot;green&quot;&gt;绿色&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-blue&quot; btn-name=&quot;blue&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-orange&quot; btn-name=&quot;orange&quot;&gt;橙色&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line">	// 单击不同的按纽,加载不同的样式</span><br><span class="line">	$(&quot;.theme button&quot;).click(function()&#123;</span><br><span class="line">	// replace()用于替换字符串</span><br><span class="line">	// attr()获取属性</span><br><span class="line">	var theme = $(this).attr(&#x27;btn-name&#x27;);</span><br><span class="line">	alert(theme);</span><br><span class="line">	$(&quot;body&quot;).attr(&#x27;class&#x27;, theme);  // body添加属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="获取form表单全部value值"><a href="#获取form表单全部value值" class="headerlink" title="获取form表单全部value值"></a>获取form表单全部value值</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(&quot;#form&quot;).serializeArray();</span><br></pre></td></tr></table></figure>

<h4 id="鼠标在图片上，滚动滚轮，可放大缩小图片"><a href="#鼠标在图片上，滚动滚轮，可放大缩小图片" class="headerlink" title="鼠标在图片上，滚动滚轮，可放大缩小图片"></a>鼠标在图片上，滚动滚轮，可放大缩小图片</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;./blog-head-img.jpg&quot; onmousewheel=&quot;return bbimg(this)&quot; </span><br><span class="line">onload=&quot;if(this.width &gt; screen.width - 500) this.style.width = screen.width - 500;&quot;&gt;</span><br><span class="line"></span><br><span class="line">function bbimg(obj)&#123;</span><br><span class="line">    var zoom = parseInt(obj.style.zoom, 10) || 100;</span><br><span class="line">    zoom += event.wheelDelta/12;</span><br><span class="line">    if (zoom&gt;0) &#123;</span><br><span class="line">        obj.style.zoom = zoom + &#x27;%&#x27;;</span><br><span class="line">    &#125; </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="delegate-方法"><a href="#delegate-方法" class="headerlink" title="delegate() 方法"></a>delegate() 方法</h4><blockquote>
<p><a href="https://www.w3school.com.cn/jquery/event_delegate.asp">delegate() 方法</a>为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</p>
<p>使用 delegate() 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).delegate(&quot;button&quot;,&quot;click&quot;,function()&#123;</span><br><span class="line">  $(&quot;p&quot;).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(selector).delegate(childSelector,event,data,function)</span><br></pre></td></tr></table></figure>

<h4 id="记录及清空搜索历史记录"><a href="#记录及清空搜索历史记录" class="headerlink" title="记录及清空搜索历史记录"></a>记录及清空搜索历史记录</h4><h4 id="回到页面顶部"><a href="#回到页面顶部" class="headerlink" title="回到页面顶部"></a>回到页面顶部</h4><p><a href="https://www.jb51.net/article/91824.htm">基于JS实现回到页面顶部的五种写法(从实现到增强)</a></p>
<h4 id="移动端设备判断"><a href="#移动端设备判断" class="headerlink" title="移动端设备判断"></a>移动端设备判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua=navigator.userAgent, 			     wxv=parseInt(ua.substring(ua.toLowerCase().indexOf(&quot;micromessenger/&quot;)+15));</span><br><span class="line">var uClient = &quot;mq&quot;;</span><br><span class="line">if(wxv &gt;= 5)&#123;</span><br><span class="line">    uClient = &quot;wx&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    isQzone = ua.match(&quot;Qzone&quot;);</span><br><span class="line">    if(isQzone)&#123;</span><br><span class="line">        uClient = &#x27;qzone&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var iPad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">    iPhone = !iPad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">    iPod = ua.match(/(iPod).*OS\s([\d_]+)/),</span><br><span class="line">    android = ua.match(/(Android)\s+([\d.]+)/)||ua.match(/Android/),</span><br><span class="line">    wp = ua.match(/Windows Phone ([\d.]+)/),</span><br><span class="line">    isMobile = iPad || iPhone || iPad || wp || android;</span><br></pre></td></tr></table></figure>

<h4 id="回调函数："><a href="#回调函数：" class="headerlink" title="回调函数："></a>回调函数：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = 1;</span><br><span class="line">function bar(callback) &#123;</span><br><span class="line">    foo = 10;</span><br><span class="line">    console.log(foo);</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(this.foo);</span><br><span class="line">    return;</span><br><span class="line">    function foo() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">bar(function()&#123;</span><br><span class="line">    console.log(&#x27;回调&#x27;);</span><br><span class="line">    console.log(foo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(this);</span><br><span class="line">console.log(this.foo);</span><br><span class="line"></span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> var func = (function(a) &#123;</span><br><span class="line">    this.a = a;</span><br><span class="line">    return function(a) &#123;</span><br><span class="line">        a += this.a;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">(function(a, b) &#123;</span><br><span class="line">    return a;</span><br><span class="line">&#125;(1, 2));</span><br><span class="line"></span><br><span class="line">console.log(func(4));</span><br></pre></td></tr></table></figure>

<h4 id="数组按一定原则排序"><a href="#数组按一定原则排序" class="headerlink" title="数组按一定原则排序"></a>数组按一定原则排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr5 = [&#123;id:10&#125;,&#123;id:5&#125;,&#123;id:6&#125;,&#123;id:9&#125;,&#123;id:2&#125;,&#123;id:3&#125;];</span><br><span class="line">arr5.sort(function(a,b)&#123;</span><br><span class="line">    return a.id - b.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="对返回的数据进行处理-专为数组或对象格式"><a href="#对返回的数据进行处理-专为数组或对象格式" class="headerlink" title="对返回的数据进行处理-专为数组或对象格式"></a>对返回的数据进行处理-专为数组或对象格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data =&#123;</span><br><span class="line">    &#x27;yangyibing&#x27;:&#123;</span><br><span class="line">        name: &#x27;杨伊冰&#x27;,</span><br><span class="line">        age: &#x27;25&#x27;,</span><br><span class="line">        job: &#x27;web&#x27;,</span><br><span class="line">        city: &#x27;guangzhou&#x27; </span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;liyishun&#x27;:&#123;</span><br><span class="line">        name: &#x27;李一瞬&#x27;,</span><br><span class="line">        age: &#x27;25&#x27;,</span><br><span class="line">        job: &#x27;web&#x27;,</span><br><span class="line">        city: &#x27;guangzhou&#x27; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getList(data)&#123;</span><br><span class="line">    var obj = &#123;&#125;, list = [], returnData = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    for(var key in data)&#123;</span><br><span class="line">        var item = &#123;</span><br><span class="line">            k: key,</span><br><span class="line">            v: data[key]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj[key] = data[key];</span><br><span class="line"></span><br><span class="line">        list.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    returnData[&#x27;list&#x27;] = list;</span><br><span class="line">    returnData[&#x27;obj&#x27;] = obj;</span><br><span class="line"></span><br><span class="line">    return returnData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = getList(data)[&#x27;obj&#x27;];</span><br><span class="line">var list = getList(data)[&#x27;list&#x27;];</span><br><span class="line">console.log(obj);</span><br><span class="line">console.log(list);</span><br></pre></td></tr></table></figure>

<h4 id="输入框获取焦点-放大-缩小页面（scale）"><a href="#输入框获取焦点-放大-缩小页面（scale）" class="headerlink" title="输入框获取焦点-放大/缩小页面（scale）"></a>输入框获取焦点-放大/缩小页面（scale）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;login-box&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;login-input&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var clientH = document.documentElement.clientHeight;</span><br><span class="line">// var clientW = document.documentElement.clientWidth;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    // $(&quot;.login-box&quot;).css(&#123;&quot;width&quot;:clientW + &quot;px&quot;,&quot;height&quot;:clientH + &quot;px&quot;&#125;);</span><br><span class="line">    $(&quot;#login-input&quot;).focus(function()&#123;</span><br><span class="line">        zoomout();</span><br><span class="line">    &#125;)</span><br><span class="line">    $(&quot;#login-input&quot;).blur(function()&#123;</span><br><span class="line">        zoomin();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">var size = 1.0;</span><br><span class="line"></span><br><span class="line">function zoomout() &#123;</span><br><span class="line">   size = size + 0.5;</span><br><span class="line"></span><br><span class="line">   set();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">function zoomin() &#123;</span><br><span class="line">    size = size - 0.5;</span><br><span class="line">    set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function set() &#123;</span><br><span class="line">    document.body.style.cssText = document.body.style.cssText + &#x27;; -webkit-transform: scale(&#x27; + size + &#x27;);-webkit-transform-origin: 0 0;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开页面，直接跳转到百度"><a href="#打开页面，直接跳转到百度" class="headerlink" title="打开页面，直接跳转到百度"></a>打开页面，直接跳转到百度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    // window.location.href = &quot;http://baidu.com&quot;;</span><br><span class="line">    location.href = &quot;http://baidu.com&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态追加script脚本或js文件"><a href="#动态追加script脚本或js文件" class="headerlink" title="动态追加script脚本或js文件"></a>动态追加script脚本或js文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function loadScript (url) &#123;</span><br><span class="line">    loadScript.mark = &#x27;load&#x27;;</span><br><span class="line">    var script = document.createElement(&quot;script&quot;);</span><br><span class="line">    script.type = &quot;type/javascript&quot;;</span><br><span class="line">    script.src = url;</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// loadScript (&quot;js/jquery.min.js&quot;);</span><br><span class="line">// console.log(loadScript.mark);</span><br><span class="line"></span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">    if(loadScript.mark != &#x27;load&#x27;) &#123;</span><br><span class="line">        loadScript(&quot;js/script.js&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开一个新的浏览器窗口"><a href="#打开一个新的浏览器窗口" class="headerlink" title="打开一个新的浏览器窗口"></a>打开一个新的浏览器窗口</h4><p><a href="https://www.runoob.com/jsref/met-win-open.html">菜鸟教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;openwindow()&quot;&gt;创建窗口&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var w = window;</span><br><span class="line">function openwindow()&#123;</span><br><span class="line">    w.open(&#x27;http://www.runoob.com&#x27;,&#x27;菜鸟教程&#x27;, &#x27;width=800,height=800&#x27;);</span><br><span class="line">    w.focus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="捕获错误信息-1"><a href="#捕获错误信息-1" class="headerlink" title="捕获错误信息"></a>捕获错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var errorTxt = &quot;&quot;;</span><br><span class="line">window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oSpan.onclick = function(e)&#123;</span><br><span class="line">    // 阻止冒泡</span><br><span class="line">    e = e || event;</span><br><span class="line">    if(e.stopPropagation)&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.cancelBubble = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用定时器是为了让输入框上滑时更加自然-移动端"><a href="#使用定时器是为了让输入框上滑时更加自然-移动端" class="headerlink" title="使用定时器是为了让输入框上滑时更加自然-移动端"></a>使用定时器是为了让输入框上滑时更加自然-移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bfscrolltop = document.body.scrollTop;</span><br><span class="line">var interval;</span><br><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    interval = setInterval(function()&#123;</span><br><span class="line">    document.body.scrollTop = document.body.scrollHeight;</span><br><span class="line">    &#125;,100)</span><br><span class="line">&#125;).blur(function()&#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">    document.body.scrollTop = bfscrolltop;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jQuery插件扩展"><a href="#jQuery插件扩展" class="headerlink" title="jQuery插件扩展"></a>jQuery插件扩展</h4><h4 id="数组里的字符串转换成数字或者把数字转换成字符串"><a href="#数组里的字符串转换成数字或者把数字转换成字符串" class="headerlink" title="数组里的字符串转换成数字或者把数字转换成字符串"></a>数组里的字符串转换成数字或者把数字转换成字符串</h4><p>数字转字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9];</span><br><span class="line">arr.map(String);   // 结果: [&#x27;1&#x27;,&#x27;2&#x27;，&#x27;3&#x27;,&#x27;4&#x27;，&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;]</span><br></pre></td></tr></table></figure>

<p>字符串转数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [&#x27;1&#x27;,&#x27;2&#x27;，&#x27;3&#x27;,&#x27;4&#x27;，&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;];</span><br><span class="line">a.map(Number);  // 结果:[1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>

<h4 id="jquery获取第一个子节点元素"><a href="#jquery获取第一个子节点元素" class="headerlink" title="jquery获取第一个子节点元素"></a>jquery获取第一个子节点元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#body&quot;).children(&quot;:first&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="JS数组添加元素的三种方式"><a href="#JS数组添加元素的三种方式" class="headerlink" title="JS数组添加元素的三种方式"></a><a href="https://www.cnblogs.com/meng-ma-blogs/p/8352787.html">JS数组添加元素的三种方式</a></h4><p>1、push() 结尾添加</p>
<p>　　数组.push(元素)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>newelement1</td>
<td>必需。要添加到数组的第一个元素。</td>
</tr>
<tr>
<td>newelement2</td>
<td>可选。要添加到数组的第二个元素。</td>
</tr>
<tr>
<td>newelementX</td>
<td>可选。可添加多个元素。</td>
</tr>
</tbody></table>
<p>2、unshift() 头部添加</p>
<p>　　数组.unshift(元素)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>newelement1</td>
<td>必需。向数组添加的第一个元素。</td>
</tr>
<tr>
<td>newelement2</td>
<td>可选。向数组添加的第二个元素。</td>
</tr>
<tr>
<td>newelementX</td>
<td>可选。可添加若干个元素。</td>
</tr>
</tbody></table>
<p>3、splice() 方法向/从数组指定位置添加/删除项目，然后返回被删除的项目。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td>
</tr>
<tr>
<td>howmany</td>
<td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td>
</tr>
<tr>
<td>item1, …, itemX</td>
<td>可选。向数组添加的新项目。</td>
</tr>
</tbody></table>
<p>获取URL指定参数值（js/vue)</p>
<p><a href="https://www.cnblogs.com/linjiangxian/p/11466087.html">参考博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getParam(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if (r != null) return unescape(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="each"><a href="#each" class="headerlink" title="$.each"></a>$.each</h4><p><a href="https://blog.csdn.net/u010786902/article/details/50954002">jQuery中$.each的用法详解！</a></p>
<p><a href="https://www.jb51.net/article/65215.htm">jquery中$each()方法的使用指南</a></p>
<p><strong>Vue中</strong></p>
<p>方法一:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$route.query.xxx  //只要是在url里用?拼接的都可以</span><br></pre></td></tr></table></figure>

<p>方法二:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getParam function(paramName) &#123; </span><br><span class="line">    return decodeURIComponent((new RegExp(&#x27;[?|&amp;]&#x27; +</span><br><span class="line">      paramName + &#x27;=&#x27; + &#x27;([^&amp;;]+?)(&amp;|#|;|$)&#x27;).exec(location.href) || [, &quot;&quot;])[1].replace(/\+/g, &#x27;%20&#x27;)) || null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Stevenzwzhai/plugs">模糊搜索</a></p>
<h4 id="处理移动端点击延迟"><a href="#处理移动端点击延迟" class="headerlink" title="处理移动端点击延迟"></a>处理移动端点击延迟</h4><p><a href="https://blog.csdn.net/sly94/article/details/51701188">移动端web开发，click touch tap区别</a></p>
<p><a href="https://www.xuebuyuan.com/2174858.html">移动端WEB开发，click,touch,tap事件浅析</a></p>
<p><a href="http://www.bubuko.com/infodetail-1015581.html">JS 插件 fastclick.js 解决手机端click点击延迟</a></p>
<p>对于非移动浏览器不启作用，禁用缩放标签。</p>
<h4 id="call和-apply"><a href="#call和-apply" class="headerlink" title="call和 apply"></a>call和 apply</h4><p><a href="https://blog.csdn.net/u010670689/article/details/9065903">web开发JS调用打印机打印Web页面</a></p>
<p><a href="https://www.jb51.net/article/106915.htm">JS实现浏览器打印、打印预览示例</a></p>
<h4 id="原生JS获取元素焦点"><a href="#原生JS获取元素焦点" class="headerlink" title="原生JS获取元素焦点"></a>原生JS获取元素焦点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(id).focus();</span><br></pre></td></tr></table></figure>

<h4 id="获取今天，昨天，明天日期"><a href="#获取今天，昨天，明天日期" class="headerlink" title="获取今天，昨天，明天日期"></a>获取今天，昨天，明天日期</h4><p>自己写的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">// 获取日期函数</span><br><span class="line">@param days 时间间隔天数</span><br><span class="line">       -1：昨天</span><br><span class="line">        0: 今天</span><br><span class="line">        1：明天</span><br><span class="line">@param symbol 年月日之间的分隔符</span><br><span class="line">*/</span><br><span class="line">function getDateFun(days, symbol)&#123;</span><br><span class="line">    // 当前时间</span><br><span class="line">    var now = new Date();</span><br><span class="line">    var date = now.setDate(now.getDate() + days);</span><br><span class="line">    </span><br><span class="line">    // 格式化日期</span><br><span class="line">    function format(t) &#123;</span><br><span class="line">        var year = t.getFullYear();     // 年份</span><br><span class="line">        var month = t.getMonth() + 1;   // 月份</span><br><span class="line">        month = month &lt; 10 ? &quot;0&quot; + month : month;</span><br><span class="line">        var date = t.getDate();         // 日</span><br><span class="line">        date = date &lt; 10 ? &quot;0&quot; + date : date;</span><br><span class="line"></span><br><span class="line">        return year + symbol + month + symbol + date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回格式化后的日期</span><br><span class="line">    return format(new Date(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断数组中是否存在某值"><a href="#判断数组中是否存在某值" class="headerlink" title="判断数组中是否存在某值"></a>判断数组中是否存在某值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  arr数组   value需判断的元素</span><br><span class="line">function isInArray(arr, value) &#123;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (value === arr[i]) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组对象减去某值"><a href="#数组对象减去某值" class="headerlink" title="数组对象减去某值"></a>数组对象减去某值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function removeValue(arr, val) &#123;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (arr[i] == val) &#123;</span><br><span class="line">            arr.splice(i, 1);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LayUI-js实现全选、多选、翻页勾选（LayUI数据表格-方法渲染-模式）"><a href="#LayUI-js实现全选、多选、翻页勾选（LayUI数据表格-方法渲染-模式）" class="headerlink" title="LayUI + js实现全选、多选、翻页勾选（LayUI数据表格 方法渲染 模式）"></a><a href="https://www.cnblogs.com/java-hui/p/12170230.html">LayUI + js实现全选、多选、翻页勾选（LayUI数据表格 方法渲染 模式）</a></h4><p><a href="https://zhuanlan.zhihu.com/p/113456049">JavaScript单例模式</a></p>
<p><a href="https://www.cnblogs.com/imwtr/p/9451129.html">JavaScript中常见的十五种设计模式</a></p>
<p><a href="https://www.w3school.com.cn/js/js_function_apply.asp">JavaScript 函数 Apply</a></p>
<p><a href="https://www.w3school.com.cn/jsref/jsref_constructor_array.asp">JavaScript constructor 属性</a></p>
<h5 id="判断元素显示-隐藏，然后显示隐藏元素"><a href="#判断元素显示-隐藏，然后显示隐藏元素" class="headerlink" title="判断元素显示/隐藏，然后显示隐藏元素"></a>判断元素显示/隐藏，然后显示隐藏元素</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function toggleMask() &#123;</span><br><span class="line">    var mask = $(&quot;.main-mask&quot;);</span><br><span class="line">    if(mask.is(&quot;:hidden&quot;)) &#123;</span><br><span class="line">        mask.show();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        mask.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ivuu/p/7136408.html">js的内联和外部调用</a></p>
<h4 id="监听手动刷新事件"><a href="#监听手动刷新事件" class="headerlink" title="监听手动刷新事件"></a>监听手动刷新事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听刷新页面事件方法</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="JS如何在数组指定位置插入元素"><a href="#JS如何在数组指定位置插入元素" class="headerlink" title="JS如何在数组指定位置插入元素"></a><a href="https://www.jb51.net/article/182300.htm">JS如何在数组指定位置插入元素</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在数组指定位置插入</span><br><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.splice(2, 0, &quot;Lemon&quot;, &quot;Kiwi&quot;);</span><br><span class="line">// 输出结果</span><br><span class="line">// Banana, Orange, Lemon, Kiwi, Apple, Mango</span><br></pre></td></tr></table></figure>

<h5 id="阻止事件冒泡-1"><a href="#阻止事件冒泡-1" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.event? window.event.cancelBubble = true : e.stopPropagation();</span><br></pre></td></tr></table></figure>

<p><a href="http://caibaojian.com/javascript-stoppropagation-preventdefault.html">JS阻止冒泡和取消默认事件(默认行为)</a></p>
<p>当需要停止冒泡行为时，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function stopBubble(e) &#123; </span><br><span class="line">//如果提供了事件对象，则这是一个非IE浏览器 </span><br><span class="line">if ( e &amp;&amp; e.stopPropagation ) </span><br><span class="line">    //因此它支持W3C的stopPropagation()方法 </span><br><span class="line">    e.stopPropagation(); </span><br><span class="line">else </span><br><span class="line">    //否则，我们需要使用IE的方式来取消事件冒泡 </span><br><span class="line">    window.event.cancelBubble = true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当需要阻止默认行为时，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//阻止浏览器的默认行为 </span><br><span class="line">function stopDefault( e ) &#123; </span><br><span class="line">    //阻止默认浏览器动作(W3C) </span><br><span class="line">    if ( e &amp;&amp; e.preventDefault ) </span><br><span class="line">        e.preventDefault(); </span><br><span class="line">    //IE中阻止函数器默认动作的方式 </span><br><span class="line">    else </span><br><span class="line">        window.event.returnValue = false; </span><br><span class="line">    return false; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JS-删除数组中某个元素的几种方式"><a href="#JS-删除数组中某个元素的几种方式" class="headerlink" title="JS 删除数组中某个元素的几种方式"></a><a href="https://blog.csdn.net/Li_dengke/article/details/105249837">JS 删除数组中某个元素的几种方式</a></h4><h4 id="删除数组最后两个元素"><a href="#删除数组最后两个元素" class="headerlink" title="删除数组最后两个元素"></a>删除数组最后两个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.slice(0, -2)</span><br></pre></td></tr></table></figure>

<h4 id="删除数组最后一个元素"><a href="#删除数组最后一个元素" class="headerlink" title="删除数组最后一个元素"></a>删除数组最后一个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.slice(0, -1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure>



<h4 id="瀑布流的实现"><a href="#瀑布流的实现" class="headerlink" title="瀑布流的实现"></a>瀑布流的实现</h4><p><a href="https://www.pinterest.com/">pinterest</a></p>
<h4 id="JQuery动态添加元素方法"><a href="#JQuery动态添加元素方法" class="headerlink" title="JQuery动态添加元素方法"></a>JQuery动态添加元素方法</h4><table>
<thead>
<tr>
<th>append()</th>
<th>在父级最后追加一个子元素</th>
</tr>
</thead>
<tbody><tr>
<td>appendTo()</td>
<td>在父级最后追加一个子元素</td>
</tr>
<tr>
<td>prepend()</td>
<td>在父级最前面追加一个子元素</td>
</tr>
<tr>
<td>prependTo()</td>
<td>在父级最前面追加一个子元素</td>
</tr>
<tr>
<td>after()</td>
<td>在当前元素之后追加（是同级关系）</td>
</tr>
<tr>
<td>before()</td>
<td>在当前元素之前追加（是同级关系）</td>
</tr>
<tr>
<td>insertAfter()</td>
<td>将元素追加到指定对象的后面（是同级关系</td>
</tr>
<tr>
<td>insertBefore()</td>
<td>将元素追加到指定对象的前面（是同级关系）</td>
</tr>
<tr>
<td>appendChild()</td>
<td>在节点的最后追加子元素</td>
</tr>
</tbody></table>
<h4 id="监听动态生成的元素"><a href="#监听动态生成的元素" class="headerlink" title="监听动态生成的元素"></a>监听动态生成的元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听下拉框改变事件</span><br><span class="line">$(&quot;.singleGame&quot;).on(&quot;change&quot;, &quot;select.game-select&quot;, function () &#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="JS高级进阶（作用域，闭包，递归，this关键字）"><a href="#JS高级进阶（作用域，闭包，递归，this关键字）" class="headerlink" title="JS高级进阶（作用域，闭包，递归，this关键字）"></a>JS高级进阶（作用域，闭包，递归，this关键字）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//理解闭包</span><br><span class="line">function setup(x) &#123;</span><br><span class="line">    var i =0 ;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">        return x[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var next = setup([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">console.log(next());    //i 输出 0  返回 a</span><br><span class="line">console.log(next());    //i 输出 1  返回 b</span><br><span class="line">console.log(next());    //i 输出 2  返回 c</span><br><span class="line"></span><br><span class="line">//自调用</span><br><span class="line">var fun = (function setup(x) &#123;</span><br><span class="line">    var i =0 ;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">        return x[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]));   //传参</span><br><span class="line"></span><br><span class="line">console.log(fun);   //输出返回的函数体</span><br><span class="line">console.log(fun()); //i 输出 0  返回 a</span><br><span class="line"></span><br><span class="line">//递归  自己调自己   (用递归很容易写成死循环)</span><br><span class="line">function fact(num) &#123;</span><br><span class="line">    if(num &lt;= 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return num * fact(num - 1);</span><br><span class="line">        // 执行过程：</span><br><span class="line">        // 4*f(3);</span><br><span class="line">        // 4*3*f(2);</span><br><span class="line">        // 4*3*2*f(1);</span><br><span class="line">        // 4*3*2*1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(fact(4));   //24</span><br></pre></td></tr></table></figure>

<h4 id="js如何验证type为file的input是否为空"><a href="#js如何验证type为file的input是否为空" class="headerlink" title="js如何验证type为file的input是否为空"></a><a href="https://zhidao.baidu.com/question/195410818.html">js如何验证type为file的input是否为空</a></h4><p>1：js判断的话，直接判断input的value，如果value的长度为0，那么就空如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;看看file是不是空&quot; onclick=&quot;alert(file.value.length);&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>，如果值大于0，则不为空。<br>2：使用Jquery的话(前提：你要导入Jquery)，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;alert($(&#x27;#file&#x27;).val().length)&quot; value=&quot;click&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="5-2-3-1数据类型数据判断"><a href="#5-2-3-1数据类型数据判断" class="headerlink" title="5:2,3:1数据类型数据判断"></a>5:2,3:1数据类型数据判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(var i = 0; i&lt; arr.length; i++) &#123;</span><br><span class="line">    console.log(&#x27;arr[i]&#x27;);</span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">    console.log(arr[i].indexOf(&#x27;:&#x27;));</span><br><span class="line">    // ,前后数据不为空的情况下，为空，不做判断，</span><br><span class="line">    if(arr[i] !== &#x27;&#x27;) &#123;</span><br><span class="line">        // 没有：---格式不对</span><br><span class="line">        if(arr[i].indexOf(&#x27;:&#x27;) === -1) &#123;</span><br><span class="line">            console.log(&#x27;第1个判断&#x27;)</span><br><span class="line">            return &#x27;请填写数字及英文字符&lt;strong&gt;【&#x27; + txt + &#x27;】&lt;/strong&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        var arr2 = arr[i].split(&quot;:&quot;);</span><br><span class="line">        for(var j = 0; j &lt; arr2.length; j++) &#123;</span><br><span class="line">            console.log(&#x27;第2个判断&#x27;)</span><br><span class="line">            console.log(&#x27;arr2[j]&#x27;)</span><br><span class="line">            console.log(arr2[j])</span><br><span class="line">            // 判断是否为数字或其一为空</span><br><span class="line">            if(isNaN(arr2[j]) || arr2[j] === &#x27;&#x27;) &#123;</span><br><span class="line">                return &#x27;请填写数字及英文字符&lt;strong&gt;【&#x27; + txt + &#x27;】&lt;/strong&gt;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js控制当滚动条到最底部时隐藏某个div"><a href="#js控制当滚动条到最底部时隐藏某个div" class="headerlink" title="js控制当滚动条到最底部时隐藏某个div"></a><a href="https://zhidao.baidu.com/question/454586791163562165.html">js控制当滚动条到最底部时隐藏某个div</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt; &lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123;margin:0;height:2000px;&#125;</span><br><span class="line">div&#123;height:500px;width:500px;background:#f00;margin:0 auto;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.onscroll=function()&#123;</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop||document.body.scrollTop;</span><br><span class="line">    if(scrollTop&gt;=document.body.offsetHeight-document.documentElement.clientHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(&quot;div1&quot;).style.display=&quot;none&quot;;  </span><br><span class="line">        alert(&quot;去看看是不是DIV不见了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">    this is a div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="拷贝数组，不影响原数组"><a href="#拷贝数组，不影响原数组" class="headerlink" title="拷贝数组，不影响原数组"></a>拷贝数组，不影响原数组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var cols = getIndexs()</span><br><span class="line">, colsOld = $.extend(true,[],cols);// 不受影响的表头</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><a href="https://so.csdn.net/so/search?q=slice&spm=1001.2101.3001.7020">slice</a>()</h3><p>返回一个索引和另一个索引之间的数据(不改变原数组),slice(start,end)有两个参数(start必需,end选填),都是索引,返回值不包括end</p>
<p><a href="https://blog.csdn.net/qq_43627981/article/details/99625825/">js截取数组slice(),splice()两种方法</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOs相关笔记</title>
    <url>/2021/10/01/MacOs%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Mac系统——iOS环境"><a href="#Mac系统——iOS环境" class="headerlink" title="Mac系统——iOS环境"></a>Mac系统——iOS环境</h4><h5 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h5><p>开源安装脚本库：<a href="https://gitee.com/cunkai/HomebrewCN">https://gitee.com/cunkai/HomebrewCN</a></p>
<p>复制以下内容到你的终端：<br>intel芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>回车运行，按照提示运行下去就可以了</p>
<p>错误<br>做完上面的傻瓜式操作，理论上就OK了，但是我这边出现了安装完后用不了的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<p>经过检查后发现，是因为M1芯片的包安装位置不在是以前的<code>/usr/local/</code><br>而是<code>/opt/homebrew</code>，所以要将配置文件里的环境变量改过来</p>
<p>1、首先进入根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<p>2、创建.zshrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch .zshrc</span><br></pre></td></tr></table></figure>

<p>3、打开文件进行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure>

<p>4、如果有旧的环境就修改，没有就新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/opt/homebrew/bin:$PATH</span><br><span class="line">export PATH=/opt/homebrew/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>5、保存<br>使用<code>command + s</code><br>6、生效环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source .zshrc</span><br></pre></td></tr></table></figure>

<p>7、测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew -v</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://blog.csdn.net/sinat_38184748/article/details/114115441">MacOs M1安装Homebrew 在国内最简单方法</a>——使用这个安装成功</p>
<p><a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）（Mac &amp; Linux）</a></p>
<p>旧文章：<a href="https://blog.csdn.net/sinat_38184748/article/details/99450330?spm=1001.2014.3001.5502">macOS安装Homebrew太慢，换用清华镜像</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>


<h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</span><br></pre></td></tr></table></figure>





<h4 id="安装watchman"><a href="#安装watchman" class="headerlink" title="安装watchman"></a>安装watchman</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>

<h5 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_NO_INSTALL_CLEANUP=TRUE</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/126640559?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166458144816782417056210%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166458144816782417056210&biz_id=&utm_medium=distribute.pc_search_result.none-task-code-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126640559-0-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=Disable%20this%20behaviour%20by%20setting%20HOMEBREW_NO_INSTALL_CLEANUP.%20Hide%20these%20hints%20with%20HOMEBREW_NO_ENV_HINTS%20(see%20%60man%20brew%60).">Mac系列之：Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW</a></p>
<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watchman -v</span><br></pre></td></tr></table></figure>

<h4 id="安装cocoapods"><a href="#安装cocoapods" class="headerlink" title="安装cocoapods"></a>安装cocoapods</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>







<p>镜像地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry 镜像地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ---- https://registry.npmjs.org/</span><br><span class="line">cnpm --- http://r.cnpmjs.org/</span><br><span class="line">taobao - https://registry.npmmirror.com</span><br><span class="line">edunpm - http://registry.enpmjs.org/</span><br><span class="line">eu ----- http://registry.npmjs.eu/</span><br><span class="line">au ----- http://registry.npmjs.org.au/</span><br><span class="line">sl ----- http://npm.strongloop.com/</span><br><span class="line">nj ----- https://registry.nodejitsu.com/</span><br><span class="line">pt ----- http://registry.npmjs.pt/</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>切换回淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>

<p>先用淘宝镜像安装项目，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure>

<p><code>安装不了cocoapods</code></p>
<p>切换到<code>https://registry.npmmirror.com/</code></p>
<p>切换到项目目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AwesomeProject</span><br></pre></td></tr></table></figure>

<p>再安装cocoapods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i cocoapods</span><br></pre></td></tr></table></figure>



<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.19</span><br><span class="line">warning ../../../../../package.json: No license field</span><br><span class="line">$ react-native run-ios</span><br><span class="line">info Found Xcode project &quot;AwesomeProject.xcodeproj&quot;</span><br><span class="line">info Building (using &quot;xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A&quot;)</span><br><span class="line">error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening AwesomeProject.xcodeproj.</span><br><span class="line">Command line invocation:</span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A</span><br><span class="line"></span><br><span class="line">User defaults from command line:</span><br><span class="line">    IDEPackageSupportUseBuiltinSCM = YES</span><br><span class="line"></span><br><span class="line">Prepare packages</span><br><span class="line"></span><br><span class="line">Computing target dependency graph and provisioning inputs</span><br><span class="line"></span><br><span class="line">Create build description</span><br><span class="line">Build description signature: bf2f29ad51ca6266b44cbb8d643576b3</span><br><span class="line">Build description path: /Users/yangyanyi/Library/Developer/Xcode/DerivedData/AwesomeProject-fgqiuteczcwroxgbdakmwcrknckt/Build/Intermediates.noindex/XCBuildData/bf2f29ad51ca6266b44cbb8d643576b3-desc.xcbuild</span><br><span class="line"></span><br><span class="line">note: Building targets in dependency order</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Copy Pods Resources&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Embed Pods Frameworks&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Bundle React Native code and images&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Start Packager&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line"></span><br><span class="line">** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://lightrun.com/answers/facebook-react-native-fresh-react-native-066-app-does-not-build-on-xcode-13-ios-116-compiler-error-on-sysuioo">Fresh react-native (0.66) app does not build on XCode 13, iOS 11.6: compiler error on SysUio.o</a>  </p>
<p>参考：<a href="https://stackoverflow.com/questions/55725042/error-failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-wit">error Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65. i can not Run my Project</a></p>
<p>原因可能是没有安装cocoapods成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ios </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<p>然后报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing CocoaAsyncSocket</span><br><span class="line">[!] /usr/local/bin/git clone https://github.com/robbiehanson/CocoaAsyncSocket.git /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt --template= --single-branch --depth 1 --branch 7.6.5</span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/robbiehanson/CocoaAsyncSocket.git/&#x27;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>(可能也不需要做下面这个设置，每次报以上错误的时候，一直pod install，直到安装成功)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://stackoverflow.com/questions/48987512/ssl-connect-ssl-error-syscall-in-connection-to-github-com443">SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</a></p>
<h4 id="hermes-engine的安装问题"><a href="#hermes-engine的安装问题" class="headerlink" title="hermes-engine的安装问题"></a>hermes-engine的安装问题</h4><p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing hermes-engine</span><br><span class="line">[!] /usr/bin/curl -f -L -o /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-67147-8lkp1c/file.tgz https://github.com/facebook/react-native/releases/download/v0.70.1/hermes-runtime-darwin-v0.70.1.tar.gz --create-dirs --netrc-optional --retry 2 -A &#x27;CocoaPods/1.11.3 cocoapods-downloader/1.5.1&#x27;</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0  496M    0 1343k    0     0   1299      0   4d 15h  0:17:38   4d 14h   894</span><br><span class="line">curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个问题折腾了好久好久好久好久……</p>
</blockquote>
<h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ol>
<li>打开一个终端，先执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&#x27;your.host:port&#x27; //your.host:port我的是127.0.0.1:1087</span><br><span class="line">export https_proxy=&#x27;your.host:port&#x27; your.host:port我的是127.0.0.1:1087</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>这个终端界面转到项目目录下，再执行pod install –verbose</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install --verbose</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在安装命令添加参数<code>--verbose</code>看打印详细信息</p>
</blockquote>
<p>参考：<a href="https://blog.csdn.net/BUG_delete/article/details/110133505?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&utm_relevant_index=1">Cocoapods安装私有库问题</a></p>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>然后自动执行<code>Generating Pods project</code></p>
<p>然后自动执行<code>Integrating client project</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Please close any current Xcode sessions and use `myapp.xcworkspace` for this project from now on.</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp` (`myapp.xcodeproj` project)</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp-myappTests` (`myapp.xcodeproj` project)</span><br><span class="line">  - Running post integrate hooks</span><br><span class="line">  - Writing Lockfile in `Podfile.lock`</span><br><span class="line">  - Writing Manifest in `Pods/Manifest.lock`</span><br><span class="line">  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only performed in repo update</span><br><span class="line"></span><br><span class="line">-&gt; Pod installation complete! There are 59 dependencies from the Podfile and 49 total pods installed.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据终端提示，如果想要使用刚添加的第三方库，必须打开<code>MyApp.xcworkspace</code>，而非之前的<code>MyApp.xcodeProj</code>。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/c19df91997fd">CocoaPods的安装与使用</a></p>
<h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn ios </span><br><span class="line">或</span><br><span class="line">yarn react-native run-ios</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo insecure &gt;&gt; ~/.curlrc然后 pod install</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">1.删除项目依赖包以及 yarn 缓存</span><br><span class="line">rm -rf node_modules &amp;&amp; yarn cache clean</span><br><span class="line">2.重新装包</span><br><span class="line">yarn install</span><br><span class="line">3.清除 React-Native 缓存</span><br><span class="line">rm -rf ~/.rncache</span><br></pre></td></tr></table></figure>



<p>如果iOS使用的是Mac M1的架构，可能还会遇到Cocoapods 的一些兼容问题。如果在安装 pods依赖时出现问题，可以尝试运行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo arch -x86_64 gem install ffi</span><br><span class="line">arch -x86_64 pod install</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/263303.htm">详解React Native项目中启用Hermes引擎</a></p>
<p><a href="https://blog.csdn.net/u010208471/article/details/92068560">解决 React-Native mac 运行报错 error Failed to build iOS project. We ran “xcodebuild” command but it exite</a></p>
<p><a href="https://developer.apple.com/forums/thread/682927">s</a></p>
<p><a href="https://cloud.tencent.com/developer/ask/sof/514376">更新到最新版本RN 0.64.0后，React本机应用程序将无法运行</a></p>
<p><a href="https://medium.com/alameda-dev/installing-react-native-mapbox-navigation-in-ios-e35d43c5987a">Installing React Native with Mapbox Navigation in iOS</a></p>
<p>参考：<a href="https://blog.csdn.net/LIUXIAOXIAOBO/article/details/82894101">[!] Error installing Fabric. /usr/bin/curl -f -L -o /var/folders</a></p>
<p>参考：<a href="https://www.jianshu.com/p/b079d6566c67">【解决】[!] Error installing Fabric. [!]/usr/bin/curl -f -L -o /var/folders</a></p>
<p><a href="https://blog.csdn.net/u012477117/article/details/122241972">Pod Error installing Bugly</a></p>
<p><a href="http://www.caotama.com/670255.html">pod install 报错 :error installing AMapFoundation ,iOS 大佬们来看一下</a></p>
<p><a href="https://stackoverflow.com/questions/65458086/failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-with-erro">Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65</a></p>
<p><a href="https://blog.csdn.net/qingpingguo12/article/details/126137315">镜像切换</a></p>
<p><a href="https://blog.csdn.net/CaptainJava/article/details/109132783">Mac全自动安装brew一键配置国内镜像源</a></p>
<p><a href="https://blog.csdn.net/hh680821/article/details/104936180?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166457782716782417034485%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166457782716782417034485&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104936180-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=homebrew%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Mac HomeBrew国内镜像安装方法</a></p>
<p><a href="https://github.com/yanue/V2rayU/releases/tag/3.3.0">科学上网</a></p>
<p>淘宝镜像：<a href="https://mirrors.aliyun.com/homebrew/?spm=a2c6h.13651104.0.0.1fc17608pdL2JD">https://mirrors.aliyun.com/homebrew/?spm=a2c6h.13651104.0.0.1fc17608pdL2JD</a></p>
<h4 id="Mac系统下——Android-环境"><a href="#Mac系统下——Android-环境" class="headerlink" title="Mac系统下——Android 环境"></a><a href="https://www.reactnative.cn/docs/environment-setup">Mac系统下——Android 环境</a></h4><p>Java Development Kit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew install --cask zulu11</span><br></pre></td></tr></table></figure>

<p>React Native 需要 Java Development Kit [JDK] 11。你可以在命令行中输入 <code>javac -version</code>（请注意是 javac，不是 java）来查看你当前安装的 JDK 版本</p>
<h5 id="3-配置-ANDROID-SDK-ROOT-环境变量"><a href="#3-配置-ANDROID-SDK-ROOT-环境变量" class="headerlink" title="3. 配置 ANDROID_SDK_ROOT 环境变量"></a>3. 配置 ANDROID_SDK_ROOT 环境变量<a href="https://www.reactnative.cn/docs/environment-setup#3-%E9%85%8D%E7%BD%AE-android_sdk_root-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"></a></h5><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。</p>
<p>具体的做法是把下面的命令加入到 shell 的配置文件中。如果你的 shell 是 zsh，则配置文件为<code>~/.zshrc</code>，如果是 bash 则为<code>~/.bash_profile</code>（可以使用<code>echo $0</code>命令查看你所使用的 shell。）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚</span></span><br><span class="line">export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/emulator</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools</span><br></pre></td></tr></table></figure>



<blockquote>
<p>译注：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在 Finder 中是隐藏的，并且这个文件有可能并不存在。可在终端下使用<code>vi ~/.zshrc</code>命令创建或编辑。如不熟悉 vi 操作，请点击<a href="http://www.eepw.com.cn/article/48018.htm">这里</a>学习。</p>
</blockquote>
<p>使用<code>source $HOME/.zshrc</code>命令来使环境变量设置立即生效（否则重启后才生效）。可以使用<code>echo $ANDROID_SDK_ROOT</code>检查此变量是否已正确设置。</p>
<blockquote>
<p>请确保你正确指定了 Android SDK 路径。你可以在 Android Studio 的”Preferences”菜单中查看 SDK 的真实路径，具体是<strong>Appearance &amp; Behavior</strong> → <strong>System Settings</strong> → <strong>Android SDK</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MiniUI-笔记</title>
    <url>/2019/08/16/MiniUI-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.miniui.com/">MiniUI官网</a></p>
<h4 id="表单初始化"><a href="#表单初始化" class="headerlink" title="表单初始化"></a>表单初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;form id=&quot;fa&quot; name=&quot;fa&quot; autocomplete=&quot;off&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">function init()&#123;</span><br><span class="line">	mini.parse();</span><br><span class="line">	form = new mini.Form(&quot;fa&quot;);	</span><br><span class="line">&#125;</span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">	init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>是否显示分页：<code>showPager=&quot;true&quot;</code></p>
<p>分页显示条数：<code>pageSize=&quot;20&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">    &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div field=&quot;created_at&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;申请时间&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;real_name&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;申请人（代理）&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;name&quot; width=&quot;200&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;公司名称&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;money&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;当次申请金额&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;pledge&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;当次押金&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;agency_status_name&quot; width=&quot;60&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_agency_status_name&quot;&gt;申请人状态&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;remit_time&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;打款时间&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;remit_type_name&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;打款方式&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;status_name&quot; width=&quot;60&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_status_name&quot;&gt;打款状态&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer&quot;&gt;操作&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>





<h4 id="输入框提示语-类似placeholder"><a href="#输入框提示语-类似placeholder" class="headerlink" title="输入框提示语-类似placeholder"></a>输入框提示语-类似placeholder</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">emptyText=&quot;请输入区服&quot;</span><br></pre></td></tr></table></figure>

<h4 id="表单元素必填及提示语"><a href="#表单元素必填及提示语" class="headerlink" title="表单元素必填及提示语"></a>表单元素必填及提示语</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">required=&quot;true&quot;</span><br><span class="line">requiredErrorText=&quot;区服不能为空&quot;</span><br></pre></td></tr></table></figure>

<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><ol>
<li><h5 id="自带验证方法"><a href="#自带验证方法" class="headerlink" title="自带验证方法"></a>自带验证方法</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a class=&quot;mini-button submit-button&quot;onclick=&quot;SubmitData();&quot;&gt;提交&lt;/a&gt;  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 提交事件</span><br><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">	form.validate();   // 框架自带验证表单的方法</span><br><span class="line">	if (form.isValid() == false) return false;   </span><br><span class="line">	</span><br><span class="line">	....// 其他代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  </span><br><span class="line">class=&quot;mini-textbox&quot; </span><br><span class="line">name=&quot;server_id&quot;  </span><br><span class="line">required=&quot;true&quot; </span><br><span class="line">requiredErrorText=&quot;区服不能为空&quot; </span><br><span class="line">value=&quot;&quot;</span><br><span class="line">style=&quot;width:200px;&quot; </span><br><span class="line">emptyText=&quot;请输入区服&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SubmitData() &#123;</span><br><span class="line">    var form_validate = true;</span><br><span class="line"></span><br><span class="line">    // 错误信息内容</span><br><span class="line">    var errorMsg = [&quot;提示：区间比例必须连续！&quot;, &quot;提示：区间范围错误！&quot;, &quot;提示：区间比例必须在0-100以内！&quot;, &quot;提示：区间必须输入0及正整数！&quot;, &quot;提示：区间比例必须输入0及正整数！&quot;, &quot;提示：请完整填写区间！&quot;, &quot;提示：请填写区间比例！&quot;];</span><br><span class="line">    //错误提示函数</span><br><span class="line">    function showError(msg, el) &#123;</span><br><span class="line">        var errorIcon = &#x27;&lt;span class=&quot;mini-errorIcon&quot; title=&quot;&#x27; + msg + &#x27;&quot;&gt;&lt;/span&gt;&#x27;;</span><br><span class="line">        var hasError = el.find(&quot;.mini-errorIcon&quot;).length;</span><br><span class="line">        if(hasError != 1) &#123;</span><br><span class="line">            el.append(errorIcon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	.......</span><br><span class="line">    if(end_val != &quot;&quot; || percent_val != &quot;&quot;) &#123;</span><br><span class="line">        showError(errorMsg[5], $(this));</span><br><span class="line">        form_validate = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(form_validate == false) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	$.post(&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;, $(&quot;form&quot;).serialize(), function(response) &#123;</span><br><span class="line">		if (response.success)</span><br><span class="line">		&#123;</span><br><span class="line">			window.location.href = &quot;&#123;:U(&#x27;index&#x27;)&#125;&quot;;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			alert(response.msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,&quot;json&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="表单验证规则总结"><a href="#表单验证规则总结" class="headerlink" title="表单验证规则总结"></a><a href="http://www.miniui.com/demo/form/rules.html">表单验证规则总结</a></h4><h4 id="miniui-结束日期不能小于起始日期"><a href="#miniui-结束日期不能小于起始日期" class="headerlink" title="miniui 结束日期不能小于起始日期"></a>miniui 结束日期不能小于起始日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.HTML代码：</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">　　&lt;th class=&quot;nui-form-label&quot; style=&quot;width:15%;&quot;&gt;&lt;label for=&quot;report.startDate$text&quot; &gt;起始日期：&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">　　&lt;td style=&quot;width:35%;&quot; &gt;</span><br><span class="line">　　&lt;input id=&quot;report.startDate&quot; class=&quot;nui-datepicker&quot; style=&quot;width: 95%;&quot; name=&quot;report.startDate&quot; required=&quot;true&quot;/&gt;</span><br><span class="line">　　&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　&lt;th class=&quot;nui-form-label&quot; style=&quot;width:15%;&quot;&gt;&lt;label for=&quot;report.productCode$text&quot;&gt;结束日期：&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">　　&lt;td style=&quot;width:35%;&quot;&gt;</span><br><span class="line">　　&lt;input id=&quot;report.endDate&quot; class=&quot;nui-datepicker&quot; name=&quot;report.endDate&quot; style=&quot;width: 95%;&quot; required=&quot;true&quot; onvaluechanged=&quot;onValueChanged&quot;/&gt;</span><br><span class="line">　　&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.JS代码：</span><br><span class="line"></span><br><span class="line">function onValueChanged(e)&#123;</span><br><span class="line">　　var startDate = mini.get(&quot;report.startDate&quot;).getFormValue();</span><br><span class="line">　　var endDate = e.value;</span><br><span class="line">　　if(startDate!=&quot;&quot;)&#123;</span><br><span class="line">	　　startDate=startDate.substring(0,4) + startDate.substring(5,7) + startDate.substring(8,10);</span><br><span class="line">	&#125;</span><br><span class="line">　　if(endDate!=&quot;&quot;)&#123;</span><br><span class="line">	　　endDate=endDate.substring(0,4) + endDate.substring(5,7) + endDate.substring(8,10);</span><br><span class="line">	&#125;</span><br><span class="line">　　if(startDate&gt;endDate)&#123;</span><br><span class="line">	　　e.isValid=false;</span><br><span class="line">		mini.alert(error);</span><br><span class="line">		mini.get(end).setValue(&quot;&quot;);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="日期插件-加上时分秒"><a href="#日期插件-加上时分秒" class="headerlink" title="日期插件-加上时分秒"></a>日期插件-加上时分秒</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">format=&quot;yyyy-MM-dd H:mm:ss&quot;  showTime=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传按钮"><a href="#文件上传按钮" class="headerlink" title="文件上传按钮"></a>文件上传按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input class=&quot;mini-htmlfile&quot; id=&quot;license&quot; name=&quot;license&quot; buttonText=&quot;浏览文件&quot; limitType=&quot;*.bmp;*.gif;*.png;*.jpg;*.jpeg&quot; required=&quot;true&quot; style=&quot;width:250px;&quot; onfileselect=&quot;fileChange(this)&quot;/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var inputFile = $(&quot;input:file&quot;).filter(&quot;:visible&quot;);</span><br><span class="line">$.ajaxFileUpload(&#123;</span><br><span class="line">    url: &quot;&#123;:U(&#x27;&#x27;)&#125;&quot;,</span><br><span class="line">    secureuri: false,</span><br><span class="line">    fileElementId: inputFile,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    data: data,</span><br><span class="line">    success: function (response, status) &#123;</span><br><span class="line">        if (response.success)&#123;</span><br><span class="line">            window.location.href = &quot;&#123;:U(&#x27;index&#x27;)&#125;&quot;;</span><br><span class="line">        &#125; else if(response.msg.file_errors) &#123;</span><br><span class="line">            var obj = response.msg.file_errors;</span><br><span class="line">            .....</span><br><span class="line"></span><br><span class="line">        &#125;else if(response.msg.status_error) &#123;</span><br><span class="line">           .....</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            alert(response.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: function () &#123;</span><br><span class="line">        $(&quot;#fa input:file&quot;).filter(&quot;:visible&quot;).each(function(i, e)&#123;</span><br><span class="line">            e.replaceWith(inputFile[i]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-按钮的文字"><a href="#文件上传-按钮的文字" class="headerlink" title="文件上传-按钮的文字"></a>文件上传-按钮的文字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buttonText=&quot;浏览文件&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-文件类型限制"><a href="#文件上传-文件类型限制" class="headerlink" title="文件上传-文件类型限制"></a>文件上传-文件类型限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limitType=&quot;*.bmp;*.gif;*.png;*.jpg;*.jpeg&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-上传时的自定义验证"><a href="#文件上传-上传时的自定义验证" class="headerlink" title="文件上传-上传时的自定义验证"></a>文件上传-上传时的自定义验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input class=&quot;mini-htmlfile&quot; id=&quot;package_file&quot; name=&quot;package_file&quot; buttonText=&quot;浏览...&quot; limitType=&quot;*.apk;*.ipa&quot; onvalidation=&quot;fileValidation&quot; style=&quot;width:250px;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">function fileValidation(e) &#123;</span><br><span class="line">	if (e.value != &#x27;&#x27; &amp;&amp; e.isValid) &#123;</span><br><span class="line">		var fileName = getFileName(e.value);</span><br><span class="line">		var platform = $(&quot;input[name=&#x27;type&#x27;]:checked&quot;).val();</span><br><span class="line"></span><br><span class="line">		var uPattern = /^[a-z0-9A-Z._]+$/;</span><br><span class="line">		if(! uPattern.test(fileName)) &#123;</span><br><span class="line">			e.errorText = &#x27;母包文件名只能包含字母、数字、下横线&quot;_&quot;、点&quot;.&quot;&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		var arr = fileName.split(&quot;.&quot;);</span><br><span class="line">		if(platform == 1 &amp;&amp; arr[arr.length-1] != &quot;apk&quot;) &#123;</span><br><span class="line">			e.errorText = &#x27;上传文件格式为：*.apk&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line">		if(platform == 2 &amp;&amp; arr[arr.length-1] != &quot;ipa&quot;) &#123;</span><br><span class="line">			e.errorText = &#x27;上传文件格式为：*.ipa&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取表单数据"><a href="#获取表单数据" class="headerlink" title="获取表单数据"></a>获取表单数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = form.getData(true);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">	form.validate();</span><br><span class="line">	if (form.isValid() == false) return false;</span><br><span class="line"></span><br><span class="line">	var data= form.getData(true);</span><br><span class="line">	$.post(&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;, data, function(response) &#123;</span><br><span class="line">		if (response.success)</span><br><span class="line">		&#123;</span><br><span class="line">			alert(response.msg);</span><br><span class="line">			form.reset();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">            alert(response.msg);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,&quot;json&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.reset();</span><br></pre></td></tr></table></figure>



<h4 id="传多个数据"><a href="#传多个数据" class="headerlink" title="传多个数据"></a>传多个数据</h4><p>name值使用<code>[]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input name=&quot;start[]&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="渲染表格数据-grid-load-data"><a href="#渲染表格数据-grid-load-data" class="headerlink" title="渲染表格数据-grid.load(data);"></a>渲染表格数据-grid.load(data);</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">    &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line">        &lt;div field=&quot;money&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;退款金额&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;time&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;退款时间&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    mini.parse();</span><br><span class="line">    grid = mini.get(&quot;datagrid1&quot;);</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    </span><br><span class="line">    data.agency_id = &#123;$agency_id&#125;;</span><br><span class="line">    </span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p><code>kindeditor</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var editor;</span><br><span class="line">KindEditor.ready(function(K) &#123;</span><br><span class="line">	editor = K.create(&#x27;textarea[name=&quot;content&quot;]&#x27;, &#123;</span><br><span class="line">		resizeType : 1,</span><br><span class="line">		allowPreviewEmoticons : false,</span><br><span class="line">		allowImageUpload : false,</span><br><span class="line">		items : [</span><br><span class="line">			&#x27;source&#x27;, &#x27;fontsize&#x27;, &#x27;|&#x27;, &#x27;forecolor&#x27;, &#x27;hilitecolor&#x27;, &#x27;bold&#x27;, &#x27;italic&#x27;, &#x27;underline&#x27;,</span><br><span class="line">			&#x27;removeformat&#x27;, &#x27;|&#x27;, &#x27;justifyleft&#x27;, &#x27;justifycenter&#x27;, &#x27;justifyright&#x27;, &#x27;insertorderedlist&#x27;,</span><br><span class="line">			&#x27;insertunorderedlist&#x27;, &#x27;|&#x27;, &#x27;link&#x27;]</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // 安卓手机兼容性处理(KindEditor在移动端默认显示源码模式)</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    var isAndroid = u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Adr&#x27;) &gt; -1;</span><br><span class="line">    if(isAndroid) &#123;</span><br><span class="line">        $(&quot;.ke-outline[data-name=&#x27;source&#x27;]&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="alert弹窗"><a href="#alert弹窗" class="headerlink" title="alert弹窗"></a>alert弹窗</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mini.alert(result.msg);</span><br></pre></td></tr></table></figure>

<h4 id="复选框-全选"><a href="#复选框-全选" class="headerlink" title="复选框-全选"></a>复选框-全选</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;all_apps&quot; class=&quot;mini-checkbox&quot; readOnly=&quot;false&quot; text=&quot;全选&quot; onvaluechanged=&quot;onValueChangedAll&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;ul class=&quot;checkbox-list w60&quot;&gt;</span><br><span class="line">    &lt;foreach name=&quot;app_list&quot; item=&quot;item&quot;&gt;</span><br><span class="line">        &lt;li title=&quot;&#123;$item.app_name&#125;&quot;&gt;</span><br><span class="line">            &lt;div onValueChanged=&quot;onValueChanged&quot; id=&quot;app_check&#123;$item.app_id&#125;&quot; name=&quot;app_id[]&quot; trueValue=&quot;&#123;$item.app_id&#125;&quot; class=&quot;mini-checkbox app-check&quot; text=&quot;&#123;$item.app_name&#125;&quot; checked=&quot;&lt;if condition=&quot;in_array($item[&#x27;app_id&#x27;], $user_own_app)&quot;&gt;true&lt;else /&gt;false&lt;/if&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化全选</span><br><span class="line">isCheckAll();</span><br><span class="line">//判断是否全选</span><br><span class="line">function isCheckAll()&#123;</span><br><span class="line">    var num = 0;</span><br><span class="line">	for(var i = 0; i &lt; id_list.length; i++) &#123;</span><br><span class="line">		var obj = mini.get(id_list[i]).checked;</span><br><span class="line">		if(obj == true) &#123;</span><br><span class="line">			num +=1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//是否全选</span><br><span class="line">	if(num == id_list.length)&#123;</span><br><span class="line">		mini.get(&quot;all_apps&quot;).setChecked(true);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		mini.get(&quot;all_apps&quot;).setChecked(false);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选某个游戏</span><br><span class="line">function onValueChanged(e) &#123;</span><br><span class="line">    isCheckAll();</span><br><span class="line">&#125;</span><br><span class="line">//全选按钮</span><br><span class="line">function onValueChangedAll(e) &#123;</span><br><span class="line">	var checked = this.getChecked();</span><br><span class="line"></span><br><span class="line">	for(var i = 0; i &lt; id_list.length; i++) &#123;</span><br><span class="line">		var obj = mini.get(id_list[i]);</span><br><span class="line">		if(checked)&#123;</span><br><span class="line">			obj.setChecked(true);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			obj.setChecked(false);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输入框事件监听"><a href="#输入框事件监听" class="headerlink" title="输入框事件监听"></a><a href="http://www.miniui.com/docs/api/index.html#ui=textbox">输入框事件监听</a></h4><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">EventObject</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">valuechanged</td>
<td align="left"></td>
<td align="left">值改变时发生</td>
</tr>
<tr>
<td align="left">validation</td>
<td align="left"></td>
<td align="left">验证时发生</td>
</tr>
<tr>
<td align="left">enter</td>
<td align="left"></td>
<td align="left">回车时发生</td>
</tr>
<tr>
<td align="left">keydown</td>
<td align="left"></td>
<td align="left">键盘按下时发生</td>
</tr>
<tr>
<td align="left">keyup</td>
<td align="left"></td>
<td align="left">键盘按起时发生</td>
</tr>
<tr>
<td align="left">focus</td>
<td align="left"></td>
<td align="left">获取焦点时发生</td>
</tr>
<tr>
<td align="left">blur</td>
<td align="left"></td>
<td align="left">失去焦点时发生</td>
</tr>
</tbody></table>
<p><code>注意：使用时，需要加上on</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onblur=&quot;onValueChanged&quot;</span><br></pre></td></tr></table></figure>

<h4 id="设置表单的值"><a href="#设置表单的值" class="headerlink" title="设置表单的值"></a>设置表单的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  class=&quot;mini-textbox&quot; name=&quot;game_id&quot; id=&quot;game_id&quot; required=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// mini.get(ID值).setValue(str)</span><br><span class="line">mini.get(&#x27;game_id&#x27;).setValue(&#x27;7000,7001&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="1-60的整数的验证"><a href="#1-60的整数的验证" class="headerlink" title="1-60的整数的验证"></a>1-60的整数的验证</h4><p><code>vtype=&quot;int;range:1,60&quot;</code>, vtype中可以填写多个验证规则，用<code>;</code>隔开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  class=&quot;mini-textbox&quot; name=&quot;act_days&quot; vtype=&quot;int;range:1,60&quot; intErrorText=&quot;请填写1-60的正整数&quot; rangeErrorText=&quot;请填写1-60的正整数&quot; required=&quot;true&quot; requiredErrorText=&quot;活动天数不能为空&quot; value=&quot;&quot; style=&quot;width:200px;&quot; emptyText=&quot;请输入活动天数&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.miniui.com/demo/form/rules.html">表单验证规则总结</a></p>
<p><a href="http://www.miniui.com/docs/api/index.html#ui=textbox">Properties</a></p>
<h4 id="自定义表格里面的内容"><a href="#自定义表格里面的内容" class="headerlink" title="自定义表格里面的内容"></a>自定义表格里面的内容</h4><p>使用<code>renderer</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;mini-fit&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">        &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line">			.......</span><br><span class="line">            &lt;div field=&quot;&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_package_upload&quot;&gt;上传母包&lt;/div&gt;</span><br><span class="line">            &lt;div field=&quot;&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer&quot;&gt;操作&lt;/div&gt;</span><br><span class="line">            .......</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 上传母包</span><br><span class="line">function onActionRenderer_package_upload(e) &#123;</span><br><span class="line">    var grid      = e.sender;</span><br><span class="line">    var record    = e.record;</span><br><span class="line">    </span><br><span class="line">    var app_id    = record.app_id;</span><br><span class="line">    var app_package_exists = record.app_package_exists;</span><br><span class="line">    </span><br><span class="line">    var package_edit = &#x27;&#123;$access[&#x27;package_edit&#x27;]&#125;&#x27;;</span><br><span class="line">    if (package_edit) &#123;</span><br><span class="line">    	if(app_package_exists == 1)&#123;</span><br><span class="line">    		return &#x27;&lt;span class=&quot;pointer&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;jump(\&#x27;&#123;:U(&#x27;package_edit&#x27;)&#125;/app_id/&#x27;+app_id+&#x27;\&#x27;)&quot;&gt;重新上传&lt;/span&gt;&#x27;;</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		return &#x27;&lt;span class=&quot;pointer&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;jump(\&#x27;&#123;:U(&#x27;package_edit&#x27;)&#125;/app_id/&#x27;+app_id+&#x27;\&#x27;)&quot;&gt;+&lt;/span&gt;&#x27;;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="行内写JavaScript-跳转"><a href="#行内写JavaScript-跳转" class="headerlink" title="行内写JavaScript-跳转"></a>行内写JavaScript-跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=\&quot;javascript:edit(&quot; + record.id + &quot;);\&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">function edit(id)</span><br><span class="line">&#123;</span><br><span class="line">	window.location.replace(&quot;&#123;:U(&#x27;HbSetting/edit&#x27;)&#125;&quot; + &#x27;/id/&#x27; + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function timeForm(e)</span><br><span class="line">&#123;</span><br><span class="line">	if (e.value != &#x27;&#x27; ) &#123;</span><br><span class="line">		date = new Date(e.value);</span><br><span class="line">	    return date.Format(&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		return e.value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">Date.prototype.Format =  function (fmt) &#123;  // author: meizz </span><br><span class="line">    var o = &#123;</span><br><span class="line">       &quot;M+&quot;:  this.getMonth() + 1,  // 月份 </span><br><span class="line">       &quot;d+&quot;:  this.getDate(),  // 日 </span><br><span class="line">       &quot;h+&quot;:  this.getHours(),  // 小时 </span><br><span class="line">       &quot;m+&quot;:  this.getMinutes(),  // 分 </span><br><span class="line">       &quot;s+&quot;:  this.getSeconds(),  // 秒 </span><br><span class="line">       &quot;q+&quot;: Math.floor(( this.getMonth() + 3) / 3),  // 季度 </span><br><span class="line">       &quot;S&quot;:  this.getMilliseconds()  // 毫秒 </span><br><span class="line">   &#125;;</span><br><span class="line">    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, ( this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));</span><br><span class="line">    for ( var k  in o)</span><br><span class="line">    if ( new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));</span><br><span class="line">    return fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表格页面的初始化"><a href="#表格页面的初始化" class="headerlink" title="表格页面的初始化"></a>表格页面的初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var grid;</span><br><span class="line">var games = &#123;$games&#125;;</span><br><span class="line"></span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">    init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    mini.parse();</span><br><span class="line">    grid = mini.get(&quot;datagrid1&quot;);</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function search()</span><br><span class="line">&#123;</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    form.validate();</span><br><span class="line">    if (form.isValid() == false) return;</span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表单页面的初始化"><a href="#表单页面的初始化" class="headerlink" title="表单页面的初始化"></a>表单页面的初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var form;</span><br><span class="line">function init()&#123;</span><br><span class="line">	mini.parse();</span><br><span class="line">	form = new mini.Form(&quot;fa&quot;);	</span><br><span class="line">&#125;</span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">    init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 表单验证</span><br><span class="line">// 提交事件</span><br><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">    form.validate();</span><br><span class="line">    // form.isValid()   验证是否通过</span><br><span class="line">    </span><br><span class="line">    if (form.isValid() == false)&#123;</span><br><span class="line">		return false</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	var data = $(&quot;form&quot;).serialize();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mini.open(&#123;</span><br><span class="line">    url: &quot;&#123;:U(&#x27;batch_check&#x27;)&#125;?id=&quot;+id + &quot;&amp;lock_status=&quot; + status,</span><br><span class="line">    title: &quot;审核信息&quot;, </span><br><span class="line">    width: 800, </span><br><span class="line">    height: 380,</span><br><span class="line">    onload: function (data) &#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    ondestroy: function (action) &#123;</span><br><span class="line">        if (action==&#x27;ok&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            var iframe = this.getIFrameEl();</span><br><span class="line">            var data = iframe.contentWindow.GetData();</span><br><span class="line">            data = mini.clone(data);    //必须</span><br><span class="line"></span><br><span class="line">            $.post(&quot;&#123;:U(&#x27;batch_check&#x27;)&#125;&quot;, data, function(result) &#123;</span><br><span class="line">                if (result.success == false)</span><br><span class="line">                &#123;</span><br><span class="line">                    alert(result.msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &quot;json&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        grid.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端UI框架</category>
        <category>MiniUI</category>
      </categories>
      <tags>
        <tag>MiniUI</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB相关笔记</title>
    <url>/2020/08/22/MongoDB%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="删除-MongoDB-集合中的数据"><a href="#删除-MongoDB-集合中的数据" class="headerlink" title="删除 MongoDB 集合中的数据"></a>删除 MongoDB 集合中的数据</h4>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node-Express-Mongoose</title>
    <url>/2024/03/19/Node-Express-Mongoose/</url>
    <content><![CDATA[<p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//uselNewUrlParser这个属性会在url里识别验证用户所需的db,未升级前是不需要指定的,升级到一定要指定。</span><br><span class="line">mongoose.connect(&#x27;mongodb://127.0.0.1:27017/egecms&#x27;,&#123; useNewUrlParser: true &#125;,function(err)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log( &#x27;数据库连接成功&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义数据表（集合的）映射︰注意。字段名称必须和数据库保持一致</span><br><span class="line">var UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    age:Number,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 定义model操作数据库</span><br></pre></td></tr></table></figure>

<p><code>user.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mongoose = require(&#x27;./db.js&#x27;);</span><br><span class="line">var UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    age:Number,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">module.exports=mongoose.model( &quot;User&quot;, UserSchema, &quot;user&#x27;);</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var UserModel=require(&quot;./model/user.js&quot;);</span><br><span class="line"></span><br><span class="line">UserModel.find(&#123;&#125;,function(err,docs)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(docs);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>news.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mongoose=require(&#x27;./db.js&#x27;);</span><br><span class="line"></span><br><span class="line">var NewsSchema=mongoose.Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        trim:true	//定义 mongoose模式修饰符去掉空格</span><br><span class="line">    &#125;,</span><br><span class="line">    author: String,</span><br><span class="line">    pic:String,</span><br><span class="line">    content:String,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports=mongoose.model(&#x27;News&#x27;,NewsSchema, &#x27;news&#x27;);</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.time(&#x27;user&#x27;);</span><br><span class="line">var UserModel=require(&quot;./model/user.js&quot;);</span><br><span class="line">console.timeEnd(&#x27;user&#x27;);</span><br><span class="line">console.time(&#x27;news&#x27;);</span><br><span class="line">var NewsModel=require(&#x27;./model/news.js&#x27;);</span><br><span class="line">console.timeEnd(&#x27;news&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="Mongoose预定义模式修饰符Getters与Setters自定义修饰符"><a href="#Mongoose预定义模式修饰符Getters与Setters自定义修饰符" class="headerlink" title="Mongoose预定义模式修饰符Getters与Setters自定义修饰符"></a>Mongoose预定义模式修饰符Getters与Setters自定义修饰符</h3><h4 id="一、mongoose预定义模式修饰符"><a href="#一、mongoose预定义模式修饰符" class="headerlink" title="一、mongoose预定义模式修饰符"></a>一、mongoose预定义模式修饰符</h4><p>lowercase、uppercase 、 trim</p>
<p>mongoose提供的预定义模式修饰符，可以对我们增加的数据进行一些格式化。</p>
<h4 id="二、Mongoose-Getters-与Setters自定义修饰符"><a href="#二、Mongoose-Getters-与Setters自定义修饰符" class="headerlink" title="二、Mongoose Getters 与Setters自定义修饰符"></a>二、Mongoose Getters 与Setters自定义修饰符</h4><p>除了mongoose内置的修饰符以外，我们还可以通过set(建议使用）修饰符在增加数据的时候对数据进行格式化。也可以通过get(不建议使用）在实例获取数据的时候对数据进行</p>
<h3 id="Mongoose索引、Mongoose内置CURD方法、扩展Mongoose-Model的静态方法和实例方法"><a href="#Mongoose索引、Mongoose内置CURD方法、扩展Mongoose-Model的静态方法和实例方法" class="headerlink" title="Mongoose索引、Mongoose内置CURD方法、扩展Mongoose Model的静态方法和实例方法"></a>Mongoose索引、Mongoose内置CURD方法、扩展Mongoose Model的静态方法和实例方法</h3><h4 id="一、Mongoose索引"><a href="#一、Mongoose索引" class="headerlink" title="一、Mongoose索引"></a>一、Mongoose索引</h4><h4 id="二、Mongoose内置CURD"><a href="#二、Mongoose内置CURD" class="headerlink" title="二、Mongoose内置CURD"></a>二、Mongoose内置CURD</h4><h3 id="Mongoose数据校验"><a href="#Mongoose数据校验" class="headerlink" title="Mongoose数据校验"></a>Mongoose数据校验</h3><h4 id="一、Mongoose校验参数"><a href="#一、Mongoose校验参数" class="headerlink" title="一、Mongoose校验参数"></a>一、Mongoose校验参数</h4><ul>
<li>required :表示这个数据必须传入</li>
<li>max用于Number类型数据,最大值</li>
<li>min:用于Number类型数据,最小值</li>
<li>enum:枚举类型，要求数据必须满足枚举值<code>enum: [&#39;0&#39;,&#39;1&#39;,&#39;2&#39;]</code></li>
<li>match:增加的数据必须符合match(正则)的规则</li>
<li>maxlength:最大值</li>
<li>minlength:最小值</li>
</ul>
<h3 id="Mongoose中使用aggregate聚合管道"><a href="#Mongoose中使用aggregate聚合管道" class="headerlink" title="Mongoose中使用aggregate聚合管道"></a>Mongoose中使用aggregate聚合管道</h3>]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js相关笔记</title>
    <url>/2020/08/24/Node-js%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://nodejs.org/zh-cn/">Node.js官网</a></p>
<p><a href="https://cnodejs.org/">Cnode社区</a></p>
<p><a href="http://nodejs.cn/">Node.js中文网</a></p>
<p><a href="https://www.nodeapp.cn/">Node.js 中文文档 | Node.js 中文网</a></p>
<p><a href="https://npm.taobao.org/">淘宝NPM镜像</a></p>
<p>Node.js&amp;HTML5论坛</p>
<p><a href="https://npmmirror.com/">npmmirror 镜像站</a>   或 npm.taobao.org</p>
<p><strong>后端处理分页数据的接口</strong>   <a href="https://www.cnblogs.com/fm060/p/8144758.html">参考博客</a></p>
<p><a href="https://www.axis-studio.org/2017/12/29/element-express-mongoose%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/index.html">element+express+mongoose实现分页查询</a></p>
<p><a href="https://www.mongodb.com/languages/mongodb-with-nodejs">MongoDB With Node.js | MongoDB</a></p>
<h4 id="后端接口代码："><a href="#后端接口代码：" class="headerlink" title="后端接口代码："></a>后端接口代码：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/getSources&#x27;</span>,<span class="title function_">async</span>(req, res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> currentPage = <span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">currentPage</span>) <span class="comment">// 转换前端传入当前页码</span></span><br><span class="line">    <span class="keyword">let</span> pageSize = <span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">pageSize</span>) <span class="comment">// 转换前端传入的每页大小</span></span><br><span class="line">    <span class="keyword">let</span> skip = (currentPage-<span class="number">1</span>)*pageSize <span class="comment">// 实现分割查询的skip</span></span><br><span class="line">    <span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有数据</span></span><br><span class="line">    <span class="keyword">var</span> allSources = <span class="keyword">await</span> <span class="title class_">Sources</span>.<span class="title function_">find</span>();</span><br><span class="line">    <span class="keyword">var</span> allCount = allSources.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> allPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(allCount/pageSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据页码和每页显示条数筛选数据</span></span><br><span class="line">    <span class="keyword">const</span> sources = <span class="keyword">await</span> <span class="title class_">Sources</span>.<span class="title function_">find</span>(params).<span class="title function_">skip</span>(skip).<span class="title function_">limit</span>(pageSize)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> object =&#123;</span><br><span class="line">        <span class="attr">allCount</span>: allCount,</span><br><span class="line">        <span class="attr">allPage</span>: allPage,</span><br><span class="line">        <span class="attr">page</span>: currentPage,</span><br><span class="line">        <span class="attr">data</span>: sources</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(object)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="前端请求接口代码："><a href="#前端请求接口代码：" class="headerlink" title="前端请求接口代码："></a>前端请求接口代码：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取素材列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getSources</span> = (<span class="params">param</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/getSources&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: param</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.vue页面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">  @size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">  @current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br><span class="line">  :current-page=<span class="string">&quot;currentPage&quot;</span></span><br><span class="line">  :page-sizes=<span class="string">&quot;[10, 15, 20, 25, 30]&quot;</span></span><br><span class="line">  :page-size=<span class="string">&quot;pageSize&quot;</span></span><br><span class="line">  layout=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span><br><span class="line">  :total=<span class="string">&quot;allCount&quot;</span>&gt;</span><br><span class="line">&lt;/el-pagination&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">sourceList</span>: [],</span><br><span class="line"><span class="attr">allCount</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">  </span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="comment">// 渲染第一页的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initData</span>(<span class="variable language_">this</span>.<span class="property">currentPage</span>)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line">initData (thisPage) &#123;</span><br><span class="line">  <span class="keyword">let</span> param = &#123;</span><br><span class="line">    <span class="attr">currentPage</span>: thisPage,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getSources</span>(param).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceList</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">allCount</span> = res.<span class="property">data</span>.<span class="property">allCount</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(`当前页: $&#123;val&#125;`);  </span></span><br><span class="line">  <span class="comment">// 渲染相应页码的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initData</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建package-json："><a href="#创建package-json：" class="headerlink" title="创建package.json："></a>创建package.json：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p><a href="http://javascript.ruanyifeng.com/nodejs/npm.html">npm模块管理器</a></p>
<p><a href="https://jingyan.baidu.com/article/91f5db1b3e1f991c7f05e395.html">我们安装了Nodejs是安装了什么</a></p>
<p><a href="https://github.com/nimoc/gulp-book/blob/master/chapter1.md">安装 Node 和 gulp</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://nodejs.org/zh-cn/download/">node安装包下载地址</a></p>
<ol>
<li>下载.msi文件</li>
<li>按”下一步”，”下一步”装好</li>
<li>双击安装好的目录里面的”node.exe”，文件，输入node  （这一步好像不需要）</li>
<li>创建一个app.js文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;He1lo world\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>运行app.js：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在浏览器中预览</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/ </span></span><br><span class="line">或者</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:3000/</span></span><br></pre></td></tr></table></figure>

<p>使用淘宝NPM镜像</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>清屏命令（清掉历史操作记录）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<p>取消命令继续执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Ctrl</span> +  C </span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_36423639/article/details/70230571">window下通过nvm-windows来安装多版本node</a></p>
<p>[全栈最后一公里 - Scott 带你学习 Node.js 线上服务器部署与发布](<a href="http://www.imooc.com/article/17554">http://www.imooc.com/article/17554</a> Scott)</p>
<p><a href="http://nqdeng.github.io/7-days-nodejs/">七天学会NodeJS</a></p>
<p><a href="https://www.handlebarsjs.cn/">Handlebars-轻量的语义化模板</a></p>
<p><strong>什么是异步I/O？</strong></p>
<p>就是我们读取/写入文件或者操作数据库的时候，此时应该是异步的读取。CPU命令磁盘驱动器读取文件，CPU此时不能死等磁盘返回结果，如果死等CPU自己就被阻塞了，性能是极大的浪费。比如：PHP读取文件，性能就不高，因为被阻塞了。</p>
<h3 id="Node-js创建第一个应用"><a href="#Node-js创建第一个应用" class="headerlink" title="Node.js创建第一个应用"></a>Node.js创建第一个应用</h3><p>如果我们使用PHP来编写后端的代码时，需要Apache 或者Nginx 的 HTTP服务器，来处理客户端的请求相应。不过对Node.js 来说，概念完全不一样了。使用 Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。</p>
<ol>
<li>引入http模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http= <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>创建服务器</li>
</ol>
<p>接下来我们使用http.createServer()方法创建服务器，并使用listen方法绑定8888端口。函数通过request, response参数来接收和响应数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(functio (request, response)&#123;</span><br><span class="line">	<span class="comment">// 发送HTTP头部</span></span><br><span class="line">	<span class="comment">// HTTP状态值: 200 : oK</span></span><br><span class="line">  <span class="comment">// 设置HTTP头部，状态码是200，文件类型是html，字符集是utf8</span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送响应数据“Hello World&quot;</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;哈哈哈哈，我买了一个iPhone&quot;</span> +(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>)+<span class="string">&quot;s&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">&#125;).listen(8888);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 终端打印如下信息</span></span><br><span class="line"><span class="string">console.log(&quot;</span><span class="title class_">Server</span> running at <span class="attr">http</span>:<span class="comment">//127.0.0.1:8888/&quot;);</span></span><br></pre></td></tr></table></figure>

<p>结束响应：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>

<h3 id="node-js查询数据，倒序排序：sort-‘-字段名’"><a href="#node-js查询数据，倒序排序：sort-‘-字段名’" class="headerlink" title="node.js查询数据，倒序排序：sort(‘-字段名’)"></a>node.js查询数据，倒序排序：sort(‘-字段名’)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let currentPage = parseInt(req.query.currentPage) // 转换前端传入当前页码</span><br><span class="line">let pageSize = parseInt(req.query.pageSize) // 转换前端传入的每页大小</span><br><span class="line">let skip = (currentPage-1)*pageSize // 实现分割查询的skip</span><br><span class="line">let params = &#123;&#x27;delete_time&#x27;: &quot;0&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 根据页码和每页显示条数筛选数据</span><br><span class="line">const sources = await Sources.find(params).sort(&#x27;-create_time&#x27;).skip(skip).limit(pageSize)</span><br></pre></td></tr></table></figure>

<h4 id="常用的Nodejs开发工具"><a href="#常用的Nodejs开发工具" class="headerlink" title="常用的Nodejs开发工具"></a><a href="http://www.bjpowernode.com/hot/2981.html">常用的Nodejs开发工具</a></h4><ul>
<li>Express.js</li>
<li>Socket.io</li>
<li>Meteor</li>
<li>Keystone</li>
<li>Koa.js</li>
<li>PM2.5</li>
<li>Electrode.js</li>
<li>Babel</li>
<li>Broccoli</li>
<li>Webpack</li>
</ul>
<h4 id="JSON-Server——模拟服务端接口数据"><a href="#JSON-Server——模拟服务端接口数据" class="headerlink" title="JSON Server——模拟服务端接口数据"></a><a href="https://www.npmjs.com/package/json-server">JSON Server</a>——模拟服务端接口数据</h4><blockquote>
<p>一般用在前后端分离后，前端人员可以不依赖 <code>API</code>开发，而在本地搭建一个 <code>JSON</code>服务，自己产生测试数据。</p>
</blockquote>
<blockquote>
<p>一个在本地运行，可以存储 <code>json</code>数据的 <code>server</code>。</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过查看版本号，来测试是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json-server -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建json数据 –<code> db.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;posts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;title&quot;: &quot;title&quot;,</span><br><span class="line">      &quot;id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;comments&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;body&quot;: &quot;some comment&quot;,</span><br><span class="line">      &quot;postId&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;profile&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;typicode&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始服务——进入到<code> db.json</code>文件所在的目录，执行以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json-server --watch db.json</span><br></pre></td></tr></table></figure>

<p><code>json-server </code>默认是 3000端口，我们也可以自己指定端口，指令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json-server --watch db.json --port 5000(端口号)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看接口返回数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:5000/posts</span><br></pre></td></tr></table></figure>
</li>
<li><p>增删改查相关操作，<a href="https://www.yuque.com/winney07/vp9xtm/ppi9zu#d8Beu">看语雀中的笔记</a></p>
</li>
</ol>
<h4 id="截屏保存图片插件"><a href="#截屏保存图片插件" class="headerlink" title="截屏保存图片插件"></a>截屏保存图片插件</h4><p><a href="https://www.npmjs.com/package/casperjs">casperjs</a></p>
<p>phantomjs</p>
<p><a href="https://www.npmjs.com/package/capture-phantomjs">capture-phantomjs</a></p>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js相关笔记</title>
    <url>/2020/08/22/Node.js%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://blog.poetries.top/node-learning-notes/notes/base/01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">认识 Node.js | Node.js学习指南 (poetries.top)</a></p>
<h2 id="认识-Node-js"><a href="#认识-Node-js" class="headerlink" title="认识 Node.js"></a>认识 Node.js</h2><ul>
<li>Node 是一个服务器端 JavaScript 解释器</li>
<li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境</li>
<li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效</li>
<li>Node.js 的包管理器 npm，是全球最大的开源库生态系统</li>
<li>Node.js 是一门动态语言，运行在服务端的 Javascript</li>
</ul>
<h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><blockquote>
<p>Node.js Version Manager（简称 NVM）是一个用于管理 Node.js 版本的命令行工具。Node.js 是一个流行的服务器端 JavaScript 运行时环境，用于构建 Web 应用程序和服务。NVM 允许您在同一台计算机上安装多个 Node.js 版本，并轻松在它们之间切换，以确保您的应用程序与特定的 Node.js 版本兼容。</p>
</blockquote>
<ul>
<li><code>nvm install &lt;version&gt;</code>：安装指定版本的 Node.js。</li>
<li><code>nvm use &lt;version&gt;</code>：切换到指定版本的 Node.js。</li>
<li><code>nvm ls</code>：列出已安装的 Node.js 版本。</li>
<li><code>nvm alias &lt;name&gt; &lt;version&gt;</code>：创建 Node.js 版本别名。</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用git bash工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<p><code>这些命令可以在 macOS 和 Linux 上使用。请注意，NVM 不支持 Windows，但您可以使用类似的工具，如 nvm-windows 或 nvmw。</code></p>
<p><strong>nvm-windows 的安装和使用</strong>:</p>
<ol>
<li><p>下载 <code>nvm-setup.zip</code> 安装文件。您可以在 <a href="https://github.com/coreybutler/nvm/releases">nvm-windows GitHub Releases 页面</a> 下载最新版本的 <code>nvm-setup.zip</code>。</p>
</li>
<li><p>解压缩 <code>nvm-setup.zip</code> 文件，并运行 <code>nvm-setup.exe</code> 安装程序。按照安装程序的指示进行安装。</p>
</li>
<li><p>安装完成后，<code>打开一个新的命令提示符窗口（cmd.exe）或 PowerShell 窗口</code>。</p>
</li>
<li><p>使用以下命令来查看所有可用的 Node.js 版本并安装其中一个：</p>
<ul>
<li><p>列出可用版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">nvm list available</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装特定版本，例如 14.17.5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">nvm install 14.17.5</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用以下命令来选择已安装的 Node.js 版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">nvm use 14.17.5</span><br></pre></td></tr></table></figure>

<p>这将设置当前的 Node.js 版本为 14.17.5。</p>
</li>
<li><p>验证 Node.js 版本是否正确切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>您还可以使用其他 nvm-windows 命令来管理 Node.js 版本，如 <code>nvm list</code>、<code>nvm uninstall</code> 等。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native相关笔记</title>
    <url>/2021/09/28/React-Native%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://reactnative.dev/">React Native官网</a></p>
<p><a href="https://www.reactnative.cn/">React Native 中文网</a></p>
<h4 id="移动App的开发模式"><a href="#移动App的开发模式" class="headerlink" title="移动App的开发模式"></a>移动App的开发模式</h4><ul>
<li>原生开发</li>
<li>原生App</li>
<li>Android | iOS | Windows</li>
</ul>
<ul>
<li>混合开发</li>
<li>混合App</li>
<li>React Native | Weex | Flutter</li>
</ul>
<ul>
<li>H5开发</li>
<li>Web App</li>
<li>HTML、CSS、JavaScript</li>
</ul>
<h4 id="跨平台框架的比较"><a href="#跨平台框架的比较" class="headerlink" title="跨平台框架的比较"></a>跨平台框架的比较</h4><table>
<thead>
<tr>
<th>框架</th>
<th>React Native</th>
<th>Weex</th>
<th>Flutter</th>
</tr>
</thead>
<tbody><tr>
<td>所属公司</td>
<td>Facebook</td>
<td>Alibaba</td>
<td>Google</td>
</tr>
<tr>
<td>编程语言</td>
<td>JavaScript（React）</td>
<td>JavaScript（Vue）</td>
<td>Dart</td>
</tr>
<tr>
<td>引擎</td>
<td>JSCore</td>
<td>V8</td>
<td>Flutter engine</td>
</tr>
<tr>
<td>支持系统</td>
<td>Android、iOS</td>
<td>Android、iOS、Web</td>
<td>Android、iOS、Fuchsia</td>
</tr>
<tr>
<td>性能</td>
<td>一般</td>
<td>较快</td>
<td>较快</td>
</tr>
<tr>
<td>使用场景</td>
<td>整体App</td>
<td>单页面</td>
<td>整体App</td>
</tr>
<tr>
<td>学习成本</td>
<td>难</td>
<td>易</td>
<td>一般</td>
</tr>
</tbody></table>
<p><a href="https://www.jianshu.com/p/8717e1e614a9">移动端跨平台框架对比</a></p>
<h4 id="移动App的开发模式-1"><a href="#移动App的开发模式-1" class="headerlink" title="移动App的开发模式"></a>移动App的开发模式</h4><table>
<thead>
<tr>
<th>开发模式</th>
<th>原生开发</th>
<th>混合开发</th>
<th>Web开发</th>
</tr>
</thead>
<tbody><tr>
<td>运行环境</td>
<td>Android、iOS</td>
<td>Android、iOS</td>
<td>浏览器、WebView</td>
</tr>
<tr>
<td>编程语言</td>
<td>Java、Objective-C</td>
<td>JavaScript、Dart</td>
<td>HTML、CSS、JavaScript</td>
</tr>
<tr>
<td>可移植性</td>
<td>差</td>
<td>一般</td>
<td>好</td>
</tr>
<tr>
<td>开发速度</td>
<td>慢</td>
<td>一般</td>
<td>快</td>
</tr>
<tr>
<td>性能</td>
<td>快</td>
<td>较慢</td>
<td>慢</td>
</tr>
<tr>
<td>学习成本</td>
<td>高</td>
<td>一般</td>
<td>低</td>
</tr>
</tbody></table>
<p>React Native的优点</p>
<ul>
<li>开发体验好<ul>
<li>用统一的代码规范开发移动端程序，不用关注移动端的差异</li>
</ul>
</li>
<li>开发成本低<ul>
<li>开发一次，可以生成Android和iOs两个系统上的App- Learn once, write anywhere</li>
</ul>
</li>
<li>学习成本低<ul>
<li>只要掌握JavaScript和React，就可以进行移动端开发了</li>
</ul>
</li>
</ul>
<p>React Native的不足</p>
<ul>
<li>不成熟;<ul>
<li>项目版本更新维护较频繁，学习成本高;</li>
<li>试错成本高，有些问题较少解决方案，易耽误开发进度。</li>
</ul>
</li>
<li>性能差<ul>
<li>整体性能仍不如原生</li>
</ul>
</li>
<li>兼容性差<ul>
<li>涉及底层的功能，需要针对Android和iOs双端单独开发;</li>
</ul>
</li>
</ul>
<h4 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h4><ul>
<li><p>安装Node.js</p>
<ul>
<li>Node.js的版本应&gt;=12(推荐安装LTS版本)</li>
<li><code> npm config set registry https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p>安装Yarn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 React Native脚手架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>需要安装Android开发环境、iOS开发环境</p>
<p>Window下只能安装Android开发环境</p>
<p>Mac下可以安装Android开发环境、iOS开发环境</p>
<p>Android环境</p>
<ul>
<li>安装JDK</li>
<li>安装Android Studio</li>
<li>安装Android SDK</li>
<li>配置环境变量</li>
</ul>
<p>·下载JDK(Java SE Development Kit)<br> https:/<a href="http://www.oracle.com/jiava/technologies/iavase/javase-jdk8-downloads.html%C2%B7JDK%E7%9A%84%E7%89%88%E6%9C%AC%E5%BF%85%E9%A1%BB%E6%98%AF1.8(1.8%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AE%98%E6%96%B9%E4%B9%9F%E7%9B%B4%E6%8E%A5%E7%A7%B08%E7%89%88%E6%9C%AC)">www.oracle.com/jiava/technologies/iavase/javase-jdk8-downloads.html·JDK的版本必须是1.8(1.8版本，官方也直接称8版本)</a><br>·目前不支持高于1.8的JDK版本<br>·下载时要求登陆(请先注册Oracle账号)<br>·或者直接找老师，获取上面的安装包<br>·安装JDK(一直“下一步”)<br>·命令行中，输入java -version，验证安装是否成功<br>L, A, G，。u———</p>
<p>·下载Android Studio<br><a href="https://developer.android.com/studio/index.html%C2%B7%E5%AE%89%E8%A3%85Android">https://developer.android.com/studio/index.html·安装Android</a> Studio (一直“下一步”)·启动Android Studio<br>·初次启动，需要安装组件（组件约2GB，安装后占用空间约8GB)·安装组件的过程巨长巨长巨长，要有耐心</p>
<p>. What<br>·Android SDK是针对安卓开发的套件. Why<br>·虽然Android Studio默认会安装最新版本的Android SDK<br>·但是，目前编译React Native应用需要的是Android 10(Q)版本的SDK<br>· How<br>·打开Android Studio，在菜单Tools下找到”SDK Manager”</p>
<p>·配置ANDROID_HOME环境变量<br>·<code>打开Android Studio，点击菜单Tools → SDK Manager，找到Appearance &amp;Behavior → System Settings → Android SDK</code></p>
<p>·跟ANDROID_HOME相关的环境变量<br>·<code>%ANDROID_HOME%\platform-tools%ANDROID_HOME%\emulator</code><br>·<code>%ANDROID_HOME%\tools·%ANDROID_HOME%\tools\bin</code><br>—L，A,G，。u</p>
<p>react native 进阶</p>
<p>react native 高级</p>
<p>ECMAScript新功能</p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native环境配置相关笔记</title>
    <url>/2021/10/02/React-Native%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="macOS环境配置"><a href="#macOS环境配置" class="headerlink" title="macOS环境配置"></a>macOS环境配置</h3><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>参考博客：<a href="https://blog.csdn.net/sinat_38184748/article/details/114115441">MacOs M1安装Homebrew 在国内最简单方法</a>——使用这个安装成功</p>
<h5 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1.安装Homebrew"></a>1.安装Homebrew</h5><hr>
<h6 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h6><p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<p>因为M1芯片的包安装位置不在是以前的<code>/usr/local/</code>，而是<code>/opt/homebrew</code>，所以要将配置文件里的环境变量改过来</p>
<p>1、首先进入根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<p>2、创建.zshrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch .zshrc</span><br></pre></td></tr></table></figure>

<p>3、打开文件进行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure>

<p>4、如果有旧的环境就修改，没有就新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/opt/homebrew/bin:$PATH</span><br><span class="line">export PATH=/opt/homebrew/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>5、保存<br>使用<code>command + s</code><br>6、生效环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source .zshrc</span><br></pre></td></tr></table></figure>

<p>7、测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew -v    // 显示版本，即安装成功</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h6 id="本次安装参考内容："><a href="#本次安装参考内容：" class="headerlink" title="本次安装参考内容："></a>本次安装参考内容：</h6><p>开源安装脚本库：<a href="https://gitee.com/cunkai/HomebrewCN">https://gitee.com/cunkai/HomebrewCN</a></p>
<p>复制以下内容到你的终端：<br>intel芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>回车运行，按照提示运行下去就可以了</p>
<p>错误<br>做完上面的傻瓜式操作，理论上就OK了，但是我这边出现了安装完后用不了的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h6 id="相关参考内容："><a href="#相关参考内容：" class="headerlink" title="相关参考内容："></a>相关参考内容：</h6><p><a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）（Mac &amp; Linux）</a></p>
<p>旧文章：<a href="https://blog.csdn.net/sinat_38184748/article/details/99450330?spm=1001.2014.3001.5502">macOS安装Homebrew太慢，换用清华镜像</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>

<h6 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-安装watchman"><a href="#2-安装watchman" class="headerlink" title="2.安装watchman"></a>2.安装watchman</h4><blockquote>
<p>参考：<a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/126640559?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166458144816782417056210%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166458144816782417056210&biz_id=&utm_medium=distribute.pc_search_result.none-task-code-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126640559-0-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=Disable%20this%20behaviour%20by%20setting%20HOMEBREW_NO_INSTALL_CLEANUP.%20Hide%20these%20hints%20with%20HOMEBREW_NO_ENV_HINTS%20(see%20%60man%20brew%60).">Mac系列之：Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>

<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br></pre></td></tr></table></figure>

<p>解决方法，终端输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_NO_INSTALL_CLEANUP=TRUE</span><br></pre></td></tr></table></figure>

<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watchman -v</span><br></pre></td></tr></table></figure>



<h4 id="3-安装cocoapods"><a href="#3-安装cocoapods" class="headerlink" title="3.安装cocoapods"></a>3.安装cocoapods</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>

<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.19</span><br><span class="line">warning ../../../../../package.json: No license field</span><br><span class="line">$ react-native run-ios</span><br><span class="line">info Found Xcode project &quot;AwesomeProject.xcodeproj&quot;</span><br><span class="line">info Building (using &quot;xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A&quot;)</span><br><span class="line">error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening AwesomeProject.xcodeproj.</span><br><span class="line">Command line invocation:</span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A</span><br><span class="line"></span><br><span class="line">User defaults from command line:</span><br><span class="line">    IDEPackageSupportUseBuiltinSCM = YES</span><br><span class="line"></span><br><span class="line">Prepare packages</span><br><span class="line"></span><br><span class="line">Computing target dependency graph and provisioning inputs</span><br><span class="line"></span><br><span class="line">Create build description</span><br><span class="line">Build description signature: bf2f29ad51ca6266b44cbb8d643576b3</span><br><span class="line">Build description path: /Users/yangyanyi/Library/Developer/Xcode/DerivedData/AwesomeProject-fgqiuteczcwroxgbdakmwcrknckt/Build/Intermediates.noindex/XCBuildData/bf2f29ad51ca6266b44cbb8d643576b3-desc.xcbuild</span><br><span class="line"></span><br><span class="line">note: Building targets in dependency order</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Copy Pods Resources&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Embed Pods Frameworks&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Bundle React Native code and images&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Start Packager&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line"></span><br><span class="line">** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ios </span><br><span class="line">pod install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://lightrun.com/answers/facebook-react-native-fresh-react-native-066-app-does-not-build-on-xcode-13-ios-116-compiler-error-on-sysuioo">Fresh react-native (0.66) app does not build on XCode 13, iOS 11.6: compiler error on SysUio.o</a>  </p>
<p>参考：<a href="https://stackoverflow.com/questions/55725042/error-failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-wit">error Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65. i can not Run my Project</a></p>
</blockquote>
<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing CocoaAsyncSocket</span><br><span class="line">[!] /usr/local/bin/git clone https://github.com/robbiehanson/CocoaAsyncSocket.git /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt --template= --single-branch --depth 1 --branch 7.6.5</span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/robbiehanson/CocoaAsyncSocket.git/&#x27;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于网络问题，不断安装中断，每次报类似的错误，继续输入pod install，就会继续安装，直到安装成功</p>
</blockquote>
<h4 id="4-hermes-engine的安装问题"><a href="#4-hermes-engine的安装问题" class="headerlink" title="4.hermes-engine的安装问题"></a>4.hermes-engine的安装问题</h4><blockquote>
<p>这个有490多M，每次安装都失败，报错信息都一致。这个折腾了好久好久….</p>
</blockquote>
<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing hermes-engine</span><br><span class="line">[!] /usr/bin/curl -f -L -o /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-67147-8lkp1c/file.tgz https://github.com/facebook/react-native/releases/download/v0.70.1/hermes-runtime-darwin-v0.70.1.tar.gz --create-dirs --netrc-optional --retry 2 -A &#x27;CocoaPods/1.11.3 cocoapods-downloader/1.5.1&#x27;</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0  496M    0 1343k    0     0   1299      0   4d 15h  0:17:38   4d 14h   894</span><br><span class="line">curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ol>
<li>打开一个终端，先执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&#x27;your.host:port&#x27; //your.host:port我的是127.0.0.1:1087</span><br><span class="line">export https_proxy=&#x27;your.host:port&#x27; your.host:port我的是127.0.0.1:1087</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>这个终端界面转到项目目录下，再执行<code>pod install --verbose</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install --verbose						// 在安装命令添加参数`--verbose`看打印详细信息</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/BUG_delete/article/details/110133505?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&utm_relevant_index=1">Cocoapods安装私有库问题</a></p>
</blockquote>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>命令行打印消息中看到自动执行<code>Generating Pods project</code></p>
<p>命令行打印消息中看到自动执行<code>Integrating client project</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Please close any current Xcode sessions and use `myapp.xcworkspace` for this project from now on.</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp` (`myapp.xcodeproj` project)</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp-myappTests` (`myapp.xcodeproj` project)</span><br><span class="line">  - Running post integrate hooks</span><br><span class="line">  - Writing Lockfile in `Podfile.lock`</span><br><span class="line">  - Writing Manifest in `Pods/Manifest.lock`</span><br><span class="line">  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only performed in repo update</span><br><span class="line"></span><br><span class="line">-&gt; Pod installation complete! There are 59 dependencies from the Podfile and 49 total pods installed.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据终端提示，如果想要使用刚添加的第三方库，必须打开<code>MyApp.xcworkspace</code>，而非之前的<code>MyApp.xcodeProj</code>。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/c19df91997fd">CocoaPods的安装与使用</a></p>
<h4 id="5-运行项目"><a href="#5-运行项目" class="headerlink" title="5.运行项目"></a>5.运行项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn ios </span><br><span class="line">或</span><br><span class="line">yarn react-native run-ios</span><br></pre></td></tr></table></figure>



<h4 id="配置-ANDROID-SDK-ROOT-环境变量"><a href="#配置-ANDROID-SDK-ROOT-环境变量" class="headerlink" title="配置 ANDROID_SDK_ROOT 环境变量"></a>配置 ANDROID_SDK_ROOT 环境变量</h4><p>1.打开配置文件的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">vi /Users/yangyanyi/.zshrc</span><br></pre></td></tr></table></figure>

<p>2.编辑配置文件，将以下代码粘贴到配置文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚</span><br><span class="line">export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/emulator</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools</span><br></pre></td></tr></table></figure>

<p>3.保存后退出vi，参考：<a href="https://wenku.baidu.com/view/e4705173bd23482fb4daa58da0116c175f0e1e80.html">Mac终端编辑完成后如何保存</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>4.使用<code>source $HOME/.zshrc</code>命令来使环境变量设置立即生效（否则重启后才生效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.zshrc</span><br></pre></td></tr></table></figure>

<p>5.使用<code>echo $ANDROID_SDK_ROOT</code>检查此变量是否已正确设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $ANDROID_SDK_ROOT</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输入完，在终端成功显示：<code>/Users/yangyanyi/Library/Android/sdk</code></p>
</blockquote>
<h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &#x27;:react-native-gradle-plugin&#x27;.</span><br><span class="line">&gt; Could not resolve all files for configuration &#x27;:react-native-gradle-plugin:classpath&#x27;.</span><br><span class="line">   &gt; Could not download kotlin-gradle-plugin-1.6.10.jar (org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line">   &gt; Could not download kotlin-compiler-embeddable-1.6.10.jar (org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 12m 28s</span><br><span class="line"></span><br><span class="line">error Failed to install the app. Make sure you have the Android development environment set up: https://reactnative.dev/docs/environment-setup.</span><br><span class="line">Error: Command failed: ./gradlew app:installDebug -PreactNativeDevServerPort=8081</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &#x27;:react-native-gradle-plugin&#x27;.</span><br><span class="line">&gt; Could not resolve all files for configuration &#x27;:react-native-gradle-plugin:classpath&#x27;.</span><br><span class="line">   &gt; Could not download kotlin-gradle-plugin-1.6.10.jar (org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line">   &gt; Could not download kotlin-compiler-embeddable-1.6.10.jar (org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 12m 28s</span><br><span class="line"></span><br><span class="line">    at makeError (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/execa/index.js:174:9)</span><br><span class="line">    at /Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/execa/index.js:278:16</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:96:5)</span><br><span class="line">    at async runOnAllDevices (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js:109:5)</span><br><span class="line">    at async Command.handleAction (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/@react-native-community/cli/build/index.js:142:9)</span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router笔记</title>
    <url>/2022/04/12/React-Router%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://react-guide.github.io/react-router-cn/">React Router 中文文档</a></p>
<p><a href="https://github.com/remix-run/react-router">react-router</a></p>
<p><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/installation.md">docs–installation.md</a></p>
<p><a href="https://github.com/remix-run/react-router/tree/main/packages/react-router-dom">react-router-dom</a></p>
<p><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">docs-tutorial.md</a></p>
<h3 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h3><p>依赖包分间接依赖包和直接依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>在pages目录中，创建路由组件</p>
<h4 id="React-Router—看这里的最新用法"><a href="#React-Router—看这里的最新用法" class="headerlink" title="React Router—看这里的最新用法"></a><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></h4><p><a href="https://github.com/remix-run/react-router">react-router—–Github</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">React Router中文文档</a></p>
<h4 id="react-router-dom使用指南"><a href="#react-router-dom使用指南" class="headerlink" title="react-router-dom使用指南"></a><a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南</a></h4><p>v6文档：<a href="https://reactrouter.com/">https://reactrouter.com</a></p>
<p>v5文档：<a href="https://v5.reactrouter.com/web/guides/quick-start">https://v5.reactrouter.com/web/guides/quick-start</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1727136927711386422&wfr=spider&for=pc">最全前端路由配置、中大型后台前端配置，vue-router react-router</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 入口文件index.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;,</span><br><span class="line">    document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 应用的根组件App.js</span><br><span class="line">import React, &#123;Component&#125; from &quot;react&quot;;</span><br><span class="line">import &#123;Routes, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &quot;./App.less&quot;;</span><br><span class="line"></span><br><span class="line">import Login from &quot;./pages/login/Login&quot;;</span><br><span class="line">import Admin from &quot;./pages/admin/Admin&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Routes&gt;</span><br><span class="line">                &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/&quot; element=&#123;&lt;Admin /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/Routes&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Navigate &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">function A()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Navigate to=&quot;/b&quot; /&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编程式重定向"><a href="#编程式重定向" class="headerlink" title="编程式重定向"></a>编程式重定向</h4><p>navigate要在useEffect中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  if(user.isLogin) &#123;</span><br><span class="line">    navigate(&quot;/home&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [user]);</span><br></pre></td></tr></table></figure>



<p><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#navigate-function">Navigation Function</a></p>
<h4 id="使用layout的路由配置"><a href="#使用layout的路由配置" class="headerlink" title="使用layout的路由配置"></a>使用layout的路由配置</h4><p><a href="https://github.com/remix-run/react-router/tree/main/examples/lazy-loading">参考-lazy-loading</a></p>
<h5 id="关键点：Outlet"><a href="#关键点：Outlet" class="headerlink" title="关键点：Outlet"></a>关键点：Outlet</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; useNavigate  &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; Routes, Route, Outlet &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; Layout&#125; from &#x27;antd&#x27;;</span><br><span class="line"></span><br><span class="line">import Top from &#x27;../../components/Top&#x27;</span><br><span class="line">import Bottom from &#x27;../../components/Bottom&#x27;</span><br><span class="line">import LeftNav from &quot;../../components/LeftNav&quot;</span><br><span class="line"></span><br><span class="line">import Product from &#x27;../product/Product&#x27;;</span><br><span class="line">import AddProduct from &#x27;../product/AddProduct&#x27;;</span><br><span class="line">import EditProduct from &#x27;../product/EditProduct&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; Content&#125; = Layout;</span><br><span class="line"></span><br><span class="line">export default function Container() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;DashboardLayout /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route index element=&#123;&lt;Product /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;add&quot; element=&#123;&lt;AddProduct /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;edit&quot; element=&#123;&lt;EditProduct /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function DashboardLayout() &#123;</span><br><span class="line"> </span><br><span class="line">    let navigate = useNavigate();</span><br><span class="line">    const stateUser = useSelector(state =&gt; state.user);</span><br><span class="line">    const root = JSON.parse(localStorage.getItem(&#x27;persist:root&#x27;));</span><br><span class="line">    const user = JSON.parse(root.user) || stateUser;</span><br><span class="line">    </span><br><span class="line">    // 未登录</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        if(!user.isLogin) &#123;</span><br><span class="line">          navigate(&quot;/login&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [user]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout className=&#x27;container&#x27;&gt;</span><br><span class="line">        &lt;LeftNav/&gt;</span><br><span class="line">        &lt;Layout&gt;</span><br><span class="line">            &lt;Top user=&#123;user&#125;/&gt;</span><br><span class="line">            &lt;Content style=&#123;&#123; margin: &#x27;24px 16px 0&#x27; &#125;&#125;&gt;</span><br><span class="line">                &lt;div className=&quot;site-layout-background content-box&quot; style=&#123;&#123; padding: 24, minHeight: 850 &#125;&#125;&gt;</span><br><span class="line">                  &lt;Outlet /&gt;</span><br><span class="line">                &lt;Bottom/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/Content&gt;</span><br><span class="line">        &lt;/Layout&gt;</span><br><span class="line">    &lt;/Layout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Router</tag>
      </tags>
  </entry>
  <entry>
    <title>React-使用笔记</title>
    <url>/2021/03/02/React-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="疫情实时大数据报告—React项目"><a href="#疫情实时大数据报告—React项目" class="headerlink" title="疫情实时大数据报告—React项目"></a><a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_wangmeng#tab4">疫情实时大数据报告</a>—React项目</h4><p><a href="https://codesandbox.io/examples/package/react-dom">React Dom Examples</a></p>
<p><a href="https://codesandbox.io/examples/package/react">React Examples</a></p>
<p><a href="https://create-react-app.bootcss.com/">Create React App 中文文档</a></p>
<p><a href="https://create-react-app.dev/">Create React App</a></p>
<h4 id="VSCode扩展"><a href="#VSCode扩展" class="headerlink" title="VSCode扩展"></a>VSCode扩展</h4><h5 id="生成react代码片段-ES7"><a href="#生成react代码片段-ES7" class="headerlink" title="生成react代码片段-ES7"></a>生成react代码片段-ES7</h5><p>在VSCode中搜’ES7’，选择‘ES7 React/Redux/GraphQL/React-Native snippets’</p>
<p>在新建的<code>.jsx/.js</code>文件中</p>
<ol>
<li><p>输入<code>rcc</code>，快速生成class component：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rfc</code>，快速生成function component：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rconst</code>，快速生成constrctor：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props)</span><br><span class="line"></span><br><span class="line">  this.state = &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rcredux</code>，快速生成redux模版：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import PropTypes from &#x27;prop-types&#x27;</span><br><span class="line">import &#123; connect &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">export class test extends Component &#123;</span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    prop: PropTypes</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; (&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(test)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html#use-the-production-build">生产环境的配置</a></p>
<p><a href="https://www.cnblogs.com/houxianzhou/p/15222138.html">react中引入css的方式有哪几种</a></p>
<h4 id="快速注释"><a href="#快速注释" class="headerlink" title="快速注释"></a>快速注释</h4><p>在vscode中，<code>.jsx</code>文件中，选中要注释的文字，按<code> CTRL + shift + /</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* 提取组件 */&#125;</span><br></pre></td></tr></table></figure>

<h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><ol>
<li>箭头函数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.setState(state =&gt; (&#123;</span><br><span class="line">    isShowWarn: !state.isShowWarn</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ol>
<li><p>bind()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props)</span><br><span class="line"></span><br><span class="line">  this.state = &#123;</span><br><span class="line">     isShowWarn: false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.handleClick = this.handleClick.bind(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handleClick() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick = ()=&gt;&#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数写在元素上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123; (e)=&gt; this.handleClick(e) &#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 <code>key</code> 属性的值，请用其他属性名显式传递这个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="组件中的return"><a href="#组件中的return" class="headerlink" title="组件中的return"></a>组件中的return</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return &lt;div&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>返回多个html标签，换行写更清晰，使用<code>return()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return(</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>组件，含有return，会返回react或<code>null</code></p>
<p>函数组件，可以从参数props中拿到属性</p>
<p>class组件，可以从this.props中拿到属性</p>
<p>props的属性名==组件传进来的属性名 </p>
<p><code>&#123;&#125;</code>中可以写JavaScript代码，如果是对象，需要<code>&#123;&#123;a:1,b:2&#125;&#125;</code></p>
<p>map函数，自带return</p>
<p>key放在组件<code>&lt;ListItems/&gt;</code>上，而不是放在<code>&lt;li&gt;&lt;li/&gt;</code>上</p>
<p>key在某个循环中保证唯一性就好，不用在整个页面中保证唯一性</p>
<p>避免key使用索引index，特别是反序操作的情况。 因为会重新渲染，导致性能变差。使用id等唯一性属性</p>
</blockquote>
<blockquote>
<p>在 <code>map()</code> 方法中的元素需要设置 key 属性</p>
</blockquote>
<p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 <code>key</code> 属性的值，请用其他属性名显式传递这个值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const content = posts.map((post) =&gt;</span><br><span class="line">  &lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>Post</code> 组件可以读出 <code>props.id</code>，但是不能读出 <code>props.key</code>。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="四、引入路由"><a href="#四、引入路由" class="headerlink" title="四、引入路由"></a>四、引入路由</h3><p>依赖包分间接依赖包和直接依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>在pages目录中，创建路由组件</p>
<h4 id="React-Router—看这里的最新用法"><a href="#React-Router—看这里的最新用法" class="headerlink" title="React Router—看这里的最新用法"></a><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></h4><p><a href="https://github.com/remix-run/react-router">react-router—–Github</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">React Router中文文档</a></p>
<h4 id="react-router-dom使用指南"><a href="#react-router-dom使用指南" class="headerlink" title="react-router-dom使用指南"></a><a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南</a></h4><p>v6文档：<a href="https://reactrouter.com/">https://reactrouter.com</a></p>
<p>v5文档：<a href="https://v5.reactrouter.com/web/guides/quick-start">https://v5.reactrouter.com/web/guides/quick-start</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 入口文件index.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;,</span><br><span class="line">    document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 应用的根组件App.js</span><br><span class="line">import React, &#123;Component&#125; from &quot;react&quot;;</span><br><span class="line">import &#123;Routes, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &quot;./App.less&quot;;</span><br><span class="line"></span><br><span class="line">import Login from &quot;./pages/login/Login&quot;;</span><br><span class="line">import Admin from &quot;./pages/admin/Admin&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Routes&gt;</span><br><span class="line">                &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/&quot; element=&#123;&lt;Admin /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/Routes&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Navigate &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">function A()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Navigate to=&quot;/b&quot; /&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引入antd样式"><a href="#引入antd样式" class="headerlink" title="引入antd样式"></a>引入antd样式</h4><p>App.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;~antd/dist/antd.css&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="React中StrictMode严格模式"><a href="#React中StrictMode严格模式" class="headerlink" title="React中StrictMode严格模式"></a><a href="https://blog.csdn.net/wu_xianqiang/article/details/113521191">React中StrictMode严格模式</a></h4><p>StrictMode 是一个用来检查项目中潜在问题的工具。与 <a href="https://so.csdn.net/so/search?q=Fragment&spm=1001.2101.3001.7020">Fragment</a> 一样，StrictMode 不会渲染任何可见的 UI。它为其后代元素触发额外的检查和警告。</p>
<p>StrictMode 目前有助于：</p>
<p>1、识别不安全的生命周期<br>2、关于使用过时字符串 ref API 的警告<br>3、关于使用废弃的 findDOMNode 方法的警告<br>4、检测意外的副作用<br>5、检测过时的 context API</p>
<h4 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h4><p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">API接口</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/Glossary.html">词汇表</a></p>
<h5 id="获取-URL-参数"><a href="#获取-URL-参数" class="headerlink" title="获取 URL 参数"></a><a href="http://react-guide.github.io/react-router-cn/docs/Introduction.html">获取 URL 参数</a></h5><p>比如你访问 <code>/foo?bar=baz</code>，你可以通过访问 <code>this.props.location.query.bar</code> 从 Route 组件中获得 <code>&quot;baz&quot;</code> 的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;messages/:id&quot; component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">), document.body)</span><br></pre></td></tr></table></figure>

<p>通过上面的配置，这个应用知道如何渲染下面四个 URL：</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>组件</th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td><code>App</code></td>
</tr>
<tr>
<td><code>/about</code></td>
<td><code>App -&gt; About</code></td>
</tr>
<tr>
<td><code>/inbox</code></td>
<td><code>App -&gt; Inbox</code></td>
</tr>
<tr>
<td><code>/inbox/messages/:id</code></td>
<td><code>App -&gt; Inbox -&gt; Message</code></td>
</tr>
</tbody></table>
<h4 id="createRoot"><a href="#createRoot" class="headerlink" title="createRoot"></a><a href="https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis">createRoot</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Before</span><br><span class="line">import &#123; render &#125; from &#x27;react-dom&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;app&#x27;);</span><br><span class="line">render(&lt;App tab=&quot;home&quot; /&gt;, container);</span><br><span class="line"></span><br><span class="line">// After</span><br><span class="line">import &#123; createRoot &#125; from &#x27;react-dom/client&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;app&#x27;);</span><br><span class="line">const root = createRoot(container);</span><br><span class="line">root.render(&lt;App tab=&quot;home&quot; /&gt;);</span><br></pre></td></tr></table></figure>

<h4 id="轮播图-swiper"><a href="#轮播图-swiper" class="headerlink" title="轮播图-swiper"></a><a href="https://swiperjs.com/get-started">轮播图-swiper</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install swiper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// import Swiper JS</span><br><span class="line">import Swiper from &#x27;swiper&#x27;;</span><br><span class="line">// import Swiper styles</span><br><span class="line">import &#x27;swiper/css&#x27;;</span><br><span class="line"></span><br><span class="line">const swiper = new Swiper(...);</span><br></pre></td></tr></table></figure>

<p><a href="https://swiperjs.com/react">Swiper React Components</a></p>
<h3 id="react移动端"><a href="#react移动端" class="headerlink" title="react移动端"></a>react移动端</h3><h3 id="Ant-Design-Mobile"><a href="#Ant-Design-Mobile" class="headerlink" title="Ant Design Mobile"></a><a href="https://mobile.ant.design/zh">Ant Design Mobile</a></h3><p><a href="https://github.com/ant-design/ant-design-mobile">ant-design-mobile——GitHub</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save antd-mobile</span><br></pre></td></tr></table></figure>

<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a><a href="https://mobile.ant.design/zh/guide/i18n">国际化</a></h4><h4 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a>textarea 标签</h4><p>而在 React 中，<code>&lt;textarea&gt;</code> 使用 <code>value</code> 属性代替。这样，可以使得使用 <code>&lt;textarea&gt;</code> 的表单和使用单行 input 的表单非常类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="select-标签"><a href="#select-标签" class="headerlink" title="select 标签"></a>select 标签</h4><p>由于 <code>selected</code> 属性的缘故，椰子选项默认被选中。React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：</p>
<h4 id="react打包正式环境-相对路径"><a href="#react打包正式环境-相对路径" class="headerlink" title="react打包正式环境-相对路径"></a>react打包正式环境-相对路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打包后，会有静态资源获取不到的报错</p>
</blockquote>
<p>解决：</p>
<p>在<code>package.json</code>文件中，加入<code>homepage</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;.&quot;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_40259641/article/details/114988659">react 项目打包路径问题</a></p>
<h4 id="create-react-app打包上线页面空白的问题"><a href="#create-react-app打包上线页面空白的问题" class="headerlink" title="create-react-app打包上线页面空白的问题"></a>create-react-app打包上线页面空白的问题</h4><p>1.项目用的是 BrowserRouter ， BrowserRouter 一般是用于服务端渲染，所以服务端也需要相应的配置。要不然 网关不知道你有哪些路由，怎么给你转发。</p>
<p>解决：</p>
<ol>
<li><code>BrowserRouter 换成 HashRouter</code><br>打包后，发现在本地开启web服务器预览后，正常，但是放在服务器上后，依然为空白，提示静态资源找不到。</li>
<li>解决：<br>配置 package.json 中的<code> homepage:&#39;./&#39;</code><br>这样可以使打包后的静态资源，采用相对路径。</li>
</ol>
<p><a href="https://blog.csdn.net/weixin_40302777/article/details/94579132">react根据不同环境配置不同接口</a></p>
<p><a href="https://www.ltonus.com/React/react-project-config.html">三分钟教你搞定 React 项目多环境配置</a></p>
<h4 id="React实现复制功能"><a href="#React实现复制功能" class="headerlink" title="React实现复制功能"></a><a href="https://blog.csdn.net/yasuifi/article/details/119648390">React实现复制功能</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save copy-to-clipboard</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import copy from &#x27;copy-to-clipboard&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handleClick = (e) =&gt; &#123;</span><br><span class="line">  copy(e.target.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input placeholder=&#x27;请输入&#x27; onClick=&#123;this.handleClick&#125;/&gt; </span><br></pre></td></tr></table></figure>

<h4 id="Lazy和Suspense"><a href="#Lazy和Suspense" class="headerlink" title="Lazy和Suspense"></a>Lazy和Suspense</h4><p>1、<code>React.lazy</code></p>
<p><code>React.lazy</code>函数能让你像渲染常规组件一样处理动态引入（的组件）。</p>
<p>什么意思呢？其实就是懒加载。</p>
<p>（1）为什么代码要分割</p>
<p>当你的程序越来越大，代码量越来越多。一个页面上堆积了很多功能，也许有些功能很可能都用不到，但是一样下载加载到页面上，所以这里面肯定有优化空间。就如图片懒加载的理论。</p>
<p>（2）实现原理</p>
<p>当Webpack 解析到该语法时，它会自动地开始进行代码分割(Code Splitting)，分割成一个文件，当使用到这个文件的时候会这段代码才会被异步加载。</p>
<p>（3）解决方案</p>
<p>在<code>React.lazy</code>和常用的三方包<code>react-loadable</code>，都是使用了这个原理，然后配合webpack进行代码打包拆分达到异步加载，这样首屏渲染的速度将大大的提高。</p>
<p>由于<code>React.lazy</code>不支持服务端渲染，所以这时候<code>react-loadable</code>就是不错的选择。</p>
<p>2、如何使用<code>React.lazy</code></p>
<p>下面示例代码使用<code>create-react-app</code>脚手架搭建</p>
<h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><p><a href="https://github.com/jpuri/react-draft-wysiwyg">react-draft-wysiwyg</a>——GitHub</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save react-draft-wysiwyg draft-js</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Editor &#125; from &quot;react-draft-wysiwyg&quot;;</span><br><span class="line">import &quot;react-draft-wysiwyg/dist/react-draft-wysiwyg.css&quot;;</span><br><span class="line">&lt;Editor</span><br><span class="line">  editorState=&#123;editorState&#125;</span><br><span class="line">  toolbarClassName=&quot;toolbarClassName&quot;</span><br><span class="line">  wrapperClassName=&quot;wrapperClassName&quot;</span><br><span class="line">  editorClassName=&quot;editorClassName&quot;</span><br><span class="line">  onEditorStateChange=&#123;this.onEditorStateChange&#125;</span><br><span class="line">/&gt;;</span><br></pre></td></tr></table></figure>

<p><a href="https://jpuri.github.io/react-draft-wysiwyg/#/docs?_k=jjqinp">react-draft-wysiwyg-文档</a></p>
<h4 id="enzyme——GitHub"><a href="#enzyme——GitHub" class="headerlink" title="enzyme——GitHub"></a><a href="https://github.com/enzymejs/enzyme">enzyme</a>——GitHub</h4><p>用于 React 的 JS 测试工具</p>
<p><a href="https://blog.csdn.net/weixin_33860553/article/details/88004644">React测试框架之enzyme</a></p>
<p><a href="https://blog.csdn.net/weixin_37972723/article/details/102076907">Enzyme学习笔记</a></p>
<p><a href="https://blog.csdn.net/chenzhizhuo/article/details/104196969">React 测试利器之 Enzyme</a></p>
<p><a href="https://blog.csdn.net/m0_46995864/article/details/125365202">全网最细：Jest+Enzyme测试React组件（包含交互、DOM、样式测试）</a></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux笔记</title>
    <url>/2021/04/12/Redux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://github.com/reduxjs">Redux-Github</a></p>
<p><a href="https://redux.js.org/">Redux-官网</a></p>
<p><a href="http://cn.redux.js.org/">Redux 中文官网</a></p>
<p><a href="https://react-redux.js.org/">React Redux</a></p>
<p><a href="https://www.redux.org.cn/">Redux 中文文档</a></p>
<p><a href="https://redux-toolkit-cn.netlify.app/">Redux工具包-中文文档</a></p>
<p><a href="https://redux-toolkit.js.org/">Redux Toolkit</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/103420294">七步搞定React Redux</a></p>
<p><a href="https://blog.csdn.net/weixin_57218747/article/details/118070930">React-Redux</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1707122824099613498&wfr=spider&for=pc">「HearLing」React学习之路-redux、react-redux</a></p>
<p><a href="http://cn.redux.js.org/introduction/learning-resources">学习资源</a></p>
<p><a href="https://github.com/reduxjs/redux.git">示例</a></p>
<p><a href="https://www.jianshu.com/p/9dcfa43d4e5a">Redux（基本用法）</a></p>
<p><strong><a href="https://github.com/reduxjs/rtk-convert-todos-example">使用Redux工具包的示例—-rtk-convert-todos-example</a></strong></p>
<p>Redux 有很好的<a href="https://link.jianshu.com/?t=http://redux.js.org/">文档</a>，还有配套的小视频（<a href="https://link.jianshu.com/?t=https://egghead.io/courses/getting-started-with-redux">前30集</a>，<a href="https://link.jianshu.com/?t=https://egghead.io/courses/building-react-applications-with-idiomatic-redux">后30集</a>）</p>
<p>博客：<a href="http://www.javashuo.com/article/p-ruetjmbl-cg.html">React进阶(4)-拆分Redux-将store,Reducer,action,actionTypes独立管理</a></p>
<h4 id="createStore-reducer-preloadedState-enhancer"><a href="#createStore-reducer-preloadedState-enhancer" class="headerlink" title="createStore(reducer, [preloadedState], [enhancer])"></a><a href="http://cn.redux.js.org/api/createstore">createStore(reducer, [preloadedState], [enhancer])</a></h4><p><code>reducer</code> <em>(Function)</em>: 接收两个参数，分别是当前的 state 树和要处理的 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary#action">action</a>，返回新的 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary#state">state 树</a></p>
<p> Reducer 必须是<strong>纯函数</strong></p>
<p><strong>不要在 reducer 中调用 API 接口请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;redux&#x27;</span><br><span class="line"></span><br><span class="line">function todos(state = [], action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;ADD_TODO&#x27;:</span><br><span class="line">      return state.concat([action.text])</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let store = createStore(todos, [&#x27;Use Redux&#x27;])</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &#x27;ADD_TODO&#x27;,</span><br><span class="line">  text: &#x27;Read the docs&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// [ &#x27;Use Redux&#x27;, &#x27;Read the docs&#x27; ]</span><br></pre></td></tr></table></figure>

<h4 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士#"></a>小贴士<a href="http://cn.redux.js.org/api/createstore#%E5%B0%8F%E8%B4%B4%E5%A3%AB">#</a></h4><ul>
<li>应用中不要创建多个 store！相反，使用 <a href="http://cn.redux.js.org/api/combinereducers"><code>combineReducers</code></a> 来把多个 reducer 创建成一个根 reducer。</li>
<li>Redux state 通常是普通 JS 对象或者数组。</li>
<li>如果 state 是普通对象，永远不要修改它！比如，reducer 里不要使用 <code>Object.assign(state, newData)</code>，应该使用 <code>Object.assign(&#123;&#125;, state, newData)</code>。这样才不会覆盖旧的 <code>state</code>。如果可以的话，也可以使用 <a href="http://cn.redux.js.org/recipes/using-object-spread-operator">对象拓展操作符（object spread spread operator</a> 特性中的 <code>return &#123; ...state, ...newData &#125;</code>。</li>
<li>对于服务端运行的同构应用，为每一个请求创建一个 store 实例，以此让 store 相隔离。dispatch 一系列请求数据的 action 到 store 实例上，等待请求完成后再在服务端渲染应用。</li>
<li>当 store 创建后，Redux 会 dispatch 一个 action 到 reducer 上，来用初始的 state 来填充 store。你不需要处理这个 action。但要记住，如果第一个参数也就是传入的 state 是 <code>undefined</code> 的话，reducer 应该返回初始的 state 值。</li>
<li>要使用多个 store 增强器的时候，你可能需要使用 <a href="http://cn.redux.js.org/api/compose">compose</a></li>
</ul>
<h4 id="combineReducers-reducers"><a href="#combineReducers-reducers" class="headerlink" title="combineReducers(reducers)"></a><a href="http://cn.redux.js.org/api/combinereducers/">combineReducers(reducers)</a></h4><p><code>combineReducers</code> 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 <a href="http://cn.redux.js.org/api/createstore"><code>createStore</code></a> 方</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p><code>reducers/todos.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function todos(state = [], action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;ADD_TODO&#x27;:</span><br><span class="line">      return state.concat([action.text])</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reducers/counter.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function counter(state = 0, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;INCREMENT&#x27;:</span><br><span class="line">      return state + 1</span><br><span class="line">    case &#x27;DECREMENT&#x27;:</span><br><span class="line">      return state - 1</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reducers/index.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &#x27;redux&#x27;</span><br><span class="line">import todos from &#x27;./todos&#x27;</span><br><span class="line">import counter from &#x27;./counter&#x27;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">  todos,</span><br><span class="line">  counter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>App.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;redux&#x27;</span><br><span class="line">import reducer from &#x27;./reducers/index&#x27;</span><br><span class="line"></span><br><span class="line">let store = createStore(reducer)</span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;</span><br><span class="line">//   counter: 0,</span><br><span class="line">//   todos: []</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &#x27;ADD_TODO&#x27;,</span><br><span class="line">  text: &#x27;Use Redux&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;</span><br><span class="line">//   counter: 0,</span><br><span class="line">//   todos: [ &#x27;Use Redux&#x27; ]</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a><a href="http://cn.redux.js.org/api/store/#store-%E6%96%B9%E6%B3%95">Store</a></h4><h4 id="Store-1"><a href="#Store-1" class="headerlink" title="Store"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#store">Store</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; reducer: counterReducer &#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;value: 0&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 是把数据传入 store 的惟一途径，所以任何数据，无论来自 UI 事件，网络回调或者是其它资源如 WebSockets，最终都应该以 action 的形式被 dispatch</p>
<p><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#action"><strong>action</strong></a> 是一个具有 <code>type</code> 字段的普通 JavaScript 对象。<strong>你可以将 action 视为描述应用程序中发生了什么的事件</strong>.</p>
<p><code>type</code> 字段是一个字符串，给这个 action 一个描述性的名字，比如<code>&quot;todos/todoAdded&quot;</code>。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个 action 所属的特征或类别，第二部分是发生的具体事情。</p>
<p>action 对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为 <code>payload</code> 的字段中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const addTodoAction = &#123;</span><br><span class="line">  type: &#x27;todos/todoAdded&#x27;,</span><br><span class="line">  payload: &#x27;Buy milk&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#action-creator"><strong>action creator</strong></a> 是一个创建并返回一个 action 对象的函数。它的作用是让你不必每次都手动编写 action 对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const addTodo = text =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: &#x27;todos/todoAdded&#x27;,</span><br><span class="line">    payload: text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#reducer">Reducer</a></h4><p><strong>reducer</strong> 是一个函数，接收当前的 <code>state</code> 和一个 <code>action</code> 对象，必要时决定如何更新状态，并返回新状态。函数签名是：<code>(state, action) =&gt; newState</code>。 <strong>你可以将 reducer 视为一个事件监听器，它根据接收到的 action（事件）类型处理事件。</strong></p>
<ul>
<li>禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">function counterReducer(state = initialState, action) &#123;</span><br><span class="line">  // 检查 reducer 是否关心这个 action</span><br><span class="line">  if (action.type === &#x27;counter/increment&#x27;) &#123;</span><br><span class="line">    // 如果是，复制 `state`</span><br><span class="line">    return &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      // 使用新值更新 state 副本</span><br><span class="line">      value: state.value + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回原来的 state 不变</span><br><span class="line">  return state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#dispatch">Dispatch</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">store.dispatch(&#123; type: &#x27;counter/increment&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure>

<p>我们通常调用 action creator 来调用 action：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const increment = () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: &#x27;counter/increment&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(increment())</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;value: 2&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux 数据流"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#redux-%E6%95%B0%E6%8D%AE%E6%B5%81">Redux 数据流</a></h3><p>初始启动：</p>
<ul>
<li>使用最顶层的 root reducer 函数创建 Redux store</li>
</ul>
<p><img src="http://cn.redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="动画的方式来表达数据流更新"></p>
<h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p><img src="https://redux.js.org/assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif" alt="异步"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>Redux 是一个管理全局应用状态的库<ul>
<li>Redux 通常与 React-Redux 库一起使用，把 Redux 和 React 集成在一起</li>
<li>Redux Toolkit 是编写 Redux 逻辑的推荐方式</li>
</ul>
</li>
<li>Redux 使用 “单向数据流”<ul>
<li>State 描述了应用程序在某个时间点的状态，UI 基于该状态渲染</li>
<li>当应用程序中发生某些事情时：<ul>
<li>UI dispatch 一个 action</li>
<li>store 调用 reducer，随后根据发生的事情来更新 state</li>
<li>store 通知 UI state 发生了变化</li>
</ul>
</li>
<li>UI 基于新 state 重新渲染</li>
</ul>
</li>
<li>Redux 有这几种类型的代码<ul>
<li><em>Action</em> 是有 <code>type</code> 字段的纯对象，描述发生了什么</li>
<li><em>Reducer</em> 是纯函数，基于先前的 state 和 action 来计算新的 state</li>
<li>每当 dispatch 一个 action 后，<em>store</em> 就会调用 root reducer</li>
</ul>
</li>
</ul>
<h4 id="applyMiddleware-…middleware"><a href="#applyMiddleware-…middleware" class="headerlink" title="applyMiddleware(…middleware)"></a><a href="http://cn.redux.js.org/api/applymiddleware/">applyMiddleware(…middleware)</a></h4><p><a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a></p>
<p><a href="https://redux.js.org/usage/writing-logic-thunks">Writing Logic with Thunks</a></p>
<p>Middleware 是一个组合 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary/#dispatching-function">dispatch 函数</a> 的高阶函数，返回一个新的 dispatch 函数，通常将<a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary/#%E5%BC%82%E6%AD%A5-action">异步 action</a> 转换成 action</p>
<h3 id="subscribe-listener"><a href="#subscribe-listener" class="headerlink" title="subscribe(listener)"></a><a href="http://cn.redux.js.org/api/store#subscribelistener">subscribe(listener)</a></h3><p><a href="https://blog.csdn.net/weixin_40119412/article/details/120811920">Redux学习篇:关于store.subscribe()监听方法与取消监听的认识</a></p>
<blockquote>
<p>Store 允许使用store.subscribe方法设置<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>函数，一旦 State 发生变化，就自动执行这个函数。</p>
<p>store.subscribe方法返回一个函数，调用这个函数就可以解除监听</p>
</blockquote>
<h2 id="计数器示例应用程序"><a href="#计数器示例应用程序" class="headerlink" title="计数器示例应用程序"></a>计数器示例应用程序</h2><p>本项目使用 <a href="https://github.com/reduxjs/cra-template-redux">Create-React-App 的官方 Redux 模板</a> 创建。开箱即用，它已经配置了标准的 Redux 应用程序结构，使用 <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> 创建 Redux 存储和逻辑，以及 <a href="https://react-redux.js.org/">React-Redux</a> 将 Redux 存储和 React 组件连接在一起。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app redux-essentials-example --template redux</span><br></pre></td></tr></table></figure>

<h4 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h4><p><strong><a href="https://baijiahao.baidu.com/s?id=1707122824099613498&wfr=spider&for=pc">react-redux</a>发布了新的版本，与之前的contextAPI分离，提供对hooks的支持，那这不就更香了新的redux带来的改变</strong></p>
<ol>
<li><strong>「不再需要使用」</strong>mapStateToProps，mapDispatchToProps和connect来维护单独的container组件和UI组件，而是在组件中直接使用redux提供的hooks,读取redux中的state。</li>
<li>可以将任何现有的自定义<strong>「hooks与redux集成」</strong>，而不是将通过hooks创建的state，作为参数传递给其他hooks</li>
</ol>
<ul>
<li><p><strong>「useSelector：」</strong> 用于从Redux存储的state中提取值并订阅该state。</p>
</li>
<li><p><strong>「useDispatch：」</strong> 除了读取store中的state，还能dispatch actions更新store中的state。</p>
</li>
<li><p><strong>「useStore：」</strong> 用于获取创建的store实例</p>
</li>
</ul>
<h4 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#reading-state-from-the-store-with-useselector">useSelector</a></h4><p><span style="color:red">使用useSelector、useDispatch等HooksApi替代connect，减少模板代码。</span></p>
<p><code>useSelector</code> accepts a single function, which we call a <strong>selector</strong> function. <strong>A selector is a function that takes the entire Redux store state as its argument, reads some value from the state, and returns that result</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectTodos = state =&gt; state.todos</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectTotalCompletedTodos = state =&gt; &#123;</span><br><span class="line">  const completedTodos = state.todos.filter(todo =&gt; todo.completed)</span><br><span class="line">  return completedTodos.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; useSelector &#125; from &#x27;react-redux&#x27;</span><br><span class="line">import TodoListItem from &#x27;./TodoListItem&#x27;</span><br><span class="line"></span><br><span class="line">const selectTodos = state =&gt; state.todos</span><br><span class="line"></span><br><span class="line">const TodoList = () =&gt; &#123;</span><br><span class="line">  const todos = useSelector(selectTodos)</span><br><span class="line"></span><br><span class="line">  // since `todos` is an array, we can loop over it</span><br><span class="line">  const renderedListItems = todos.map(todo =&gt; &#123;</span><br><span class="line">    return &lt;TodoListItem key=&#123;todo.id&#125; todo=&#123;todo&#125; /&gt;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return &lt;ul className=&quot;todo-list&quot;&gt;&#123;renderedListItems&#125;&lt;/ul&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default TodoList</span><br></pre></td></tr></table></figure>

<blockquote>
<p>useSelector 自动为我们订阅了 Redux 存储！ 这样，任何时候分派一个动作，它都会立即再次调用它的选择器函数。 如果选择器返回的值与上次运行时相比发生了变化，useSelector 将强制我们的组件使用新数据重新渲染。 我们所要做的就是在我们的组件中调用 useSelector() 一次，它会为我们完成剩下的工作</p>
</blockquote>
<p>还值得注意的是，我们不必将选择器函数编写为单独的变量。您可以直接在 useSelector 调用中编写选择器函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const todos = useSelector(state =&gt; state.todos)</span><br></pre></td></tr></table></figure>

<h4 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#dispatching-actions-with-usedispatch">useDispatch</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; useDispatch &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">const Header = () =&gt; &#123;</span><br><span class="line">  const [text, setText] = useState(&#x27;&#x27;)</span><br><span class="line">  const dispatch = useDispatch()</span><br><span class="line"></span><br><span class="line">  const handleChange = e =&gt; setText(e.target.value)</span><br><span class="line"></span><br><span class="line">  const handleKeyDown = e =&gt; &#123;</span><br><span class="line">    const trimmedText = e.target.value.trim()</span><br><span class="line">    // If the user pressed the Enter key:</span><br><span class="line">    if (e.key === &#x27;Enter&#x27; &amp;&amp; trimmedText) &#123;</span><br><span class="line">      // Dispatch the &quot;todo added&quot; action with this text</span><br><span class="line">      dispatch(&#123; type: &#x27;todos/todoAdded&#x27;, payload: trimmedText &#125;)</span><br><span class="line">      // And clear out the text input</span><br><span class="line">      setText(&#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;What needs to be done?&quot;</span><br><span class="line">      autoFocus=&#123;true&#125;</span><br><span class="line">      value=&#123;text&#125;</span><br><span class="line">      onChange=&#123;handleChange&#125;</span><br><span class="line">      onKeyDown=&#123;handleKeyDown&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header</span><br></pre></td></tr></table></figure>

<p>hook 是一个 JS 函数，所以它不能自动从 store.js 中自动导入 store</p>
<p>We do this by <strong>rendering a <code>&lt;Provider&gt;</code> component around our entire <code>&lt;App&gt;</code>, and passing the Redux store as a prop to <code>&lt;Provider&gt;</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br><span class="line">import &#123; Provider &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  // Render a `&lt;Provider&gt;` around the entire `&lt;App&gt;`,</span><br><span class="line">  // and pass the Redux store to as a prop</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&#x27;root&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>React-Redux 与 React 结合使用的关键部分：</p>
<ul>
<li>Call the <code>useSelector</code> hook to read data in React components</li>
<li>Call the <code>useDispatch</code> hook to dispatch actions in React components</li>
<li>Put <code>&lt;Provider store=&#123;store&#125;&gt;</code> around your entire <code>&lt;App&gt;</code> component so that other components can talk to the store</li>
</ul>
<h3 id="Global-State-Component-State-and-Forms"><a href="#Global-State-Component-State-and-Forms" class="headerlink" title="Global State, Component State, and Forms"></a>Global State, Component State, and Forms</h3><p><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#react-redux-patterns">在 React + Redux 应用程序中，你的全局状态应该放在 Redux 存储中，而你的本地状态应该留在 React 组件中</a>：</p>
<ul>
<li>Do other parts of the application care about this data?</li>
<li>Do you need to be able to create further derived data based on this original data?</li>
<li>Is the same data being used to drive multiple components?</li>
<li>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</li>
<li>Do you want to cache the data (ie, use what’s in state if it’s already there instead of re-requesting it)?</li>
<li>Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?</li>
</ul>
<p><strong>Most form state probably shouldn’t be kept in Redux</strong></p>
<h3 id="Using-Multiple-Selectors-in-a-Component"><a href="#Using-Multiple-Selectors-in-a-Component" class="headerlink" title="Using Multiple Selectors in a Component"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#using-multiple-selectors-in-a-component">Using Multiple Selectors in a Component</a></h3><p><strong>We can call <code>useSelector</code> multiple times within one component</strong>. In fact, this is actually a good idea - <strong>each call to <code>useSelector</code> should always return the smallest amount of state possible</strong></p>
<h3 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a><a href="https://redux-toolkit.js.org/"><strong>Redux Toolkit</strong></a></h3><h4 id="Redux-Toolkit-是什么？"><a href="#Redux-Toolkit-是什么？" class="headerlink" title="Redux Toolkit 是什么？"></a><a href="http://cn.redux.js.org/redux-toolkit/overview/#redux-toolkit-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Redux Toolkit 是什么？</a></h4><blockquote>
<p>简化最常见场景下的 Redux 开发，包括配置 store、定义 reducer，不可变的更新逻辑、甚至可以立即创建整个状态的 “切片 slice”，而无需手动编写任何 action creator 或者 action type。它还包括使用最广泛的 Redux 插件，例如 Redux Thunk 用于异步逻辑，而 Reselect 用于编写选择器 selector 函数，因此你可以立即使用它们。</p>
</blockquote>
<h4 id="createSlice"><a href="#createSlice" class="headerlink" title="createSlice"></a><a href="https://redux-toolkit.js.org/api/createSlice">createSlice</a></h4><p>接受一组化 reducer 函数，一个 slice 切片名和初始状态 initial state，并自动生成具有相应 action creator 和 action type 的 slice reducer</p>
<h5 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; nanoid &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const id = nanoid()</span><br></pre></td></tr></table></figure>

<p><code>createSlice</code> will return an object that looks like：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name : string,</span><br><span class="line">    reducer : ReducerFunction,</span><br><span class="line">    actions : Record&lt;string, ActionCreator&gt;,</span><br><span class="line">    caseReducers: Record&lt;string, CaseReducer&gt;.</span><br><span class="line">    getInitialState: () =&gt; State</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: &quot;todos&quot;,</span><br><span class="line">  reducer: (state, action) =&gt; newState,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    addTodo: (payload) =&gt; (&#123;type: &quot;todos/addTodo&quot;, payload&#125;),</span><br><span class="line">    toggleTodo: (payload) =&gt; (&#123;type: &quot;todos/toggleTodo&quot;, payload&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  caseReducers: &#123;</span><br><span class="line">    addTodo: (state, action) =&gt; newState,</span><br><span class="line">    toggleTodo: (state, action) =&gt; newState,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="reducer不容许直接修改state"><a href="#reducer不容许直接修改state" class="headerlink" title="reducer不容许直接修改state"></a>reducer不容许直接修改state</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对原有的上一次的state作一次深拷贝,在Redux中,reducer不容许直接修改state</span><br><span class="line">// const newState = Object.assign(&#123;&#125;, state);</span><br><span class="line">const newState = JSON.parse(JSON.stringify(state));</span><br><span class="line">newState.inputValue = action.value; // 将新的value值赋值给newState</span><br><span class="line">return newState;</span><br></pre></td></tr></table></figure>



<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice, createAction &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line">import &#123; createStore, combineReducers &#125; from &#x27;redux&#x27;</span><br><span class="line"></span><br><span class="line">const incrementBy = createAction(&#x27;incrementBy&#x27;)</span><br><span class="line">const decrementBy = createAction(&#x27;decrementBy&#x27;)</span><br><span class="line"></span><br><span class="line">const counter = createSlice(&#123;</span><br><span class="line">  name: &#x27;counter&#x27;,</span><br><span class="line">  initialState: 0,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: (state) =&gt; state + 1,</span><br><span class="line">    decrement: (state) =&gt; state - 1,</span><br><span class="line">    multiply: &#123;</span><br><span class="line">      reducer: (state, action) =&gt; state * action.payload,</span><br><span class="line">      prepare: (value) =&gt; (&#123; payload: value || 2 &#125;), // fallback if the payload is a falsy value</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // &quot;builder callback API&quot;, recommended for TypeScript users</span><br><span class="line">  extraReducers: (builder) =&gt; &#123;</span><br><span class="line">    builder.addCase(incrementBy, (state, action) =&gt; &#123;</span><br><span class="line">      return state + action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">    builder.addCase(decrementBy, (state, action) =&gt; &#123;</span><br><span class="line">      return state - action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const user = createSlice(&#123;</span><br><span class="line">  name: &#x27;user&#x27;,</span><br><span class="line">  initialState: &#123; name: &#x27;&#x27;, age: 20 &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    setUserName: (state, action) =&gt; &#123;</span><br><span class="line">      state.name = action.payload // mutate the state all you want with immer</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // &quot;map object API&quot;</span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [counter.actions.increment]: (</span><br><span class="line">      state,</span><br><span class="line">      action /* action will be inferred as &quot;any&quot;, as the map notation does not contain type information */</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">      state.age += 1</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const reducer = combineReducers(&#123;</span><br><span class="line">  counter: counter.reducer,</span><br><span class="line">  user: user.reducer,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">store.dispatch(counter.actions.increment())</span><br><span class="line">// -&gt; &#123; counter: 1, user: &#123;name : &#x27;&#x27;, age: 21&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.increment())</span><br><span class="line">// -&gt; &#123; counter: 2, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.multiply(3))</span><br><span class="line">// -&gt; &#123; counter: 6, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.multiply())</span><br><span class="line">// -&gt; &#123; counter: 12, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">console.log(`$&#123;counter.actions.decrement&#125;`)</span><br><span class="line">// -&gt; &quot;counter/decrement&quot;</span><br><span class="line">store.dispatch(user.actions.setUserName(&#x27;eric&#x27;))</span><br><span class="line">// -&gt; &#123; counter: 12, user: &#123; name: &#x27;eric&#x27;, age: 22&#125; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="createAction"><a href="#createAction" class="headerlink" title="createAction"></a><a href="https://redux-toolkit.js.org/api/createAction">createAction</a></h4><p>创建actions的原先做法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const INCREMENT = &#x27;counter/increment&#x27;</span><br><span class="line"></span><br><span class="line">function increment(amount) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: INCREMENT,</span><br><span class="line">    payload: amount,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const action = increment(3)</span><br><span class="line">// &#123; type: &#x27;counter/increment&#x27;, payload: 3 &#125;</span><br></pre></td></tr></table></figure>

<p>The <code>createAction</code> helper combines these two declarations into one. It takes an action type and returns an action creator for that type. The action creator can be called either without arguments or with a <code>payload</code> to be attached to the action. Also, the action creator overrides <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">toString()</a> so that the action type becomes its string representation.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line"></span><br><span class="line">let action = increment()</span><br><span class="line">// &#123; type: &#x27;counter/increment&#x27; &#125;</span><br><span class="line"></span><br><span class="line">action = increment(3)</span><br><span class="line">// returns &#123; type: &#x27;counter/increment&#x27;, payload: 3 &#125;</span><br><span class="line"></span><br><span class="line">console.log(increment.toString())</span><br><span class="line">// &#x27;counter/increment&#x27;</span><br><span class="line"></span><br><span class="line">console.log(`The action type is: $&#123;increment&#125;`)</span><br><span class="line">// &#x27;The action type is: counter/increment&#x27;</span><br></pre></td></tr></table></figure>



<p><code>createAction</code> accepts an optional second argument: a “prepare callback” that will be used to construct the payload value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, nanoid &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const addTodo = createAction(&#x27;todos/add&#x27;, function prepare(text) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    payload: &#123;</span><br><span class="line">      text,</span><br><span class="line">      id: nanoid(),</span><br><span class="line">      createdAt: new Date().toISOString(),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(addTodo(&#x27;Write more docs&#x27;))</span><br><span class="line">/**</span><br><span class="line"> * &#123;</span><br><span class="line"> *   type: &#x27;todos/add&#x27;,</span><br><span class="line"> *   payload: &#123;</span><br><span class="line"> *     text: &#x27;Write more docs&#x27;,</span><br><span class="line"> *     id: &#x27;4AJvwMSWEHCchcWYga3dj&#x27;,</span><br><span class="line"> *     createdAt: &#x27;2019-10-03T07:53:36.581Z&#x27;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> **/</span><br></pre></td></tr></table></figure>

<h4 id="Usage-with-createReducer"><a href="#Usage-with-createReducer" class="headerlink" title="Usage with createReducer()"></a><a href="https://redux-toolkit.js.org/api/createAction">Usage with createReducer()</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, createReducer &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line">const decrement = createAction(&#x27;counter/decrement&#x27;)</span><br><span class="line"></span><br><span class="line">const counterReducer = createReducer(0, (builder) =&gt; &#123;</span><br><span class="line">  builder.addCase(increment, (state, action) =&gt; state + action.payload)</span><br><span class="line">  builder.addCase(decrement, (state, action) =&gt; state - action.payload)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="builder-addCase"><a href="#builder-addCase" class="headerlink" title="builder.addCase"></a><a href="https://redux-toolkit.js.org/api/createReducer#builderaddcase">builder.addCase</a></h4><h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h4><ul>
<li><strong>actionCreator</strong> Either a plain action type string, or an action creator generated by <a href="https://redux-toolkit.js.org/api/createAction"><code>createAction</code></a> that can be used to determine the action type.</li>
<li><strong>reducer</strong> The actual case reducer function.</li>
</ul>
<h4 id="createReducer"><a href="#createReducer" class="headerlink" title="createReducer()"></a><a href="https://redux-toolkit.js.org/api/createReducer">createReducer()</a></h4><p>Redux <a href="https://redux.js.org/basics/reducers">reducers</a> are often implemented using a <code>switch</code> statement, with one <code>case</code> for every handled action type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">function counterReducer(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value + 1 &#125;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value - 1 &#125;</span><br><span class="line">    case &#x27;incrementByAmount&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value + action.payload &#125;</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With <code>createReducer</code>, your reducers instead look like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, createReducer &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line">const decrement = createAction(&#x27;counter/decrement&#x27;)</span><br><span class="line">const incrementByAmount = createAction(&#x27;counter/incrementByAmount&#x27;)</span><br><span class="line"></span><br><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">const counterReducer = createReducer(initialState, (builder) =&gt; &#123;</span><br><span class="line">  builder</span><br><span class="line">    .addCase(increment, (state, action) =&gt; &#123;</span><br><span class="line">      state.value++</span><br><span class="line">    &#125;)</span><br><span class="line">    .addCase(decrement, (state, action) =&gt; &#123;</span><br><span class="line">      state.value--</span><br><span class="line">    &#125;)</span><br><span class="line">    .addCase(incrementByAmount, (state, action) =&gt; &#123;</span><br><span class="line">      state.value += action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="Parameters-1"><a href="#Parameters-1" class="headerlink" title="Parameters"></a>Parameters</h5><ul>
<li><p><strong>initialState</strong> <code>State | (() =&gt; State)</code>:</p>
</li>
<li><p><strong>builderCallback</strong> <code>(builder: Builder) =&gt; void</code>      <code> builder.addCase(actionCreatorOrType, reducer)</code></p>
</li>
</ul>
<h4 id="configureStore"><a href="#configureStore" class="headerlink" title="configureStore"></a><a href="https://redux-toolkit.js.org/api/configureStore">configureStore</a></h4><h4 id="getDefaultMiddleware"><a href="#getDefaultMiddleware" class="headerlink" title="getDefaultMiddleware"></a><a href="https://redux-toolkit.js.org/api/getDefaultMiddleware">getDefaultMiddleware</a></h4><p><a href="https://redux-toolkit-cn.netlify.app/tutorials/intermediate-tutorial">Redux工具包-使用教程</a></p>
<h4 id="Store数据-持久化"><a href="#Store数据-持久化" class="headerlink" title="Store数据-持久化"></a>Store数据-持久化</h4><p><a href="https://blog.csdn.net/weixin_47077674/article/details/122617851?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165025080216782246469362%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165025080216782246469362&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-122617851.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E5%A6%82%E4%BD%95%E5%9C%A8React%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E7%9A%84%E7%8A%B6%E6%80%81%E6%8C%81%E4%B9%85%E5%8C%96&spm=1018.2226.3001.4187">如何在React中实现全局数据的状态持久化？一篇文章让你看懂状态持久化</a></p>
<p><a href="https://www.jianshu.com/p/59a85632d781">react-几步搞定redux-persist-持久化存储</a></p>
<h5 id="src-app-RootReducers-js"><a href="#src-app-RootReducers-js" class="headerlink" title="src/app/RootReducers.js"></a>src/app/RootReducers.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &quot;@reduxjs/toolkit&quot;;</span><br><span class="line">import userReducer from &quot;../reducers/userSlice&quot;;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    user: userReducer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="src-app-store-js"><a href="#src-app-store-js" class="headerlink" title="src/app/store.js"></a>src/app/store.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;;</span><br><span class="line">import &#123; persistStore, persistReducer &#125; from &#x27;redux-persist&#x27;;</span><br><span class="line">import storage from &#x27;redux-persist/lib/storage&#x27;;</span><br><span class="line">import rootReducer from &#x27;./RootReducers&#x27;;</span><br><span class="line"></span><br><span class="line">const persistConfig = &#123;</span><br><span class="line">  key: &#x27;root&#x27;,</span><br><span class="line">  storage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const persistedReducer = persistReducer(</span><br><span class="line">  persistConfig,</span><br><span class="line">  rootReducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export const store = configureStore(&#123;</span><br><span class="line">  reducer: persistedReducer,</span><br><span class="line">  middleware: (getDefaultMiddleware) =&gt;</span><br><span class="line">    getDefaultMiddleware(&#123;</span><br><span class="line">      serializableCheck: false,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">export const persistor = persistStore(store)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; Provider &#125; from &#x27;react-redux&#x27;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import &#x27;./index.css&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">import * as serviceWorker from &#x27;./serviceWorker&#x27;;</span><br><span class="line">import &#123; store, persistor &#125; from &#x27;./app/store&#x27;;</span><br><span class="line">import &#123; PersistGate &#125; from &quot;redux-persist/integration/react&quot;</span><br><span class="line"></span><br><span class="line">import &#123; createRoot &#125; from &#x27;react-dom/client&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;root&#x27;);</span><br><span class="line">const root = createRoot(container);</span><br><span class="line">root.render(</span><br><span class="line">    &lt;React.StrictMode&gt;</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt;</span><br><span class="line">                &lt;BrowserRouter&gt;</span><br><span class="line">                    &lt;App/&gt;</span><br><span class="line">                &lt;/BrowserRouter&gt;</span><br><span class="line">            &lt;/PersistGate&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">    &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// If you want your app to work offline and load faster, you can change</span><br><span class="line">// unregister() to register() below. Note this comes with some pitfalls.</span><br><span class="line">// Learn more about service workers: https://bit.ly/CRA-PWA</span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=&quot;/&quot; element=&#123;&lt;Container/&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/home&quot; element=&#123;&lt;Home /&gt;&#125;&gt;</span><br><span class="line">          &lt;Route path=&quot;/home/:id&quot; element=&#123;&lt;Home /&gt;&#125; /&gt;</span><br><span class="line">        &lt;/Route&gt; */&#125;</span><br><span class="line">        &#123;/* &lt;Route path=&quot;/product&quot; element=&#123;&lt;Container /&gt;&#125;&gt;</span><br><span class="line">          &lt;Route path=&quot;/product/add&quot; element=&#123;&lt;AddProduct /&gt;&#125; /&gt;</span><br><span class="line">          &lt;Route path=&quot;/product/edit/:id&quot; element=&#123;&lt;EditProduct /&gt;&#125; /&gt;</span><br><span class="line">        &lt;/Route&gt; */&#125;</span><br><span class="line"></span><br><span class="line">      &#123;/* &lt;/Routes&gt; */&#125;</span><br></pre></td></tr></table></figure>



<h4 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React Redux"></a><a href="https://react-redux.js.org/">React Redux</a></h4><h4 id="redux-persist"><a href="#redux-persist" class="headerlink" title="redux-persist"></a><a href="https://github.com/rt2zz/redux-persist">redux-persist</a></h4><p><a href="https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist">Use with Redux-Persist</a></p>
<h4 id="Redux-Toolkit–使用教程"><a href="#Redux-Toolkit–使用教程" class="headerlink" title="Redux Toolkit–使用教程"></a><a href="https://redux-toolkit.js.org/tutorials/quick-start">Redux Toolkit–使用教程</a></h4>]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG图片的使用</title>
    <url>/2019/07/29/SVG%E5%9B%BE%E7%89%87%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>CSS也可以使用SVG文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">    background: url(icon.svg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SVG文件还可以转为BASE64编码，然后作为Data URL写入网页。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;data:image/svg+xml; base64, [data]&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>2.1<code>&lt;svg&gt;</code>标签<br>SVG代码都放在顶层标签<code>&lt;svg&gt;</code>之中。下面是一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;&quot;1O0%&quot; height=&quot;&quot;100%&quot;&gt;</span><br><span class="line">    &lt;circle id=&quot;mycircle&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;50&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>width属性和height属性，制定了SVG图像在HTML元素中所占据的宽度和高度。除了相对单位，也可以采用绝对单位（单位︰像素)。如果不指定这两个属性，SVG图像默认大小是300像素（宽）*150像素（高)。<br>如果只想展示SG图像的一部分，就要指定viewBox属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;50 50 50 50&quot;&gt;</span><br><span class="line">	&lt;circle id=&quot;mycircle&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;50&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>viewBox属性的值有四个数字，分别是左上角的横坐标和纵坐标、视口的高度和宽度。上面代码中，SVG图像是<code>100像素宽*100像素高</code>，viewBox属性指定视口从（ 50，50 )这个点开始。所以，实际看到的是右下角的四分之一圆。<br>注意，视口必须适配所在的空间。上面代码中，视口的大小是<code>50*50</code>，由于SVG图像的大小是<code>100*100</code>，所以视口会放大去适配SVG图像的大小，即放大了四倍。</p>
<p>如果不指定width属性和height属性，只指定viewBox属性，则相当于只给到定SVG图像的长宽比。这时，SVG图像的默认大小将等于所在的HTML元素的大小。</p>
<p>2.2<code>&lt;circle&gt;</code>标签<br><code>&lt;circle&gt;</code>标签代表圆形。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">    &lt;circle cx=&quot;30&quot; cy=&quot;50&quot; r=&quot;25&quot;/&gt;</span><br><span class="line">    &lt;circle cx=&quot;90&quot; cy=&quot;50&quot; r=&quot;25&quot; c1ass=&quot;red&quot;/&gt;</span><br><span class="line">    &lt;circle cx=&quot;150&quot; cy=&quot;50&quot; r=&quot;25&quot; class=&quot;fancy&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了三个园。<code>&lt;circle&gt;</code>标签的cx、cy、r属性分别为横坐标、纵坐标和半径，单位为像素。坐标都是相对于<code>&lt;svg&gt;</code>画布的左上角原点。<br>class属性用来指定对应的CSS类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.red &#123;</span><br><span class="line">    fill: red;</span><br><span class="line">&#125;</span><br><span class="line">.fancy &#123;</span><br><span class="line">    fill: none;</span><br><span class="line">    stroke: black;</span><br><span class="line">    stroke-width:3pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SVG的CSS属性与网页元素有所不同。</p>
<ul>
<li>fill：填充色</li>
<li>stroke：描边色</li>
<li>stroke-width：边框宽度</li>
</ul>
<p>2.3<code>&lt;line&gt;</code>标签<br><code>&lt;line&gt;</code>标签用来绘制直线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;180&quot;&gt;</span><br><span class="line">	&lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;200&quot; y2=&quot;0&quot; style=&quot;stroke:rgb(0,0,0);stroke-width:5;&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;line&gt;</code>标签的×1属性和y1属性，表示线段起点的横坐标和纵坐标;x2属性和y2属性，表示线段终点的横坐标和纵坐标; style属性表示线段的样式。</p>
<p>2.4<code> &lt;polyline&gt;</code>标签<br><code>&lt;polyline&gt;</code>标签用于绘制—根折线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;polyline points=&quot;3,3 30,28 3,53&quot; fill=&quot;none&quot; stroke=&quot;black&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;polyline&gt;</code>的points属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p>
<p>2.5<code>&lt;rect&gt;</code>标签</p>
<p><code>&lt;rect&gt;</code>标签用于绘制矩形</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;rect x=&quot;0&quot; y=&quot;0&quot; height=&quot;100&quot; width=&quot;200&quot; style=&quot;stroke:#70d5dd; fill: #dd524b&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;rect&gt;</code>的x属性和y属性，指定了矩形左上角端点的横坐标和纵坐标；width属性和height属性指定了矩形的宽度和高度（单位像素)。</p>
<p>2.6<code>&lt;ellipse&gt;</code>标签</p>
<p><code>&lt;ellipse&gt;</code>标签用于绘制椭圆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;ellipse cx=&quot;60&quot; cy=&quot;60&quot; rx=&quot;40&quot; ry=&quot;20&quot; stroke=&quot;black&quot; stroke-width=&quot;5&quot; fill=&quot;silver&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;ellipse&gt;</code>的cx属性和cy属性，指定了椭圆中心的横坐标和纵坐标（单位像素）; rx属性和ry属性，指定了椭圆横向轴和纵向轴的半径（单位像素）。</p>
<p>2.7<code>&lt;polygon&gt;</code>标签</p>
<p><code>&lt;polygon&gt;</code>标签用于绘制多边形</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;polygon fill: &quot;green&quot; stroke=&quot;orange&quot; stroke-width=&quot;1&quot; points=&quot;0,0 100,0 100,100 0,100 0,0&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;polygon&gt;</code>的points属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p>
<p>2.8<code>&lt;path&gt;</code>标签</p>
<p><code>&lt;path&gt;</code>标签用于制路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;180&quot;&gt;</span><br><span class="line">	&lt;path d=&quot;</span><br><span class="line">		M 18,3</span><br><span class="line">		L 46,3</span><br><span class="line">		L 46,40</span><br><span class="line">		L 61,40</span><br><span class="line">		L 32,68</span><br><span class="line">		L 3,40</span><br><span class="line">		L 18,40</span><br><span class="line">		Z</span><br><span class="line">    &quot;&gt;&lt;/path&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;path&gt;</code>的d属性表示绘制顺序，它的值是一个长字符串，每个字母表示一个绘制动作，后面跟着坐标。</p>
<ul>
<li>M：移动到( moveto )</li>
<li>L：画直线到( lineto )</li>
<li>Z：闭合路径</li>
</ul>
<p>2.9<code>&lt;text&gt;</code>标签</p>
<p><code>&lt;text&gt;</code>标签用于绘制文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;text x=&quot;50&quot; y=&quot;25&quot;&gt;He11o world&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>2.10<code>&lt;use&gt;</code>标签</p>
<p><code>&lt;use&gt;</code>标签用于复制一个形状</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg viewBox=&quot;0 0 30 10&quot; xm7ns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">    &lt;circle id=&quot;mycircle&quot; cx=&quot;5&quot; cy=&quot;5&quot; r=&quot;4&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;10&quot; y=&quot;0&quot; fill=&quot;blue&quot;/&gt;</span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;20&quot;y=&quot;0&quot; fill=&quot;white&quot; stroke=&quot;blue&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;use&gt;</code>的href属性指定所要复制的节点，x属性和y属性是左上角的坐标。 另外，还可以指定width和height坐标。</p>
<p>2.11<code>&lt;g&gt;</code>标签</p>
<p><code>&lt;g&gt;</code>标签用于将多个形状组成一个组( group ) ，方便复用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;100&quot;&gt;</span><br><span class="line">    &lt;g id=&quot;mycircle&quot;&gt;</span><br><span class="line">        &lt;text x=&quot;25&quot; y=&quot;20&quot;&gt;圆形&lt;/text&gt;</span><br><span class="line">        &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;20&quot; /&gt;</span><br><span class="line">    &lt;/g&gt;</span><br><span class="line"></span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;100&quot; y=&quot;0&quot; fill=&quot;b1ue&quot;/&gt;</span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;200&quot; y=&quot;0&quot; fill=&quot;white&quot; stroke=&quot;blue&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>2.12<code>&lt;defs&gt;</code>标签</p>
<p><code>&lt;defs&gt;</code>标签用于自定义形状，它内部的代码不会显示，仅供引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;100&quot;&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;g id=&quot;mycircle&quot;&gt;</span><br><span class="line">            &lt;text x=&quot;25&quot; y=&quot;20&quot;&gt;圆形&lt;/text&gt;</span><br><span class="line">            &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;20&quot; /&gt;</span><br><span class="line">        &lt;/g&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;0&quot; y=&quot;0&quot;/&gt;</span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;100&quot; y=&quot;0&quot; fill=&quot;blue&quot;/&gt;</span><br><span class="line">    &lt;use href=&quot;#myCircle&quot; x=&quot;200&quot; y=&quot;0&quot; fill=&quot;white&quot; stroke=&quot;blue&#x27;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>2.13<code>&lt;pattern&gt;</code>标签</p>
<p><code>&lt;pattern&gt;</code>标签用于自定义一个形状，该形状可以被引用来平铺一个区域。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;500&quot; height=&quot;500&quot;&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;pattern id=&quot;dots&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;100&quot; patternunits=&quot;userspaceonuse&quot;&gt;</span><br><span class="line">            &lt;circle fill=&quot;#bee9e8&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;35&quot;/&gt;</span><br><span class="line">        &lt;/pattern&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">    &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;ur1(#dots)&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;pattern&gt;</code>标签将一个圆形定义为dots模式。<code>patternunits=&quot;userspaceonuse&quot;</code>表示<code>&lt;pattern&gt;</code></p>
<p>的宽度和长度是实际的像素值。然后，指定这个模式去填充下面的矩形。</p>
<p>2.14<code>&lt;image&gt;</code>标签</p>
<p><code>&lt;image&gt;</code>标签用于插入图片文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg viewBox=&quot;0 0 100 100&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;</span><br><span class="line">    &lt;image xlink:href=&quot;path/to/image.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;image&gt;</code>的<code>xlink:href</code>属性表示图像的来源。</p>
<p>2.15<code>&lt;animate&gt;</code>标签</p>
<p><code>&lt;animate&gt;</code>标签用于产生动画效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;500px&quot; height=&quot;500px&quot;&gt;</span><br><span class="line">    &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;100&quot; fill=&quot;#feac5e&quot;&gt;</span><br><span class="line">        &lt;animate attributeName=&quot;x&quot; from=&quot;0&quot; to=&quot;500&quot; dur=&quot;2s&quot; repeatCount=&quot;indefinite&quot;/&gt;</span><br><span class="line">    &lt;/rect&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，矩形会不断移动，产生动画效果。</p>
<p><code>&lt;animate&gt;</code>的属性含义如下：</p>
<p>attributeName ：发生动画效果的属性名。</p>
<p>from：单次动画的初始值。</p>
<p>to：单次动画的结束值。</p>
<p>dur：单次动画的持续时间。</p>
<p>repeatCount：动画的循环模式。</p>
<p>可以在多个属性上面定义动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;animate attributeName=&quot;x&quot; from=&quot;0&quot; to=&quot;500&quot; dur=&quot;2s&quot; repeatcount=&quot;indefinite&quot;/&gt;</span><br><span class="line">&lt;animate attributeName=&quot;width&quot; to=&quot;500&quot; dur=&quot;2s&quot; repeatCount=&quot;indefinite&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>2.16<code>&lt;animateTransform&gt;</code>标签</p>
<p><code>&lt;animateTransform&gt;</code>标签对CSS的transform属性不起作用，如果需要变形，就要使用<code>&lt;animateTransform&gt;</code>标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;500px&quot; height=&quot;500px&quot;&gt;</span><br><span class="line">    &lt;rect x=&quot;250&quot; y=&quot;250&quot; width=&quot;50&quot; height=&quot;50&quot; fill=&quot;#4bcOc8&quot;&gt;</span><br><span class="line">        &lt;animateTransform attributeName=&quot;transform&quot; type=&quot;rotate&quot; begin=&quot;0s&quot; dur=&quot;10s&quot;</span><br><span class="line">     from=&quot;0 200 200&quot; to=&quot;360 400 400&quot; repeatcount=&quot;indefinite&quot;/&gt;</span><br><span class="line">     &lt;/rect&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;animateTransform&gt;</code>的效果为旋转( rotate )，这时from和to属性值有三个数字，第一个数字是</p>
<p>角度值，第二个值和第三个值是旋转中心的坐标。<code>from=&quot;0 200 200&quot;</code>表示开始时，角度为0，围绕(200,200)开始</p>
<p>旋转；<code>to=&quot;360 400 400&quot;</code>表示结束时，角度为360，围绕(400，400)旋转。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>React-笔记</title>
    <url>/2021/03/02/React-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://reactjs.org/">React官网</a></p>
<p><a href="https://create-react-app.dev/">Create React App</a></p>
<h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app">创建应用</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>



<p>react使用Apifox的项目案例，可参考<code>Gitee/ad_manage_react</code>项目</p>
<p>json-server的使用，可参考<code>全球新闻发布系统项目</code></p>
<h4 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h4><p>与页面或后续页面的任何交互，都不再需要往返 server 加载资源，即页面不会重新加载</p>
<h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p><a href="https://babeljs.io/">Babel</a> 是 React 最常用的 compiler</p>
<h4 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h4><p>常用的打包 React 应用的工具有 <a href="https://webpack.js.org/">webpack</a> 和 <a href="http://browserify.org/">Browserify</a>。</p>
<h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><p><a href="https://www.npmjs.com/">npm</a> 和 <a href="https://yarnpkg.com/">Yarn</a> 是两个常用的管理 React 应用依赖的 package 管理工具</p>
<h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>React DOM 使用 camelCase（驼峰式命名）来定义属性的名称</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>组件名称应该始终以大写字母开头（<code>&lt;Wrapper/&gt;</code> <strong>而不是</strong> <code>&lt;wrapper/&gt;</code>）</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p><code>props</code> 是只读的。不应以任何方式修改它们</p>
<h4 id="组合-vs-继承"><a href="#组合-vs-继承" class="headerlink" title="组合 vs 继承"></a><a href="https://react.docschina.org/docs/composition-vs-inheritance.html">组合 vs 继承</a></h4><h4 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a><a href="https://react.docschina.org/docs/composition-vs-inheritance.html#containment">props.children</a></h4><p>每个组件都可以获取到 <code>props.children</code>。它包含组件的开始标签和结束标签之间的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Welcome&gt;Hello world!&lt;/Welcome&gt;</span><br></pre></td></tr></table></figure>

<p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 <code>children</code>，而是自行约定：将所需内容传入 props，并使用相应的 prop。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SplitPane(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;SplitPane&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;SplitPane-left&quot;&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=&quot;SplitPane-right&quot;&gt;</span><br><span class="line">        &#123;props.right&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SplitPane</span><br><span class="line">      left=&#123;</span><br><span class="line">        &lt;Contacts /&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dialog(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;FancyBorder color=&quot;blue&quot;&gt;</span><br><span class="line">      &lt;h1 className=&quot;Dialog-title&quot;&gt;</span><br><span class="line">        &#123;props.title&#125;      &lt;/h1&gt;</span><br><span class="line">      &lt;p className=&quot;Dialog-message&quot;&gt;</span><br><span class="line">        &#123;props.message&#125;      &lt;/p&gt;</span><br><span class="line">    &lt;/FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function WelcomeDialog() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Dialog      title=&quot;Welcome&quot;      message=&quot;Thank you for visiting our spacecraft!&quot; /&gt;  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dialog(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;FancyBorder color=&quot;blue&quot;&gt;</span><br><span class="line">      &lt;h1 className=&quot;Dialog-title&quot;&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &lt;p className=&quot;Dialog-message&quot;&gt;</span><br><span class="line">        &#123;props.message&#125;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;/FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SignUpDialog extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    this.handleSignUp = this.handleSignUp.bind(this);</span><br><span class="line">    this.state = &#123;login: &#x27;&#x27;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Dialog title=&quot;Mars Exploration Program&quot;</span><br><span class="line">              message=&quot;How should we refer to you?&quot;&gt;</span><br><span class="line">        &lt;input value=&#123;this.state.login&#125;</span><br><span class="line">               onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleSignUp&#125;&gt;</span><br><span class="line">          Sign Me Up!</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/Dialog&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.setState(&#123;login: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSignUp() &#123;</span><br><span class="line">    alert(`Welcome aboard, $&#123;this.state.login&#125;!`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>当组件中的一些数据在某些时刻发生变化时，这时就需要使用 <code>state</code> 来跟踪状态</p>
<p><code>state</code> 和 <code>props</code> 之间最重要的区别是：<code>props</code> 由父组件传入，而 <code>state</code> 由组件本身管理。组件不能修改 <code>props</code>，但它可以修改 <code>state</code>。</p>
<h4 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class">生命周期方法</a></h4><h4 id="受控组件-vs-非受控组件"><a href="#受控组件-vs-非受控组件" class="headerlink" title="受控组件 vs 非受控组件"></a><a href="https://zh-hans.reactjs.org/docs/forms.html#controlled-components">受控组件</a> vs <a href="https://zh-hans.reactjs.org/docs/uncontrolled-components.html">非受控组件</a></h4><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">Ref</a></h4><h4 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a><a href="https://zh-hans.reactjs.org/docs/lifting-state-up.html">状态提升</a></h4><h4 id="应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？"><a href="#应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？" class="headerlink" title="应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？"></a>应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？</h4><p>在 <a href="https://zh-hans.reactjs.org/docs/react-component.html#mounting"><code>componentDidMount</code></a> 这个生命周期函数中发起 AJAX 请求</p>
<h4 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#more-flexible-toolchains">工具链</a></h4><h4 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h4><p>所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS（cross-site-scripting, 跨站脚本）</a>攻击</p>
<h4 id="JSX-表示对象"><a href="#JSX-表示对象" class="headerlink" title="JSX 表示对象"></a>JSX 表示对象</h4><p>Babel 会把 JSX 转译成一个名为 <code>React.createElement()</code> 函数调用</p>
<p><code>React.createElement()</code> 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意：这是简化过的结构</span><br><span class="line">const element = &#123;</span><br><span class="line">  type: &#x27;h1&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: &#x27;greeting&#x27;,</span><br><span class="line">    children: &#x27;Hello, world!&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这些对象被称为 “<strong>React 元素</strong>”。</p>
<p><strong>仅使用 React 构建的应用通常只有单一的根 DOM 节点</strong>。如果你在将 React 集成进一个已有应用，那么你可以在应用中包含任意多的独立根 DOM 节点。</p>
<p>React 元素是<a href="https://en.wikipedia.org/wiki/Immutable_object">不可变对象</a>。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p>
<h4 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h4><p>组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。</p>
<p>建议从组件自身的角度命名 props，而不是依赖于调用组件的上下文命名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Avatar user=&#123;props.author&#125; /&gt;</span><br><span class="line"></span><br><span class="line">function Avatar(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;img className=&quot;Avatar&quot;</span><br><span class="line">      src=&#123;props.user.avatarUrl&#125;</span><br><span class="line">      alt=&#123;props.user.name&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改</strong></p>
<h4 id="不要直接修改-State"><a href="#不要直接修改-State" class="headerlink" title="不要直接修改 State"></a>不要直接修改 State</h4><p>应该使用 <code>setState()</code></p>
<p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方</p>
<h4 id="State-的更新可能是异步的"><a href="#State-的更新可能是异步的" class="headerlink" title="State 的更新可能是异步的"></a><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">State 的更新可能是异步的</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Wrong</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  counter: this.state.counter + this.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Correct</span><br><span class="line">this.setState((state, props) =&gt; (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;unreadMessages.length &gt; 0 &amp;&amp;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">      You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符 &amp;&amp;"></a>与运算符 &amp;&amp;</h4><p><code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p>
<p>注意：下面示例中，render 方法的返回值是 <code>&lt;div&gt;0&lt;/div&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; count &amp;&amp; &lt;h1&gt;Messages: &#123;count&#125;&lt;/h1&gt;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The user is &lt;b&gt;&#123;isLoggedIn ? &#x27;currently&#x27; : &#x27;not&#x27;&#125;&lt;/b&gt; logged in.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;isLoggedIn</span><br><span class="line">    ? &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;</span><br><span class="line">    : &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a><a href="https://zh-hans.reactjs.org/docs/conditional-rendering.html">阻止组件渲染</a></h4><p>让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染</p>
<h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><p>表单元素（如<code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）通常自己维护 state</p>
<h4 id="文件-input-标签"><a href="#文件-input-标签" class="headerlink" title="文件 input 标签"></a>文件 input 标签</h4><p>因为它的 value 只读，所以它是 React 中的一个<strong>非受控</strong>组件</p>
<h4 id="处理多个输入"><a href="#处理多个输入" class="headerlink" title="处理多个输入"></a>处理多个输入</h4><p>当需要处理多个 <code>input</code> 元素时，我们可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleInputChange(event) &#123;</span><br><span class="line">    const target = event.target;</span><br><span class="line">    const value = target.name === &#x27;isGoing&#x27; ? target.checked : target.value;</span><br><span class="line">    const name = target.name;</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      [name]: value</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同 ES5:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var partialState = &#123;&#125;;</span><br><span class="line">partialState[name] = value;this.setState(partialState);</span><br></pre></td></tr></table></figure>

<h4 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组合-vs-继承-1"><a href="#组合-vs-继承-1" class="headerlink" title="组合 vs 继承"></a>组合 vs 继承</h3><h4 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h4><p>有些组件无法提前知晓它们子组件的具体内容。在 <code>Sidebar</code>（侧边栏）和 <code>Dialog</code>（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。</p>
<p>我们建议这些组件使用一个特殊的 <code>children</code> prop 来将他们的子组件传递到渲染结果中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;props.children&#125;</span><br></pre></td></tr></table></figure>

<p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 <code>children</code>，而是自行约定：将所需内容传入 props，并使用相应的 prop</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div className=&quot;SplitPane&quot;&gt;</span><br><span class="line">  &lt;div className=&quot;SplitPane-left&quot;&gt;</span><br><span class="line">    &#123;props.left&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div className=&quot;SplitPane-right&quot;&gt;</span><br><span class="line">    &#123;props.right&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="将设计好的-UI-划分为组件层级"><a href="#将设计好的-UI-划分为组件层级" class="headerlink" title="将设计好的 UI 划分为组件层级"></a><a href="https://zh-hans.reactjs.org/docs/thinking-in-react.html">将设计好的 UI 划分为组件层级</a></h4><h4 id="编写组件步骤"><a href="#编写组件步骤" class="headerlink" title="编写组件步骤"></a>编写组件步骤</h4><ol>
<li>第一步：将设计好的 UI 划分为组件层级</li>
<li>第二步：用 React 创建一个静态版本</li>
<li>第三步：确定 UI state 的最小（且完整）表示</li>
<li>第四步：确定 state 放置的位置</li>
<li>第五步：添加反向数据流</li>
</ol>
<blockquote>
<p>通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：</p>
<ol>
<li>该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。</li>
<li>该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。</li>
<li>你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。</li>
</ol>
<p>包含所有产品的原始列表是经由 props 传入的，所以它不是 state；搜索词和复选框的值应该是 state，因为它们随时间会发生改变且无法由其他数据计算而来；经过搜索筛选的产品列表不是 state，因为它的结果可以由产品的原始列表根据搜索词和复选框的选择计算出来。</p>
<p>综上所述，属于 state 的有：</p>
<ul>
<li>用户输入的搜索词</li>
<li>复选框是否选中的值</li>
</ul>
</blockquote>
<p>哪个组件应该拥有某个 state </p>
<ul>
<li>找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。</li>
</ul>
<p><strong>state 只能由拥有它们的组件进行更改</strong></p>
<p>state在哪个组件，修改state的方法就在哪个组件</p>
<h4 id="生命周期图谱"><a href="#生命周期图谱" class="headerlink" title="生命周期图谱"></a><strong><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a></strong></h4><h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a><a href="https://zh-hans.reactjs.org/docs/react-component.html">组件的生命周期</a></h4><h4 id="React权限菜单设计"><a href="#React权限菜单设计" class="headerlink" title="React权限菜单设计"></a>React权限菜单设计</h4><p><a href="https://blog.csdn.net/oKeYue/article/details/79092903">React项目配置6(前后端分离如何控制用户权限)</a></p>
<p><a href="https://blog.csdn.net/oKeYue/article/details/81130922?spm=1001.2014.3001.5502">(源码开放) React + webpack3 多页面应用 及 常见问题解答</a></p>
<h5 id="10分钟快速搭建React权限菜单设计"><a href="#10分钟快速搭建React权限菜单设计" class="headerlink" title="10分钟快速搭建React权限菜单设计"></a><a href="https://www.csdn.net/tags/NtDaIg3sMDg5MTktYmxvZwO0O0OO0O0O.html">10分钟快速搭建React权限菜单设计</a></h5><h5 id="React-组件权限控制的实现"><a href="#React-组件权限控制的实现" class="headerlink" title="React 组件权限控制的实现"></a><a href="https://www.jb51.net/article/237335.htm">React 组件权限控制的实现</a></h5><p><a href="https://blog.csdn.net/qq_18913129/article/details/105491090">React的React.FC与React.Component的初步认识</a></p>
<p><a href="https://www.jianshu.com/p/94ace269414d">useMemo和useEffect有什么区别？怎么使用useMemo</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/411190859">useMemo 使用指南</a></p>
<p><a href="https://blog.csdn.net/weixin_33782386/article/details/88610257">react-hooks中的一些懵逼点</a></p>
<blockquote>
<p><code>useEffect</code>只能在<code>DOM</code>更新后再触发再去控制</p>
<p><code>memo</code>是在<code>DOM</code>更新前触发的，就像官方所说的，类比生命周期就是<a href="https://links.jianshu.com/go?to=https://zh-hans.reactjs.org/docs/hooks-faq.html%23how-do-lifecycle-methods-correspond-to-hooks">shouldComponentUpdate</a></p>
</blockquote>
<blockquote>
<p>在前端开发的过程中，我们需要缓存一些内容，以避免在需渲染过程中因大量不必要的耗时计算而导致的性能问题。为此 React 提供了一些方法可以帮助我们去实现数据的缓存，useMemo 就是其中之一</p>
</blockquote>
<h4 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h4><p><a href="https://segmentfault.com/a/1190000018928587">React Hooks 解析（上）：基础</a></p>
<p><a href="https://segmentfault.com/a/1190000018950566">React Hooks 解析（下）：进阶</a></p>
<p><a href="https://www.jianshu.com/p/be8fb469d507">useCallback</a></p>
<blockquote>
<p>解释这个 Hook 之前先理解下什么是副作用。网络请求、订阅某个模块或者 DOM 操作都是副作用的例子，Effect Hook 是专门用来处理副作用的。正常情况下，在<code>Function Component</code>的函数体中，是不建议写副作用代码的，否则容易出 bug。</p>
</blockquote>
<blockquote>
<p>在绝大多数情况下，<code>useEffect</code>Hook 是更好的选择。唯一例外的就是需要根据新的 UI 来进行 DOM 操作的场景。<code>useLayoutEffect</code>会保证在页面渲染前执行，也就是说页面渲染出来的是最终的效果。如果使用<code>useEffect</code>，页面很可能因为渲染了 2 次而出现抖动。</p>
</blockquote>
<p><a href="https://react.docschina.org/docs/context.html">context</a></p>
<blockquote>
<p>Context 主要应用场景在于<em>很多</em>不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</p>
</blockquote>
<blockquote>
<p><strong>如果你只是想避免层层传递一些属性，<a href="https://react.docschina.org/docs/composition-vs-inheritance.html">组件组合（component composition）</a>有时候是一个比 context 更好的解决方案。</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ThemeContext = React.createContext(&#x27;light&#x27;);</span><br><span class="line"></span><br><span class="line">&lt;ThemeContext.Provider value=&quot;dark&quot;&gt;</span><br><span class="line">    &lt;Toolbar /&gt;</span><br><span class="line">&lt;/ThemeContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">// 中间的组件再也不必指明往下传递 theme 了。</span><br><span class="line">function Toolbar() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ThemedButton /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ThemedButton extends React.Component &#123;</span><br><span class="line">  // 指定 contextType 读取当前的 theme context。</span><br><span class="line">  // React 会往上找到最近的 theme Provider，然后使用它的值。</span><br><span class="line">  // 在这个例子中，当前的 theme 值为 “dark”。</span><br><span class="line">  static contextType = ThemeContext;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Button theme=&#123;this.context&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 Provider 的 <code>value</code> 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 <code>shouldComponentUpdate</code> 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</p>
</blockquote>
<p><a href="https://react.docschina.org/docs/context.html#contextconsumer">Context.Consumer</a></p>
<p><a href="https://react.docschina.org/docs/context.html#consuming-multiple-contexts">消费多个 Context</a></p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><a href="https://react.docschina.org/docs/context.html#caveats">注意事项</a></h5><blockquote>
<p>因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染</p>
</blockquote>
<p>为了防止这种情况，将 value 状态提升到父节点的 state 里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      value: &#123;something: &#x27;something&#x27;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Provider value=&#123;this.state.value&#125;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function HeaderBar() &#123;</span><br><span class="line">  const user = useContext(CurrentUser);</span><br><span class="line">  const notifications = useContext(Notifications);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Welcome back, &#123;user.name&#125;!</span><br><span class="line">      You have &#123;notifications.length&#125; notifications.</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h5><p><code>useReducer</code>的用法跟 Redux 非常相似，当 state 的计算逻辑比较复杂又或者需要根据以前的值来计算时，使用这个 Hook 比<code>useState</code>会更好。</p>
<h5 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Click happened with dependency: <span class="subst">$&#123;count&#125;</span>`</span>), [count],</span><br><span class="line">  ); </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;memoizedHandleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>useCallback</code>缓存的是方法的引用，而<code>useMemo</code>缓存的则是方法的返回值。使用场景是减少不必要的子组件渲染：</p>
</blockquote>
<h5 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function() &#123;</span><br><span class="line">  const myRef = useRef(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    myRef.current.focus();</span><br><span class="line">  &#125;, [])</span><br><span class="line">  </span><br><span class="line">  return &lt;input ref=&#123;myRef&#125; type=&quot;text&quot; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>useRef</code>返回一个普通 JS 对象，可以将任意数据存到<code>current</code>属性里面，就像使用实例化对象的<code>this</code>一样。另外一个使用场景是获取 previous props 或 previous state</p>
</blockquote>
<h5 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h5><blockquote>
<p>自定义 Hook 的命名有讲究，必须以<code>use</code>开头，在里面可以调用其它的 Hook。入参和返回值都可以根据需要自定义，没有特殊的约定。使用也像普通的函数调用一样，Hook 里面其它的 Hook（如<code>useEffect</code>）会自动在合适的时候调用</p>
</blockquote>
<h4 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html#effect-hook">Effect Hook</a></h4><blockquote>
<p>在 React 组件中执行过<strong>数据获取、订阅或者手动修改过 DOM</strong>。我们统一把这些操作称为“<strong>副作用</strong>”，或者简称为“作用”。</p>
<p><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。（我们会在<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html">使用 Effect Hook</a> 里展示对比 <code>useEffect</code> 和这些方法的例子。）</p>
</blockquote>
<h4 id="Hook概览"><a href="#Hook概览" class="headerlink" title="Hook概览"></a><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html#effect-hook">Hook概览</a></h4><p><a href="https://react.docschina.org/docs/code-splitting.html#reactlazy">懒加载-React.lazy</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Suspense &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const OtherComponent = React.lazy(() =&gt; import(&#x27;./OtherComponent&#x27;));</span><br><span class="line"></span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">        &lt;OtherComponent /&gt;</span><br><span class="line">      &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/code-splitting.html#error-boundaries">异常捕获边界</a></p>
<p><a href="https://react.docschina.org/docs/code-splitting.html#route-based-code-splitting">基于路由的代码分割</a></p>
<p><a href="https://react.docschina.org/docs/error-boundaries.html#introducing-error-boundaries">错误边界（Error Boundaries）</a></p>
<h4 id="Refs-转发"><a href="#Refs-转发" class="headerlink" title="Refs 转发"></a><a href="https://react.docschina.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components">Refs 转发</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const FancyButton = React.forwardRef((props, ref) =&gt; (</span><br><span class="line">  &lt;button ref=&#123;ref&#125; className=&quot;FancyButton&quot;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">// 你可以直接获取 DOM button 的 ref：</span><br><span class="line">const ref = React.createRef();</span><br><span class="line">&lt;FancyButton ref=&#123;ref&#125;&gt;Click me!&lt;/FancyButton&gt;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>出于同样的原因，当 <code>React.forwardRef</code> 存在时有条件地使用它也是不推荐的：它改变了你的库的行为，并在升级 React 自身时破坏用户的应用。</p>
</blockquote>
<h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a><a href="https://react.docschina.org/docs/higher-order-components.html">高阶组件</a></h4><p>高阶组件是参数为组件，返回值为新组件的函数。</p>
<p>组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。</p>
<h4 id="深入-JSX"><a href="#深入-JSX" class="headerlink" title="深入 JSX"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html">深入 JSX</a></h4><blockquote>
<p><code>if</code> 语句以及 <code>for</code> 循环不是 JavaScript 表达式，所以不能在 JSX 中直接使用。但是，你可以用在 JSX 以外的代码中</p>
</blockquote>
<h5 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#string-literals">字符串字面量</a></h5><p>如下两个 JSX 表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent message=&quot;hello world&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;&#x27;hello world&#x27;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>当你将字符串字面量赋值给 prop 时，它的值是未转义的。所以，以下两个 JSX 表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent message=&quot;&amp;lt;3&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;&#x27;&lt;3&#x27;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Props-默认值为-“True”"><a href="#Props-默认值为-“True”" class="headerlink" title="Props 默认值为 “True”"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#props-default-to-true">Props 默认值为 “True”</a></h5><p>以下两个 JSX 表达式是等价的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyTextBox autocomplete /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyTextBox autocomplete=&#123;true&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="属性展开"><a href="#属性展开" class="headerlink" title="属性展开"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#spread-attributes">属性展开</a></h5><p>以下两个组件是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function App1() &#123;</span><br><span class="line">  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: &#x27;Ben&#x27;, lastName: &#x27;Hector&#x27;&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你还可以选择只保留当前组件需要接收的 props，并使用展开运算符将其他 props 传递下去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Button = props =&gt; &#123;</span><br><span class="line">  const &#123; kind, ...other &#125; = props;</span><br><span class="line">  const className = kind === &quot;primary&quot; ? &quot;PrimaryButton&quot; : &quot;SecondaryButton&quot;;</span><br><span class="line">  return &lt;button className=&#123;className&#125; &#123;...other&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button kind=&quot;primary&quot; onClick=&#123;() =&gt; console.log(&quot;clicked!&quot;)&#125;&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="字符串字面量-1"><a href="#字符串字面量-1" class="headerlink" title="字符串字面量"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#string-literals-1">字符串字面量</a></h5><p>你可以将字符串放在开始和结束标签之间，此时 <code>props.children</code> 就只是该字符串。这对于很多内置的 HTML 元素很有用。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure>

<p>React 组件也能够返回存储在数组中的一组元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  // 不需要用额外的元素包裹列表元素！</span><br><span class="line">  return [</span><br><span class="line">    // 不要忘记设置 key :)</span><br><span class="line">    &lt;li key=&quot;A&quot;&gt;First item&lt;/li&gt;,</span><br><span class="line">    &lt;li key=&quot;B&quot;&gt;Second item&lt;/li&gt;,</span><br><span class="line">    &lt;li key=&quot;C&quot;&gt;Third item&lt;/li&gt;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript 表达式可以被包裹在 <code>&#123;&#125;</code> 中作为子元素。例如，以下表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent&gt;&#123;&#x27;foo&#x27;&#125;&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure>

<h5 id="布尔类型、Null-以及-Undefined-将会忽略"><a href="#布尔类型、Null-以及-Undefined-将会忽略" class="headerlink" title="布尔类型、Null 以及 Undefined 将会忽略"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#booleans-null-and-undefined-are-ignored">布尔类型、Null 以及 Undefined 将会忽略</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;props.messages.length &gt; 0 &amp;&amp;</span><br><span class="line">    &lt;MessageList messages=&#123;props.messages&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如果你想渲染 <code>false</code>、<code>true</code>、<code>null</code>、<code>undefined</code> 等值，你需要先将它们<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion">转换为字符串</a>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  My JavaScript variable is &#123;String(myVariable)&#125;.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化</a></h4><h5 id="Brunch"><a href="#Brunch" class="headerlink" title="Brunch"></a><a href="https://react.docschina.org/docs/optimizing-performance.html#brunch">Brunch</a></h5><p>通过安装 <a href="https://github.com/brunch/terser-brunch"><code>terser-brunch</code></a> 插件，来获得最高效的 Brunch 生产构建：</p>
<h5 id="避免调停"><a href="#避免调停" class="headerlink" title="避免调停"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">避免调停</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你知道在什么情况下你的组件不需要更新，你可以在 <code>shouldComponentUpdate</code> 中返回 <code>false</code> 来跳过整个渲染过程。其包括该组件的 <code>render</code> 调用以及之后的操作。</p>
<p>如果你的组件只有当 <code>props.color</code> 或者 <code>state.count</code> 的值改变才需要更新时，你可以使用 <code>shouldComponentUpdate</code> 来进行检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    if (this.props.color !== nextProps.color) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.state.count !== nextState.count) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大部分情况下，你可以使用 <code>React.PureComponent</code> 来代替手写 <code>shouldComponentUpdate</code></p>
<h4 id="不可变数据的力量"><a href="#不可变数据的力量" class="headerlink" title="不可变数据的力量"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">不可变数据的力量</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">  this.setState(state =&gt; (&#123;</span><br><span class="line">    words: state.words.concat([&#x27;marklar&#x27;])</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">  this.setState(state =&gt; (&#123;</span><br><span class="line">    words: [...state.words, &#x27;marklar&#x27;],</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>为了不改变原本的对象，我们可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateColorMap(colormap) &#123;</span><br><span class="line">  return Object.assign(&#123;&#125;, colormap, &#123;right: &#x27;blue&#x27;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加<a href="https://github.com/sebmarkbage/ecmascript-rest-spread">对象扩展属性</a>以使得更新不可变对象变得更方便：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateColorMap(colormap) &#123;</span><br><span class="line">  return &#123;...colormap, right: &#x27;blue&#x27;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/polyfill">Polyfill</a></p>
<p><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills">HTML5 Cross Browser Polyfills</a></p>
<h4 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a><a href="https://react.docschina.org/docs/portals.html">Portals</a></h4><p>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReactDOM.createPortal(child, container)</span><br></pre></td></tr></table></figure>

<p>第一个参数（<code>child</code>）是任何<a href="https://react.docschina.org/docs/react-component.html#render">可渲染的 React 子元素</a>，例如一个元素，字符串或 fragment。第二个参数（<code>container</code>）是一个 DOM 元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  // React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。</span><br><span class="line">  // `domNode` 是一个可以在任何位置的有效 DOM 节点。</span><br><span class="line">  return ReactDOM.createPortal(</span><br><span class="line">    this.props.children,</span><br><span class="line">    domNode  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个 portal 的典型用例是当父组件有 <code>overflow: hidden</code> 或 <code>z-index</code> 样式时，但你需要子组件能够在视觉上“跳出”其容器。例如，对话框、悬浮卡以及提示框：</p>
<h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a><a href="https://react.docschina.org/docs/profiler.html">Profiler</a></h4><p><code>Profiler</code> 测量渲染一个 React 应用多久渲染一次以及渲染一次的“代价”。 它的目的是识别出应用中渲染较慢的部分，或是可以使用<a href="https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations">类似 memoization 优化</a>的部分，并从相关优化中获益。</p>
<h4 id="不使用-ES6的使用方法"><a href="#不使用-ES6的使用方法" class="headerlink" title="不使用 ES6的使用方法"></a><a href="https://react.docschina.org/docs/react-without-es6.html">不使用 ES6</a>的使用方法</h4><p>无论是函数组件还是 class 组件，都拥有 <code>defaultProps</code> 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: &#x27;Mary&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果使用 <code>createReactClass()</code> 方法创建组件，那就需要在组件中定义 <code>getDefaultProps()</code> 函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getDefaultProps: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;Mary&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/react-without-es6.html#setting-the-initial-state">初始化 State</a></p>
<p><a href="https://react.docschina.org/docs/react-without-es6.html#autobinding">自动绑定</a></p>
<p>为了保险起见，以下三种做法都是可以的：</p>
<ul>
<li>在 constructor 中绑定方法。</li>
<li>使用箭头函数，比如：<code>onClick=&#123;(e) =&gt; this.handleClick(e)&#125;</code>。</li>
<li>继续使用 <code>createReactClass</code>。</li>
</ul>
<h4 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a><a href="https://react.docschina.org/docs/render-props.html">Render Props</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const mouse = this.props.mouse;</span><br><span class="line">    return (</span><br><span class="line">      &lt;img src=&quot;/cat.jpg&quot; style=&#123;&#123; position: &#x27;absolute&#x27;, left: mouse.x, top: mouse.y &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mouse extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleMouseMove = this.handleMouseMove.bind(this);</span><br><span class="line">    this.state = &#123; x: 0, y: 0 &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div style=&#123;&#123; height: &#x27;100vh&#x27; &#125;&#125; onMouseMove=&#123;this.handleMouseMove&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/*</span><br><span class="line">          Instead of providing a static representation of what &lt;Mouse&gt; renders,</span><br><span class="line">          use the `render` prop to dynamically determine what to render.</span><br><span class="line">        */&#125;</span><br><span class="line">        &#123;this.props.render(this.state)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MouseTracker extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;移动鼠标!&lt;/h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果你出于某种原因真的想要 HOC，那么你可以轻松实现</span><br><span class="line">// 使用具有 render prop 的普通组件创建一个！</span><br><span class="line">function withMouse(Component) &#123;</span><br><span class="line">  return class extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Component &#123;...this.props&#125; mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>render prop 是一个用于告知组件需要渲染什么内容的函数 prop。</strong></p>
<p>移动端事件使用onTouchMove</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onTouchMove=&#123;handleMouseMove&#125;</span><br><span class="line"></span><br><span class="line">// 使用event.touches[0].clientX</span><br><span class="line">// this.setState(&#123;</span><br><span class="line">//   x: event.touches[0].clientX - 30,</span><br><span class="line">//   y: event.touches[0].clientY - 30</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure>





<h4 id="静态类型检查"><a href="#静态类型检查" class="headerlink" title="静态类型检查"></a><a href="https://react.docschina.org/docs/static-type-checking.html">静态类型检查</a></h4><p>建议在大型代码库中使用 Flow 或 TypeScript 来代替 <code>PropTypes</code>。</p>
<h5 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h5><ul>
<li><a href="https://flow.org/en/docs/types/">Flow 文档：类型注解</a></li>
<li><a href="https://flow.org/en/docs/editors/">Flow 文档：编辑器</a></li>
<li><a href="https://flow.org/en/docs/react/">Flow 文档：React</a></li>
<li><a href="https://medium.com/flow-type/linting-in-flow-7709d7a7e969">在 Flow 中进行 lint</a></li>
</ul>
<h5 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h5><ul>
<li><p><a href="https://www.typescriptlang.org/">TypeScript</a></p>
</li>
<li><p><a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">在 React 中使用 TypeScript</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">TypeScript 文档：基本类型</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">TypeScript 文档：JavaScript 迁移</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/react-&-webpack.html">TypeScript 文档：React 与 Webpack</a></p>
</li>
<li><p><a href="https://react.docschina.org/docs/static-type-checking.html#using-typescript-with-create-react-app">在 Create React App 中使用 TypeScript</a></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br></pre></td></tr></table></figure>

<p>将 TypeScript 添加到<strong>现有的 Create React App 项目</strong>中，<a href="https://facebook.github.io/create-react-app/docs/adding-typescript">请参考此文档</a>.</p>
<p><a href="https://react.docschina.org/docs/static-type-checking.html#configuring-the-typescript-compiler">配置 TypeScript 编译器</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run tsc --init</span><br></pre></td></tr></table></figure>

<p>如果你使用 <a href="https://www.npmjs.com/">npm</a>，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure>

<p><code>tsconfig.json</code> 文件中，有许多配置项用于配置编译器。查看所有配置项的的详细说明，<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">请参考此文档</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;rootDir&quot;: &quot;src&quot;,</span><br><span class="line">    &quot;outDir&quot;: &quot;build&quot;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json">TypeScript React Starter</a> 提供了一套默认的 <code>tsconfig.json</code> 帮助你快速上手。</p>
<p>在 React 中，你的组件文件大多数使用 <code>.js</code> 作为扩展名。在 TypeScript 中，提供两种文件扩展名：<code>.ts</code> 是默认的文件扩展名，而 <code>.tsx</code> 是一个用于包含 <code>JSX</code> 代码的特殊扩展名。</p>
<h5 id="运行-TypeScript"><a href="#运行-TypeScript" class="headerlink" title="运行 TypeScript"></a><a href="https://react.docschina.org/docs/static-type-checking.html#running-typescript">运行 TypeScript</a></h5><p>如果你按照上面的说明操作，现在应该能运行 TypeScript 了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<p>如果你使用 npm，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>如果你没有看到输出信息，这意味着它编译成功了</p>
<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a><a href="https://react.docschina.org/docs/strict-mode.html">严格模式</a></h4><p>你可以为应用程序的任何部分启用严格模式。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function ExampleApplication() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;React.StrictMode&gt;        </span><br><span class="line">      	&lt;div&gt;</span><br><span class="line">          &lt;ComponentOne /&gt;</span><br><span class="line">          &lt;ComponentTwo /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/React.StrictMode&gt;      </span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>StrictMode</code> 目前有助于：</p>
<ul>
<li><a href="https://react.docschina.org/docs/strict-mode.html#identifying-unsafe-lifecycles">识别不安全的生命周期</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#warning-about-legacy-string-ref-api-usage">关于使用过时字符串 ref API 的警告</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage">关于使用废弃的 findDOMNode 方法的警告</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#detecting-unexpected-side-effects">检测意外的副作用</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#detecting-legacy-context-api">检测过时的 context API</a></li>
</ul>
<p>渲染阶段的生命周期包括以下 class 组件方法：</p>
<ul>
<li><code>constructor</code></li>
<li><code>componentWillMount</code> (or <code>UNSAFE_componentWillMount</code>)</li>
<li><code>componentWillReceiveProps</code> (or <code>UNSAFE_componentWillReceiveProps</code>)</li>
<li><code>componentWillUpdate</code> (or <code>UNSAFE_componentWillUpdate</code>)</li>
<li><code>getDerivedStateFromProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>render</code></li>
<li><code>setState</code> 更新函数（第一个参数）</li>
</ul>
<h4 id="使用-PropTypes-进行类型检查"><a href="#使用-PropTypes-进行类型检查" class="headerlink" title="使用 PropTypes 进行类型检查"></a><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html">使用 PropTypes 进行类型检查</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PropTypes from &#x27;prop-types&#x27;;</span><br><span class="line"></span><br><span class="line">class Greeting extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Greeting.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>出于性能方面的考虑，<code>propTypes</code> 仅在开发模式下进行检查。</p>
<h4 id="默认-Prop-值"><a href="#默认-Prop-值" class="headerlink" title="默认 Prop 值"></a><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html">默认 Prop 值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Greeting extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指定 props 的默认值：</span><br><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: &#x27;Stranger&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染出 &quot;Hello, Stranger&quot;：</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Greeting /&gt;,</span><br><span class="line">  document.getElementById(&#x27;example&#x27;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>defaultProps</code> 用于确保 <code>this.props.name</code> 在父组件没有指定其值时，有一个默认值。</p>
<h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html">非受控组件</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class NameForm extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">    this.input = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(&#x27;A name was submitted: &#x27; + this.input.current.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Name:</span><br><span class="line">          &lt;input type=&quot;text&quot; ref=&#123;this.input&#125; /&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你还是不清楚在某个特殊场景中应该使用哪种组件，那么 <a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">这篇关于受控和非受控输入组件的文章</a> 会很有帮助。</p>
<h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html#default-values">默认值</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">defaultValue=&quot;Bob&quot;</span><br><span class="line">type=&quot;text&quot;</span><br><span class="line">ref=&#123;this.input&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>希望 React 能赋予组件一个初始值，但是不去控制后续的更新。 在这种情况下, 你可以指定一个 <code>defaultValue</code> 属性，而不是 <code>value</code>。</p>
<p>同样，<code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 支持 <code>defaultChecked</code>，<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code> 支持 <code>defaultValue</code>。</p>
<h5 id="文件输入"><a href="#文件输入" class="headerlink" title="文件输入"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html#the-file-input-tag">文件输入</a></h5><p>在 HTML 中，<code>&lt;input type=&quot;file&quot;&gt;</code> 可以让用户选择一个或多个文件上传到服务器，或者通过使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications">File API</a> 进行操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>在 React 中，<code>&lt;input type=&quot;file&quot; /&gt;</code> 始终是一个非受控组件，因为它的值只能由用户设置，而不能通过代码控制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class FileInput extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">    this.fileInput = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(</span><br><span class="line">      `Selected file - $&#123;this.fileInput.current.files[0].name&#125;`</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Upload file:</span><br><span class="line">          &lt;input type=&quot;file&quot; ref=&#123;this.fileInput&#125; /&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a><a href="https://react.docschina.org/docs/web-components.html">Web Components</a></h4><h4 id="React-顶层-API"><a href="#React-顶层-API" class="headerlink" title="React 顶层 API"></a><a href="https://react.docschina.org/docs/react-api.html#cloneelement">React 顶层 API</a></h4><h5 id="转换元素"><a href="#转换元素" class="headerlink" title="转换元素"></a>转换元素</h5><p><code>React</code> 提供了几个用于操作元素的 API：</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#cloneelement"><code>cloneElement()</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#isvalidelement"><code>isValidElement()</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactchildren"><code>React.Children</code></a></li>
</ul>
<h5 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h5><p><code>React</code> 还提供了用于减少不必要嵌套的组件。</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactfragment"><code>React.Fragment</code></a></li>
</ul>
<h5 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h5><ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactcreateref"><code>React.createRef</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactforwardref"><code>React.forwardRef</code></a></li>
</ul>
<h5 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h5><p>Suspense 使得组件可以“等待”某些操作结束后，再进行渲染。目前，Suspense 仅支持的使用场景是：<a href="https://react.docschina.org/docs/code-splitting.html#reactlazy">通过 <code>React.lazy</code> 动态加载组件</a>。它将在未来支持其它使用场景，如数据获取等。</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactlazy"><code>React.lazy</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactsuspense"><code>React.Suspense</code></a></li>
</ul>
<h5 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a><a href="https://react.docschina.org/docs/react-api.html#hooks">Hook</a></h5><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。Hook 拥有<a href="https://react.docschina.org/docs/hooks-intro.html">专属文档章节</a>和单独的 API 参考文档：</p>
<ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#basic-hooks">基础 Hook</a><ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usestate"><code>useState</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useeffect"><code>useEffect</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a></li>
</ul>
</li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#additional-hooks">额外的 Hook</a><ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback"><code>useCallback</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usememo"><code>useMemo</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useref"><code>useRef</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useimperativehandle"><code>useImperativeHandle</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect"><code>useLayoutEffect</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usedebugvalue"><code>useDebugValue</code></a></li>
</ul>
</li>
</ul>
<h5 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a><a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent">React.PureComponent</a></h5><p><code>React.PureComponent</code> 与 <a href="https://react.docschina.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 很相似。两者的区别在于 <a href="https://react.docschina.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 并未实现 <a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a>，而 <code>React.PureComponent</code> 中以浅层对比 prop 和 state 的方式来实现了该函数。</p>
<p>如果赋予 React 组件相同的 props 和 state，<code>render()</code> 函数会渲染相同的内容，那么在某些情况下使用 <code>React.PureComponent</code> 可提高性能。</p>
<p><a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent">注意</a></p>
<blockquote>
<p><code>React.PureComponent</code> 中的 <code>shouldComponentUpdate()</code> 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。仅在你的 props 和 state 较为简单时，才使用 <code>React.PureComponent</code>，或者在深层数据结构发生变化时调用 <a href="https://react.docschina.org/docs/react-component.html#forceupdate"><code>forceUpdate()</code></a> 来确保组件被正确地更新。你也可以考虑使用 <a href="https://facebook.github.io/immutable-js/">immutable 对象</a>加速嵌套数据的比较。</p>
</blockquote>
<h5 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a><a href="https://react.docschina.org/docs/react-api.html#reactmemo">React.memo</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MyComponent = React.memo(function MyComponent(props) &#123;</span><br><span class="line">  /* 使用 props 渲染 */</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>React.memo</code> 为<a href="https://react.docschina.org/docs/higher-order-components.html">高阶组件</a>。它与 <a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent"><code>React.PureComponent</code></a> 非常相似，但只适用于函数组件，而不适用 class 组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function MyComponent(props) &#123;</span><br><span class="line">  /* 使用 props 渲染 */</span><br><span class="line">&#125;</span><br><span class="line">function areEqual(prevProps, nextProps) &#123;</span><br><span class="line">  /*</span><br><span class="line">  如果把 nextProps 传入 render 方法的返回结果与</span><br><span class="line">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span><br><span class="line">  否则返回 false</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br><span class="line">export default React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure>

<p>此方法仅作为**<a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化</a>**的方式而存在。但请不要依赖它来“阻止”渲染，因为这会产生 bug。</p>
<h5 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a><a href="https://react.docschina.org/docs/react-api.html#createelement">createElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  type,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="cloneElement"><a href="#cloneElement" class="headerlink" title="cloneElement()"></a><a href="https://react.docschina.org/docs/react-api.html#cloneelement">cloneElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.cloneElement(</span><br><span class="line">  element,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="isValidElement"><a href="#isValidElement" class="headerlink" title="isValidElement()"></a><a href="https://react.docschina.org/docs/react-api.html#isvalidelement">isValidElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.isValidElement(object)</span><br></pre></td></tr></table></figure>

<p>验证对象是否为 React 元素，返回值为 <code>true</code> 或 <code>false</code>。</p>
<h5 id="React-Children"><a href="#React-Children" class="headerlink" title="React.Children"></a><a href="https://react.docschina.org/docs/react-api.html#reactchildren">React.Children</a></h5><p><code>React.Children</code> 提供了用于处理 <code>this.props.children</code> 不透明数据结构的实用方法。</p>
<h5 id="React-createRef"><a href="#React-createRef" class="headerlink" title="React.createRef"></a><a href="https://react.docschina.org/docs/react-api.html#reactcreateref">React.createRef</a></h5><h5 id="React-forwardRef"><a href="#React-forwardRef" class="headerlink" title="React.forwardRef"></a><a href="https://react.docschina.org/docs/react-api.html#reactforwardref">React.forwardRef</a></h5><h5 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy"></a><a href="https://react.docschina.org/docs/react-api.html#reactlazy">React.lazy</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这个组件是动态加载的</span><br><span class="line">const SomeComponent = React.lazy(() =&gt; import(&#x27;./SomeComponent&#x27;));</span><br></pre></td></tr></table></figure>

<h5 id="React-Suspense"><a href="#React-Suspense" class="headerlink" title="React.Suspense"></a><a href="https://react.docschina.org/docs/react-api.html#reactsuspense">React.Suspense</a></h5><p><code>React.Suspense</code> 可以指定加载指示器（loading indicator），以防其组件树中的某些子组件尚未具备渲染条件。目前，懒加载组件是 <code>&lt;React.Suspense&gt;</code> 支持的<strong>唯一</strong>用例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 该组件是动态加载的</span><br><span class="line">const OtherComponent = React.lazy(() =&gt; import(&#x27;./OtherComponent&#x27;));</span><br><span class="line"></span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  return (</span><br><span class="line">    // 显示 &lt;Spinner&gt; 组件直至 OtherComponent 加载完成</span><br><span class="line">    &lt;React.Suspense fallback=&#123;&lt;Spinner /&gt;&#125;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;OtherComponent /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/React.Suspense&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="React-Component"><a href="#React-Component" class="headerlink" title="React.Component"></a><a href="https://react.docschina.org/docs/react-component.html#the-component-lifecycle">React.Component</a></h4><h5 id="组件的生命周期-1"><a href="#组件的生命周期-1" class="headerlink" title="组件的生命周期"></a><a href="https://react.docschina.org/docs/react-component.html#the-component-lifecycle">组件的生命周期</a></h5><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a></p>
<p><a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate">shouldComponentUpdate()</a></p>
<p>此方法仅作为**<a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化的方式</a>**而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。</p>
<h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a><a href="https://react.docschina.org/docs/react-component.html#constructor">constructor()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props)</span><br></pre></td></tr></table></figure>

<p><strong>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。</strong></p>
<h5 id="setState"><a href="#setState" class="headerlink" title="setState()"></a><a href="https://react.docschina.org/docs/react-component.html#setstate">setState()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.setState((state, props) =&gt; &#123;</span><br><span class="line">  return &#123;counter: state.counter + props.step&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a><a href="https://react.docschina.org/docs/react-component.html#forceupdate">forceUpdate()</a></h5><h5 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a><a href="https://react.docschina.org/docs/react-component.html#defaultprops">defaultProps</a></h5><h5 id="state-1"><a href="#state-1" class="headerlink" title="state"></a><a href="https://react.docschina.org/docs/react-component.html#state">state</a></h5><p> <a href="https://react.docschina.org/docs/state-and-lifecycle.html">State &amp; 生命周期</a></p>
<h4 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a><a href="https://react.docschina.org/docs/dom-elements.html">DOM 元素</a></h4><h4 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a><a href="https://react.docschina.org/docs/events.html">合成事件</a></h4><h4 id="React-术语词汇表"><a href="#React-术语词汇表" class="headerlink" title="React 术语词汇表"></a><a href="https://react.docschina.org/docs/glossary.html">React 术语词汇表</a></h4><h4 id="Hook-简介"><a href="#Hook-简介" class="headerlink" title="Hook 简介"></a><a href="https://react.docschina.org/docs/hooks-intro.html">Hook 简介</a></h4><h5 id="自定义-Hook-1"><a href="#自定义-Hook-1" class="headerlink" title="自定义 Hook"></a><a href="https://react.docschina.org/docs/hooks-overview.html#building-your-own-hooks">自定义 Hook</a></h5><p><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a></p>
<p> <a href="https://react.docschina.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a></p>
<h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a><a href="https://react.docschina.org/docs/hooks-state.html">useState</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [count, setCount] = useState(initialCount);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 class 组件中的 <code>setState</code> 方法不同，<code>useState</code> 不会自动合并更新对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setState(prevState =&gt; &#123;</span><br><span class="line">  // 也可以使用 Object.assign</span><br><span class="line">  return &#123;...prevState, ...updatedValues&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><a href="https://react.docschina.org/docs/hooks-effect.html">useEffect</a></h4><p><a href="https://react.docschina.org/docs/hooks-effect.html#%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E7%9A%84-effect">需要清除的 effect</a></p>
<h5 id="清除-effect"><a href="#清除-effect" class="headerlink" title="清除 effect"></a><a href="https://react.docschina.org/docs/hooks-reference.html#cleaning-up-an-effect">清除 effect</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  const subscription = props.source.subscribe();</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    // 清除订阅</span><br><span class="line">    subscription.unsubscribe();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/hooks-reference.html#timing-of-effects">effect 的执行时机</a></p>
<p><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect"><code>useLayoutEffect</code></a> Hook 来处理这类 effect。它和 <code>useEffect</code> 的结构相同，区别只是调用时机不同。</p>
<h4 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a><a href="https://react.docschina.org/docs/hooks-rules.html">Hook 规则</a></h4><p>只在最顶层使用 Hook</p>
<p>不要在循环，条件或嵌套函数中调用 Hook</p>
<h4 id="自定义-Hook-2"><a href="#自定义-Hook-2" class="headerlink" title="自定义 Hook"></a><a href="https://react.docschina.org/docs/hooks-custom.html">自定义 Hook</a></h4><h4 id="Hook-API-索引"><a href="#Hook-API-索引" class="headerlink" title="Hook API 索引"></a><a href="https://react.docschina.org/docs/hooks-reference.html">Hook API 索引</a></h4><h5 id="useContext-1"><a href="#useContext-1" class="headerlink" title="useContext"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext">useContext</a></h5><p>即使祖先使用 <a href="https://react.docschina.org/docs/react-api.html#reactmemo"><code>React.memo</code></a> 或 <a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate</code></a>，也会在组件本身使用 <code>useContext</code> 时重新渲染。</p>
<p><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext">把如下代码与 Context.Provider 放在一起</a></p>
<h5 id="useReducer-1"><a href="#useReducer-1" class="headerlink" title="useReducer"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usereducer">useReducer</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用 reducer 重写 useState 一节的计数器示例：</span><br><span class="line"></span><br><span class="line">const initialState = &#123;count: 0&#125;;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123;count: state.count + 1&#125;;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123;count: state.count - 1&#125;;</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Counter() &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a><a href="https://react.docschina.org/docs/hooks-reference.html#lazy-initialization">惰性初始化</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function init(initialCount) &#123;</span><br><span class="line">  return &#123;count: initialCount&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123;count: state.count + 1&#125;;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123;count: state.count - 1&#125;;</span><br><span class="line">    case &#x27;reset&#x27;:</span><br><span class="line">      return init(action.payload);</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialCount, init);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;reset&#x27;, payload: initialCount&#125;)&#125;&gt;</span><br><span class="line">        Reset</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useCallback-1"><a href="#useCallback-1" class="headerlink" title="useCallback"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback">useCallback</a></h5><p>每次渲染，函数会生成一个新的引用地址（引用类型，跟对象/数组一样）</p>
<ul>
<li>保持一个函数的不变性</li>
<li>可以说是<code>useMemo</code>的一个语法糖，专门处理函数</li>
</ul>
<p><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/#the-usecallback-hook">The useCallback hook</a></p>
<p>下面两个代码是等价的：</p>
<p><code>useMemo</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleMegaBoost = React.useMemo(() =&gt; &#123;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    setCount((currentValue) =&gt; currentValue + 1234);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p><code>useCallback</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleMegaBoost = React.useCallback(() =&gt; &#123;</span><br><span class="line">  setCount((currentValue) =&gt; currentValue + 1234);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback">useMemo</a></h5><p><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/">Understanding useMemo and useCallback</a></p>
<p><a href="https://www.bilibili.com/video/BV1uG411V7m3/?spm_id_from=333.337.search-card.all.click&vd_source=40931b9b7a6dfae9780e1c6f05637a83">课程</a></p>
<ul>
<li>做快照，减少大量运算</li>
<li>保持一个值的不变性</li>
</ul>
<p>为了减少一些大量计算（需要计算的数据没有改变，但是其他数据改变，重新渲染，会引起大量计算）</p>
<p><code>useMemo</code> takes two arguments:（两个参数）</p>
<ol>
<li>A chunk of work to be performed, wrapped up in a function（大量计算的函数）</li>
<li>A list of dependencies（依赖）</li>
</ol>
<p>**<code>useMemo</code> is essentially like a lil’ cache, and the dependencies are the cache invalidation strategy.**（像缓存）</p>
<p>This is commonly known as <em>memoization</em>, and it’s why this hook is called “useMemo”.（记忆化，备忘）</p>
<h6 id="消耗性能的案例（每秒time变化，都会进行一次大量计算）"><a href="#消耗性能的案例（每秒time变化，都会进行一次大量计算）" class="headerlink" title="消耗性能的案例（每秒time变化，都会进行一次大量计算）"></a>消耗性能的案例（每秒time变化，都会进行一次大量计算）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;heavyComputations()&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="使用usememo之后，只有num变化时，才进行大量的计算"><a href="#使用usememo之后，只有num变化时，才进行大量的计算" class="headerlink" title="使用usememo之后，只有num变化时，才进行大量的计算"></a>使用usememo之后，只有num变化时，才进行大量的计算</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect, useMemo&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const result = useMemo(() =&gt; &#123;</span><br><span class="line">    return heavyComputations();</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;result&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I’ve extracted two new components, <code>Clock</code> and <code>PrimeCalculator</code>. By branching off from <code>App</code>, these two components each manage their own state. A re-render in one component won’t affect the other.（可以将它们分成两个组件，各自管理它们自己的状态，互不影响）</p>
<p> <code>React.memo</code> wraps around our component and protects it from unrelated updates. Our <code>PurePrimeCalculator</code> will only re-render when it receives new data, or when its internal state changes.（可以使用 <code>React.memo</code>包裹组件，让它成为一个纯组件【输入不改变的时候，输出不改变】）</p>
<h6 id="改为独立组件"><a href="#改为独立组件" class="headerlink" title="改为独立组件"></a>改为独立组件</h6><p>这样也是每秒都执行一次大量计算函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;ShowInput/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ShowInput() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;heavyComputations()&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：使用<code>React.memo</code>将ShowInput组件改为纯函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">const PureShowInput = React.memo(ShowInput);</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;PureShowInput/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ShowInput() &#123;</span><br><span class="line"> .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在导出的时候，直接将其导出为纯组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// PrimeCalculator.js</span><br><span class="line">function PrimeCalculator() &#123;</span><br><span class="line">  /* Component stuff here */</span><br><span class="line">&#125;</span><br><span class="line">export default React.memo(PrimeCalculator);</span><br></pre></td></tr></table></figure>

<h6 id="使用纯组件（React-memo）的方法，还是会进行大量计算"><a href="#使用纯组件（React-memo）的方法，还是会进行大量计算" class="headerlink" title="使用纯组件（React.memo）的方法，还是会进行大量计算"></a><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/#use-case-2-preserved-references">使用纯组件（React.memo）的方法，还是会进行大量计算</a></h6><p><code>Boxes.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default React.memo(Boxes);</span><br></pre></td></tr></table></figure>

<p><code>App.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const boxes = [</span><br><span class="line">    &#123; flex: boxWidth, background: &#x27;hsl(345deg 100% 50%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 3, background: &#x27;hsl(260deg 100% 40%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 1, background: &#x27;hsl(50deg 100% 60%)&#x27; &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&lt;Boxes boxes=&#123;boxes&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>原因：every time React re-renders, we’re producing a <em>brand new array</em>. They’re equivalent in terms of <em>value</em>, but not in terms of <em>reference</em>.（组件每次重新渲染，会生成一个全新的数组，引用类型，地址就发生了改变，所以Boxes会重新渲染）</p>
<p>解决方法：使用<code>useMemo</code>，依赖<code>boxWidth</code>，当<code>boxWidth</code>改变时才更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const boxes = React.useMemo(() =&gt; &#123;</span><br><span class="line">  return [</span><br><span class="line">    &#123; flex: boxWidth, background: &#x27;hsl(345deg 100% 50%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 3, background: &#x27;hsl(260deg 100% 40%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 1, background: &#x27;hsl(50deg 100% 60%)&#x27; &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;, [boxWidth]);</span><br></pre></td></tr></table></figure>

<p>当使用context时，父组件的值改变的时候，会引起子组件的更新。如果不想子组件每次都更新，可以使用<code>useMemo</code>，只有当依赖<code>user, status, forgotPwLink</code>发生改变时，再更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const AuthContext = React.createContext(&#123;&#125;);</span><br><span class="line">function AuthProvider(&#123; user, status, forgotPwLink, children &#125;)&#123;</span><br><span class="line">  const memoizedValue = React.useMemo(() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user,</span><br><span class="line">      status,</span><br><span class="line">      forgotPwLink,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [user, status, forgotPwLink]);</span><br><span class="line">  return (</span><br><span class="line">    &lt;AuthContext.Provider value=&#123;memoizedValue&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;/AuthContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="useRef-1"><a href="#useRef-1" class="headerlink" title="useRef"></a><a href="https://react.docschina.org/docs/hooks-reference.html#useref">useRef</a></h5><h5 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a><a href="https://react.docschina.org/docs/hooks-reference.html#useimperativehandle">useImperativeHandle</a></h5><h5 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect">useLayoutEffect</a></h5><h5 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usedebugvalue">useDebugValue</a></h5><h4 id="Hooks-FAQ"><a href="#Hooks-FAQ" class="headerlink" title="Hooks FAQ"></a><a href="https://react.docschina.org/docs/hooks-faq.html">Hooks FAQ</a></h4><h4 id="测试概览"><a href="#测试概览" class="headerlink" title="测试概览"></a><a href="https://react.docschina.org/docs/testing.html">测试概览</a></h4><p><strong><a href="https://facebook.github.io/jest/">Jest</a></strong> </p>
<h4 id="AJAX-and-APIs"><a href="#AJAX-and-APIs" class="headerlink" title="AJAX and APIs"></a><a href="https://react.docschina.org/docs/faq-ajax.html">AJAX and APIs</a></h4><p>比如社区比较流行的 <a href="https://github.com/axios/axios">Axios</a>，<a href="https://api.jquery.com/jQuery.ajax/">jQuery AJAX</a>，或者是浏览器内置的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">window.fetch</a>。</p>
<p>在 <a href="https://react.docschina.org/docs/react-component.html#mounting"><code>componentDidMount</code></a> 这个生命周期函数中发起 AJAX 请求</p>
<h4 id="在组件中使用事件处理函数"><a href="#在组件中使用事件处理函数" class="headerlink" title="在组件中使用事件处理函数"></a><a href="https://react.docschina.org/docs/faq-functions.html">在组件中使用事件处理函数</a></h4><p><a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Yehuda Katz 的文章</a>详细解释了什么是绑定，以及函数在 JavaScript 中怎么起作用。</p>
<p>传递参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; this.handleClick(id)&#125; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.handleClick.bind(this, id)&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="通过箭头函数传递参数"><a href="#通过箭头函数传递参数" class="headerlink" title="通过箭头函数传递参数"></a><a href="https://react.docschina.org/docs/faq-functions.html#example-passing-params-using-arrow-functions">通过箭头函数传递参数</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;this.state.letters.map(letter =&gt;</span><br><span class="line">    &lt;li key=&#123;letter&#125; onClick=&#123;() =&gt; this.handleClick(letter)&#125;&gt;</span><br><span class="line">      &#123;letter&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="通过-data-attributes-传递参数"><a href="#通过-data-attributes-传递参数" class="headerlink" title="通过 data-attributes 传递参数"></a><a href="https://react.docschina.org/docs/faq-functions.html#example-passing-params-using-data-attributes">通过 data-attributes 传递参数</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick(e) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      justClicked: e.target.dataset.letter</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;this.state.letters.map(letter =&gt;</span><br><span class="line">    &lt;li key=&#123;letter&#125; data-letter=&#123;letter&#125; onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">      &#123;letter&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="怎样阻止函数被调用太快或者太多次？"><a href="#怎样阻止函数被调用太快或者太多次？" class="headerlink" title="怎样阻止函数被调用太快或者太多次？"></a><a href="https://react.docschina.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row">怎样阻止函数被调用太快或者太多次？</a></h5><p>如果你有一个 <code>onClick</code> 或者 <code>onScroll</code> 这样的事件处理器，想要阻止回调被触发的太快，那么可以限制执行回调的速度，可以通过以下几种方式做到这点：</p>
<ul>
<li><strong>节流</strong>：基于时间的频率来进行抽样更改 (例如 <a href="https://lodash.com/docs#throttle"><code>_.throttle</code></a>)</li>
<li><strong>防抖</strong>：一段时间的不活动之后发布更改 (例如 <a href="https://lodash.com/docs#debounce"><code>_.debounce</code></a>)</li>
<li><strong><code>requestAnimationFrame</code> 节流</strong>：基于 requestAnimationFrame 的抽样更改 (例如 <a href="https://react.docschina.org/docs/[%60raf-schd%60](https://github.com/alexreardon/raf-schd)">raf-schd</a>)</li>
</ul>
<p>可以看这个比较 throttle 和 debounce 的<a href="http://demo.nimius.net/debounce_throttle/">可视化页面</a></p>
<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a><a href="https://react.docschina.org/docs/faq-functions.html#throttle">节流</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import throttle from &#x27;lodash.throttle&#x27;;</span><br><span class="line"></span><br><span class="line">class LoadMoreButton extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">    this.handleClickThrottled = throttle(this.handleClick, 1000);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    this.handleClickThrottled.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;button onClick=&#123;this.handleClickThrottled&#125;&gt;Load More&lt;/button&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.props.loadMore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a><a href="https://react.docschina.org/docs/faq-functions.html#debounce">防抖</a></h4><p>防抖确保函数不会在上一次被调用之后一定量的时间内被执行。当必须进行一些费时的计算来响应快速派发的事件时（比如<code>鼠标滚动或键盘事件时</code>），防抖是非常有用的。下面这个例子以 250ms 的延迟来改变文本输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import debounce from &#x27;lodash.debounce&#x27;;</span><br><span class="line"></span><br><span class="line">class Searchbox extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    this.emitChangeDebounced = debounce(this.emitChange, 250);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    this.emitChangeDebounced.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        onChange=&#123;this.handleChange&#125;</span><br><span class="line">        placeholder=&quot;Search...&quot;</span><br><span class="line">        defaultValue=&#123;this.props.value&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.emitChangeDebounced(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emitChange(value) &#123;</span><br><span class="line">    this.props.onChange(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a><a href="https://react.docschina.org/docs/faq-state.html">组件状态</a></h4>]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket.io</title>
    <url>/2021/08/17/Socket-io/</url>
    <content><![CDATA[<p><a href="https://socket.io/">Socket.io-官网</a></p>
<p><a href="https://www.w3cschool.cn/socket/">socket.io官方文档-w3cschool</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/29148869">socket.io官方文档中文版</a>——知乎博客</p>
<p><a href="https://www.jianshu.com/p/099056f9785c">Socket.io入门（简单使用socket）</a></p>
<p><a href="https://www.jianshu.com/p/1aa181662a07">Socket.io进阶（简单使用广播、命名空间）</a></p>
<p><a href="https://www.easemob.com/news/3674">什么是socketIO？</a></p>
<p><a href="https://www.w3cschool.cn/socket/socket-ulbj2eii.html">socket.io 快速入门教程——聊天应用</a></p>
<h4 id="WebSockets"><a href="#WebSockets" class="headerlink" title="WebSockets"></a>WebSockets</h4><h4 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h4><ul>
<li>Javascript库</li>
<li>面向实时Web应用</li>
<li>服务器和客户端的双向通信</li>
<li>主要使用WebSocket协议（基于WebSocket的库）</li>
<li>事件驱动</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><a href="https://github.com/visionmedia/debug">debug</a></p>
<ul>
<li><a href="https://socket.io/zh-CN/docs/v4/testing/#example-with-mocha">mocha</a></li>
<li><a href="https://socket.io/zh-CN/docs/v4/testing/#example-with-jest">jest</a></li>
<li><a href="https://socket.io/zh-CN/docs/v4/testing/#example-with-tape">tape</a></li>
</ul>
<p>Socket.IO 客户端不是 WebSocket 实现，因此无法与 WebSocket 服务器建立连接，即使<code>transports: [&quot;websocket&quot;]</code></p>
<p><a href="https://www.npmjs.com/package/ws">ws</a></p>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add socket.io</span><br></pre></td></tr></table></figure>

<p>使用 <code>µWebSockets.js &#123;#usage-with-µwebsocketsjs&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add uWebSockets.js@uNetworking/uWebSockets.js#v20.4.0</span><br></pre></td></tr></table></figure>

<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https.createServer([options][, requestListener])</span><br></pre></td></tr></table></figure>

<p><a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener">https.createServer</a></p>
<p>Konva（基于canvas的绘图库）</p>
<p><a href="https://gitee.com/jepsonpp/draw-and-guess">https://gitee.com/jepsonpp/draw-and-guess</a></p>
<p>socket发送一个connection，io收到了一个socket，就创立了连接（connected）</p>
<p>socket发送一个disconnection，就失去了连接</p>
<p>当socket发送一个input事件，携带着message数据，当io接收到之后，可能对message做相应的处理，然后返回data数据，当socket接收到data数据，可以对视图做更新处理。</p>
<p>CDN</p>
<p><a href="https://cdnjs.com/libraries/socket.io">https://cdnjs.com/libraries/socket.io</a></p>
<h4 id="博客文章"><a href="#博客文章" class="headerlink" title="博客文章"></a>博客文章</h4><p><a href="https://blog.csdn.net/weixin_47746452/article/details/126827806?spm=1001.2014.3001.5501">Vue 使用 Vue-socket.io 实现即时聊天应用（Vue3连接原理分析）</a></p>
<p><a href="https://blog.csdn.net/weixin_47746452/article/details/125600385?spm=1001.2014.3001.5501">Vue 使用 Apache Echarts 绘制地图（省市、地区）</a></p>
<p><a href="http://t.zoukankan.com/zhangmingda-p-12678630.html">WebSocket协议理解-数据包格式解析</a></p>
<p><a href="ping/pong%E6%A8%A1%E5%BC%8F_PING%E7%9A%84%E5%AE%8C%E6%95%B4%E5%BD%A2%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">ping/pong模式_PING的完整形式是什么？</a></p>
<p><a href="https://qa.1r1g.com/sf/ask/3490608271/#">socket.io中的pingtimeout和pingInterval</a></p>
<h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a><code>vue.config.js</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &#x27;/socket.io&#x27;: &#123;</span><br><span class="line">                target: &#x27;http://localhost:3000&#x27; ,</span><br><span class="line">                changeOrigin: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="src-socket-index-js"><a href="#src-socket-index-js" class="headerlink" title="src/socket/index.js"></a><code>src/socket/index.js</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import io from &#x27;socket.io-client&#x27;</span><br><span class="line"></span><br><span class="line">// 模块的作用:收发消息</span><br><span class="line">// 创建连接</span><br><span class="line">const socket = io()</span><br><span class="line"></span><br><span class="line">// 进行连接建立的监听</span><br><span class="line">socket.on(&quot;connect&#x27;, () =&gt; &#123;</span><br><span class="line"> 	console.log(&#x27;和服务器已建立连接...&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 将来便于其他模块使用socket对象，去发消息</span><br><span class="line">export default socket</span><br></pre></td></tr></table></figure>

<h4 id="目标：构建Socket-io模块"><a href="#目标：构建Socket-io模块" class="headerlink" title="目标：构建Socket.io模块"></a>目标：构建Socket.io模块</h4><p>基本语法:<br>1.创建连接:<code> const socket = io[ 地址]</code></p>
<p>2.发送消息: <code>socket.emit(消息type类型，消息内容，接收到消息的回调函致)</code></p>
<p>3.监听消息:<code>socket.on(事件type类型，接收到消息的回调国数)</code></p>
<p>为什么需要这个模块:</p>
<ol>
<li>用on 鉴听事件，<code>接收服务器</code>消息</li>
<li>用emit<code>发送消息到服务器</code></li>
</ol>
<p>构建步骤：</p>
<ol>
<li><p>安装依赖包：<code>yarn add socket.io-client</code></p>
</li>
<li><p>创建<code>src/socket/index.js </code>模块文件，编写模块内容</p>
</li>
<li><p><code>main.js </code>中导入</p>
</li>
<li><p><code>vue.config.js</code> 配置网络代理</p>
</li>
<li><p>启动后台server，<code>测试接口</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Socket.io</tag>
      </tags>
  </entry>
  <entry>
    <title>Sketch</title>
    <url>/2021/10/20/Sketch/</url>
    <content><![CDATA[<p><a href="https://www.sketch.com/docs/">Sketch官方用户手册</a></p>
<p><a href="http://www.sketchcn.com/">Sketch</a></p>
<p><a href="https://js.design/?source=sketch&plan=2">即时设计</a></p>
<p><a href="https://js.design/help">帮助中心</a></p>
<p>人工智能设计工具</p>
<p>矢量绘图也是目前进行网页，图标以及界面设计的最好方式</p>
<p> Sketch 并不是一个位图编辑应用</p>
<p>想在画布中设置一个固定的画框，你只需新建一个或多个新的画板。举个例子，设计移动应用界面时，很多设计师会为应用的每一个屏都创建一个画板，然后排列开来以便查看。</p>
<h4 id="预设模板"><a href="#预设模板" class="headerlink" title="预设模板"></a>预设模板</h4><ul>
<li>空白文件</li>
<li>Ant Design移动端</li>
<li>Ant Design网页端</li>
<li>高级界面设计</li>
<li>登录注册页面</li>
<li>面性图标</li>
<li>基础导航设计</li>
</ul>
<h4 id="可导入文件类型"><a href="#可导入文件类型" class="headerlink" title="可导入文件类型"></a>可导入文件类型</h4><ul>
<li>Figma</li>
<li>Sketch</li>
<li>XD</li>
<li>JSD</li>
</ul>
<p>我的文件——包括自己创建的文件和分享给我的文件</p>
<p>创建团队——规范化管理团队成员及项目文件</p>
<p>资源广场——有非常丰富的开源设计文件，这些文件都可以引用到你的设计稿中</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="左侧"><a href="#左侧" class="headerlink" title="左侧"></a>左侧</h5><ul>
<li>多边形</li>
<li>效率插件——多维度辅助创作</li>
<li>评论——多人评审、在线实时沟通、备注信息等</li>
</ul>
<h5 id="右侧"><a href="#右侧" class="headerlink" title="右侧"></a>右侧</h5><ul>
<li>分享——可分享或邀请他人协作，支持按角色分配不同权限，实时协作，修改随时同步（右上角）</li>
<li>导出图片——可以设置多种导出倍率及尺寸、添加图片后缀，并支持同时导出多种所需格式的图片</li>
<li>主题切换(右下角)</li>
</ul>
<h4 id="基础创建与编辑"><a href="#基础创建与编辑" class="headerlink" title="基础创建与编辑"></a>基础创建与编辑</h4><ol>
<li>创建画板</li>
<li>创建图层</li>
<li>填充图片</li>
<li>文本编辑</li>
<li>快捷复制粘贴（ctrl +d)</li>
</ol>
<h4 id="精细化编辑"><a href="#精细化编辑" class="headerlink" title="精细化编辑"></a>精细化编辑</h4><ol start="6">
<li>布尔运算</li>
<li>修改图层样式</li>
<li>矢量编辑</li>
</ol>
<h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><ol start="9">
<li>引用组件</li>
<li>等间距调整</li>
<li>响应式调整</li>
<li>样式管理</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
        <category>Sketch</category>
      </categories>
      <tags>
        <tag>Sketch</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode相关笔记</title>
    <url>/2020/08/22/VScode%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://lzw.me/a/vscode-visual-studio-code-shortcut.html">常用快捷键</a> <a href="https://www.awesomes.cn/">大牛在用</a></p>
<h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shift + Alt + F</span><br></pre></td></tr></table></figure>

<p>代码缩进</p>
<p>选中代码段之后</p>
<p>1、向左</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shift + TAB </span><br></pre></td></tr></table></figure>

<p>2、向右：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TAB</span><br></pre></td></tr></table></figure>

<h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + K + T</span><br></pre></td></tr></table></figure>

<h4 id="VSCode搜索指定某个目录下查找文件"><a href="#VSCode搜索指定某个目录下查找文件" class="headerlink" title="VSCode搜索指定某个目录下查找文件"></a><code>VSCode</code>搜索指定某个目录下查找文件</h4><ol>
<li>先点击选中这个要查找的目录。</li>
<li>右键点击后，点击里面的「Find in Folder」即 在文件夹中查找…..</li>
</ol>
<p><a href="https://jingyan.baidu.com/article/7e44095377c9d12fc1e2ef5b.html">将VSCode设置成中文语言环境</a></p>
<h5 id="快速在浏览器中打开"><a href="#快速在浏览器中打开" class="headerlink" title="快速在浏览器中打开"></a>快速在浏览器中打开</h5><ol>
<li>安装open in browser插件</li>
<li>重新启动<code>VSCode</code></li>
<li>快捷键：Alt + B</li>
</ol>
<h5 id="使用sublime快捷键"><a href="#使用sublime快捷键" class="headerlink" title="使用sublime快捷键"></a>使用sublime快捷键</h5><p>安装插件：Sublime Text Keymap and Settings Importer</p>
<h5 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h5><p><a href="https://jingyan.baidu.com/article/6f2f55a14ba6e3b5b93e6cd6.html">https://jingyan.baidu.com/article/6f2f55a14ba6e3b5b93e6cd6.html</a></p>
<p><a href="https://jingyan.baidu.com/article/6dad5075383c3fa123e36ec3.html">https://jingyan.baidu.com/article/6dad5075383c3fa123e36ec3.html</a></p>
<h5 id="VSCode编辑器字体大小设置"><a href="#VSCode编辑器字体大小设置" class="headerlink" title="VSCode编辑器字体大小设置"></a><code>VSCode</code>编辑器字体大小设置</h5><p>“settings”——“文本编辑器”——常用设置——<code>Editor：Font Size</code>（这里设置为20）</p>
<h4 id="VSCode如何用浏览器预览运行html文件"><a href="#VSCode如何用浏览器预览运行html文件" class="headerlink" title="VSCode如何用浏览器预览运行html文件"></a><code>VSCode</code>如何用浏览器预览运行html文件</h4><p>在”扩展“中搜索”view in browser“——右键点击html文件，选择View In Browser</p>
<p><code>view in browser</code>已废弃， 换成”open in browser”</p>
<h4 id="VSCode-编写Vue项目安装Vetur插件实现-代码高亮"><a href="#VSCode-编写Vue项目安装Vetur插件实现-代码高亮" class="headerlink" title="VSCode 编写Vue项目安装Vetur插件实现 代码高亮"></a>VSCode 编写Vue项目安装Vetur插件实现 代码高亮</h4><h4 id="VSCode中配置Vue3-TS-的用户代码片段"><a href="#VSCode中配置Vue3-TS-的用户代码片段" class="headerlink" title="VSCode中配置Vue3 + TS 的用户代码片段"></a>VSCode中配置Vue3 + TS 的用户代码片段</h4><p>设置——配置用户代码片段——新建代码片段——代码片段文件名（输入该快捷键生成代码片段–例如：vue3）</p>
<p>输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;vue-template&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;vue3&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">		&quot;&lt;template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;script setup lang=&#x27;ts&#x27;&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/script&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;style lang=&#x27;less&#x27; scoped&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/style&gt;&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;my vue3 template&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><p>在新建的.vue文件中，输入’vue3‘，即可快速生成以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li><p>open in browser：在默认浏览器打开</p>
</li>
<li><p>CodeGeeX</p>
</li>
<li><p>Vetur插件</p>
</li>
</ul>
<h3 id="AI自动代码补全插件"><a href="#AI自动代码补全插件" class="headerlink" title="AI自动代码补全插件"></a>AI自动代码补全插件</h3><h4 id="Tabnine"><a href="#Tabnine" class="headerlink" title="Tabnine"></a>Tabnine</h4><p><a href="https://www.tabnine.com/">tabnine官网</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode">Tabnine AI Autocomplete</a></p>
<p><a href="https://github.com/codota/TabNine">TabNine-GitHub</a></p>
<h2 id="WebStorm10"><a href="#WebStorm10" class="headerlink" title="WebStorm10"></a>WebStorm10</h2><p>WebStorm是最专业的前端IDE开发工具</p>
<p>WebStorm配置和快捷键</p>
<h2 id="Atom-工具使用"><a href="#Atom-工具使用" class="headerlink" title="Atom_工具使用"></a>Atom_工具使用</h2><p>由github发布的前端开发工具</p>
<p>非常强大和非常开发的开发工具平台</p>
<ul>
<li>官网地址: <a href="https://atom.io/">https://atom.io/</a></li>
<li>百度网盘下载地址：<a href="http://pan.baidu.com/s/1ntszCgT">http://pan.baidu.com/s/1ntszCgT</a></li>
</ul>
<p>Atom的插件和主题安装和配置</p>
]]></content>
      <categories>
        <category>VScode</category>
      </categories>
      <tags>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js + Element-UI导航写法</title>
    <url>/2020/03/19/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<h4 id="方法一（基本的）："><a href="#方法一（基本的）：" class="headerlink" title="方法一（基本的）："></a>方法一（基本的）：</h4><blockquote>
<p>elementUi导航通常会和vue-router一起使用，所以与官网的示例的写法不太一样。具体写法如下:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">   &lt;el-menu-item v-for=&quot;item in items&quot; :index=&quot;item.src&quot;&gt;&#123;&#123;item.name&#125;&#125;            </span><br><span class="line">   &lt;/el-menu-item&gt;</span><br><span class="line"> &lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>
<p><strong>data里则是正常的数据即可：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        items:[</span><br><span class="line">          &#123;src:&#x27;/gameinfo/index&#x27;,name:&#x27;基本信息&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameversion/index&#x27;,name:&#x27;版本管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplatform/index&#x27;,name:&#x27;渠道管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameproduct/index&#x27;,name:&#x27;充值产品&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplugin/index&#x27;,name:&#x27;插件管理&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>效果如图所示：</strong></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav1.png" alt="路由"></p>
<p>【参考】： <a href="https://blog.csdn.net/weixin_42488404/article/details/83414761">VUE elementUi导航写法</a></p>
<h4 id="方法二-加上图标的-："><a href="#方法二-加上图标的-：" class="headerlink" title="方法二(加上图标的)："></a>方法二(加上图标的)：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;(item, i) in items&quot; :key=&quot;i&quot; :index=&quot;item.path&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;          </span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>
<p><strong>data里面</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">items:[</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;基本信息&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-info&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameversion/index&#x27;,</span><br><span class="line">        title:&#x27;版本管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-version&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplatform/index&#x27;,</span><br><span class="line">        title:&#x27;渠道管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-channel&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameproduct/index&#x27;,</span><br><span class="line">        title:&#x27;充值产品&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-recharge&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplugin/index&#x27;,</span><br><span class="line">        title:&#x27;插件管理&#x27;,</span><br><span class="line">        icon:&#x27;el-icon-cpu&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/package/index&#x27;,</span><br><span class="line">        title:&#x27;打包管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-packageKit&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/order/index&#x27;,</span><br><span class="line">        title:&#x27;订单查询&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-orderQuery&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;切换至ios&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-android&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>效果如图所示：</strong><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav2.png" alt="导航栏跳转路由"></p>
<p>【参考】： <a href="https://www.jianshu.com/p/e24c37fb9e64">Vue框架Element UI教程-导航栏跳转路由（五）</a></p>
<h4 id="方法三（当前目录下的多个子页面选中时的高亮问题）："><a href="#方法三（当前目录下的多个子页面选中时的高亮问题）：" class="headerlink" title="方法三（当前目录下的多个子页面选中时的高亮问题）："></a>方法三（当前目录下的多个子页面选中时的高亮问题）：</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav3.png" alt="当前目录下的多个子页面选中时的高亮问题"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav4.png" alt="当前目录下的多个子页面选中时的高亮问题"></p>
<p><strong>router/index.js文件的路由配置（特别关注activeMenu、apiActiveMenu的配置）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/gameinfo/edit&#x27;,</span><br><span class="line">  name: &#x27;GameEdit&#x27;,</span><br><span class="line">  component: GameEdit,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: &#x27;修改信息&#x27;,</span><br><span class="line">    activeMenu: &#x27;/gameinfo/index&#x27;, // 主菜单 的 接口文档 高亮</span><br><span class="line">    apiActiveMenu: &#x27;/gameinfo/edit&#x27; // 接口文档的子菜单高亮</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>关键代码（在导航栏组件内写）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    activeMenu() &#123;</span><br><span class="line">      const route = this.$route</span><br><span class="line">      const &#123; meta, path &#125; = route</span><br><span class="line">      // if set path, the sidebar will highlight the path you set</span><br><span class="line">      if (meta.apiActiveMenu) &#123; // 注意这里很重要</span><br><span class="line">        return meta.activeMenu</span><br><span class="line">      &#125;</span><br><span class="line">      return path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>【参考】： <a href="https://blog.csdn.net/m0_38134431/article/details/94755527">elementui中NavMenu 导航菜单高亮问题——解决多种情况</a></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-Vite-Vant-笔记</title>
    <url>/2021/11/03/Vue3-Vite-Vant-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/351888882">vue3使用vite2移动端项目</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/442732586">vite px转rem (vite+vant+vue3 demo)</a></p>
<p>注：如果是ts项目，postcss.config.js需重命名为postcss.config.cjs</p>
<p><a href="https://www.proyy.com/6956431101141352485.html#toc_3">vite+vue3+ts+eslint编写移动端rem自适应</a></p>
<p><a href="https://blog.csdn.net/weixin_52827704/article/details/123914911">flex布局: 一行显示固定个数，换行展示</a></p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue3-vite-vant</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue3-vite-vant</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="使用vant"><a href="#使用vant" class="headerlink" title="使用vant"></a>使用vant</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vant</span><br></pre></td></tr></table></figure>

<h4 id="按需引入组件（推荐）"><a href="#按需引入组件（推荐）" class="headerlink" title="按需引入组件（推荐）"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart#an-xu-yin-ru-zu-jian-tui-jian">按需引入组件（推荐）</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components -D</span><br></pre></td></tr></table></figure>

<h5 id="配置vite-config-ts"><a href="#配置vite-config-ts" class="headerlink" title="配置vite.config.ts"></a>配置vite.config.ts</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import Components from &#x27;unplugin-vue-components/vite&#x27;;</span><br><span class="line">import &#123; VantResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [VantResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="引入vant的样式"><a href="#引入vant的样式" class="headerlink" title="引入vant的样式"></a>引入vant的样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;vant/lib/index.css&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="引入函数组件的样式"><a href="#引入函数组件的样式" class="headerlink" title="引入函数组件的样式"></a>引入函数组件的样式</h5><p>Vant 中有个别组件是以函数的形式提供的，包括 <code>Toast</code>，<code>Dialog</code>，<code>Notify</code> 和 <code>ImagePreview</code> 组件。在使用函数组件时，<code>unplugin-vue-components</code> 无法自动引入对应的样式，因此需要手动引入样式。</p>
<h4 id="使用方法1"><a href="#使用方法1" class="headerlink" title="使用方法1"></a>使用方法1</h4><h5 id="在-lt-script-setup-gt-中可以直接使用-Vant-组件，不需要进行组件注册。"><a href="#在-lt-script-setup-gt-中可以直接使用-Vant-组件，不需要进行组件注册。" class="headerlink" title="在 &lt;script setup&gt; 中可以直接使用 Vant 组件，不需要进行组件注册。"></a>在 <code>&lt;script setup&gt;</code> 中可以直接使用 Vant 组件，不需要进行组件注册。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; Button &#125; from &#x27;vant&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Button /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用方法2"><a href="#使用方法2" class="headerlink" title="使用方法2"></a>使用方法2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button disabled type=&quot;primary&quot;&gt;禁用状态&lt;/van-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="移动端适配写法-设计稿尺寸（750-1624px）"><a href="#移动端适配写法-设计稿尺寸（750-1624px）" class="headerlink" title="移动端适配写法-设计稿尺寸（750*1624px）"></a>移动端适配写法-设计稿尺寸（750*1624px）</h4><p><a href="https://www.zcool.com.cn/article/ZODQ2Mzg0.html">移动端设计规范和方法汇总</a></p>
<h5 id="一、rem写法"><a href="#一、rem写法" class="headerlink" title="一、rem写法"></a>一、rem写法</h5><p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.元素在750宽的设计稿中，多少px，就写多少rem</p>
<h5 id="二、viewport插件的写法"><a href="#二、viewport插件的写法" class="headerlink" title="二、viewport插件的写法"></a>二、viewport插件的写法</h5><p>元素在750宽的设计稿中，<code>*px</code>，就写<code>*/2px</code>  (要除以2)</p>
<h4 id="Rem适配"><a href="#Rem适配" class="headerlink" title="Rem适配"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#liu-lan-qi-gua-pei">Rem适配</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss postcss-pxtorem --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -S amfe-flexible</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p>
<blockquote>
<p>由于<code>viewport</code>单位得到众多浏览器的兼容，<code>lib-flexible</code>这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用<code>viewport</code>来替代此方。</p>
</blockquote>
<h4 id="Viewport-布局—推荐—本项目使用"><a href="#Viewport-布局—推荐—本项目使用" class="headerlink" title="Viewport 布局—推荐—本项目使用"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#viewport-bu-ju">Viewport 布局</a>—推荐—本项目使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="viewport布局的相关配置"><a href="#viewport布局的相关配置" class="headerlink" title="viewport布局的相关配置"></a>viewport布局的相关配置</h4><p>在项目根目录添加<code>postcss.config.cjs</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// postcss.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    &#x27;postcss-px-to-viewport&#x27;: &#123;</span><br><span class="line">      viewportWidth: 375,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>注意：添加完文件之后，要重启项目</code></p>
<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This file is being treated as an ES module because it has </span><br><span class="line">a &#x27;.js&#x27; file extension and &#x27;H:\Gitee\Vue3_demo\vue3-vite-vant\package.json&#x27; contains &quot;type&quot;: &quot;module&quot;. To treat it as a CommonJS script, rename it to use the &#x27;.cjs&#x27; file extension.</span><br></pre></td></tr></table></figure>

<p>解决：1.将<code>postcss.config.js</code>改为<code>postcss.config.cjs</code> ;  2.重启服务</p>
<h4 id="使用less"><a href="#使用less" class="headerlink" title="使用less"></a>使用less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i less less-loader -D</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h4 id="在main-ts中引入reset-less"><a href="#在main-ts中引入reset-less" class="headerlink" title="在main.ts中引入reset.less"></a>在main.ts中引入reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./assets/css/reset.less&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="reset-less"><a href="#reset-less" class="headerlink" title="reset.less"></a>reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* http://meyerweb.com/eric/tools/css/reset/ </span><br><span class="line">   v2.0 | 20110126</span><br><span class="line">   License: none (public domain)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed, </span><br><span class="line">figure, figcaption, footer, header, hgroup, </span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	border: 0;</span><br><span class="line">	// font-size: 100%;</span><br><span class="line">	// font: inherit;</span><br><span class="line">	vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure, </span><br><span class="line">footer, header, hgroup, menu, nav, section &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">	line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">ol, ul &#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote, q &#123;</span><br><span class="line">	quotes: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: &#x27;&#x27;;</span><br><span class="line">	content: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">	border-spacing: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置手机可访问本地电脑项目"><a href="#配置手机可访问本地电脑项目" class="headerlink" title="配置手机可访问本地电脑项目"></a>配置手机可访问本地电脑项目</h4><p><a href="http://www.manongjc.com/detail/29-saiyfskdbsqqcmz.html">Vite 使用本地ip+localhost访问服务</a></p>
<p>使用vite新建的项目默认访问链接：<a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>
<ol>
<li><p>修改<code>vite.config.js</code>文件，添加<code>server</code>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;		// 处理使用本地ip访问页面</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>若使用手机访问本地ip页面，访问不成功（显示“服务器已停用”）。即要将本地电脑的防火墙“关闭”即可。<a href="https://blog.csdn.net/zoepriselife316/article/details/117957732">手机和电脑连接同一wifi,手机访问不了电脑起的项目</a></p>
<p>2.1电脑的“设置”——“网络和共享中心”——“Windows Defender 防火墙”（左下角）——“启用或关闭Windows Defender 防火墙”（左侧）——选择“关闭”（专用网络和公用网络都关闭）</p>
<p><code>注意：使用完，最好重新“启用”防火墙。</code></p>
<p>2.2 如果手机连接的当前wifi那里的<code>HTTP代理</code>-<code>配置代理</code>是开启的，将其关闭</p>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/dd26cae7d7b2">vite.config.js之resolve.alias配置</a></p>
<h4 id="vue实现动态改变title"><a href="#vue实现动态改变title" class="headerlink" title="vue实现动态改变title"></a><a href="https://www.dianjilingqu.com/161326.html">vue实现动态改变title</a></h4><h4 id="自定义主题颜色"><a href="#自定义主题颜色" class="headerlink" title="自定义主题颜色"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/config-provider#zi-ding-yi-css-bian-liang">自定义主题颜色</a></h4><p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ConfigProvider &#125; from &#x27;vant&#x27;;</span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-config-provider :theme-vars=&quot;themeVars&quot;&gt;</span><br><span class="line">    &lt;van-nav-bar</span><br><span class="line">    title=&quot;红包活动&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/van-config-provider&gt;</span><br></pre></td></tr></table></figure>

<p>3.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const themeVars = &#123;</span><br><span class="line">    navBarBackgroundColor: &#x27;#555&#x27;,</span><br><span class="line">    navBarTitleTextColor: &#x27;#fff&#x27;,</span><br><span class="line">    navBarIconColor: &#x27;#fff&#x27;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原来：background: var(–van-nav-bar-background-color);</p>
<p>自定义写法：navBarBackgroundColor，会转换成–van-nav-bar-background-color</p>
</blockquote>
<h4 id="样式覆盖报错处理"><a href="#样式覆盖报错处理" class="headerlink" title="样式覆盖报错处理"></a><a href="https://blog.csdn.net/m0_51431448/article/details/123003864">样式覆盖报错处理</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[@vue/compiler-sfc] the &gt;&gt;&gt; and /deep/ combinators have been deprecated. Use :deep() instead.</span><br></pre></td></tr></table></figure>

<p>在Vue2中 我们经常使用 <strong>&gt;&gt;&gt;</strong> 或 <strong>/deep/</strong> 样式穿透 修改<a href="https://so.csdn.net/so/search?q=elementui&spm=1001.2101.3001.7020">elementui</a>里面的样式</p>
<p>但是Vue3中 弃用了 <strong>&gt;&gt;&gt;</strong> 和 <strong>/deep/</strong> 使用 <strong>:deep()</strong> 代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/deep/ .van-cell__title&#123;</span><br><span class="line">    span&#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> /deep/ .van-cell__left-icon&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:deep(.van-cell__title)&#123;</span><br><span class="line">    span&#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">:deep(.van-cell__left-icon)&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a><a href="https://router.vuejs.org/installation.html">路由配置</a></h4><p>1.安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<p>2.src目录中新建router目录，新建index.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;createRouter, createWebHashHistory&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import RedPacket from &#x27;../pages/redPacket/index.vue&#x27;;</span><br><span class="line">import Withdraw from &#x27;../pages/Withdraw/index.vue&#x27;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123; </span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        component: RedPacket,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;红包活动&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path: &#x27;/withdraw&#x27;,</span><br><span class="line">        component: Withdraw,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;提现&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes, </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure>

<p>3.修改mian.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;;</span><br><span class="line"></span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure>

<p>4.App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="动态修改页面Title"><a href="#动态修改页面Title" class="headerlink" title="动态修改页面Title"></a>动态修改页面Title</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to, from) =&gt; &#123;</span><br><span class="line">    // 动态修改页面title</span><br><span class="line">    if (to.meta.title) &#123;</span><br><span class="line">        document.title = to.meta.title  as string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="页面跳转组件-router-link"><a href="#页面跳转组件-router-link" class="headerlink" title="页面跳转组件-router-link"></a>页面跳转组件-router-link</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/withdraw&quot;&gt;</span><br><span class="line">    &lt;van-button color=&quot;#fe8124&quot; plain size=&quot;small&quot;&gt; </span><br><span class="line">    提现</span><br><span class="line">    &lt;/van-button&gt;</span><br><span class="line">&lt;/router-link&gt; </span><br></pre></td></tr></table></figure>

<h4 id="自定义主题放在App-vue"><a href="#自定义主题放在App-vue" class="headerlink" title="自定义主题放在App.vue"></a>自定义主题放在App.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ConfigProvider &#125; from &#x27;vant&#x27;;</span><br><span class="line">// 自定义主题颜色</span><br><span class="line">  const themeVars = &#123;</span><br><span class="line">      navBarBackgroundColor: &#x27;#555&#x27;,</span><br><span class="line">      navBarTitleTextColor: &#x27;#fff&#x27;,</span><br><span class="line">      navBarIconColor: &#x27;#fff&#x27;,</span><br><span class="line">      cellHorizontalPadding: &#x27;8px&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-config-provider :theme-vars=&quot;themeVars&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/van-config-provider&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="父子组件传值-defineProps"><a href="#父子组件传值-defineProps" class="headerlink" title="父子组件传值-defineProps"></a>父子组件传值-defineProps</h4><p>参考：<a href="https://blog.csdn.net/skyblacktoday/article/details/120879677">vue3：语法糖内的defineProps及defineEmits、defineExpose</a></p>
<p>属性：</p>
<p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: String,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>采用ts专有声明，无默认值</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props =  defineProps&lt;&#123; // 采用ts专有声明，无默认值</span><br><span class="line">    title: string,</span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>采用ts专有声明，有默认值</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Props &#123;</span><br><span class="line">    title?: string</span><br><span class="line">&#125;</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">    title: &#x27;首页&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="子组件："><a href="#子组件：" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: String,</span><br><span class="line">&#125;)</span><br><span class="line">或带默认值</span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;红包活动&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="父组件："><a href="#父组件：" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;&#x27;红包活动&#x27;&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：如果传值是字符串要加上单引号(:title=&quot;&#39;红包活动&#39;&quot;)，否则不生效</code></p>
<h5 id="或使用变量："><a href="#或使用变量：" class="headerlink" title="或使用变量："></a>或使用变量：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const title = ref(&#x27;红包活动&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;title&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子组件传父组件-defineEmits"><a href="#子组件传父组件-defineEmits" class="headerlink" title="子组件传父组件-defineEmits"></a>子组件传父组件-defineEmits</h4><h5 id="子组件：-1"><a href="#子组件：-1" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    left-arrow</span><br><span class="line">    :right-text=&quot;props.rightText&quot;</span><br><span class="line">    @click-right=&quot;onClickRight&quot;</span><br><span class="line">/&gt;</span><br><span class="line">const $emit = defineEmits([&#x27;navRightClick&#x27;])</span><br><span class="line">// 导航栏右侧按钮点击</span><br><span class="line">const onClickRight = () =&gt; &#123;</span><br><span class="line">    $emit(&#x27;navRightClick&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    rightText: String</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="父组件：-1"><a href="#父组件：-1" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot; :rightText=&quot;&#x27;提现明细&#x27;&quot; @navRightClick=&quot;handleRightClick&quot;/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">    console.log(&quot;点击右侧按钮&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编程式路由跳转"><a href="#编程式路由跳转" class="headerlink" title="编程式路由跳转"></a>编程式路由跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">     router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="导航栏父子传值-也可改为插槽的用法"><a href="#导航栏父子传值-也可改为插槽的用法" class="headerlink" title="导航栏父子传值-也可改为插槽的用法"></a>导航栏父子传值-也可改为插槽的用法</h4><h5 id="子组件：-2"><a href="#子组件：-2" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">&gt;</span><br><span class="line">   &lt;template #right&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure>

<p>不能写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;      // 这样写不起作用</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure>

<h5 id="父组件：-2"><a href="#父组件：-2" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;&gt;</span><br><span class="line">   &lt;router-link to=&quot;/withdraw/detail&quot;&gt;红包明细&lt;/router-link&gt;</span><br><span class="line">&lt;/TopNav&gt;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;&gt;</span><br><span class="line">   &lt;span @click=&quot;handleRightClick&quot;&gt;红包明细&lt;/span&gt;</span><br><span class="line">&lt;/TopNav&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;跳转&#x27;)</span><br><span class="line">     router.push(&#x27;/withdraw/detail&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Vite热更新的开启"><a href="#Vite热更新的开启" class="headerlink" title="Vite热更新的开启"></a>Vite热更新的开启</h4><p>vite.config.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    hmr: true,    // 开启热更新</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/weixin_45369499/article/details/125158995">vite热更新（vue3）</a>   | <a href="https://blog.csdn.net/wanglaotou88/article/details/124708297">Vite 是如何做热更新的</a></p>
<p><code>项目的热更新存在延迟，每次都要重启项目</code></p>
<p>做了以上配置还是不起作用：</p>
<p>原因：组件引入的路径大小写写错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Withdraw from &#x27;../pages/Withdraw/index.vue&#x27;;</span><br></pre></td></tr></table></figure>

<p>解决：将<code>Withdraw</code>改为<code>withdraw</code>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Withdraw from &#x27;../pages/withdraw/index.vue&#x27;;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.jb51.net/article/240873.htm">Vue Vite热更新不起作用的正确解决办法</a></p>
<blockquote>
<p>提示：文件夹名称严格注意大小写</p>
<p>router 路由中名称 和文件夹(目录), 文件名需要保证大小写一致</p>
</blockquote>
<h4 id="‘v-model’-directives-require-no-argument"><a href="#‘v-model’-directives-require-no-argument" class="headerlink" title="‘v-model’ directives require no argument"></a><a href="https://blog.csdn.net/weixin_48952990/article/details/125387578">‘v-model’ directives require no argument</a></h4><p>解决方法：<br>解决方法：<br>在VScode中，打开 “文件&gt;首选项&gt;设置” 找到右侧用户设置<br>搜索vetur.validation,找到下面这句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;vetur.validation.template&quot;: true  </span><br></pre></td></tr></table></figure>


<p>将true改成false</p>
<p>//如果没有可以直接添加该句 （将检查关闭）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;vetur.validation.template&quot;: false</span><br></pre></td></tr></table></figure>

<h4 id="vue3：复制功能（vue-clipboard3）"><a href="#vue3：复制功能（vue-clipboard3）" class="headerlink" title="vue3：复制功能（vue-clipboard3）"></a><a href="https://blog.csdn.net/qq_40745143/article/details/123688798">vue3：复制功能（vue-clipboard3）</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-clipboard3</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import useClipboard from &#x27;vue-clipboard3&#x27;</span><br><span class="line">import &#123; Toast &#125; from &#x27;vant&#x27;;</span><br><span class="line">import &#x27;vant/es/toast/style&#x27;;</span><br><span class="line"></span><br><span class="line">// 复制绑定码</span><br><span class="line">const &#123; toClipboard &#125; = useClipboard()</span><br><span class="line">const copy = async (val:string) =&gt; &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      await toClipboard(val)</span><br><span class="line">      console.log(&#x27;Copied to clipboard&#x27;)</span><br><span class="line">      Toast.success(&#x27;复制成功&#x27;);</span><br><span class="line">   &#125; catch (e) &#123;</span><br><span class="line">      console.error(e)</span><br><span class="line">   &#125;</span><br><span class="line">   show.value = false;  // 关闭弹窗</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-button color=&quot;#fe7c1a&quot; @click=&quot;copy(&#x27;bcJcB9&#x27;)&quot;&gt;复制并前往绑定&lt;/van-button&gt;</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/col">页面布局</a></h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue3-Vite-Vant-%E7%AC%94%E8%AE%B0/note1.png" alt="layout布局"></p>
<p>左右有padding，元素之间间距相等（加<code>gutter=&quot;15&quot;</code>），元素宽度一样(<code>span=&quot;6&quot;</code>)，换行（每行相加够24）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-row justify=&quot;space-between&quot; gutter=&quot;15&quot;&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot; class=&quot;active&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;5元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;10元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line"></span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br></pre></td></tr></table></figure>

<p><code>注：这样写，按钮看起来还是不平均配分,因没有给按钮设置宽度（width: 100%;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.van-button&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    margin-bottom: 18px;</span><br><span class="line">    background-color: #ffd898;</span><br><span class="line">    border-color: #ffd898;</span><br><span class="line">&#125;</span><br><span class="line">.active&#123;</span><br><span class="line">    .van-button&#123;</span><br><span class="line">        background-color: #ffab22;</span><br><span class="line">        border-color: #ffab22;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态绑定class"><a href="#动态绑定class" class="headerlink" title="动态绑定class"></a>动态绑定class</h4><p><code>:class</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:class=&quot;&#123;active: amount === i.amount&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h3><ol>
<li>vite-plugin-mock</li>
<li>mockjs</li>
<li>axios</li>
</ol>
<p><a href="https://www.jianshu.com/p/d812ce349265">mockjs介绍</a></p>
<p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">https://github.com/nuysoft/Mock/wiki/Getting-Started</a></p>
<p><a href="http://mockjs.com/">mock官网</a></p>
<p><a href="http://mockjs.com/examples.html">mock示例</a></p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-mock mockjs  -D</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/vbenjs/vite-plugin-mock">vite-plugin-mock</a></strong></p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#usage">使用</a></p>
<h5 id="2-在vite-config-ts中引入"><a href="#2-在vite-config-ts中引入" class="headerlink" title="2.在vite.config.ts中引入"></a>2.在vite.config.ts中引入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; viteMockServe &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    // default</span><br><span class="line">    mockPath: &#x27;mock&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h5 id="3-在项目根目录新建mock目录-mock-index-ts："><a href="#3-在项目根目录新建mock目录-mock-index-ts：" class="headerlink" title="3.在项目根目录新建mock目录-mock/index.ts："></a>3.在项目根目录新建mock目录-mock/index.ts：</h5><p><a href="https://github.com/vbenjs/vite-plugin-mock#mock-file-example">示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: &#x27;vben&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/post&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    timeout: 2000,</span><br><span class="line">    response: &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;vben&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/text&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    rawResponse: async (req, res) =&gt; &#123;</span><br><span class="line">      let reqbody = &#x27;&#x27;</span><br><span class="line">      await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        req.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class="line">          reqbody += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(&#x27;end&#x27;, () =&gt; resolve(undefined))</span><br><span class="line">      &#125;)</span><br><span class="line">      res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;)</span><br><span class="line">      res.statusCode = 200</span><br><span class="line">      res.end(`hello, $&#123;reqbody&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h5 id="4-安装axios"><a href="#4-安装axios" class="headerlink" title="4.安装axios"></a>4.安装axios</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<h5 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(&#x27;/api/get&#x27;)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h5 id="6-使用mock来模拟更多数据"><a href="#6-使用mock来模拟更多数据" class="headerlink" title="6.使用mock来模拟更多数据"></a>6.使用mock来模拟更多数据</h5><h5 id="7-将mock模拟的数据放到接口返回中"><a href="#7-将mock模拟的数据放到接口返回中" class="headerlink" title="7.将mock模拟的数据放到接口返回中"></a>7.将mock模拟的数据放到接口返回中</h5><p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line">var list = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: list</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// 定义数据类型</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">// 输出结果随机生成的数据（node index.js）</span><br><span class="line"> console.log(data);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/d8ca41e9bce4">vue项目，svn提交代码时忽略node_modules文件夹提交</a></p>
<h5 id="8-将数据和接口方法分开"><a href="#8-将数据和接口方法分开" class="headerlink" title="8.将数据和接口方法分开"></a>8.将数据和接口方法分开</h5><p>mock/data.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// mock的数据</span><br><span class="line">// 金额列表</span><br><span class="line">export const amountList = Mock.mock(&#123;</span><br><span class="line">    // 20条数据</span><br><span class="line">    &quot;amountList&quot;: [&#123;</span><br><span class="line">      &quot;amount&quot;: 2,</span><br><span class="line">      &quot;amountId&quot;: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import &#123; amountList &#125; from &#x27;./data.js&#x27;</span><br><span class="line"></span><br><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">      url: &#x27;/api/getAmountList&#x27;,</span><br><span class="line">      method: &#x27;get&#x27;,</span><br><span class="line">      response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          code: 0,</span><br><span class="line">          data: amountList,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h4 id="reactive的做法"><a href="#reactive的做法" class="headerlink" title="reactive的做法"></a>reactive的做法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// reactive的做法</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">const userinfo = reactive(&#123;</span><br><span class="line">    name: &#x27;&#x27;,</span><br><span class="line">    level: 0,</span><br><span class="line">    server_area: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">const &#123;name, level, server_area&#125; = toRefs(userinfo)</span><br><span class="line">axios.get(&#x27;/api/getUserInfo&#x27;).then(res =&gt; &#123;</span><br><span class="line">    const &#123; name, level, server_area &#125; =  res.data.data.userInfo</span><br><span class="line">    userinfo.name = name;</span><br><span class="line">    userinfo.level = level;</span><br><span class="line">    userinfo.server_area = server_area;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="ref的做法"><a href="#ref的做法" class="headerlink" title="ref的做法"></a>ref的做法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">// ref的做法</span><br><span class="line">const name = ref(&#x27;&#x27;);</span><br><span class="line">const server_area = ref(&#x27;&#x27;);</span><br><span class="line">const level = ref(0)</span><br><span class="line">axios.get(&#x27;/api/getUserInfo&#x27;).then(res =&gt; &#123;</span><br><span class="line">    const userinfo = res.data.data.userInfo;</span><br><span class="line">    name.value = userinfo.name;</span><br><span class="line">    level.value = userinfo.level;</span><br><span class="line">    server_area.value = userinfo.server_area;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="枚举的使用-enum"><a href="#枚举的使用-enum" class="headerlink" title="枚举的使用-enum"></a>枚举的使用-enum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 枚举</span><br><span class="line">enum HbType &#123;</span><br><span class="line">    &#x27;等级红包&#x27; = 1,</span><br><span class="line">    &#x27;充值红包&#x27; ,</span><br><span class="line">    &#x27;高级红包&#x27; ,</span><br><span class="line">&#125;</span><br><span class="line">enum HbIcon &#123;</span><br><span class="line">    &#x27;src/assets/images/hb_level.png&#x27; = 1,</span><br><span class="line">    &#x27;src/assets/images/hb_charge.png&#x27; ,</span><br><span class="line">    &#x27;src/assets/images/hb_senior.png&#x27; ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 红包数据</span><br><span class="line">// type:1 --等级红包</span><br><span class="line">// type:2 --充值红包</span><br><span class="line">// type:3 --高级红包</span><br><span class="line">export const hbData = Mock.mock(&#123;</span><br><span class="line">    hbData: &#123;</span><br><span class="line">        total: 300.00,</span><br><span class="line">        list: [&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 1,</span><br><span class="line">            amount: 50,</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 2,</span><br><span class="line">            amount: 100,</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 3,</span><br><span class="line">            amount: 150,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const hbList = ref([]);</span><br><span class="line">axios.get(&#x27;/api/getHbData&#x27;).then(res =&gt; &#123;</span><br><span class="line">    hbList.value.push(...res.data.data.hbData.list);</span><br><span class="line">    console.log(hbList)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 结构</span><br><span class="line">&lt;van-cell </span><br><span class="line">    class=&quot;withdraw-li&quot;</span><br><span class="line">    :title=&quot;&#x27;+ &#x27; + i.amount +&#x27;元&#x27;&quot;</span><br><span class="line">    :label=&quot;HbType[i.type]&quot;</span><br><span class="line">    center </span><br><span class="line">    v-for=&quot;i in hbList&quot;</span><br><span class="line">    :key=&quot;i.id&quot;</span><br><span class="line">&gt;  </span><br><span class="line">    &lt;template #icon&gt;</span><br><span class="line">        &lt;img :src=&quot;HbIcon[i.type]&quot; class=&quot;red-packet&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #value&gt;</span><br><span class="line">        &lt;router-link to=&quot;/withdraw&quot;&gt;提现 &amp;gt;&lt;/router-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br></pre></td></tr></table></figure>



<h4 id="解决报错信息"><a href="#解决报错信息" class="headerlink" title="解决报错信息"></a>解决报错信息</h4><p>控制台报以下警告信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Added non-passive event listener to a scroll-blocking ‘touchstart‘ event. Consider marking event...</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 安装插件</span><br><span class="line">npm install -S default-passive-events</span><br><span class="line">// 在main.js引入</span><br><span class="line">import &#x27;default-passive-events&#x27;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/yjl13598765406/article/details/125496865">参考</a></p>
<h4 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h4><p><code>注意： 写v-for循环时，要对循环的列表进行判断，以免数据还没有返回就进行渲染，获取不到值</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot; v-if=&quot;list.length &gt; 0&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>Property &#39;id&#39; does not exist on type &#39;never&#39;.</code></p>
<p>解决：加上类型限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface List &#123;</span><br><span class="line">   amount: number;</span><br><span class="line">   date: string</span><br><span class="line">   id: number</span><br><span class="line">   type: number</span><br><span class="line">&#125;</span><br><span class="line">const list = ref&lt;List[]&gt;([])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite配置</title>
    <url>/2022/08/04/Vite%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>配置文件：<code>vite.config.ts</code></p>
<h3 id="1-配置打包公共路径-base"><a href="#1-配置打包公共路径-base" class="headerlink" title="1.配置打包公共路径-base"></a>1.配置打包公共路径-base</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base:&#x27;./&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置地址别名-alias"><a href="#2-配置地址别名-alias" class="headerlink" title="2.配置地址别名-alias"></a>2.配置地址别名-<a href="https://vitejs.cn/config/#resolve-alias">alias</a></h3><p>使用简短的别名去替代一个较长的路径</p>
<p><code>__dirname</code>：项目的绝对路径</p>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save path</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; resolve &#125; from &#x27;path&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      test: resolve(__dirname, &#x27;src/components/test/&#x27;),</span><br><span class="line">      icon: resolve(__dirname, &#x27;./src/assets/images/&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前：</span><br><span class="line">import ViteSet from &#x27;../../components/test/ViteSet.vue&#x27;;</span><br><span class="line">&lt;img src=&quot;../../assets/images/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line">        </span><br><span class="line">// 修改后：</span><br><span class="line">import ViteSet2 from &#x27;test/ViteSet.vue&#x27;;</span><br><span class="line">&lt;img src=&quot;icon/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ViteSet&gt;&lt;/ViteSet&gt;</span><br><span class="line">&lt;ViteSet2&gt;&lt;/ViteSet2&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="2-1图片的地址的别名-特殊处理"><a href="#2-1图片的地址的别名-特殊处理" class="headerlink" title="2.1图片的地址的别名-特殊处理"></a>2.1图片的地址的别名-特殊处理</h4><blockquote>
<p>图片使用<code>icon: resolve(__dirname, &#39;./src/assets/images/&#39;)</code>这种配置，打包上线后，页面可以正常显示图片，但本地测试是加载不出图片的。</p>
<p>所以不能直接写 <code>名称：resolve(...)</code>，要使用引号加<code>斜杠开头的别名</code></p>
</blockquote>
<h5 id="2-1-1配置"><a href="#2-1-1配置" class="headerlink" title="2.1.1配置"></a>2.1.1配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#x27;/icon&#x27;:&#x27;./src/assets/images/&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2使用"><a href="#2-1-2使用" class="headerlink" title="2.1.2使用"></a>2.1.2使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前：</span><br><span class="line">&lt;img src=&quot;../../assets/images/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line">// 修改后：</span><br><span class="line">&lt;img src=&quot;/icon/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>这样本地环境和正式环境都能正常显示</strong></p>
</blockquote>
<p>参考：<a href="https://blog.csdn.net/liujucai/article/details/112280937">vite vue3.0 配置拦截，路由跳转</a></p>
<h3 id="3-生产环境去除console-log的配置"><a href="#3-生产环境去除console-log的配置" class="headerlink" title="3.生产环境去除console.log的配置"></a>3.生产环境去除console.log的配置</h3><p><a href="https://vitejs.cn/config/#build-terseroptions">build.terserOptions</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  build:&#123;</span><br><span class="line">    minify: &#x27;terser&#x27;, // 必须配置&#x27;terser&#x27;，不然terserOptions不生效，因为minify默认不是&#x27;terser&#x27;</span><br><span class="line">    terserOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">            //生产环境时移除console</span><br><span class="line">            drop_console: true,</span><br><span class="line">            drop_debugger: true,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-1报错处理"><a href="#3-1报错处理" class="headerlink" title="3.1报错处理"></a>3.1报错处理</h4><p>打包上线会出现报错：</p>
<p><code>[vite:terser] terser not found. Since Vite v3, terser has become an optional dependency. You need to install it.</code></p>
<p>解决：Vite V3需要安装<a href="https://www.npmjs.com/package/terser">terser依赖包</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i terser</span><br></pre></td></tr></table></figure>

<h3 id="4-mock数据的配置"><a href="#4-mock数据的配置" class="headerlink" title="4.mock数据的配置"></a>4.mock数据的配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-mock mockjs  -D</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/vbenjs/vite-plugin-mock">vite-plugin-mock</a></strong></p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#usage">使用</a></p>
<h4 id="4-1引入"><a href="#4-1引入" class="headerlink" title="4.1引入"></a>4.1引入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; viteMockServe &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    // default</span><br><span class="line">    mockPath: &#x27;mock&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h4 id="4-2使用"><a href="#4-2使用" class="headerlink" title="4.2使用"></a>4.2使用</h4><p>在根目录新建mock目录</p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#mock-file-example">示例</a></p>
<h5 id="4-2-1mock-index-ts："><a href="#4-2-1mock-index-ts：" class="headerlink" title="4.2.1mock/index.ts："></a>4.2.1mock/index.ts：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: &#x27;vben&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/post&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    timeout: 2000,</span><br><span class="line">    response: &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;vben&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/text&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    rawResponse: async (req, res) =&gt; &#123;</span><br><span class="line">      let reqbody = &#x27;&#x27;</span><br><span class="line">      await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        req.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class="line">          reqbody += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(&#x27;end&#x27;, () =&gt; resolve(undefined))</span><br><span class="line">      &#125;)</span><br><span class="line">      res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;)</span><br><span class="line">      res.statusCode = 200</span><br><span class="line">      res.end(`hello, $&#123;reqbody&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2引入axios"><a href="#4-2-2引入axios" class="headerlink" title="4.2.2引入axios"></a>4.2.2引入axios</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i axios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(&#x27;/api/get&#x27;)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h5 id="使用mock来模拟更多数据"><a href="#使用mock来模拟更多数据" class="headerlink" title="使用mock来模拟更多数据"></a>使用mock来模拟更多数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mockjs --save-dev</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// 定义数据类型</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">// 输出结果随机生成的数据（node index.js）</span><br><span class="line"> console.log(data);</span><br></pre></td></tr></table></figure>

<h5 id="将mock模拟的数据放到接口返回中"><a href="#将mock模拟的数据放到接口返回中" class="headerlink" title="将mock模拟的数据放到接口返回中"></a>将mock模拟的数据放到接口返回中</h5><p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line">var list = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: list</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h3 id="5-配置前端跨域代理"><a href="#5-配置前端跨域代理" class="headerlink" title="5.配置前端跨域代理"></a>5.配置前端跨域代理</h3><p><code>proxy</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        &#x27;/ss&#x27;: &#123;</span><br><span class="line">            target: &#x27;https://saucenao.com/search.php?db=999&amp;output_type=2&amp;url=https://pica.zhimg.com/v2-178387c7e8e907910d715e890bfd7519_1440w.jpg?source=172ae18b&amp;api_key=33d4bee5c19583cd3756ee47f2ebef8edd5bef7e&#x27;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            rewrite: (path) =&gt; path.replace(/^\/ss/, &#x27;&#x27;),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&#x27;/ss&#x27;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">	plugins:[vue()],</span><br><span class="line">	server:&#123;	//中转服务器</span><br><span class="line">        proxy:&#123;		//通过代理实现跨域</span><br><span class="line">        // https://i.maoyan.com</span><br><span class="line">            &#x27;/path&#x27;:&#123;</span><br><span class="line">                target:&#x27;https://i.maoyan.com&#x27;,		//替换的服务端地址</span><br><span class="line">                changeOrigin:true,		//开启代理，允许跨域</span><br><span class="line">                rewrite: path=&gt;path.replace(/^\/path/,&#x27;&#x27;)		//设置重写的路径</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="6-env环境变量的配置"><a href="#6-env环境变量的配置" class="headerlink" title="6.env环境变量的配置"></a>6.env环境变量的配置</h3><h4 id="6-1环境变量配置"><a href="#6-1环境变量配置" class="headerlink" title="6.1环境变量配置"></a>6.1环境变量配置</h4><p><code>.env.development</code>：</p>
<p>可配置多个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_BASE_API = /api</span><br><span class="line">VITE_BASE_API = /api2</span><br><span class="line">VITE_BASE_API = /api3</span><br></pre></td></tr></table></figure>

<p><code>.env.production</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_BASE_API = https://www.manga2020.com/api/v3/comic/hydxjxrwgb/chapter/cb321fca-c608-11e8-879b-024352452ce0?timeout=10000</span><br></pre></td></tr></table></figure>

<h4 id="6-2修改请求链接"><a href="#6-2修改请求链接" class="headerlink" title="6.2修改请求链接"></a>6.2修改请求链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(import.env.VITE_BASE_API as string)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地环境使用mock数据： /api    正式环境使用正式的api链接</p>
<p>这样本地可以使用mock数据，正式使用正式的api数据。互不影响。  </p>
</blockquote>
<h3 id="7-CDN的配置"><a href="#7-CDN的配置" class="headerlink" title="7.CDN的配置"></a>7.CDN的配置</h3><p><code>备注：暂时配置不成功</code></p>
<p><strong><a href="https://github.com/MMF-FE/vite-plugin-cdn-import">vite-plugin-cdn-import</a></strong></p>
<p><a href="https://github.com/MMF-FE/vite-plugin-cdn-import#vueuse-demo">vue使用示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vite-plugin-cdn-import --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import importToCDN, &#123; autoComplete &#125; from &#x27;vite-plugin-cdn-import&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        vue(),</span><br><span class="line">        importToCDN(&#123;</span><br><span class="line">            modules: [</span><br><span class="line">                autoComplete(&#x27;vue&#x27;), // vue2 use autoComplete(&#x27;vue2&#x27;)</span><br><span class="line">                autoComplete(&#x27;@vueuse/shared&#x27;),</span><br><span class="line">                autoComplete(&#x27;@vueuse/core&#x27;)</span><br><span class="line">            ],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-代码压缩的配置-gzip"><a href="#8-代码压缩的配置-gzip" class="headerlink" title="8.代码压缩的配置-gzip"></a>8.代码压缩的配置-gzip</h3><p><strong><a href="https://github.com/vbenjs/vite-plugin-compression">vite-plugin-compression</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-compression -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import viteCompression from &#x27;vite-plugin-compression&#x27;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [viteCompression()],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="9-打包图片"><a href="#9-打包图片" class="headerlink" title="9.打包图片"></a>9.打包图片</h3><p><strong><a href="https://github.com/vbenjs/vite-plugin-imagemin">vite-plugin-imagemin</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vite-plugin-imagemin@0.4.6 -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import viteImagemin from &#x27;vite-plugin-imagemin&#x27;</span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      viteImagemin(&#123;</span><br><span class="line">        gifsicle: &#123;</span><br><span class="line">          optimizationLevel: 7,</span><br><span class="line">          interlaced: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        optipng: &#123;</span><br><span class="line">          optimizationLevel: 7,</span><br><span class="line">        &#125;,</span><br><span class="line">        mozjpeg: &#123;</span><br><span class="line">          quality: 20,</span><br><span class="line">        &#125;,</span><br><span class="line">        pngquant: &#123;</span><br><span class="line">          quality: [0.8, 0.9],</span><br><span class="line">          speed: 4,</span><br><span class="line">        &#125;,</span><br><span class="line">        svgo: &#123;</span><br><span class="line">          plugins: [</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;removeViewBox&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;removeEmptyAttrs&#x27;,</span><br><span class="line">              active: false,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码，本地会报错，需重启一下</p>
<p>参考：<a href="https://www.icode9.com/content-4-1151614.html">搭建vite2.0+vue3.0+ts+多页面打包+多环境+gzip+图片压缩框架</a></p>
<p><a href="https://www.pudn.com/news/627cb910ebb030486dd6b752.html">Vite图片压缩(vite-plugin-imagemin) imagemin error: XXXX解决办法</a></p>
<h3 id="10-element-plus按需引入"><a href="#10-element-plus按需引入" class="headerlink" title="10.element plus按需引入"></a>10.<a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">element plus按需引入</a></h3><p><a href="https://www.jianshu.com/p/5f70056a03b6">做个开源博客学习Vite2 + Vue3 （二）设置别名、代理和ESLint</a></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-Vite项目搭建笔记</title>
    <url>/2020/07/29/Vue3-Vite%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://vitejs.dev/">Vite官网</a></p>
<p><a href="https://vitejs.cn/">Vite中文官网</a></p>
<p>安装Vuter，有代码提示</p>
<blockquote>
<p>Vite requires <a href="https://nodejs.org/en/">Node.js</a> version 14.18+, 16+</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">创建项目</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ok to proceed? (y) y</span><br><span class="line">√ Project name: ... Vue3_mobile</span><br><span class="line">√ Package name: ... vue3-mobile</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Vue3_mobile</span><br><span class="line">npm install   </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue_mobile</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue_mobile</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<h4 id="几款实用的VUE移动端UI框架"><a href="#几款实用的VUE移动端UI框架" class="headerlink" title="几款实用的VUE移动端UI框架"></a><a href="https://wenku.baidu.com/view/c4b466ee5cbfc77da26925c52cc58bd6318693d5.html">几款实用的VUE移动端UI框架</a></h4><ul>
<li><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">Vant</a> （有赞）</li>
<li><a href="https://nutui.jd.com/#/">NutUI</a>   (京东)</li>
<li><a href="http://mint-ui.github.io/docs/#/">Mint-ui</a></li>
<li><a href="https://doc.vux.li/zh-CN/vux-loader/plugins.html">Vux</a>  （微信风格）</li>
<li><a href="https://vonic.ai/#features">vonic</a></li>
</ul>
<h4 id="vue3-vite的项目如何将打包后的绝对路径改为相对路径"><a href="#vue3-vite的项目如何将打包后的绝对路径改为相对路径" class="headerlink" title="vue3+vite的项目如何将打包后的绝对路径改为相对路径"></a><a href="https://blog.csdn.net/zy21131437/article/details/125861170">vue3+vite的项目如何将打包后的绝对路径改为相对路径</a></h4><p>在vue3+vite的项目中，配置文件名为 <strong><code>vite.config.js</code>**，如果没有就在<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>下新建一个，文件名固定为：</strong><code>vite.config.js</code>**，然后在里面加上base属性，设置值为 <code>&quot;./&quot;</code>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base: &#x27;./&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果不是用Vite的，<a href="https://www.jb51.net/article/243243.htm">vue cli3.x打包后如何修改生成的静态资源的目录和路径</a></p>
<h3 id="移动端1px的问题"><a href="#移动端1px的问题" class="headerlink" title="移动端1px的问题"></a>移动端1px的问题</h3><p>1px可以不转换为rem</p>
<h3 id="移动端vm与rem适配"><a href="#移动端vm与rem适配" class="headerlink" title="移动端vm与rem适配"></a>移动端vm与rem适配</h3><ol>
<li>将根元素的<code>font-size</code>设置为<code>font-size: 0.13333333vw;</code></li>
<li>这样就是1rem = 1px；写样式的时候，多少px就写多少rem</li>
</ol>
<p>参考博客：</p>
<p><a href="https://blog.csdn.net/qq_38990451/article/details/107382146?app_version=5.6.1&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22107382146%22,%22source%22:%22winney07%22%7D&ctrtid=M0aIM&utm_source=app">最简单的移动端适配方案（vw/rem）</a></p>
<p><a href="https://blog.csdn.net/sky2714/article/details/80849863?app_version=5.6.1&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%2280849863%22,%22source%22:%22winney07%22%7D&ctrtid=keW0g&utm_source=app">最简单的移动端适配方案(rem+vw)</a></p>
<h4 id="关于字体的适配-文本字号不建议使用rem"><a href="#关于字体的适配-文本字号不建议使用rem" class="headerlink" title="关于字体的适配-文本字号不建议使用rem"></a>关于字体的适配-<a href="https://github.com/amfe/article/issues/17">文本字号不建议使用<code>rem</code></a></h4><blockquote>
<p>现在绝大多数的字体文件都自带一些点阵尺寸，通常是<code>16px</code>和<code>24px</code>，所以我们<strong>不希望出现<code>13px</code>和<code>15px</code>这样的奇葩尺寸</strong>。</p>
</blockquote>
<p>所以可以使用媒体查询，根据不同的dpr，设置不一样的字体大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    font-size: 12px; </span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line">@media(-webkit-min-device-pixel-ratio:2),(min-device-pixel-ratio:2)&#123;</span><br><span class="line">   p &#123;</span><br><span class="line">      font-size: 24px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media(-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3)&#123;</span><br><span class="line">   p &#123;</span><br><span class="line">      font-size: 36px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>github上使用下面这种，但好像不起作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[data-dpr=&quot;2&quot;] p &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;3&quot;] p &#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="svg的使用"><a href="#svg的使用" class="headerlink" title="svg的使用"></a>svg的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x知识图谱</title>
    <url>/2022/08/25/Vue3-x%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_01%E5%AD%A6%E5%89%8D%E4%BA%86%E8%A7%A3.png" alt="学前了解"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_02%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png" alt="基础知识"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_03%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95.png" alt="组件相关语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_04%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.png" alt="高级语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_05%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.png" alt="高级语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_06%E9%85%8D%E5%A5%97%E5%B7%A5%E5%85%B7.png" alt="配套工具"></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs-Express-Mongodb-Mongoose实战教程</title>
    <url>/2021/03/02/NodeJs-Express-Mongodb-Mongoose%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>课程链接：<a href="https://www.bilibili.com/video/BV16f4y1U7oT">nodejs教程_2020年最新NodeJs+Express+Mongodb+Mongoose入门实战教程</a></p>
<h4 id="判断是否安装成功"><a href="#判断是否安装成功" class="headerlink" title="判断是否安装成功"></a>判断是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h4 id="Vscode快速生成代码块"><a href="#Vscode快速生成代码块" class="headerlink" title="Vscode快速生成代码块"></a>Vscode快速生成代码块</h4><p>在vscode里面安装<code>node-snippets</code>，会有node代码的相关代码提示。安装完之后，重启vscode即可生效</p>
<h4 id="http模块-基本使用"><a href="#http模块-基本使用" class="headerlink" title="http模块-基本使用"></a>http模块-基本使用</h4><p>例如，在<code>app.js</code>中输入<code>nodehttp</code>，会有<code>node-http-server</code>等语句的提示，选择<code>node-http-server</code>，会生成对应的代码块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//表示引入http模块</span><br><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">/*</span><br><span class="line">request		获取客户端传过来的信息</span><br><span class="line">response	给浏览器响应信息</span><br><span class="line">*/</span><br><span class="line">http.createServer(function (request, response) &#123;</span><br><span class="line">  //设置响应头</span><br><span class="line">  response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class="line">  //表示给我们页面上面输出一句话并且结束响应</span><br><span class="line">  response.end(&#x27;Hello World&#x27;);</span><br><span class="line">&#125;).listen(8081); // 端口</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<p>在控制台显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server running at http://127.0.0.1:8081/</span><br></pre></td></tr></table></figure>

<p>浏览器访问<a href="http://127.0.0.1:8081/%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%EF%BC%9A">http://127.0.0.1:8081/，可看到：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果修改了app.js里面的内容，需要重新运行<code>node app.js</code></p>
</blockquote>
<h4 id="http模块-基本使用2"><a href="#http模块-基本使用2" class="headerlink" title="http模块-基本使用2"></a>http模块-基本使用2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt;&#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    // 设置响应头</span><br><span class="line">    // 状态码 200， 文件类型是htm1，字符集是utf-8</span><br><span class="line">    res.writeHead(200, &#123;&quot;Content-type&quot;: &quot;text/html;charset=&#x27;utf-8&#x27;&quot;&#125;);  // 解决乱码</span><br><span class="line"></span><br><span class="line">    res.write(&#x27;你好  nodejs&#x27;);</span><br><span class="line"></span><br><span class="line">    res.end();   // 一定要写end</span><br><span class="line">&#125;).listen(3001)</span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://127.0.0.1:3001/%EF%BC%8C%E6%98%BE%E7%A4%BA%EF%BC%9A">http://127.0.0.1:3001/，显示：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浣犲ソ nodejs</span><br></pre></td></tr></table></figure>

<p>加上以下代码，解决乱码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.write(&#x27;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&#x27;);  // 解决乱码</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt;&#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    // 设置响应头</span><br><span class="line">    // 状态码 200， 文件类型是htm1，字符集是utf-8</span><br><span class="line">    res.writeHead(200, &#123;&quot;Content-type&quot;: &quot;text/html;charset=&#x27;utf-8&#x27;&quot;&#125;);   // 解决乱码</span><br><span class="line"></span><br><span class="line">    res.write(&#x27;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&#x27;);  // 解决乱码</span><br><span class="line"></span><br><span class="line">    res.write(&#x27;你好  nodejs&#x27;);</span><br><span class="line">    </span><br><span class="line">    res.write(&#x27;&lt;h2&gt;你好  nodejs&lt;/h2&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">    res.end();   // 一定要写end</span><br><span class="line">&#125;).listen(3001)</span><br></pre></td></tr></table></figure>

<p>重新启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>



<h4 id="url模块-基本使用"><a href="#url模块-基本使用" class="headerlink" title="url模块-基本使用"></a>url模块-基本使用</h4><blockquote>
<p>nodejs的内置模块</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">var api = &#x27;http://www.itying.com?name=zhangsan&amp;age=20&#x27;;</span><br><span class="line"></span><br><span class="line">var params = url.parse(api, true).query;</span><br><span class="line"></span><br><span class="line">console.log(`姓名： $&#123;params.name&#125;--年龄： $&#123;params.age&#125;`)</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名： zhangsan--年龄： 20</span><br></pre></td></tr></table></figure>

<h4 id="http-url模块的基本使用"><a href="#http-url模块的基本使用" class="headerlink" title="http+url模块的基本使用"></a>http+url模块的基本使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt;&#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    // http://127.0.0.1:3001/?name=zhangsan&amp;age=20  </span><br><span class="line"></span><br><span class="line">    // 设置响应头</span><br><span class="line">    // 状态码 200， 文件类型是htm1，字符集是utf-8</span><br><span class="line">    res.writeHead(200, &#123;&quot;Content-type&quot;: &quot;text/html;charset=&#x27;utf-8&#x27;&quot;&#125;);   // 解决乱码</span><br><span class="line"></span><br><span class="line">    res.write(&#x27;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&#x27;);  // 解决乱码</span><br><span class="line"></span><br><span class="line">    if(req.url != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        var userinfo = url.parse(req.url, true).query;</span><br><span class="line">        console.log(`姓名： $&#123;userinfo.name&#125;--年龄： $&#123;userinfo.age&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    res.write(&#x27;你好  nodejs&#x27;);</span><br><span class="line"></span><br><span class="line">    res.write(&#x27;&lt;h2&gt;你好  nodejs&lt;/h2&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">    res.end();   // 一定要写end</span><br><span class="line">&#125;).listen(3001)</span><br></pre></td></tr></table></figure>

<p>在浏览器访问：<a href="http://127.0.0.1:3001/?name=zhangsan&amp;age=20">http://127.0.0.1:3001/?name=zhangsan&amp;age=20</a>  </p>
<p>控制台显示：<code>姓名： zhangsan--年龄： 20</code></p>
<h4 id="Nodejs自启动工具supervisor"><a href="#Nodejs自启动工具supervisor" class="headerlink" title="Nodejs自启动工具supervisor"></a>Nodejs自启动工具supervisor</h4><ol>
<li><p>安装supervisor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g supervisor</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用supervisor代替node命令启动应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supervisor app.js         </span><br></pre></td></tr></table></figure>

<p><code>注意：</code>如果在vscode中，识别不了<code>supervisor</code>命令，需要重启vscode</p>
</li>
</ol>
<h3 id="CommonJs-和Nodejs模块、自定义模块"><a href="#CommonJs-和Nodejs模块、自定义模块" class="headerlink" title="CommonJs 和Nodejs模块、自定义模块"></a>CommonJs 和Nodejs模块、自定义模块</h3><h4 id="Nodejs中的模块化"><a href="#Nodejs中的模块化" class="headerlink" title="Nodejs中的模块化"></a>Nodejs中的模块化</h4><p>Node应用由模块组成，采用CommonJS模块规范。</p>
<p>在nodejs中，模块分为两类：</p>
<ul>
<li>核心模块（node提供的模块，如：http模块、url模块、fs模块都是nodejs内置的核心模块，可以直接引入使用）</li>
<li>文件模块（用户编写的模块）</li>
</ul>
<p><code>module/tools.js</code>：</p>
<h5 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">1.我们可以把公共的功能抽离成为一个单独的js 文件作为一个模块，默认情况下面这个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或者属性，就必须在模块里面通过 exports或者module.exports 暴露属性或者方法。</span><br><span class="line">2．在需要使用这些模块的文件中，通过require的方式引入这个模块。这个时候就可以使用模块里面暴露的属性和方法。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function formatApi(api) &#123;</span><br><span class="line">    return &#x27;http://www.itying.com/&#x27; + api</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.formatApi = formatApi;</span><br></pre></td></tr></table></figure>

<h5 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const tools = require(&#x27;./module/tools&#x27;)</span><br><span class="line"></span><br><span class="line"> var api = tools.formatApi(&#x27;api/focus&#x27;);</span><br><span class="line"> </span><br><span class="line"> res.write(api);</span><br></pre></td></tr></table></figure>

<p>在浏览器看到的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.itying.com/api/focus</span><br></pre></td></tr></table></figure>

<h4 id="exports的使用"><a href="#exports的使用" class="headerlink" title="exports的使用"></a>exports的使用</h4><p><code>request.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    get:function() &#123;</span><br><span class="line">        console.log(&#x27;从服务器获取数据&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    post: function()&#123;</span><br><span class="line">        console.log(&#x27;提交数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.xxxx = obj;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const request = require(&#x27;./module/request&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(request);</span><br><span class="line"></span><br><span class="line">request.xxxx.get();</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">&#123; xxxx: &#123; get: [Function: get], post: [Function: post] &#125; &#125;</span><br><span class="line">从服务器获取数据</span><br></pre></td></tr></table></figure>

<h4 id="module-export的使用"><a href="#module-export的使用" class="headerlink" title="module.export的使用"></a><code>module.export</code>的使用</h4><p><code>request.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    get:function() &#123;</span><br><span class="line">        console.log(&#x27;从服务器获取数据&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    post: function()&#123;</span><br><span class="line">        console.log(&#x27;提交数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = obj;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const request = require(&#x27;./module/request&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(request);</span><br><span class="line"></span><br><span class="line">request.get();</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">&#123; get: [Function: get], post: [Function: post] &#125;</span><br><span class="line">从服务器获取数据</span><br></pre></td></tr></table></figure>

<h4 id="exports单独导出"><a href="#exports单独导出" class="headerlink" title="exports单独导出"></a>exports单独导出</h4><p><code>request.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 单独导出</span><br><span class="line">exports.get =  function() &#123;</span><br><span class="line">    console.log(&#x27;从服务器获取数据&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.post =  function() &#123;</span><br><span class="line">    console.log(&#x27;提交数据&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const request = require(&#x27;./module/request&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(request);</span><br><span class="line"></span><br><span class="line">request.get();</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">&#123; get: [Function: get], post: [Function: post] &#125;</span><br><span class="line">从服务器获取数据</span><br></pre></td></tr></table></figure>

<h4 id="node-modules目录的模块使用"><a href="#node-modules目录的模块使用" class="headerlink" title="node_modules目录的模块使用"></a>node_modules目录的模块使用</h4><p>在项目目录中，新建<code>node_modules</code>目录，创建<code>axios</code>目录，新建<code>index.js</code>文件</p>
<p><code>node_modules\axios\index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.get =  function() &#123;</span><br><span class="line">    console.log(&#x27;从服务器获取数据&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.post =  function() &#123;</span><br><span class="line">    console.log(&#x27;提交数据&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const axios = require(&#x27;./node_modules/axios/index.js&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(axios);</span><br><span class="line"></span><br><span class="line">axios.get();</span><br><span class="line"></span><br><span class="line">axios.post();</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">&#123; get: [Function (anonymous)], post: [Function (anonymous)] &#125;</span><br><span class="line">从服务器获取数据</span><br><span class="line">提交数据 </span><br></pre></td></tr></table></figure>

<h5 id="node-modules目录的模块–引用时的简写"><a href="#node-modules目录的模块–引用时的简写" class="headerlink" title="node_modules目录的模块–引用时的简写"></a>node_modules目录的模块–引用时的简写</h5><p>nodejs里面，<code>node_modules</code>目录里面定义的模块，可以省略<code>node_modules</code>路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const axios = require(&#x27;axios/index.js&#x27;);</span><br></pre></td></tr></table></figure>

<p><code>index.js</code>文件为默认执行文件，也可以省略写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const axios = require(&#x27;axios&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="node-modules目录的模块（非index-js文化）–引用"><a href="#node-modules目录的模块（非index-js文化）–引用" class="headerlink" title="node_modules目录的模块（非index.js文化）–引用"></a>node_modules目录的模块（非index.js文化）–引用</h5><p><code>node_modules\db\db.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.find =  function() &#123;</span><br><span class="line">    console.log(&#x27;查找数据&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.add =  function() &#123;</span><br><span class="line">    console.log(&#x27;增加&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const db = require(&#x27;db&#x27;);</span><br><span class="line">db.add();</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line">Error: Cannot find module &#x27;db&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为db里面的db.js不是index.js</p>
</blockquote>
<h6 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h6><p>切换到<code>node_modules\db</code>目录，执行以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init --yes</span><br><span class="line">或</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p><code>package.json</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;db.js&quot;,      // 入口文件是db.js</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">增加</span><br></pre></td></tr></table></figure>

<h3 id="Nodejs中的包、npm-、第三方模块、package-json以及cnpm"><a href="#Nodejs中的包、npm-、第三方模块、package-json以及cnpm" class="headerlink" title="Nodejs中的包、npm 、第三方模块、package.json以及cnpm"></a>Nodejs中的包、npm 、第三方模块、package.json以及cnpm</h3><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><blockquote>
<p>Nodejs中除了它自己提供的核心模块外，我们可以自定义模块，也可以使用第三方的模块。Nodejs 中第三方模块由包组成，可以通过包来对一组具有相互依赖关系的模块进行统一管理。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Node-js%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/%E5%8C%85.png" alt="包"></p>
<h5 id="完全符合CommonJs规范的包目录一般包含如下这些文件。"><a href="#完全符合CommonJs规范的包目录一般包含如下这些文件。" class="headerlink" title="完全符合CommonJs规范的包目录一般包含如下这些文件。"></a>完全符合CommonJs规范的包目录一般包含如下这些文件。</h5><ul>
<li>package.json：包描述文件。</li>
<li>bin：用于存放可执行二进制文件的目录。</li>
<li>lib：用于存放JavaScript代码的目录。</li>
<li>doc：用于存放文档的目录。</li>
</ul>
<blockquote>
<p>在 NodeJs中通过NPM命令来下载第三方的模块（包）。</p>
</blockquote>
<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>npm是<code>世界上最大的开放源代码</code>的生态系统。我们可以通过npm下载各种各样的包，这些源代码(包）我们可以在 <a href="https://www.npmjs.com找到./">https://www.npmjs.com找到。</a></p>
<p><strong>npm是随同NodeJS一起安装的包管理工具，能解决NodeJS 代码部署上的很多问题，常见的使用场景有以下几种：</strong></p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。(silly-datetime)</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序(工具)到本地使用。(supervisor)</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<h5 id="–save"><a href="#–save" class="headerlink" title="–save"></a>–save</h5><blockquote>
<p>安装依赖包的时候，加上<code>--save</code>，这样在<code>package.json</code>文件中的<code>dependencies</code>中就有包的相关信息，当我们将<code>package.json</code>分享给别人的时候，别人直接执行<code>npm i</code> 或<code>cnpm i</code>就可以安装项目中的依赖包。可以根据package.json来安装对应的依赖包</p>
</blockquote>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>创建package.json：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init  或者  npm init -yes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>npm i / cnpm i表示安装dependencies对应的包   如果删掉node_modules可以通过此命令找到 package.json对应的所有的包信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot; : &#123;</span><br><span class="line">    &quot;ejs&quot;:&quot;^2.3.4&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.13.3&quot;,</span><br><span class="line">    &quot;formidable&quot;: &quot;^1.0.17&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>^</code>表示第一位版本号不变，后面两位取最新的</li>
<li><code>~</code>表示前两位不变，最后一个取最新</li>
<li><code>*</code>表示全部取最新</li>
</ul>
<blockquote>
<p>如果要指定版本安装，将版本号前面的<code>^/~/*</code>去掉即可</p>
</blockquote>
<h4 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h4><ul>
<li><a href="http://www.npmjs.org/">http://www.npmjs.org</a>     npm包官网</li>
<li><a href="https://npm.taobao.org/">https://npm.taobao.org/</a>   淘宝npm镜像官网</li>
</ul>
<blockquote>
<p>淘宝NPM镜像是一个完整npmjs.org镜像，你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步。</p>
</blockquote>
<p>我们可以使用我们定制的cnpm (gzip压缩支持)命令行工具代替默认的npm：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="Nodejs中的fs模块的使用"><a href="#Nodejs中的fs模块的使用" class="headerlink" title="Nodejs中的fs模块的使用"></a>Nodejs中的fs模块的使用</h3><ol>
<li>fs.stat检测是文件还是目录</li>
<li>fs.mkdir创建目录</li>
<li>fs.writeFile创建写入文件</li>
<li>fs.appendFile追加文件</li>
<li>fs.readFile读取文件</li>
<li>fs.readdir读取目录</li>
<li>fs.rename重命名</li>
<li>fs.rmdir删除目录</li>
<li>fs.unlink删除文件</li>
</ol>
<p>创建<code>package.json</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;02&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="检测是文件还是目录"><a href="#检测是文件还是目录" class="headerlink" title="检测是文件还是目录"></a>检测是文件还是目录</h4><p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">fs.stat(&#x27;./package.json&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(`是文件：$&#123;data.isFile()&#125;`);</span><br><span class="line">    console.log(`是目录：$&#123;data.isDirectory()&#125;`);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台输出：</span><br><span class="line">是文件：true</span><br><span class="line">是目录：false</span><br></pre></td></tr></table></figure>

<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p><code>app.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.mkdir(&#x27;./css&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;创建成功&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台显示：</span><br><span class="line">创建成功</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line"></span><br><span class="line">// 控制台显示：</span><br><span class="line">[Error: EEXIST: file already exists, mkdir &#x27;H:\Gitee\nodejs\node_demo\02\css&#x27;] &#123;</span><br><span class="line">  errno: -4075,</span><br><span class="line">  code: &#x27;EEXIST&#x27;,</span><br><span class="line">  syscall: &#x27;mkdir&#x27;,</span><br><span class="line">  path: &#x27;H:\\Gitee\\nodejs\\node_demo\\02\\css&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建写入文件"><a href="#创建写入文件" class="headerlink" title="创建写入文件"></a>创建写入文件</h4><p><code>如果不存在文件，就直接创建文件且写入内容；如果存在文件，就直接写入内容，替换旧的</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// app.js</span><br><span class="line">fs.writeFile(&#x27;./html/index.html&#x27;, &#x27;你好nodejs&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;创建写入文件成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line">// 控制台显示：</span><br><span class="line">创建写入文件成功</span><br><span class="line"></span><br><span class="line">// app.js</span><br><span class="line">fs.writeFile(&#x27;./html/index.html&#x27;, &#x27;你好nodejs---写入文件&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;创建写入文件成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line">// 控制台显示：</span><br><span class="line">创建写入文件成功</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename        (String)                文件名称</span><br><span class="line">data            (String | Buffer)       将要写入的内容，可以使字符串或buffer数据。</span><br><span class="line">options         (object)                option数组对象，包含:</span><br><span class="line">    · encoding  (String)                可选值，默认‘utf8&#x27;，当data使buffer时，该值应该为ignore</span><br><span class="line">    · mode      (Number)                文件读写权限，默认值438</span><br><span class="line">    · flag      (String)                默认值‘w’</span><br><span class="line"> callback       &#123;Function&#125;              回调，传递一个异常参数err。</span><br></pre></td></tr></table></figure>

<h4 id="追加文件"><a href="#追加文件" class="headerlink" title="追加文件"></a>追加文件</h4><p><code>如果不存在文件，就直接创建文件且写入内容；如果存在文件，就直接追加添加的内容到后面</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.appendFile(&#x27;./css/base.css&#x27;, &#x27;body&#123;color:red&#125;\n&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;追加文件成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line">// 控制台显示：</span><br><span class="line">追加文件成功</span><br><span class="line"></span><br><span class="line">fs.appendFile(&#x27;./css/base.css&#x27;, &#x27;h3&#123;color:red&#125;\n&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;追加文件成功&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">node app.js</span><br><span class="line">// 控制台显示：</span><br><span class="line">追加文件成功</span><br></pre></td></tr></table></figure>

<p><code>./css/base.css</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body&#123;color:red&#125;</span><br><span class="line">h3&#123;color:red&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.readFile(&#x27;./html/index.html&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(data);</span><br><span class="line">    console.log(data.toString());    // 把Buffer转化成string类型</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台输出：</span><br><span class="line">&lt;Buffer e4 bd a0 e5 a5 bd 6e 6f 64 65 6a 73 2d 2d 2d 2d 2d e5 86 99 e5 85 a5 e6 96 87 e4 bb b6&gt;</span><br><span class="line">你好nodejs-----写入文件</span><br></pre></td></tr></table></figure>

<h4 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    │  index.html</span><br><span class="line">    │  news.html</span><br><span class="line">    │</span><br><span class="line">    └─js</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.readdir(&#x27;./html&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>读取该目录下的目录以及文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台输出：</span><br><span class="line">[ &#x27;index.html&#x27;, &#x27;js&#x27;, &#x27;news.html&#x27; ]</span><br></pre></td></tr></table></figure>

<h4 id="重命名·移动文件"><a href="#重命名·移动文件" class="headerlink" title="重命名·移动文件"></a>重命名·移动文件</h4><p><code>功能:1、表示重命名2、移动文件</code></p>
<h5 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.rename(&#x27;./css/aaa.css&#x27;, &#x27;./css/index.css&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;重命名成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.rename(&#x27;./css/index.css&#x27;, &#x27;./html/index.css&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;移动文件成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><p><code>如果目录里面有文件，直接删除目录，会删除失败</code></p>
<blockquote>
<p>aaa目录里面有index.html文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.rmdir(&#x27;./aaa&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;删除目录成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台输出：</span><br><span class="line">[Error: ENOTEMPTY: directory not empty, rmdir &#x27;H:\Gitee\nodejs\node_demo\02\aaa&#x27;] &#123;</span><br><span class="line">  errno: -4051,</span><br><span class="line">  code: &#x27;ENOTEMPTY&#x27;,</span><br><span class="line">  syscall: &#x27;rmdir&#x27;,</span><br><span class="line">  path: &#x27;H:\\Gitee\\nodejs\\node_demo\\02\\aaa&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>所以要先删除该目录中的文件</code></p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.unlink(&#x27;./aaa/index.html&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;删除文件成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台输出：</span><br><span class="line">删除文件成功</span><br></pre></td></tr></table></figure>

<p><code>然后再执行删除目录的命令</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs.rmdir(&#x27;./aaa&#x27;, err =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;删除目录成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台输出：</span><br><span class="line">删除目录成功</span><br></pre></td></tr></table></figure>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>判断服务器上面有没有upload目录。如果没有创建这个目录，如果有的话不做操作。(图片上传)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">var path = &#x27;./upload&#x27;;</span><br><span class="line"></span><br><span class="line">fs.stat(path, (err, data)=&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        mkdir(path);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(data.isDirectory())&#123;</span><br><span class="line">        console.log(&#x27;目录已经存在&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 如果存在upload文件，首先删除文件，再去执行创建目录</span><br><span class="line">        fs.unlink(path, err =&gt;&#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                console.log(&#x27;请检测传入的数据是否正确&#x27;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mkdir(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 创建目录的函数</span><br><span class="line">function mkdir(path) &#123;</span><br><span class="line">    fs.mkdir(path, err =&gt; &#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(&#x27;创建目录成功&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="mkdirp的使用"><a href="#mkdirp的使用" class="headerlink" title="mkdirp的使用"></a>mkdirp的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mkdirp --save</span><br></pre></td></tr></table></figure>

<p>创建目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mkdirp = require(&#x27;mkdirp&#x27;);</span><br><span class="line">mkdirp(&#x27;./uploadDir&#x27;).then(made =&gt;</span><br><span class="line">    console.log(`made directories, starting with $&#123;made&#125;`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>一次生成多级目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mkdirp = require(&#x27;mkdirp&#x27;);</span><br><span class="line"></span><br><span class="line">mkdirp(&#x27;./upload/img/xxxx&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><p>wwwroot文件夹下面有images css js 以及index.html，找出wwwroot目录下面的所有的目录，然后放在一个数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">fs.readdir(&#x27;./wwwroot&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结果：</span><br><span class="line">[ &#x27;css&#x27;, &#x27;images&#x27;, &#x27;index.html&#x27;, &#x27;js&#x27; ]   包含文件</span><br></pre></td></tr></table></figure>

<p><code>注意：fs里面的方法是异步的</code></p>
<p><code>fs.stat是异步方法，把fs.stat放在for循环里面执行，不起作用</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 错误的写法  注意：fs里面的方法是异步的</span><br><span class="line">var path = &#x27;./wwwroot&#x27;;</span><br><span class="line">var dirArr = [];  // 所以目录的数组</span><br><span class="line"></span><br><span class="line">fs.readdir(path, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(var i = 0; i&lt; data.length; i++) &#123;</span><br><span class="line">        fs.stat(path + &#x27;/&#x27; + data[i], (err, stats) =&gt; &#123;</span><br><span class="line">            if(stats.isDirectory()) &#123;</span><br><span class="line">                dirArr.push(data[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(dirArr);</span><br><span class="line">&#125;) </span><br><span class="line">console.log(dirArr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>for循环执行得比较快，100毫秒内已经执行完了这个循环</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(var i = 0; i&lt;3; i++) &#123;</span><br><span class="line">	setTimeout(function()&#123;</span><br><span class="line">		console.log(i);</span><br><span class="line">	&#125;,100)</span><br><span class="line">&#125;</span><br><span class="line">// 控制台显示：</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol>
<li><h6 id="改造for循环-递归实现"><a href="#改造for循环-递归实现" class="headerlink" title="改造for循环  递归实现"></a>改造for循环  递归实现</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var path = &#x27;./wwwroot&#x27;;</span><br><span class="line">var dirArr = [];  // 所以目录的数组</span><br><span class="line"></span><br><span class="line">fs.readdir(path, (err, data) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (function getDir(i) &#123;</span><br><span class="line">        if(i === data.length) &#123;    // 执行完成</span><br><span class="line">            console.log(dirArr);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.stat(path + &#x27;/&#x27; + data[i], (err, stats) =&gt; &#123;</span><br><span class="line">            if(stats.isDirectory()) &#123;</span><br><span class="line">                dirArr.push(data[i])</span><br><span class="line">            &#125;</span><br><span class="line">            getDir(i+1);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(0)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结果：</span><br><span class="line">[ &#x27;css&#x27;, &#x27;images&#x27;, &#x27;js&#x27; ]</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="nodejs里面的新特性-async-await"><a href="#nodejs里面的新特性-async-await" class="headerlink" title="nodejs里面的新特性  async await"></a>nodejs里面的新特性  async await</h6></li>
</ol>
<h4 id="Nodejs新特性async-await的使用以及使用async-await处理异步"><a href="#Nodejs新特性async-await的使用以及使用async-await处理异步" class="headerlink" title="Nodejs新特性async await的使用以及使用async await处理异步"></a>Nodejs新特性async await的使用以及使用async await处理异步</h4><p>使用回调函数，获取异步的值</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getData(callback)&#123;</span><br><span class="line">	// ajax</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        var name = &#x27;张三&#x27;;</span><br><span class="line">        callback(name);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(function(name)&#123;</span><br><span class="line">    console.log(name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br><span class="line">// 控制台显示：</span><br><span class="line">张三</span><br></pre></td></tr></table></figure>

<h5 id="Async、Await和Promise的使用"><a href="#Async、Await和Promise的使用" class="headerlink" title="Async、Await和Promise的使用"></a>Async、Await和Promise的使用</h5><blockquote>
<p>async是“异步”的简写,而 await可以认为是 async wait 的简写。所以应该很好理解 async用于申明一个异步的 function ,而await用于等待一个异步方法执行完成。</p>
<p>简单理解：</p>
<p>async：让方法变成异步</p>
<p>await：等待异步方法执行完成</p>
</blockquote>
<p>使用promise获取异步的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        var name = &#x27;张三222&#x27;;</span><br><span class="line">        resolve(name);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* p.then(function(res)&#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;) */</span><br><span class="line"></span><br><span class="line">p.then((res) =&gt;&#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 封装函数：</span><br><span class="line">// 封装函数</span><br><span class="line">function getData(resolve, reject)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        var name = &#x27;张三222&#x27;;</span><br><span class="line">        resolve(name);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Promise(getData);</span><br><span class="line">p.then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async与await</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function test()&#123;</span><br><span class="line">    return &#x27;学习nodejs&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function main()&#123;</span><br><span class="line">    var data = await test();    // 获取异步方法里面的数据    要与async配合使用</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 返回promise</span><br><span class="line">async function test()&#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt;&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            var name = &#x27;张三333&#x27;;</span><br><span class="line">            resolve(name);</span><br><span class="line">        &#125;,1000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function main()&#123;</span><br><span class="line">    var data = await test();    // 获取异步方法里面的数据    要与async配合使用</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<p>案例2使用async和await的解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">// 1、定义一个isDir的方法判断一个资源到底是目录还是文件</span><br><span class="line">async function isDir(path)&#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        fs.stat(path, (err, stats) =&gt; &#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(stats.isDirectory())&#123;</span><br><span class="line">                resolve(true);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                resolve(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2、获取wwwroot里面的所有资源循环遍历</span><br><span class="line">function main()&#123;</span><br><span class="line">    var path = &#x27;./wwwroot&#x27;;</span><br><span class="line">    var dirArr = [];</span><br><span class="line">    fs.readdir(path, async (err, data) =&gt; &#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(var i = 0; i&lt; data.length; i++) &#123;</span><br><span class="line">            if(await isDir(path + &#x27;/&#x27; + data[i]))&#123;</span><br><span class="line">                dirArr.push(data[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(dirArr);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h4 id="Nodejs-fs中的流以及管道流"><a href="#Nodejs-fs中的流以及管道流" class="headerlink" title="Nodejs fs中的流以及管道流"></a>Nodejs fs中的流以及管道流</h4><h5 id="fs-createReadStream从文件流中读取数据"><a href="#fs-createReadStream从文件流中读取数据" class="headerlink" title="fs.createReadStream从文件流中读取数据"></a>fs.createReadStream从文件流中读取数据</h5><p>以流的方式读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">var readStream = fs.createReadStream(&#x27;./input.txt&#x27;);</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">var str = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">readStream.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class="line">    console.log(`$&#123;++count&#125; 接收到：$&#123;chunk.length&#125;`);</span><br><span class="line">    str+=chunk;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class="line">    console.log(str);</span><br><span class="line">    console.log(count);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(&#x27;error&#x27;, (err) =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="fs-createWriteStream写入文件"><a href="#fs-createWriteStream写入文件" class="headerlink" title="fs.createWriteStream写入文件"></a>fs.createWriteStream写入文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">var str = &#x27;&#x27;;</span><br><span class="line">for(var i = 0; i&lt; 500; i++) &#123;</span><br><span class="line">    str+= &#x27;我是从数据库获取的数据，要保存起来\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">// 创建一个可以写入的流，写入到文件output.txt中</span><br><span class="line">var writeSteam = fs.createWriteStream(&#x27;./output.txt&#x27;);</span><br><span class="line"></span><br><span class="line">// 使用utf8编码写入数据</span><br><span class="line">// writeSteam.write(str, &#x27;UTF8&#x27;)</span><br><span class="line"></span><br><span class="line">writeSteam.write(str);</span><br><span class="line"></span><br><span class="line">// 标记写入完成</span><br><span class="line">writeSteam.end();</span><br><span class="line">// 要执行writeSteam.end()，才可以调用finish；不执行writeSteam.end()，也会写入完成，只是finish事件监听不到</span><br><span class="line">// 异步</span><br><span class="line">// 处理流事件——&gt; finish事件</span><br><span class="line">writeSteam.on(&#x27;finish&#x27;, () =&gt; &#123;    // finish--所有数据已被写入到底层系统时触发</span><br><span class="line">    console.log(&#x27;写入完成&#x27;);    // 控制台后打印</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;程序执行完毕&#x27;);    // 控制台先打印</span><br></pre></td></tr></table></figure>

<h4 id="管道读写操作"><a href="#管道读写操作" class="headerlink" title="管道读写操作"></a>管道读写操作</h4><p>复制文件，从一个流到另一个流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">// 创建一个可读流</span><br><span class="line">var readStream = fs.createReadStream(&#x27;./aaa.jpg&#x27;);</span><br><span class="line">// 创建一个可写流</span><br><span class="line">var writeSteam = fs.createWriteStream(&#x27;./data/aaa.jpg&#x27;);</span><br><span class="line"></span><br><span class="line">// 管道读写操作</span><br><span class="line">// 读取aaa.jpg文件，并写入到data中</span><br><span class="line">readStream.pipe(writeSteam);     </span><br></pre></td></tr></table></figure>

<p>还可以重命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">// 创建一个可读流</span><br><span class="line">var readStream = fs.createReadStream(&#x27;./app.js&#x27;);</span><br><span class="line">// 创建一个可写流</span><br><span class="line">var writeSteam = fs.createWriteStream(&#x27;./data/test.js&#x27;);</span><br><span class="line"></span><br><span class="line">// 管道读写操作</span><br><span class="line">// 读取aaa.js的文件内容，并将内容写入到data/test.js文件中</span><br><span class="line">readStream.pipe(writeSteam);</span><br></pre></td></tr></table></figure>

<h4 id="利用HTTP模块Url模块Path模块Fs模块创建一个静态-WEB服务器"><a href="#利用HTTP模块Url模块Path模块Fs模块创建一个静态-WEB服务器" class="headerlink" title="利用HTTP模块Url模块Path模块Fs模块创建一个静态 WEB服务器"></a>利用HTTP模块Url模块Path模块Fs模块创建一个静态 WEB服务器</h4><p><code>tree /f</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">demo</span><br><span class="line">│  app.js</span><br><span class="line">│  package.json     </span><br><span class="line">│  </span><br><span class="line">└─static</span><br><span class="line">    │  404.html     </span><br><span class="line">    │  index.html   </span><br><span class="line">    │  login.html   </span><br><span class="line">    │  </span><br><span class="line">    ├─css</span><br><span class="line">    │      index.css</span><br><span class="line">    │</span><br><span class="line">    ├─images</span><br><span class="line">    │      blog-head.jpg</span><br><span class="line">    │      favicon.ico</span><br><span class="line">    │</span><br><span class="line">    ├─js</span><br><span class="line">    │      index.js</span><br><span class="line">    │</span><br><span class="line">    └─json</span><br><span class="line">            data.json</span><br></pre></td></tr></table></figure>

<p>http模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class="line">    res.end(&#x27;Hello World&#x27;);</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<p>根据访问路径，返回对应的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    var pathname = req.url;</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // 2. 通过fs模块读取文件</span><br><span class="line">    if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt;&#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                // console.log(err);</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<p>存在问题，css文件访问格式不对</p>
<p>自定义一个模块，根据不同的文件类型（文件后缀名），返回不同的<code>Content-Type</code></p>
<p><code>module/common.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.getMime = function(extname) &#123;</span><br><span class="line">    switch(extname) &#123;</span><br><span class="line">        case &#x27;.html&#x27;:</span><br><span class="line">            return &#x27;text/html&#x27;;</span><br><span class="line">        case &#x27;.css&#x27;:</span><br><span class="line">            return &#x27;text/css&#x27;;</span><br><span class="line">        case &#x27;.js&#x27;:</span><br><span class="line">            return &#x27;text/javascript&#x27;;</span><br><span class="line">        default:</span><br><span class="line">            return &#x27;text/html&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>css文件访问格式不对：</p>
<p><code>使用path.extname()获取后缀名</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const common = require(&#x27;./module/common.js&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    var pathname = req.url;</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // path.extname()获取后缀名</span><br><span class="line">    let extname = path.extname(pathname);</span><br><span class="line">	// 2. 通过fs模块读取文件</span><br><span class="line">    if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt;&#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                // console.log(err);</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            let mime = common.getMime(extname);</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<p>解决获取json文件时有get参数时，页面显示404</p>
<p><code>使用url模块的url.parse()去掉get传值后的参数</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line">const common = require(&#x27;./module/common.js&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    // var pathname = req.url;   </span><br><span class="line">    var pathname = url.parse(req.url).pathname;   // 去掉get传值后的参数</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // path.extname()获取后缀名</span><br><span class="line">    let extname = path.extname(pathname);</span><br><span class="line">    // 2. 通过fs模块读取文件</span><br><span class="line">    if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt;&#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                // console.log(err);</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404,这个页面不存在&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            let mime = common.getMime(extname);</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<p><code>module/common.js</code>：</p>
<p>使用mime.json动态获取content-type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">exports.getFileMime = function(extname) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        fs.readFile(&#x27;./static/data/mime.json&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">            // console.log(data);   // &lt;Buffer类型</span><br><span class="line">            // console.log(data.toString());</span><br><span class="line">            // console.log(JSON.parse(data.toString()));</span><br><span class="line"></span><br><span class="line">            var mimeObj = JSON.parse(data.toString());</span><br><span class="line">            console.log(mimeObj[extname])</span><br><span class="line">            resolve(mimeObj[extname]);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">    fs.readFile(&#x27;./static&#x27; + pathname, async (err, data) =&gt;&#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            // console.log(err);</span><br><span class="line">            res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(&#x27;404,这个页面不存在&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        // let mime = common.getMime(extname);</span><br><span class="line">        let mime =await common.getFileMime(extname);</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在网页中的network中，可以看到不同类型的文件请求的content-type不一样了</p>
</blockquote>
<p><code>module/common.js</code>：</p>
<p>使用同步的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.getFileMime = function(extname) &#123;</span><br><span class="line">    var data = fs.readFileSync(&#x27;./static/data/mime.json&#x27;);     // 同步方法</span><br><span class="line"></span><br><span class="line">    var mimeObj = JSON.parse(data.toString());</span><br><span class="line">    // console.log(mimeObj[extname]);</span><br><span class="line">    return mimeObj[extname];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">    fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt;&#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            // console.log(err);</span><br><span class="line">            res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(&#x27;404,这个页面不存在&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        let mime = common.getFileMime(extname);</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h4 id="NodeJs-封装静态WEB服务、路由、EJS模板引擎、GET、POST"><a href="#NodeJs-封装静态WEB服务、路由、EJS模板引擎、GET、POST" class="headerlink" title="NodeJs 封装静态WEB服务、路由、EJS模板引擎、GET、POST"></a>NodeJs 封装静态WEB服务、路由、EJS模板引擎、GET、POST</h4><p><code>module/routes.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">let getFileMime = function(extname) &#123;</span><br><span class="line">    var data = fs.readFileSync(&#x27;./static/data/mime.json&#x27;);     // 同步方法</span><br><span class="line"></span><br><span class="line">    var mimeObj = JSON.parse(data.toString());</span><br><span class="line">    // console.log(mimeObj[extname]);</span><br><span class="line">    return mimeObj[extname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装-创建静态web服务</span><br><span class="line">exports.static = function(req, res, staticPath) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    var pathname = url.parse(req.url).pathname;   // 去掉get传值后的参数</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // path.extname()获取后缀名</span><br><span class="line">    let extname = path.extname(pathname);</span><br><span class="line">    // 2. 通过fs模块读取文件</span><br><span class="line">    if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        fs.readFile(&#x27;./&#x27; + staticPath + pathname,(err, data) =&gt;&#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                // console.log(err);</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404,这个页面不存在&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            let mime = getFileMime(extname);</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const routes = require(&#x27;./module/routes.js&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 创建静态web服务</span><br><span class="line">    routes.static(req, res, &#x27;static&#x27;);</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><blockquote>
<p>路由（Routing〉是由一个URL(或者叫路径）和一个特定的 HTTP方法（GET、POST等）组成的，涉及到应用如何响应客户端对基个网站节点的访问。</p>
</blockquote>
<p><strong>通俗的说：</strong><br>    路由指的就是针对不同请求的URL，处理不同的业务逻辑。</p>
<h5 id="访问路径，加上路由的处理："><a href="#访问路径，加上路由的处理：" class="headerlink" title="访问路径，加上路由的处理："></a>访问路径，加上路由的处理：</h5><blockquote>
<p>【匹配不到对应文件（index.html、login.html等），继续往下匹配路由，再处理404的问题】</p>
</blockquote>
<p><code>因为fs.readFile是异步的，所以要改为同步的</code>，  不然<code>routes.static(req, res, &#39;static&#39;);</code>会匹配不到，就到匹配404页面了</p>
<p><code>module/routes.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">let getFileMime = function(extname) &#123;</span><br><span class="line">    var data = fs.readFileSync(&#x27;./static/data/mime.json&#x27;);     // 同步方法</span><br><span class="line"></span><br><span class="line">    var mimeObj = JSON.parse(data.toString());</span><br><span class="line">    // console.log(mimeObj[extname]);</span><br><span class="line">    return mimeObj[extname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装-创建静态web服务</span><br><span class="line">exports.static = function(req, res, staticPath) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    var pathname = url.parse(req.url).pathname;   // 去掉get传值后的参数</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // path.extname()获取后缀名</span><br><span class="line">    let extname = path.extname(pathname);</span><br><span class="line">    // 2. 通过fs模块读取文件</span><br><span class="line">    // 同步的方法</span><br><span class="line">    if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let data = fs.readFileSync(&#x27;./&#x27; + staticPath + pathname);</span><br><span class="line">            if(data) &#123;</span><br><span class="line">                let mime = getFileMime(extname);</span><br><span class="line">                res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const routes = require(&#x27;./module/routes.js&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 创建静态web服务</span><br><span class="line">    routes.static(req, res, &#x27;static&#x27;);     // static里面的fs.readFile要改为fs.readFileSync</span><br><span class="line">    // 路由</span><br><span class="line">    var pathname = url.parse(req.url).pathname; </span><br><span class="line"></span><br><span class="line">    if(pathname == &#x27;/login&#x27;) &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(&#x27;执行登录&#x27;);</span><br><span class="line">    &#125; else if(pathname == &#x27;/register&#x27;) &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(&#x27;执行注册&#x27;);</span><br><span class="line">    &#125; else if(pathname == &#x27;/admin&#x27;) &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(&#x27;处理后的业务逻辑&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt; &#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                // console.log(err);</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404, 页面不存在&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // 老师的代码是直接使用下面这段，但是这样，我页面访问index.html会获取不到图片，样式和js文件，访问这些文件的路径会进去else里</span><br><span class="line">    // else &#123;</span><br><span class="line">    //     res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">    //     res.end(&#x27;页面不存在&#x27;);</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="初识EJS模块引擎"><a href="#初识EJS模块引擎" class="headerlink" title="初识EJS模块引擎"></a>初识<a href="https://www.npmjs.com/package/ejs">EJS模块</a>引擎</h3><p>我们学的EJS是后台模板，可以把我们数据库和文件读取的数据显示到Html页面上面。它是一个第三方模块，需要通过npm安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line">....</span><br><span class="line">if(pathname == &#x27;/login&#x27;) &#123;</span><br><span class="line">    let msg = &#x27;从数据库中获取到的数据&#x27;;</span><br><span class="line">    ejs.renderFile(&#x27;./views/login.ejs&#x27;, &#123;msg:msg&#125;,(err, data) =&gt; &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><code>./views/login.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;ejs模块&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;&lt;%= msg %&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(pathname == &#x27;/news&#x27;) &#123;</span><br><span class="line">    let list = [</span><br><span class="line">        &#123;id:1001, title: &#x27;新闻1111&#x27;&#125;,</span><br><span class="line">        &#123;id:1002, title: &#x27;新闻2222&#x27;&#125;,</span><br><span class="line">        &#123;id:1003, title: &#x27;新闻3333&#x27;&#125;,</span><br><span class="line">        &#123;id:1004, title: &#x27;新闻4444&#x27;&#125;,</span><br><span class="line">        &#123;id:1005, title: &#x27;新闻5555&#x27;&#125;,</span><br><span class="line">    ]</span><br><span class="line">    ejs.renderFile(&#x27;./views/news.ejs&#x27;, &#123;newList:list&#125;, &#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>./views/news.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;%for(var i =0; i&lt; newList.length;i++)&#123;%&gt;</span><br><span class="line">        &lt;li&gt;&lt;%=newList[i].title%&gt;&lt;/li&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>js代码写在<code>  &lt;% %&gt;</code>里面</p>
</blockquote>
<h3 id="GET、POST"><a href="#GET、POST" class="headerlink" title="GET、POST"></a>GET、POST</h3><p>超文本传输协议（HTTP）的设计目的是保证客户端机器与服务器之间的通信。<br>在客户端和服务器之间进行请求-响应时，两种最常被用到的方法是: GET 和 POST。</p>
<p>GET -从指定的资源请求数据。(一般用于获取数据)<br>POST -向指定的资源提交要被处瑾的数据。(一般用于提交数据〉</p>
<p>获取请求类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.method</span><br></pre></td></tr></table></figure>

<p><strong>获取GET传值：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var urlinfo = url.parse(req.url, true);</span><br><span class="line">urlinfo.query</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// http://127.0.0.1:8081/news?page=2&amp;id=1</span><br><span class="line">var query = url.parse(req.url, true).query;</span><br><span class="line">console.log(query);</span><br><span class="line"></span><br><span class="line">// 控制台显示：</span><br><span class="line">[Object: null prototype] &#123; page: &#x27;2&#x27;, id: &#x27;1&#x27; &#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取POST传值：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const qs = require(&#x27;qs&#x27;);</span><br><span class="line"></span><br><span class="line">var postData = &#x27;&#x27;;</span><br><span class="line">// 数据块接收中</span><br><span class="line">req.on(&#x27;data&#x27;, function(postDataChunk)&#123;</span><br><span class="line">    postData += postDataChunk;</span><br><span class="line">&#125;);</span><br><span class="line">// 数据接收完毕，执行回调函数</span><br><span class="line">req.on(&#x27;end&#x27;, function () &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        JSON.parse(postData)</span><br><span class="line">    &#125; catch(e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    req.query = postData;</span><br><span class="line">    console.log(req.query);</span><br><span class="line">    console.log(qs.parse(postData))      // 将获取的参数转为对象</span><br><span class="line">    res.end(postData);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p><code>./views/register.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/doRegister&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    年龄：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(pathname == &#x27;/register&#x27;) &#123;</span><br><span class="line">	// 注册页面</span><br><span class="line">    ejs.renderFile(&#x27;./views/register.ejs&#x27;,&#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; else if(pathname == &#x27;/doRegister&#x27;) &#123;</span><br><span class="line">	// 注册操作之后</span><br><span class="line">    var postData = &#x27;&#x27;;</span><br><span class="line">    // 数据块接收中</span><br><span class="line">    req.on(&#x27;data&#x27;, function(postDataChunk)&#123;</span><br><span class="line">        postData += postDataChunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    // 数据接收完毕，执行回调函数</span><br><span class="line">    req.on(&#x27;end&#x27;,()=&gt; &#123;</span><br><span class="line">        res.end(postData);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Nodejs路由封装-封装一个类似express的路由"><a href="#Nodejs路由封装-封装一个类似express的路由" class="headerlink" title="Nodejs路由封装-封装一个类似express的路由"></a>Nodejs路由封装-封装一个类似express的路由</h4><blockquote>
<p>将处理路由的方法统一封装起来</p>
</blockquote>
<p><code>module/routes.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line">const qs = require(&#x27;qs&#x27;);</span><br><span class="line"></span><br><span class="line">let getFileMime = function(extname) &#123;</span><br><span class="line">    var data = fs.readFileSync(&#x27;./static/data/mime.json&#x27;);     // 同步方法</span><br><span class="line"></span><br><span class="line">    var mimeObj = JSON.parse(data.toString());</span><br><span class="line">    // console.log(mimeObj[extname]);</span><br><span class="line">    return mimeObj[extname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let app = &#123;</span><br><span class="line">    static: (req, res, staticPath) =&gt; &#123;</span><br><span class="line">        var pathname = url.parse(req.url).pathname;   // 去掉get传值后的参数</span><br><span class="line">        pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">        // path.extname()获取后缀名</span><br><span class="line">        let extname = path.extname(pathname);</span><br><span class="line"></span><br><span class="line">        // 同步的方法</span><br><span class="line">        if(pathname != &#x27;/favicon.ico&#x27;) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                let data = fs.readFileSync(&#x27;./&#x27; + staticPath + pathname);</span><br><span class="line">                if(data) &#123;</span><br><span class="line">                    let mime = getFileMime(extname);</span><br><span class="line">                    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                    res.end(data);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    login: (req, res) =&gt; &#123;</span><br><span class="line">        let msg = &#x27;从数据库中获取到的数据&#x27;;</span><br><span class="line">        ejs.renderFile(&#x27;./views/login.ejs&#x27;, &#123;msg:msg&#125;, &#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    news: (req, res) =&gt; &#123;</span><br><span class="line">        let list = [</span><br><span class="line">            &#123;id:1001, title: &#x27;新闻1111&#x27;&#125;,</span><br><span class="line">            &#123;id:1002, title: &#x27;新闻2222&#x27;&#125;,</span><br><span class="line">            &#123;id:1003, title: &#x27;新闻3333&#x27;&#125;,</span><br><span class="line">            &#123;id:1004, title: &#x27;新闻4444&#x27;&#125;,</span><br><span class="line">            &#123;id:1005, title: &#x27;新闻5555&#x27;&#125;,</span><br><span class="line">        ];</span><br><span class="line">        console.log(req.method)</span><br><span class="line">        // http://127.0.0.1:8081/news?page=2&amp;id=1</span><br><span class="line">        var query = url.parse(req.url, true).query;</span><br><span class="line">        console.log(query);</span><br><span class="line"></span><br><span class="line">        ejs.renderFile(&#x27;./views/news.ejs&#x27;, &#123;newList:list&#125;, &#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    register: (req, res) =&gt; &#123;</span><br><span class="line">        ejs.renderFile(&#x27;./views/register.ejs&#x27;,&#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    doRegister: (req, res) =&gt; &#123;</span><br><span class="line">        var postData = &#x27;&#x27;;</span><br><span class="line">        // 数据块接收中</span><br><span class="line">        req.on(&#x27;data&#x27;, function(postDataChunk)&#123;</span><br><span class="line">            postData += postDataChunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        // 数据接收完毕，执行回调函数</span><br><span class="line">        req.on(&#x27;end&#x27;,()=&gt; &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                JSON.parse(postData)</span><br><span class="line">            &#125; catch(e) &#123;&#125;</span><br><span class="line">            </span><br><span class="line">            req.query = postData;</span><br><span class="line">            console.log(req.query);</span><br><span class="line">            console.log(qs.parse(postData))</span><br><span class="line">            res.end(postData);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: (req, res) =&gt; &#123;</span><br><span class="line">        res.end(&#x27;error&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line">const app = require(&#x27;./module/routes.js&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">    // 创建静态web服务</span><br><span class="line">    app.static(req, res, &#x27;static&#x27;);     // static里面的fs.readFile要改为fs.readFileSync</span><br><span class="line">    // 路由</span><br><span class="line">    var pathname = url.parse(req.url).pathname.replace(&#x27;/&#x27;,&#x27;&#x27;);      // replace(&#x27;/&#x27;,&#x27;&#x27;)将pathname中的/去掉</span><br><span class="line">    // http://127.0.0.1:8081/login          pathname = login</span><br><span class="line">    // http://127.0.0.1:8081/news           pathname = news</span><br><span class="line">    // http://127.0.0.1:8081/doRegister     pathname = doRegister</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        app[pathname](req, res);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        fs.readFile(&#x27;./static&#x27; + pathname, (err, data) =&gt; &#123;</span><br><span class="line">            if(err) &#123;</span><br><span class="line">                res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                res.end(&#x27;404, 页面不存在&#x27;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                app[&#x27;error&#x27;](req, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(8081);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:8081/&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="封装app-get-配置路由"><a href="#封装app-get-配置路由" class="headerlink" title="封装app.get()配置路由"></a>封装app.get()配置路由</h4><p><code>module/route.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">let G = &#123;&#125;; </span><br><span class="line"></span><br><span class="line">let app = function(req, res) &#123;</span><br><span class="line">    let pathname = url.parse(req.url).pathname;</span><br><span class="line"></span><br><span class="line">    if(G[pathname]) &#123;</span><br><span class="line">        G[pathname](req, res);   // 执行方法</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(&#x27;页面不存在&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get = function(str, cb) &#123;</span><br><span class="line">    // 注册方法</span><br><span class="line">    G[str] = cb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const app = require(&#x27;./module/route&#x27;);</span><br><span class="line"></span><br><span class="line">// 注册web服务</span><br><span class="line">http.createServer(app).listen(8081);</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">    res.end(&#x27;首页&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">    res.end(&#x27;login&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/news&#x27;, function(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">    res.end(&#x27;news&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="封装post以及通过req-body获取post的数据"><a href="#封装post以及通过req-body获取post的数据" class="headerlink" title="封装post以及通过req.body获取post的数据"></a>封装post以及通过req.body获取post的数据</h4><p><code>module/route.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">function changeRes(res)&#123;</span><br><span class="line">    res.send = (data) =&gt;&#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sever = () =&gt; &#123;</span><br><span class="line">    let G = &#123;&#125;; </span><br><span class="line">    // 将get和post的方法分开   避免接口名一致，后面的请求的会替换前面的方法</span><br><span class="line">    G._get = &#123;&#125;;</span><br><span class="line">    G._post = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    let app = function(req, res) &#123;</span><br><span class="line">        // 扩展res的方法</span><br><span class="line">        changeRes(res);</span><br><span class="line"></span><br><span class="line">        let pathname = url.parse(req.url).pathname;</span><br><span class="line">        // 获取请求类型</span><br><span class="line">        let method = req.method.toLowerCase();</span><br><span class="line">        if(G[&#x27;_&#x27; + method][pathname]) &#123;</span><br><span class="line">            if(method == &#x27;get&#x27;) &#123;</span><br><span class="line">                G._get[pathname](req, res);   // 执行方法</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                // post 获取post的数据  把它绑定到req.body</span><br><span class="line">                var postData = &#x27;&#x27;;</span><br><span class="line">                req.on(&#x27;data&#x27;, function(chunk)&#123;</span><br><span class="line">                    postData += chunk;</span><br><span class="line">                &#125;);</span><br><span class="line">                // 数据接收完毕，执行回调函数</span><br><span class="line">                req.on(&#x27;end&#x27;,()=&gt; &#123;</span><br><span class="line">                    req.body = postData;</span><br><span class="line">                    G._post[pathname](req, res);   // 执行方法</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(&#x27;页面不存在&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    app.get = function(str, cb) &#123;</span><br><span class="line">        // 注册方法</span><br><span class="line">        G._get[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    app.post = function(str, cb) &#123;</span><br><span class="line">        // 注册方法</span><br><span class="line">        G._post[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = sever();     // 注意：要调用它</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const app = require(&#x27;./module/route&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">// 注册web服务</span><br><span class="line">http.createServer(app).listen(8081);</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;首页&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    ejs.renderFile(&#x27;./views/login.ejs&#x27;,&#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">        res.send(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/news&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;news&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// login.ejs中的action=&quot;/doLogin&quot;</span><br><span class="line">// 使用这种写法（推荐）</span><br><span class="line">app.post(&#x27;/doLogin&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// login.ejs中的action=&quot;/login&quot;</span><br><span class="line">// 虽然URL中的路径是/login跟get一样的，但渲染页面的的内容不一样。（不推荐）</span><br><span class="line">app.post(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="封装静态web服务"><a href="#封装静态web服务" class="headerlink" title="封装静态web服务"></a>封装静态web服务</h4><blockquote>
<p>访问静态文件，如css，js等文件</p>
</blockquote>
<p>在ejs文件中引入css文件，报错</p>
<p><code>http://127.0.0.1:8081/static/css/style.css net::ERR_ABORTED 404 (Not Found)</code></p>
<p><code>module/route.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">function changeRes(res)&#123;</span><br><span class="line">    res.send = (data) =&gt;&#123;</span><br><span class="line">        res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 根据后缀名获取文件类型</span><br><span class="line">function getFileMime(extname) &#123;</span><br><span class="line">    var data = fs.readFileSync(&#x27;./data/mime.json&#x27;);     // 同步方法</span><br><span class="line"></span><br><span class="line">    var mimeObj = JSON.parse(data.toString());</span><br><span class="line">    // console.log(mimeObj[extname]);</span><br><span class="line">    return mimeObj[extname];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 静态web服务的方法</span><br><span class="line">function initStatic(req, res, staticPath) &#123;</span><br><span class="line">    // 1.获取地址</span><br><span class="line">    var pathname = url.parse(req.url).pathname;   // 去掉get传值后的参数</span><br><span class="line">    pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span><br><span class="line">    // path.extname()获取后缀名</span><br><span class="line">    let extname = path.extname(pathname);</span><br><span class="line">    // 2. 通过fs模块读取文件</span><br><span class="line">    // 同步的方法</span><br><span class="line">    try &#123;</span><br><span class="line">        let data = fs.readFileSync(&#x27;./&#x27; + staticPath + pathname);</span><br><span class="line">        if(data) &#123;</span><br><span class="line">            let mime = getFileMime(extname);</span><br><span class="line">            res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;&#x27; + mime + &#x27;;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sever = () =&gt; &#123;</span><br><span class="line">    let G = &#123;</span><br><span class="line">        _get: &#123;&#125;,</span><br><span class="line">        _post: &#123;&#125;,</span><br><span class="line">        staticPath: &#x27;static&#x27;     // 设置默认静态web目录</span><br><span class="line">    &#125;; </span><br><span class="line">    // 将get和post的方法分开   避免接口名一致，后面的请求的会替换前面的方法</span><br><span class="line">    </span><br><span class="line">    let app = function(req, res) &#123;</span><br><span class="line">        // 扩展res的方法</span><br><span class="line">        changeRes(res);</span><br><span class="line">        // 配置静态web服务</span><br><span class="line">        initStatic(req, res, G.staticPath);</span><br><span class="line"></span><br><span class="line">        let pathname = url.parse(req.url).pathname;</span><br><span class="line">        // 获取请求类型</span><br><span class="line">        let method = req.method.toLowerCase();</span><br><span class="line">        if(G[&#x27;_&#x27; + method][pathname]) &#123;</span><br><span class="line">            if(method == &#x27;get&#x27;) &#123;</span><br><span class="line">                G._get[pathname](req, res);   // 执行方法</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                // post 获取post的数据  把它绑定到req.body</span><br><span class="line">                var postData = &#x27;&#x27;;</span><br><span class="line">                req.on(&#x27;data&#x27;, function(chunk)&#123;</span><br><span class="line">                    postData += chunk;</span><br><span class="line">                &#125;);</span><br><span class="line">                // 数据接收完毕，执行回调函数</span><br><span class="line">                req.on(&#x27;end&#x27;,()=&gt; &#123;</span><br><span class="line">                    req.body = postData;</span><br><span class="line">                    G._post[pathname](req, res);   // 执行方法</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fs.readFile(pathname, (err, data) =&gt; &#123;</span><br><span class="line">                if(err) &#123;</span><br><span class="line">                    res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">                    res.end(&#x27;404, 页面不存在&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            // 只写这个会报错</span><br><span class="line">            // res.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27;&#125;);</span><br><span class="line">            // res.end(&#x27;页面不存在&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // get 请求</span><br><span class="line">    app.get = function(str, cb) &#123;</span><br><span class="line">        // 注册方法</span><br><span class="line">        G._get[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    // post 请求</span><br><span class="line">    app.post = function(str, cb) &#123;</span><br><span class="line">        // 注册方法</span><br><span class="line">        G._post[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    // 配置静态Web服务目录</span><br><span class="line">    app.static = function(staticPath) &#123;</span><br><span class="line">        G.staticPath = staticPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = sever();     // 注意：要调用它</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const app = require(&#x27;./module/route&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">// 注册web服务</span><br><span class="line">http.createServer(app).listen(8081);</span><br><span class="line"></span><br><span class="line">// app.static(&#x27;public&#x27;);      // 修改默认静态web目录</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;首页&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    ejs.renderFile(&#x27;./views/login.ejs&#x27;,&#123;&#125;, (err, data) =&gt; &#123;</span><br><span class="line">        res.send(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/news&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;news&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// login.ejs中的action=&quot;/doLogin&quot;</span><br><span class="line">// 使用这种写法（推荐）</span><br><span class="line">app.post(&#x27;/doLogin&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// login.ejs中的action=&quot;/login&quot;</span><br><span class="line">// 虽然URL中的路径是/login跟get一样的，但渲染页面的的内容不一样。（不推荐）</span><br><span class="line">app.post(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>views/login.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/style.css&quot;&gt;    // 配置了静态web服务，才能访问</span><br></pre></td></tr></table></figure>

<h3 id="MongoDB数据库介绍、安装、使用"><a href="#MongoDB数据库介绍、安装、使用" class="headerlink" title="MongoDB数据库介绍、安装、使用"></a>MongoDB数据库介绍、安装、使用</h3><h5 id="MongoDB介绍"><a href="#MongoDB介绍" class="headerlink" title="MongoDB介绍"></a>MongoDB介绍</h5><blockquote>
<p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，<code>是非关系数据库当中功能最丰富,最像关系数据库的NoSql数据库</code>。他支持的数据结构非常松散，是类似json的 bson格式，因此可以存储比较复杂的数据类型。Mongodb最大的特点是他<code>支持的查询语言非常强大</code>，其语法有点类似于面向对象的查询语言，<code>几乎可以实现类似关系数据库单表查询的绝大部分功能</code>，而且还支持对数据建立索引。它的特点是<code>高性能、易部署、易使用，存储数据非常方便</code>。</p>
</blockquote>
<h5 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h5><p>注意：配置db目录和log目录</p>
<p>配置环境变量：将安装有MongoDB的bin目录，添加到系统的环境变量中</p>
<p>测试是否成功：在控制台输入<code>mongo</code>、</p>
<p>连接数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<p>查看数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h4 id="MongoDB数据库创建、删除、表-集合-、创建删除、数据的增、删、改、查"><a href="#MongoDB数据库创建、删除、表-集合-、创建删除、数据的增、删、改、查" class="headerlink" title="MongoDB数据库创建、删除、表(集合)、创建删除、数据的增、删、改、查"></a>MongoDB数据库创建、删除、表(集合)、创建删除、数据的增、删、改、查</h4><p>test(数据库)</p>
<ul>
<li>user</li>
<li>admin</li>
<li>article</li>
</ul>
<p>表（集合）：user、admin、article</p>
<h5 id="1、使用数据库、创建数据库"><a href="#1、使用数据库、创建数据库" class="headerlink" title="1、使用数据库、创建数据库"></a>1、使用数据库、创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user test</span><br></pre></td></tr></table></figure>

<p>如果真的想把这个数据库创建成功，<code>那么必须插入一个数据</code>。</p>
<p>数据库中不能直接插入数据，只能往集合(collections)中插入数据。下面命令表示给 test数据库的user表中插入数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="2、查看数据库"><a href="#2、查看数据库" class="headerlink" title="2、查看数据库"></a>2、查看数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h5 id="3、显示当前的数据集合（mysql中叫表）"><a href="#3、显示当前的数据集合（mysql中叫表）" class="headerlink" title="3、显示当前的数据集合（mysql中叫表）"></a>3、显示当前的数据集合（mysql中叫表）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>

<h5 id="4、删除集合，删除指定的集合-删除表"><a href="#4、删除集合，删除指定的集合-删除表" class="headerlink" title="4、删除集合，删除指定的集合   删除表"></a>4、删除集合，删除指定的集合   删除表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除集合  db.COLLECTION_NAME.DROP()</span><br><span class="line"></span><br><span class="line">db.user.drop();</span><br></pre></td></tr></table></figure>

<h5 id="5、删除数据库，删除当前所在的数据库"><a href="#5、删除数据库，删除当前所在的数据库" class="headerlink" title="5、删除数据库，删除当前所在的数据库"></a>5、删除数据库，删除当前所在的数据库</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure>

<h5 id="三、插入（增加）数据"><a href="#三、插入（增加）数据" class="headerlink" title="三、插入（增加）数据"></a>三、插入（增加）数据</h5><p>插入数据，随着数据的插入，数据库创建成功了，集合也创建成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.表名.insert(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="四、查找数据"><a href="#四、查找数据" class="headerlink" title="四、查找数据"></a>四、查找数据</h5><p>1、查找所有记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find();</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.user.find();</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409aade3631637f8390508f&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409ab7e3631637f83905090&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 30 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409ab883631637f83905091&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 40 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409ab903631637f83905092&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409ac5105d810a057af99e4&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 22 &#125;</span><br></pre></td></tr></table></figure>

<p>2、查询去掉后的当前聚集集合中的某列的重复数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.distinct(&quot;name&quot;);</span><br></pre></td></tr></table></figure>

<p>会过滤掉name中的相同数据</p>
<p>相当于：<code>select distinct name from user;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.user.distinct(&quot;name&quot;);</span><br><span class="line">[ &quot;zhangsan&quot; ]</span><br></pre></td></tr></table></figure>

<p>3、查询<code>age=22</code>的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:22&#125;)</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user where age = 22;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.user.find(&#123;&quot;age&quot;:22&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6409ac9005d810a057af99e6&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 22 &#125;</span><br></pre></td></tr></table></figure>

<p>4、查询<code>age&gt;22</code>的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:22&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user where age &gt;22;</code></p>
<p>5、查询age&lt;22的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$lt:22&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user where age &lt;22;</code></p>
<p>6、查询age&gt;=25</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gte:25&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user where age &gt;=25;</code></p>
<p>7、查询age&lt;=25的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$lte:25&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>8、查询age&gt;=23并且age &lt;=26的记录    （注意书写格式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gte:23,$lte:26&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>9、查询name中包含mongo的数据       （模糊查询用于搜索）z</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;name:/mongo/&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>//相当于%%</p>
<p><code>select * from user where name like &#39;%mongo%&#39;;</code></p>
</blockquote>
<p>10、查询name中以mongo开头的，  <code>^</code>符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;name:/^mongo/&#125;);</span><br></pre></td></tr></table></figure>

<p><code>select * from user where name like &#39;mongo%&#39;;</code></p>
<p>查询name中以mongo结束的， <code> $</code>符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;name:/mongo$/&#125;);</span><br></pre></td></tr></table></figure>

<p>11、查询指定列name、age数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&#125;,&#123;name:1, age:1&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;,&#123;age:1&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;,&#123;name:1&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;,&#123;name:1, age:1&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select name, age from user;</code></p>
<p>当然name也可以用<code>true</code>或<code>false</code>，当用<code>true</code>的情况下和 <code>name:1</code>效果一样，如果用<code>false</code>就是排除name，显示name以外的列信息。</p>
<p>12、查询指定列name、age数据，<code>age&gt;25</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:25&#125;&#125;,&#123;name:1, age:1&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select name, age from user where age &gt;25;</code></p>
<p>13、按照年龄排序   1 升序   -1  降序</p>
<p>升序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().sort(&#123;age:1&#125;);</span><br></pre></td></tr></table></figure>

<p>降序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().sort(&#123;age:-1&#125;);</span><br></pre></td></tr></table></figure>

<p>14、查询<code>name = zhangsan, age = 22</code>的数据</p>
<p>查询数据库的条件，可以写多个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;name:&#x27;zhangsan&#x27;, age:22&#125;);</span><br></pre></td></tr></table></figure>

<p>15、查询前5条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().limit(5);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select top 5 * from user;</code></p>
<p>新增100条数据：(类似js代码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; for(var i = 1; i&lt;100; i++) &#123;</span><br><span class="line">...</span><br><span class="line">... db.admin.insert(&#123;&quot;name&quot;:&quot;zhang&quot; + i, &quot;age&quot;: i&#125;)</span><br><span class="line">... &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.admin.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f888c&quot;), &quot;name&quot; : &quot;zhang1&quot;, &quot;age&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f888d&quot;), &quot;name&quot; : &quot;zhang2&quot;, &quot;age&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f888e&quot;), &quot;name&quot; : &quot;zhang3&quot;, &quot;age&quot; : 3 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f888f&quot;), &quot;name&quot; : &quot;zhang4&quot;, &quot;age&quot; : 4 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8890&quot;), &quot;name&quot; : &quot;zhang5&quot;, &quot;age&quot; : 5 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8891&quot;), &quot;name&quot; : &quot;zhang6&quot;, &quot;age&quot; : 6 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8892&quot;), &quot;name&quot; : &quot;zhang7&quot;, &quot;age&quot; : 7 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8893&quot;), &quot;name&quot; : &quot;zhang8&quot;, &quot;age&quot; : 8 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8894&quot;), &quot;name&quot; : &quot;zhang9&quot;, &quot;age&quot; : 9 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8895&quot;), &quot;name&quot; : &quot;zhang10&quot;, &quot;age&quot; : 10 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8896&quot;), &quot;name&quot; : &quot;zhang11&quot;, &quot;age&quot; : 11 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8897&quot;), &quot;name&quot; : &quot;zhang12&quot;, &quot;age&quot; : 12 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8898&quot;), &quot;name&quot; : &quot;zhang13&quot;, &quot;age&quot; : 13 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8899&quot;), &quot;name&quot; : &quot;zhang14&quot;, &quot;age&quot; : 14 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889a&quot;), &quot;name&quot; : &quot;zhang15&quot;, &quot;age&quot; : 15 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889b&quot;), &quot;name&quot; : &quot;zhang16&quot;, &quot;age&quot; : 16 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889c&quot;), &quot;name&quot; : &quot;zhang17&quot;, &quot;age&quot; : 17 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889d&quot;), &quot;name&quot; : &quot;zhang18&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889e&quot;), &quot;name&quot; : &quot;zhang19&quot;, &quot;age&quot; : 19 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f889f&quot;), &quot;name&quot; : &quot;zhang20&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">Type &quot;it&quot; for more</span><br></pre></td></tr></table></figure>

<p>16、查询10条以后的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.admin.find().skip(10);</span><br></pre></td></tr></table></figure>

<p>17、查询在5~10之间的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.admin.find().limit(4).skip(5);</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8891&quot;), &quot;name&quot; : &quot;zhang6&quot;, &quot;age&quot; : 6 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8892&quot;), &quot;name&quot; : &quot;zhang7&quot;, &quot;age&quot; : 7 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8893&quot;), &quot;name&quot; : &quot;zhang8&quot;, &quot;age&quot; : 8 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aa65d3ac7e1046e8f8894&quot;), &quot;name&quot; : &quot;zhang9&quot;, &quot;age&quot; : 9 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.admin.find().limit(10).skip(5);</span><br></pre></td></tr></table></figure>

<p>可用于分页，limit是pageSize，skip是第几页减1*pageSize</p>
<p>pageSize：每页显示的条数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.admin.find().limit(10).skip(0);    		// 第一页   (n-1)*10</span><br><span class="line">db.admin.find().limit(10).skip(10);		 	// 第二页</span><br><span class="line">db.admin.find().limit(10).skip(20); 		// 第三页</span><br></pre></td></tr></table></figure>

<p>18、or与查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;$or:[&#123;age:22&#125;,&#123;age:25&#125;]&#125;);</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select * from user where age = 22 or age =25;</code></p>
<p>19、findOne查询第一条数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.findOne();</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select top 1* from user;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().limit(1);</span><br></pre></td></tr></table></figure>

<p>20、查询某个结果集的记录条数    统计数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().count();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gte:25&#125;&#125;).count();</span><br></pre></td></tr></table></figure>

<p>相当于：<code>select count(*) from user where age &gt;=20;</code></p>
<p>如果要返回限制之后的记录数量，要使用<code>count(true)</code>或者<code>count(非0)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().skip(10).limit(5).count(true);</span><br></pre></td></tr></table></figure>

<h4 id="四、修改数据"><a href="#四、修改数据" class="headerlink" title="四、修改数据"></a>四、修改数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.insert(&#123;&quot;name&quot;:&quot;liming&quot;, &quot;age&quot;:20, sex:&quot;男&quot;, &quot;score&quot;:&#123;&quot;shuxue&quot;:70, &quot;yuwen&quot;:80, &quot;yingyu&quot;:86&#125;&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.student.find()                                                                      </span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640acb7319e76fb47ee3df38&quot;), &quot;name&quot; : &quot;小明&quot;, &quot;age&quot; : 33, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125;, &quot;sex&quot; : &quot;男&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640acebb19e76fb47ee3df39&quot;), &quot;name&quot; : &quot;xiaoming&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;男&quot;, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640acedf19e76fb47ee3df3a&quot;), &quot;name&quot; : &quot;Lisi&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;女&quot;, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aceea19e76fb47ee3df3b&quot;), &quot;name&quot; : &quot;lisa&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;女&quot;, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640aceff19e76fb47ee3df3c&quot;), &quot;name&quot; : &quot;liming&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;男&quot;, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：要加上$set，如果不加上，会直接替换整条数据</code></p>
<p>修改里面还有查询条件。你要改谁，要告诉mongo。</p>
<p>查找名字叫做小明的，把年龄更改为16岁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;, &#123;$set:&#123;age:16&#125;&#125;)</span><br><span class="line"></span><br><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;, &#123;$set:&#123;&quot;sex&quot;:&quot;男&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>查找数学成绩是70，把年龄更改为33岁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;score.shuxue&quot;:70&#125;, &#123;$set:&#123;age:33&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>更改所有匹配项目：<code>&#123;multi: true&#125;</code><br>By default, the update() method updates a single document. To update multiple documents, use the multi option in the update() method.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:33&#125;&#125;, &#123;multi: true&#125;);</span><br></pre></td></tr></table></figure>

<p>完整替换，<code>不出现$set关键字了</code>： <code>注意</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;, &#123;&quot;name&quot;:&quot;大明&quot;,&quot;age&quot;:16&#125;); </span><br><span class="line"></span><br><span class="line">// 原数据：</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640acb7319e76fb47ee3df38&quot;), &quot;name&quot; : &quot;小明&quot;, &quot;age&quot; : 33, &quot;score&quot; : &#123; &quot;shuxue&quot; : 70, &quot;yuwen&quot; : 80, &quot;yingyu&quot; : 86 &#125;, &quot;sex&quot; : &quot;男&quot; &#125;</span><br><span class="line">//  直接替换为：</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;640acb7319e76fb47ee3df38&quot;), &quot;name&quot; : &quot;大明&quot;, &quot;age&quot; : 16 &#125;</span><br></pre></td></tr></table></figure>

<p><code>db.users.update(&#123;name: &quot;Lisi&quot;&#125;,&#123;$inc: &#123;age: 50]&#125;, false, true);</code></p>
<p>相当于：<code> update users set age = age + 50 where name = &#39;Lisi&#39;;</code></p>
<p><code>db.users.update(&#123;name: &#39;Lisi&#39;&#125;, &#123;$inc: &#123;age: 50&#125;, $set: &#123;name: &#39;hoho&#39;&#125;&#125;, false, true);</code></p>
<p>相当于：<code>update users set age = age + 50, name = &#39;hoho&#39; where name = &#39;Lisi&#39;;</code></p>
<h4 id="五、删除数据"><a href="#五、删除数据" class="headerlink" title="五、删除数据"></a>五、删除数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collectionsNames.remove(&#123;&quot;borough&quot;:&quot;Manhattan&quot;&#125;);</span><br><span class="line">db.users.remove(&#123;age: 132&#125;);</span><br></pre></td></tr></table></figure>

<p>By default, the remove() method removes all documents that match the remove condition. Use the justOne option to limit the remove operation to only one of fhe matching documents.</p>
<p><code>&#123;justOne: true&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.restaurants.remove(&#123;&quot;borough&quot;: &quot;Queens&quot;&#125;, &#123;justOne: true&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.student.remove(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;justOne:true&#125;)</span><br></pre></td></tr></table></figure>

<p>删除数据，如果不加条件，是全部都删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.admin.remove(&#123;&#125;);      // 全部删除</span><br></pre></td></tr></table></figure>

<h4 id="MongoDb大数据查询优化、MongoDB索引、复合索引、唯一索引、explain分析查询速度"><a href="#MongoDb大数据查询优化、MongoDB索引、复合索引、唯一索引、explain分析查询速度" class="headerlink" title="MongoDb大数据查询优化、MongoDB索引、复合索引、唯一索引、explain分析查询速度"></a>MongoDb大数据查询优化、MongoDB索引、复合索引、唯一索引、explain分析查询速度</h4><h5 id="一、索引基础"><a href="#一、索引基础" class="headerlink" title="一、索引基础"></a>一、索引基础</h5><p>​        索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得更快。MongoDB的索引几乎与传统的关系型数据库一模一样，这其中也包括一些基本的查询优化技巧。</p>
<p>创建索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;username&quot;:1&#125;);</span><br></pre></td></tr></table></figure>

<p>获取当前集合的索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.getIndexes();</span><br></pre></td></tr></table></figure>

<p>删除索引的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.dropIndex(&#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure>

<p>在MongoDB中，我们同样可以创建<code>复合索引</code>，如：</p>
<p><code>数字1</code>表示username键的索引按升序存储，<code>-1</code>表示age键的索引按照降序方式存储</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;username&quot;:1,&quot;age&quot;: -1&#125;);</span><br><span class="line"></span><br><span class="line">db.user.dropIndex(&#123;&quot;username&quot;:1,&quot;age&quot;: -1&#125;);    // 这样删除</span><br></pre></td></tr></table></figure>

<p>​    该索引被创建后，基于username和age 的查询将会用到该索引，或者是基于username的查询也会用到该索引，<strong>但是只是基于age的查询将不会用到该复合索引。因此可以说，如果想用到复合索引，必须在查询条件中包含复合索引中的前N个索引列</strong>。然而如果查询条件中的键值顺序和复合索引中的创建顺序不一致的话，MongoDB可以智能的帮助我们调整该顺序，以便使复合索引可以为查询所用。如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:30, &quot;username&quot;: &quot;stephen&quot;&#125;)</span><br><span class="line"></span><br><span class="line">db.user.find(&#123;&quot;age&quot;:10, &quot;name&quot;: &quot;zhang10&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>​        对于上面示例中的查询条件，MongoDB在检索之前将会动态的调整查询条件文档的顺序，以使该查询可以用到刚刚创建的复合索引。<br>​        对于上面创建的索引，MongoDB都会根据索引的 keyname和索引方向为新创建的索引自动分配一个索引名，<strong>下面的命令可以在创建索引时为其指定索引名</strong>，如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;usename&quot;: 1&#125;, &#123;&quot;name&quot;: &quot;useindex&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p><code>随着集合的增长，需要针对查询中大量的排序做索引。如果没有对索引的键调用sort,MongoDB需要将所有数据提取到内存并排序。因此在做无索引排序时，如果数据量过大以致无法在内存中进行排序，此时MongoDB将会报错。</code></p>
<h5 id="二、唯一索引"><a href="#二、唯一索引" class="headerlink" title="二、唯一索引"></a>二、唯一索引</h5><p>在缺省情况下创建的索引均不是唯一索引。下面的示例将创建唯一索引，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;userid&quot;:1&#125;, &#123;&quot;unique&quot;: true&#125;);</span><br></pre></td></tr></table></figure>

<p>如果再次插入userid重复的文档时，MongoDB将报错，以提示插入重复键，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.insert(&#123;&quot;userid&quot;: 5&#125;);</span><br><span class="line">db.user.insert(&#123;&quot;userid&quot;: 5&#125;);</span><br></pre></td></tr></table></figure>

<p><code>E11000 duplicate key error index: user.user.$userid_1 dup key: &#123;: 5.0&#125;</code></p>
<p>如果插入的文档中不包含userid键，那么该文档中该键的值为null，如果多次插入类似的文档，MongoDB将会报出同样的错误，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.insert(&#123;&quot;age&quot;: 5&#125;);</span><br><span class="line">db.user.insert(&#123;&quot;age&quot;: 5&#125;);</span><br></pre></td></tr></table></figure>

<p><code>E11000 duplicate key error index: user.user.$userid_1 dup key: &#123;:null &#125;</code></p>
<p>如果在创建唯一索引时已经存在了重复项,我们可以通过下面的命令帮助我们在创建唯一索引时消除重复文档，仅保留发现的第一个文档，如:<br>先删除刚刚创建的唯一索引。</p>
<h5 id="五、explain-executionStats查询具体的执行时间"><a href="#五、explain-executionStats查询具体的执行时间" class="headerlink" title="五、explain executionStats查询具体的执行时间"></a>五、explain executionStats查询具体的执行时间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.tablename.find().explain(&quot;executionStats&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find().explain(&quot;executionStats&quot;)</span><br></pre></td></tr></table></figure>

<p>关注输出的如下数值：<code>explain.executionStats.executionTimeMillis</code></p>
<p>例子：</p>
<p>查询6万多条数据，不加索引，查询时间500多毫秒；加上索引，10毫秒左右，再执行一次，0毫秒</p>
<h4 id="连接远程的数据库"><a href="#连接远程的数据库" class="headerlink" title="连接远程的数据库"></a>连接远程的数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo 192.168.0.8:27017</span><br></pre></td></tr></table></figure>

<h4 id="Mongodb4-x的使用以及-Mongodb账户权限配置"><a href="#Mongodb4-x的使用以及-Mongodb账户权限配置" class="headerlink" title="Mongodb4.x的使用以及 Mongodb账户权限配置"></a>Mongodb4.x的使用以及 Mongodb账户权限配置</h4><p>查看mongo版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo -version</span><br></pre></td></tr></table></figure>

<h4 id="Mongodb账户权限配置"><a href="#Mongodb账户权限配置" class="headerlink" title="Mongodb账户权限配置"></a>Mongodb账户权限配置</h4><p>1、第一步创建超级管理用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">	user: &#x27;admin&#x27;,</span><br><span class="line">	pwd: &#x27;123456&#x27;,</span><br><span class="line">	roles:[&#123;role:&#x27;root&#x27;, db:&#x27;admin&#x27;&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2、第二步修改Mongodb数据库配置文件</p>
<blockquote>
<p>查看mongodb安装路径的方法：1、win环境下，使用【win+r】快捷键打开运行窗口，输入“services.msc”指令打开服务列表，右键MongoDB服务选择“属性”查看mongodb安装路径；2、linux环境下，打开linux终端，输入“find / -name mongodb”、“locate mongodb”、“whereis mongodb”、“which mongodb”其中一个命令查看mongodb安装路径即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径： G:\Install\WEB\mongodb\bin\mongod.cfg</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>

<p><code>注：修改配置文件前，最好先备份</code></p>
<p>3、第三步重启mongodb服务</p>
<ol>
<li><code>win+R</code> ——&gt;<code> services.msc</code></li>
<li>找到MongoDB Server， 右键重启</li>
</ol>
<p>在终端输入<code>mongo</code>连接之后，输入<code>show dbs</code>，不显示内容</p>
<p>4、第四步用超级管理员账户连接数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo admin -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line">mongo 192.168.1.200:27017/test -u user -p password     // test:数据库名</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo admin -u admin -p 123456      // 连接之后，再输入show dbs，会显示所有数据库</span><br></pre></td></tr></table></figure>

<p>5、第五步给test数据库创建一个用户，  只能访问test不能访问其他数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test</span><br><span class="line"></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">	user: &#x27;testadmin&#x27;,</span><br><span class="line">	pwd: &#x27;123456&#x27;,</span><br><span class="line">	roles:[&#123;role:&#x27;dbOwner&#x27;, db:&#x27;test&#x27;&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test</span><br><span class="line"></span><br><span class="line">show users</span><br><span class="line"></span><br><span class="line">db.dropUser(&#x27;testadmin&#x27;)     // 删除用户</span><br></pre></td></tr></table></figure>

<p>使用testadmin账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo test -u testadmin -p 123456</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">test  0.000GB        // 只能看到test数据库</span><br></pre></td></tr></table></figure>

<h4 id="Mongodb账户权限配置中常用的命令"><a href="#Mongodb账户权限配置中常用的命令" class="headerlink" title="Mongodb账户权限配置中常用的命令"></a>Mongodb账户权限配置中常用的命令</h4><ol>
<li><p>查看当前库下的用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show users</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.dropUser(&#x27;testadmin&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.updateUser(&#x27;admin&#x27;, &#123;pwd: &#x27;password&#x27;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>密码认证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.auth(&#x27;admin&#x27;, &#x27;password&#x27;)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo test         // test：数据库名称</span><br><span class="line">&gt; show dbs</span><br><span class="line">// 终端不显示内容</span><br><span class="line"></span><br><span class="line">&gt; db.auth(&quot;testadmin&quot;, &quot;123456&quot;)       // test数据库的用户</span><br><span class="line">1</span><br><span class="line">&gt; show dbs</span><br><span class="line">test  0.000GB</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Mongodb数据库角色"><a href="#Mongodb数据库角色" class="headerlink" title="Mongodb数据库角色"></a>Mongodb数据库角色</h4><ol>
<li>数据库用户角色：read、readWrite;</li>
<li>数据库管理角色：dbAdmin、<code>dbOwner</code>、userAdmin;</li>
<li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager;</li>
<li>备份恢复角色：backup、 restore;</li>
<li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li>
<li>超级用户角色：<code>root</code></li>
</ol>
<p>参考：<a href="https://www.cnblogs.com/zzw1787044/p/5773178.html">MongoDB 内置角色</a></p>
<h4 id="连接数据库的时候需要配置账户密码"><a href="#连接数据库的时候需要配置账户密码" class="headerlink" title="连接数据库的时候需要配置账户密码"></a>连接数据库的时候需要配置账户密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = &#x27;mongodb://admin:123456@localhost:27017/&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="查看mongodb的数据库存放位置-日志存放位置："><a href="#查看mongodb的数据库存放位置-日志存放位置：" class="headerlink" title="查看mongodb的数据库存放位置/日志存放位置："></a>查看mongodb的数据库存放位置/日志存放位置：</h5><p>bin目录中的配置文件：<code>G:\Install\WEB\mongodb\bin\mongod.cfg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Where and how to store data.</span><br><span class="line">storage:</span><br><span class="line">  dbPath: G:\Install\WEB\mongodb\data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">#  engine:</span><br><span class="line">#  mmapv1:</span><br><span class="line">#  wiredTiger:</span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path:  G:\Install\WEB\mongodb\log\mongod.log</span><br></pre></td></tr></table></figure>

<h5 id="查看-修改mongodb的端口："><a href="#查看-修改mongodb的端口：" class="headerlink" title="查看/修改mongodb的端口："></a>查看/修改mongodb的端口：</h5><p>bin目录中的配置文件：<code>G:\Install\WEB\mongodb\bin\mongod.cfg</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure>

<h4 id="关系型数据库表（集合）与表（集合）之间的几种关系"><a href="#关系型数据库表（集合）与表（集合）之间的几种关系" class="headerlink" title="关系型数据库表（集合）与表（集合）之间的几种关系"></a>关系型数据库表（集合）与表（集合）之间的几种关系</h4><p>一对一：一个身份证对应一个驾驶证</p>
<p>一对多：一个商品分类对应多个商品，一个班级对应多名学生</p>
<p>多对多：例如:一个学生可以选多门课程，而同一门课程可以被多个学生选修，彼此的对应关系即是多对多关系</p>
<p>一个用户可以关注多个商品，一个商品可以被多个用户关注</p>
<h4 id="MongoDB-的高级查询aggregate聚合管道"><a href="#MongoDB-的高级查询aggregate聚合管道" class="headerlink" title="MongoDB 的高级查询aggregate聚合管道"></a>MongoDB 的高级查询aggregate聚合管道</h4><h5 id="一、MongoDB聚合管道（Aggregate-Pipeline）"><a href="#一、MongoDB聚合管道（Aggregate-Pipeline）" class="headerlink" title="一、MongoDB聚合管道（Aggregate Pipeline）"></a>一、MongoDB聚合管道（Aggregate Pipeline）</h5><p>使用聚合管道可以对集合中的文档进行变换和组合。</p>
<p>实际项目中：表关联查询、数据的统计。</p>
<p><strong>MongoDB</strong>中使用<code>db.COLLECTION_NAME.aggregate([&#123;&lt;stage&gt;&#125;,...])</code>方法来构建和使用聚合管道。先看下官网给的实例，感受一下聚合管道的用法。</p>
<h5 id="二、MongoDB-Aggregation-管道操作符与表达式"><a href="#二、MongoDB-Aggregation-管道操作符与表达式" class="headerlink" title="二、MongoDB Aggregation 管道操作符与表达式"></a>二、MongoDB Aggregation 管道操作符与表达式</h5><table>
<thead>
<tr>
<th>管道操作符</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>$project</code></td>
<td><code>增加、删除、重命名字段</code></td>
</tr>
<tr>
<td><code>$match</code></td>
<td>条件匹配、只满足条件的文档才能进入下一阶段</td>
</tr>
<tr>
<td>$limit</td>
<td>限制结果的数量</td>
</tr>
<tr>
<td>$skip</td>
<td>跳过文档的数量</td>
</tr>
<tr>
<td>$sort</td>
<td>条件排序</td>
</tr>
<tr>
<td>$group</td>
<td>条件组合结果      统计</td>
</tr>
<tr>
<td>$lookup</td>
<td>$lookup 操作符 用以引入其它集合的数据   （表关联查询）</td>
</tr>
</tbody></table>
<h5 id="SQL和NOSQL对比"><a href="#SQL和NOSQL对比" class="headerlink" title="SQL和NOSQL对比"></a>SQL和NOSQL对比</h5><table>
<thead>
<tr>
<th><code>WHERE</code></th>
<th><code>$match</code></th>
</tr>
</thead>
<tbody><tr>
<td>GROUP BY</td>
<td>$group</td>
</tr>
<tr>
<td><code>HAVING</code></td>
<td><code>$match</code></td>
</tr>
<tr>
<td><code>SELECT</code></td>
<td><code>$project</code></td>
</tr>
<tr>
<td>ORDER BY</td>
<td>$sort</td>
</tr>
<tr>
<td>LIMIT</td>
<td>$limit</td>
</tr>
<tr>
<td>SUM()</td>
<td>$sum</td>
</tr>
<tr>
<td>COUNT()</td>
<td>$sum</td>
</tr>
<tr>
<td><code>join</code></td>
<td><code>$lookup</code></td>
</tr>
</tbody></table>
<h5 id="三、数据模拟"><a href="#三、数据模拟" class="headerlink" title="三、数据模拟"></a>三、数据模拟</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.insert(&#123;&quot;order_id&quot;: &quot;1&quot;, &quot;uid&quot;: 10, &quot;trade_no&quot;:&quot;111&quot;, &quot;all_price&quot;:100, &quot;all_num&quot;: 2&#125;)</span><br><span class="line">db.order.insert(&#123;&quot;order_id&quot;: &quot;2&quot;, &quot;uid&quot;: 7, &quot;trade_no&quot;:&quot;222&quot;, &quot;all_price&quot;:90, &quot;all_num&quot;: 2&#125;)</span><br><span class="line">db.order.insert(&#123;&quot;order_id&quot;: &quot;3&quot;, &quot;uid&quot;: 9, &quot;trade_no&quot;:&quot;333&quot;, &quot;all_price&quot;:20, &quot;all_num&quot;: 6&#125;)</span><br><span class="line"></span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;商品鼠标1&quot;, &quot;price&quot;:50, &quot;num&quot;:1&#125;)</span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;商品键盘2&quot;, &quot;price&quot;:50, &quot;num&quot;:1&#125;)</span><br><span class="line"></span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;2&quot;, &quot;title&quot;: &quot;牛奶&quot;, &quot;price&quot;:50, &quot;num&quot;:1&#125;)</span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;2&quot;, &quot;title&quot;: &quot;酸奶&quot;, &quot;price&quot;:40, &quot;num&quot;:1&#125;)</span><br><span class="line"></span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;3&quot;, &quot;title&quot;: &quot;矿泉水&quot;, &quot;price&quot;:2, &quot;num&quot;:5&#125;)</span><br><span class="line">db.order_item.insert(&#123;&quot;order_id&quot;: &quot;3&quot;, &quot;title&quot;: &quot;毛巾&quot;, &quot;price&quot;:10, &quot;num&quot;:1&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="四、-project"><a href="#四、-project" class="headerlink" title="四、$project"></a>四、<code>$project</code></h5><p>修改文档的结构，可以用来重命名、增加或删除文档中的字段。</p>
<p>要求查找order 只返回文档中trade_no和all_price字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64116235c9443120dbcb913e&quot;), &quot;trade_no&quot; : &quot;111&quot;, &quot;all_price&quot; : 100 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6411623fc9443120dbcb913f&quot;), &quot;trade_no&quot; : &quot;333&quot;, &quot;all_price&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;641162b7c9443120dbcb9146&quot;), &quot;trade_no&quot; : &quot;222&quot;, &quot;all_price&quot; : 90 &#125;</span><br></pre></td></tr></table></figure>

<h5 id="五、-match"><a href="#五、-match" class="headerlink" title="五、$match"></a>五、<code>$match</code></h5><p><strong>作用</strong></p>
<p>用于过滤文档。用法类似于 <code>find()</code>方法中的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$match:&#123;&quot;all_price&quot;: &#123;$gte:90&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64116235c9443120dbcb913e&quot;), &quot;trade_no&quot; : &quot;111&quot;, &quot;all_price&quot; : 100 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;641162b7c9443120dbcb9146&quot;), &quot;trade_no&quot; : &quot;222&quot;, &quot;all_price&quot; : 90 &#125;</span><br></pre></td></tr></table></figure>

<h5 id="六、-group"><a href="#六、-group" class="headerlink" title="六、$group"></a>六、<code>$group</code></h5><p>将集合中的文档进行分组，可用于统计结果。<br>统计每个订单的订单数量，按照订单号分组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order_item.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$group:&#123;_id: &quot;$order_id&quot;, total:&#123;$sum :1&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;2&quot;, &quot;total&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;1&quot;, &quot;total&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;3&quot;, &quot;total&quot; : 2 &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order_item.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$group:&#123;_id: &quot;$order_id&quot;, total:&#123;$sum: &quot;$num&quot;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;2&quot;, &quot;total&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;1&quot;, &quot;total&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;3&quot;, &quot;total&quot; : 6 &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order_item.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$group:&#123;_id: &quot;$order_id&quot;, total:&#123;$sum: &quot;$price&quot;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;3&quot;, &quot;total&quot; : 12 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;1&quot;, &quot;total&quot; : 100 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;2&quot;, &quot;total&quot; : 90 &#125;</span><br></pre></td></tr></table></figure>

<h5 id="七、-sort"><a href="#七、-sort" class="headerlink" title="七、$sort"></a>七、<code>$sort</code></h5><p>将集合中的文档进行排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$match:&#123;&quot;all_price&quot;: &#123;$gte:90&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     	$sort: &#123;&quot;all_price&quot;: -1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64116235c9443120dbcb913e&quot;), &quot;trade_no&quot; : &quot;111&quot;, &quot;all_price&quot; : 100 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;641162b7c9443120dbcb9146&quot;), &quot;trade_no&quot; : &quot;222&quot;, &quot;all_price&quot; : 90 &#125;</span><br></pre></td></tr></table></figure>

<p>八、<code>$limit</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$match:&#123;&quot;all_price&quot;: &#123;$gte:90&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     	$sort: &#123;&quot;all_price&quot;: -1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     	$limit: 1</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64116235c9443120dbcb913e&quot;), &quot;trade_no&quot; : &quot;111&quot;, &quot;all_price&quot; : 100 &#125;</span><br></pre></td></tr></table></figure>

<h5 id="九、-skip"><a href="#九、-skip" class="headerlink" title="九、$skip"></a>九、<code>$skip</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$match:&#123;&quot;all_price&quot;: &#123;$gte:90&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     	$sort: &#123;&quot;all_price&quot;: -1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     	$skip: 1</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;641162b7c9443120dbcb9146&quot;), &quot;trade_no&quot; : &quot;222&quot;, &quot;all_price&quot; : 90 &#125;</span><br></pre></td></tr></table></figure>

<h5 id="十、-lookup表关联"><a href="#十、-lookup表关联" class="headerlink" title="十、$lookup表关联"></a>十、<code>$lookup</code>表关联</h5><p><code>localField: &quot;order_id&quot;</code>（order表哪个字段）与<code>foreignField: &quot;order_id&quot;</code>（order_item表的哪个字段关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line"> 	&#123;</span><br><span class="line">		$lookup:</span><br><span class="line">        &#123;</span><br><span class="line">            from:&quot;order_item&quot;,</span><br><span class="line">            localField: &quot;order_id&quot;,</span><br><span class="line">            foreignField: &quot;order_id&quot;,</span><br><span class="line">            as: &quot;items&quot;</span><br><span class="line">        &#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">]);</span><br><span class="line"> </span><br><span class="line">from:&quot;order_item&quot;,		 	// 关联的表</span><br><span class="line">localField: &quot;order_id&quot;,		// 原表（order表）</span><br><span class="line">foreignField: &quot;order_id&quot;,	// 关联表（order_item表）</span><br></pre></td></tr></table></figure>

<p>格式化之后的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot;: ObjectId(&quot;64116235c9443120dbcb913e&quot;),</span><br><span class="line">	&quot;order_id&quot;: &quot;1&quot;,</span><br><span class="line">	&quot;uid&quot;: 10,</span><br><span class="line">	&quot;trade_no&quot;: &quot;111&quot;,</span><br><span class="line">	&quot;all_price&quot;: 100,</span><br><span class="line">	&quot;all_num&quot;: 2,</span><br><span class="line">	&quot;items&quot;: [&#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116245c9443120dbcb9140&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;1&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;商品鼠标1&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;6411624bc9443120dbcb9141&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;1&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;商品键盘2&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;]</span><br><span class="line">&#125; &#123;</span><br><span class="line">	&quot;_id&quot;: ObjectId(&quot;6411623fc9443120dbcb913f&quot;),</span><br><span class="line">	&quot;order_id&quot;: &quot;3&quot;,</span><br><span class="line">	&quot;uid&quot;: 9,</span><br><span class="line">	&quot;trade_no&quot;: &quot;333&quot;,</span><br><span class="line">	&quot;all_price&quot;: 20,</span><br><span class="line">	&quot;all_num&quot;: 6,</span><br><span class="line">	&quot;items&quot;: [&#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;6411625dc9443120dbcb9144&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;3&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;矿泉水&quot;,</span><br><span class="line">		&quot;price&quot;: 2,</span><br><span class="line">		&quot;num&quot;: 5</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116262c9443120dbcb9145&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;3&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;毛巾&quot;,</span><br><span class="line">		&quot;price&quot;: 10,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;]</span><br><span class="line">&#125; &#123;</span><br><span class="line">	&quot;_id&quot;: ObjectId(&quot;641162b7c9443120dbcb9146&quot;),</span><br><span class="line">	&quot;order_id&quot;: &quot;2&quot;,</span><br><span class="line">	&quot;uid&quot;: 7,</span><br><span class="line">	&quot;trade_no&quot;: &quot;222&quot;,</span><br><span class="line">	&quot;all_price&quot;: 90,</span><br><span class="line">	&quot;all_num&quot;: 2,</span><br><span class="line">	&quot;items&quot;: [&#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116251c9443120dbcb9142&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;2&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;牛奶&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116256c9443120dbcb9143&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;2&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;酸奶&quot;,</span><br><span class="line">		&quot;price&quot;: 40,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.order.aggregate([</span><br><span class="line"> 	&#123;</span><br><span class="line">		$lookup:</span><br><span class="line">        &#123;</span><br><span class="line">            from:&quot;order_item&quot;,</span><br><span class="line">            localField: &quot;order_id&quot;,</span><br><span class="line">            foreignField: &quot;order_id&quot;,</span><br><span class="line">            as: &quot;items&quot;</span><br><span class="line">        &#125;</span><br><span class="line"> 	&#125;,</span><br><span class="line"> 	&#123;</span><br><span class="line">    	$project:&#123;trade_no: 1, all_price:1, items :1&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$match:&#123;&quot;all_price&quot;: &#123;$gte:90&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    	$sort:&#123;&quot;all_price&quot;: -1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>格式化之后的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot;: ObjectId(&quot;64116235c9443120dbcb913e&quot;),</span><br><span class="line">	&quot;trade_no&quot;: &quot;111&quot;,</span><br><span class="line">	&quot;all_price&quot;: 100,</span><br><span class="line">	&quot;items&quot;: [&#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116245c9443120dbcb9140&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;1&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;商品鼠标1&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;6411624bc9443120dbcb9141&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;1&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;商品键盘2&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;]</span><br><span class="line">&#125; &#123;</span><br><span class="line">	&quot;_id&quot;: ObjectId(&quot;641162b7c9443120dbcb9146&quot;),</span><br><span class="line">	&quot;trade_no&quot;: &quot;222&quot;,</span><br><span class="line">	&quot;all_price&quot;: 90,</span><br><span class="line">	&quot;items&quot;: [&#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116251c9443120dbcb9142&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;2&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;牛奶&quot;,</span><br><span class="line">		&quot;price&quot;: 50,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&quot;_id&quot;: ObjectId(&quot;64116256c9443120dbcb9143&quot;),</span><br><span class="line">		&quot;order_id&quot;: &quot;2&quot;,</span><br><span class="line">		&quot;title&quot;: &quot;酸奶&quot;,</span><br><span class="line">		&quot;price&quot;: 40,</span><br><span class="line">		&quot;num&quot;: 1</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Nodejs-操作MongoDB数据库"><a href="#Nodejs-操作MongoDB数据库" class="headerlink" title="Nodejs 操作MongoDB数据库"></a>Nodejs 操作MongoDB数据库</h4><p>Nodejs操作mongodb数据库官方文档：</p>
<p><a href="http://mongodb.github.io/node-mongodb-native/">MongoDB Node.js Driver</a></p>
<h5 id="一、Create-a-Project-Directory"><a href="#一、Create-a-Project-Directory" class="headerlink" title="一、Create a Project Directory"></a>一、<a href="https://www.mongodb.com/docs/drivers/node/current/quick-start/download-and-install/">Create a Project Directory</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir node_quickstart</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd node_quickstart</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mongodb --save</span><br></pre></td></tr></table></figure>

<h5 id="二、Connect-to-MongoDB"><a href="#二、Connect-to-MongoDB" class="headerlink" title="二、Connect to MongoDB"></a>二、<a href="https://www.mongodb.com/docs/drivers/node/current/quick-start/connect-to-mongodb/">Connect to MongoDB</a></h5><p><code>index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入mongodb</span><br><span class="line">const &#123; MongoClient &#125; = require(&quot;mongodb&quot;);</span><br><span class="line">//定义数据库连接的地址</span><br><span class="line">const url = &#x27;mongodb://127.0.0.1:27017&#x27;;</span><br><span class="line">//定义要操作的数据库</span><br><span class="line">const dbName = &#x27;test&#x27;;</span><br><span class="line"></span><br><span class="line">//实例化Mongoclient传入数据库连接地址</span><br><span class="line">const client = new MongoClient(url,&#123;useUnifiedTopology : true &#125;);</span><br><span class="line">//连接数据库</span><br><span class="line">client.connect((err)=&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#x27;数据库连接成功&#x27;);</span><br><span class="line">    let db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">    // 1、查找数据</span><br><span class="line">    db.collection(&#x27;user&#x27;).find(&#123;&#125;).toArray((err,result)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        // 操作数据库完毕以后一定要  关闭数据库连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // db.collection(&#x27;user&#x27;).find(&#123;&quot;age&quot;: 13&#125;).toArray((err,result)=&gt;&#123;</span><br><span class="line">    //     if(err)&#123;</span><br><span class="line">    //         console.log(err);</span><br><span class="line">    //         return;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     console.log(result);</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 2、增加数据</span><br><span class="line">    db.collection(&#x27;user&#x27;).insertOne(&#123;</span><br><span class="line">        &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">        &quot;age&quot;: 13</span><br><span class="line">    &#125;,(err,result)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;增加成功&#x27;);</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        // 操作数据库完毕以后一定要  关闭数据库连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 3、更新数据</span><br><span class="line">    db.collection(&#x27;user&#x27;).updateOne(&#123;</span><br><span class="line">        name: &quot;张三&quot;,</span><br><span class="line">    &#125;,&#123;$set: &#123;&quot;age&quot;: 13&#125;&#125;,(err,result)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;更新成功&#x27;);</span><br><span class="line">        console.log(result);</span><br><span class="line">        // 操作数据库完毕以后一定要  关闭数据库连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 4、删除一条数据</span><br><span class="line">    db.collection(&#x27;user&#x27;).deleteOne(&#123;</span><br><span class="line">        name: &quot;张三&quot;</span><br><span class="line">    &#125;,(err,result)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;删除一条数据成功&#x27;);</span><br><span class="line">        console.log(result);</span><br><span class="line">        // 操作数据库完毕以后一定要  关闭数据库连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 5、删除多条数据</span><br><span class="line">    db.collection(&#x27;user&#x27;).deleteMany(&#123;</span><br><span class="line">        name: &quot;zhangsan&quot;</span><br><span class="line">    &#125;,(err,result)=&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#x27;删除多条数据成功&#x27;);</span><br><span class="line">        console.log(result);</span><br><span class="line">        // 操作数据库完毕以后一定要  关闭数据库连接</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="NodeJs操作MongoDb数据库查询数据通过ejs显示列表以及通过表单增加数据"><a href="#NodeJs操作MongoDb数据库查询数据通过ejs显示列表以及通过表单增加数据" class="headerlink" title="NodeJs操作MongoDb数据库查询数据通过ejs显示列表以及通过表单增加数据"></a>NodeJs操作MongoDb数据库查询数据通过ejs显示列表以及通过表单增加数据</h4><h4 id="Express，动态路由，get传值"><a href="#Express，动态路由，get传值" class="headerlink" title="Express，动态路由，get传值"></a><a href="https://www.expressjs.com.cn/">Express</a>，动态路由，get传值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir myapp</span><br><span class="line">$ cd myapp</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>    ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">const port = 5000</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#x27;Hello World!&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  console.log(`Example app listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>

<h5 id="配置路由、获取get传值"><a href="#配置路由、获取get传值" class="headerlink" title="配置路由、获取get传值"></a>配置路由、获取get传值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">const port = 5000</span><br><span class="line"></span><br><span class="line">// 配置路由</span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#x27;首页&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/login&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#x27;登录&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/register&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&#x27;注册&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/article&#x27;, (req, res) =&gt; &#123;     // get:获取数据（显示数据</span><br><span class="line">    res.send(&#x27;文章&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/doLogin&#x27;, (req, res) =&gt; &#123;    // post:增加数据</span><br><span class="line">    console.log(&#x27;执行登录&#x27;)</span><br><span class="line">    res.send(&#x27;执行登录&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.put(&#x27;/editUser&#x27;, (req, res) =&gt; &#123;  // put:修改数据</span><br><span class="line">    console.log(&#x27;修改用户&#x27;)</span><br><span class="line">    res.send(&#x27;修改用户&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.delete(&#x27;/deleteUser&#x27;, (req, res) =&gt; &#123;  // delete:删除数据</span><br><span class="line">    console.log(&#x27;删除用户&#x27;)</span><br><span class="line">    res.send(&#x27;删除用户&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 动态路由   配置路由的时候也要注意顺序</span><br><span class="line">app.get(&#x27;/article/add&#x27;, (req, res) =&gt; &#123;     </span><br><span class="line">    res.send(&#x27;article add&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/article/:id&#x27;, (req, res) =&gt; &#123;     </span><br><span class="line">    var id = req.params.id;</span><br><span class="line">    res.send(&#x27;动态路由&#x27; + id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果这个路由写在后面， id就是add</span><br><span class="line">// app.get(&#x27;/article/add&#x27;, (req, res) =&gt; &#123;     </span><br><span class="line">//     res.send(&#x27;article add&#x27;)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// get 传值</span><br><span class="line">// http://localhost:5000/product?id=125454&amp;cid=2</span><br><span class="line">app.get(&#x27;/product&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    var id = req.params.id;</span><br><span class="line">    let query = req.query;</span><br><span class="line">    console.log(query)     // &#123; id: &#x27;125454&#x27;, cid: &#x27;2&#x27; &#125;</span><br><span class="line">    res.send(&#x27;product&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 监听端口</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  console.log(`Example app listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Express框架中ejs的安装使用"><a href="#Express框架中ejs的安装使用" class="headerlink" title="Express框架中ejs的安装使用"></a>Express框架中ejs的安装使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 2、配置模板引擎</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 3、使用   默认加载模板引擎的文件夹是views</span><br><span class="line">res.render(&#x27;index&#x27;,&#123;     // views/index.ejs    不需要写views    &#123;&#125;里面是传数据，没有传空对象</span><br><span class="line">	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用<code>supervisor app.js</code>启动，就不需要每次修改了<code>app.js</code>都要重启一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g supervisor </span><br></pre></td></tr></table></figure>

<h5 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%=data%&gt;</span><br><span class="line">&lt;%=obj.name%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;%-article%&gt;&lt;/p&gt;         // 渲染包含HTML标签的内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let title = &#x27;你好&#x27;</span><br><span class="line">    res.render(&#x27;index&#x27;,&#123;    </span><br><span class="line">        title:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/news&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let userinfo = &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;</span><br><span class="line">    let article = &#x27;&lt;h3&gt;内容包含HTML标签&lt;/h3&gt;&#x27;</span><br><span class="line">    res.render(&#x27;news&#x27;,&#123;    </span><br><span class="line">        userinfo:userinfo,</span><br><span class="line">        article:article</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听端口  端口号建议写成3000以上</span><br><span class="line">app.listen(5000);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;%=title%&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;%=userinfo.name%&gt;——————&lt;%=userinfo.age%&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"> &lt;p&gt;&lt;%-article%&gt;&lt;/p&gt;    </span><br></pre></td></tr></table></figure>

<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><p>js代码要写在<code>&lt;%%&gt;</code>里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%if(flag ===true)&#123;%&gt;</span><br><span class="line">    &lt;strong&gt;flag ===true&lt;/strong&gt;</span><br><span class="line">&lt;%&#125;%&gt;   </span><br><span class="line"></span><br><span class="line">&lt;%if(score &gt;=60)&#123;%&gt;</span><br><span class="line">    及格</span><br><span class="line">&lt;%&#125;else&#123;%&gt;  </span><br><span class="line">    不及格</span><br><span class="line">&lt;%&#125;%&gt;  </span><br></pre></td></tr></table></figure>

<h5 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;%for(var i = 0; i&lt;list.length; i++)&#123;%&gt;</span><br><span class="line">        &lt;li&gt;&lt;%=list[i]%&gt;&lt;/li&gt;</span><br><span class="line">    &lt;%&#125;%&gt;  </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="在模板中引入公共模板"><a href="#在模板中引入公共模板" class="headerlink" title="在模板中引入公共模板"></a>在模板中引入公共模板</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- include(&quot;footer.ejs&quot;) %&gt;</span><br></pre></td></tr></table></figure>

<h4 id="将模板文件设置为-html"><a href="#将模板文件设置为-html" class="headerlink" title="将模板文件设置为.html"></a>将模板文件设置为<code>.html</code></h4><ol>
<li><p>在 app.js 定义ejs，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册html模板引擎，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.engine(&#x27;html&#x27;, ejs.__express);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将模板引擎换成html，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改模板文件的后缀为<code>.html</code>：<code>index.ejs</code>——&gt;<code>index.html</code></p>
</li>
</ol>
<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 1.定义ejs</span><br><span class="line">app.engine(&#x27;html&#x27;, ejs.__express);</span><br><span class="line">// 2.注册html模板引擎</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let title = &#x27;你好&#x27;</span><br><span class="line">    res.render(&#x27;index&#x27;,&#123;    </span><br><span class="line">        title:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/news&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let userinfo = &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;</span><br><span class="line">    let article = &#x27;&lt;h3&gt;内容包含HTML标签&lt;/h3&gt;&#x27;</span><br><span class="line">    let list = [1,3,4,5,6,7,8,9,10,11,12]</span><br><span class="line">    res.render(&#x27;news&#x27;,&#123;    </span><br><span class="line">        userinfo:userinfo,</span><br><span class="line">        article:article,</span><br><span class="line">        flag: true,</span><br><span class="line">        score: 60,</span><br><span class="line">        list:list</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听端口  端口号建议写成3000以上</span><br><span class="line">app.listen(5000);</span><br></pre></td></tr></table></figure>

<p>指定模板位置，默认模板位置在<code>views</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.set(&#x27;views&#x27;, __dirname + &#x27;views&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="利用Express-static托管静态文件"><a href="#利用Express-static托管静态文件" class="headerlink" title="利用Express.static托管静态文件"></a>利用<code>Express.static</code>托管静态文件</h4><p>1、如果你的静态资源存放在多个目录下面，你可以多次调用express.static中间件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置静态web目录</span><br><span class="line">app.use(express.static(&#x27;static&#x27;));</span><br></pre></td></tr></table></figure>

<p><code>重启服务</code>，static目录下面的文件就可以访问</p>
<p><a href="http://localhost:5000/css/base.css">static/css/base.css</a></p>
<p>在<code>index.html</code>、<code>news.html</code>中引入样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/base.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>可以配置多个静态资源存放目录</code></p>
<p><code>public/js/base.js</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置第二个静态web目录</span><br><span class="line">app.use(express.static(&#x27;public&#x27;));</span><br></pre></td></tr></table></figure>

<p><code>重启服务</code>，public目录下面的文件就可以访问</p>
<p>在<code>news.html</code>中引入js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;/js/base.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">// 可以看到在控制台输出  10</span><br></pre></td></tr></table></figure>

<p>2、如果你希望所有通过<code>express.static</code>访问的文件都存放在一个“虚拟(virtual)”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use(&#x27;/static&#x27;, express.static(&#x27;public&#x27;));</span><br></pre></td></tr></table></figure>

<p>现在，你就可以通过带有<code>&quot;/static&quot;</code>前缀的地址来访问 public目录下面的文件了。</p>
<p><strong>例子：</strong></p>
<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置虚拟目录</span><br><span class="line">app.use(&#x27;/static2&#x27;, express.static(&#x27;public&#x27;));</span><br></pre></td></tr></table></figure>

<p>重启服务，即可访问<a href="http://localhost:5000/static2/images/logo.jpg%60">http://localhost:5000/static2/images/logo.jpg`</a></p>
<p><code>views/news.html</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;/static2/images/logo.jpg&quot; alt=&quot;logo&quot;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际上不存在<code>static2</code>目录，是指向了<code>public</code>目录</p>
</blockquote>
<h4 id="Express中间件——body-paser中间件"><a href="#Express中间件——body-paser中间件" class="headerlink" title="Express中间件——body-paser中间件"></a>Express中间件——body-paser中间件</h4><blockquote>
<p>通俗的讲：中间件就是匹配路由之前或者匹配路由完成做的一系列的操作。中间件中如果想往下匹配的话，那么需要写<code>next()</code></p>
</blockquote>
<h5 id="Express应用可使用如下几种中间件："><a href="#Express应用可使用如下几种中间件：" class="headerlink" title="Express应用可使用如下几种中间件："></a>Express应用可使用如下几种中间件：</h5><ul>
<li>应用级中间件</li>
<li>路由级中间件</li>
<li>错误处理中间件</li>
<li>内置中间件</li>
<li>第三方中间件</li>
</ul>
<blockquote>
<p>Express中间件是一种函数，可以在HTTP请求的处理过程中进行拦截和处理，以实现某些特定的功能。中间件可以用来处理请求和响应对象，调用下一个中间件函数，终止请求-响应周期，以及执行任何其他操作。</p>
</blockquote>
<h5 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h5><blockquote>
<p>应用级别的中间件使用app.use()方法来注册，可以匹配任何路由，也可以设置在路由之前或之后执行</p>
</blockquote>
<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 应用级中间件            </span><br><span class="line">app.use((req, res, next) =&gt; &#123;       // 在请求路由之前就执行</span><br><span class="line">    console.log(new Date());        // 访问http://localhost:5000/在控制台输出当前时间</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let title = &#x27;你好&#x27;</span><br><span class="line">    res.render(&#x27;index&#x27;,&#123;    </span><br><span class="line">        title:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="路由级中间件"><a href="#路由级中间件" class="headerlink" title="路由级中间件"></a>路由级中间件</h5><blockquote>
<p>路由级别的中间件使用app.METHOD()方法来注册，其中METHOD表示HTTP请求方法（如GET、POST等），可以针对特定的路由进行匹配</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 路由中间件（用得比较少）</span><br><span class="line">app.get(&#x27;/news/add&#x27;, (req, res, next) =&gt; &#123;</span><br><span class="line">   console.log(&#x27;执行增加新闻&#x27;);      // 在控制台输出 执行增加新闻</span><br><span class="line">   next();                         // 继续向下匹配路由</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/news/:id&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&#x27;新闻动态路由&#x27;)           // 在页面输出  新闻动态路由</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h5><blockquote>
<p>错误处理中间件通常用于处理在请求处理过程中发生的错误</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  3. 错误处理中间件</span><br><span class="line">app.use(( req, res, next) =&gt; &#123;</span><br><span class="line">    res.status(404).send(&#x27;404&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(new Date());</span><br><span class="line">    console.log(err);</span><br><span class="line">    res.status(500).send(&#x27;服务器错误&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 4. 内置中间件</span><br><span class="line">app.use(express.static(&#x27;static&#x27;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/base.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h5><p><code>body-parser</code>中间件</p>
<blockquote>
<p>body-parser是一个处理HTTP请求体的中间件，可以解析JSON、Raw、文本（Text）、URL-encoded格式的请求体。在Express框架中，使用body-parser做为请求体解析中间件[<a href="https://blog.csdn.net/fuhanghang/article/details/116986474">3</a>]。使用body-parser可以把请求主体解析为req.body属性下可用的对象形式，方便后续处理[<a href="https://zhuanlan.zhihu.com/p/405704013">1</a>]</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i body-parser --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>处理form表单的中间件     form表单提交的数据</p>
</blockquote>
</li>
<li><p>接收post数据：<code>req.body</code>    示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/login&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.render(&#x27;login&#x27;,&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/doLogin&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    var body = req.body;</span><br><span class="line">    console.log(body);          // 控制台输出：&#123; username: &#x27;admin&#x27;, password: &#x27;123456&#x27; &#125;</span><br><span class="line">    res.send(body.username + &#x27; &#x27; + body.password);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>index.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/doLogin&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Express中间件-cookie的基本使用"><a href="#Express中间件-cookie的基本使用" class="headerlink" title="Express中间件  cookie的基本使用"></a>Express中间件  cookie的基本使用</h3><ul>
<li><p>cookie是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名的时候共享数据。</p>
</li>
<li><p>HTTP是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。</p>
</li>
<li><p>Cookie是一个简单到爆的想法：当访问一个页面的时候，服务器在下行HTTP报文中，命令浏览器存储一个字符串；浏览器再访问同一个域的时候，将把这个字符串携带到上行HTTP请求中。第一次访问一个服务器，不可能携带cookie。必须是服务器得到这次请求，在下行响应报头中，携带cookie 信息，此后每一次浏览器往这个服务器发出的请求，都会携带这个cookie。</p>
</li>
</ul>
<blockquote>
<p>要加密，不允许修改，不加密，在客户端可以直接修改</p>
</blockquote>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i cookie-parser --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const cookieParser = require(&#x27;cookie-parser&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置cookie</p>
<p><code>res.cookie(&#39;name&#39;,&#39;test&#39;, &#123;maxAge: 1000*60*60&#125;);</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 设置cookie，如果cookie没有过期的话，关闭浏览器后重新打开cookie，cookie不会销毁</span><br><span class="line">    res.cookie(&#x27;name&#x27;,&#x27;test&#x27;, &#123;maxAge: 1000*60*60&#125;);</span><br><span class="line"></span><br><span class="line">    res.send(&#x27;Cookie的使用&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取cookie</p>
<p><code>let name = req.cookies.name;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/article&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取cookie</span><br><span class="line">    let name = req.cookies.name;</span><br><span class="line">    res.send(&#x27;文章页面----&#x27; + name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取cookie</span><br><span class="line">    let name = req.cookies.name;</span><br><span class="line">    res.send(&#x27;用户页面----&#x27; + name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在访问<code>/</code>时设置了cookie，在这个域（Domain）下不同的页面之间可以共享这个cookie</p>
</blockquote>
</li>
</ol>
<h5 id="指定-cookie-的路径"><a href="#指定-cookie-的路径" class="headerlink" title="指定 cookie 的路径"></a>指定 cookie 的路径</h5><p><code>path</code>：指定 cookie 的路径，默认为当前路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 指定cookie路径</span><br><span class="line">res.cookie(&#x27;name&#x27;,&#x27;test&#x27;, &#123;maxAge: 1000*60*60, path: &#x27;/article&#x27;&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置了之后，在文章页面可以获取到该cookie，在用户页面获取不了该cookie</p>
</blockquote>
<h5 id="指定-cookie-的域名"><a href="#指定-cookie-的域名" class="headerlink" title="指定 cookie 的域名"></a>指定 cookie 的域名</h5><p><code>domain</code>：指定 cookie 的域名，默认为当前域名</p>
<ol>
<li><p>在host中添加两个域</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 aaa.test.com</span><br><span class="line">127.0.0.1 bbb.test.com</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>http://localhost:5000/</code>的访问，可以使用<code>http://aaa.test.com:5000/</code>和<code>http://bbb.test.com:5000/</code>访问</p>
</li>
<li><p>在<code>aaa.test.com</code>中设置的cookie，在<code>bbb.test.com</code>中无法获取——【默认为当前域名】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    res.cookie(&#x27;name&#x27;,&#x27;test&#x27;, &#123;maxAge: 1000*60*60&#125;);</span><br><span class="line">    res.send(&#x27;Cookie的使用&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>先访问<code>http://aaa.test.com:5000/</code>进行设置cookie        </li>
<li>访问<code>http://aaa.test.com:5000/user</code>，可以获取到cookie</li>
<li>访问<code>http://bbb.test.com:5000/user</code>，无法获取到cookie</li>
</ol>
</li>
<li><p>设置多个域名共享cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置多个域名共享cookie， aaa.test.com   bbb.test.com</span><br><span class="line">res.cookie(&#x27;name&#x27;,&#x27;test22&#x27;, &#123;maxAge: 1000*60*60, domain: &#x27;.test.com&#x27;&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>aaa.test.com和bbb.test.com共享cookie       test.com二级域名都可以获取cookie</p>
</blockquote>
</li>
</ol>
<h5 id="中文cookie"><a href="#中文cookie" class="headerlink" title="中文cookie"></a>中文cookie</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.cookie(&#x27;name&#x27;,&#x27;张三&#x27;, &#123;maxAge: 1000*60*60&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>cookie可以在客户端修改，如果像这种中文编码后的值被修改后，就会乱码。所以要对cookie进行加密</p>
</blockquote>
<h5 id="加密cookie"><a href="#加密cookie" class="headerlink" title="加密cookie"></a>加密cookie</h5><p><code>防止cookie被恶意篡改</code></p>
<ol>
<li><p>在初始化 cookie-parser 中间件时，需要传入一个 secret 参数，这个参数就是用来对 cookie 进行签名的密钥。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. 配置中间件的时候需要传入加密的参数</span><br><span class="line">app.use(cookieParser(&#x27;test&#x27;));</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 signed 参数设置为 true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 2.将 signed 参数设置为 true</span><br><span class="line">res.cookie(&#x27;name&#x27;,&#x27;test33&#x27;, &#123;maxAge: 1000*60*60, signed: true&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取签名后的cookie值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let signedName = req.signedCookies.name; </span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>加了签名后的cookie，如果被修改了，无法获取到cookie的值，会默认返回false/undefined</code></p>
<h3 id="Express-Session的基本使用"><a href="#Express-Session的基本使用" class="headerlink" title="Express Session的基本使用"></a>Express Session的基本使用</h3><h5 id="一、Session的简单介绍"><a href="#一、Session的简单介绍" class="headerlink" title="一、Session的简单介绍"></a>一、Session的简单介绍</h5><p>​        <strong>session是另一种记录客户状态的机制,不同的是Cookie保存在客户端浏览器中，而session保存在服务器上。</strong></p>
<p>​        Cookie数据存放在客户的浏览器上，Session数据放在服务器上。Session相比 Cookie要更安全一些。由于Session保存到服务器上，所以当访问量增多的时候，会比较占用服务器的性能。单个cookie保存的数据大小不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。Session没有这方面的限制。Session是基于Cookie进行工作的。</p>
<h5 id="二、Session的工作流程"><a href="#二、Session的工作流程" class="headerlink" title="二、Session的工作流程"></a>二、Session的工作流程</h5><p>​        当浏览器访问服务器并发送第一次请求时，服务器端会创建一个session对象，生成一个类似于key, value的键值对，然后将key (cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带key (cookie)，找到对应的session(value)。</p>
<h5 id="三、express-session的使用"><a href="#三、express-session的使用" class="headerlink" title="三、express-session的使用"></a>三、express-session的使用</h5><p><a href="https://www.npmjs.com/package/express-session">https://www.npmjs.com/package/express-session</a></p>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express-session --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const session = require(&#x27;express-session&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置session的中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置session的中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: &#x27;keyboard cat&#x27;,     // 服务器端生成session的签名</span><br><span class="line">    resave: false,              // 强制保存 session  即使它并没有变化</span><br><span class="line">    saveUninitialized: true,    // 强制将未初始化的session存储</span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge: 1000*60,</span><br><span class="line">        secure: false            // true表示只有https协议才能访问cookie</span><br><span class="line">    &#125;,</span><br><span class="line">    rolling: true         // 在每次请求时强行设置cookie，这将重置cookie过期时间（默认是false)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置session</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/login&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 设置session</span><br><span class="line">    req.session.username = &#x27;张三&#x27;;</span><br><span class="line">    req.session.age =  28;</span><br><span class="line">    res.send(&#x27;执行登录!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取session</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 获取session</span><br><span class="line">    if(req.session.username || req.session.age) &#123;</span><br><span class="line">        res.send(&#x27;欢迎--&#x27;+ req.session.username + &#x27; &#x27;+  req.session.age +&#x27;--!&#x27;);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        res.send(&#x27;请先登录!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>销毁session</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/loginOut&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // 删除session</span><br><span class="line">    // 1.设置session的过期时间为0(它会把所有的session值都销毁)</span><br><span class="line">    // req.session.cookie.maxAge = 0;</span><br><span class="line">    // 2. 销毁指定session</span><br><span class="line">    // req.session.username = &#x27;&#x27;;</span><br><span class="line">    // 3. 销毁session</span><br><span class="line">    req.session.destroy();   // 全部销毁</span><br><span class="line">	</span><br><span class="line">	 //	req.session.destroy(function(err)&#123;</span><br><span class="line">	 //	</span><br><span class="line">	 //	&#125;);</span><br><span class="line">    res.send(&#x27;退出登录!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="负载均衡配置session，把session保存到数据库"><a href="#负载均衡配置session，把session保存到数据库" class="headerlink" title="负载均衡配置session，把session保存到数据库"></a>负载均衡配置session，把session保存到数据库</h4><p>多服务器负载均衡</p>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express-session connect-mongo --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入模块</p>
<p><a href="https://www.npmjs.com/package/connect-mongo">connect-mongo</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const session = require(&#x27;express-session&#x27;);</span><br><span class="line">const MongoStore = require(&#x27;connect-mongo&#x27;);</span><br><span class="line">const app = express();</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置session中间件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置session的中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: &#x27;keyboard cat&#x27;,     // 服务器端生成session的签名</span><br><span class="line">    name:&#x27;test&#x27;,                // 修改session对应cookie的名称</span><br><span class="line">    resave: false,              // 强制保存 session  即使它并没有变化</span><br><span class="line">    saveUninitialized: true,    // 强制将未初始化的session存储</span><br><span class="line">    store: MongoStore.create(&#123;    </span><br><span class="line">        mongoUrl:&#x27;mongodb://localhost:27017/sessionDB&#x27;, // 数据库连接地址</span><br><span class="line">        touchAfter: 24 * 3600 // session自动更新时间（不管发出了多少次请求，在24小时内只更新一次session，除非你改变了）</span><br><span class="line">    &#125;),</span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge: 1000*60,         // session过期时间</span><br><span class="line">        secure: false            // true表示只有https协议才能访问cookie</span><br><span class="line">    &#125;,</span><br><span class="line">    rolling: true                // 在每次请求时强行设置cookie，这将重置cookie过期时间（默认是false)  </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mongoDB中查看数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use sessionDB</span><br><span class="line">switched to db sessionDB</span><br><span class="line">&gt; show collections</span><br><span class="line">sessions</span><br><span class="line">&gt; db.sessions.find()</span><br><span class="line">&#123; &quot;_id&quot; : &quot;e0DHVlNpyZoixD7MT-A_Kr1EqMQno6My&quot;, &quot;expires&quot; : ISODate(&quot;2023-03-29T06:19:29.579Z&quot;), &quot;lastModified&quot; : ISODate(&quot;2023-03-29T06:18:29.579Z&quot;), &quot;session&quot; : &quot;&#123;\&quot;cookie\&quot;:&#123;\&quot;originalMaxAge\&quot;:60000,\&quot;expires\&quot;:\&quot;2023-03-29T06:19:29.579Z\&quot;,\&quot;secure\&quot;:false,\&quot;httpOnly\&quot;:true,\&quot;path\&quot;:\&quot;/\&quot;&#125;,\&quot;username\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:28&#125;&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="其他存储方式的插件"><a href="#其他存储方式的插件" class="headerlink" title="其他存储方式的插件"></a>其他存储方式的插件</h5><h5 id="connect-redis"><a href="#connect-redis" class="headerlink" title="connect-redis"></a><a href="https://www.npmjs.com/package/connect-redis">connect-redis</a></h5><h5 id="connect-mysql"><a href="#connect-mysql" class="headerlink" title="connect-mysql"></a><a href="https://www.npmjs.com/package/connect-mysql">connect-mysql</a></h5><h3 id="Express路由模块化以及-Express应用程序生成器"><a href="#Express路由模块化以及-Express应用程序生成器" class="headerlink" title="Express路由模块化以及 Express应用程序生成器"></a>Express路由模块化以及 Express应用程序生成器</h3><p><a href="http://expressjs.com/en/guide/routing.html">http://expressjs.com/en/guide/routing.html</a> 中的<code>express.Router</code></p>
<p>Express中允许我们通过<code>express.Router</code>创建模块化的、可挂载的路由处理程序。</p>
<ol>
<li><p>新建login.js；将登录相关模块的api都写在login.js中，便于管理，也便于多人同时协作开发</p>
</li>
<li><p>在app.js中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.引入login模块</span><br><span class="line">const login = require(&#x27;./routes/login&#x27;);</span><br><span class="line">// 2.挂载login模块</span><br><span class="line">app.use(&#x27;/login&#x27;, login);</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<code>http://localhost:5000/login/*</code>，即可正常访问</p>
</li>
</ol>
<p><code>routes/login.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.render(&#x27;login&#x27;,&#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doLogin&#x27;, function(req, res) &#123;</span><br><span class="line">    var body = req.body</span><br><span class="line">    console.log(body);</span><br><span class="line">    res.send(&#x27;执行提交&#x27; + body.username);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>login.html</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/login/doLogin&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;username&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 引入外部login模块</span><br><span class="line">const login = require(&#x27;./routes/login&#x27;);</span><br><span class="line"></span><br><span class="line">// 配置模板引擎</span><br><span class="line">app.engine(&#x27;html&#x27;, ejs.__express)</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span><br><span class="line"></span><br><span class="line">// 配置静态资源目录</span><br><span class="line">app.use(express.static(&#x27;public&#x27;));</span><br><span class="line"></span><br><span class="line">// 配置第三方中间件</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended:false&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">// 挂载login模块</span><br><span class="line">app.use(&#x27;/login&#x27;, login);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&#x27;首页!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(5000, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Example app listening on port 5000!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="新建user-js模块"><a href="#新建user-js模块" class="headerlink" title="新建user.js模块"></a>新建user.js模块</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;用户列表&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/add&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;添加用户&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/edit&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;编辑用户&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<h5 id="挂载user模块"><a href="#挂载user模块" class="headerlink" title="挂载user模块"></a>挂载user模块</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const user = require(&#x27;./routes/user&#x27;)</span><br><span class="line"></span><br><span class="line">// 挂载user模块</span><br><span class="line">app.use(&#x27;/user&#x27;, user);</span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:5000/user/*</code>即可</p>
<h4 id="Express应用程序生成器-express-generator"><a href="#Express应用程序生成器-express-generator" class="headerlink" title="Express应用程序生成器-express-generator"></a>Express应用程序生成器-<a href="http://expressjs.com/en/starter/generator.html#express-application-generator">express-generator</a></h4><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure>

<p>创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">express --view=ejs myapp</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 执行以上命令，会创建myapp目录，在里面自动生成以下目录及文件：</span><br><span class="line">myapp</span><br><span class="line">│  app.js</span><br><span class="line">│  package.json</span><br><span class="line">│</span><br><span class="line">├─bin</span><br><span class="line">│      www</span><br><span class="line">│</span><br><span class="line">├─public</span><br><span class="line">│  ├─images</span><br><span class="line">│  ├─javascripts</span><br><span class="line">│  └─stylesheets</span><br><span class="line">│          style.css</span><br><span class="line">│</span><br><span class="line">├─routes</span><br><span class="line">│      index.js</span><br><span class="line">│      users.js</span><br><span class="line">│</span><br><span class="line">└─views</span><br><span class="line">        error.ejs</span><br><span class="line">        index.ejs</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd myapp</span><br><span class="line">npm i</span><br><span class="line">npm start  或  node ./bin/www</span><br></pre></td></tr></table></figure>

<h5 id="根据不同模块创建路由"><a href="#根据不同模块创建路由" class="headerlink" title="根据不同模块创建路由"></a>根据不同模块创建路由</h5><ol>
<li><p>路由分模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes</span><br><span class="line">│  admin.js</span><br><span class="line">│  api.js</span><br><span class="line">│  index.js</span><br><span class="line">│</span><br><span class="line">└─admin</span><br><span class="line">        login.js    </span><br><span class="line">        nav.js      </span><br><span class="line">        user.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面分模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">views</span><br><span class="line">│  error.ejs</span><br><span class="line">│  index.ejs</span><br><span class="line">│</span><br><span class="line">└─admin</span><br><span class="line">    ├─login</span><br><span class="line">    │      index.ejs</span><br><span class="line">    │</span><br><span class="line">    ├─nav</span><br><span class="line">    │      add.ejs</span><br><span class="line">    │</span><br><span class="line">    └─user</span><br><span class="line">            add.ejs</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由配置</p>
<p><code>routes/index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;, &#123; title: &#x27;Express&#x27; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>routes/api.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET API listing. */</span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&#x27;API&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>routes/admin.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">// 引入模块</span><br><span class="line">const user = require(&#x27;./admin/user&#x27;);</span><br><span class="line">const login = require(&#x27;./admin/login&#x27;);</span><br><span class="line">const nav = require(&#x27;./admin/nav&#x27;);</span><br><span class="line"></span><br><span class="line">/* GET Admin listing. 管理后台相关的*/</span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&#x27;后台管理中心&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 挂载路由</span><br><span class="line">router.use(&#x27;/user&#x27;, user);</span><br><span class="line">router.use(&#x27;/login&#x27;, login);</span><br><span class="line">router.use(&#x27;/nav&#x27;, nav);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>routes/admin/user.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;用户列表&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/add&#x27;, function(req, res) &#123;</span><br><span class="line">    res.render(&#x27;admin/user/add&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/edit&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;编辑用户&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doAdd&#x27;, function(req, res) &#123;</span><br><span class="line">    var body = req.body;</span><br><span class="line">    res.send(body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doEdit&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;执行编辑&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>routes/admin/nav.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;导航列表&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/add&#x27;, function(req, res) &#123;</span><br><span class="line">    res.render(&#x27;admin/nav/add&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/edit&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;编辑用户&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doAdd&#x27;, function(req, res) &#123;</span><br><span class="line">    var body = req.body;</span><br><span class="line">    res.send(body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doEdit&#x27;, function(req, res) &#123;</span><br><span class="line">    res.send(&#x27;执行编辑&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>

<p><code>routes/admin/login.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function(req, res) &#123;</span><br><span class="line">    res.render(&#x27;admin/login/index&#x27;,&#123;&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(&#x27;/doLogin&#x27;, function(req, res) &#123;</span><br><span class="line">    var body = req.body</span><br><span class="line">    console.log(body);</span><br><span class="line">    res.send(&#x27;执行提交&#x27; + body.username);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面</p>
<p><code>views/admin/user.ejs</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/admin/user/doAdd&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;用户名&quot;&gt;   &lt;br/&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;placeholder=&quot;密码&quot;&gt; &lt;br/&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>app.js配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const admin = require(&#x27;./routes/admin&#x27;);</span><br><span class="line">const index = require(&#x27;./routes/index&#x27;);</span><br><span class="line">const api = require(&#x27;./routes/api&#x27;);</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/admin&#x27;, admin);</span><br><span class="line">app.use(&#x27;/api&#x27;, api);</span><br><span class="line">app.use(&#x27;/&#x27;, index);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Express结合multer-上传图片"><a href="#Express结合multer-上传图片" class="headerlink" title="Express结合multer 上传图片"></a>Express结合multer 上传图片</h3><p>Multer是一个node.js中间件，用于处理multipart/form-data类型的表单数据，它主要用于上传文件。它是写在 busboy 之上非常高效。</p>
<p><strong>注意</strong>: Multer不会处理任何非<code>multipart/form-data</code>类型的表单数据。</p>
<ol>
<li><p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express ejs multer --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录新建<code>static/uploads</code>目录， 上传之前目录必须存在</p>
</li>
<li><p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">const multer = require(&#x27;multer&#x27;);</span><br><span class="line">const upload =  multer(&#123; dest: &#x27;static/uploads&#x27;&#125;); // uploads这个目录必须要在上传文件前存在</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt;&#123;</span><br><span class="line">    res.send(&#x27;hello world&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/upload&#x27;, (req, res) =&gt;&#123;</span><br><span class="line">    res.render(&#x27;upload&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// pic是文件框的name值</span><br><span class="line">app.post(&#x27;/doUpload&#x27;, upload.single(&#x27;pic&#x27;), (req, res) =&gt; &#123;</span><br><span class="line">    console.log(req.file);</span><br><span class="line">    res.send(req.file);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(5000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;server is running at port 5000&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>views/upload.ejs</code>：</p>
<p><code>注意</code>：form 要一定加上<code> enctype=&quot;multipart/form-data&quot;</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/doUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;pic&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传一张图片之后，可以在<code>static/uploads</code>下多了一个文件名随机生成的文件，但是<code>没有后缀名，打开不了</code></p>
</li>
</ol>
<h5 id="自定义上传后的文件名以及设置文件后缀名"><a href="#自定义上传后的文件名以及设置文件后缀名" class="headerlink" title="自定义上传后的文件名以及设置文件后缀名"></a>自定义上传后的文件名以及设置文件后缀名</h5><p><code>app.js</code>中将<code>const upload =  multer(&#123; dest: &#39;static/uploads&#39;&#125;);</code>替换为以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const storage = multer.diskStorage(&#123;</span><br><span class="line">    // 配置上传的目录</span><br><span class="line">    destination: function (req, file, cb) &#123;</span><br><span class="line">        cb(null, &#x27;static/uploads&#x27;)     // 上传之前目录必须存在</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改上传后的文件名</span><br><span class="line">    filename: function (req, file, cb) &#123;</span><br><span class="line">        // 1. 获取后缀名</span><br><span class="line">        const extname = path.extname(file.originalname);</span><br><span class="line">        // 2. 获取文件名</span><br><span class="line">        const basename = path.basename(file.originalname, extname);</span><br><span class="line">        // 3. 生成新的文件名</span><br><span class="line">        cb(null, basename + Date.now() + extname)</span><br><span class="line"></span><br><span class="line">        // cb(null, file.originalname)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const upload = multer(&#123; storage: storage &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="将文件上传的这个功能封装到tools-js中"><a href="#将文件上传的这个功能封装到tools-js中" class="headerlink" title="将文件上传的这个功能封装到tools.js中"></a>将文件上传的这个功能封装到<code>tools.js</code>中</h5><p><code>model/tools.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const multer = require(&#x27;multer&#x27;);</span><br><span class="line"></span><br><span class="line">let tools = &#123;</span><br><span class="line">    multer()&#123;</span><br><span class="line">        const storage = multer.diskStorage(&#123;</span><br><span class="line">            // 配置上传的目录</span><br><span class="line">            destination: function (req, file, cb) &#123;</span><br><span class="line">                cb(null, &#x27;static/uploads&#x27;)     // 上传之前目录必须存在</span><br><span class="line">            &#125;,</span><br><span class="line">            // 修改上传后的文件名</span><br><span class="line">            filename: function (req, file, cb) &#123;</span><br><span class="line">                // 1. 获取后缀名</span><br><span class="line">                const extname = path.extname(file.originalname);</span><br><span class="line">                // 2. 获取文件名</span><br><span class="line">                const basename = path.basename(file.originalname, extname);</span><br><span class="line">                // 3. 生成新的文件名</span><br><span class="line">                cb(null, basename + Date.now() + extname)</span><br><span class="line">        </span><br><span class="line">                // cb(null, file.originalname)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        const upload = multer(&#123; storage: storage &#125;)</span><br><span class="line"></span><br><span class="line">        return upload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tools;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const tools = require(&#x27;./model/tools&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// pic是文件框的name值</span><br><span class="line">app.post(&#x27;/doUpload&#x27;, tools.multer().single(&#x27;pic&#x27;), (req, res) =&gt; &#123;</span><br><span class="line">    console.log(req.file);</span><br><span class="line">    res.send(req.file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Express按照日期生成上传文件目录"><a href="#Express按照日期生成上传文件目录" class="headerlink" title="Express按照日期生成上传文件目录"></a>Express按照日期生成上传文件目录</h4><ul>
<li><a href="https://www.npmjs.com/package/mkdirp">mkdirp</a>——创建目录</li>
<li><a href="https://www.npmjs.com/package/silly-datetime">silly-datetime</a>——格式化日期</li>
</ul>
<p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i silly-datetime --save</span><br></pre></td></tr></table></figure>

<p><code>model/tools.js</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const multer = require(&#x27;multer&#x27;);</span><br><span class="line">const &#123; mkdirp &#125; = require(&#x27;mkdirp&#x27;);</span><br><span class="line">var sd = require(&#x27;silly-datetime&#x27;);</span><br><span class="line">let tools = &#123;</span><br><span class="line">    multer()&#123;</span><br><span class="line">        const storage = multer.diskStorage(&#123;</span><br><span class="line">            // 配置上传的目录</span><br><span class="line">            destination: async (req, file, cb)=&gt;&#123;</span><br><span class="line">                // 1. 获取当前日期 20200703</span><br><span class="line">                const day = sd.format(new Date(), &#x27;YYYYMMDD&#x27;);</span><br><span class="line">                // 2. 拼接目录：static/upload/20200703</span><br><span class="line">                let dir = path.join(&#x27;static/uploads&#x27;, day);</span><br><span class="line">                // 3. 按照日期生成图片存储目录   mkdirp是一个异步方法  要使用 async 和 await</span><br><span class="line">                await mkdirp(dir);</span><br><span class="line">                // 4. 生成新的文件名</span><br><span class="line">                cb(null, dir)     // 上传之前目录必须存在</span><br><span class="line">            &#125;,</span><br><span class="line">            // 修改上传后的文件名</span><br><span class="line">            filename: function (req, file, cb) &#123;</span><br><span class="line">                // 1. 获取后缀名</span><br><span class="line">                const extname = path.extname(file.originalname);</span><br><span class="line">                // 2. 获取文件名</span><br><span class="line">                const basename = path.basename(file.originalname, extname);</span><br><span class="line">                // 3. 生成新的文件名</span><br><span class="line">                // 原文件名</span><br><span class="line">                cb(null, basename + extname);</span><br><span class="line">                </span><br><span class="line">                // 带日期</span><br><span class="line">                // const day = sd.format(new Date(), &#x27;YYYYMMDD&#x27;);</span><br><span class="line">                // cb(null, basename + &#x27;_&#x27; + day + extname)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        const upload = multer(&#123; storage: storage &#125;)</span><br><span class="line"></span><br><span class="line">        return upload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tools;</span><br></pre></td></tr></table></figure>

<h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><p><code>app.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这里tools.multer() == upload</span><br><span class="line">var cpUpload = tools.multer().fields([</span><br><span class="line">    &#123; name: &#x27;pic1&#x27;, maxCount: 1 &#125;,</span><br><span class="line">    &#123; name: &#x27;pic2&#x27;, maxCount: 1 &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// pic是文件框的name值</span><br><span class="line">app.post(&#x27;/doUpload&#x27;, cpUpload, (req, res) =&gt; &#123;</span><br><span class="line">    // console.log(req.file);</span><br><span class="line">    // res.send(req.file);</span><br><span class="line">    res.send(req.files);   // 多文件上传,要用files</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="上传文件的文件名为中文的处理"><a href="#上传文件的文件名为中文的处理" class="headerlink" title="上传文件的文件名为中文的处理"></a>上传文件的文件名为中文的处理</h4><p><a href="https://blog.csdn.net/samllucky/article/details/126962435">解决multer上传文件乱码 文件上传</a></p>
<p><a href="https://github.com/expressjs/multer#filefilter">fileFilter</a>（Function）——Multer的option</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileFilter(req, file, callback) &#123;</span><br><span class="line">    // 解决中文名乱码的问题 latin1 是一种编码格式</span><br><span class="line">    file.originalname = Buffer.from(file.originalname, &quot;latin1&quot;).toString(&quot;utf8&quot;);</span><br><span class="line">    callback(null, true);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const multer = require(&#x27;multer&#x27;);</span><br><span class="line">const &#123; mkdirp &#125; = require(&#x27;mkdirp&#x27;);</span><br><span class="line">var sd = require(&#x27;silly-datetime&#x27;);</span><br><span class="line">let tools = &#123;</span><br><span class="line">    multer()&#123;</span><br><span class="line">        const storage = multer.diskStorage(&#123;</span><br><span class="line">            // 配置上传的目录</span><br><span class="line">            destination: async (req, file, cb)=&gt;&#123;</span><br><span class="line">                // 1. 获取当前日期 20200703</span><br><span class="line">                const day = sd.format(new Date(), &#x27;YYYYMMDD&#x27;);</span><br><span class="line">                // 2. 拼接目录：static/upload/20200703</span><br><span class="line">                let dir = path.join(&#x27;static/uploads&#x27;, day);</span><br><span class="line">                // 3. 按照日期生成图片存储目录   mkdirp是一个异步方法  要使用 async 和 await</span><br><span class="line">                await mkdirp(dir);</span><br><span class="line">                // 4. 生成新的文件名</span><br><span class="line">                cb(null, dir)     // 上传之前目录必须存在</span><br><span class="line">            &#125;,</span><br><span class="line">            // 修改上传后的文件名</span><br><span class="line">            filename: function (req, file, cb) &#123;</span><br><span class="line">                // // 1. 获取后缀名</span><br><span class="line">                // const extname = path.extname(file.originalname);</span><br><span class="line">                // // 2. 获取文件名</span><br><span class="line">                // const basename = path.basename(file.originalname, extname);</span><br><span class="line">                // 3. 生成新的文件名</span><br><span class="line">                // 原文件名</span><br><span class="line">                // cb(null, decodeURI(file.originalname));</span><br><span class="line">                cb(null, file.originalname);</span><br><span class="line"></span><br><span class="line">                // 带日期</span><br><span class="line">                // const day = sd.format(new Date(), &#x27;YYYYMMDD&#x27;);</span><br><span class="line">                // cb(null, basename + &#x27;_&#x27; + day + extname)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        const upload = multer(&#123;</span><br><span class="line">            fileFilter(req, file, callback) &#123;</span><br><span class="line">                // 解决中文名乱码的问题 latin1 是一种编码格式</span><br><span class="line">                file.originalname = Buffer.from(file.originalname, &quot;latin1&quot;).toString(&quot;utf8&quot;);</span><br><span class="line">                callback(null, true);</span><br><span class="line">            &#125;,</span><br><span class="line">            storage: storage</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">        return upload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = tools;</span><br></pre></td></tr></table></figure>

<h4 id="一个文件选择框进行多选——可以使用upload-array"><a href="#一个文件选择框进行多选——可以使用upload-array" class="headerlink" title="一个文件选择框进行多选——可以使用upload.array()"></a>一个文件选择框进行多选——可以使用<code>upload.array()</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; name=&quot;pic1&quot; multiple&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.post(&#x27;/doUpload&#x27;, upload.array(&#x27;pic1&#x27;, 2), (req, res) =&gt; &#123;</span><br><span class="line">  console.log(req.files);</span><br><span class="line">  res.send(&#x27;Files uploaded successfully.&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="多个文件上传框，每个文件上传框多选的报错处理"><a href="#多个文件上传框，每个文件上传框多选的报错处理" class="headerlink" title="多个文件上传框，每个文件上传框多选的报错处理"></a>多个文件上传框，每个文件上传框多选的报错处理</h4><p>报错信息：<code>MulterError: Unexpected field</code></p>
<p>原来代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// upload.ejs:</span><br><span class="line">&lt;form action=&quot;/doUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;pic1&quot; multiple&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;pic2&quot; multiple&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">// app.js:</span><br><span class="line">var cpUpload = tools.multer().fields([</span><br><span class="line">    &#123; name: &#x27;pic1&#x27;, maxCount: 2 &#125;,</span><br><span class="line">    &#123; name: &#x27;pic2&#x27;, maxCount: 8 &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/doUpload&#x27;, cpUpload, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(req.files);   // 多文件上传,要用files</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在<a href="https://stackoverflow.com/questions/31530200/node-multer-unexpected-field">Node Multer unexpected field</a>中看到以下解答：</p>
<h6 id="2022-2023-Answer"><a href="#2022-2023-Answer" class="headerlink" title="2022-2023 Answer"></a><strong>2022-2023 Answer</strong></h6><p>When using FormData and working with arrays, the multer variable name must also include the ‘<strong>[]</strong>‘, this did not use to be the case.</p>
<p>Old code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multerConfig = upload.<span class="title function_">fields</span>([</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;photos&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">20</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p><strong>2022+</strong> code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multerConfig = upload.<span class="title function_">fields</span>([</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;photos[]&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">20</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>修改后的代码：</p>
<p><code>将name值修改为[]形式，可解决</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; name=&quot;pic1[]&quot; multiple&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;pic2[]&quot; multiple&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var cpUpload = tools.multer().fields([</span><br><span class="line">    &#123; name: &#x27;pic1[]&#x27;, maxCount: 2 &#125;,</span><br><span class="line">    &#123; name: &#x27;pic2[]&#x27;, maxCount: 8 &#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h3 id="mongoose-入门以及mongoose-实现数据的增、删、改、查"><a href="#mongoose-入门以及mongoose-实现数据的增、删、改、查" class="headerlink" title="mongoose 入门以及mongoose 实现数据的增、删、改、查"></a>mongoose 入门以及mongoose 实现数据的增、删、改、查</h3><blockquote>
<p>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具。Mongoose是NodeS的驱动，不能作为其他语言的驱动。</p>
</blockquote>
<p><a href="https://mongoosejs.com/">Mongoose</a>有两个特点：</p>
<p>1、通过关系型数据库的思想来设计非关系型数据库<br>2、基于mongodb驱动，简化操作</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mongoose --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoose.connect(&#x27;mongodb://127.0.0.1:27017/test&#x27;);     // test是数据库名</span><br></pre></td></tr></table></figure>

<p>如果有账户密码需要采用下面的连接方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoose.connect(&#x27;mongodb://admin:123456@127.0.0.1:27017/test&#x27;);   //账号:密码@</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义Schema， <code>字段名称必须要与数据库保持一致</code></p>
<blockquote>
<p>数据库中的Schema，为数据库对象的集合。schema是 mongoose里会用到的一种数据模式,可以理解为表结构的定义;每个schema 会映射到mongodb中的一个collection，它不具备操作数据库的能力</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; Schema &#125; = mongoose;</span><br><span class="line"></span><br><span class="line">var UserSchema = new Schema(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">    age: Number,</span><br><span class="line">    sex: String</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义Model(创建数据模型)</p>
<blockquote>
<p>定义好了Schema，接下就是生成Model。model是由schema生成的模型，可以对数据库的操作。<br>注意：mongoose.model里面可以传入两个参数也可以传入三个参数</p>
</blockquote>
<p>mongoose.model（参数1：模型名称（<code>首字母大写</code>)，参数2：Schema，参数3:数据库集合名称)<br><strong>如果传入2个参数的话：</strong>这个模型会和<code>模型名称相同的复数的数据库建立连接</code>：如通过下面方法创建模型，那么这个模型将会操作users这个集合。<br><strong>如果传入3个参数的话：</strong>模型默认操作第三个参数定义的集合名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var User = mongoose.model(&#x27;User&#x27;, UserSchema);      // 操作users表——User则对应users表</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var User = mongoose.model(&#x27;User&#x27;, UserSchema, &#x27;user&#x27;);  // 操作user表</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User.find(&#123;&#125;, function (err, users) &#123;</span><br><span class="line">       if (err) &#123;</span><br><span class="line">           console.log(err);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           console.log(users);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>报错处理<code>throw new MongooseError(&#39;Model.find() no longer accepts a callback&#39;);</code></p>
<p>因为在Mongoose 6.0版本中，Model.find()方法不再接受回调函数，而是返回一个Promise。如果你在Mongoose 6.0或更高版本中继续使用回调函数调用Model.find()，就会出现这个错误。</p>
<p>修改后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User.find(&#123;&#125;)</span><br><span class="line">    .then((users) =&gt; &#123;</span><br><span class="line">        console.log(users);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加数据（插入数据）</p>
<p><code>Model.save()方法不再接受回调函数</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var user = new User(&#123;</span><br><span class="line">    name: &#x27;张三AAAAAA&#x27;,</span><br><span class="line">    age: 18,</span><br><span class="line">    sex: &#x27;男&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.save()</span><br><span class="line">.then((users) =&gt; &#123;</span><br><span class="line">    console.log(users);</span><br><span class="line">&#125;)</span><br><span class="line">.catch((error) =&gt; &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User.updateOne(&#123;</span><br><span class="line">    name: &#x27;张三AAAAAA&#x27;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">        name: &#x27;张三333&#x27;,</span><br><span class="line">        age: 28,</span><br><span class="line">        sex: &#x27;女&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then((users) =&gt; &#123;</span><br><span class="line">    console.log(users);</span><br><span class="line">&#125;)</span><br><span class="line">.catch((error) =&gt; &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User.deleteOne(&#123;&#x27;_id&#x27;:&#x27;642538f4a1e6c5b49ac14d57&#x27;&#125;) // id直接写字符串就行，mongoose会处理</span><br><span class="line">.then((res) =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch((error) =&gt; &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; acknowledged: true, deletedCount: 1 &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="mongoose默认参数、mongoose模块化、mongoose性能疑问"><a href="#mongoose默认参数、mongoose模块化、mongoose性能疑问" class="headerlink" title="mongoose默认参数、mongoose模块化、mongoose性能疑问"></a>mongoose默认参数、mongoose模块化、mongoose性能疑问</h4><p>mongoose 默认参数：增加数据的时候，如果不传入数据会使用默认配置的数据</p>
<p>mongoose 预定义模式修饰符<code>Getters</code>与 <code>Setters</code>修饰符</p>
<p><a href="https://www.bilibili.com/video/av38925557">https://www.bilibili.com/video/av38925557</a></p>
<p><a href="https://www.bilibili.com/video/av41033371">https://www.bilibili.com/video/av41033371</a></p>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>mongodb</tag>
        <tag>node.js</tag>
        <tag>mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue状态管理库-Pinia</title>
    <url>/2022/06/17/Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93-Pinia/</url>
    <content><![CDATA[<p><a href="https://pinia.vuejs.org/">Pinia-官网</a></p>
<p><a href="https://stackblitz.com/github/piniajs/example-vue-3-vite?file=index.html">Pinia-Demo</a></p>
<h4 id="pinia2入门使用"><a href="#pinia2入门使用" class="headerlink" title="pinia2入门使用"></a><a href="https://www.jianshu.com/p/d42b9c57cbac">pinia2入门使用</a></h4>]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-移动端-疫情实时数据-项目笔记</title>
    <url>/2022/08/01/Vue3-%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E7%96%AB%E6%83%85%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE-%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><code>备注：</code> 对应项目vue3-vite-yiqing  【移动端——展示疫情实时数】</p>
<p><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">Vite官网</a></p>
<p>优点：使用vite创建的项目，运行比webpack创建的要快</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue3-vite-yiqing</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue3-vite-yiqing</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>VSCode中安装Vetur插件</p>
<h4 id="安装less"><a href="#安装less" class="headerlink" title="安装less"></a>安装less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i less less-loader -D</span><br></pre></td></tr></table></figure>

<h4 id="在main-ts中引入reset-less"><a href="#在main-ts中引入reset-less" class="headerlink" title="在main.ts中引入reset.less"></a>在main.ts中引入reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./assets/css/reset.less&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="reset-less"><a href="#reset-less" class="headerlink" title="reset.less"></a>reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* http://meyerweb.com/eric/tools/css/reset/ </span><br><span class="line">   v2.0 | 20110126</span><br><span class="line">   License: none (public domain)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed, </span><br><span class="line">figure, figcaption, footer, header, hgroup, </span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	border: 0;</span><br><span class="line">	// font-size: 100%;</span><br><span class="line">	// font: inherit;</span><br><span class="line">	vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure, </span><br><span class="line">footer, header, hgroup, menu, nav, section &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">	line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">ol, ul &#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote, q &#123;</span><br><span class="line">	quotes: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: &#x27;&#x27;;</span><br><span class="line">	content: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">	border-spacing: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="设置根节点font-size值，使用rem适配"><a href="#设置根节点font-size值，使用rem适配" class="headerlink" title="设置根节点font-size值，使用rem适配"></a>设置根节点font-size值，使用rem适配</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:root&#123;</span><br><span class="line"> font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样设置之后1px = 1rem</p>
</blockquote>
<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  display: flex;</span><br><span class="line">  place-items: center;</span><br><span class="line">  min-width: 320px;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置手机可访问本地电脑项目"><a href="#配置手机可访问本地电脑项目" class="headerlink" title="配置手机可访问本地电脑项目"></a>配置手机可访问本地电脑项目</h4><p><a href="http://www.manongjc.com/detail/29-saiyfskdbsqqcmz.html">Vite 使用本地ip+localhost访问服务</a></p>
<p>使用vite新建的项目默认访问链接：<a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>
<ol>
<li><p>修改<code>vite.config.js</code>文件，添加<code>server</code>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;		// 处理使用本地ip访问页面</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>若使用手机访问本地ip页面，访问不成功（显示“服务器已停用”）。即要将本地电脑的防火墙“关闭”即可。<a href="https://blog.csdn.net/zoepriselife316/article/details/117957732">手机和电脑连接同一wifi,手机访问不了电脑起的项目</a></p>
<p>电脑的“设置”——“网络和共享中心”——“Windows Defender 防火墙”（左下角）——“启用或关闭Windows Defender 防火墙”（左侧）——选择“关闭”（专用网络和公用网络都关闭）</p>
<p>注意：使用完，最好重新“启用”防火墙。</p>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/dd26cae7d7b2">vite.config.js之resolve.alias配置</a></p>
<h4 id="axios请求数据"><a href="#axios请求数据" class="headerlink" title="axios请求数据"></a>axios请求数据</h4><p>vue3中在onMounted生命周期中发出请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i axios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">    axios(&#x27;https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="跨域请求处理"><a href="#跨域请求处理" class="headerlink" title="跨域请求处理"></a>跨域请求处理</h4><p>修改<code>vite.config.ts</code>文件，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    // hmr: true,  // 开启热更新</span><br><span class="line">   proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;https://c.m.163.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>vite.config.ts</code>修改后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;https://c.m.163.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：修改配置文件后，要重启项目。(在vite搭建的项目，不需要重启)</p>
<h5 id="修改请求链接"><a href="#修改请求链接" class="headerlink" title="修改请求链接"></a>修改请求链接</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="对接口获取到的数据对象使用TS进行数据类型约束"><a href="#对接口获取到的数据对象使用TS进行数据类型约束" class="headerlink" title="对接口获取到的数据对象使用TS进行数据类型约束"></a>对接口获取到的数据对象使用TS进行数据类型约束</h4><ol>
<li><p>使用泛型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">	name: string;</span><br><span class="line">	type: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = reactive&lt;IData&gt;&#123;</span><br><span class="line">	name: &#x27;winney&#x27;,</span><br><span class="line">	type: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>企业级开发模式常用</p>
</li>
</ol>
<h4 id="接口返回字段："><a href="#接口返回字段：" class="headerlink" title="接口返回字段："></a>接口返回字段：</h4><ul>
<li>input:境外输入</li>
<li>noSymptom:无症状感染者</li>
<li>incrNoSymptom:新增</li>
<li>confirm:确诊</li>
<li>dead:死亡</li>
<li>heal:治愈</li>
<li>现有确诊数=累计确诊数-累计死亡数-累计治愈数</li>
<li>confirm-dead-heal</li>
</ul>
<p>总数：total</p>
<p>较昨日：today</p>
<h2 id="JS的实现"><a href="#JS的实现" class="headerlink" title="JS的实现"></a>JS的实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const data = reactive(&#123;</span><br><span class="line">    name: &quot;winney&quot;,</span><br><span class="line">    areaTree: [],</span><br><span class="line">    chinaDayList: [],</span><br><span class="line">    chinaTotal: &#123;&#125;,</span><br><span class="line">    china: [],</span><br><span class="line">    hbData: &#123;&#125;,</span><br><span class="line">    type: 1,</span><br><span class="line">    mapType: 1,</span><br><span class="line">    lineType: 1,</span><br><span class="line">    lastUpdateTime:&quot;&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>为了避免使用数据时，每次都写<code>data.</code> , 对数据进行解构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; chinaTotal &#125; = toRefs(data);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt; &lt;strong class=&quot;red&quot;&gt;&#123;&#123;chinaTotal.total.input&#125;&#125;&lt;/strong&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>直接使用会报错：</p>
<p>原因，异步请求是在组件onMounted之后的。 在第一次渲染的时候，当时还没有chinaTotal的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;tab-content&quot; v-if=&quot;chinaTotal.total&quot;&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Tab切换模块的功能"><a href="#Tab切换模块的功能" class="headerlink" title="Tab切换模块的功能"></a>Tab切换模块的功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取中国的数据</span><br><span class="line">data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">// 获取湖北的数据</span><br><span class="line">data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; chinaTotal, hbData &#125; = toRefs(data);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;tab-box&quot; v-if=&quot;chinaTotal.total&quot;&gt;  // 判断放在父盒子，做一次判断</span><br><span class="line"> 	</span><br><span class="line"> 	 &lt;!-- 全国疫情数据 --&gt;</span><br><span class="line"> 	 &lt;ul class=&quot;tab-content&quot; v-show=&quot;type=== 1&quot;&gt;</span><br><span class="line"> 	  &lt;!-- 湖北的数据 --&gt;</span><br><span class="line"> 	  &lt;ul class=&quot;tab-content&quot; v-show=&quot;type=== 2&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="tab切换事件"><a href="#tab切换事件" class="headerlink" title="tab切换事件"></a>tab切换事件</h4><p>动态绑定class的方法 <code>:class=&quot;&#123;active: type === 1&#125;&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;tab-btn&quot; @click=&quot;tabChange(1)&quot; :class=&quot;&#123;active: type === 1&#125;&quot;&gt;全国疫情数据(含港澳台)&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;tab-btn&quot; @click=&quot;tabChange(2)&quot; :class=&quot;&#123;active: type === 2&#125;&quot;&gt;湖北疫情数据&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const tabChange = (type: number) =&gt; &#123;</span><br><span class="line">    data.type = type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="TS的实现"><a href="#TS的实现" class="headerlink" title="TS的实现"></a>TS的实现</h2><p>不把跟业务无关的代码写在vue文件中</p>
<p>在src目录中新建一个type目录，存放所有的type</p>
<h4 id="1-src-type-index-ts"><a href="#1-src-type-index-ts" class="headerlink" title="1. src/type/index.ts"></a>1. <code>src/type/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    type: number;</span><br><span class="line">&#125;</span><br><span class="line">// 导出的时候要使用type,而不是普通对象</span><br><span class="line">export type&#123;</span><br><span class="line">    IData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../../type/index&quot;</span><br></pre></td></tr></table></figure>

<p>在src中新建pageJs目录，用于存放所有页面的逻辑js</p>
<h4 id="1-pageJs-index-ts"><a href="#1-pageJs-index-ts" class="headerlink" title="1. pageJs/index.ts"></a>1. <code>pageJs/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br></pre></td></tr></table></figure>



<h4 id="2-src-type-index-ts"><a href="#2-src-type-index-ts" class="headerlink" title="2. src/type/index.ts"></a>2. <code>src/type/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">    name: string,</span><br><span class="line">    areaTree: any[],</span><br><span class="line">    chinaDayList: any[],</span><br><span class="line">    chinaTotal: any[],</span><br><span class="line">    china: any[],  // 中国的数据</span><br><span class="line">    hbData: Object, // 湖北的数据</span><br><span class="line">    type: number,</span><br><span class="line">    mapType: number,</span><br><span class="line">    lineType: number,</span><br><span class="line">    lastUpdateTime:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export type&#123;</span><br><span class="line">    IData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VSCode中TS实现接口的快捷方式：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/vue3-vite-%E7%96%AB%E6%83%85/Snipaste_2022-08-01_16-49-24.png" alt="VSCode中ts实现接口"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/vue3-vite-%E7%96%AB%E6%83%85/Snipaste_2022-08-01_16-50-16.png" alt="VScode中ts接口实现"></p>
<h4 id="2-pageJs-index-ts"><a href="#2-pageJs-index-ts" class="headerlink" title="2. pageJs/index.ts"></a>2. <code>pageJs/index.ts</code></h4><p>优点：可重复使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br><span class="line"></span><br><span class="line">class InteData implements IData &#123;</span><br><span class="line">    name: string =&quot;&quot;</span><br><span class="line">    areaTree: any[] = []</span><br><span class="line">    chinaDayList: any[] = []</span><br><span class="line">    chinaTotal: any[] = []</span><br><span class="line">    china: any[]= []</span><br><span class="line">    hbData: Object = &#123;&#125;</span><br><span class="line">    type: number = 1</span><br><span class="line">    mapType: number = 1</span><br><span class="line">    lineType: number = 1</span><br><span class="line">    lastUpdateTime: string =&quot;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    InteData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-页面中使用"><a href="#3-页面中使用" class="headerlink" title="3.页面中使用"></a>3.页面中使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; InteData &#125; from &#x27;../../pageJs/index&#x27;</span><br><span class="line"> </span><br><span class="line">const data = reactive(new InteData())</span><br></pre></td></tr></table></figure>

<h4 id="4-请求数据方法封装"><a href="#4-请求数据方法封装" class="headerlink" title="4.请求数据方法封装"></a>4.请求数据方法封装</h4><p>注：setup函数中是不支持异步的</p>
<h5 id="4-1-pageJs-index-ts"><a href="#4-1-pageJs-index-ts" class="headerlink" title="4.1  pageJs/index.ts"></a>4.1  <code>pageJs/index.ts</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br><span class="line"></span><br><span class="line">class InteData implements IData &#123;</span><br><span class="line">    name: string =&quot;&quot;</span><br><span class="line">    areaTree: any[] = []</span><br><span class="line">    chinaDayList: any[] = []</span><br><span class="line">    chinaTotal: any[] = []</span><br><span class="line">    china: any[]= []</span><br><span class="line">    hbData: Object = &#123;&#125;</span><br><span class="line">    type: number = 1</span><br><span class="line">    mapType: number = 1</span><br><span class="line">    lineType: number = 1</span><br><span class="line">    lastUpdateTime: string =&quot;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line"></span><br><span class="line">        // 获取中国的数据</span><br><span class="line">        data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">        // 获取湖北的数据</span><br><span class="line">        data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    InteData,</span><br><span class="line">    initDataFun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-页面中使用"><a href="#4-2-页面中使用" class="headerlink" title="4.2 页面中使用"></a>4.2 页面中使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; InteData, initDataFun &#125; from &#x27;../../pageJs/index&#x27;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    initDataFun(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Echarts的使用"><a href="#Echarts的使用" class="headerlink" title="Echarts的使用"></a><a href="https://echarts.apache.org/zh/index.html">Echarts</a>的使用</h2><p><a href="https://echarts.apache.org/examples/zh/editor.html?c=map-HK">地图图表</a></p>
<p><a href="https://echarts.apache.org/handbook/zh/basics/import">在项目中引入 Apache ECharts</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i echarts --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 地图 --&gt;</span><br><span class="line">&lt;div class=&quot;map-box&quot;&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">        :class=&quot;mapType === 1 ? &#x27;to-left&#x27; : &#x27;to-right&#x27;&quot;</span><br><span class="line">        id=&quot;map&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">        :class=&quot;mapType === 1 ? &#x27;to-left&#x27; : &#x27;to-right&#x27;&quot;</span><br><span class="line">        id=&quot;map2&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-pageJs-index-ts-1"><a href="#2-pageJs-index-ts-1" class="headerlink" title="2.pageJs/index.ts"></a>2.<code>pageJs/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line"></span><br><span class="line">type EChartsOption = echarts.EChartsOption;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    var mapDom = document.getElementById(&#x27;map&#x27;)!;</span><br><span class="line">    var mapDom2 = document.getElementById(&#x27;map2&#x27;)!;</span><br><span class="line"></span><br><span class="line">    var optionMap: EChartsOption = &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            subtext: &#x27;单击省份可查看病例数&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123; // 提示框</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">            formatter: &#x27;现有确诊病例&lt;br/&gt;&#123;b&#125;: &#123;c&#125;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        visualMap:&#123;</span><br><span class="line">            show:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var myMap = echarts.init(mapDom);</span><br><span class="line">    var myMap2 = echarts.init(mapDom2);</span><br><span class="line">    myMap.showLoading();</span><br><span class="line">    myMap2.showLoading();</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上自带的loading</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myMap = echarts.init(mapDom);</span><br><span class="line">var myMap2 = echarts.init(mapDom2);</span><br><span class="line">myMap.showLoading();</span><br><span class="line">myMap2.showLoading();</span><br></pre></td></tr></table></figure>

<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 地图数据</span><br><span class="line">let mapData:any[] = []</span><br><span class="line">data.china.map((v:any) =&gt; &#123;</span><br><span class="line">    mapData.push(&#123;</span><br><span class="line">        name: v.name,</span><br><span class="line">        value: v.total.confirm - v.total.dead - v.total.heal || 0,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-1-完整代码"><a href="#2-1-完整代码" class="headerlink" title="2.1.完整代码"></a>2.1.完整代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    var mapDom = document.getElementById(&#x27;map&#x27;)!;</span><br><span class="line">    var mapDom2 = document.getElementById(&#x27;map2&#x27;)!;</span><br><span class="line"></span><br><span class="line">    var optionMap: EChartsOption = &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            subtext: &#x27;单击省份可查看病例数&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123; // 提示框</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">            formatter: &#x27;现有确诊病例&lt;br/&gt;&#123;b&#125;: &#123;c&#125;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        visualMap:&#123;</span><br><span class="line">            show:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将重复的配置抽出来</span><br><span class="line">    var series = &#123;</span><br><span class="line">        type: &quot;map&quot;,</span><br><span class="line">        map: &quot;china&quot;,</span><br><span class="line">        colorBy: &quot;series&quot;,</span><br><span class="line">        zoom: 1.3,</span><br><span class="line">        top: 80,</span><br><span class="line">        label:&#123;</span><br><span class="line">            show: true,</span><br><span class="line">            color: &quot;#333&quot;,</span><br><span class="line">            fontSize: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var myMap = echarts.init(mapDom);</span><br><span class="line">    var myMap2 = echarts.init(mapDom2);</span><br><span class="line">    myMap.showLoading();</span><br><span class="line">    myMap2.showLoading();</span><br><span class="line"></span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line"></span><br><span class="line">        // 获取中国的数据</span><br><span class="line">        data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">        // 获取湖北的数据</span><br><span class="line">        data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br><span class="line"></span><br><span class="line">        // 地图数据</span><br><span class="line">        let mapData:any[] = []</span><br><span class="line">        data.china.map((v:any) =&gt; &#123;</span><br><span class="line">            mapData.push(&#123;</span><br><span class="line">                name: v.name,</span><br><span class="line">                value: v.total.confirm - v.total.dead - v.total.heal || 0,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        myMap.hideLoading();</span><br><span class="line">        myMap.setOption(&#123;</span><br><span class="line">            ...optionMap, </span><br><span class="line">            series:&#123;</span><br><span class="line">                ...series, </span><br><span class="line">                data: mapData,   // 数据源</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-引入china-json文件"><a href="#3-引入china-json文件" class="headerlink" title="3.引入china.json文件"></a>3.引入china.json文件</h4><p><a href="https://blog.csdn.net/seeeeeeeeeee/article/details/121495485?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-4-121495485-null-null.pc_agg_new_rank&utm_term=china.json%20geojson&spm=1000.2123.3001.4430">【echarts 中国地图】vue实现中国地图，省份居中china.json文件下载</a></p>
<p>在pageJs/index.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import chinaJson from &#x27;../assets/china.json&#x27;;</span><br><span class="line"></span><br><span class="line">echarts.registerMap(&quot;china&quot;, (chinaJson as any))</span><br></pre></td></tr></table></figure>

<h2 id="List组件封装"><a href="#List组件封装" class="headerlink" title="List组件封装"></a>List组件封装</h2><h4 id="子组件List组件："><a href="#子组件List组件：" class="headerlink" title="子组件List组件："></a>子组件List组件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        数据列表组件</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    msg: String,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(props.list)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="重点1：处理初始化会报错问题-判断是否渲染子组件"><a href="#重点1：处理初始化会报错问题-判断是否渲染子组件" class="headerlink" title="重点1：处理初始化会报错问题-判断是否渲染子组件"></a>重点1：处理初始化会报错问题-判断是否渲染子组件</h4><p>子组件的setup会在父组件的onMounted之前执行，所以传参的时候，要进行判断，是否渲染子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import List from &#x27;../../components/situation/List.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;List v-if=&quot;china.length &gt; 0&quot; :list=&quot;china&quot; :msg=&quot;&#x27;中国疫情&#x27;&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="动态数据传值"><a href="#动态数据传值" class="headerlink" title="动态数据传值"></a>动态数据传值</h4><p>动态数据，这样写会报错：<code>:msg=&quot;中国疫情&quot;</code></p>
<p>要加上引号：<code>:msg=&quot;&#39;中国疫情&#39;&quot;</code></p>
<h4 id="props里面的数据无需解构，可以直接使用"><a href="#props里面的数据无需解构，可以直接使用" class="headerlink" title="props里面的数据无需解构，可以直接使用"></a>props里面的数据无需解构，可以直接使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    msg: String,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#123;&#123;list&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件自调用——递归"><a href="#组件自调用——递归" class="headerlink" title="组件自调用——递归"></a>组件自调用——递归</h4><h4 id="重点2：组件自调用，要写上name值"><a href="#重点2：组件自调用，要写上name值" class="headerlink" title="重点2：组件自调用，要写上name值"></a>重点2：组件自调用，要写上name值</h4><p><code>List.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup name=&quot;List&quot; lang=&#x27;ts&#x27;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;list-box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;info-title info&quot;&gt;</span><br><span class="line">            &lt;p&gt;地区&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;现有确诊&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;确诊&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;死亡&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;治愈&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;list&quot; v-for=&quot;i in list&quot; :key=&quot;i.id&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;p-box&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info&quot; @click=&quot;getShowChildren(i.id)&quot;&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.confirm - i.today.dead - i.today.heal&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &lt;span&gt;&#123;&#123;i.total.confirm&#125;&#125;&lt;/span&gt;</span><br><span class="line">                        &lt;span&gt;较昨日&#123;&#123;i.today.confirm&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.dead&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.heal&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                  &lt;!-- 世界数据不展示children --&gt;</span><br><span class="line">                &lt;div v-if=&quot;showChildren&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;children&quot; v-show=&quot;data.isShowChildren == i.id&quot;&gt;</span><br><span class="line">                        &lt;List :list=&quot;i.children&quot;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="重点3：定义子组件接收的属性"><a href="#重点3：定义子组件接收的属性" class="headerlink" title="重点3：定义子组件接收的属性"></a>重点3：定义子组件接收的属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup name=&quot;List&quot; lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    showChildren: Boolean  // 是否显示children数据 （中国病例显示，世界病例不显示—）</span><br><span class="line">&#125;)</span><br><span class="line">console.log(props.list)</span><br><span class="line"></span><br><span class="line">const data = reactive(&#123;</span><br><span class="line">    isShowChildren: &quot;&quot;    // 是否有children</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const getShowChildren = (id: string) =&gt; &#123;</span><br><span class="line">    data.isShowChildren == id</span><br><span class="line">    ? (data.isShowChildren = &quot;&quot;)</span><br><span class="line">    : (data.isShowChildren = id)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="文字溢出不换行显示"><a href="#文字溢出不换行显示" class="headerlink" title="文字溢出不换行显示"></a>文字溢出不换行显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>



<h3 id="懒加载——下拉刷新上拉加载"><a href="#懒加载——下拉刷新上拉加载" class="headerlink" title="懒加载——下拉刷新上拉加载"></a>懒加载——下拉刷新上拉加载</h3><p>国际病例数据较多——使用懒加载方式。</p>
<h4 id="上拉加载下拉刷新的组件-ScrollCom"><a href="#上拉加载下拉刷新的组件-ScrollCom" class="headerlink" title="上拉加载下拉刷新的组件-ScrollCom"></a>上拉加载下拉刷新的组件-ScrollCom</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;!-- ref=&quot;scrollEl&quot; 这里scrollEl 不是一个变量，是字符串--&gt;</span><br><span class="line">        &lt;!-- :ref=&quot;scrollEl&quot; 这里scrollEl 是一个变量--&gt;</span><br><span class="line">        &lt;!-- ref不会被渲染到DOM元素上去， 是一个内部属性，</span><br><span class="line">            用于与data中的属性进行绑定，如果在data中找到了对应名称的响应式的key值(属性)时,</span><br><span class="line">            当这个元素渲染完之后，会把这个元素的指针给到data中与之相同的key值的对象上去--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定滚动事件：@scroll --&gt;</span><br><span class="line">        &lt;div </span><br><span class="line">            @scroll=&quot;scrollEvent&quot;</span><br><span class="line">            ref=&quot;scrollEl&quot; </span><br><span class="line">            class=&quot;scrollEl&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchstartTitleShow&quot;&gt;释放可刷新...&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchendTitleShow&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">            &lt;!-- 插槽——————这个组件可以被多个组件使用 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;div v-if=&quot;!isScroll&quot; class=&quot;&quot;&gt;&#123;&#123;endText&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    distance: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    isScroll: Boolean,</span><br><span class="line">    endText: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;没有更多了&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> const $emit = defineEmits([&#x27;getList&#x27;])</span><br><span class="line"></span><br><span class="line">const data = reactive(&#123;</span><br><span class="line">    scrollEl: null,   // 用来装实例对象，  用于ref获取元素对象</span><br><span class="line">    startText: &quot;释放可刷新&quot;,</span><br><span class="line">    scrollTop: 0,</span><br><span class="line">    scrollY: 0,</span><br><span class="line">    translateY: 0,</span><br><span class="line">    touchstartTitleShow: false, // 控制手指按下屏幕的title显示</span><br><span class="line">    touchendTitleShow: false,   // 控制手指离开屏幕的title显示</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let &#123; </span><br><span class="line">    scrollEl,</span><br><span class="line">    startText,</span><br><span class="line">    scrollTop,</span><br><span class="line">    scrollY,</span><br><span class="line">    translateY,</span><br><span class="line">    touchstartTitleShow,</span><br><span class="line">    touchendTitleShow,</span><br><span class="line"> &#125; = toRefs(data);</span><br><span class="line"></span><br><span class="line">// 滚动事件</span><br><span class="line"> const scrollEvent = (e:any) =&gt;&#123;</span><br><span class="line">    data.scrollTop = e.srcElement.scrollTop;</span><br><span class="line">    if(!props.isScroll) return;</span><br><span class="line">    if(</span><br><span class="line">        data.scrollTop + e.srcElement.offsetHeight &gt; </span><br><span class="line">        e.srcElement.scrollHeight - props.distance</span><br><span class="line">    )&#123;</span><br><span class="line">        // 获取下一页的数据————子组件给父组件传值</span><br><span class="line">        $emit(&#x27;getList&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="使用ScrollCom"><a href="#使用ScrollCom" class="headerlink" title="使用ScrollCom"></a>使用ScrollCom</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScrollCom </span><br><span class="line">    :distance=&quot;100&quot;</span><br><span class="line">    :isScroll=&quot;true&quot;</span><br><span class="line">    @getList=&quot;getList&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;List </span><br><span class="line">    	v-if=&quot;areaTree.length &gt; 0&quot;</span><br><span class="line">    	:showChildren=&quot;false&quot; </span><br><span class="line">    	:list=&quot;areaTree&quot; </span><br><span class="line">    	:msg=&quot;&#x27;世界疫情&#x27;&quot;/&gt;</span><br><span class="line">&lt;/ScrollCom&gt;</span><br></pre></td></tr></table></figure>

<h4 id="对分页加载的数据进行拆解"><a href="#对分页加载的数据进行拆解" class="headerlink" title="对分页加载的数据进行拆解"></a>对分页加载的数据进行拆解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const getPageList = (list:any[]) =&gt; &#123;</span><br><span class="line">    const arr:Array&lt;any[]&gt;[] = [];  // 二维数组</span><br><span class="line">    for(let index = 0; index &lt; list.length; index += 30)&#123;</span><br><span class="line">        arr.push(list.slice(index, index + 30))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对分页加载的数据进行拆解</span><br><span class="line">// 结构 如：[[1-30][31-60]....] 1-30条数据为第一页，31到60为第二页</span><br><span class="line">data.areaTree = getPageList(resData.areaTree);</span><br><span class="line">data.showList = data.areaTree[0];    // 第一页数据</span><br></pre></td></tr></table></figure>

<p>第一页数据：<code>:list=&quot;showList&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScrollCom </span><br><span class="line">    :distance=&quot;100&quot;</span><br><span class="line">    :isScroll=&quot;true&quot;</span><br><span class="line">    @getList=&quot;getList&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;List v-if=&quot;showList.length &gt; 0&quot; :showChildren=&quot;false&quot; :list=&quot;showList&quot; :msg=&quot;&#x27;世界疫情&#x27;&quot;/&gt;</span><br><span class="line">&lt;/ScrollCom&gt;</span><br></pre></td></tr></table></figure>

<h5 id="处理上拉加载报错："><a href="#处理上拉加载报错：" class="headerlink" title="处理上拉加载报错："></a>处理上拉加载报错：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: data.areaTree[page] is not iterable (cannot read property undefined)</span><br></pre></td></tr></table></figure>

<p>原因：页数等于数据长度仍去获取数据； 解决：页数等于数据长度，就显示“没有更多”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(page === data.areaTree.length - 1) &#123;</span><br><span class="line">    data.isScroll = false;  // 不可下拉加载数据</span><br><span class="line">    return;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><ul>
<li>touchstart</li>
<li>touchmove</li>
<li>touchend</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div </span><br><span class="line">    @scroll=&quot;scrollEvent&quot;</span><br><span class="line">    @touchstart=&quot;touchstart&quot;</span><br><span class="line">    @touchmove=&quot;touchmove&quot;</span><br><span class="line">    @touchend=&quot;touchend&quot;</span><br><span class="line">    ref=&quot;scrollEl&quot; </span><br><span class="line">    :style=&quot;&#123;top: `$&#123;translateY&#125;px`&#125;&quot;</span><br><span class="line">    class=&quot;scroll-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchstartTitleShow&quot;&gt;释放可刷新...&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchendTitleShow&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">    &lt;!-- 插槽——————这个组件可以被多个组件使用 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;div v-if=&quot;!isScroll&quot; class=&quot;end-text&quot;&gt;&#123;&#123;endText&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 手指触碰到屏幕</span><br><span class="line"> const touchstart = (e:any) =&gt; &#123;</span><br><span class="line">    console.log(e.targetTouches[0])</span><br><span class="line">    let y = e.targetTouches[0].pageY;</span><br><span class="line">    data.startY = y;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// 手指开始滑动</span><br><span class="line">const touchmove = (e:any) =&gt; &#123;</span><br><span class="line">    let y = e.targetTouches[0].pageY;</span><br><span class="line">    if(y &gt; data.startY &amp;&amp; data.scrollTop ==0) &#123;</span><br><span class="line">        data.touchstartTitleShow = true;</span><br><span class="line">        // 如果当前移动距离大于初始点击坐标，则视为下拉，并且要处于顶部</span><br><span class="line">        data.translateY = (y - data.startY) / 2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        data.touchstartTitleShow = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 手指松开</span><br><span class="line">const touchend = (e:any) =&gt; &#123;</span><br><span class="line">    let y = e.changedTouches[0].pageY;</span><br><span class="line">    if(y &gt; data.startY) &#123;</span><br><span class="line">        data.translateY = 0;</span><br><span class="line">        data.touchstartTitleShow = false;</span><br><span class="line">        data.touchendTitleShow = true;</span><br><span class="line">        $emit(&#x27;refreshFun&#x27;, () =&gt; &#123;</span><br><span class="line">            // 更新完数据的回调</span><br><span class="line">            data.touchendTitleShow = false;</span><br><span class="line">        &#125;)</span><br><span class="line">        data.startY = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const $emit = defineEmits([&#x27;getList&#x27;,&#x27;refreshFun&#x27;])</span><br></pre></td></tr></table></figure>

<h4 id="下拉刷新方法及回调处理"><a href="#下拉刷新方法及回调处理" class="headerlink" title="下拉刷新方法及回调处理"></a>下拉刷新方法及回调处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下拉刷新方法及 回调处理</span><br><span class="line">const refreshFun = (fun:Function) =&gt;&#123;</span><br><span class="line">    // 注：要将initDataFun改为promise函数  即使用async await</span><br><span class="line">    </span><br><span class="line">    initDataFun(data).then(() =&gt; &#123;</span><br><span class="line">        page = 0;</span><br><span class="line">        data.isScroll = true;</span><br><span class="line">        fun();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：要将initDataFun函数改为返回promise</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initDataFun = async (data:InteData) =&gt; &#123;</span><br><span class="line">	....</span><br><span class="line">	let res = await axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下拉的空白区域的宽度"><a href="#下拉的空白区域的宽度" class="headerlink" title="下拉的空白区域的宽度"></a>下拉的空白区域的宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:style=&quot;&#123;top: `$&#123;translateY&#125;px`&#125;&quot;</span><br></pre></td></tr></table></figure>



<h4 id="折线图，y轴上的刻度数据被挡住，使用以下方法调整样式"><a href="#折线图，y轴上的刻度数据被挡住，使用以下方法调整样式" class="headerlink" title="折线图，y轴上的刻度数据被挡住，使用以下方法调整样式"></a>折线图，y轴上的刻度数据被挡住，使用以下方法调整样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">    axisLabel:&#123;</span><br><span class="line">      margin: -20,  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><p><a href="https://blog.csdn.net/qq_37656005/article/details/119818759">关于vue3.0 + vite + ts 打包的坑</a></p>
<p><a href="https://www.modb.pro/db/114083">记一次 vue-tsc 引起的错误</a></p>
<p>打包报错：</p>
<p>将package.json的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vite build&quot;,</span><br></pre></td></tr></table></figure>

<h5 id="vue3-0-vite-ts项目搭建-分环境打包-四"><a href="#vue3-0-vite-ts项目搭建-分环境打包-四" class="headerlink" title="vue3.0+vite+ts项目搭建-分环境打包(四)"></a><a href="https://www.shuzhiduo.com/A/nAJvZxqGJr/">vue3.0+vite+ts项目搭建-分环境打包(四)</a></h5><p><a href="https://rollupjs.org/guide/en/#outputmanualchunks">rollup.js</a></p>
<p><a href="https://blog.csdn.net/weixin_45536484/article/details/120041748">ECharts y轴（yAxis）</a></p>
<p>备注：完整代码在<code>Gitee</code>中<code> Vue3_demo/vue3-vite-yiqing</code></p>
<p>备注：获取疫情数据的接口：<a href="https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809">https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1620882">解决vue本地环境跨域请求正常，版本打包后跨域代理不起作用，请求不到数据的方法</a></p>
<p><a href="https://www.qb5200.com/article/164553.html">vue项目打包后请求地址错误/打包后跨域操作</a></p>
<p><a href="https://blog.csdn.net/weixin_43110440/article/details/124882324"><strong>vite 打包后本地不能访问</strong></a></p>
<p><a href="https://www.it610.com/article/1506847191577198592.htm">vue3+vite项目配置axios及跨域</a></p>
<h4 id="VITE-VUE3-跨域环境变量配置"><a href="#VITE-VUE3-跨域环境变量配置" class="headerlink" title="VITE+VUE3 跨域环境变量配置"></a><a href="https://blog.csdn.net/xm2395939/article/details/125140690?app_version=5.7.0&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125140690%22,%22source%22:%22winney07%22%7D&ctrtid=shInB&utm_source=app">VITE+VUE3 跨域环境变量配置</a></h4><p><a href="https://blog.csdn.net/lsjweiyi/article/details/124645896">神坑——后端允许了跨域但是前端（vue3+vite+axios）仍然提示跨域</a></p>
<h4 id="axios封装请求"><a href="#axios封装请求" class="headerlink" title="axios封装请求"></a><a href="https://www.it610.com/article/1506847191577198592.htm">axios封装请求</a></h4><h4 id="使用vite如何配置跨域，以及环境配置"><a href="#使用vite如何配置跨域，以及环境配置" class="headerlink" title="使用vite如何配置跨域，以及环境配置"></a><a href="https://blog.csdn.net/jch923798729/article/details/123658250">使用vite如何配置跨域，以及环境配置</a></h4><p><a href="https://blog.csdn.net/m0_62152730/article/details/125082425">vue部署Linux上 跨域问题</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var http = axios.create(&#123;</span><br><span class="line">  timeout: 1000 * 20,</span><br><span class="line">  baseURL: import.meta.env.DEV? &#x27;&#x27;: import.meta.env.VITE_BASE_URL</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">  port: 4000, // 设置服务启动端口号</span><br><span class="line">  open: true, // 设置服务启动时是否自动打开浏览器</span><br><span class="line">  cors: true, // 允许跨域</span><br><span class="line"></span><br><span class="line">  // 设置代理，根据我们项目实际情况配置</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#x27;/api&#x27;: &#123;</span><br><span class="line">      target: env.VITE_BASE_URL, // 环境变量</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      secure: false,</span><br><span class="line">      rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/m0_62152730?type=blog">https://blog.csdn.net/m0_62152730?type=blog</a></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目设置每个页面的title</title>
    <url>/2020/03/19/Vue%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84title/</url>
    <content><![CDATA[<h5 id="1、在项目目录下安装vue-wechat-title"><a href="#1、在项目目录下安装vue-wechat-title" class="headerlink" title="1、在项目目录下安装vue-wechat-title"></a>1、在项目目录下安装vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vue-wechat-title --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="2、在main-js中-使用vue-wechat-title"><a href="#2、在main-js中-使用vue-wechat-title" class="headerlink" title="2、在main.js中 使用vue-wechat-title"></a>2、在main.js中 使用vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(require(&#x27;vue-wechat-title&#x27;))     //实例化参数</span><br></pre></td></tr></table></figure>
<h5 id="3、在router的配置中设置"><a href="#3、在router的配置中设置" class="headerlink" title="3、在router的配置中设置"></a>3、在router的配置中设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      path: &#x27;/home&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: &#x27;主页&#x27;       //页面标题</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h5 id="4、在每个vue页面中加入-lt-div-v-wechat-title-quot-route-meta-title-quot-gt-lt-div-gt"><a href="#4、在每个vue页面中加入-lt-div-v-wechat-title-quot-route-meta-title-quot-gt-lt-div-gt" class="headerlink" title="4、在每个vue页面中加入 &lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;"></a>4、在每个vue页面中加入 <code>&lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;content content-box&quot;&gt;</span><br><span class="line">      &lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>


<h6 id="【参考】：-vue项目设置每个页面的title"><a href="#【参考】：-vue项目设置每个页面的title" class="headerlink" title="【参考】： vue项目设置每个页面的title"></a>【参考】： <a href="https://www.cnblogs.com/itgezhu/p/10817502.html">vue项目设置每个页面的title</a></h6>]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Wampserver-笔记</title>
    <url>/2021/01/18/Wampserver-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>注：如果重新有问题，启动服务一直是黄色，可以卸载了wamp，然后重启电脑，再重装</p>
<h4 id="phpmyadmin默认SQL账号密码"><a href="#phpmyadmin默认SQL账号密码" class="headerlink" title="phpmyadmin默认SQL账号密码:"></a>phpmyadmin默认SQL账号密码:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号：root，密码为空</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/note1.png" alt="phpmyadmin默认SQL账号密码"></p>
<h4 id="虚拟目录的配置"><a href="#虚拟目录的配置" class="headerlink" title="虚拟目录的配置"></a>虚拟目录的配置</h4><p>修改默认网站目录</p>
<p>第一步：修改d:\wamp\bin\apache\Apache2.4.9\conf\httpd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找： DocumentRoot &quot;c:/wamp/www/&quot;</span><br><span class="line">修改： DocumentRoot &quot;d:/www/&quot;</span><br><span class="line">查找： &lt;Directory &quot;c:/wamp/www/&quot;&gt;</span><br><span class="line">修改： &lt;Directory &quot;d:/www/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：修改wampmanager.ini和wampmanager.tpl</p>
<p>1、修改c:\wamp\wampmanager.ini:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)打开：c:\wamp\wampmanager.ini</span><br><span class="line">(2)查找：Type: item; Caption: &quot;www 目录&quot;; Action: shellexecute; FileName: &quot;c:/wamp/www&quot;; Glyph: 2</span><br><span class="line">(3)修改：Type: item; Caption: &quot;www 目录&quot;; Action: shellexecute; FileName: &quot;d:/www&quot;; Glyph: 2</span><br></pre></td></tr></table></figure>

<p>2、修改c:\wamp\wampmanager.tpl：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)打开：c:\wamp\wampmanager.tpl</span><br><span class="line">(2)查找：Type: item; Caption: &quot;$&#123;w_wwwDirectory&#125;&quot;; Action: shellexecute; FileName: &quot;$&#123;wwwdir&#125;&quot;; Glyph: 2</span><br><span class="line">(3)修改：Type: item; Caption: &quot;$&#123;w_wwwDirectory&#125;&quot;; Action: shellexecute; FileName: &quot;d:/www&quot;; Glyph: 2</span><br></pre></td></tr></table></figure>

<h4 id="修改默认项目目录"><a href="#修改默认项目目录" class="headerlink" title="修改默认项目目录"></a>修改默认项目目录</h4><p>1、修改httpd.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;D:/Work/&quot;</span><br><span class="line">&lt;Directory &quot;D:/Work/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>2、修改httpd-vhost.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	ServerName localhost</span><br><span class="line">	ServerAlias localhost</span><br><span class="line">	DocumentRoot D:/Work/</span><br><span class="line">	&lt;Directory  &quot;D:/Work/&quot;&gt;</span><br><span class="line">		Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">		AllowOverride All</span><br><span class="line">		Require local</span><br><span class="line">	&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h4 id="本地项目-配置服务器访问"><a href="#本地项目-配置服务器访问" class="headerlink" title="本地项目-配置服务器访问"></a>本地项目-配置服务器访问</h4><p>1、配置host（C:\Windows\System32\drivers\etc）</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.49    www.web.com</span><br></pre></td></tr></table></figure>

<p>2、配置httpd-vhosts.conf（wampserver\bin\apache\apache2.4.23\conf\extra\httpd-vhosts.conf）</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">listen 8081</span><br><span class="line">&lt;VirtualHost *:8081&gt;</span><br><span class="line">    ServerName www.web.com</span><br><span class="line">    DocumentRoot &quot;E:/wampserver/www/web&quot;</span><br><span class="line">    &lt;Directory &quot;E:/wampserver/www/web&quot;&gt;</span><br><span class="line">      Options Indexes FollowSymLinks</span><br><span class="line">      AllowOverride All</span><br><span class="line">      Order allow,deny</span><br><span class="line">      Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<p>3、访问的时候，使用<a href="http://www.web.com来访问本地项目/">www.web.com来访问本地项目</a></p>
<h4 id="Apache相对路径文件的放置"><a href="#Apache相对路径文件的放置" class="headerlink" title="Apache相对路径文件的放置"></a>Apache相对路径文件的放置</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/note2.png" alt="Apache相对路径文件的放置"></p>
<h4 id="权限问题——配置"><a href="#权限问题——配置" class="headerlink" title="权限问题——配置"></a>权限问题——配置</h4><p>修改<code>wamp\bin\apache\apache2.4.23\conf\http.conf</code> 文件</p>
<p>将<code>Require all denied</code> 注释掉，改为<code>Require all granted</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride none</span><br><span class="line">    #Require all denied</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/1%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.png" alt="权限问题"></p>
<h4 id="工作目录-路径问题——配置"><a href="#工作目录-路径问题——配置" class="headerlink" title="工作目录-路径问题——配置"></a>工作目录-路径问题——配置</h4><p>修改<code>wamp\bin\apache\apache2.4.23\conf\http.conf</code> 文件</p>
<p>将<code>DocumentRoot &quot;$&#123;INSTALL_DIR&#125;/www&quot;</code> 和 <code>&lt;Directory &quot;$&#123;INSTALL_DIR&#125;/www/&quot;&gt;</code>  注释掉，更改了工作目录的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DocumentRoot &quot;$&#123;INSTALL_DIR&#125;/www&quot;</span><br><span class="line">#&lt;Directory &quot;$&#123;INSTALL_DIR&#125;/www/&quot;&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot &quot;E:/work&quot;</span><br><span class="line">&lt;Directory &quot;E:/work/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/2.%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95-%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98.png" alt="工作目录-路径问题"></p>
<h4 id="手机访问问题——配置"><a href="#手机访问问题——配置" class="headerlink" title="手机访问问题——配置"></a>手机访问问题——配置</h4><p>修改<code>wamp\bin\apache\apache2.4.23\conf\http.conf</code> 文件</p>
<p>在<code>Require local</code> 前面加上<code>Require all granted </code>和 <code> Allow from all</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;E:/work/&quot;&gt;</span><br><span class="line">    #</span><br><span class="line">    # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</span><br><span class="line">    # or any combination of:</span><br><span class="line">    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span><br><span class="line">    #</span><br><span class="line">    # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</span><br><span class="line">    # doesn&#x27;t give it to you.</span><br><span class="line">    #</span><br><span class="line">    # The Options directive is both complicated and important.  Please see</span><br><span class="line">    # http://httpd.apache.org/docs/2.4/mod/core.html#options</span><br><span class="line">    # for more information.</span><br><span class="line">    #</span><br><span class="line">    Options +Indexes +FollowSymLinks +Multiviews</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # AllowOverride controls what directives may be placed in .htaccess files.</span><br><span class="line">    # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:</span><br><span class="line">    #   AllowOverride FileInfo AuthConfig Limit</span><br><span class="line">    #</span><br><span class="line">    AllowOverride all</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # Controls who can get stuff from this server.</span><br><span class="line">    #</span><br><span class="line">    Require all granted</span><br><span class="line">    Allow from all</span><br><span class="line"></span><br><span class="line">#   onlineoffline tag - don&#x27;t remove</span><br><span class="line">    Require local</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/3.%E6%89%8B%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98.png" alt="手机访问问题"></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Wampserver</category>
      </categories>
      <tags>
        <tag>Wampserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下利用CMD命令批量修改文件名</title>
    <url>/2020/01/06/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%A9%E7%94%A8CMD%E5%91%BD%E4%BB%A4%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<h3 id="Windows环境下利用CMD命令批量修改文件名"><a href="#Windows环境下利用CMD命令批量修改文件名" class="headerlink" title="Windows环境下利用CMD命令批量修改文件名"></a>Windows环境下利用CMD命令批量修改文件名</h3><h4 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h4><h5 id="·文件重命名-ren"><a href="#·文件重命名-ren" class="headerlink" title="·文件重命名 ren"></a>·文件重命名 <span style="color:#c7254e;">ren</span></h5><p>1、ren即rename的缩写，使用ren或者rename命令均可实现文件重命名的操作；命令的使用方法很简单，格式为 <span style="color:#c7254e;">ren old_name new_name</span> ；例如，想要将D盘根目录下的文件 a.txt 重命名为 b.doc ，只需要在CMD中进入D盘根目录，执行 <span style="color:#c7254e;">ren a.txt b.doc </span>；或者使用绝对路径，执行 <span style="color:#c7254e;">ren D:\a.txt b.doc  </span>，也可以达到同样的效果</p>
<p>2、需要注意的是，旧文件名 <span style="color:#c7254e;">old_name </span>可以使用相对路径，也可以包含绝对路径，但新文件名 <span style="color:#c7254e;">new_name</span>不能包含任何文件路径，只能是纯文件名；所以，要想批量修改包含子文件夹的多个路径下的大量文件名，还需要用到一款支持通配符匹配查询替换的文本编辑器，以便从路径+文件名的文件目录系统中提取出文件名的部分</p>
<p>3、另外， <span style="color:#c7254e;">ren</span> 也支持使用通配符；例如，想要将扩展名为 <span style="color:#c7254e;">.docx </span>的文件扩展名批量修改为 <span style="color:#c7254e;">.doc</span> ，执行 <span style="color:#c7254e;">ren *.docx  *.doc</span> 即可；但通配符的使用规则十分复杂，若无法完全理解其中的匹配规则，建议只使用通配符来修改文件扩展名</p>
<p>摘抄自：<a href="https://blog.csdn.net/hitomitoi/article/details/81566494">https://blog.csdn.net/hitomitoi/article/details/81566494</a></p>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端-页面跳转的相关处理</title>
    <url>/2019/09/12/WEB%E5%89%8D%E7%AB%AF-%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9A%84%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="跳转到新页面"><a href="#跳转到新页面" class="headerlink" title="跳转到新页面"></a>跳转到新页面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.assign(&#x27;https://www.baidu.com/&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href = https://www.baidu.com/</span><br></pre></td></tr></table></figure>

<p>如果想在新标签中打开：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.open(&quot;https://www.baidu.com/&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="阻止浏览器的默认行为"><a href="#阻止浏览器的默认行为" class="headerlink" title="阻止浏览器的默认行为"></a>阻止浏览器的默认行为</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function stopDefault(e) &#123; </span><br><span class="line">	if ( e &amp;&amp; e.preventDefault ) &#123;</span><br><span class="line">		e.preventDefault(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ad_manage_react-项目笔记</title>
    <url>/2021/10/10/ad-manage-react-%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="启动项目注意事项："><a href="#启动项目注意事项：" class="headerlink" title="启动项目注意事项："></a>启动项目注意事项：</h3><ol>
<li>启动Apifox应用——项目的mock接口</li>
</ol>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">│  App.js</span><br><span class="line">│  App.less</span><br><span class="line">│  App.test.js</span><br><span class="line">│  index.css</span><br><span class="line">│  index.js</span><br><span class="line">│  reportWebVitals.js</span><br><span class="line">│  setupTests.js</span><br><span class="line">│</span><br><span class="line">├─api					——接口文件（分模块）</span><br><span class="line">│      source.js		——素材管理模块相关Api</span><br><span class="line">│      user.js			——用户模块相关Api</span><br><span class="line">│</span><br><span class="line">├─app								——app公用</span><br><span class="line">│      BreadcrumbMap.jsx			——面包屑相关配置</span><br><span class="line">│      leftMenus.js					——左侧导航栏相关数据</span><br><span class="line">│      leftMenus—对应旧的LeftNav.js	  ——antd左侧导航旧版的做法</span><br><span class="line">│      rootReducers.js				——reducer的集合</span><br><span class="line">│      router.js					——路由配置</span><br><span class="line">│      store.js						——store的配置</span><br><span class="line">│</span><br><span class="line">├─assets							——静态资源</span><br><span class="line">│  ├─css</span><br><span class="line">│  │      style.css</span><br><span class="line">│  │</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      header.jpeg</span><br><span class="line">│  │</span><br><span class="line">│  └─less							</span><br><span class="line">│          common.less				——公用样式</span><br><span class="line">│          cover_antd.less			——覆盖antd默认样式的样式文件</span><br><span class="line">│          style.less				——其他样式</span><br><span class="line">│</span><br><span class="line">├─components						——组件集合</span><br><span class="line">│  │  Bottom.jsx					——页面底部</span><br><span class="line">│  │  EditableTable.jsx				——可编辑表格</span><br><span class="line">│  │  LeftNav-旧的使用方法.jsx</span><br><span class="line">│  │  LeftNav.jsx					——左侧导航栏组件</span><br><span class="line">│  │  Top.jsx						——页面顶部</span><br><span class="line">│  │</span><br><span class="line">│  └─charts							——图表相关组件</span><br><span class="line">│          LineChart.jsx			——线性图组件</span><br><span class="line">│</span><br><span class="line">├─pages								——页面组件（根据模块划分）</span><br><span class="line">│  ├─agent</span><br><span class="line">│  │      Account.jsx</span><br><span class="line">│  │      AddAccount.jsx</span><br><span class="line">│  │      AddAgent.jsx</span><br><span class="line">│  │      Agent.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─dashboard</span><br><span class="line">│  │      Overview.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─group</span><br><span class="line">│  │      AddGroup.jsx</span><br><span class="line">│  │      Group.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─home</span><br><span class="line">│  │      Container.jsx</span><br><span class="line">│  │      Home.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─login</span><br><span class="line">│  │      Login.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─manage</span><br><span class="line">│  │      Customevent.jsx</span><br><span class="line">│  │      Datacb.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─product</span><br><span class="line">│  │      AddProduct.jsx</span><br><span class="line">│  │      EditProduct.jsx</span><br><span class="line">│  │      Product.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─source</span><br><span class="line">│  │      AddSource.jsx</span><br><span class="line">│  │      EditSource.jsx</span><br><span class="line">│  │      Source.jsx</span><br><span class="line">│  │      SourceUpload.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─tool</span><br><span class="line">│  │      Attribute.jsx</span><br><span class="line">│  │      Logtool.jsx</span><br><span class="line">│  │</span><br><span class="line">│  └─user</span><br><span class="line">│          EditPassword.jsx</span><br><span class="line">│</span><br><span class="line">├─reducers							——reducers相关（根据模块划分）</span><br><span class="line">│      userSlice.js					——用户模块相关reducer处理</span><br><span class="line">│</span><br><span class="line">└─utils								——自定义相关文件</span><br><span class="line">        fetchUtil.js				——接口请求相关封装</span><br></pre></td></tr></table></figure>



<h2 id="项目笔记"><a href="#项目笔记" class="headerlink" title="项目笔记"></a>项目笔记</h2><p><a href="https://ant.design/docs/react/use-with-create-react-app-cn">在 create-react-app 中使用</a></p>
<p>注：先引入less，免得后面再来配置的时候，由于依赖包之间的版本之间存在冲突问题。</p>
<h4 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create react-app ad_manage_react</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd antd-demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h5 id="安装并引入-antd"><a href="#安装并引入-antd" class="headerlink" title="安装并引入 antd"></a>安装并引入 antd</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<h5 id="安装-craco-并修改-package-json-里的-scripts-属性"><a href="#安装-craco-并修改-package-json-里的-scripts-属性" class="headerlink" title="安装 craco 并修改 package.json 里的 scripts 属性"></a>安装 craco 并修改 <code>package.json</code> 里的 <code>scripts</code> 属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;craco build&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;craco test&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录创建一个 <code>craco.config.js</code> 用于修改默认配置</p>
<h5 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h5><p>首先把 <code>src/App.css</code> 文件修改为 <code>src/App.less</code>，然后修改样式引用为 less 文件。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* src/App.js */</span><br><span class="line"><span class="deletion">- import &#x27;./App.css&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#x27;./App.less&#x27;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* src/App.less */</span><br><span class="line">- @import &#x27;~antd/dist/antd.css&#x27;;</span><br><span class="line">+ @import &#x27;~antd/dist/antd.less&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后安装 <code>craco-less</code> 并修改 <code>craco.config.js</code> 文件如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add craco-less</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const CracoLessPlugin = require(<span class="string">&#x27;craco-less&#x27;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          lessOptions: &#123;</span><br><span class="line">            modifyVars: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125;,</span><br><span class="line">            javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="添加react-router-dom-6"><a href="#添加react-router-dom-6" class="headerlink" title="添加react-router-dom@6"></a>添加react-router-dom@6</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom@6</span><br></pre></td></tr></table></figure>

<h4 id="添加react-redux"><a href="#添加react-redux" class="headerlink" title="添加react-redux"></a>添加react-redux</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure>

<h4 id="添加Redux-Toolkit"><a href="#添加Redux-Toolkit" class="headerlink" title="添加Redux Toolkit"></a>添加Redux Toolkit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @reduxjs/toolkit</span><br></pre></td></tr></table></figure>

<h4 id="添加redux-persist"><a href="#添加redux-persist" class="headerlink" title="添加redux-persist"></a>添加redux-persist</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add redux-persist</span><br></pre></td></tr></table></figure>

<h4 id="异步获取数据"><a href="#异步获取数据" class="headerlink" title="异步获取数据"></a>异步获取数据</h4><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><h5 id="可变的变量不放在useEffect中"><a href="#可变的变量不放在useEffect中" class="headerlink" title="可变的变量不放在useEffect中"></a>可变的变量不放在useEffect中</h5><p>错误用法：</p>
<p>这样写会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sourceList = [];</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    getSourcesList(1).then(res =&gt; &#123;</span><br><span class="line">    	sourceList = res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>



<p> 改为：</p>
<p>注：useEffect后面的依赖项，要加[]，不加，会一直执行这个方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [sourceList, setSourceList] = useState([]);</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    getSourcesList(1).then(res =&gt; &#123;</span><br><span class="line">      console.log(&#x27;res获取素材列表&#x27;);</span><br><span class="line">      console.log(res);</span><br><span class="line">      setSourceList(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>

<h4 id="使用数据图表"><a href="#使用数据图表" class="headerlink" title="使用数据图表"></a>使用数据图表</h4><p><a href="https://www.csdn.net/tags/MtjaUg3sNTM3OTQtYmxvZwO0O0OO0O0O.html">使用echarts-for-react数据图表</a></p>
<h5 id="ECharts-for-React"><a href="#ECharts-for-React" class="headerlink" title="ECharts for React"></a><a href="https://git.hust.cc/echarts-for-react/">ECharts for React</a></h5><p><a href="https://echarts.apache.org/zh/option.html#title">ECharts–官网文档</a></p>
<p>注：要安装echarts，不然会报以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module not found: Error: Can&#x27;t resolve &#x27;echarts&#x27; in &#x27;H:\Gitee\ad_manage_react\node_modules\echarts-for-react\esm&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add echarts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add echarts-for-react</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactECharts from &#x27;echarts-for-react&#x27;;</span><br><span class="line">const options = &#123;</span><br><span class="line">    grid: &#123; top: 8, right: 8, bottom: 24, left: 36 &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        smooth: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;axis&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ReactECharts option=&#123;options&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="工具栏组件"><a href="#工具栏组件" class="headerlink" title="工具栏组件"></a>工具栏组件</h4><h5 id="toolbox"><a href="#toolbox" class="headerlink" title="toolbox"></a>toolbox</h5><h4 id="echart图表生成表格"><a href="#echart图表生成表格" class="headerlink" title="echart图表生成表格"></a>echart图表生成表格</h4><p>toolbox—features—dataView</p>
<p><a href="https://zhuanlan.zhihu.com/p/375435811">将echarts的数据视图装换为table表格,并且导出excel</a></p>
<p><a href="https://www.freesion.com/article/1308912177/">将ECHARTS的数据视图展示为TABLE并且导出EXCEL</a></p>
<h5 id="一、使用工具栏的方法"><a href="#一、使用工具栏的方法" class="headerlink" title="一、使用工具栏的方法"></a>一、使用工具栏的方法</h5><p>工具栏生成表格的设置，在<code>toolbox-&gt;feature-&gt;dataView</code>中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const options = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      name: &#x27;日期&#x27;,</span><br><span class="line">      key: &#x27;date&#x27;,</span><br><span class="line">      data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      data: [&#x27;自然量&#x27;, &#x27;推广量&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: &#x27;3%&#x27;,</span><br><span class="line">      right: &#x27;4%&#x27;,</span><br><span class="line">      bottom: &#x27;3%&#x27;,</span><br><span class="line">      containLabel: true</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;自然量&#x27;,</span><br><span class="line">        key: &#x27;nature&#x27;,</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        stack: &#x27;Total&#x27;,</span><br><span class="line">        data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;推广量&#x27;,</span><br><span class="line">        key: &#x27;spread&#x27;,</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        stack: &#x27;Total&#x27;,</span><br><span class="line">        data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;axis&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">      feature: &#123;</span><br><span class="line">        dataView: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          readOnly: false,</span><br><span class="line">          lang: [&#x27;&#x27;, &#x27;关闭&#x27;, &#x27;刷新&#x27;],</span><br><span class="line">          optionToContent: function(opt) &#123;</span><br><span class="line">            var axisData = opt.xAxis[0].data;</span><br><span class="line">            var series = opt.series;</span><br><span class="line">            var table = &#x27;&lt;table class=&quot;chart-table&quot; style=&quot;width:100%;text-align:center&quot; border=&quot;1&quot;&gt;&#x27;+</span><br><span class="line">                      &#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                      +&#x27;&lt;/thead&gt;&lt;/tr&gt;&#x27;</span><br><span class="line">                       + &#x27;&lt;tbody&gt;&#x27;;</span><br><span class="line">            for (var i = 0, l = axisData.length; i &lt; l; i++) &#123;</span><br><span class="line">                table += &#x27;&lt;tr&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + axisData[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + series[0].data[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + series[0].data[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;/tr&gt;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            table += &#x27;&lt;/tbody&gt;&lt;/table&gt;&#x27;;</span><br><span class="line">            return table;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const onChartReadyCallback = (echarts) =&gt;&#123;</span><br><span class="line">    myLineChart = echarts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ReactECharts option=&#123;options&#125; onChartReady=&#123;onChartReadyCallback&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h5 id="二、自定义表格的方法"><a href="#二、自定义表格的方法" class="headerlink" title="二、自定义表格的方法"></a>二、自定义表格的方法</h5><p>需要设置toolbox属性</p>
<p>缺点：表头的固定不好设置</p>
<p>设置dataView为不可见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line"></span><br><span class="line">feature: &#123;</span><br><span class="line">   dataView: &#123;</span><br><span class="line">      show: true</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">let myLineChart = &#x27;&#x27;;</span><br><span class="line">const onChartReadyCallback = (echarts) =&gt;&#123;</span><br><span class="line">    myLineChart = echarts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const toggleToTable = () =&gt; &#123;</span><br><span class="line">	let opt = myLineChart.getOption();</span><br><span class="line">	var tbHtml = opt.toolbox[0].feature.dataView.optionToContent(opt);</span><br><span class="line">	</span><br><span class="line">	// 然后将生成的HTML填充到对应的节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div onClick=&#123;toggleToTable&#125;&gt;生成表格&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="三、使用antd生成表格"><a href="#三、使用antd生成表格" class="headerlink" title="三、使用antd生成表格"></a>三、使用antd生成表格</h5><p>注：</p>
<ol>
<li>主要是处理<code>columns</code>和<code>dataSource</code>数据</li>
<li>不需要设置toolbox属性</li>
</ol>
<h4 id="legend"><a href="#legend" class="headerlink" title="legend"></a><a href="https://echarts.apache.org/zh/option.html#legend">legend</a></h4><p>图例组件展现了不同系列的标记(symbol)，颜色和名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">  data: [&#x27;自然量&#x27;, &#x27;推广量&#x27;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a><a href="https://echarts.apache.org/zh/option.html#grid">grid</a></h4><p>设置这个位置，可以让legend显示在图表上方位置，而不是覆盖在图表上</p>
<p>直角坐标系内绘图网格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">    left: &#x27;3%&#x27;,</span><br><span class="line">    right: &#x27;4%&#x27;,</span><br><span class="line">    bottom: &#x27;3%&#x27;,</span><br><span class="line">    containLabel: true  //grid 区域是否包含坐标轴的刻度标签。</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="折叠图叠加"><a href="#折叠图叠加" class="headerlink" title="折叠图叠加"></a><a href="https://echarts.apache.org/examples/zh/editor.html?c=line-stack">折叠图叠加</a></h4><h5 id="series"><a href="#series" class="headerlink" title="series"></a>series</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;自然量&#x27;,</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    stack: &#x27;Total&#x27;,</span><br><span class="line">    data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    name: &#x27;推广量&#x27;,</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    stack: &#x27;Total&#x27;,</span><br><span class="line">    data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="echart添加横向滚动条"><a href="#echart添加横向滚动条" class="headerlink" title="echart添加横向滚动条"></a><a href="https://www.cnblogs.com/-flq/p/9639331.html">echart添加横向滚动条</a></h4><h5 id="dataZoom"><a href="#dataZoom" class="headerlink" title="dataZoom"></a><a href="https://echarts.apache.org/zh/option.html#dataZoom">dataZoom</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataZoom: [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#x27;slider&#x27;,</span><br><span class="line">    show: true,</span><br><span class="line">    xAxisIndex: [0],</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>



<h4 id="左侧导航栏-新版本的使用"><a href="#左侧导航栏-新版本的使用" class="headerlink" title="左侧导航栏-新版本的使用"></a>左侧导航栏-新版本的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const items = [</span><br><span class="line">  &#123; label: &#x27;菜单项一&#x27;, key: &#x27;item-1&#x27; &#125;, // 菜单项务必填写 key</span><br><span class="line">  &#123; label: &#x27;菜单项二&#x27;, key: &#x27;item-2&#x27; &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: &#x27;子菜单&#x27;,</span><br><span class="line">    key: &#x27;submenu&#x27;,</span><br><span class="line">    children: [&#123; label: &#x27;子菜单项&#x27;, key: &#x27;submenu-item-1&#x27; &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line">return &lt;Menu items=&#123;items&#125; /&gt;;</span><br></pre></td></tr></table></figure>

<h5 id="加上页面跳转"><a href="#加上页面跳转" class="headerlink" title="加上页面跳转"></a><a href="https://ant.design/components/menu-cn/">加上页面跳转</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    label: (</span><br><span class="line">      &lt;a href=&quot;https://ant.design&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;</span><br><span class="line">        Navigation Four - Link</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    ),</span><br><span class="line">    key: &#x27;alipay&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="项目中-加上页面跳转的做法"><a href="#项目中-加上页面跳转的做法" class="headerlink" title="项目中-加上页面跳转的做法"></a>项目中-加上页面跳转的做法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Link &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    label: ( &lt;Link to=&quot;/product&quot;&gt;全部产品&lt;/Link&gt;),</span><br><span class="line">    key:&#x27;/product&#x27;,</span><br><span class="line">    icon: &lt;AppstoreOutlined /&gt;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="Menu新版本—左侧导航栏完整代码"><a href="#Menu新版本—左侧导航栏完整代码" class="headerlink" title="Menu新版本—左侧导航栏完整代码"></a>Menu新版本—左侧导航栏完整代码</h4><ol>
<li><p>左侧导航menus</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; </span><br><span class="line">    AppstoreOutlined,</span><br><span class="line">    ToolOutlined, </span><br><span class="line">    MacCommandOutlined,</span><br><span class="line">    FolderOpenOutlined, </span><br><span class="line">    DashboardOutlined,</span><br><span class="line">    PieChartOutlined,</span><br><span class="line">    SettingOutlined &#125;</span><br><span class="line">from &#x27;@ant-design/icons&#x27;;</span><br><span class="line">import &#123; Link &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">const leftMenus = [</span><br><span class="line">    &#123;</span><br><span class="line">        // label: &#x27;全部产品&#x27;,</span><br><span class="line">        label: ( &lt;Link to=&quot;/product&quot;&gt;全部产品&lt;/Link&gt;),</span><br><span class="line">        key:&#x27;/product&#x27;,</span><br><span class="line">        icon: &lt;AppstoreOutlined /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        // label: &#x27;素材管理&#x27;,</span><br><span class="line">        label: ( &lt;Link to=&quot;/source&quot;&gt;素材管理&lt;/Link&gt;),</span><br><span class="line">        key:&#x27;/source&#x27;,</span><br><span class="line">        icon: &lt;FolderOpenOutlined /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: &#x27;公共模块&#x27;,</span><br><span class="line">        key:&#x27;/ad&#x27;,</span><br><span class="line">        icon: &lt;MacCommandOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;权限管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/account&quot;&gt;权限管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/account&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;用户管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/user&quot;&gt;用户管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/user&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;账户管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/agent&quot;&gt;账户管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/agent&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;项目管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/group&quot;&gt;项目管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/group&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;渠道管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/channel&quot;&gt;渠道管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/channel&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;设备管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/device&quot;&gt;设备管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/device&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;推广参数设置&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/config&quot;&gt;推广参数设置&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/config&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/dashboard&#x27;,</span><br><span class="line">        label: &#x27;仪表盘&#x27;,</span><br><span class="line">        icon: &lt;DashboardOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;总览&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/overview&quot;&gt;总览&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/overview&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;实时&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/realtime&quot;&gt;实时&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/realtime&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;渠道效果对比&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/channeleffect&quot;&gt;渠道效果对比&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/channeleffect&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/collect&#x27;,</span><br><span class="line">        label: &#x27;报表&#x27;,</span><br><span class="line">        icon: &lt;PieChartOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;分包推广详情&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/subpackage&quot;&gt;分包推广详情&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/subpackage&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;SEM活动详情&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/sem&quot;&gt;SEM活动详情&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/sem&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;激活延迟分析&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/effectevaluate&quot;&gt;激活延迟分析&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/effectevaluate&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/tool&#x27;,</span><br><span class="line">        label: &#x27;工具&#x27;,</span><br><span class="line">        icon: &lt;ToolOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;归因查询&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/tool/attribute&quot;&gt;归因查询&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/tool/attribute&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;日志流&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/tool/logtool&quot;&gt;日志流&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/tool/logtool&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/manage&#x27;,</span><br><span class="line">        label: &#x27;配置&#x27;,</span><br><span class="line">        icon: &lt;SettingOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;推广回调管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/manage/datacb&quot;&gt;推广回调管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/manage/datacb&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;埋点管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/manage/customevent&quot;&gt;埋点管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/manage/customevent&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export default leftMenus;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧导航-组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; Layout, Menu &#125; from &#x27;antd&#x27;;</span><br><span class="line">import &#123; useLocation &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">import leftMenus from &#x27;../app/leftMenus&#x27;;</span><br><span class="line">import &#123; </span><br><span class="line">    MenuUnfoldOutlined,</span><br><span class="line">    MenuFoldOutlined,</span><br><span class="line">    &#125;</span><br><span class="line">from &#x27;@ant-design/icons&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; Sider &#125; = Layout;</span><br><span class="line">// const &#123; SubMenu &#125; = Menu;</span><br><span class="line"></span><br><span class="line">// 左侧导航栏</span><br><span class="line">export default function LeftNav(props) &#123;</span><br><span class="line">  const location = useLocation();</span><br><span class="line">  const pathname = location.pathname;</span><br><span class="line">  const [selectedKeys, setSelectedKeys] = useState([]);</span><br><span class="line">  const [openKeys, setOpenKeys] = useState([]);</span><br><span class="line"> </span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 更新选中状态</span><br><span class="line">    </span><br><span class="line">    const rank = pathname.split(&#x27;/&#x27;);</span><br><span class="line">    switch(rank.length) &#123;</span><br><span class="line">      case 2 :</span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        break;</span><br><span class="line">      </span><br><span class="line">      case 3: </span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        setOpenKeys([rank.slice(0, 2).join(&#x27;/&#x27;)])</span><br><span class="line">        break;</span><br><span class="line">  </span><br><span class="line">      case 4: </span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        setOpenKeys([rank.slice(0, 2).join(&#x27;/&#x27;), rank.slice(0, 3).join(&#x27;/&#x27;)])</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        setSelectedKeys([]);</span><br><span class="line">        setOpenKeys([]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[pathname]);</span><br><span class="line"></span><br><span class="line">  // 展开/收起SubMenu触发</span><br><span class="line">  const onOpenChange = keys =&gt; &#123;</span><br><span class="line">    setOpenKeys(keys)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 点击MenuItem时触发</span><br><span class="line">  const onClick = e =&gt; &#123;</span><br><span class="line">    setSelectedKeys([e.key])</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Sider </span><br><span class="line">        trigger=&#123;null&#125; </span><br><span class="line">        collapsible </span><br><span class="line">        collapsed=&#123;props.isCollapsed&#125;</span><br><span class="line">        collapsedWidth=&quot;60&quot;</span><br><span class="line">        className=&#x27;left-sider&#x27;</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">            overflow: &#x27;auto&#x27;,</span><br><span class="line">            height: &#x27;100vh&#x27;,</span><br><span class="line">            position: &#x27;fixed&#x27;,</span><br><span class="line">            left: 0,</span><br><span class="line">            top: 0,</span><br><span class="line">            bottom: 0,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;div className=&quot;logo&quot;&gt;</span><br><span class="line">        &lt;span </span><br><span class="line">            className=&#x27;toggleFold&#x27; </span><br><span class="line">            onClick=&#123;props.onToggle&#125;</span><br><span class="line">        &gt;</span><br><span class="line">            &#123; props.isCollapsed ? &lt;MenuUnfoldOutlined/&gt; :  &lt;MenuFoldOutlined/&gt;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;Menu</span><br><span class="line">          items=&#123;leftMenus&#125; </span><br><span class="line">          theme=&quot;dark&quot;</span><br><span class="line">          mode=&quot;inline&quot; </span><br><span class="line">          openKeys=&#123;openKeys&#125;</span><br><span class="line">          selectedKeys=&#123;selectedKeys&#125;</span><br><span class="line">          onOpenChange=&#123;onOpenChange&#125;</span><br><span class="line">          onClick=&#123;onClick&#125;</span><br><span class="line">          defaultSelectedKeys=&#123;[selectedKeys]&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/Sider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="antd-日期选择-最近几天"><a href="#antd-日期选择-最近几天" class="headerlink" title="antd-日期选择-最近几天"></a>antd-日期选择-最近几天</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; DatePicker &#125; from &#x27;antd&#x27;;</span><br><span class="line">const &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"></span><br><span class="line">&lt;RangePicker</span><br><span class="line">  ranges=&#123;&#123;</span><br><span class="line">    &#x27;全部&#x27;: [moment(&quot;2020-09-10&quot;), moment()],</span><br><span class="line">    &#x27;今天&#x27;: [moment(), moment()],</span><br><span class="line">    &#x27;昨天&#x27;: [moment().subtract(1, &#x27;days&#x27;), moment().subtract(1, &#x27;days&#x27;)],</span><br><span class="line">    &#x27;近7天&#x27;: [moment().subtract(6, &#x27;days&#x27;), moment()],</span><br><span class="line">    &#x27;近14天&#x27;: [moment().subtract(13, &#x27;days&#x27;), moment()],</span><br><span class="line">    &#x27;近30天&#x27;: [moment().subtract(29, &#x27;days&#x27;), moment()],</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  locale=&#123;locale&#125;</span><br><span class="line">  defaultValue=&#123;[moment(&quot;2020-09-10&quot;), moment()]&#125;</span><br><span class="line">  style=&#123;&#123;width:220&#125;&#125;</span><br><span class="line">  onChange=&#123;onRangeChange&#125;</span><br><span class="line">  placement=&quot;bottomRight&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/Form.Item&gt;</span><br></pre></td></tr></table></figure>

<h4 id="antd表格"><a href="#antd表格" class="headerlink" title="antd表格"></a>antd表格</h4><p>渲染表格的数据—–数组数据，每一项要有唯一的key值</p>
<p>key值相关报错：<code>Warning: Each child in a list should have a unique &quot;key&quot; prop.</code></p>
<p>解决方法：</p>
<ol>
<li><p>在数据中添加key属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;key&quot;: 3215,</span><br><span class="line">        &quot;id&quot;: 3215,</span><br><span class="line">        &quot;group_id&quot;: 2,</span><br><span class="line">        &quot;group_name&quot;: &quot;测试项目&quot;,</span><br><span class="line">        &quot;create_by&quot;: &quot;10000&quot;</span><br><span class="line">     &#125;</span><br><span class="line">     ....</span><br><span class="line"> ]    </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用别的唯一性的属性：<code> rowKey = &#123; record =&gt; record.id&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Table </span><br><span class="line">  columns=&#123;columns&#125; </span><br><span class="line">  dataSource=&#123;accountList&#125;</span><br><span class="line">  rowKey = &#123; record =&gt; record.id&#125;</span><br><span class="line">  bordered&gt;</span><br><span class="line">&lt;/Table&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="报错信息处理"><a href="#报错信息处理" class="headerlink" title="报错信息处理"></a>报错信息处理</h4><p><code>[Violation] Added non-passive event listener to a scroll-blocking ＜some＞ event. Consider marking eve</code></p>
<p><a href="https://blog.csdn.net/qq_45820967/article/details/117426636">react报错: Unable to preventDefault inside passive event li ……</a></p>
<p><a href="https://stackoverflow.com/questions/51345929/react-js-violation-added-non-passive-event-listener-to-a-scroll-blocking-mou">React js -[Violation] Added non-passive event listener to a scroll-blocking ‘mousewheel’ event</a></p>
<p><a href="https://www.jianshu.com/p/576347881906?u_atoken=232b4a7e-0231-4946-8908-47ebf8e606a9&u_asession=01_3ZFCuVcOfuwSPfoQFLRMZKUf4ScuwHJlmBJl7VN4QVB7dNjfi4wDQit6KXmcpw4X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_OXZcyuDd-UGTHXkkR-LW63KmjkU3JT7ddtoHBlecZWGBkFo3NEHBv0PZUm6pbxQU&u_asig=05EPhiOrWxZ56qQnnFYP6YcxEx5hAgiHwRV60GtPYDTOQNU6EBiTLvNmp_kORYdoQkT4feHNfaH8NCsFDdym0tGIgqMawo17KziwQo1CW2H_dUHyxqMXrsIndIQKY2FKo2C0nf13abHfSCQtBUc7n-PTwxuv4jOESKkFpMk-zCu2P9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzTc2O0STMN1NJO_82A13D1qAuhUSv5lr4LcS7JnU9TKWzKnPGeiYgOeAvNODIGQOu-3h9VXwMyh6PgyDIVSG1W8DqoVQR08v6xbsOEOaVs-lHANw4_8BpU31TkZPiPBinieC25fhKOae3jNeeE3fG_hOWccivToL8qDJ_zjAM3mAmWspDxyAEEo4kbsryBKb9Q&u_aref=+OncCc9GS1BtE2d0dfPERz/UNao=">react Added non-passive event listener to a scroll-blocking ‘mousewheel’ event</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add default-passive-events  或  cnpm i default-passive-events -S</span><br><span class="line">并在 App.js 中 import &#x27;default-passive-events&#x27;;</span><br></pre></td></tr></table></figure>

<p>加上以上配置之后，</p>
<p>报错：<code>react-dom.development.js:6848 Unable to preventDefault inside passive event listener invocation.</code></p>
<p><a href="https://blog.csdn.net/wdnmd_69/article/details/124354187">React中使用antd的select报错Unable to preventDefault inside passive event listener invocation.</a></p>
<p>最后解决：</p>
<p>先停掉运行中的项目，找到node_modules\react-dom\cjs\react-dom.development.js中6202行的代码将event.preventDefault();注释掉，再重新运行项目，无需任何其他设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">if (event.preventDefault) &#123;</span><br><span class="line">    //event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE</span><br><span class="line">  &#125; else if (typeof event.returnValue !== &#x27;unknown&#x27;) &#123;</span><br><span class="line">    event.returnValue = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_59803648/article/details/121792700">React中轮播报错pan-y不起作用Unable to preventDefault inside passive event listener invocation</a></p>
]]></content>
      <categories>
        <category>项目笔记</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>express</title>
    <url>/2020/02/06/express/</url>
    <content><![CDATA[<p><a href="http://expressjs.com/">Express官网</a></p>
<p><a href="https://www.expressjs.com.cn/">Express 中文网</a></p>
<h3 id="express-generator"><a href="#express-generator" class="headerlink" title="express-generator"></a>express-generator</h3><blockquote>
<p>Express-generator是Express的应用生成器，通过使用生成器工具，可以快速创建一个Express的应用骨架</p>
</blockquote>
<p><a href="https://www.cnblogs.com/lihuijuan/p/10821815.html">express-generator简单使用</a></p>
<ul>
<li>express-generator是一个node的自动化创建项目工具，类似于vue-cli</li>
<li>通过express –version来检查当前版本号，若能显示出来，说明安装成功</li>
<li>安装后就可以使用express命令</li>
<li>express 项目名，就会在当前文件夹下生成一个项目文件夹</li>
</ul>
<p><a href="https://blog.csdn.net/wanshiwusanren/article/details/120214652">express-generator</a></p>
<p>可把<a href="https://so.csdn.net/so/search?q=package&spm=1001.2101.3001.7020">package</a>脚本中的node改成nodemon，方便热启动</p>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>通过 <code>npx</code> （包含在 Node.js 8.2.0 及更高版本中）命令来运行 Express 应用程序生成器</p>
<ol>
<li><p>新建项目文件夹（myapp)，且切换到项目目录</p>
</li>
<li><p>安装Express 应用程序生成器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx express-generator</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看</p>
<blockquote>
<p>浏览器中打开 <code>http://localhost:3000/</code> </p>
</blockquote>
</li>
</ol>
<h3 id="express应用HTTPS总结"><a href="#express应用HTTPS总结" class="headerlink" title="express应用HTTPS总结"></a>express应用HTTPS总结</h3><p>摘自：<a href="https://www.jianshu.com/p/e83186622054/">express应用HTTPS总结</a></p>
<h4 id="1-跨域"><a href="#1-跨域" class="headerlink" title="1. 跨域"></a>1. 跨域</h4><h5 id="No-39-Access-Control-Allow-Origin-39-header-is-present-on-the-requested-resource"><a href="#No-39-Access-Control-Allow-Origin-39-header-is-present-on-the-requested-resource" class="headerlink" title="No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource"></a><code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</code></h5><p><code>express</code>没有允许跨域访问，使用<code>cors</code>中间件解决跨域问题，安装<code>cors</code>后在<code>app.js</code>中添加下方代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add cors</span><br><span class="line">或</span><br><span class="line">npm i cors</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let cors = require(&#x27;cors&#x27;)</span><br><span class="line"></span><br><span class="line">let corsOptions = &#123;</span><br><span class="line">    origin: &#x27;*&#x27; //允许访问的目标站点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(cors(corsOptions))</span><br></pre></td></tr></table></figure>

<h4 id="2-混入内容被阻止"><a href="#2-混入内容被阻止" class="headerlink" title="2. 混入内容被阻止"></a>2. 混入内容被阻止</h4><h5 id="Mixed-content-blocked”-when-running-an-HTTP-AJAX-operation-in-an-HTTPS-page"><a href="#Mixed-content-blocked”-when-running-an-HTTP-AJAX-operation-in-an-HTTPS-page" class="headerlink" title="Mixed content blocked” when running an HTTP AJAX operation in an HTTPS page"></a><code>Mixed content blocked” when running an HTTP AJAX operation in an HTTPS page</code></h5><p>你在启用了https的网站上访问了通过http传输的资源，例如加载外链、获取地图瓦片等，浏览器为了安全起见拒绝了你的请求，将有关http请求更换为https或本地加载来解决该问题</p>
<h4 id="3-SSL协议错误"><a href="#3-SSL协议错误" class="headerlink" title="3. SSL协议错误"></a>3. SSL协议错误</h4><h5 id="net-ERR-SSL-PROTOCOL-ERROR"><a href="#net-ERR-SSL-PROTOCOL-ERROR" class="headerlink" title="net::ERR_SSL_PROTOCOL_ERROR"></a><code>net::ERR_SSL_PROTOCOL_ERROR</code></h5><p>启用<code>https</code>的服务器上运行了<code>http</code>服务，在申请<code>https</code>后没有将<code>express</code>应用由默认的<code>http</code>更换为<code>https</code>，将下方代码加入到<code>app.js</code>中修改一下路径即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入部分</span><br><span class="line">const express=require(&#x27;express&#x27;);</span><br><span class="line">const bodyParser=require(&#x27;body-parser&#x27;);</span><br><span class="line">const cors=require(&quot;cors&quot;);</span><br><span class="line">const session=require(&quot;express-session&quot;);</span><br><span class="line">// const userRouter=require(&quot;./routes/user&quot;);</span><br><span class="line">const fs=require(&#x27;fs&#x27;);</span><br><span class="line">//创建web服务器</span><br><span class="line">var server=express();</span><br><span class="line">// server.listen(3000);</span><br><span class="line">var http=require(&#x27;http&#x27;);</span><br><span class="line">var https=require(&#x27;https&#x27;);</span><br><span class="line"></span><br><span class="line">//根据项目的路径导入生成的证书文件下面的key和pem是下载证书得到的</span><br><span class="line">var privateKey  = fs.readFileSync(&#x27;key.key&#x27;, &#x27;utf8&#x27;);</span><br><span class="line">var certificate = fs.readFileSync(&#x27;pem.pem&#x27;, &#x27;utf8&#x27;);</span><br><span class="line">var credentials = &#123;key: privateKey, cert: certificate&#125;;</span><br><span class="line"> </span><br><span class="line">var httpServer = http.createServer(server);</span><br><span class="line">var httpsServer = https.createServer(credentials, server);</span><br><span class="line"> </span><br><span class="line">//可以分别设置http、https的访问端口号</span><br><span class="line">var PORT = 3000;</span><br><span class="line">var SSLPORT = 8080;</span><br><span class="line"> </span><br><span class="line">//创建http服务器</span><br><span class="line">httpServer.listen(PORT, function() &#123;</span><br><span class="line">    console.log(&#x27;HTTP Server is running on: http://localhost:%s&#x27;, PORT);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//创建https服务器</span><br><span class="line">httpsServer.listen(SSLPORT, function() &#123;</span><br><span class="line">    console.log(&#x27;HTTPS Server is running on: https://localhost:%s&#x27;, SSLPORT);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//可以根据请求判断是http还是https</span><br><span class="line">server.get(&#x27;/&#x27;, function (req, res) &#123;</span><br><span class="line">    if(req.protocol === &#x27;https&#x27;) &#123;</span><br><span class="line">        res.status(200).send(&#x27;This is https visit!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        res.status(200).send(&#x27;This is http visit!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用body-parser中间件</span><br><span class="line">server.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    extended:false</span><br><span class="line">&#125;))</span><br><span class="line">//托管静态目录</span><br><span class="line">server.use(express.static(&quot;public&quot;))</span><br><span class="line">//解决跨域问题</span><br><span class="line">server.use(cors(&#123;</span><br><span class="line">    origin:[&quot;http://127.0.0.1:8081&quot;,&quot;http://localhost:8081&quot;,&quot;http://127.0.0.1:8080&quot;,&quot;http://localhost:8080&quot;],</span><br><span class="line">    credentials:true</span><br><span class="line">&#125;))</span><br><span class="line">// session功能</span><br><span class="line">server.use(session(&#123;</span><br><span class="line">    secret:&quot;128字符串&quot;,</span><br><span class="line">    resave:true,</span><br><span class="line">    saveUninitialized:true</span><br><span class="line">&#125;))</span><br><span class="line">// 挂载路由</span><br><span class="line">// server.use(&#x27;/user&#x27;,userRouter);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要是express需要加载https模块</p>
</blockquote>
<h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p><a href="https://blog.51cto.com/u_11378682/4931109">04 基于Express框架创建的Node后台获取前端传过来的参数</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/145760258">前端开发：express的具体操作流程</a></p>
<p><a href="https://www.jianshu.com/p/a75a521921e2">前后端交互-Express框架</a></p>
<p><a href="https://segmentfault.com/a/1190000019608194">React+Node+Express搭建一个前后端demo</a></p>
<h4 id="get方法传参"><a href="#get方法传参" class="headerlink" title="get方法传参"></a>get方法传参</h4><p><code>api.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.get(&#x27;/user/:id&#x27;, function (req, res, next) &#123;</span><br><span class="line">    console.log(&#x27;req.params&#x27;)     	</span><br><span class="line">    console.log(req.params)    		//  &#123;id: 1000&#125;</span><br><span class="line">    res.status(200).send(&#x27;winney---&#x27; +  req.params.id);     //  winney---1000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>前端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">  url: &#x27;https://www.winney07.cn:8080/user/1000&#x27;,  </span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">    &#x27;content-type&#x27;: &#x27;application/json&#x27; // 默认值</span><br><span class="line">  &#125;,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    console.log(&#x27;接口返回的数据&#x27;)</span><br><span class="line">    console.log(res)</span><br><span class="line">    // console.log(res.data)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail(err) &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="post方法传参"><a href="#post方法传参" class="headerlink" title="post方法传参"></a>post方法传参</h4>]]></content>
      <categories>
        <category>node.js</category>
        <category>express</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>game_sdk项目笔记</title>
    <url>/2021/10/13/game-sdk%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create react-app game_sdk</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd game_sdk</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure>

<ol>
<li><code>index.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; HashRouter &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">&lt;/HashRouter&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项：使用HashRouter，直接访问<a href="http://localhost:3003/login%E6%98%AF%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E7%9A%84%EF%BC%8C%E8%A6%81%E6%B3%A8%E6%84%8FHashRouter%E4%B8%8EBrowserRouter%E7%9A%84%E5%8C%BA%E5%88%AB">http://localhost:3003/login是页面空白的，要注意HashRouter与BrowserRouter的区别</a></p>
</blockquote>
<blockquote>
<p><a href="http://localhost:3003/#/login">http://localhost:3003/#/login</a></p>
</blockquote>
<p>项目中改为BrowserRouter，正式环境再改为HashRouter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>router/index.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Routes, Route &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">import Login from &#x27;../pages/user/Login&#x27;;</span><br><span class="line">import Service from &#x27;../pages/service/Service&#x27;;</span><br><span class="line">import MyCenter from &#x27;../pages/mycenter/MyCenter&#x27;;</span><br><span class="line">import Register from &#x27;../pages/user/Register&#x27;;</span><br><span class="line"></span><br><span class="line">function RootRouter() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/register&quot; element=&#123;&lt;Register /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/service&quot; element=&#123;&lt;Service /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/mycenter&quot; element=&#123;&lt;MyCenter /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Routes&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default RootRouter;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>App.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import RootRouter from &quot;./router&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;RootRouter/&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<h4 id="使用antd（项目中使用antd"><a href="#使用antd（项目中使用antd" class="headerlink" title="使用antd（项目中使用antd)"></a>使用<a href="https://ant.design/docs/react/use-with-create-react-app-cn">antd</a>（项目中使用antd)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<p>修改 <code>src/App.css</code>，在文件顶部引入 <code>antd/dist/antd.css</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="高级配置——使用less"><a href="#高级配置——使用less" class="headerlink" title="高级配置——使用less"></a><a href="https://ant.design/docs/react/use-with-create-react-app-cn#%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE">高级配置</a>——使用less</h5><p>安装 craco </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 里的 <code>scripts</code> 属性。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;start&quot;: &quot;craco start&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;craco build&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;test&quot;: &quot;craco test&quot;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录创建一个 <code>craco.config.js</code> 用于修改默认配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* craco.config.js */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>引入 <a href="https://github.com/DocSpring/craco-less">craco-less</a> 来帮助加载 less 样式和修改变量</p>
<p><code>src/App.css</code> 文件修改为 <code>src/App.less</code>，然后修改样式引用为 less 文件。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* src/App.js */</span><br><span class="line"><span class="deletion">- import &#x27;./App.css&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#x27;./App.less&#x27;;</span></span><br><span class="line">/* src/App.less */</span><br><span class="line"><span class="deletion">- @import &#x27;~antd/dist/antd.css&#x27;;</span></span><br><span class="line"><span class="addition">+ @import &#x27;~antd/dist/antd.less&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>安装 <code>craco-less</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add craco-less</span><br></pre></td></tr></table></figure>

<p>修改 <code>craco.config.js</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const CracoLessPlugin = require(&#x27;craco-less&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          lessOptions: &#123;</span><br><span class="line">            modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#f6c700&#x27; &#125;,</span><br><span class="line">            javascriptEnabled: true,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>注意：配置完，要重启项目</code></p>
<p>这里是配置主题颜色，不改变主题颜色，可不加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#f6c700&#x27; &#125;,</span><br></pre></td></tr></table></figure>

<p>报错信息：<code>Warning: [antd: Form.Item] </code>defaultValue<code>will not work on controlled Field. You should use</code>initialValues<code> of Form instead.</code></p>
<p>修改之前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Form.Item</span><br><span class="line">    name=&quot;username&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;Input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    defaultValue= &#123;user.name&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Form.Item&gt;</span><br></pre></td></tr></table></figure>

<p>解决方法：<code>initialValue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Form.Item</span><br><span class="line">    name=&quot;username&quot;</span><br><span class="line">    initialValue=&#123;user.name&#125;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;Input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    // defaultValue= &#123;user.name&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/Form.Item&gt;</span><br></pre></td></tr></table></figure>

<p>或 <code>initialValues</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;Form</span><br><span class="line">    name=&quot;normal_login&quot;</span><br><span class="line">    className=&quot;login-form&quot;</span><br><span class="line">    size=&quot;large&quot;</span><br><span class="line">    initialValues=&#123;&#123;</span><br><span class="line">        username: user.name,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    onFinish=&#123;onFinish&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;Form.Item</span><br><span class="line">        name=&quot;username&quot;</span><br><span class="line">        // initialValue=&#123;user.name&#125;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;Input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        // defaultValue= &#123;user.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/Form.Item&gt;</span><br><span class="line">&lt;/Form&gt;  </span><br></pre></td></tr></table></figure>

<h4 id="在react中引入外链H5页面"><a href="#在react中引入外链H5页面" class="headerlink" title="在react中引入外链H5页面"></a>在react中引入外链H5页面</h4><p>1.使用<code>react-iframe</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Iframe from &quot;react-iframe&quot;;</span><br><span class="line">&lt;Iframe </span><br><span class="line">    url=&quot;https://www.qunar.com/&quot;</span><br><span class="line">    width=&quot;100%&quot;</span><br><span class="line">    height=&quot;100%&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>2.直接使用<code>iframe</code>标签——项目中使用这种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe  </span><br><span class="line">// scrolling=&quot;yes&quot; </span><br><span class="line">frameBorder=&quot;0&quot; </span><br><span class="line">title=&#x27;外部页面&#x27;</span><br><span class="line">style=&#123;&#123;width:&#x27;100%&#x27;,height:&quot;100vh&quot;, overflow:&#x27;hidden&#x27;&#125;&#125;</span><br><span class="line">src=&quot;https://www.qunar.com/&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="状态管理-Redux-Toolkit"><a href="#状态管理-Redux-Toolkit" class="headerlink" title="状态管理 - Redux Toolkit"></a>状态管理 - <a href="https://redux-toolkit.js.org/tutorials/quick-start">Redux Toolkit</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure>

<h4 id="复制功能-copy-to-clipboard"><a href="#复制功能-copy-to-clipboard" class="headerlink" title="复制功能-copy-to-clipboard"></a>复制功能-<a href="https://www.npmjs.com/package/copy-to-clipboard">copy-to-clipboard</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import copy from &#x27;copy-to-clipboard&#x27;;</span><br><span class="line"></span><br><span class="line">copy(内容)</span><br></pre></td></tr></table></figure>





<p>也可以使用<a href="https://antd-mobile.gitee.io/zh/guide/quick-start">Ant Design Mobile</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd-mobile</span><br></pre></td></tr></table></figure>

<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>1.相对地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;.&quot;</span><br></pre></td></tr></table></figure>

<p>2.改为HashRouter</p>
<p>本地查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">The build folder is ready to be deployed.</span><br><span class="line">You may serve it with a static server:</span><br><span class="line"></span><br><span class="line">yarn global add serve</span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>React</category>
        <category>SDK</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-笔记</title>
    <url>/2019/03/07/jQuery-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="js字符串连接换行符没有效果解决办法"><a href="#js字符串连接换行符没有效果解决办法" class="headerlink" title="js字符串连接换行符没有效果解决办法"></a>js字符串连接换行符没有效果解决办法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;aaaaa&#x27;, b = &#x27;bbbbb&#x27;, c = &#x27;ccccc&#x27;;</span><br><span class="line">var arr = [a,b,c];</span><br><span class="line">var str = arr.join(&quot;\n&quot;);</span><br><span class="line">console.log(str);  </span><br></pre></td></tr></table></figure>

<h4 id="js-去掉字符串前后空格"><a href="#js-去掉字符串前后空格" class="headerlink" title="js 去掉字符串前后空格"></a>js 去掉字符串前后空格</h4><h6 id="js去掉字符串前后空格的五种方法"><a href="#js去掉字符串前后空格的五种方法" class="headerlink" title="js去掉字符串前后空格的五种方法"></a><a href="https://www.cnblogs.com/yingjie13/p/3534615.html">js去掉字符串前后空格的五种方法</a></h6><h6 id="js-去掉字符串前后空格-1"><a href="#js-去掉字符串前后空格-1" class="headerlink" title="js 去掉字符串前后空格"></a><a href="https://www.cnblogs.com/mingforyou/p/3930638.html">js 去掉字符串前后空格</a></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用jquery</span><br><span class="line"></span><br><span class="line">$.trim(str) </span><br><span class="line"></span><br><span class="line">jquery内部实现为：</span><br><span class="line"></span><br><span class="line">function trim(str)&#123;   </span><br><span class="line">    return str.replace(/^(\s|\u00A0)+/,&#x27;&#x27;).replace(/(\s|\u00A0)+$/,&#x27;&#x27;);   </span><br><span class="line">&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">　　 function trim(str)&#123; //删除左右两端的空格</span><br><span class="line">　　   return str.replace(/(^s*)|(s*$)/g, &quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function ltrim(str)&#123; //删除左边的空格</span><br><span class="line">　　   return str.replace(/(^s*)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function rtrim(str)&#123; //删除右边的空格</span><br><span class="line">　　   return str.replace(/(s*$)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">JS 去字符串空格 总结</span><br><span class="line"></span><br><span class="line">str为要去除空格的字符串:</span><br><span class="line">去除所有空格: </span><br><span class="line">str = str.replace(/\s+/g,&quot;&quot;); </span><br><span class="line">去除两头空格: </span><br><span class="line">str = str.replace(/^\s+|\s+$/g,&quot;&quot;);</span><br><span class="line">去除左空格：</span><br><span class="line">str=str.replace( /^\s*/, &#x27;&#x27;);</span><br><span class="line">去除右空格：</span><br><span class="line">str=str.replace(/(\s*$)/g, &quot;&quot;);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jqueryui.org.cn/">jQuery UI</a></p>
<h4 id="监听输入框的值变化事件"><a href="#监听输入框的值变化事件" class="headerlink" title="监听输入框的值变化事件"></a>监听输入框的值变化事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.search-input&quot;).bind(&#x27;input porpertychange&#x27;,function()&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不足：输入中文时，每输入一个字母，都会触发</p>
<h4 id="监听输入框的值变化-优化"><a href="#监听输入框的值变化-优化" class="headerlink" title="监听输入框的值变化-优化"></a>监听输入框的值变化-优化</h4><p>改为使用compositionstart和compositionend</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 搜索框</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        var text = $(this).val().trim();</span><br><span class="line">        // 匹配查询结果</span><br><span class="line">        searchCheck(text, &quot;.searchIpt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="回到页面顶部"><a href="#回到页面顶部" class="headerlink" title="回到页面顶部"></a>回到页面顶部</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onscroll = function()&#123;</span><br><span class="line">    if (document.documentElement.scrollTop || document.body.scrollTop &gt; 0) &#123;</span><br><span class="line">        document.getElementById(&quot;test&quot;).style.display=&#x27;block&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        document.getElementById(&quot;test&quot;).style.display=&#x27;none&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.onclick = function()&#123;</span><br><span class="line">    document.body.scrollTop = document.documentElement.scrollTop = 0;</span><br><span class="line">    document.getElementById(&quot;test&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><p><a href="https://www.lmlphp.com/user/58650/article/item/808868/">jQuery 学习之路（2）：选择器与过滤器</a></p>
<p>一、基本选择器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签选择器：　　$(&#x27;button&#x27;)</span><br><span class="line"></span><br><span class="line">ID选择器：　　$(&#x27;#id1&#x27;)</span><br><span class="line"></span><br><span class="line">类选择器：　　$(&#x27;.class1&#x27;)</span><br><span class="line"></span><br><span class="line">多重选择器：　　$(&#x27;#id1,.class1,button&#x27;)</span><br><span class="line"></span><br><span class="line">全体选择器：　　$(&#x27;*&#x27;) </span><br></pre></td></tr></table></figure>

<p>基本选择器完全根据 CSS 选择器的规范而来，对于了解 CSS 的用户非常容易掌握。</p>
<p><strong>二、层次选择器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子选择器：　　$(&#x27;parent &gt; child&#x27;)　　　　　　　　</span><br><span class="line">后代选择器：　　$(&#x27;ancester descendant&#x27;)</span><br><span class="line">单一兄弟选择器：　　$(&#x27;prev + next&#x27;)</span><br><span class="line">所有兄弟选择器：　　$(&#x27;prev ~ siblings&#x27;)</span><br></pre></td></tr></table></figure>

<p>　　子选择器和后代选择器的区别：子选择器是后代选择器的子集，前者只筛选出符合条件的直接子元素，后者筛选出符合条件的所有子孙元素。<br>　　单一兄弟选择器与所有兄弟选择器类似，前者只筛选出符合条件的下一个同辈元素，后者筛选出符合条件的后面的所有的同辈元素。</p>
<p><strong>三、属性选择器</strong></p>
<p>　　属性选择器可以筛选出包含特定属性的元素，或者根据属性的值的格式来筛选出元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性包含：　　　　　　　　[attr]</span><br><span class="line">属性值为指定字符串：　　　　[attr = &quot;value&quot;]</span><br><span class="line">属性值不为指定字符串：　　　　[attr != &quot;value&quot;]</span><br><span class="line">属性值以指定字符串开始：　　　　[attr ^= &quot;value&quot;]</span><br><span class="line">属性值以指定字符串结束：　　　　[attr $= &quot;value&quot;]</span><br><span class="line">属性值包含指定字符串：　　　　[attr *= &quot;value&quot;]</span><br><span class="line">多属性筛选：　　　　　　　　[attr1 *= &quot;value1&quot;][attr2 = &quot;value2&quot;]</span><br></pre></td></tr></table></figure>

<p>　　其中，[name != “value”] 的实现效率较低，可以使用 :not([attr = ‘value’]) 的形式</p>
<p><strong>四、基本过滤器</strong></p>
<p>　　有些过滤器的实现并不高效，原因参见官网，对于这部分过滤器，建议使用 .filter(selector) 来调用，如 $(‘div’).filter(‘:hidden’) ，后面所有的这类过滤器都以红色特殊标出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:animated　　　　    当前执行动画的元素</span><br><span class="line">:eq(index)　　　　    取出指定索引的元素（jQuery 对象是集合，索引从0开始）</span><br><span class="line">:gt(index)　　　　　　取出索引大于指定值的元素</span><br><span class="line">:lt(index)　　　　　　　　取出索引小于指定值的元素</span><br><span class="line">:first 　　　　　 取出第一个元素，即索引为0的元素</span><br><span class="line">:last　　　　　　取出最后一个元素，即索引为 size()-1 的元素</span><br><span class="line">:even　　　　　　取出索引为偶数的元素</span><br><span class="line">:odd　　　　　　取出索引为奇数的元素</span><br><span class="line">:header　　　　　取出所有标题元素，如 h1,h2,h3 等</span><br><span class="line">:root　　　　　　取出根元素</span><br><span class="line">:not(selector)　　取出所有不匹配指定过滤器的元素　</span><br><span class="line">:focus　　　　　　　　　　当前得到焦点的元素</span><br></pre></td></tr></table></figure>

<p><strong>五、子元素过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:first-child　　　　　　　　是其父元素的第一个子元素</span><br><span class="line">:last-child　　　　　　　　是其父元素的最后一个元素</span><br><span class="line">:first-of-type　　　　　　　　是同辈同类元素中的第一个元素</span><br><span class="line">:last-of-type　　　　　　　　是同辈同类元素中的最后一个元素</span><br><span class="line">:only-child　　　　　　　　是其父元素的唯一子元素</span><br><span class="line">:only-of-type　　　　　　在同辈元素中，没有同类元素的元素，即此元素是同辈元素中唯一的该类型元素</span><br><span class="line">:nth-child(index)　　　　其父元素的第 index 元素，该 index 从 1 开始</span><br><span class="line">:nth-last-child(index)　　　　其父元素的倒数第 index 元素，该 index 从 1 开始</span><br><span class="line">:nth-of-type(index)　　　　　　是同辈的同类元素中的第 index 元素，该 index 从 1 开始</span><br><span class="line">:nth-last-of-type(index)　　　　是同辈的同类元素中倒数第 index 元素，该 index 从 1 开始</span><br></pre></td></tr></table></figure>

<p><strong>六、内容过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:contains(text)　　　　　　包含指定字符串的元素</span><br><span class="line">:empty　　　　　　　　　　没有子元素的元素</span><br><span class="line">:has(selector)　　　　　　 包含至少一个指定的选择器匹配的元素</span><br><span class="line">:parent　　　　　　　　　　包含至少一个子节点的（一个元素或文本）元素</span><br></pre></td></tr></table></figure>

<p><strong>七、表单过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:input</span><br><span class="line">:text</span><br><span class="line">:password</span><br><span class="line">:button</span><br><span class="line">:reset</span><br><span class="line">:submit</span><br><span class="line">:radio</span><br><span class="line">:checkbox</span><br><span class="line">:checked</span><br><span class="line">:selected</span><br><span class="line">:file</span><br><span class="line">:image</span><br><span class="line">:focus</span><br><span class="line">:enabled</span><br><span class="line">:disabled</span><br></pre></td></tr></table></figure>

<p><strong>八、可见性过滤器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:hidden　　　　当前隐藏的元素</span><br><span class="line">:visible　　　　当前显示的元素</span><br></pre></td></tr></table></figure>



<h4 id="Tabs切换内容"><a href="#Tabs切换内容" class="headerlink" title="Tabs切换内容"></a>Tabs切换内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.tab li&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;.tab li&quot;).eq($(this).index()).addClass(&quot;active&quot;).siblings().removeClass(&quot;active&quot;);</span><br><span class="line">    $(&quot;.tabContent div&quot;).hide().eq($(this).index()).show();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<h4 id="jQuery自定义扩展"><a href="#jQuery自定义扩展" class="headerlink" title="jQuery自定义扩展"></a>jQuery自定义扩展</h4><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul>
<li>jquery-ui</li>
<li>jquery-lazyload</li>
<li>jquery-color</li>
</ul>
<h4 id="jquery获取name属性为数组的值"><a href="#jquery获取name属性为数组的值" class="headerlink" title="jquery获取name属性为数组的值"></a>jquery获取name属性为数组的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;nameArr[]&quot; value=&quot;1&quot; title=&quot;标题1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;nameArr[]&quot; value=&quot;2&quot; title=&quot;标题2&quot;&gt;</span><br><span class="line"></span><br><span class="line">var inputs = $(&#x27;input[name^=&quot;nameArr&quot;]&#x27;);</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/jQuery-%E7%AC%94%E8%AE%B0/1.png" alt="需求"></p>
<h5 id="新增按钮事件"><a href="#新增按钮事件" class="headerlink" title="新增按钮事件"></a>新增按钮事件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#hb-setting&quot;).on(&quot;click&quot;, &quot;#drawCard-add&quot;, function () &#123;</span><br><span class="line">    var i = $(this).data(&#x27;index&#x27;) + 1;  // name值的下标</span><br><span class="line">    var li = &#x27;&lt;div class=&quot;layui-form-item gear-item&quot;&gt;&#x27;+</span><br><span class="line">                &#x27;&lt;label class=&quot;layui-form-label&quot;&gt;&lt;/label&gt;&#x27;+</span><br><span class="line">                &#x27;&lt;div class=&quot;layui-input-block&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;number&quot; name=&quot;gear7[&#x27;+ i +&#x27;]&quot; min=&quot;0&quot; lay-verify=&quot;required&quot; lay-reqText=&quot;...&quot; placeholder=&quot;请输入...&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;number&quot; name=&quot;reg_day7[&#x27;+ i +&#x27;]&quot; min=&quot;0&quot; lay-verify=&quot;required&quot; lay-reqText=&quot;...&quot; placeholder=&quot;请输入...&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;number&quot; name=&quot;draw_card_times7[&#x27;+ i +&#x27;]&quot; min=&quot;0&quot; lay-verify=&quot;draw_card_times&quot; placeholder=&quot;请输入...&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;text&quot; name=&quot;money7[&#x27;+ i +&#x27;]&quot; lay-verify=&quot;drawCard_money&quot; placeholder=&quot;请输入...&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline w154&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;text&quot; name=&quot;frontend_money7[&#x27;+ i +&#x27;]&quot; placeholder=&quot;请输入前端展示金额&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-input-inline w154&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;input type=&quot;text&quot; name=&quot;describe7[&#x27;+ i +&#x27;]&quot; lay-verify=&quot;required&quot; lay-reqText=&quot;...&quot; placeholder=&quot;请输入...&quot; class=&quot;layui-input&quot;&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">                    &#x27;&lt;div class=&quot;layui-inline&quot;&gt;&#x27;+</span><br><span class="line">                        &#x27;&lt;i class=&quot;layui-icon layui-icon-add-circle&quot; id=&quot;drawCard-add&quot; data-index=&quot;&#x27;+ i +&#x27;&quot;&gt;&lt;/i&gt; &#x27;+</span><br><span class="line">                    &#x27; &lt;/div&gt;&#x27;+</span><br><span class="line">                &#x27;&lt;/div&gt;&#x27;+</span><br><span class="line">            &#x27;&lt;/div&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">    $(this).removeAttr(&quot;id&quot;);</span><br><span class="line">    $(this).removeClass(&quot;layui-icon-add-circle&quot;);</span><br><span class="line">    $(this).addClass(&quot;layui-icon-reduce-circle&quot;);</span><br><span class="line">    $(this).addClass(&quot;drawCard-del&quot;);</span><br><span class="line"></span><br><span class="line">    // 在前面追加元素</span><br><span class="line">    $(&quot;#drawCard_hb_tr&quot;).before(li);</span><br><span class="line"></span><br><span class="line">    form.render(); //更新全部</span><br><span class="line"></span><br><span class="line">    // 活动状态为“关闭”时——不强制要求输入档位内容</span><br><span class="line">    var name_arr = [&#x27;gear7&#x27;, &#x27;reg_day7&#x27;, &#x27;describe7&#x27;, &#x27;cash_notice7&#x27;];</span><br><span class="line">    updateVerify($(&#x27;[name=&quot;reward_7&quot;]&#x27;).val(), name_arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="更新表单的验证条件函数"><a href="#更新表单的验证条件函数" class="headerlink" title="更新表单的验证条件函数"></a>更新表单的验证条件函数</h5><p>开启状态，必填，关闭状态，不必填</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更新表单的验证条件</span><br><span class="line"> function updateVerify(status, name_arr) &#123;</span><br><span class="line">    for(var i in name_arr) &#123;</span><br><span class="line">        // 关闭状态，不强制要求输入档位内容</span><br><span class="line">        if(status === &quot;0&quot;) &#123;</span><br><span class="line">            $(&#x27;[name^=&quot;&#x27; + name_arr[i]+ &#x27;&quot;]&#x27;).removeAttr(&quot;lay-verify&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $(&#x27;[name^=&quot;&#x27; + name_arr[i]+ &#x27;&quot;]&#x27;).attr(&quot;lay-verify&quot;, &quot;required&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    form.render(); // 更新表单元素</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="减去按钮事件"><a href="#减去按钮事件" class="headerlink" title="减去按钮事件"></a>减去按钮事件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除按钮</span><br><span class="line">$(&quot;#hb-setting&quot;).on(&quot;click&quot;, &quot;.drawCard-del&quot;, function () &#123;</span><br><span class="line">    var idx = $(this).data(&#x27;index&#x27;);  // 当前被删除的index</span><br><span class="line">    $(this).parent(&quot;.layui-inline&quot;).parent(&quot;.layui-input-block&quot;).parent(&quot;.layui-form-item&quot;).remove();   // 删除当前列的元素</span><br><span class="line"></span><br><span class="line">    updateGearIndex(idx, &quot;#drawCard-add&quot;);      </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 更新档位中的name值/减号/加号的下标</span><br><span class="line">function updateGearIndex(idx, add_btn) &#123;</span><br><span class="line">    var gear_items = $(&#x27;.layui-show&#x27;).find(&quot;.gear-item&quot;);  // 档位配置的所有列</span><br><span class="line">    var gear_len = gear_items.length;  // 档位的列数</span><br><span class="line">    // 更新下标</span><br><span class="line">    for(var j = idx; j &lt; gear_len; j++) &#123;</span><br><span class="line">        var inputs = $(gear_items[j]).find(&#x27;.layui-input-block&#x27;).children().find(&#x27;input&#x27;);   // 当前横列的所有input</span><br><span class="line">        $(gear_items[j]).find(&#x27;.layui-icon-reduce-circle&#x27;).attr(&#x27;data-index&#x27;, j);    // 修改减号的index——都减1</span><br><span class="line"></span><br><span class="line">        for(var k = 0; k &lt; inputs.length; k++) &#123;</span><br><span class="line">            var name = $(inputs[k]).attr(&#x27;name&#x27;);</span><br><span class="line">            $(inputs[k]).attr(&quot;name&quot;, setCharOnIndex(name, name.length - 2, j));    // 修改name值的下标-减1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    form.render(); //更新全部</span><br><span class="line"></span><br><span class="line">     // 修改加号的data-index属性</span><br><span class="line">    $(add_btn).attr(&#x27;data-index&#x27;, gear_len -1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="切换状态事件"><a href="#切换状态事件" class="headerlink" title="切换状态事件"></a>切换状态事件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 监听活动状态-等级红包</span><br><span class="line"> form.on(&#x27;select(reward_1)&#x27;, function(data)&#123;</span><br><span class="line">    var name_arr = [&#x27;gear1&#x27;, &#x27;reg_day1&#x27;, &#x27;level1&#x27;, &#x27;describe1&#x27;, &#x27;cash_notice1&#x27;];</span><br><span class="line"></span><br><span class="line">    updateVerify(data.value, name_arr);</span><br><span class="line"></span><br><span class="line">    upateLabelIcon(data.value, [&#x27;cash_level1&#x27;, &#x27;cash_notice1&#x27;]);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">// 更新表单元素是否必填的 * 图标</span><br><span class="line">function upateLabelIcon(status, name_arr2) &#123;</span><br><span class="line">    for(var i in name_arr2) &#123;</span><br><span class="line">        if(status === &quot;0&quot;) &#123;</span><br><span class="line">            $(&#x27;[name=&quot;&#x27; + name_arr2[i] + &#x27;&quot;]&#x27;).parent(&quot;.layui-input-block&quot;).siblings(&quot;.layui-form-label&quot;).removeClass(&quot;required&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $(&#x27;[name=&quot;&#x27; + name_arr2[i] + &#x27;&quot;]&#x27;).parent(&quot;.layui-input-block&quot;).siblings(&quot;.layui-form-label&quot;).addClass(&quot;required&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Lucky_Freedom/article/details/110231690">jquery获取name属性为数组的值（天王老子来了我也这样写）…</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//补充一下知识</span><br><span class="line">$(&quot;input[name^=&#x27;news&#x27;]&quot;)         选择所有的name属性以&#x27;news&#x27;开头的input元素 </span><br><span class="line">$(&quot;input[name$=&#x27;news&#x27;]&quot;)         选择所有的name属性以&#x27;news&#x27;结尾的input元素 </span><br><span class="line">$(&quot;input[name*=&#x27;man&#x27;]&quot;)          选择所有的name属性包含&#x27;news&#x27;的input元素</span><br><span class="line"></span><br><span class="line">//下面是代码</span><br><span class="line">var jurisdiction=&#123;&#125;;//创建一个空对象</span><br><span class="line">$(&#x27;input[name^=&quot;jurisdiction&quot;]:checked&#x27;).each(function(index,element)&#123;	//index下标 element 当前选中的元素</span><br><span class="line">  jurisdiction[index] = $(this).val();//压入对象数组</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/lfbin5566/article/details/115966302">jquery js 获取input name为数组或者属性相同的值</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;nameArr[]&quot; value=&quot;1&quot; title=&quot;标题1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;nameArr[]&quot; value=&quot;2&quot; title=&quot;标题2&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;video_url0&quot; value=&quot;0&quot; name=&quot;nameArr0&quot; class=&quot;video_url&quot; placeholder=&quot;请上传活动视频&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;video_url1&quot; value=&quot;1&quot; name=&quot;nameArr1&quot; class=&quot;video_url&quot; placeholder=&quot;请上传活动视频&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;video_url2&quot; value=&quot;2&quot; name=&quot;nameArr2&quot; class=&quot;video_url&quot;</span><br><span class="line">placeholder=&quot;请上传活动视频&quot;&gt;</span><br><span class="line"> </span><br><span class="line">$(&quot;input[name^=&#x27;nameArr&#x27;]&quot;)//获取所有的name属性以&#x27;nameArr&#x27;开头的input元素 </span><br><span class="line">$(&quot;input[name$=&#x27;nameArr&#x27;]&quot;)//获取所有的name属性以&#x27;nameArr&#x27;结尾的input元素 </span><br><span class="line">$(&quot;input[name*=&#x27;nameArr&#x27;]&quot;)//获取所有的name属性包含&#x27;nameArr&#x27;的input元素</span><br><span class="line"> </span><br><span class="line">//创建一个空数组</span><br><span class="line">var data_arr = [];</span><br><span class="line">//index下标 element 当前选中的元素</span><br><span class="line">$(&#x27;input[name^=&quot;nameArr&quot;]&#x27;).each(function(index,element)&#123;</span><br><span class="line">    //压入数组	</span><br><span class="line">    data_arr[index] = $(this).val();</span><br><span class="line">&#125;);</span><br><span class="line">console.log(data_arr);</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jsTree笔记</title>
    <url>/2021/01/15/jsTree%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.jstree.com.cn/">jsTree</a></p>
<h4 id="清除上次操作记录"><a href="#清除上次操作记录" class="headerlink" title="清除上次操作记录"></a>清除上次操作记录</h4><p><strong>需求</strong>：当进来页面时，页面只展开第一级目录</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/jsTree%E7%AC%94%E8%AE%B0/note1.png" alt="jstree只展开第一级目录"></p>
<p><strong>目前存在问题</strong>：当用户在树上操作了置换，重新刷新页面，进来置换，依然保持上次操作后的状态，如图：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/jsTree%E7%AC%94%E8%AE%B0/note2.png" alt="依然保持上次操作后的状态"></p>
<p>解决方法：</p>
<p>在changed.jstree事件里面，让树重新刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#jstree_demo_div&#x27;).on(&quot;changed.jstree&quot;, function (e, data) &#123;</span><br><span class="line">      $(&#x27;#jstree_demo_div&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>写法1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#treeId&#x27;).jstree(true).refresh();</span><br></pre></td></tr></table></figure>

<p>写法2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#jstree_demo_div&#x27;).jstree(&#x27;refresh&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="只展开第一级目录"><a href="#只展开第一级目录" class="headerlink" title="只展开第一级目录"></a>只展开第一级目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[0].state.opened = true;</span><br><span class="line">rendertree_group_admin(data);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>state.opened是控制展开还是收起，设置第一级的state.opened为true。</p>
</blockquote>
<p>结合（解决jstree初始状态只展开第一级目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on(&#x27;changed.jstree&#x27;, function (e, data) &#123;</span><br><span class="line">    // 清除树用户之前的操作记录</span><br><span class="line">    $(&#x27;#group_ admin&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">success: function (ret)&#123;</span><br><span class="line">    if (ret.hasOwnProperty(&quot;code&quot;)) &#123;</span><br><span class="line">    	var data = ret.hasOwnProperty(&quot;data&quot;) &amp;&amp; ret.data != &quot;&quot; ? ret.data : &quot;&quot;;</span><br><span class="line">        if (ret.code === 1) &#123;</span><br><span class="line">            $(&quot;#group_admin&quot;).jstree(&quot;destroy&quot;);</span><br><span class="line">            data[Ø].state, opened = true;</span><br><span class="line">            rendertree_group_admin(data);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在bug：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取是否刚登录进来页面</span><br><span class="line">var isFirst = localStorage.getItem(&#x27;loginInPage&#x27;);</span><br><span class="line">if(isFirst == &#x27;true&#x27;)&#123;</span><br><span class="line">	// 清除树的用户之前的操作记录</span><br><span class="line">	$(&#x27;#group_admin&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="展开全部"><a href="#展开全部" class="headerlink" title="展开全部"></a>展开全部</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#group_admin&quot;).jstree(&quot;close_all&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="收起全部"><a href="#收起全部" class="headerlink" title="收起全部"></a>收起全部</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#group_admin&quot;).jstree(&quot;open_all&quot;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端插件</category>
        <category>jsTree</category>
      </categories>
      <tags>
        <tag>jsTree</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify</title>
    <url>/2020/08/24/docsify/</url>
    <content><![CDATA[<h4 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a><a href="https://docsify.js.org/#/zh-cn/quickstart">官网文档</a></h4><p><a href="https://docsify.js.org/#/zh-cn/">docsify中文文档</a></p>
<p>摘自<a href="https://www.jianshu.com/p/4883e95aa903">视觉派pie</a> 、<a href="https://www.imooc.com/article/287154">Docsify快速搭建个人博客</a></p>
<blockquote>
<p>文档网站生成工具、快速搭建个人博客</p>
</blockquote>
<blockquote>
<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会将 <code>.md</code> 转成 <code>.html</code> 文件，所有转换工作都是在运行时进行。</p>
<p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 <code>.html</code> 文件“污染” commit 记录，只需要创建一个 <code>index.html</code> 就可以开始写文档而且直接部署在<a href="https://links.jianshu.com/go?to=https://docsify.js.org/%23/zh-cn/deploy">GitHub Pages</a>。</p>
</blockquote>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>无需构建，写完文档直接发布</li>
<li>容易使用并且轻量 (~19kB gzipped)</li>
<li>智能的全文搜索</li>
<li>提供多套主题</li>
<li>丰富的 API</li>
<li>支持 Emoji</li>
<li>兼容 IE10+</li>
<li>支持 SSR (<a href="https://links.jianshu.com/go?to=https://github.com/docsifyjs/docsify-ssr-demo">example</a>)</li>
</ul>
<h4 id="生成文档的工具："><a href="#生成文档的工具：" class="headerlink" title="生成文档的工具："></a>生成文档的工具：</h4><p>阿里的语雀、DokuWiki、MDwiki、HDwiki</p>
<p><a href="https://www.jianshu.com/p/84b46b67031d">使用Typora+docsify+GitHub Pages搭建团队知识库</a></p>
<h5 id="文档案例"><a href="#文档案例" class="headerlink" title="文档案例"></a>文档案例</h5><p><a href="https://hanxueqing.github.io/Douban-Movie/#/?id=%E4%BD%BF%E7%94%A8vue%E5%85%A8%E5%AE%B6%E6%A1%B6nodejs%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B0%8F%E5%9E%8B%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE">使用Vue全家桶+Node.js搭建的小型全栈项目</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>全局安装<code>docsify-cli</code>工具，可以方便地创建及在本地预览生成的文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>

<h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>如果想在项目的 <code>./docs</code> 目录里写文档，直接通过 <code>init</code> 初始化项目。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure>

<h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p>通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。默认访问地址 <a href="http://localhost:3000/">http://localhost:3000</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure>

<h4 id="添加左侧导航栏-loadSidebar-true"><a href="#添加左侧导航栏-loadSidebar-true" class="headerlink" title="添加左侧导航栏-loadSidebar: true"></a>添加左侧导航栏-loadSidebar: true</h4><ol>
<li><p>修改docs/index.html，配置 <code>loadSidebar</code> 选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">  loadSidebar: true,  // 开启左侧导航栏</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  repo: &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录(docs)（与index.html同目录）中，新建<code>_sidebar.md</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 常用网址     // 分组名</span><br><span class="line"></span><br><span class="line">  * [Vue](website/vue.md)   // 链接到对应文件</span><br><span class="line">* 收藏博客</span><br><span class="line"></span><br><span class="line">  * [javascript](blogs/javascript.md)</span><br><span class="line">* 常用软件</span><br><span class="line"></span><br><span class="line">  * [web前端](software/web.md)</span><br><span class="line">* 笔记</span><br><span class="line"></span><br><span class="line">  [web前端](software/web.md)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>alias</code> 避免不必要的回退过程 （即访问非根目录的页面时，会报<code>_sidebar.md</code>文件是404)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">    loadSidebar: true,</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#x27;/.*/_sidebar.md&#x27;: &#x27;/_sidebar.md&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建对应的文件（如：<code>website/vue.md</code> 【新建website目录，新建vue.md】）</p>
</li>
</ol>
<h4 id="docsify-侧边栏目录扩展"><a href="#docsify-侧边栏目录扩展" class="headerlink" title="docsify 侧边栏目录扩展"></a><a href="https://www.cnblogs.com/baby123/p/14361402.html">docsify 侧边栏目录扩展</a></h4><p>官方文档没有介绍左侧目录的折叠问题，可以使用这个开源：</p>
<p>git地址 <a href="https://github.com/iPeng6/docsify-sidebar-collapse">https://github.com/iPeng6/docsify-sidebar-collapse</a></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar-folder.min.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/docsify-sidebar-collapse.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用sidebarDisplayLevel设置默认折叠的层级：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">      sidebarDisplayLevel: 1,   // 如果想收起的是第一层级，设置为0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后根据自己需求修改样式。</p>
<h4 id="侧边栏三层级配置"><a href="#侧边栏三层级配置" class="headerlink" title="侧边栏三层级配置"></a>侧边栏三层级配置</h4><p>参考<a href="https://cpury.com/1408.html">docsify侧边栏折叠</a></p>
<p>_sidebar.md：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 项目</span><br><span class="line">    * [管理后台](project/manage.md)</span><br><span class="line">        * [新广告后台](project/ad_admin.md)</span><br><span class="line">        * [纳米盒应用后台2.0](project/AppManage2.0.md)</span><br><span class="line">        * [纳米盒管理后台](project/manage_new.md)</span><br><span class="line">        * [黄豆芽办公系统](project/ai.huangdouya.com.md)</span><br><span class="line">        * [黄豆芽sdk运营后台](project/hanteng-manage.vxinyou.com.md)</span><br><span class="line">        * [切支付](project/check_pay.md)</span><br></pre></td></tr></table></figure>

<p>manage.md：（里面写什么都可以）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 新广告后台</span><br><span class="line">## 纳米盒应用后台2.0</span><br><span class="line">## 纳米盒管理后台</span><br><span class="line">## 黄豆芽办公系统</span><br><span class="line">## 黄豆芽sdk运营后台</span><br><span class="line">## 切支付</span><br></pre></td></tr></table></figure>

<h4 id="添加代码高亮"><a href="#添加代码高亮" class="headerlink" title="添加代码高亮"></a>添加代码高亮</h4><p>引入js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://docsify.js.org/#/zh-cn/language-highlight">代码高亮</a></p>
<p>写代码的时候要加上bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```bash</span><br><span class="line">echo &quot;hello&quot;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>



<h4 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h4><ol>
<li><p>修改<code>window.$docsify</code>（在<code>docs/index.html</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">    loadSidebar: true,</span><br><span class="line">    name: &#x27;&#x27;,</span><br><span class="line">    repo: &#x27;&#x27;,</span><br><span class="line">    search: &#123;   // 添加</span><br><span class="line">        noData: &#123;</span><br><span class="line">          &#x27;/&#x27;: &#x27;无匹配结果&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#x27;auto&#x27;,</span><br><span class="line">        placeholder: &#123;</span><br><span class="line">          &#x27;/&#x27;: &#x27;搜索&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>search.min.js</code>插件（在<code>docs/index.html</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h4 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h4><p><a href="https://blog.csdn.net/weixin_34568812/article/details/112002961">如何把 Docsify 文档部署到服务器?</a></p>
<p><a href="https://www.jianshu.com/p/84b46b67031d">使用Typora+docsify+GitHub Pages搭建团队知识库</a></p>
<p><a href="https://juejin.cn/post/6844904115466682375">使用docsify 写开源文档+部署到云服务器</a></p>
<h4 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;工作文档&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;description&quot; content=&quot;Description&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;shortcut icon&quot; href=&quot;./favicon.ico&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar-folder.min.css&quot; /&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    a&#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">    a:hover&#123;</span><br><span class="line">      text-decoration: underline;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar ul li a&#123;</span><br><span class="line">      /* color: #0088CC !important; */</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .content td a, .content p a&#123;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section blockquote p&#123;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section h5&#123;</span><br><span class="line">      font-size: 1.05rem;</span><br><span class="line">      margin-top: 0.5rem;</span><br><span class="line">      margin-bottom: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section hr&#123;</span><br><span class="line">      margin: 2em 0 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.folder::before&#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.file::before&#123;</span><br><span class="line">      background: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li::before&#123;</span><br><span class="line">      content: &quot;-&quot;;</span><br><span class="line">      top: -1px;</span><br><span class="line">      left: -10px;</span><br><span class="line">      width: 10px;</span><br><span class="line">      height: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.open::before&#123;</span><br><span class="line">      transform: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section p&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section th&#123;</span><br><span class="line">      background-color: #f8f8f8;</span><br><span class="line">      color: #909399;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section pre&#123;</span><br><span class="line">      padding: 0 0.6rem;</span><br><span class="line">      margin: 0.6em 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section pre&gt;code&#123;</span><br><span class="line">      padding: 0.4rem 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section code, .markdown-section output:after, .markdown-section pre&#123;</span><br><span class="line">      font-family: &#x27;Source Sans Pro,Helvetica Neue,Arial,sans-serif&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    /* .sidebar&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-toggle&#123;</span><br><span class="line">      width: 184px;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">      left: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section&#123;</span><br><span class="line">      max-width: 90%;</span><br><span class="line">    &#125; */</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.$docsify = &#123;</span><br><span class="line">      // name: &#x27;工作文档&#x27;,</span><br><span class="line">      auto2top: true,</span><br><span class="line">      repo: &#x27;&#x27;,</span><br><span class="line">      loadSidebar: true,</span><br><span class="line">      sidebarDisplayLevel: 0,</span><br><span class="line">      // subMaxLevel: 2,</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &#x27;/.*/_sidebar.md&#x27;: &#x27;/_sidebar.md&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      search: &#123;</span><br><span class="line">          noData: &#123;</span><br><span class="line">            &#x27;/&#x27;: &#x27;无匹配结果&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          paths: &#x27;auto&#x27;,</span><br><span class="line">          placeholder: &#123;</span><br><span class="line">            &#x27;/&#x27;: &#x27;搜索&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;!-- Docsify v4 --&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify@4&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/docsify-sidebar-collapse.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文档网站生成工具</category>
        <category>docsify</category>
      </categories>
      <tags>
        <tag>docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>layui 笔记</title>
    <url>/2020/06/24/layui-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://github.com/sentsin/layui">layui-github</a></p>
<p><a href="https://layer.layui.com/api.html">layer文档</a></p>
<p><a href="https://layer.layui.com/api.html#btn">layer.comfirm弹窗按钮文字和事件</a></p>
<h4 id="layui表格的复选框全选和单选的功能-全选所有分页的数据"><a href="#layui表格的复选框全选和单选的功能-全选所有分页的数据" class="headerlink" title="layui表格的复选框全选和单选的功能-全选所有分页的数据"></a>layui表格的复选框全选和单选的功能-全选所有分页的数据</h4><ol>
<li><p>表格需要导出的，导出时，要将自定义的复选框去除</p>
</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; field: <span class="string">&#x27;checkbox&#x27;</span>, title: <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; lay-filter=&quot;allAccountList&quot; lay-skin=&quot;primary&quot;&gt;&#x27;</span>, width: 66 ,templet: <span class="keyword">function</span>(res)&#123;</span><br><span class="line">   <span class="built_in">return</span> <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; data-id=&quot;&#x27;</span>+ res.id +<span class="string">&#x27;&quot; lay-filter=&quot;accountList&quot; lay-skin=&quot;primary&quot;&gt;&#x27;</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 监听全选复选框</span><br><span class="line">form.on(<span class="string">&#x27;checkbox(allAccountList)&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!list.length) &#123;</span><br><span class="line">        $(<span class="string">&#x27;input[lay-filter=&quot;allAccountList&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    // 是否全选</span><br><span class="line">    var isAll = data.elem.checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    // 是否被选中</span><br><span class="line">    <span class="keyword">if</span>(isAll) &#123;</span><br><span class="line">        ids = list.map(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">            <span class="built_in">return</span> item.id;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ids = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 更新复选框样式</span><br><span class="line">    $(<span class="string">&#x27;.layui-table input[type=&quot;checkbox&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, isAll);</span><br><span class="line">    // 重新渲染</span><br><span class="line">    form.render(<span class="string">&#x27;checkbox&#x27;</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">// 监听单选复选框</span><br><span class="line">form.on(<span class="string">&#x27;checkbox(accountList)&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">    // 是否被选中</span><br><span class="line">    var isChecked = data.elem.checked;</span><br><span class="line">    // 是否全选</span><br><span class="line">    var isAll = <span class="literal">false</span>;</span><br><span class="line">    // 当前项的<span class="built_in">id</span></span><br><span class="line">    var _id = $(data.elem).data(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isChecked) &#123;</span><br><span class="line">        // 追加</span><br><span class="line">        ids.push(_id);</span><br><span class="line">        isAll = (ids.length == list.length) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 减去</span><br><span class="line">        var index = ids.indexOf(_id);</span><br><span class="line">        ids.splice(index, 1);</span><br><span class="line"></span><br><span class="line">        isAll =  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 更新全选复选框的样式</span><br><span class="line">    $(<span class="string">&#x27;input[lay-filter=&quot;allAccountList&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, isAll);</span><br><span class="line">    // 重新渲染</span><br><span class="line">    form.render(<span class="string">&#x27;checkbox&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="layui表格复选框全选-全选当前页面（layui自身功能）"><a href="#layui表格复选框全选-全选当前页面（layui自身功能）" class="headerlink" title="layui表格复选框全选-全选当前页面（layui自身功能）"></a>layui表格复选框全选-全选当前页面（layui自身功能）</h4><p><a href="https://www.layui.site/doc/modules/table.html#oncheckbox">触发复选框选择</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.on(&#x27;checkbox(test)&#x27;, function(obj)&#123;</span><br><span class="line">  console.log(obj); //当前行的一些常用操作集合</span><br><span class="line">  console.log(obj.checked); //当前是否选中状态</span><br><span class="line">  console.log(obj.data); //选中行的相关数据</span><br><span class="line">  console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.layui.site/demo/table/operate.html">数据操作</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 获取选中数据</span><br><span class="line"></span><br><span class="line">var checkStatus = table.checkStatus(&#x27;idTest&#x27;)</span><br><span class="line">,data = checkStatus.data;</span><br><span class="line">layer.alert(JSON.stringify(data));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //获取选中数目</span><br><span class="line"></span><br><span class="line">var checkStatus = table.checkStatus(&#x27;idTest&#x27;)</span><br><span class="line">,data = checkStatus.data;</span><br><span class="line">layer.msg(&#x27;选中了：&#x27;+ data.length + &#x27; 个&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//验证是否全选</span><br><span class="line"></span><br><span class="line">var checkStatus = table.checkStatus(&#x27;idTest&#x27;);</span><br><span class="line">layer.msg(checkStatus.isAll ? &#x27;全选&#x27;: &#x27;未全选&#x27;)</span><br></pre></td></tr></table></figure>



<h4 id="移动端，点击日期插件不显示"><a href="#移动端，点击日期插件不显示" class="headerlink" title="移动端，点击日期插件不显示"></a>移动端，点击日期插件不显示</h4><p>解决方法：加上，trigger: ‘click’ //采用click弹出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">laydate.render(&#123;</span><br><span class="line">elem: <span class="string">&#x27;#compareTime&#x27;</span> //指定元素</span><br><span class="line">, <span class="built_in">type</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">, max: endTime</span><br><span class="line">, min: minTime</span><br><span class="line">, trigger: <span class="string">&#x27;click&#x27;</span> //采用click弹出</span><br><span class="line">, <span class="keyword">done</span>: <span class="keyword">function</span> (value, <span class="built_in">date</span>, endDate) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;,</span><br><span class="line">ready: <span class="keyword">function</span>(<span class="built_in">date</span>)&#123;</span><br><span class="line">   .....</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="判断复选框是否选中-获取复选框的值"><a href="#判断复选框是否选中-获取复选框的值" class="headerlink" title="判断复选框是否选中(获取复选框的值)"></a>判断复选框是否选中(获取复选框的值)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.elem.checked</span><br></pre></td></tr></table></figure>

<h4 id="设置layer-alert和layer-comfirm为不可resize"><a href="#设置layer-alert和layer-comfirm为不可resize" class="headerlink" title="设置layer-alert和layer-comfirm为不可resize"></a>设置layer-alert和layer-comfirm为不可resize</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将resize参数设置为<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="layui表格固定表头"><a href="#layui表格固定表头" class="headerlink" title="layui表格固定表头"></a>layui表格固定表头</h4><p>给表格设置高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    elem: &#x27;#hourData&#x27;</span><br><span class="line">    , data: res</span><br><span class="line">    , height: 330</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="导出excel表格"><a href="#导出excel表格" class="headerlink" title="导出excel表格"></a>导出excel表格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ins1 = table.render (&#123;</span><br><span class="line">	elem: &#x27;#demo &#x27;</span><br><span class="line">	,id: &#x27;test&#x27;</span><br><span class="line">	...</span><br><span class="line">&#125;)</span><br><span class="line">// 将上述表格示例导出为csv文件</span><br><span class="line">table.exportFile(ins1.config.id，data) ; // data为该实例中的任意数量的数据</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 渲染表格</span><br><span class="line">function table_list(list)&#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    console.log(cols);</span><br><span class="line">    table.render(&#123;</span><br><span class="line">        elem:&quot;#campaigninfo_ table&#x27;</span><br><span class="line">        , page: true  // 开启分市</span><br><span class="line">        , id:&quot;campaigninfoTable&quot;</span><br><span class="line">        , title:”推广活动详情&quot;</span><br><span class="line">        , cols: [cols]</span><br><span class="line">        , data: list</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 导出按钮</span><br><span class="line">$(&quot;.down-file&quot;).click(function() &#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    var arr = [] ;</span><br><span class="line">    for(var i = 0; i&lt; cols.length; i++) &#123;</span><br><span class="line">        arr.push(cols[i].title);</span><br><span class="line">    &#125;</span><br><span class="line">    // 导出所有数据，所以用返回的全部数据</span><br><span class="line">    table.exportFile(&quot;campaigninfoTable&quot;, list, &#x27;xls&#x27;); // 默认导出csv, 也可以为: xls</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="导出excel表格时，去掉页面表头显示的小图标"><a href="#导出excel表格时，去掉页面表头显示的小图标" class="headerlink" title="导出excel表格时，去掉页面表头显示的小图标"></a>导出excel表格时，去掉页面表头显示的小图标</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note2.png" alt="去掉导出表格的表头显示的小图标"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var campaigninfoTable;</span><br><span class="line">// 渲染表格</span><br><span class="line">function table_list(list)&#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    // 不受影响的表头</span><br><span class="line">    var colsold = $.extend(true,[],cols);</span><br><span class="line"></span><br><span class="line">    campalgnintoTable = table.render( &#123;</span><br><span class="line">        elem:&#x27;#campaigninfo_table&#x27;</span><br><span class="line">        , page: true // 开启分页</span><br><span class="line">        , cellMinwidth: 160</span><br><span class="line">        , id: &quot;campaigninfoTable”</span><br><span class="line">        , title: &quot;推广活动详情”</span><br><span class="line">        , cols:[colsold]</span><br><span class="line">        , data: list</span><br><span class="line">        , done: function (res, curr, count) &#123;</span><br><span class="line">            // 表格头部样式处理</span><br><span class="line">            tableHeaderscroll(&quot; #campaigninfo table&quot;, count);</span><br><span class="line">            // 分页的显示隐藏</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function downloadTable(tableobj, tableId, data) &#123;</span><br><span class="line">    // 循环表头，将图标去掉(下载表格前，将图标去掉) </span><br><span class="line">    var colsNew = table0bj.config.cols[0];</span><br><span class="line">    var colsold = $.extend(true,[] , colsNew);</span><br><span class="line">    for (var item in colsNew)&#123;</span><br><span class="line">        var title = colsNew [item][&#x27;title&#x27;];</span><br><span class="line">        if (title.index0f(&quot;&lt;/span&gt;&quot;) &gt; -1) &#123;</span><br><span class="line">            var arr = colsNew[item][&#x27;title&#x27;].split(&quot;&lt;/span&gt;&quot;);</span><br><span class="line">            colsNew[item][&#x27;title&#x27;] = arr[1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 设置新表头</span><br><span class="line">    table0bj.config.cols[0] = colsNew;</span><br><span class="line">    if (data.length)&#123;</span><br><span class="line">        // 导出所有数据，所以用返回的全部数据</span><br><span class="line">        layui.table.exportFile(tableId, data,&#x27;xls&#x27;); // 默认导出csV,也可以为: xls</span><br><span class="line">        // 设置有图标表头</span><br><span class="line">        table0bi.config.cols[0] = cols0ld;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        layer.msg(&#x27;暂无数据&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击下载时，将表格的头部图标去掉，执行了下载表格的函数之后，将表头的图标加上。<br>注意：由于表头cols是对象，指向地址，修改了，会影响全局的（例如：点击时间间隔时会拿到去掉图标的表头）<br>解决：（保留原来的不加以修改的表头数据）</p>
</blockquote>
<h4 id="修改重载表格时的加载图标"><a href="#修改重载表格时的加载图标" class="headerlink" title="修改重载表格时的加载图标"></a>修改重载表格时的加载图标</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note5.png" alt="修改重载表格时的加载图标"></p>
<ul>
<li><p>如果只修改样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-view .layui-table-init .layui-icon-loading&#123;</span><br><span class="line">  	font-size: 60px;</span><br><span class="line">  	color: #666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不想页面显示表格加载图标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-view .layui-table-init .layui-icon-loading&#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="表格表头标题之间边框不显示"><a href="#表格表头标题之间边框不显示" class="headerlink" title="表格表头标题之间边框不显示"></a>表格表头标题之间边框不显示</h4><p><strong>ie浏览器，layui表格的表头不显示边框</strong></p>
<p>th本来是position：relative；改为position: static；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table td, .layui-table th&#123;</span><br><span class="line">    position: static\9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法"><a href="#修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法" class="headerlink" title="修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法"></a>修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function render_table(tabledata, cur) &#123;</span><br><span class="line">  ·········</span><br><span class="line">  , page: &#123;</span><br><span class="line">    curr: cur</span><br><span class="line">  &#125;</span><br><span class="line">  , data: tabledata</span><br><span class="line">   ·········</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取当前页</span><br><span class="line">var curr = $(&quot;.layui-laypage-skip input&quot;).val();</span><br><span class="line">//重新渲染表格</span><br><span class="line">&lt;!-- res.data：修改数据后，重新返回渲染表格的数据 --&gt;</span><br><span class="line">&lt;!-- 从curr页开始渲染表格 --&gt;</span><br><span class="line">render_table(res.data, curr);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="layui同时清空多个表单元素的值"><a href="#layui同时清空多个表单元素的值" class="headerlink" title="layui同时清空多个表单元素的值"></a>layui同时清空多个表单元素的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 form 加上 lay-filter属性  lay-filter=&quot;group_form&quot;</span><br><span class="line">2、 </span><br><span class="line">$(&quot;#cancel&quot;).click(function() &#123;</span><br><span class="line">    form.val(&quot;group_form&quot;, &#123;</span><br><span class="line">      &quot;sdk&quot;: &quot;&quot;,     //单选框清空不了</span><br><span class="line">      &quot;name&quot;: &quot;&quot;,    //输入框可以清空</span><br><span class="line">      &quot;sort&quot;: &quot;&quot;,    //复选框清空不了</span><br><span class="line">      &quot;ddddd&quot;: &quot;&quot;,   //下拉框可以清空</span><br><span class="line">      &quot;password&quot;: &quot;&quot; //密码框可以清空</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="将MD5定义成layui的模块"><a href="#将MD5定义成layui的模块" class="headerlink" title="将MD5定义成layui的模块"></a>将MD5定义成layui的模块</h4><p><a href="https://www.layui.com/doc/base/modules.html#extend">扩展一个 layui 模块</a></p>
<p>1、在md5的js文件最后加上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.define(function(exports)&#123; </span><br><span class="line">  exports(&#x27;mymd&#x27;, &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、如果mymd.js文件放在与使用它的html文件同一个目录下，在html文件中直接使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用拓展模块</span><br><span class="line">layui.use([&#x27;mymd&#x27;], function()&#123;</span><br><span class="line">  var mymd = layui.mymd;</span><br><span class="line"></span><br><span class="line">  mymd.hash = md5;   //md5加密方法</span><br><span class="line">  console.log(mymd.hash(&quot;md5加密&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3、如果mymd.js文件放在与使用它的html文件不同目录下，在html文件中要在 extend 指定路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.extend(&#123;</span><br><span class="line">  mymd: &#x27;./js/mymd&#x27; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>再使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用拓展模块</span><br><span class="line">layui.use([&#x27;mymd&#x27;], function()&#123;</span><br><span class="line">  var mymd = layui.mymd;</span><br><span class="line"></span><br><span class="line">  mymd.hash = md5;   //md5加密方法</span><br><span class="line">  console.log(mymd.hash(&quot;md5加密&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="laypage"><a href="#laypage" class="headerlink" title="laypage"></a>laypage</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;laypage&#x27;, &#x27;layer&#x27;], function()&#123;</span><br><span class="line">  var laypage = layui.laypage</span><br><span class="line">  ,layer = layui.layer;</span><br><span class="line">  </span><br><span class="line">  //完整功能</span><br><span class="line">  laypage.render(&#123;</span><br><span class="line">    elem: &#x27;demo7&#x27;</span><br><span class="line">    ,count: 100</span><br><span class="line">    ,layout: [&#x27;count&#x27;, &#x27;prev&#x27;, &#x27;page&#x27;, &#x27;next&#x27;, &#x27;limit&#x27;, &#x27;skip&#x27;]</span><br><span class="line">    ,jump: function(obj)&#123;</span><br><span class="line">      console.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui日期时间段的设置，开始时间-结束时间"><a href="#layui日期时间段的设置，开始时间-结束时间" class="headerlink" title="layui日期时间段的设置，开始时间-结束时间"></a>layui日期时间段的设置，开始时间-结束时间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var nowTime = new Date( ).valueOf( );</span><br><span class="line"></span><br><span class="line">var start = laydate.render(&#123;</span><br><span class="line">	elem: &quot;#start&quot;,</span><br><span class="line">	min: nowTime,</span><br><span class="line">	done: function(value, date) &#123;</span><br><span class="line">		endMax = end.config.max;</span><br><span class="line">		end.config.min = date;     // 根据开始时间来设置结束时间的最小值/最大值</span><br><span class="line">		end.config.min.month = date.month - 1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var end = laydate.render(&#123;</span><br><span class="line">	elem: &quot;#end&quot;,</span><br><span class="line">	min：nowTime,   //  结束时间初始化的时候要设置一个值，不然开始时间的回调中，设置了也不起作用。初始化的时候就要写上nowTime这个，不然动态控制不了</span><br><span class="line">	done: function(value, date) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改开始时间和结束时间之间的符号"><a href="#修改开始时间和结束时间之间的符号" class="headerlink" title="修改开始时间和结束时间之间的符号"></a>修改开始时间和结束时间之间的符号</h4><p>方法：修改laydate.js文件里面的t.range = “-“为t.range = “/“</p>
<p>修改layui/lay/modules/laydate.js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(t.range === !0 &amp;&amp; (t.range = &#x27;/&#x27;))   改为： (t.range === !0 &amp;&amp; (t.range = &#x27;-&#x27;)) </span><br></pre></td></tr></table></figure>



<h4 id="laytui表格内容超过表格长度的处理"><a href="#laytui表格内容超过表格长度的处理" class="headerlink" title="laytui表格内容超过表格长度的处理"></a>laytui表格内容超过表格长度的处理</h4><p>当表格单元格的文字的长度超过表格当前列的宽度时，点击单元格的内容，会出现如图问题：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note7.png" alt="当表格单元格的文字的长度超过表格当前列的宽度时"></p>
<p>解决方法(使用css样式控制它隐藏)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-tips-main&#123;display:none&#125;</span><br><span class="line">.layui-table-tips-c&#123;display:none&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/pyspang/p/11164736.html">https://www.cnblogs.com/pyspang/p/11164736.html</a></p>
<p><a href="https://www.cnblogs.com/xxzb/p/12618226.html">https://www.cnblogs.com/xxzb/p/12618226.html</a></p>
<p>layui分页插件，一直在调用方法的解决办法</p>
<p>（死循环）</p>
<p>由于每次加载时都会执行jump回调，所以初次不让它执行jump里的方法（!first）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laypage.render(&#123;</span><br><span class="line">    elem: &#x27;demo8&#x27;</span><br><span class="line">    , count: totalCount</span><br><span class="line">    , layout: [&#x27;count&#x27;, &#x27;prev&#x27;, &#x27;page&#x27;, &#x27;next&#x27;, &#x27;limit&#x27;, &#x27;refresh&#x27;, &#x27;skip&#x27;]</span><br><span class="line">    , jump: function (obj, first) &#123;</span><br><span class="line">        //模拟渲染</span><br><span class="line">        page = obj.curr;</span><br><span class="line">        limit = obj.limit;</span><br><span class="line">        if (!first) &#123;</span><br><span class="line">             //执行方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="requriejs加载layui"><a href="#requriejs加载layui" class="headerlink" title="requriejs加载layui"></a><a href="https://blog.csdn.net/radzhang/article/details/84927005">requriejs加载layui</a></h4><h4 id="渲染动态表头"><a href="#渲染动态表头" class="headerlink" title="渲染动态表头"></a>渲染动态表头</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var dynamicCols = [];     //用来存放动态表头</span><br><span class="line">var colsList = [];  //表头列表</span><br><span class="line">$(数据返回的表头数组).each(function (i, item) &#123;</span><br><span class="line">    //设置表头</span><br><span class="line">    var info = &#123; field: item.field, title: item.title &#125;;</span><br><span class="line">    colsList.push(info);</span><br><span class="line">&#125;</span><br><span class="line">dynamicCols.push(colsList);</span><br><span class="line"></span><br><span class="line">//执行渲染</span><br><span class="line">table.render(&#123;</span><br><span class="line">    elem: &quot;#demo&quot;  //指定原始表格元素选择器（推荐id选择器）</span><br><span class="line">    ,height: 315   //容器高度</span><br><span class="line">    ,cols:dynamicCols     //设置表头</span><br><span class="line">    </span><br><span class="line">    //,.....       //其他参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态修改layui的select框的值"><a href="#动态修改layui的select框的值" class="headerlink" title="动态修改layui的select框的值"></a>动态修改layui的select框的值</h4><p>例如：点击表格的编辑按钮，获取当前行数据，根据不同的系统名称，在弹出的弹窗中，将系统选中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form class=&quot;layui-form&quot; lay-filter=&quot;whitelistForm&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;text&quot; name=&quot;whiteKey&quot; placeholder=&quot;搜索设备名&quot; autocomplete=&quot;off&quot; class=&quot;layui-input&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">// 点击表格的编辑按钮</span><br><span class="line">....</span><br><span class="line">else if(obj.event === &#x27;edit&#x27;) &#123;</span><br><span class="line">	var dataValue = data.system === &#x27;iOS&#x27; ? &#x27;1&#x27; : &#x27;2&#x27;;</span><br><span class="line">	</span><br><span class="line">	// 方法一或方法二的代码</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<ol>
<li><p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.val(&#x27;whitelistForm&#x27;, &#123;&#x27;whiteKey&#x27;: dataVale&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先需要使用lay-value来确定需要设置哪个元素自动选择</span><br><span class="line">var select = &#x27;dd [ lay-value=&#x27; +data.id + &#x27;]&#x27;;</span><br><span class="line">// 触发点击事件，实现自动选择</span><br><span class="line">$(&quot;input[ name=&#x27;system&#x27;]&quot;).siblings(&quot;div.layui-form-select&quot;).find(&#x27;dl&#x27;).find(select).click();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="layui日期时间段的设置，开始时间-结束时间-1"><a href="#layui日期时间段的设置，开始时间-结束时间-1" class="headerlink" title="layui日期时间段的设置，开始时间-结束时间"></a>layui日期时间段的设置，开始时间-结束时间</h4><p>最小值最大值动态设置的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* ----日期初始化-开始---- */</span><br><span class="line">$(&quot;#baseTime&quot;).val(today);</span><br><span class="line">$(&quot;#compareTime&quot;).val(adDate.getDate(-1)); // 前一天</span><br><span class="line">// 基础日期</span><br><span class="line">laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#baseTime&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , min: minTime</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 对比日期</span><br><span class="line">laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#compareTime&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , min: minTime</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;,</span><br><span class="line">    ready: function(date)&#123;</span><br><span class="line">        var y = date.year</span><br><span class="line">            , m = date.month </span><br><span class="line">            , d = date.date; </span><br><span class="line"></span><br><span class="line">        m = (m &lt; 10) ? &#x27;0&#x27; + m : m; </span><br><span class="line">        d = (d &lt; 10) ? &#x27;0&#x27; + d : d;</span><br><span class="line"></span><br><span class="line">        // 获取输入框上一次的日期</span><br><span class="line">        compareTime =  y + &#x27;-&#x27; + m + &#x27;-&#x27; + d; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var today = adDate.getDate(0);	// 今日(封装的一个方法)</span><br><span class="line">// 激活时间段日期选择 </span><br><span class="line">var activeTime = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#actRange&#x27;  </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , range: true</span><br><span class="line">    , max: today		// 最大值为今天</span><br><span class="line">    , trigger: &#x27;click&#x27; 	// 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        // 设置付费时间段最小日期</span><br><span class="line">        payRange.config.min = &#123;</span><br><span class="line">            year:date.year,</span><br><span class="line">            month:date.month - 1,</span><br><span class="line">            date:date.date</span><br><span class="line">        &#125;</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 付费时间段选择</span><br><span class="line">var payRange = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#payRange&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , range: true</span><br><span class="line">    , min: today</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="upload模块"><a href="#upload模块" class="headerlink" title="upload模块"></a>upload模块</h5><p>多次上传同一文件，不弹报错信息</p>
<blockquote>
<p>场景：1.选择错误格式的文件（a.jpg），弹出错误提示”文件格式不对“；2.再次选择a.jpg，就不弹错误提示；</p>
<p>3.在1的基础上，选择其他文件(b.jpg)，会弹错误提示</p>
</blockquote>
<p>解决：需要清空file中的value值。如果值是一样的（也就是选择同一个文件），不会执行判断，所以弹出错误提示时，需要将它的value值清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 重新上传签名文件按钮</span><br><span class="line">upload.render(&#123; //允许上传的文件后缀</span><br><span class="line">    elem: &#x27;#uploadSign&#x27;</span><br><span class="line">    , url: &#x27;&#x27;</span><br><span class="line">    , accept: &#x27;file&#x27; //普通文件</span><br><span class="line">    , auto: false</span><br><span class="line">    , bindAction: &#x27;#uploadFile&#x27;</span><br><span class="line">    // , exts: &#x27;keystore|jks&#x27; //只允许上传文件 （这样写会调用layui本身的文件上传错误提示）</span><br><span class="line">    // , size: 1024 //限制文件大小，单位 KB</span><br><span class="line">    , done: function(res)&#123;</span><br><span class="line">        // 成功回调</span><br><span class="line">    &#125;</span><br><span class="line">    ,choose: function(obj)&#123;</span><br><span class="line">        obj.preview(function(index, file, result)&#123;</span><br><span class="line">            var suffix = file.name.split(&quot;.&quot;)[1]	// 文件后缀</span><br><span class="line">                , want_type = (suffix === &#x27;keystore&#x27; || suffix === &#x27;jks&#x27;)	// 只允许上传文件的格式</span><br><span class="line">                , want_size = file.size &lt;= 1024 * 1024		// 文件最大大小</span><br><span class="line">                , flag = want_type &amp;&amp; want_size	// 是否符合上传条件</span><br><span class="line">                , error_msg = !want_type ? &#x27;上传的签名文件的格式不对&#x27; : (!want_size ? &#x27;签名文件不能超过1.00MB&#x27; : &#x27;&#x27;); // 错误提示</span><br><span class="line"></span><br><span class="line">            if(flag) &#123;</span><br><span class="line">                obj.upload(index, file); // 满足条件调用上传方法</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                layer.msg(error_msg, &#123;time: 1000&#125;);</span><br><span class="line">                // 清空file中的值(避免多次上传同一文件，不弹错误提示)</span><br><span class="line">                $(&#x27;input[name=&quot;file&quot;]&#x27;).val(&#x27;&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="动态修改复选框的选中状态"><a href="#动态修改复选框的选中状态" class="headerlink" title="动态修改复选框的选中状态"></a>动态修改复选框的选中状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($(&#x27;.xxxx&#x27;).attr(&quot;checked&quot;) === &quot;checked&quot;) &#123; //判断是否选中</span><br><span class="line">     //设置选中 注意这里使用的是prop(), 这里要是使用了attr()是无效的</span><br><span class="line">    $(&#x27;.xxxx&#x27;).prop(&quot;checked&quot;, true);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $(&#x27;.xxxx&#x27;).prop(&quot;checked&quot;, false);</span><br><span class="line">&#125;</span><br><span class="line">form.render(); //重新渲染       ————————最重要的记得加上这句话---------</span><br></pre></td></tr></table></figure>

<h4 id="获取数据表格选中值"><a href="#获取数据表格选中值" class="headerlink" title="获取数据表格选中值"></a><a href="https://www.layui.com/doc/modules/table.html#method">获取数据表格选中值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table id=&quot;activity-manage&quot; lay-filter=&quot;packageList&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var activityManage = table.render(&#123;</span><br><span class="line">    elem: &#x27;#activity-manage&#x27;</span><br><span class="line">    , id: &quot;activityManage&quot;</span><br><span class="line">    , cellMinWidth: 130</span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//监听数据表格的复选框</span><br><span class="line">table.on(&#x27;checkbox(packageList)&#x27;, function (obj) &#123; </span><br><span class="line">    console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one</span><br><span class="line">    console.log(obj);  // 这里的data数据只针对当前选中的那一项</span><br><span class="line"></span><br><span class="line">    // 选择状态 (activityManage是config里面的id)</span><br><span class="line">    var checkStatus = table.checkStatus(&quot;activityManage&quot;);</span><br><span class="line">    console.log(checkStatus.data) //获取选中行的数据</span><br><span class="line">    console.log(checkStatus.data.length) //获取选中行数量，可作为是否有选中行的条件</span><br><span class="line">    console.log(checkStatus.isAll ) //表格是否全选</span><br><span class="line">    console.log(checkStatus);    // 这里的data，是当前已选中的所有数据的数组集合</span><br><span class="line">    .........</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态设置下拉框的值"><a href="#动态设置下拉框的值" class="headerlink" title="动态设置下拉框的值"></a>动态设置下拉框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置下拉框默认选项</span><br><span class="line">form.val(&quot;deviceManage&quot;, &#123;</span><br><span class="line">    &quot;os&quot;: 2</span><br><span class="line">&#125;);</span><br><span class="line">&lt;form class=&quot;layui-form  margin-t10&quot; action=&quot;&quot; lay-filter=&quot;deviceManage&quot; id=&quot;white_device&quot;&gt;</span><br><span class="line">    &lt;select name=&quot;os&quot; lay-filter=&quot;os&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;iOS&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot; selected&gt;Android&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="提示信息弹完再做其他操作（处理新增-编辑页面跳转这种情况）"><a href="#提示信息弹完再做其他操作（处理新增-编辑页面跳转这种情况）" class="headerlink" title="提示信息弹完再做其他操作（处理新增/编辑页面跳转这种情况）"></a>提示信息弹完再做其他操作（处理新增/编辑页面跳转这种情况）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer.msg(res.msg, &#123;time: 1000&#125;, function() &#123;</span><br><span class="line">    // 可点击</span><br><span class="line">    $(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line"></span><br><span class="line">    if ( res.code == 1 )&#123;</span><br><span class="line">        $.form.href(&quot;&#123;:url(&#x27;xy/account/role&#x27;)&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态修改单选框的值"><a href="#动态修改单选框的值" class="headerlink" title="动态修改单选框的值"></a>动态修改单选框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[name=&quot;isDiscount&quot;][value=&quot;0&quot;]&#x27;).prop(&#x27;checked&#x27;, true);</span><br><span class="line">form.render(&quot;radio&quot;);</span><br><span class="line"></span><br><span class="line">// 需要用到prop(&#x27;checked&#x27;, true);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.val(&quot;addpackage&quot;, &#123;</span><br><span class="line">    &quot;isDiscount&quot;: 0</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://fly.layui.com/extend/xmSelect/">xmSelect下拉多选</a></p>
<p><a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select文档</a></p>
<h4 id="接口处理完，弹出提示，提示语结束才跳转页面"><a href="#接口处理完，弹出提示，提示语结束才跳转页面" class="headerlink" title="接口处理完，弹出提示，提示语结束才跳转页面"></a>接口处理完，弹出提示，提示语结束才跳转页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer.msg(res.msg, &#123;time: 1000&#125;, function()&#123;</span><br><span class="line">    // 成功-页面跳转</span><br><span class="line">    if(res.code == 1) &#123;</span><br><span class="line">        $.form.href(&quot;&#123;:url(&#x27;xy/account/index&#x27;)&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui获取已选复选框的值"><a href="#layui获取已选复选框的值" class="headerlink" title="layui获取已选复选框的值"></a>layui获取已选复选框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr_box = [];</span><br><span class="line">$(&#x27;input[type=checkbox]:checked&#x27;).each(function() &#123;</span><br><span class="line">  arr_box.push($(this).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="初始化表格渲染条数"><a href="#初始化表格渲染条数" class="headerlink" title="初始化表格渲染条数"></a>初始化表格渲染条数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.init(&#x27;data-detail&#x27;, &#123;</span><br><span class="line">    limit: 10 //注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致</span><br><span class="line">    //支持所有基础参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="获取表单提交的数据"><a href="#获取表单提交的数据" class="headerlink" title="获取表单提交的数据"></a>获取表单提交的数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button href=&quot;javascript:;&quot; class=&quot;layui-btn layui-btn-normal&quot; lay-submit lay-filter=&quot;setAuthority&quot;&gt;保存&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">form.on(&#x27;submit(setAuthority)&#x27;, function(data)&#123;</span><br><span class="line">	var param = data.field;</span><br><span class="line">	......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注：对应的提交按钮，要添加  lay-submit  属性</p>
<h4 id="Tab的切换功能，切换事件监听等，需要依赖element模块"><a href="#Tab的切换功能，切换事件监听等，需要依赖element模块" class="headerlink" title="Tab的切换功能，切换事件监听等，需要依赖element模块"></a>Tab的切换功能，切换事件监听等，需要依赖element模块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;element&#x27;], function () &#123;</span><br><span class="line">    var element = layui.element;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="防止表单多次提交"><a href="#防止表单多次提交" class="headerlink" title="防止表单多次提交"></a>防止表单多次提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置提交按钮不可点击</span><br><span class="line">$(&quot;#submitBtn&quot;).attr(&quot;disabled&quot;, true);</span><br><span class="line"></span><br><span class="line">$(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听保存按钮</span><br><span class="line">form.on(&#x27;submit(save)&#x27;, function(data)&#123;</span><br><span class="line">    var params = data.field;</span><br><span class="line"></span><br><span class="line">    // 设置提交按钮不可点击</span><br><span class="line">    $(&quot;#submitBtn&quot;).attr(&quot;disabled&quot;, true);</span><br><span class="line"></span><br><span class="line">    // 请求接口处理</span><br><span class="line">    $.post(&#x27;/xy/account/roleAdd&#x27;, params, function(res)&#123;</span><br><span class="line">        layer.msg(res.msg, &#123;time: 1000&#125;, function() &#123;</span><br><span class="line">            // 可点击</span><br><span class="line">            $(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line"></span><br><span class="line">            if ( res.code == 1 )&#123;</span><br><span class="line">                $.form.href(&quot;&#123;:url(&#x27;xy/account/role&#x27;)&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui表格合并行"><a href="#layui表格合并行" class="headerlink" title="layui表格合并行"></a>layui表格合并行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 表格合并行</span><br><span class="line">function merge(res, names, indexs) &#123;</span><br><span class="line">    var data = res.data;</span><br><span class="line">    //定位需要添加合并属性的行数</span><br><span class="line">    var mergeIndex = 0;</span><br><span class="line">    //这里涉及到简单的运算，mark是计算每次需要合并的格子数</span><br><span class="line">    var mark = 1; </span><br><span class="line">    //需要合并的列名称</span><br><span class="line">    var columsName = names;</span><br><span class="line">    //需要合并的列索引值</span><br><span class="line">    var columsIndex = indexs;</span><br><span class="line"></span><br><span class="line">    //这里循环所有要合并的列</span><br><span class="line">    for (var k = 0; k &lt; columsName.length; k++) &#123; </span><br><span class="line">        //所有行</span><br><span class="line">        var trArr = $(&quot;.layui-table-body&gt;.layui-table&quot;).find(&quot;tr&quot;);</span><br><span class="line">        //这里循环表格当前的数据</span><br><span class="line">        for (var i = 1; i &lt; res.data.length; i++) &#123; </span><br><span class="line">            //获取当前行的当前列</span><br><span class="line">                var tdCurArr = trArr.eq(i).find(&quot;td&quot;).eq(columsIndex[k]);</span><br><span class="line">                //获取相同列的第一列</span><br><span class="line">                var tdPreArr = trArr.eq(mergeIndex).find(&quot;td&quot;).eq(columsIndex[k]);</span><br><span class="line">            //后一行的值与前一行的值做比较，相同就需要合并</span><br><span class="line">                if (data[i][columsName[k]] === data[i-1][columsName[k]]) &#123; </span><br><span class="line">                        mark += 1;</span><br><span class="line">                        //相同列的第一列增加rowspan属性</span><br><span class="line">                        tdPreArr.each(function () &#123;</span><br><span class="line">                                $(this).attr(&quot;rowspan&quot;, mark);</span><br><span class="line">                        &#125;);</span><br><span class="line">                        //当前行隐藏</span><br><span class="line">                        tdCurArr.each(function () &#123;</span><br><span class="line">                                $(this).css(&quot;display&quot;, &quot;none&quot;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                        mergeIndex = i;</span><br><span class="line">                        //一旦前后两行的值不一样了，那么需要合并的格子数mark就需要重新计算</span><br><span class="line">                        mark = 1;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mergeIndex = 0;</span><br><span class="line">        mark = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="layui-layer-遮罩"><a href="#layui-layer-遮罩" class="headerlink" title="layui-layer 遮罩"></a>layui-layer 遮罩</h4><p><a href="https://www.layui.site/doc/modules/layer.html#shade">弹出层区域默认自带0.3透明度的黑色背景蒙层</a></p>
<p><a href="https://www.layui.site/doc/modules/layer.html#shade">layer.load(icon, options) - 加载层</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//eg1</span><br><span class="line">var index = layer.load();</span><br><span class="line">//eg2</span><br><span class="line">var index = layer.load(1); //换了种风格</span><br><span class="line">//eg3</span><br><span class="line">var index = layer.load(2, &#123;time: 10*1000&#125;); //又换了种风格，并且设定最长等待10秒 </span><br><span class="line">//关闭</span><br><span class="line">layer.close(index);  </span><br></pre></td></tr></table></figure>

<h4 id="layui-时间插件laydate中动态设置改变min和max值"><a href="#layui-时间插件laydate中动态设置改变min和max值" class="headerlink" title="layui 时间插件laydate中动态设置改变min和max值"></a><a href="https://blog.csdn.net/bai_riqiang/article/details/80110000">layui 时间插件laydate中动态设置改变min和max值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use(&#x27;laydate&#x27;, function()&#123;</span><br><span class="line">  var laydate = layui.laydate;</span><br><span class="line"></span><br><span class="line">  // 开始日期</span><br><span class="line">  var startDate = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#startDate&#x27;</span><br><span class="line">    ,max : &quot;2099-12-31&quot;</span><br><span class="line">    ,done: function(value,date)&#123;</span><br><span class="line">      endDate.config.min =&#123;</span><br><span class="line">        year :date.year</span><br><span class="line">        ,month: date.month-1</span><br><span class="line">        ,date: date.date</span><br><span class="line">      &#125;;</span><br><span class="line">      // 可不加，根据需求来</span><br><span class="line">      $(&#x27;#endDate&#x27;)[0].focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  // 结束日期</span><br><span class="line">  var endDate = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#endDate &#x27;</span><br><span class="line">    ,min: &quot;1900-1-1&quot;</span><br><span class="line">    ,done: function (value,date) &#123;</span><br><span class="line">      startDate.config.max=&#123;</span><br><span class="line">        year :date.year</span><br><span class="line">        ,month: date.month-1</span><br><span class="line">        ,date: date.date</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="如果想去掉表单中所有输入框的浏览器历史记录"><a href="#如果想去掉表单中所有输入框的浏览器历史记录" class="headerlink" title="如果想去掉表单中所有输入框的浏览器历史记录"></a>如果想去掉表单中所有输入框的浏览器历史记录</h4><p>直接给form元素加上autocomplete=”off”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form autocomplete=&quot;off&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="layer弹两次"><a href="#layer弹两次" class="headerlink" title="layer弹两次"></a>layer弹两次</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上id-处理提示弹两次</span><br><span class="line">layer.msg(&#x27;复制成功&#x27;, &#123;id: &#x27;clipboard&#x27;, time: 1000&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/sentsin/layui/issues/I2C2CT">layui表格没有数据的时候，表头没有横向滚动条</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改一下table.js源码</span><br><span class="line">that.layMain.find(&#x27;tbody&#x27;).html(&#x27;&#x27;);</span><br><span class="line">that.layHeader.css(&#x27;overflow&#x27;,&#x27;auto&#x27;);//新加的</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/nuomizhende45/article/details/90108766">Layui数据表格显示无数据提示问题</a></p>
<h4 id="layui-排序功能"><a href="#layui-排序功能" class="headerlink" title="layui-排序功能"></a>layui-排序功能</h4><p>如果不使用layui本身的前端排序功能，需禁止：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">,autoSort: false // 禁用前端自动排序</span><br></pre></td></tr></table></figure>

<p>更新全部表单元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.render(); </span><br></pre></td></tr></table></figure>



<h4 id="扩展一个模板"><a href="#扩展一个模板" class="headerlink" title="扩展一个模板"></a>扩展一个模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /**扩展一个模块**/      </span><br><span class="line">layui.define(function(exports)&#123; </span><br><span class="line">  var obj = &#123;</span><br><span class="line">    hello: function(str)&#123;</span><br><span class="line">      alert(&#x27;Hello &#x27;+ (str||&#x27;mymod&#x27;));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 输出接口</span><br><span class="line">  exports(&#x27;mymod&#x27;, obj);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layui.extend(&#123;</span><br><span class="line">  mod2: &#x27;http://192.168.0.59/mymod/&#x27; // &#123;/&#125;的意思即代表采用自有路径，即不跟随 base 路径</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用拓展模块</span><br><span class="line">layui.use([&#x27;mymod&#x27;], function()&#123;</span><br><span class="line">  var mymod = layui.mymod;</span><br><span class="line"></span><br><span class="line">  mymod.hello(&#x27;World!&#x27;); //弹出 Hello World!</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui文件上传组件“请求上传接口出现异常”问题解决方案"><a href="#layui文件上传组件“请求上传接口出现异常”问题解决方案" class="headerlink" title="layui文件上传组件“请求上传接口出现异常”问题解决方案"></a><a href="https://wenku.baidu.com/view/00753c55f142336c1eb91a37f111f18583d00cd2.html">layui文件上传组件“请求上传接口出现异常”问题解决方案</a></h4><h4 id="layui上传错误请求上传接口出现异常解决方案"><a href="#layui上传错误请求上传接口出现异常解决方案" class="headerlink" title="layui上传错误请求上传接口出现异常解决方案"></a><a href="http://www.45fan.com/article.php?aid=20090321166392158778851636">layui上传错误请求上传接口出现异常解决方案</a></h4><h4 id="解决LAYUI数据表格中嵌套下拉框显示问题"><a href="#解决LAYUI数据表格中嵌套下拉框显示问题" class="headerlink" title="解决LAYUI数据表格中嵌套下拉框显示问题"></a>解决LAYUI数据表格中嵌套下拉框显示问题</h4><p><a href="https://www.cnblogs.com/xmcwm/p/14373853.html">layui学习——数据表格嵌套下拉列表，并实现动态更新</a></p>
<p><a href="https://wenku.baidu.com/view/ecb57ee05cbfc77da26925c52cc58bd6318693d2.html">解决layui数据表格中嵌套下拉框显示问题</a></p>
<p><a href="https://blog.lanluo.cn/10990">Layui数据表格中使用下拉选框被遮挡的解决方法，要在表格渲染中操作</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 表格渲染</span><br><span class="line">table.render(&#123;</span><br><span class="line">    elem: &#x27;#groupTable&#x27;</span><br><span class="line">    , limit: 10</span><br><span class="line">    , cols: [[</span><br><span class="line">        &#123; type: &#x27;numbers&#x27;, title: &#x27;序号&#x27;, width: 100 &#125;</span><br><span class="line">        , &#123; title: &#x27;下拉框&#x27;, minWidth: 140 , templet: function (res) &#123;</span><br><span class="line">            var selectStr = &#x27;&lt;select name=&quot;test&quot;&gt;&#x27;;</span><br><span class="line">            for(var i = 0; i&lt; 10; i ++) &#123;</span><br><span class="line">                selectStr += &#x27;&lt;option value=&quot;&#x27; + i+ &#x27;&quot;&gt;&#x27; + i+ &#x27;&lt;/option&gt;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            selectStr += &#x27;&lt;/select&gt;&#x27;</span><br><span class="line">            return selectStr;</span><br><span class="line">        &#125; &#125;</span><br><span class="line">    ]]</span><br><span class="line">    , page: &#123;</span><br><span class="line">        curr: this_curr</span><br><span class="line">    &#125;</span><br><span class="line">    , data: list</span><br><span class="line">    , done: function (res, curr, count) &#123;</span><br><span class="line">        $(&quot;.layui-table-body, .layui-table-box, .layui-table-cell&quot;).css(&#x27;overflow&#x27;, &#x27;visible&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="http://easyadmin.99php.cn/docs/">EasyAdmin</a></p>
<h4 id="LAYUI-MINI"><a href="#LAYUI-MINI" class="headerlink" title="LAYUI MINI"></a><a href="http://layuimini.99php.cn/docs/">LAYUI MINI</a></h4><p>EasyAdmin—layui mini 页面——表格内容渲染的方法在<code>public/static/admin/js/对应页面的js文件</code>，页面在<code>app/admin/view</code></p>
<p><a href="http://layuimini.99php.cn/iframe/v2/index.html">在线DEMO</a></p>
<h5 id="表格的筛选条件使用日期格式："><a href="#表格的筛选条件使用日期格式：" class="headerlink" title="表格的筛选条件使用日期格式："></a>表格的筛选条件使用日期格式：</h5><p>使用<code>search: &#39;range&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;create_time&#x27;, minWidth: 80, title: &#x27;操作时间&#x27;,search: &#x27;range&#x27;&#125;,</span><br></pre></td></tr></table></figure>

<p>表格的筛选条件使用下拉框：</p>
<p>使用<code>search: &#39;select&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;status&#x27;, minWidth: 80, title: &#x27;审核状态&#x27;, search: &#x27;select&#x27;,selectList: &#123;1: &#x27;已审核&#x27;, 0: &#x27;未审核&#x27;&#125;,templet: function (d) &#123;</span><br><span class="line">    if(d.status == 1) &#123;</span><br><span class="line">        return &quot;已审核&quot;;</span><br><span class="line">    &#125;else if(d.status == 0)&#123;</span><br><span class="line">        return &quot;未审核&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="操作栏"><a href="#操作栏" class="headerlink" title="操作栏"></a>操作栏</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;account_ban_status&#x27;, title: &#x27;操作内容&#x27;, minWidth: 80, templet: function (d) &#123;</span><br><span class="line">    if(d.status == 0) &#123;</span><br><span class="line">        return &quot;注销账号&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(d.status == 1) &#123;</span><br><span class="line">        return &quot;恢复账号&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码"><a href="#切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码" class="headerlink" title="切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码"></a>切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码</h5><p><code>public/static/plugs/lay-module/layuimini/miniAdmin.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 打开新窗口</span><br><span class="line"> */</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;[layuimini-href]&#x27;, function () &#123;</span><br><span class="line">    var URL = window.location.href.split(&quot;#&quot;)[1]; // 当前URL</span><br><span class="line"></span><br><span class="line">    var loading = layer.load(0, &#123;shade: false, time: 2 * 1000&#125;);</span><br><span class="line">    var tabId = $(this).attr(&#x27;layuimini-href&#x27;),</span><br><span class="line">        href = $(this).attr(&#x27;layuimini-href&#x27;),</span><br><span class="line">        title = $(this).text(),</span><br><span class="line">        target = $(this).attr(&#x27;target&#x27;);</span><br><span class="line"></span><br><span class="line">    var el = $(&quot;[layuimini-href=&#x27;&quot; + href + &quot;&#x27;]&quot;, &quot;.layuimini-menu-left&quot;);</span><br><span class="line">    layer.close(window.openTips);</span><br><span class="line"></span><br><span class="line">    // 菜单地址不等于当前URL——切换到其他页面，关闭子页面内容</span><br><span class="line">    if(href !== URL) &#123;</span><br><span class="line">        var hasSecond = $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-iframe&#x27;).length;</span><br><span class="line">        if(hasSecond &gt; 0) &#123;</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-iframe&#x27;).remove();</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-shade&#x27;).remove();</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-move&#x27;).remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="修改logo"><a href="#修改logo" class="headerlink" title="修改logo"></a>修改logo</h5><p><code>public/static/plugs/lay-module/layuimini/miniAdmin.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">renderLogo: function (data) &#123;</span><br><span class="line">    // var html = &#x27;&lt;a href=&quot;&#x27; + data.href + &#x27;&quot;&gt;&lt;img src=&quot;&#x27; + data.image + &#x27;&quot; alt=&quot;logo&quot;&gt;&lt;h1&gt;&#x27; + data.title + &#x27;&lt;/h1&gt;&lt;/a&gt;&#x27;;</span><br><span class="line">    var html = &#x27;&lt;img src=&quot;/static/common/images/logo.png&quot; alt=&quot;logo&quot;&gt;&lt;h1&gt;&#x27; + data.title + &#x27;&lt;/h1&gt;&#x27;;</span><br><span class="line">    $(&#x27;.layuimini-logo&#x27;).html(html);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="选择同一天，修改结束时间为23-59-59"><a href="#选择同一天，修改结束时间为23-59-59" class="headerlink" title="选择同一天，修改结束时间为23:59:59"></a>选择同一天，修改结束时间为23:59:59</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laydate.render(&#123;</span><br><span class="line">range: true</span><br><span class="line">, type: ncV.timeType</span><br><span class="line">, elem: &#x27;[name=&quot;&#x27; + ncV.fieldAlias + &#x27;&quot;]&#x27;</span><br><span class="line">, done: function(value, date, endDate)&#123;</span><br><span class="line">    var arr = value.split(&#x27; - &#x27;)</span><br><span class="line">        , day1 = arr[0].split(&#x27; &#x27;)[0]    // 开始日期</span><br><span class="line">        , day2 = arr[1].split(&#x27; &#x27;)[0];   // 结束日期</span><br><span class="line">    if(day1 === day2) &#123;     // 同一天</span><br><span class="line">        var time1 = arr[0].split(&#x27; &#x27;)[1]      // 开始时间</span><br><span class="line">          , time2 = arr[1].split(&#x27; &#x27;)[1];     // 结束时间</span><br><span class="line">        // 判断是否都为0点，若是，将结束时间改为23:59:59</span><br><span class="line">        if(time1 === time2 &amp;&amp; time1 === &#x27;00:00:00&#x27;)&#123;</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">                document.querySelector(&#x27;[name=&quot;&#x27; + ncV.fieldAlias + &#x27;&quot;]&#x27;).value = day1 + &#x27; &#x27; + time1 + &#x27; - &#x27; + day2 + &#x27; &#x27; + &#x27;23:59:59&#x27;;</span><br><span class="line">            &#125;, 150)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/javaXiaoAnRan/article/details/109632250">layui表格编辑单元格时直接点击保存按钮问题</a></p>
<h4 id="layui表格编辑单元格–满足校验再保存-不满足校验继续展示输入框"><a href="#layui表格编辑单元格–满足校验再保存-不满足校验继续展示输入框" class="headerlink" title="layui表格编辑单元格–满足校验再保存-不满足校验继续展示输入框"></a>layui表格编辑单元格–满足校验再保存-不满足校验继续展示输入框</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听单元格编辑</span><br><span class="line">table.on(&#x27;edit(subpackageTable)&#x27;, function(obj)&#123; </span><br><span class="line">    console.log(obj.value); // 得到修改后的值</span><br><span class="line">    console.log(obj.field); // 当前编辑的字段名</span><br><span class="line">    console.log(obj.data); // 所在行的所有相关数据  </span><br><span class="line"></span><br><span class="line">    console.log(this)</span><br><span class="line">	</span><br><span class="line">	// 不满足校验</span><br><span class="line">    if(!/^[1-9]\d*$/.test(obj.value)) &#123;</span><br><span class="line">        layer.msg(&#x27;请输入大于0的正整数&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">        $(this).parent(&#x27;td&#x27;).append(&#x27;&lt;input class=&quot;layui-input layui-table-edit&quot;&gt;&lt;/input&gt;&#x27;);  // 因为单元格编辑，页面就是给它多了个input输入框  不满足条件时，再追加进去就可以</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="LayUI动态开启单元格可以编辑状态"><a href="#LayUI动态开启单元格可以编辑状态" class="headerlink" title="LayUI动态开启单元格可以编辑状态"></a><a href="https://blog.csdn.net/Klhz555/article/details/125582409">LayUI动态开启单元格可以编辑状态</a></h4><h4 id="动态修改-不满足条件的不可编辑"><a href="#动态修改-不满足条件的不可编辑" class="headerlink" title="动态修改-不满足条件的不可编辑"></a>动态修改-不满足条件的不可编辑</h4><p>需求是：</p>
<blockquote>
<p> 输入的条件需为大于0的正整数，若满足，则设置成功，更新设置数；若不满足，提示“请输入大于0的正整数”，提示的同时，用户点击输入框外，设置失败，收起输入框，设置数显示原数（注：交互先试试，设置失败能否不收起输入框，直至输入正确，才支持收起并设置成功；）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 表格渲染的done事件回调</span><br><span class="line">, done: function (res, curr, count) &#123;</span><br><span class="line">	var _index = localStorage.getItem(&quot;edit_index&quot;);</span><br><span class="line">    if(_index) &#123;</span><br><span class="line">        $(&#x27;.layui-table tr[data-index=&quot;&#x27; + _index + &#x27;&quot;] &#x27;  + &#x27;[data-field=&quot;ip_reg_limit&quot;]&#x27;).append(&#x27;&lt;input class=&quot;layui-input layui-table-edit&quot;&gt;&lt;/input&gt;&#x27;);  // 继续保留输入框</span><br><span class="line">    &#125;</span><br><span class="line">    for(var i in data) &#123;</span><br><span class="line">        if(data[i][&#x27;status&#x27;] === 3) &#123;</span><br><span class="line">            $(&#x27;tr[data-index=&quot;&#x27; + i + &#x27;&quot;]&#x27;).find(&#x27;td[data-field=&quot;ip_reg_limit&quot;]&#x27;).data(&#x27;edit&#x27;, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：使用时，在cols中，edit要设置为text：<code>edit: &#39;text&#39;</code>，不然要验证edit事件的不起作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cols：[[</span><br><span class="line">&#123; field: &#x27;ip_reg_limit&#x27;, title: &#x27;同IP注册限制数&#x27;, edit: &#x27;text&#x27;, minWidth: 120, templet:function(res)&#123;</span><br><span class="line">        if(res.status == 3 || res.ip_reg_limit == 0)&#123;</span><br><span class="line">            return &#x27;&#x27;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return &#x27;&lt;a class=&quot;table-edit-btn&quot;&gt;&#x27; + res.ip_reg_limit + &#x27;&lt;/a&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">]]</span><br><span class="line"></span><br><span class="line">// edit结束后，不管值有没有改变，都会自动重新渲染一次表格</span><br><span class="line">// 监听单元格编辑</span><br><span class="line">table.on(&#x27;edit(subpackageTable)&#x27;, function(obj)&#123; </span><br><span class="line">    // 判断是否为大于0正整数</span><br><span class="line">    if(!/^[1-9]\d*$/.test(obj.value)) &#123;</span><br><span class="line">        layer.msg(&#x27;请输入大于0的正整数&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">        var _index = $(this).parent(&#x27;td&#x27;).parent(&#x27;tr&#x27;).data(&#x27;index&#x27;);   </span><br><span class="line">        localStorage.setItem(&#x27;edit_index&#x27;, _index);</span><br><span class="line">        // 更新表格内容</span><br><span class="line">        updateTable();</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        localStorage.removeItem(&#x27;edit_index&#x27;);</span><br><span class="line">        $.post(&#x27;/xy/package/ban&#x27;, &#123;id: obj.data.id,ip_reg_limit:obj.value&#125;, function(res)&#123;</span><br><span class="line">            layer.msg(res.msg, &#123;time: 1000&#125;);</span><br><span class="line">            if(res.code == 1) &#123;</span><br><span class="line">                updateTable();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态设置单元格是否可以编辑"><a href="#动态设置单元格是否可以编辑" class="headerlink" title="动态设置单元格是否可以编辑"></a>动态设置单元格是否可以编辑</h4><p><code>$(&quot;.layui-table&quot;).find(&#39;td[data-field=&quot;advise&quot;]&#39;).data(&#39;edit&#39;, false)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// doUpdate 可编辑表格的ID名</span><br><span class="line">table.on(&#x27;row(doUpdate)&#x27;, function(obj)&#123;</span><br><span class="line">    // advise  需要编辑的字段名</span><br><span class="line">   if(obj.data.advise ==&#x27;&#x27; )&#123;</span><br><span class="line">       $(&quot;.layui-table&quot;).find(&#x27;td[data-field=&quot;advise&quot;]&#x27;).data(&#x27;edit&#x27;, true)</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">       $(&quot;.layui-table&quot;).find(&#x27;td[data-field=&quot;advise&quot;]&#x27;).data(&#x27;edit&#x27;, false)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/weixin_44252738/article/details/91466402">textarea标签换行符以br存入数据库 ，br转 textArea换行符</a></p>
<p>textarea标签回车符是<code>/n</code>,在html里识别回车是<code>&lt;br/&gt;</code>，在存入数据库之前要进行转换成<code>&lt;br/&gt;</code>，在取出展示在html页面时才能显示换行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var content = rules_content.replace(/\n/g,&#x27;&lt;br /&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">$(&quot;#rules_content&quot;).html(content);  // 写入活动规则内容</span><br></pre></td></tr></table></figure>

<h4 id="xm-select-js引入到EasyAdmin-LAYUI-MINI-中遇到的问题"><a href="#xm-select-js引入到EasyAdmin-LAYUI-MINI-中遇到的问题" class="headerlink" title="xm-select.js引入到EasyAdmin LAYUI MINI 中遇到的问题"></a>xm-select.js引入到<a href="http://easyadmin.99php.cn/docs/">EasyAdmin</a> <a href="http://layuimini.99php.cn/docs/">LAYUI MINI</a> 中遇到的问题</h4><p>引入之后，会报 <code>xmSelect is not defined</code> </p>
<p>解决：将以下代码注释掉即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &quot;object&quot; === (&quot;undefined&quot; == typeof exports ? &quot;undefined&quot;: _typeof(exports)) ? e.exports = t.c: &quot;function&quot; == typeof define &amp;&amp; n(220) ? define(xmSelect) : window.layui &amp;&amp; layui.define &amp;&amp; layui.define((function(e) &#123;</span><br><span class="line">//  e(&quot;xmSelect&quot;, t.c)</span><br><span class="line">// &#125;)),</span><br></pre></td></tr></table></figure>

<h4 id="当合并表头，动态改变列数时"><a href="#当合并表头，动态改变列数时" class="headerlink" title="当合并表头，动态改变列数时"></a>当合并表头，动态改变列数时</h4><p>只有一列时，数据会把合并的表头也展示出来，处理方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">, done: function (res, curr, count) &#123;</span><br><span class="line">    $(&quot;.layui-table tbody&quot;).find(&quot;.layui-table-col-special&quot;).remove();  // 当合并表头只有一列时</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态改变合并表头合并列的数量时，colspan的数值的类型为字符串类型"><a href="#动态改变合并表头合并列的数量时，colspan的数值的类型为字符串类型" class="headerlink" title="动态改变合并表头合并列的数量时，colspan的数值的类型为字符串类型"></a>动态改变合并表头合并列的数量时，colspan的数值的类型为字符串类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var colspan_day = &#x27;1&#x27;;  // colspan要使用字符串类型</span><br><span class="line"></span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;次日&#x27;, colspan: colspan_day &#125;</span><br></pre></td></tr></table></figure>

<h4 id="表格表头-合并列，只有一列时，列宽设置"><a href="#表格表头-合并列，只有一列时，列宽设置" class="headerlink" title="表格表头-合并列，只有一列时，列宽设置"></a>表格表头-合并列，只有一列时，列宽设置</h4><p>layui会自动在页面生成样式，自定义样式，覆盖它</p>
<p><code>注意：这种方法有个bug，从别的页面，切换到该页面，bug还是存在</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 针对合并表头只有一列时 */</span><br><span class="line">.laytable-cell-1-0-20,</span><br><span class="line">.laytable-cell-1-0-21,</span><br><span class="line">.laytable-cell-1-0-22,</span><br><span class="line">.laytable-cell-1-0-23,</span><br><span class="line">.laytable-cell-1-0-24,</span><br><span class="line">.laytable-cell-1-0-25&#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表格表头-合并列，只有一列时，合并列的文字会出现换行，默认宽度为60px"><a href="#表格表头-合并列，只有一列时，合并列的文字会出现换行，默认宽度为60px" class="headerlink" title="表格表头-合并列，只有一列时，合并列的文字会出现换行，默认宽度为60px"></a>表格表头-合并列，只有一列时，合并列的文字会出现换行，默认宽度为60px</h4><p>所以要给合并列加上宽度属性（根据实际情况自定义）：<code> width: 80</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;注册当天&#x27;, width: 80, colspan: current_count&#125;   </span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;次日&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第3天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第4天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第5天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第6天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第7天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第8-14天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第15-30天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第31-45天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第46-60天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第61-90天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第91-180天&#x27;, width: 80, colspan: cols_count &#125;</span><br><span class="line">,&#123;align: &#x27;center&#x27;, title: &#x27;第181-360天&#x27;, width: 80,colspan: cols_count &#125;</span><br></pre></td></tr></table></figure>

<h4 id="表格固定列与表格对应列不对齐"><a href="#表格固定列与表格对应列不对齐" class="headerlink" title="表格固定列与表格对应列不对齐"></a>表格固定列与表格对应列不对齐</h4><p>渠道回收数据：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note9.png" alt="固定列不对齐"></p>
<ol>
<li><p>给日期列添加unresize属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;date&#x27;, title: &#x27;日期&#x27;,  width: 100, rowspan: 2, height: 81, unresize:true, fixed:&#x27;left&#x27;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给固定列添加宽度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.fx_w112 .layui-table-fixed&#123;  width: 112px;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态加上fx_w112 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改第一列固定表头的高度</span><br><span class="line"> if(targets_page_len !== 0) &#123;</span><br><span class="line">  $(&#x27;.table-container&#x27;).addClass(&#x27;rowspan_2&#x27;).removeClass(&#x27;rowspan_1&#x27;);</span><br><span class="line">  $(&#x27;.table-container&#x27;).removeClass(&#x27;fx_w112&#x27;);  </span><br><span class="line">&#125; else&#123;</span><br><span class="line">  $(&#x27;.table-container&#x27;).addClass(&#x27;rowspan_1&#x27;).removeClass(&#x27;rowspan_2&#x27;);</span><br><span class="line">  $(&#x27;.table-container&#x27;).addClass(&#x27;fx_w112&#x27;);   // 修改固定列的宽度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>给日期列添加unresize属性，是因为后面给它添加固定宽度112，如果可以拖拽修改宽度，就会矛盾。 </p>
</blockquote>
]]></content>
      <categories>
        <category>前端UI框架</category>
        <category>layui</category>
      </categories>
      <tags>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>layui表格实现全选所有页面数据的功能</title>
    <url>/2022/08/10/layui%E8%A1%A8%E6%A0%BC%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%80%89%E6%89%80%E6%9C%89%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="layui表格中的复选框"><a href="#layui表格中的复选框" class="headerlink" title="layui表格中的复选框"></a>layui表格中的复选框</h3><p>在实现全选所有页面的数据之前，先看一下layui表格中的复选框能实现的功能。</p>
<p>HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table id=&quot;testTable&quot; lay-filter=&quot;testTable&quot;&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>JavaScript：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;table&#x27;, &#x27;jquery&#x27;, &#x27;form&#x27;], function () &#123;</span><br><span class="line">    var table = layui.table</span><br><span class="line">        , form = layui.form</span><br><span class="line">        , $ = layui.jquery</span><br><span class="line">        , list = []</span><br><span class="line">        , selectedIds = [];     // 存放已选中行的id数组</span><br><span class="line"></span><br><span class="line">    function getRandomName() &#123;</span><br><span class="line">        var letters = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">        var name = &#x27;&#x27;;</span><br><span class="line">        for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            name += letters.charAt(Math.floor(Math.random() * letters.length));</span><br><span class="line">        &#125;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 1; i &lt;= 100; i++) &#123;</span><br><span class="line">        list.push(&#123; id: i, name: getRandomName(), score: Math.floor(Math.random() * 1000) + 1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    table.render(&#123;</span><br><span class="line">        elem: &#x27;#testTable&#x27;</span><br><span class="line">        , data: list</span><br><span class="line">        , page: true    // 开启分页</span><br><span class="line">        , limit: 10</span><br><span class="line">        , cols: [[</span><br><span class="line">            // &#123; checkbox: true &#125;</span><br><span class="line">            &#123; type:&#x27;checkbox&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;id&#x27;, title: &#x27;ID&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;name&#x27;, title: &#x27;用户名&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;score&#x27;, title: &#x27;评分&#x27; &#125;</span><br><span class="line">        ]]</span><br><span class="line">        , done: function (res) &#123;</span><br><span class="line">            // console.log(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 监听table复选框的选择事件</span><br><span class="line">    table.on(&#x27;checkbox(testTable)&#x27;, function (obj) &#123;</span><br><span class="line">        // console.log(obj);           // 当前行的一些常用操作集合</span><br><span class="line">        // console.log(obj.checked);   // 当前是否选中状态</span><br><span class="line">        // console.log(obj.data);      // 选中行的相关数据</span><br><span class="line">        // console.log(obj.type);      // 如果触发的是全选，则为：all，如果触发的是单选，则为：one</span><br><span class="line"></span><br><span class="line">        // var selectedData;   // 选中行的相关数据</span><br><span class="line">        // selectedData = table.checkStatus(&#x27;testTable&#x27;).data;</span><br><span class="line">        // selectedIds = selectedData.map(item =&gt; item.id);</span><br><span class="line">        // // 进行排序</span><br><span class="line">        // selectedIds.sort(function (a, b) &#123;</span><br><span class="line">        //     return a - b;</span><br><span class="line">        // &#125;);</span><br><span class="line"></span><br><span class="line">        selectedIds = table.checkStatus(&#x27;testTable&#x27;).data.map(item =&gt; item.id).sort(function (a, b) &#123;</span><br><span class="line">            return a - b;</span><br><span class="line">        &#125;);   </span><br><span class="line"></span><br><span class="line">        console.log(&#x27;selectedIds&#x27;);</span><br><span class="line">        console.log(selectedIds);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在表格中，添加复选框：在<code>cols</code>中添加<code>&#123; checkbox: true &#125;</code>或<code>&#123; type:&#39;checkbox&#39; &#125;</code></p>
<p>获取选中行的数据：<code>table.checkStatus(&#39;testTable&#39;).data;</code></p>
<blockquote>
<p>这里使用sort，是为了方便看数据，如果没有这个要求，可以不加。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/layui-table-checkbox1.png" alt="layui-table-checkbox1.png (1216×508) (raw.githubusercontent.com)"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/layui-table-checkbox2.png" alt="layui-table-checkbox2.png (1117×506) (raw.githubusercontent.com)"></p>
<blockquote>
<p>如果需求中，按表头的复选框进行全选的时候需要获取到所有页面的数据。根据上面的展示，layui表格中默认的复选框的全选，获取不到所有页面的数据。</p>
</blockquote>
<h3 id="layui表格中表头的复选框实现全选所有页面的数据-多次操作"><a href="#layui表格中表头的复选框实现全选所有页面的数据-多次操作" class="headerlink" title="layui表格中表头的复选框实现全选所有页面的数据-多次操作"></a>layui表格中表头的复选框实现全选所有页面的数据-多次操作</h3><p>完整代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;table&#x27;, &#x27;jquery&#x27;, &#x27;form&#x27;], function () &#123;</span><br><span class="line">    var table = layui.table</span><br><span class="line">        , form = layui.form</span><br><span class="line">        , $ = layui.jquery</span><br><span class="line">        , list = []</span><br><span class="line">        , temp = []     // 当前页的数据</span><br><span class="line">        , selectedIds = [];     // 存放已选中行的id数组</span><br><span class="line"></span><br><span class="line">    function getRandomName() &#123;</span><br><span class="line">        var letters = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">        var name = &#x27;&#x27;;</span><br><span class="line">        for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            name += letters.charAt(Math.floor(Math.random() * letters.length));</span><br><span class="line">        &#125;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 1; i &lt;= 100; i++) &#123;</span><br><span class="line">        list.push(&#123; id: i, name: getRandomName(), score: Math.floor(Math.random() * 1000) + 1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    table.render(&#123;</span><br><span class="line">        elem: &#x27;#testTable&#x27;</span><br><span class="line">        , data: list</span><br><span class="line">        , page: true //开启分页</span><br><span class="line">        , limit: 10</span><br><span class="line">        , cols: [[</span><br><span class="line">            &#123; checkbox: true &#125;</span><br><span class="line">            , &#123; field: &#x27;id&#x27;, title: &#x27;ID&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;name&#x27;, title: &#x27;用户名&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;score&#x27;, title: &#x27;评分&#x27; &#125;</span><br><span class="line">        ]]</span><br><span class="line">        , done: function (res) &#123;</span><br><span class="line">            // 切换页面时，获取当前页的数据</span><br><span class="line">            temp = res.data.map(function (item) &#123;</span><br><span class="line">                return item.id;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 监听table复选框的选择事件</span><br><span class="line">    table.on(&#x27;checkbox(testTable)&#x27;, function (obj) &#123;</span><br><span class="line">        if (obj.type === &#x27;all&#x27;) &#123;	// 表头的全选复选框</span><br><span class="line">            if (obj.checked) &#123;	// 选中状态</span><br><span class="line">                for (var i = 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">                    var valueToAdd = temp[i];</span><br><span class="line">                    // 检查 arr 数组是否已经包含当前值，如果没有则追加</span><br><span class="line">                    if (!selectedIds.includes(valueToAdd)) &#123;</span><br><span class="line">                        // 追加</span><br><span class="line">                        selectedIds.push(valueToAdd);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;	// 未选中状态</span><br><span class="line">                // 减去</span><br><span class="line">                selectedIds = selectedIds.filter(function (item) &#123;</span><br><span class="line">                    return !temp.includes(item);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;	// 每行上的复选框</span><br><span class="line">            if (obj.checked) &#123;	// 选中状态</span><br><span class="line">                // 追加</span><br><span class="line">                selectedIds.push(obj.data.id);</span><br><span class="line">            &#125; else &#123;	// 未选中状态</span><br><span class="line">                // 减去</span><br><span class="line">                var index = selectedIds.indexOf(obj.data.id);</span><br><span class="line">                selectedIds.splice(index, 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 进行排序</span><br><span class="line">        selectedIds.sort(function (a, b) &#123;</span><br><span class="line">            return a - b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>这里代码没有进行优化和封装，是为了大家更方便地看清它的逻辑</code></p>
<p><code>难点</code>：</p>
<p>全选时，怎么去记住不同页面中的数据，如何实现追加数据和减去数据的过程。</p>
<p>刚好在<code>done</code>中可以获取到渲染当前页的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">done: function (res) &#123;</span><br><span class="line">    // 切换页面时，获取当前页的数据</span><br><span class="line">    temp = res.data.map(function (item) &#123;</span><br><span class="line">        return item.id;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>缺点与不足</code>:需要每页都要点一次表头的全选复选框，不能一步到位。</p>
<h3 id="layui表格中表头的复选框实现全选所有页面的数据-一次全选"><a href="#layui表格中表头的复选框实现全选所有页面的数据-一次全选" class="headerlink" title="layui表格中表头的复选框实现全选所有页面的数据-一次全选"></a>layui表格中表头的复选框实现全选所有页面的数据-一次全选</h3><p>使用渲染表格时的<code>templet</code>和<code>title</code>，手动创建复选框，不使用table默认添加复选框的方法<code>（&#123; type:&#39;checkbox&#39; &#125;）</code>添加复选框。</p>
<p>完整代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;table&#x27;, &#x27;jquery&#x27;, &#x27;form&#x27;], function () &#123;</span><br><span class="line">    var table = layui.table</span><br><span class="line">        , form = layui.form</span><br><span class="line">        , $ = layui.jquery</span><br><span class="line">        , list = []</span><br><span class="line">        , selectedIds = [];     // 存放已选中行的id数组</span><br><span class="line"></span><br><span class="line">    function getRandomName() &#123;</span><br><span class="line">        var letters = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">        var name = &#x27;&#x27;;</span><br><span class="line">        for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            name += letters.charAt(Math.floor(Math.random() * letters.length));</span><br><span class="line">        &#125;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 1; i &lt;= 100; i++) &#123;</span><br><span class="line">        list.push(&#123; id: i, name: getRandomName(), score: Math.floor(Math.random() * 1000) + 1 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var adTable = &#123;</span><br><span class="line">        /* </span><br><span class="line">        * 获取表格当前页码</span><br><span class="line">        * @param key：缓存中pages的key值</span><br><span class="line">        * @param data：填充表格的数据数组</span><br><span class="line">        * @param limit：每页显示条数</span><br><span class="line">        */</span><br><span class="line">        getPageCur: function(key, data, limit) &#123;</span><br><span class="line">            var cur,    // 当前页码</span><br><span class="line">                obj = JSON.parse(localStorage.getItem(&quot;pages&quot;)),    // 缓存中的pages对象</span><br><span class="line">                totalPage = Math.ceil(data.length/limit);   // 总页数</span><br><span class="line">            // 存在缓存变量pages</span><br><span class="line">            if(obj) &#123;</span><br><span class="line">                // 缓存中是否有当前表格的页码记录（没有该页码记录，重置为1）</span><br><span class="line">                cur = obj[key] ? obj[key] : 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 不存在缓存变量pages</span><br><span class="line">                cur = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            // 总页数小于当前页码（解决表格删除最后一页最后一条数据)</span><br><span class="line">            if(totalPage &lt; cur) &#123;</span><br><span class="line">                cur = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            return cur;</span><br><span class="line">        &#125;</span><br><span class="line">        /*</span><br><span class="line">        * 设置当前表格页码</span><br><span class="line">        * @param key：key值</span><br><span class="line">        * @param val：value值</span><br><span class="line">        */</span><br><span class="line">        , setPageCur: function(key, val) &#123;</span><br><span class="line">            // 使用对象缓存，是因为有些页面有多层页面，记住多个页面的页码</span><br><span class="line">            var pages = JSON.parse(localStorage.getItem(&quot;pages&quot;)) || &#123;&#125;;  // 缓存中pages对象</span><br><span class="line">            pages[key] = val;   // 设置页码</span><br><span class="line">            pages = JSON.stringify(pages);  </span><br><span class="line">            localStorage.setItem(&quot;pages&quot;, pages);     // 重新放到缓存中</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var page_curr = adTable.getPageCur(&quot;testTable&quot;, list, 10);   // 10是分页的limit值</span><br><span class="line">    table.render(&#123;</span><br><span class="line">        elem: &#x27;#testTable&#x27;</span><br><span class="line">        , data: list</span><br><span class="line">        , page: &#123;</span><br><span class="line">            curr: page_curr</span><br><span class="line">            , limit: 10</span><br><span class="line">        &#125;</span><br><span class="line">        , cols: [[</span><br><span class="line">            &#123;</span><br><span class="line">                field: &#x27;checkbox&#x27;, title: &#x27;&lt;input type=&quot;checkbox&quot; id=&quot;checkAll&quot; lay-filter=&quot;checkAll&quot; lay-skin=&quot;primary&quot;&gt;&#x27;, width: 66, templet: function (res) &#123;</span><br><span class="line">                    return &#x27;&lt;input type=&quot;checkbox&quot; class=&quot;rowCheck&quot; data-id=&quot;&#x27; + res.id + &#x27;&quot; lay-filter=&quot;rowCheck&quot; lay-skin=&quot;primary&quot;&gt;&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            , &#123; field: &#x27;id&#x27;, title: &#x27;ID&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;name&#x27;, title: &#x27;用户名&#x27; &#125;</span><br><span class="line">            , &#123; field: &#x27;score&#x27;, title: &#x27;评分&#x27; &#125;</span><br><span class="line"></span><br><span class="line">        ]]</span><br><span class="line">        , done: function (res, curr, count) &#123;</span><br><span class="line">            // 重置表格的样式</span><br><span class="line">            if(selectedIds.length &gt; 0) &#123;</span><br><span class="line">                // 根据已选selectedIds集合，修改复选框的样式（表头的复选框针对所有行数据，layui框架的全选只针对当前页）</span><br><span class="line">                selectedIds.map(function(item) &#123;</span><br><span class="line">                    $(&#x27;.layui-table input[data-id=&quot;&#x27;+ item +&#x27;&quot;]&#x27;).prop(&#x27;checked&#x27;, true);</span><br><span class="line">                &#125;)</span><br><span class="line">                // 重新渲染</span><br><span class="line">                form.render(&#x27;checkbox&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 记录当前页面</span><br><span class="line">            adTable.setPageCur(&quot;testTable&quot;, curr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 监听表格中表头全选复选框的选择事件</span><br><span class="line">    form.on(&#x27;checkbox(checkAll)&#x27;, function (data) &#123;</span><br><span class="line">        if (!list.length) &#123;</span><br><span class="line">            $(&#x27;input[lay-filter=&quot;checkAll&quot;]&#x27;).prop(&#x27;checked&#x27;, false);</span><br><span class="line">        &#125;</span><br><span class="line">        // 是否全选</span><br><span class="line">        var isAllChecked = data.elem.checked ? true : false;</span><br><span class="line"></span><br><span class="line">        // 是否被选中</span><br><span class="line">        if (isAllChecked) &#123;</span><br><span class="line">            selectedIds = list.map(function (item) &#123;</span><br><span class="line">                return item.id;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            selectedIds = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(selectedIds);</span><br><span class="line"></span><br><span class="line">        // 更新表格中的复选框样式</span><br><span class="line">        $(&#x27;.rowCheck&#x27;).prop(&#x27;checked&#x27;, isAllChecked);</span><br><span class="line">        form.render(&#x27;checkbox&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 监听表格中的复选框</span><br><span class="line">    form.on(&#x27;checkbox(rowCheck)&#x27;, function (data) &#123;</span><br><span class="line">        var isChecked = data.elem.checked	// 是否被选中</span><br><span class="line">            , isAllChecked = false		// 是否全选</span><br><span class="line">            , _id = $(data.elem).data(&quot;id&quot;);// 当前项的id</span><br><span class="line"></span><br><span class="line">        if (isChecked) &#123;</span><br><span class="line">            // 追加</span><br><span class="line">            selectedIds.push(_id);</span><br><span class="line">            isAllChecked = (selectedIds.length == list.length) ? true : false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 减去</span><br><span class="line">            var index = selectedIds.indexOf(_id);</span><br><span class="line">            selectedIds.splice(index, 1);</span><br><span class="line"></span><br><span class="line">            isAllChecked = false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 进行排序</span><br><span class="line">        selectedIds.sort(function (a, b) &#123;</span><br><span class="line">            return a - b;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        console.log(&#x27;selectedIds&#x27;);</span><br><span class="line">        console.log(selectedIds);</span><br><span class="line"></span><br><span class="line">        // 更新全选复选框的样式</span><br><span class="line">        $(&#x27;#checkAll&#x27;).prop(&#x27;checked&#x27;, isAllChecked);</span><br><span class="line">        form.render(&#x27;checkbox&#x27;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>说明</code>：</p>
<ol>
<li><p>获取页面当前页码的方法<code>adTable.getPageCur</code>，大家可以根据自己的实际情况来实现。因为这里有多个表格，所以我放在pages对象中，不同的表格，根据表格名称来缓存对应的页码。</p>
</li>
<li><p>难点和关键代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    field: &#x27;checkbox&#x27;, title: &#x27;&lt;input type=&quot;checkbox&quot; id=&quot;checkAll&quot; lay-filter=&quot;checkAll&quot; lay-skin=&quot;primary&quot;&gt;&#x27;, width: 66, templet: function (res) &#123;</span><br><span class="line">        return &#x27;&lt;input type=&quot;checkbox&quot; class=&quot;rowCheck&quot; data-id=&quot;&#x27; + res.id + &#x27;&quot; lay-filter=&quot;rowCheck&quot; lay-skin=&quot;primary&quot;&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>title</code>属性一定要配置。</li>
<li><code>.rowCheck</code>一定要记得配置对应的id：<code> data-id=&quot;&#39; + res.id + &#39;&quot;</code></li>
</ol>
</li>
</ol>
<p><code>如果有问题，可以留言联系。</code></p>
]]></content>
      <categories>
        <category>layui</category>
      </categories>
      <tags>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>qrcode生成二维码</title>
    <url>/2021/01/27/qrcode%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h4 id="qrcode生成二维码"><a href="#qrcode生成二维码" class="headerlink" title="qrcode生成二维码"></a>qrcode生成二维码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;qrcode.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;text&quot; type=&quot;text&quot; value=&quot;https://www.baidu.com/&quot; style=&quot;width:80%&quot; /&gt;&lt;br /&gt;</span><br><span class="line">&lt;div id=&quot;qrcode&quot; style=&quot;width:100px; height:100px; margin-top:15px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), &#123;</span><br><span class="line">        width : 100,</span><br><span class="line">        height : 100</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function makeCode () &#123;		</span><br><span class="line">        var elText = document.getElementById(&quot;text&quot;);</span><br><span class="line"></span><br><span class="line">        if (!elText.value) &#123;</span><br><span class="line">            alert(&quot;Input a text&quot;);</span><br><span class="line">            elText.focus();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        qrcode.makeCode(elText.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    makeCode();</span><br><span class="line"></span><br><span class="line">    $(&quot;#text&quot;).on(&quot;blur&quot;, function () &#123;</span><br><span class="line">        makeCode();</span><br><span class="line">    &#125;).on(&quot;keydown&quot;, function (e) &#123;</span><br><span class="line">        if (e.keyCode == 13) &#123;</span><br><span class="line">            makeCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="微信二维码电子名片生成系统"><a href="#微信二维码电子名片生成系统" class="headerlink" title="微信二维码电子名片生成系统"></a>微信二维码电子名片生成系统</h4><p><a href="https://gitee.com/winney/work/blob/master/Plugs/qrcode/code.png">【示意图】</a></p>
<p>清空二维码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qrcode.clear(); // clear the code.</span><br></pre></td></tr></table></figure>

<p>加上中文内容会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qrcode.min.js:1 Uncaught Error: code length overflow. (3452&gt;1440)</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p> <a href="https://github.com/KeeeX/qrcodejs">Keeex/qrcode</a>，用这里的js替换原来的js，但生成的内容格式跟原来的是不一样的。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>qrcode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目记录</title>
    <url>/2020/05/26/vue%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="在项目中引入阿里图库"><a href="#在项目中引入阿里图库" class="headerlink" title="在项目中引入阿里图库"></a>在项目中引入阿里图库</h3><ol>
<li>在阿里图库中，选好图标，建立好项目</li>
<li>将整个项目的图标下载到本地解压</li>
<li>在<code>Vue.js</code>项目的<code>assets</code>目录中，新建一个icon目录，将解压后文件夹里面的文件复制到这个目录下</li>
<li>在<code>main.js</code>文件里引入<code>iconfont.css</code>, <code>import &#39;@/assets/icon/iconfont.css&#39;</code></li>
<li>在项目中引入图标的时候要加上<code>iconfont</code>类，然后再添加图标本身的类名</li>
</ol>
<h3 id="链接文字的写法-路由跳转"><a href="#链接文字的写法-路由跳转" class="headerlink" title="链接文字的写法(路由跳转)"></a>链接文字的写法(路由跳转)</h3><h5 id="不传参"><a href="#不传参" class="headerlink" title="不传参"></a>不传参</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明式：&lt;router-link :to=&quot;&#123;name:&#x27;index&#x27;&#125;&#125;&quot;&gt;    或者    &lt;router-link to=&#x27;/index&#x27;&gt;</span><br><span class="line"></span><br><span class="line">编程式：router.push(...)</span><br><span class="line">方法一: this.$router.push(&#123;path:&#x27;路径&#x27;)&#125;;</span><br><span class="line">方法二：this.$router.push(&#123;name:&#x27;组件名&#x27;)&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明式：&lt;router-link :to=&quot;&#123;name:&#x27;index&#x27;,query:&#123;id:&#x27;xxx&#x27;,name:&#x27;xxx&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">编程式：router.push(...)</span><br><span class="line"></span><br><span class="line">方法一：this.$router.push(&#123;path:&#x27;xxx&#x27;,query:&#123;aa:xx, bb: xx&#125;&#125;);   //带查询参数，类似于 “？” 的形式传值</span><br><span class="line"></span><br><span class="line">方法二：this.$router.push(&#123;path:&#x27;xxx&#x27;,params:&#123;aa:xx, bb: xx&#125;&#125;); </span><br><span class="line"></span><br><span class="line">注：以上两种方法的query跳转路径也可以写成name:&#x27;组件名&#x27;的形式</span><br><span class="line"></span><br><span class="line">在query中放入需要传递的参数即可，多个参数之间用逗号隔开；</span><br><span class="line"></span><br><span class="line">取值：this.$route.query.xx   (可在跳转的页面取得所传递的值)；</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">component: () =&gt; import(&#x27;@/views/dashboard/console/index.vue&#x27;),</span><br><span class="line">可以简写为：</span><br><span class="line">component: () =&gt; import(&#x27;@/views/dashboard/console&#x27;),</span><br></pre></td></tr></table></figure>

<h3 id="Vue-js-组件中绑定点击事件不生效的解决方法"><a href="#Vue-js-组件中绑定点击事件不生效的解决方法" class="headerlink" title="Vue.js 组件中绑定点击事件不生效的解决方法"></a>Vue.js 组件中绑定点击事件不生效的解决方法</h3><p>在使用组件（比如 element UI）的过程中，会发现无法通过 @click 绑定标签的点击事件。</p>
<p>因为 Vue.js 使用的是一套自己的事件传递机制，所以我们需要添加 @click.native 来绑定 DOM 原生事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dropdown-item icon=&quot;el-icon-unlock&quot; @click.native=&quot;resetPass&quot;&gt;&lt;/el-dropdown-item&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vuex的store的使用"><a href="#Vuex的store的使用" class="headerlink" title="Vuex的store的使用"></a>Vuex的store的使用</h3><p>注意：改变store值，要使用mutations，不要直接改变<br>store.js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isCollapse: false,</span><br><span class="line">    isMobile: false</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    toggleCollapse(state) &#123;</span><br><span class="line">      state.isCollapse =  !state.isCollapse;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="在页面中的使用："><a href="#在页面中的使用：" class="headerlink" title="在页面中的使用："></a>在页面中的使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在页面中引入：</span><br><span class="line">import &#123; mapState , mapMutations &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">引入state：</span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([&#x27;isCollapse&#x27;,&#x27;isMobile&#x27;])</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">引入方法：</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([&#x27;toggleCollapse&#x27;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">页面结构中，直接使用：</span><br><span class="line">:class=&quot;&#123;&#x27;sider-collapse&#x27;:isCollapse&#125;&quot;</span><br><span class="line"></span><br><span class="line">在事件中直接使用：</span><br><span class="line">this.toggleCollapse();</span><br><span class="line"></span><br><span class="line">如果要传参：</span><br><span class="line">this.toggleCollapse(&#123;</span><br><span class="line">  param: this.isCollapse</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="emit的使用"><a href="#emit的使用" class="headerlink" title="$emit的使用"></a>$emit的使用</h3><p>通过 Event Bus 进行组件间通信，来折叠侧边栏</p>
<p>bus.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 使用 Event Bus</span><br><span class="line">const bus = new Vue();</span><br><span class="line"></span><br><span class="line">export default bus;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在点击事件的组件中：</span><br><span class="line">引入：</span><br><span class="line">import bus from &#x27;../public/bus&#x27;;</span><br><span class="line"></span><br><span class="line">页面结构中：</span><br><span class="line">@click=&quot;collapseChage&quot;</span><br><span class="line">v-show=&quot;!isCollapse&quot;</span><br><span class="line"></span><br><span class="line">数据，方法：</span><br><span class="line">data() &#123; </span><br><span class="line">  return &#123;</span><br><span class="line">      isCollapse: false,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  // 侧边栏折叠</span><br><span class="line">  collapseChage() &#123;</span><br><span class="line">      this.isCollapse = !this.isCollapse;</span><br><span class="line">      bus.$emit(&#x27;toggleCollapse&#x27;, this.isCollapse);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在需要用到这个状态的组件中：</span><br><span class="line">引入：</span><br><span class="line">import bus from &#x27;../public/bus&#x27;;</span><br><span class="line">数据：</span><br><span class="line">data() &#123; </span><br><span class="line">  return &#123;</span><br><span class="line">      isCollapse: false,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">页面结构：</span><br><span class="line">:class=&quot;&#123;&#x27;content-collapse&#x27;:isCollapse&#125;&quot;</span><br><span class="line"></span><br><span class="line">监听toggleCollapse事件：</span><br><span class="line">created() &#123;</span><br><span class="line">  bus.$on(&#x27;toggleCollapse&#x27;, msg =&gt; &#123;</span><br><span class="line">      this.isCollapse = msg;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="如何将element-ui中的表格和分页器连接起来"><a href="#如何将element-ui中的表格和分页器连接起来" class="headerlink" title="如何将element-ui中的表格和分页器连接起来"></a>如何将element-ui中的表格和分页器连接起来</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table </span><br><span class="line">    :data=&quot;tableData.slice((query.pageIndex - 1)*query.pageSize, query.pageIndex * query.pageSize)&quot;</span><br><span class="line">    border</span><br><span class="line">    class=&quot;table&quot;</span><br><span class="line">    ref=&quot;multipleTable&quot;</span><br><span class="line">    header-cell-class-name=&quot;table-header&quot;</span><br><span class="line">    @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">&gt;</span><br><span class="line">	&lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;55&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;name&quot; label=&quot;用户名&quot; &gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;账户余额&quot; &gt;</span><br><span class="line">    	&lt;template slot-scope=&quot;scope&quot;&gt;￥&#123;&#123;scope.row.money&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;pagination&quot; &gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">        background</span><br><span class="line">        @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change=&quot;handleCurrentchange&quot;</span><br><span class="line">        :current-page=&quot;query.pageIndex&quot;</span><br><span class="line">        :page-sizes=&quot;[10, 15, 20, 30]&quot;</span><br><span class="line">        :page-size=&quot;query.pageSize</span><br><span class="line">        layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">        :total=&quot;pageTotal&quot;&gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">	name :&#x27;basetable&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return (</span><br><span class="line">            query:&#123;</span><br><span class="line">                address:&#x27;&#x27;,</span><br><span class="line">                name:&#x27;&#x27;,</span><br><span class="line">                pageIndex:1,   // 当前页</span><br><span class="line">                pageSize: 10,	// 每页显示条数</span><br><span class="line">                tableData: [],</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     // 分页导航</span><br><span class="line">     handleCurrentChange(val) &#123;</span><br><span class="line">        this.$set(this.query,&#x27;pageIndex&#x27;, val);</span><br><span class="line">        this.getData();</span><br><span class="line">     &#125;,</span><br><span class="line">     handleSizeChange(val) &#123;</span><br><span class="line">        this.$set(this.query,&#x27;pageSize&#x27;, val);</span><br><span class="line">        this.getData();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在vue项目中使用sass的配置方法"><a href="#在vue项目中使用sass的配置方法" class="headerlink" title="在vue项目中使用sass的配置方法"></a>在vue项目中使用sass的配置方法</h4><h5 id="1、安装sass的依赖包"><a href="#1、安装sass的依赖包" class="headerlink" title="1、安装sass的依赖包"></a>1、安装sass的依赖包</h5><p><code>sass-loader依赖于node-sass</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>

<h5 id="2、在build文件夹下的webpack-base-conf-js的rules里面添加配置"><a href="#2、在build文件夹下的webpack-base-conf-js的rules里面添加配置" class="headerlink" title="2、在build文件夹下的webpack.base.conf.js的rules里面添加配置"></a>2、在build文件夹下的webpack.base.conf.js的rules里面添加配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> test: /\.sass$/,</span><br><span class="line"> loaders: [&#x27;style&#x27;, &#x27;css&#x27;, &#x27;scss&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下图所示：</p>
<h5 id="3、在APP-vue中修改style标签"><a href="#3、在APP-vue中修改style标签" class="headerlink" title="3、在APP.vue中修改style标签"></a>3、在APP.vue中修改style标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">   $blue:red;</span><br><span class="line">    .common-header&#123;</span><br><span class="line">        color: $blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4、运行项目"><a href="#4、运行项目" class="headerlink" title="4、运行项目"></a>4、运行项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><code>注意：</code></h5><p>如有以下报错，是版本的问题影响的：</p>
<p><code>Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</code></p>
<ul>
<li><strong>解决方法</strong>： 选择更低版本的sass-loader</li>
<li><strong>卸载当前版本</strong>：npm uninstall sass-loader</li>
<li><strong>安装指定版本</strong>：npm install sass-loader<a href="">@7.3.1 </a> –save-dev </li>
</ul>
<p>参考： <a href="https://blog.csdn.net/ze1024/article/details/100516650">安装node-sass运行报错</a></p>
<h4 id="Vue项目设置每个页面的title"><a href="#Vue项目设置每个页面的title" class="headerlink" title="Vue项目设置每个页面的title"></a>Vue项目设置每个页面的title</h4><h5 id="1、在项目目录下安装vue-wechat-title"><a href="#1、在项目目录下安装vue-wechat-title" class="headerlink" title="1、在项目目录下安装vue-wechat-title"></a>1、在项目目录下安装vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vue-wechat-title --save-dev</span><br></pre></td></tr></table></figure>

<h5 id="2、在main-js中-使用vue-wechat-title"><a href="#2、在main-js中-使用vue-wechat-title" class="headerlink" title="2、在main.js中 使用vue-wechat-title"></a>2、在main.js中 使用vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(require(&#x27;vue-wechat-title&#x27;))     //实例化参数</span><br></pre></td></tr></table></figure>

<h5 id="3、在router的配置中设置"><a href="#3、在router的配置中设置" class="headerlink" title="3、在router的配置中设置"></a>3、在router的配置中设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      path: &#x27;/home&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: &#x27;主页&#x27;       //页面标题</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、在每个vue页面中加入"><a href="#4、在每个vue页面中加入" class="headerlink" title="4、在每个vue页面中加入"></a>4、在每个vue页面中加入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;content content-box&quot;&gt;</span><br><span class="line">      &lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-vue项目设置每个页面的title"><a href="#【参考】：-vue项目设置每个页面的title" class="headerlink" title="【参考】： vue项目设置每个页面的title"></a>【参考】： <a href="https://www.cnblogs.com/itgezhu/p/10817502.html">vue项目设置每个页面的title</a></h6><h4 id="Vue-js-ElementUI导航写法"><a href="#Vue-js-ElementUI导航写法" class="headerlink" title="Vue.js + ElementUI导航写法"></a>Vue.js + ElementUI导航写法</h4><h5 id="方法一（基本的）："><a href="#方法一（基本的）：" class="headerlink" title="方法一（基本的）："></a>方法一（基本的）：</h5><blockquote>
<p>ElementUI导航通常会和vue-router一起使用，所以与官网的示例的写法不太一样。具体写法如下:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">   &lt;el-menu-item v-for=&quot;item in items&quot; :index=&quot;item.src&quot;&gt;&#123;&#123;item.name&#125;&#125;            </span><br><span class="line">   &lt;/el-menu-item&gt;</span><br><span class="line"> &lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>

<p><strong>data里则是正常的数据即可：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        items:[</span><br><span class="line">          &#123;src:&#x27;/gameinfo/index&#x27;,name:&#x27;基本信息&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameversion/index&#x27;,name:&#x27;版本管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplatform/index&#x27;,name:&#x27;渠道管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameproduct/index&#x27;,name:&#x27;充值产品&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplugin/index&#x27;,name:&#x27;插件管理&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>【参考】： <a href="https://blog.csdn.net/weixin_42488404/article/details/83414761">VUE elementUi导航写法</a></p>
<h5 id="方法二-加上图标的-："><a href="#方法二-加上图标的-：" class="headerlink" title="方法二(加上图标的)："></a>方法二(加上图标的)：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;(item, i) in items&quot; :key=&quot;i&quot; :index=&quot;item.path&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;          </span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>

<p><strong>data里面</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">items:[</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;基本信息&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-info&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameversion/index&#x27;,</span><br><span class="line">        title:&#x27;版本管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-version&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplatform/index&#x27;,</span><br><span class="line">        title:&#x27;渠道管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-channel&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameproduct/index&#x27;,</span><br><span class="line">        title:&#x27;充值产品&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-recharge&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplugin/index&#x27;,</span><br><span class="line">        title:&#x27;插件管理&#x27;,</span><br><span class="line">        icon:&#x27;el-icon-cpu&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/package/index&#x27;,</span><br><span class="line">        title:&#x27;打包管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-packageKit&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/order/index&#x27;,</span><br><span class="line">        title:&#x27;订单查询&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-orderQuery&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;切换至ios&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-android&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目配置模块化路由</title>
    <url>/2020/05/25/vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E5%8C%96%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── src</span><br><span class="line">|    ├── assets         // 静态资源img、css、js</span><br><span class="line">|    ├── components     // 小组件</span><br><span class="line">|    ├── views          // 页面(视图)组件</span><br><span class="line">|    ├── App.vue        // 根组件</span><br><span class="line">|    ├── main.js        // 全局脚本文件（项目的入口）</span><br><span class="line">|    ├── router</span><br><span class="line">|    |    ├── index.js       // 路由脚本文件</span><br><span class="line">|    |    ├── modules       // 模块</span><br><span class="line">|    |    |    ├── user.js         // 用户模块</span><br><span class="line">|    |    |    ├── other.js        // 其他模块</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="模块文件的配置-以用户模块为例，其他模块也是一样的"><a href="#模块文件的配置-以用户模块为例，其他模块也是一样的" class="headerlink" title="模块文件的配置 (以用户模块为例，其他模块也是一样的)"></a>模块文件的配置 (以用户模块为例，其他模块也是一样的)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;login&#x27;,</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;登录页面&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/login/index.vue&#x27;) </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;register&#x27;,</span><br><span class="line">        path: &#x27;/register&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;注册页面&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/register/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;result&#x27;,</span><br><span class="line">        path: &#x27;/result&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;注册结果&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/register/result/index.vue&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">//因为这里配置了页面title，所以加meta属性，如果不需要配置，可以不加</span><br></pre></td></tr></table></figure>

<h3 id="index-js-router目录下的index-js"><a href="#index-js-router目录下的index-js" class="headerlink" title="index.js (router目录下的index.js)"></a>index.js (router目录下的index.js)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">import accoutRouter from &#x27;./modules/user&#x27;</span><br><span class="line">import otherRouter from &#x27;./modules/other&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">export default new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    ...accoutRouter,</span><br><span class="line">    ...otherRouter,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="根据路由动态修改title"><a href="#根据路由动态修改title" class="headerlink" title="根据路由动态修改title"></a>根据路由动态修改title</h3><p>在main中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 路由发生变化修改页面title */</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.title) &#123;</span><br><span class="line">      document.title = to.meta.title || &#x27;首页&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>main.js最终代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* 路由发生变化修改页面title */</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.title) &#123;</span><br><span class="line">      document.title = to.meta.title || &#x27;首页&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目处理跨域请求</title>
    <url>/2020/12/14/vue%E9%A1%B9%E7%9B%AE%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h4 id="1、设置配置文件"><a href="#1、设置配置文件" class="headerlink" title="1、设置配置文件"></a>1、设置配置文件</h4><ul>
<li>方法一：在根目录中新建vue.config.js文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    runtimeCompiler: true,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            // 匹配请求路径中的字符，</span><br><span class="line">            // 如果符合就用这个代理对象代理本次请求，路径为target的网址，</span><br><span class="line">            // changeOrigin为是否跨域，</span><br><span class="line">            // 如果不想始终传递这个前缀，可以重写路径</span><br><span class="line">            // pathRewrite为是否将指定字符串转换一个再发过去。</span><br><span class="line">            &#x27;/api&#x27;: &#123;</span><br><span class="line">              target: &#x27;http://ttapi.research.itcast.cn/&#x27;,</span><br><span class="line">                ws: true,</span><br><span class="line">                changeOrigin: true,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>方法二：在根目录中，新建config&gt;index.js文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    dev: &#123;</span><br><span class="line">        proxyTable: &#123;</span><br><span class="line">            &#x27;/api&#x27;: &#123;</span><br><span class="line">              target: &#x27;http://ttapi.research.itcast.cn/&#x27;, // 接口的域名</span><br><span class="line">              secure: false, // 如果是https接口，需要配置这个参数</span><br><span class="line">              changeOrigin: true, // 如果接口跨域，需要进行这个参数配置</span><br><span class="line">              pathRewrite: &#123;</span><br><span class="line">                &#x27;^/api&#x27;: &#x27;&#x27; // &#x27;/api/a/user&#x27; ==&#x27;localhost:8080/user&#x27;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、axios请求方法的写法："><a href="#2、axios请求方法的写法：" class="headerlink" title="2、axios请求方法的写法："></a>2、axios请求方法的写法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&#x27;http://ttapi.research.itcast.cn/app/v1_0/comments&#x27;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: &#x27;a&#x27;,</span><br><span class="line">        source: this.source,</span><br><span class="line">        offset: this.offset,</span><br><span class="line">        limit: this.limit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(&#x27;response&#x27;)</span><br><span class="line">    console.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="name属性是父组件传过来的，除了数组，对象，其他都不允许修改"><a href="#name属性是父组件传过来的，除了数组，对象，其他都不允许修改" class="headerlink" title="name属性是父组件传过来的，除了数组，对象，其他都不允许修改"></a>name属性是父组件传过来的，除了数组，对象，其他都不允许修改</h4><blockquote>
<p> props里面的数据，除了数组，对象，其他都不允许修改，所以不能用于页面元素的v-model属性中，因为v-model是双向绑定的</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-field</span><br><span class="line">   v-model=&quot;localName&quot;</span><br><span class="line">   ...</span><br><span class="line">/&gt;</span><br><span class="line"> props: &#123;</span><br><span class="line">     name: &#123;</span><br><span class="line">         type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      localName: this.name</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h4 id="当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写："><a href="#当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写：" class="headerlink" title="当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写："></a>当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写：</h4><p>例如：父组件的name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:name=&quot;user.name&quot;</span><br><span class="line">@update-name=&quot;user.name=$event&quot;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-model=&quot;user.name&quot;</span><br></pre></td></tr></table></figure>

<p>子组件也要跟着修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">this.$emit(&#x27;input&#x27;, this.localName)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-model=”user.name”</p>
<p>默认传递一个名字叫value的数据：    ：value=”user.name”</p>
<p>默认监听input事件:      @input=”user.name=$event”</p>
<p>v-model的本质还是父子组件通信，它仅仅是简化了父组件的使用，子组件还是按照原来那样使用</p>
</blockquote>
<p>注：在同一个子组件传递中，v-model只能使用一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这样是错误的：</span><br><span class="line">&lt;update-name</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    v-model=&quot;user.photo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h5 id="在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用-sync修饰符"><a href="#在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用-sync修饰符" class="headerlink" title="在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用.sync修饰符"></a>在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用.sync修饰符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;update-name</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    :gender.sync=&quot;user.photo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：我们一般把最常用的数据设计为v-model绑定，把不太常用的数据设计为.sync</p>
</blockquote>
<h4 id="销毁组件的一种方法："><a href="#销毁组件的一种方法：" class="headerlink" title="销毁组件的一种方法："></a>销毁组件的一种方法：</h4><p>1、加上v-if来控制渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;update-name</span><br><span class="line">    v-if=&quot;isEditNameShow&quot;</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    @close=&quot;isEditNameShow=false&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="在Vue中操作DOM，要给该元素添加ref属性"><a href="#在Vue中操作DOM，要给该元素添加ref属性" class="headerlink" title="在Vue中操作DOM，要给该元素添加ref属性"></a>在Vue中操作DOM，要给该元素添加ref属性</h4><p>例如：点击头像，选择图片来修改头像</p>
<p>1、给input  file添加ref属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; hidden ref=&quot;file&quot;&gt;</span><br><span class="line">&lt;van-cell title=&quot;头像&quot; is-link center @click=&quot;$refs.file.click()&quot;&gt;</span><br><span class="line">    &lt;van-image</span><br><span class="line">        width=&quot;30&quot;</span><br><span class="line">        height=&quot;30&quot;</span><br><span class="line">        round fit=&quot;cover&quot;</span><br><span class="line">        :src=&quot;user.photo&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br></pre></td></tr></table></figure>

<p>2、控制选择的文件类型：accept属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; hidden ref=&quot;file&quot; accept=&quot;image/*&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>3、监听文件的change事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=&quot;file&quot;</span><br><span class="line">    hidden</span><br><span class="line">    ref=&quot;file&quot;</span><br><span class="line">    accept=&quot;image/*&quot;</span><br><span class="line">    @change=&quot;onFileChange&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>4、解决选择相同文件不触发change事件,手动清空file的value值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onFileChange() &#123;</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">     // 手动清空file的value值</span><br><span class="line">     this.$refs.file.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、展示弹出层，在弹出层预览图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onFileChange() &#123;</span><br><span class="line">     // 展示弹出层</span><br><span class="line">     this.isEditPhotoShow = true</span><br><span class="line"></span><br><span class="line">    //  在弹出层预览选择的图片</span><br><span class="line">    const blod = window.URL.createObjectURL(this.$refs.file.files[0])</span><br><span class="line">    this.previewImage = blod</span><br><span class="line"></span><br><span class="line">     // 手动清空file的value值</span><br><span class="line">     this.$refs.file.value = &#x27;&#x27;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>6、父传，子收。并展示预览图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父传：</span><br><span class="line">&lt;update-photo</span><br><span class="line">    :image=&quot;previewImage&quot;</span><br><span class="line">/&gt;</span><br><span class="line">子收：</span><br><span class="line"> props: &#123;</span><br><span class="line">     image: &#123;</span><br><span class="line">         type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">&lt;div class=&quot;update-photo&quot;&gt;</span><br><span class="line">     &lt;img :src=&quot;image&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>7、修改父子组件传值的文件格式</p>
<blockquote>
<p>如果Content-Type  要求是 multipart/form-data，则一定要提交FormData数据对象，专门用于文件上传的，不能提交{}对象，没用</p>
</blockquote>
<p>所以要修改父组件传过来子组件的文件格式，保留原来的文件格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">onFileChange() &#123;</span><br><span class="line">    ....</span><br><span class="line">    const blod = this.$refs.file.files[0]</span><br><span class="line">    this.previewImage = blod</span><br><span class="line">	....</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&lt;update-photo</span><br><span class="line">    :file=&quot;previewImage&quot;</span><br><span class="line">    @close=&quot;isEditPhotoShow=false&quot;</span><br><span class="line">/&gt;</span><br><span class="line">子组件：</span><br><span class="line"> props: &#123;</span><br><span class="line">     file: &#123;</span><br><span class="line">        //  type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      image: window.URL.createObjectURL(this.file)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>8、处理接口传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件格式处理</span><br><span class="line"> const fd = new FormData()</span><br><span class="line"> fd.append(&#x27;photo&#x27;, this.file)</span><br><span class="line"> // photo为参数名，this.file为参数值</span><br><span class="line"></span><br><span class="line"> await updateUserPhoto(fd)</span><br></pre></td></tr></table></figure>

<p>9、处理图片裁切，使用 <a href="https://github.com/fengyuanchen/cropperjs">cropperjs</a>  这个跟vue没有关系，其他项目也可以使用） 也可以在<a href="https://github.com/vuejs/awesome-vue">Awesome</a> 中搜crop找裁切工具</p>
<ul>
<li>1、安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install cropperjs</span><br></pre></td></tr></table></figure>

<ul>
<li>2、引入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;cropperjs/dist/cropper.css&#x27;</span><br><span class="line">import Cropper from &#x27;cropperjs&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>3、使用：放在mounted里面</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img :src=&quot;image&quot; ref=&quot;image&quot;&gt;</span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    const image = this.$refs.image</span><br><span class="line">    const cropper = new Cropper(image, &#123;</span><br><span class="line">        viewMode: 1,</span><br><span class="line">        dragMode: &#x27;move&#x27;,</span><br><span class="line">        aspectRatio: 1,</span><br><span class="line">        // autoCropArea: 1,</span><br><span class="line">        cropBoxMovable: false,</span><br><span class="line">        cropBoxResizable: false,</span><br><span class="line">        background: false,</span><br><span class="line">        movable: true</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(cropper)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>4、让裁切区居中显示</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.update-photo&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -185px;</span><br><span class="line">    margin-left: -185px;</span><br><span class="line">    height: 370px;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width:370px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>5、获取裁切结果，getCroppedCanvas()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      image: window.URL.createObjectURL(this.file),</span><br><span class="line">      cropper: null</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">使用Promise返回一个裁切对象，用于async</span><br><span class="line"> getCroppedCanvas() &#123;</span><br><span class="line">     return new Promise(resolve =&gt; &#123;</span><br><span class="line">     // 因为cropper定义在mounted中，在这里无法使用，</span><br><span class="line">     	为了能够在这里能调用cropper，将cropper放在data中</span><br><span class="line">          this.cropper.getCroppedCanvas().toBlob((file) =&gt; &#123;</span><br><span class="line">            resolve(file)</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">getCroppedCanvas返回的Promise对象，在这里面使用：</span><br><span class="line">async onConfirm() &#123;</span><br><span class="line">     .....</span><br><span class="line">     const file = await this.getCroppedCanvas()</span><br><span class="line">     const img = window.URL.createObjectURL(file)</span><br><span class="line"></span><br><span class="line">    // 文件格式处理</span><br><span class="line">     const fd = new FormData()</span><br><span class="line">     fd.append(&#x27;photo&#x27;, file)</span><br><span class="line">     </span><br><span class="line">     await updateUserPhoto(fd)</span><br><span class="line"></span><br><span class="line">     this.$emit(&#x27;close&#x27;)</span><br><span class="line">     this.$emit(&#x27;update-photo&#x27;, img)</span><br><span class="line"></span><br><span class="line">     this.$toast.success(&#x27;保存成功&#x27;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/2024/02/28/webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="将多个js文件合并成一个js文件的同时，不进行压缩"><a href="#将多个js文件合并成一个js文件的同时，不进行压缩" class="headerlink" title="将多个js文件合并成一个js文件的同时，不进行压缩"></a>将多个js文件合并成一个js文件的同时，不进行压缩</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;  </span><br><span class="line">  entry: &quot;./src/wanka/index.js&quot;,  // 入口文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;bundle.js&quot;, // 输出的文件名</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  devtool: &#x27;source-map&#x27; // 设置为生成source map</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="import-动态导入"><a href="#import-动态导入" class="headerlink" title="import 动态导入"></a><a href="https://webpack.js.org/api/module-methods/#magic-comments">import 动态导入</a></h4><p>根据当前渠道，打包对应的SDK</p>
<p><code>common.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const pack_platform = &#x27;hongg&#x27;;   // 打包渠道名称</span><br></pre></td></tr></table></figure>

<p><code>hongg/hongg.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export class MYWXSDK &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>./script/index.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; pack_platform &#125; from &#x27;./common&#x27;</span><br><span class="line"></span><br><span class="line">class JMMiddleSDK &#123;</span><br><span class="line">	...</span><br><span class="line">	// 初始化参数</span><br><span class="line">    init(initData, callback) &#123;</span><br><span class="line">    	....</span><br><span class="line">    	</span><br><span class="line">    	// 根据渠道，动态引入对应的SDK</span><br><span class="line">    	import(/* webpackIgnore: true */`../src/$&#123;pack_platform&#125;/$&#123;pack_platform&#125;.js`).then(module =&gt; &#123;</span><br><span class="line">            const &#123; MYWXSDK &#125; = module;</span><br><span class="line">            // 使用 WXSDK 进行后续操作</span><br><span class="line">            console.log(&#x27;MYWXSDK&#x27;);</span><br><span class="line">            console.log(MYWXSDK);</span><br><span class="line">            this.platform = this.initData.platform;</span><br><span class="line">            this.wxsdk = new MYWXSDK(init);</span><br><span class="line">            this.wxsdk.init(init, callback);</span><br><span class="line">          &#125;).catch(err =&gt; &#123;</span><br><span class="line">            console.error(&#x27;报错：&#x27;, err);</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>重点</code>：要在import路径参数前加<code>/* webpackIgnore: true */</code>参数，不然会遍历当前路径下的全部</p>
<p><code>相对路径</code>： <code>../src/</code>， 以dist为当前路径设置的</p>
<blockquote>
<p>每次打包前，只要修改<code>common.js</code>需要打包的渠道名称</p>
</blockquote>
<p>动态导入要使用then：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import().then(module =&gt; &#123;</span><br><span class="line">	// module的使用</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.error(&#x27;报错：&#x27;, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上方法存在一个问题：当渠道sdk的js文件（<code>hongg/hongg.js</code>）中有引入第三方包时，如：<code>import HgSdk from &#39;./HgSdk.min.js&#39;;</code>，则打包时第三方的代码没有被打包进去</p>
</blockquote>
<h4 id="根据不同渠道，动态打包方法一"><a href="#根据不同渠道，动态打包方法一" class="headerlink" title="根据不同渠道，动态打包方法一"></a>根据不同渠道，动态打包方法一</h4><ol>
<li><p>渠道sdk代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export class MYWXSDK &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>每个渠道的class命名要一样，都是<code>MYWXSDK</code>（自定义为一样）</p>
</blockquote>
</li>
<li><p><code>./src/scripts/index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; JMSDK &#125; from &#x27;./import&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>package.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;cross-env CHANNEL=hongg webpack&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打包时，运行<code>npm run build</code>命令；  打包不同渠道，就将<code>CHANNEL的值改为对应的渠道名</code></p>
</blockquote>
</li>
<li><p><code>webpack.config.js</code> ——定义环境变量 CHANNEL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 定义环境变量 CHANNEL</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.DefinePlugin(&#123;</span><br><span class="line">            &#x27;process.env.CHANNEL&#x27;: JSON.stringify(process.env.CHANNEL)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用的时：process.env.CHANNEL即可拿到CHANNEL的值</p>
</blockquote>
</li>
<li><p><code>webpack.config.js</code>——动态生成<code>import.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建渠道importJs文件</span><br><span class="line"> * @param &#123;*&#125; importJsPath </span><br><span class="line"> * @param &#123;*&#125; processEnv </span><br><span class="line"> */</span><br><span class="line">function createImportJs(importJsPath, processEnv) &#123;</span><br><span class="line">    const classPath = `../$&#123;processEnv.CHANNEL&#125;/$&#123;processEnv.CHANNEL&#125;.js`;</span><br><span class="line">    const createImportJsContent = &quot;import &#123; MYWXSDK &#125; from &#x27;&quot; + classPath + &quot;&#x27;; export function JMSDK(init) &#123;return new MYWXSDK (init);&#125;&quot;;</span><br><span class="line">    </span><br><span class="line">    fs.writeFile(importJsPath, createImportJsContent, &#x27;utf8&#x27;, (err) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.error(&quot;import.js文件写入失败， 原因：&quot; + err);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#x27;import.js文件写入成功&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">const importJsPath = &#x27;./src/scripts/import.js&#x27;;</span><br><span class="line">createImportJs(importJsPath, process.env)</span><br></pre></td></tr></table></figure>

<p>在打包前，webpack入口文件index.js中引入的import.js已写入成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; MYWXSDK &#125; from &#x27;../hongg/hongg.js&#x27;; export function JMSDK(init) &#123;return new MYWXSDK (init);&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="优化打包方法1"><a href="#优化打包方法1" class="headerlink" title="优化打包方法1"></a>优化打包方法1</h5><ol>
<li><p><code>package.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;cross-env CHANNEL=$npm_config_channel webpack&quot;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>webpack.config.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = (env, argv) =&gt; &#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        // 定义环境变量 CHANNEL————方法二</span><br><span class="line">        plugins: [</span><br><span class="line">            new webpack.DefinePlugin(&#123;</span><br><span class="line">                 // 可以在命令行中使用 --channel 参数来指定渠道 npm run build --channel=hongg</span><br><span class="line">                &#x27;process.env.CHANNEL&#x27;: JSON.stringify(argv.channel || process.env.CHANNEL)  </span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包命令——直接在这里指定渠道名，不需要修改<code>package.json</code>里的build命令中的CHANNEL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build --channel=hongg</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="优化打包方法2"><a href="#优化打包方法2" class="headerlink" title="优化打包方法2"></a>优化打包方法2</h5><blockquote>
<p>不需要在package.json中添加命令</p>
</blockquote>
<ol>
<li><p><code>webpack.config.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法二</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">/**</span><br><span class="line"> * 创建渠道importJs文件</span><br><span class="line"> * @param &#123;*&#125; importJsPath </span><br><span class="line"> * @param &#123;*&#125; channel   渠道名称</span><br><span class="line"> */</span><br><span class="line">function createImportJs(importJsPath, channel) &#123;</span><br><span class="line">    const classPath = `../$&#123;channel&#125;/$&#123;channel&#125;.js`;</span><br><span class="line">    const createImportJsContent = &quot;import &#123; MYWXSDK &#125; from &#x27;&quot; + classPath + &quot;&#x27;; export function JMSDK(init) &#123;return new MYWXSDK (init);&#125;&quot;;</span><br><span class="line"></span><br><span class="line">    fs.writeFile(importJsPath, createImportJsContent, &#x27;utf8&#x27;, (err) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.error(&quot;import.js文件写入失败， 原因：&quot; + err);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#x27;import.js文件写入成功&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// webpakc打包配置</span><br><span class="line">module.exports = (env, argv) =&gt; &#123;</span><br><span class="line">    const importJsPath = &#x27;./src/scripts/import.js&#x27;;</span><br><span class="line">    createImportJs(importJsPath, env.channel);</span><br><span class="line"></span><br><span class="line">    return&#123;</span><br><span class="line">        // 定义环境变量 CHANNEL————方法二</span><br><span class="line">        plugins: [</span><br><span class="line">            new webpack.DefinePlugin(&#123;</span><br><span class="line">                // 可以在命令行中使用 --channel 参数来指定渠道  webpack --env channel=hongg</span><br><span class="line">                &#x27;process.env.CHANNEL&#x27;: JSON.stringify(env.channel || process.env.CHANNEL)  </span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="根据不用渠道，动态打包方法二"><a href="#根据不用渠道，动态打包方法二" class="headerlink" title="根据不用渠道，动态打包方法二"></a>根据不用渠道，动态打包方法二</h4><ol>
<li><p><code>./src/scripts/index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; JMSDK &#125; from &#x27;./import&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>script/handleSp.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 创建渠道importJs文件</span><br><span class="line">     * @param &#123;*&#125; importJsPath </span><br><span class="line">     * @param &#123;*&#125; processEnvEnviroment </span><br><span class="line">     */</span><br><span class="line">    createImportJs: function (importJsPath, processEnvEnviroment) &#123;</span><br><span class="line">        const params = processEnvEnviroment.split(&#x27;-&#x27;);</span><br><span class="line">        const className = params[0];</span><br><span class="line">        const classPath = params[1];</span><br><span class="line">        const createImportJsContent = &quot;import &#123; &quot; + className + &quot; &#125; from &#x27;&quot; + classPath + &quot;&#x27;; export function JMSDK(init) &#123;return new &quot; + className + &quot;(init);&#125;&quot;;</span><br><span class="line"></span><br><span class="line">        fs.writeFile(importJsPath, createImportJsContent, &#x27;utf8&#x27;, (err) =&gt; &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                console.error(&quot;import.js文件写入失败， 原因：&quot; + err);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&#x27;import.js文件写入成功&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>webpack.config.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 处理自动渠道打包逻辑，生成import.js文件</span><br><span class="line">const hangleSp = require(&#x27;./src/scripts/handleSp.js&#x27;);</span><br><span class="line">const importJsPath = &#x27;./src/scripts/import.js&#x27;;</span><br><span class="line">const processEnvEnviroment = process.env.ENVIRONMENT;</span><br><span class="line">hangleSp.createImportJs(importJsPath, processEnvEnviroment);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>package.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;zidou&quot;: &quot;cross-env ENVIRONMENT=ZDWXSDK-../zidou/zidou npx webpack --stats-error-details&quot;,</span><br><span class="line">    &quot;feiqu&quot;: &quot;cross-env ENVIRONMENT=FQWXSDK-../feiqu/feiqu npx webpack --stats-error-details&quot;,</span><br><span class="line">    &quot;slang&quot;: &quot;cross-env ENVIRONMENT=SLWXSDK-../slang/slang npx webpack --stats-error-details&quot;,</span><br><span class="line">    &quot;lewan&quot;: &quot;cross-env ENVIRONMENT=LWWXSDK-../lewan/lewan npx webpack --stats-error-details&quot;,</span><br><span class="line">    &quot;vxiny&quot;: &quot;cross-env ENVIRONMENT=XYWXSDK-../vxiny/vxiny npx webpack --stats-error-details&quot;,</span><br><span class="line">    &quot;zhwan&quot;: &quot;cross-env ENVIRONMENT=ZWWXSDK-../zhwan/zhwan npx webpack --stats-error-details&quot;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>每次新增渠道，要新增命令， 每个渠道的sdk名称可不一样</p>
</blockquote>
</li>
<li><p>打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run zidou		// npm run 渠道名称</span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn-笔记</title>
    <url>/2021/04/24/yarn%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://yarnpkg.com/">yarn官网</a></p>
<p><a href="https://www.yarnpkg.cn/">yarn中文官网</a></p>
<p><a href="http://yarnpkg.top/">yarn-中文官网</a></p>
<h4 id="全局安装yarn"><a href="#全局安装yarn" class="headerlink" title="全局安装yarn"></a>全局安装yarn</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>

<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>

<h4 id="启动开发环境服务"><a href="#启动开发环境服务" class="headerlink" title="启动开发环境服务"></a>启动开发环境服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="打包（生成静态文件）"><a href="#打包（生成静态文件）" class="headerlink" title="打包（生成静态文件）"></a>打包（生成静态文件）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<h4 id="创建React项目"><a href="#创建React项目" class="headerlink" title="创建React项目"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app">创建React项目</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="添加React-Router"><a href="#添加React-Router" class="headerlink" title="添加React Router"></a>添加React Router</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom@6</span><br></pre></td></tr></table></figure>





<h4 id="使用Vite创建Vue项目"><a href="#使用Vite创建Vue项目" class="headerlink" title="使用Vite创建Vue项目"></a>使用Vite创建Vue项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... Vue3_yarn</span><br><span class="line">√ Package name: ... vue3-yarn</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Vue3_yarn</span><br><span class="line">yarn</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>



<h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">question name (yarn_test):</span><br><span class="line">question version (1.0.0):</span><br><span class="line">question description:</span><br><span class="line">question entry point (index.js):</span><br><span class="line">question repository url:</span><br><span class="line">question author:</span><br><span class="line">question license (MIT):</span><br><span class="line">question private:</span><br><span class="line">success Saved package.json</span><br></pre></td></tr></table></figure>

<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a><strong>添加依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>

<h3 id="将依赖项添加到不同的依赖类别中"><a href="#将依赖项添加到不同的依赖类别中" class="headerlink" title="将依赖项添加到不同的依赖类别中"></a>将依赖项添加到不同的依赖类别中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package] --dev  <span class="comment"># dev dependencies</span></span><br><span class="line">yarn add [package] --peer <span class="comment"># peer dependencies</span></span><br></pre></td></tr></table></figure>

<h4 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a><strong>更新依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>

<h4 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a><strong>删除依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<h4 id="根据package-json文件为项目安装所有依赖"><a href="#根据package-json文件为项目安装所有依赖" class="headerlink" title="根据package.json文件为项目安装所有依赖"></a><strong>根据package.json文件为项目安装所有依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>

<h4 id="更新-Yarn-本体"><a href="#更新-Yarn-本体" class="headerlink" title="更新 Yarn 本体"></a>更新 Yarn 本体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">set</span> version latest</span><br><span class="line">yarn <span class="built_in">set</span> version from sources</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>【WEB前端CSS】文本相关样式的处理</title>
    <url>/2020/08/16/%E3%80%90WEB%E5%89%8D%E7%AB%AFCSS%E3%80%91%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3%E6%A0%B7%E5%BC%8F%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>单行文字溢出使用省略号显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;ellipsis&quot;&gt;</span><br><span class="line">    超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示超出部分省略号显示</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器-常用命令</title>
    <url>/2020/08/22/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>登录云服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh user@server_ip</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>user</code> 替换为您的用户名，<code>server_ip</code> 替换为服务器的 IP 地址或主机名。</p>
</blockquote>
<p>复制文件到云服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp local_file user@server_ip:remote_path</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>local_file</code> 替换为本地文件路径，<code>user</code> 替换为您的用户名，<code>server_ip</code> 替换为服务器的 IP 地址或主机名，<code>remote_path</code> 替换为服务器上的目标路径。</p>
</blockquote>
<p>从云服务器复制文件到本地：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp user@server_ip:remote_file local_path</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>user</code> 替换为您的用户名，<code>server_ip</code> 替换为服务器的 IP 地址或主机名，<code>remote_file</code> 替换为服务器上的源文件路径，<code>local_path</code> 替换为本地目标路径。</p>
</blockquote>
<p>上传文件到云存储（如 AWS S3 或腾讯云 COS）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 cp local_file s3://bucket_name/remote_path</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coscmd upload local_file remote_path bucket_name</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这些命令将本地文件上传到云存储桶（bucket）中</p>
</blockquote>
<p>下载云存储中的文件到本地：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aws s3 cp s3://bucket_name/remote_file local_path</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coscmd download bucket_name remote_file local_path</span><br></pre></td></tr></table></figure>

<p>查看服务器状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status service_name</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将 <code>service_name</code> 替换为您要查看状态的服务名称，例如 <code>nginx</code>、<code>apache2</code> 等。</p>
</blockquote>
<p>启动、停止或重启服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start service_name</span><br><span class="line">sudo systemctl stop service_name</span><br><span class="line">sudo systemctl restart service_name</span><br></pre></td></tr></table></figure>

<p>查看服务器资源使用情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>查找文件所在位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate 文件名</span><br></pre></td></tr></table></figure>

<p>修改了nginx的配置：</p>
<ol>
<li><p>确保配置语法没有错误：<code>sudo nginx -t</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-8-7-centos private]# sudo nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code>nginx -s reload
</code></pre>
<p><a href="https://cloud.tencent.com/document/product/400/35244">Nginx 服务器 SSL 证书安装部署</a></p>
</li>
</ol>
<p><code>有缓存，需要等半个小时以上</code></p>
]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>web移动端开发相关笔记</title>
    <url>/2018/08/22/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="移动端开发的资源与小技巧"><a href="#移动端开发的资源与小技巧" class="headerlink" title="移动端开发的资源与小技巧"></a><a href="https://github.com/jtyjty99999/mobileTech">移动端开发的资源与小技巧</a></h4><p><a href="https://www.quirksmode.org/mobile/">Mobile - Table of contents</a></p>
<p>[移动端](<a href="https://www.yuque.com/docs/share/27e13760-a250-4376-ab7e-072b8bae0b5b#">https://www.yuque.com/docs/share/27e13760-a250-4376-ab7e-072b8bae0b5b?#</a> 《移动端》)-语雀笔记</p>
<p><a href="http://caibaojian.com/mobile-knowledge.html">移动前端知识总结</a></p>
<h4 id="网站收集"><a href="#网站收集" class="headerlink" title="网站收集"></a>网站收集</h4><table>
<thead>
<tr>
<th><a href="https://github.com/AlloyTeam/Mars">移动端Web解决方案</a></th>
<th><a href="https://github.com/hoosin/mobile-web-favorites">移动前端开发收藏夹</a></th>
<th><a href="https://www.oschina.net/translate/mobile-app-optimization-and-performance">优化移动体验的HTML5技巧</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://ww1.sinaimg.cn/bmiddle/c2c57f68jw1e4fh7dmw12j20fi2w6qe1.jpg">移动端手势表</a></td>
<td><a href="http://mobilehtml5.org/">Mobile HTML5</a>—html5移动端兼容性速查</td>
<td><a href="https://pixensity.com/">Pixel Density Display Listing</a>—几乎所有设备的屏幕尺寸与像素密度表</td>
</tr>
<tr>
<td><a href="https://screensiz.es/phone">Screen Sizes</a>—移动设备参数表</td>
<td><a href="https://ivomynttinen.com/blog/ios-design-guidelines">The iOS Design Guidelines</a>—ios端移动设备参数速查</td>
<td><a href="http://wileam.com/iphone-6-screen-cn/">iPhone 6 屏幕揭秘</a></td>
</tr>
<tr>
<td><a href="http://detectmobilebrowsers.com/">移动设备适配库2</a></td>
<td><a href="https://demos.jquerymobile.com/1.4.3/">jQuery Mobile Demos</a></td>
<td><a href="https://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto源码注释</a></td>
</tr>
<tr>
<td><a href="http://www.imooc.com/article/1115">移动端web开发技巧</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="在移动端页面显示控制台（调试）-Vcode"><a href="#在移动端页面显示控制台（调试）-Vcode" class="headerlink" title="在移动端页面显示控制台（调试）-Vcode"></a>在移动端页面显示控制台（调试）-Vcode</h4><p><a href="https://blog.csdn.net/qq_22182989/article/details/125338389">移动端h5网页、微信网页调试之利用vConsole真机调试+显示控制台打印信息、调试接口(附带vue项目里的具体使用方法)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&#x27;https://unpkg.com/vconsole@3.15.0/dist/vconsole.min.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">var vConsole = new window.VConsole(); </span><br></pre></td></tr></table></figure>

<h4 id="移动端H5页面适配问题总结"><a href="#移动端H5页面适配问题总结" class="headerlink" title="移动端H5页面适配问题总结"></a>移动端H5页面适配问题总结</h4><p><a href="https://zhuanlan.zhihu.com/p/141964516">移动端页面的适配</a></p>
<p><a href="https://www.w3cplus.com/css/vw-for-layout.html">再聊移动端页面的适配</a></p>
<h5 id="移动端H5页面使用rem做适配"><a href="#移动端H5页面使用rem做适配" class="headerlink" title="移动端H5页面使用rem做适配"></a>移动端H5页面使用rem做适配</h5><ol>
<li><p><code>如果H5页面不需要放在App内做混合App开发</code>，可以使用<code>vw</code>做适配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br><span class="line">// 设计稿是用iPhone6的尺寸设计，设计稿多少px就写多少rem</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>如果H5页面需要放在App内做混合App开发</code>，不需要兼容低版本的Android手机(9.0及以下)</p>
<ol>
<li><p>使用<code>vw</code>的情况下，<code>不需要兼容Android低版本（≤10.0）手机 </code>   。可以直接使用<code>vw</code>做适配</p>
</li>
<li><p>使用<code>vw</code>的情况下，<code>需要兼容Android低版本（≤10.0）手机，不需要兼容9.0及以下 </code>  的做法</p>
<p>原因：在Android手机低版本（≤10.0）的<code>webview</code>中，会出现<code>h5页面放大的情况</code>。低版本的webview获取错了字段，默认是8的，导致字体放大了8倍</p>
<blockquote>
<p>在在Android手机低版本（≤9.0）的手机自带浏览器中是显示正常的</p>
</blockquote>
<p>解决方法：在Android客户端加上以下两行代码，对webview进行相应的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mWebView.getSettings().setMinimumFontSize(1);</span><br><span class="line">mWebView.getSettings().setMinimumLogicalFontSize(1);</span><br></pre></td></tr></table></figure>

<p>参考博客：<a href="https://www.codenong.com/41179357/">关于html：Android Webview Rem单元可将框的大小缩放</a></p>
</li>
</ol>
</li>
<li><p><code>如果H5页面需要放在App内做混合App开发</code>，且需要兼容低版本的安卓手机(9.0及以下)</p>
<p>使用<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>做适配</p>
<p><strong>使用<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>做适配的注意事项</strong></p>
<ol>
<li><p>要在head中引入</p>
</li>
<li><p>要在样式表前引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/Rem/mobile-util.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：页面不写meta[name=&quot;viewport&quot;]标签,代码自动判断插入</code></p>
</li>
<li><p>iPhone6中，<code>data-dpr=&quot;2&quot;</code>，html的字体<code>style=&quot;font-size: 46.875px;&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">26px——&gt;0.55rem</span><br><span class="line"></span><br><span class="line">// 使用26px除以46.875就是0.55rem（设计稿中，多少px，除以46.875就是多少rem）</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>如果需要适配横屏</code>，修改<code>mobile-util.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 横竖屏字体设置</span><br><span class="line">if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">    // 横屏</span><br><span class="line">    docEl.style.fontSize = rem/2 + &#x27;px&#x27;;   // 将字体缩小一倍</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 竖屏</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// =========在文件最后将mobileUtil.fixScreen();修改为兼容横竖屏变化=========</span><br><span class="line">// 兼容横竖屏切换</span><br><span class="line">window.addEventListener(&quot;orientationchange&quot;, function()&#123;</span><br><span class="line">    mobileUtil.fixScreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br></pre></td></tr></table></figure>

<h4 id="使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）"><a href="#使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）" class="headerlink" title="使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）"></a>使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）</h4><p>webview设置可以解决此错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mWebView.getSettings().setMinimumFontSize(1);</span><br><span class="line">mWebView.getSettings().setMinimumLogicalFontSize(1);</span><br></pre></td></tr></table></figure>

<p>Android Webview的rem单位会放大</p>
<p>参考：<a href="https://www.codenong.com/41179357/">关于html：Android Webview Rem单元可将框的大小缩放</a></p>
<h4 id="移动端meta头一些常用的属性"><a href="#移动端meta头一些常用的属性" class="headerlink" title="移动端meta头一些常用的属性"></a>移动端meta头一些常用的属性</h4><h5 id="1-meta标签"><a href="#1-meta标签" class="headerlink" title="1.meta标签"></a>1.meta标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1，shrink-to-fit=no, viewport-fit=cover&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>width=device-width：设备宽度；</li>
<li>user-scalable=no：是否可以缩放，可以设置为no或者0；</li>
<li>initial-scale=1.0：初始缩放比例</li>
<li>maximum-scale=1.0 ：最大缩放比例 </li>
<li>minimum-scale=1：最小缩放比例</li>
<li>shrink-to-fit=no ： 解决ios9中的bug 识别屏幕宽度</li>
<li>viewport-fit=cover： 解决苹果x 刘海的问题</li>
</ul>
<h5 id="2-针对苹果手机："><a href="#2-针对苹果手机：" class="headerlink" title="2.针对苹果手机："></a>2.针对苹果手机：</h5><p>可以把页面以app的方式添加到桌面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>如果你把app添加到桌面，改状态条的颜色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>允许全屏展示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=yes name=apple-touch-fullscreen&gt;</span><br></pre></td></tr></table></figure>

<p>禁止识别数字为电话,email：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-不常用"><a href="#3-不常用" class="headerlink" title="3.不常用"></a>3.不常用</h5><p>应用信息，保留系统的历史记录，运动效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=App-Config content=&quot;fullscreen=yes,useHistoryState=yes,transition=yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>max-age=180 响应时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;max-age=180&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>解决 dns缓存问题——好处：访问快</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h5><p>强制让360浏览器用chrome内核渲染页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>尽量用IE最新的模式渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>微软的老式浏览器 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>uc强制竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ强制竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>UC强制全屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ强制全屏 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>UC应用模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ应用模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Rem-mobile-util-js的使用"><a href="#Rem-mobile-util-js的使用" class="headerlink" title="Rem-mobile-util.js的使用"></a>Rem-<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/Rem/mobile-util.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：页面不写meta[name=&quot;viewport&quot;]标签,代码自动判断插入</code></p>
<h5 id="mobile-util-js—做横竖屏适配"><a href="#mobile-util-js—做横竖屏适配" class="headerlink" title="mobile-util.js—做横竖屏适配"></a>mobile-util.js—做横竖屏适配</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 横竖屏字体设置</span><br><span class="line">if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">    // 横屏</span><br><span class="line">    docEl.style.fontSize = rem/2 + &#x27;px&#x27;;   // 将字体缩小一倍</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 竖屏</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 兼容横竖屏切换</span><br><span class="line">window.addEventListener(&quot;orientationchange&quot;, function()&#123;</span><br><span class="line">    mobileUtil.fixScreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="移动端横竖屏适配"><a href="#移动端横竖屏适配" class="headerlink" title="移动端横竖屏适配"></a>移动端横竖屏适配</h4><p>摘自：<a href="https://www.jb51.net/article/256157.htm">JavaScript实现移动端横竖屏检测</a>， 仅用于学习</p>
<h5 id="一、HTML方法检测"><a href="#一、HTML方法检测" class="headerlink" title="一、HTML方法检测"></a>一、HTML方法检测</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引用竖屏的CSS文件 portrait.css --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot; rel=&quot;external nofollow&quot;  &gt;</span><br><span class="line">   </span><br><span class="line">  &lt;!-- 引用横屏的CSS文件 landscape.css --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot; href=&quot;landscape.css&quot; rel=&quot;external nofollow&quot;  &gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="二、CSS方法检测"><a href="#二、CSS方法检测" class="headerlink" title="二、CSS方法检测"></a>二、CSS方法检测</h5><p>css中通过媒体查询方法来判断是横屏还是竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 竖屏 */</span><br><span class="line">@media screen and (orientation:portrait) &#123;</span><br><span class="line">  /* 这里写竖屏样式 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 横屏 */</span><br><span class="line">@media screen and (orientation:landscape) &#123;</span><br><span class="line">  /* 这里写横屏样式 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三、JS方法检测"><a href="#三、JS方法检测" class="headerlink" title="三、JS方法检测"></a>三、JS方法检测</h5><p><strong>【1】orientationChange事件</strong></p>
<p>苹果公司为移动 Safari中添加了 orientationchange 事件，orientationchange 事件在设备的纵横方向改变时触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&quot;orientationchange&quot;,function()&#123;</span><br><span class="line">    alert(window.orientation);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<p><strong>【2】orientation属性</strong></p>
<blockquote>
<p>window.orientation 获取手机的横竖的状态，window.orientation 属性中有 4个值：0和180的时候为竖屏（180为倒过来的竖屏），90和-90时为横屏（-90为倒过来的横屏）</p>
<p>0 表示肖像模式，90 表示向左旋转的横向模式（“主屏幕”按钮在右侧），-90 表示向右旋转的横向模 式（“主屏幕”按钮在左侧），180 表示 iPhone头朝下；但这种模式至今 尚未得到支持。如图展示了 window.orientation 的每个值的含义。</p>
</blockquote>
<p><strong>【3】案例</strong></p>
<p>检测用户当前手机横竖屏状态，如果处于横屏状态，提示用户 “为了更好的观看体验，请在竖屏下浏览”，否则不提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #box &#123;</span><br><span class="line">      position: fixed;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">      padding: 50px;</span><br><span class="line">      display: none;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background: rgba(0, 0, 0, .5);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    #box span &#123;</span><br><span class="line">      margin: auto;</span><br><span class="line">      font: 20px/40px &quot;宋体&quot;;</span><br><span class="line">      color: #fff;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;box&quot;&gt;&lt;span&gt;为了更好的观看体验，请在竖屏下浏览&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.addEventListener(&quot;orientationchange&quot;, toOrientation);</span><br><span class="line">    function toOrientation() &#123;</span><br><span class="line">      let box = document.querySelector(&quot;#box&quot;);</span><br><span class="line">      if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">        // 横屏-显示提示</span><br><span class="line">        box.style.display = &quot;flex&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 横屏-隐藏提示</span><br><span class="line">        box.style.display = &quot;none&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="移动端VM适配-横竖屏适配"><a href="#移动端VM适配-横竖屏适配" class="headerlink" title="移动端VM适配-横竖屏适配"></a>移动端VM适配-横竖屏适配</h4><ol>
<li><code>html，body</code>的字体设置<code>font-size: 0.13333333vw; </code></li>
<li>元素<code>多少px</code>，就写<code>多少rem</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 横屏适配</span><br><span class="line">@media screen and (orientation: landscape)&#123;</span><br><span class="line">    html, body&#123;</span><br><span class="line">        font-size: 0.065vw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header&#123;</span><br><span class="line">	font-size: 16rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动端经验总结"><a href="#移动端经验总结" class="headerlink" title="移动端经验总结"></a>移动端经验总结</h2><h4 id="媒体查询常用样式表"><a href="#媒体查询常用样式表" class="headerlink" title="媒体查询常用样式表"></a>媒体查询常用样式表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt;    // 竖放加载</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot;href=&quot;landscape.css&quot;&gt;   // 横放加载</span><br><span class="line"></span><br><span class="line">// 竖屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:portrait)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">    #landscape &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 横屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:landscape)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">    #portrait &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分链接"><a href="#分链接" class="headerlink" title="分链接"></a>分链接</h4><p><a href="https://www.icloud.com/keynote/000DIf8ISxFcuxka4YozKLaOg#Mobile_Webpage_%E5%A6%82%E4%BD%95%E8%87%AA%E9%80%82%E5%BA%94%E5%B1%8F%E5%B9%95_2">如何自适应网页屏幕</a></p>
<p>配套的解决方案（设备判断等）—<a href="https://github.com/unbug/generator-webappstarter/blob/master/app/templates/app/src/util/MetaHandler.js">generator-webappstarter</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent,</span><br><span class="line">  android = ua.match(/(Android);?[\s\/]+([\d.]+)?/),</span><br><span class="line">  ipad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">  ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/),</span><br><span class="line">  iphone = !ipad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">  os = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">if (android) os.android = true, os.version = android[2];</span><br><span class="line">if (iphone &amp;&amp; !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, &#x27;.&#x27;)</span><br><span class="line">if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, &#x27;.&#x27;)</span><br><span class="line">if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, &#x27;.&#x27;) : null;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/imweb/mobile/issues/2">Mobile开发经验沉淀</a>—bug处理</p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/8">移动Web单页应用开发实践——页面结构化</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/1">移动Web产品前端开发口诀——“快”</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/7">移动Web开发，4行代码检测浏览器是否支持position:fixed</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/4">使用border-image实现类似iOS7的1px底边</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/2">移动端web页面使用position:fixed问题总结</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/11">移动Web开发实践——解决position:fixed自适应BUG</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/19">移动手机浏览器m3u8格式视频流播放支持程度测试</a></p>
<h4 id="指尖上的js系列"><a href="#指尖上的js系列" class="headerlink" title="指尖上的js系列"></a>指尖上的js系列</h4><p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html">指尖下的js ——多触式web前端开发之一：对于Touch的处理</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html">指尖下的js ——多触式web前端开发之二：处理简单手势</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html">指尖下的js —— 多触式web前端开发之三：处理复杂手势</a></p>
<h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><h5 id="常用meta整理"><a href="#常用meta整理" class="headerlink" title="常用meta整理"></a><a href="https://segmentfault.com/a/1190000002407912">常用meta整理</a></h5><p>meta标签，这些meta标签在开发webapp时起到非常重要的作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0&quot; name=&quot;viewport&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览； 尤其要注意的是content里多个属性的设置一定要用分号+空格来隔开，如果不规范将不会起作用。</p>
<p>注意根据 <a href="http://www.weibo.com/avajayam">public_00</a> 提供的资料补充，content 使用分号作为分隔，在老的浏览器是支持的，但不是规范写法。</p>
<p>规范的写法应该是使用逗号分隔，参考 <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html">Safari HTML Reference - Supported Meta Tags</a> 和 <a href="http://developer.android.com/guide/webapps/targeting.html">Android - Supporting Different Screens in Web Apps</a></p>
</blockquote>
<blockquote>
<p>第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览； 第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式； 第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码</p>
<p>在设置了initial-scale=1 之后，我们终于可以以1:1 的比例进行页面设计了。 关于viewport，还有一个很重要的概念是：iphone 的safari 浏览器完全没有滚动条，而且不是简单的“隐藏滚动条”， 是根本没有这个功能。iphone 的safari 浏览器实际上从一开始就完整显示了这个网页，然后用viewport 查看其中的一部分。 当你用手指拖动时，其实拖的不是页面，而是viewport。浏览器行为的改变不止是滚动条，交互事件也跟普通桌面不一样。 (请参考：指尖的下JS 系列文章)</p>
<p>更详细的 viewport 相关的知识也可以参考</p>
</blockquote>
<ul>
<li>width - viewport的宽度</li>
<li>height - viewport的高度</li>
<li>initial-scale - 初始的缩放比例</li>
<li>minimum-scale - 允许用户缩放到的最小比例</li>
<li>maximum-scale - 允许用户缩放到的最大比例</li>
<li>user-scalable - 用户是否可以手动缩放</li>
</ul>
<h4 id="适配的相关文章"><a href="#适配的相关文章" class="headerlink" title="适配的相关文章"></a>适配的相关文章</h4><p>[移动端高清、多屏适配方案](<a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme">http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme</a> 3041)</p>
<p><a href="http://www.html-js.com/article/2402">手机淘宝的flexible设计与实现</a></p>
<h4 id="移动开发事件"><a href="#移动开发事件" class="headerlink" title="移动开发事件"></a>移动开发事件</h4><p><a href="http://wo.poco.cn/manson/post/id/268780">手机浏览器常用手势动作监听封装</a></p>
<h4 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h4><ul>
<li>touchstart //当手指接触屏幕时触发</li>
<li>touchmove //当已经接触屏幕的手指开始移动后触发</li>
<li>touchend //当手指离开屏幕时触发</li>
<li>touchcancel</li>
</ul>
<h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><ul>
<li>gesturestart //当两个手指接触屏幕时触发</li>
<li>gesturechange //当两个手指接触屏幕后开始移动时触发</li>
<li>gestureend</li>
</ul>
<h4 id="屏幕旋转事件"><a href="#屏幕旋转事件" class="headerlink" title="屏幕旋转事件"></a>屏幕旋转事件</h4><ul>
<li>onorientationchange</li>
</ul>
<h4 id="检测触摸屏幕的手指何时改变方向"><a href="#检测触摸屏幕的手指何时改变方向" class="headerlink" title="检测触摸屏幕的手指何时改变方向"></a>检测触摸屏幕的手指何时改变方向</h4><ul>
<li>orientationchange</li>
</ul>
<h4 id="touch事件支持的相关属性"><a href="#touch事件支持的相关属性" class="headerlink" title="touch事件支持的相关属性"></a>touch事件支持的相关属性</h4><ul>
<li>touches</li>
<li>targetTouches</li>
<li>changedTouches</li>
<li>clientX　　　　// X coordinate of touch relative to the viewport (excludes scroll offset)</li>
<li>clientY　　　　// Y coordinate of touch relative to the viewport (excludes scroll offset)</li>
<li>screenX　　　 // Relative to the screen</li>
<li>screenY 　　 // Relative to the screen</li>
<li>pageX　　 　　// Relative to the full page (includes scrolling)</li>
<li>pageY　　　　 // Relative to the full page (includes scrolling)</li>
<li>target　　　　 // Node the touch event originated from</li>
<li>identifier　　 // An identifying number, unique to each touch event</li>
<li>屏幕旋转事件：onorientationchange</li>
</ul>
<h4 id="判断屏幕是否旋转"><a href="#判断屏幕是否旋转" class="headerlink" title="判断屏幕是否旋转"></a>判断屏幕是否旋转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function orientationChange() &#123;</span><br><span class="line">    switch(window.orientation) &#123;</span><br><span class="line">      case 0:</span><br><span class="line">            alert(&quot;肖像模式 0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case -90:</span><br><span class="line">            alert(&quot;左旋 -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case 90:</span><br><span class="line">            alert(&quot;右旋 90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case 180:</span><br><span class="line">          alert(&quot;风景模式 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">          break;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">    orientationChange();</span><br><span class="line">    window.onorientationchange = orientationChange;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="JS-单击延迟"><a href="#JS-单击延迟" class="headerlink" title="JS 单击延迟"></a>JS 单击延迟</h4><p>click 事件因为要等待单击确认，会有 300ms 的延迟，体验并不是很好。</p>
<p>开发者大多数会使用封装的 tap 事件来代替click 事件，所谓的 tap 事件由 touchstart 事件 + touchmove 判断 + touchend 事件封装组成。</p>
<p><a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE">Creating Fast Buttons for Mobile Web Applications</a></p>
<p><a href="http://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari">Eliminate 300ms delay on click events in mobile Safari</a></p>
<h4 id="WebKit-CSS"><a href="#WebKit-CSS" class="headerlink" title="WebKit CSS"></a>WebKit CSS</h4><p><a href="http://ued.ctrip.com/blog/wp-content/webkitcss/index.html">携程 UED 整理的 Webkit CSS 文档</a> ，全面、方便查询，下面为常用属性。</p>
<p>①“盒模型”的具体描述性质的包围盒块内容，包括边界，填充等等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-border-bottom-left-radius: radius;</span><br><span class="line">-webkit-border-top-left-radius: horizontal_radius vertical_radius;</span><br><span class="line">-webkit-border-radius: radius;      //容器圆角</span><br><span class="line">-webkit-box-sizing: sizing_model; 边框常量值：border-box/content-box</span><br><span class="line">-webkit-box-shadow: hoff voff blur color; //容器阴影（参数分别为：水平X 方向偏移量；垂直Y 方向偏移量；高斯模糊半径值；阴影颜色值）</span><br><span class="line">-webkit-margin-bottom-collapse: collapse_behavior; 常量值：collapse/discard/separate</span><br><span class="line">-webkit-margin-start: width;</span><br><span class="line">-webkit-padding-start: width;</span><br><span class="line">-webkit-border-image: url(borderimg.gif) 25 25 25 25 round/stretch round/stretch;</span><br><span class="line">-webkit-appearance: push-button;   //内置的CSS 表现，暂时只支持push-button</span><br></pre></td></tr></table></figure>

<p>②“视觉格式化模型”描述性质，确定了位置和大小的块元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: rtl</span><br><span class="line">unicode-bidi: bidi-override; 常量：bidi-override/embed/normal</span><br></pre></td></tr></table></figure>

<p>③“视觉效果”描述属性，调整的视觉效果块内容，包括溢出行为，调整行为，能见度，动画，变换，和过渡。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clip: rect(10px, 5px, 10px, 5px)</span><br><span class="line">resize: auto; 常量：auto/both/horizontal/none/vertical</span><br><span class="line">visibility: visible; 常量: collapse/hidden/visible</span><br><span class="line">-webkit-transition: opacity 1s linear; 动画效果 ease/linear/ease-in/ease-out/ease-in-out</span><br><span class="line">-webkit-backface-visibility: visibler; 常量：visible(默认值)/hidden</span><br><span class="line">-webkit-box-reflect: right 1px; 镜向反转</span><br><span class="line">-webkit-box-reflect: below 4px -webkit-gradient(linear, left top, left bottom,</span><br><span class="line">from(transparent), color-stop(0.5, transparent), to(white));</span><br><span class="line">-webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));;   //CSS 遮罩/蒙板效果</span><br><span class="line">-webkit-mask-attachment: fixed; 常量：fixed/scroll</span><br><span class="line">-webkit-perspective: value; 常量：none(默认)</span><br><span class="line">-webkit-perspective-origin: left top;</span><br><span class="line">-webkit-transform: rotate(5deg);</span><br><span class="line">-webkit-transform-style: preserve-3d; 常量：flat/preserve-3d; (2D 与3D)</span><br></pre></td></tr></table></figure>

<p>④“生成的内容，自动编号，并列出”描述属性，允许您更改内容的一个组成部分，创建自动编号的章节和标题，和操纵的风格清单的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content: “Item” counter(section) ” “;</span><br><span class="line">This resets the counter.</span><br><span class="line">First section</span><br><span class="line">&gt;two section</span><br><span class="line">three section</span><br><span class="line">counter-increment: section 1;</span><br><span class="line">counter-reset: section;</span><br></pre></td></tr></table></figure>

<p>⑤“分页媒体”描述性能与外观的属性，控制印刷版本的网页，如分页符的行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page-break-after: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-before: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-inside: auto; 常量：auto/avoid</span><br></pre></td></tr></table></figure>

<p>⑥“颜色和背景”描述属性控制背景下的块级元素和颜色的文本内容的组成部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-background-clip: content; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-origin: padding; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-size: 55px; 常量：length/length_x/length_y</span><br></pre></td></tr></table></figure>

<p>⑦ “字型”的具体描述性质的文字字体的选择范围内的一个因素。报告还描述属性用于下载字体定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unicode-range: U+00-FF, U+980-9FF;</span><br></pre></td></tr></table></figure>

<p>⑧“文本”描述属性的特定文字样式，间距和自动滚屏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-shadow: #00FFFC 10px 10px 5px;</span><br><span class="line">text-transform: capitalize; 常量：capitalize/lowercase/none/uppercase</span><br><span class="line">word-wrap: break-word; 常量：break-word/normal</span><br><span class="line">-webkit-marquee: right large infinite normal 10s; 常量：direction(方向) increment(迭代次数) repetition(重复) style(样式) speed(速度);</span><br><span class="line">-webkit-marquee-direction: ahead/auto/backwards/down/forwards/left/reverse/right/up</span><br><span class="line">-webkit-marquee-incrementt: 1-n/infinite(无穷次)</span><br><span class="line">-webkit-marquee-speed: fast/normal/slow</span><br><span class="line">-webkit-marquee-style: alternate/none/scroll/slide</span><br><span class="line">-webkit-text-fill-color: #ff6600; 常量：capitalize, lowercase, none, uppercase</span><br><span class="line">-webkit-text-security: circle; 常量：circle/disc/none/square</span><br><span class="line">-webkit-text-size-adjust: none; 常量:auto/none;</span><br><span class="line">-webkit-text-stroke: 15px #fff;</span><br><span class="line">-webkit-line-break: after-white-space; 常量：normal/after-white-space</span><br><span class="line">-webkit-appearance: caps-lock-indicator;</span><br><span class="line">-webkit-nbsp-mode: space; 常量： normal/space</span><br><span class="line">-webkit-rtl-ordering: logical; 常量：visual/logical</span><br><span class="line">-webkit-user-drag: element; 常量：element/auto/none</span><br><span class="line">-webkit-user-modify: read- only; 常量：read-write-plaintext-only/read-write/read-only</span><br><span class="line">-webkit-user-select: text; 常量：text/auto/none</span><br></pre></td></tr></table></figure>

<p>⑨“表格”描述的布局和设计性能表的具体内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-border-horizontal-spacing: 2px;</span><br><span class="line">-webkit-border-vertical-spacing: 2px;</span><br><span class="line">-webkit-column-break-after: right; 常量：always/auto/avoid/left/right</span><br><span class="line">-webkit-column-break-before: right; 常量：always/auto/avoid/left/right</span><br><span class="line">–webkit-column-break-inside: logical; 常量：avoid/auto</span><br><span class="line">-webkit-column-count: 3; //分栏</span><br><span class="line">-webkit-column-rule: 1px solid #fff;</span><br><span class="line">style:dashed,dotted,double,groove,hidden,inset,none,outset,ridge,solid</span><br></pre></td></tr></table></figure>

<p>⑩“用户界面”描述属性，涉及到用户界面元素在浏览器中，如滚动文字区，滚动条，等等。报告还描述属性，范围以外的网页内容，如光标的标注样式和显示当您按住触摸触摸 目标，如在iPhone上的链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-box-align: baseline,center,end,start,stretch 常量：baseline/center/end/start/stretch</span><br><span class="line">-webkit-box-direction: normal;常量：normal/reverse</span><br><span class="line">-webkit-box-flex: flex_valuet</span><br><span class="line">-webkit-box-flex-group: group_number</span><br><span class="line">-webkit-box-lines: multiple; 常量：multiple/single</span><br><span class="line">-webkit-box-ordinal-group: group_number</span><br><span class="line">-webkit-box-orient: block-axis; 常量：block-axis/horizontal/inline-axis/vertical/orientation</span><br><span class="line">–webkit-box-pack: alignment; 常量：center/end/justify/start</span><br></pre></td></tr></table></figure>

<p>动画过渡 这是 Webkit 中最具创新力的特性：使用过渡函数定义动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-animation: title infinite ease-in-out 3s;</span><br><span class="line">animation 有这几个属性：</span><br><span class="line">-webkit-animation-name： //属性名，就是我们定义的keyframes</span><br><span class="line">-webkit-animation-duration：3s //持续时间</span><br><span class="line">-webkit-animation-timing-function： //过渡类型：ease/ linear(线性) /ease-in(慢到快)/ease-out(快到慢) /ease-in-out(慢到快再到慢) /cubic-bezier</span><br><span class="line">-webkit-animation-delay：10ms //动画延迟(默认0)</span><br><span class="line">-webkit-animation-iteration-count： //循环次数(默认1)，infinite 为无限</span><br><span class="line">-webkit-animation-direction： //动画方式：normal(默认 正向播放)； alternate(交替方向，第偶数次正向播放，第奇数次反向播放)</span><br></pre></td></tr></table></figure>

<p>这些同样是可以简写的。但真正让我觉的很爽的是keyframes，它能定义一个动画的转变过程供调用，过程为0%到100%或from(0%)到to(100%)。简单点说，只要你有想法，你想让元素在这个过程中以什么样的方式改变都是很简单的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform: 类型（缩放scale/旋转rotate/倾斜skew/位移translate）</span><br><span class="line">scale(num,num) 放大倍率。scaleX 和 scaleY(3)，可以简写为：scale(* , *)</span><br><span class="line">rotate(*deg) 转动角度。rotateX 和 rotateY，可以简写为：rotate(* , *)</span><br><span class="line">Skew(*deg) 倾斜角度。skewX 和skewY，可简写为：skew(* , *)</span><br><span class="line">translate(*,*) 坐标移动。translateX 和translateY，可简写为：translate(* , *)。</span><br></pre></td></tr></table></figure>

<h4 id="自定义滚动条-from-unknown"><a href="#自定义滚动条-from-unknown" class="headerlink" title="自定义滚动条 from unknown"></a>自定义滚动条 from unknown</h4><p>有没有觉得浏览器自带的原始滚动条很不美观，同时也有看到很多网站的自定义滚动条显得高端，就连chrome32.0开发板都抛弃了原始的滚动条，美观多了。那webkit浏览器是如何自定义滚动条的呢？ 参考：</p>
<p><a href="https://www.xuanfengge.com/css3-webkit-scrollbar.html">CSS3自定义滚动条样式 -webkit-scrollbar</a></p>
<h5 id="滚动条组成"><a href="#滚动条组成" class="headerlink" title="滚动条组成"></a>滚动条组成</h5><ul>
<li>::-webkit-scrollbar 滚动条整体部分</li>
<li>::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li>
<li>::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb）</li>
<li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li>
<li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li>
<li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li>
<li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span><br><span class="line">::-webkit-scrollbar</span><br><span class="line">&#123;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 16px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*定义滚动条轨道 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-track</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*定义滑块 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-thumb</span><br><span class="line">&#123;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);</span><br><span class="line">    background-color: #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.zhaoan.org/849.html">ie内核和webkit内核css滚动条样式</a></p>
<h5 id="ie内核："><a href="#ie内核：" class="headerlink" title="ie内核："></a>ie内核：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">scrollbar-3dlight-color:#D4D0C8; </span><br><span class="line">   scrollbar-highlight-color:#fff; </span><br><span class="line">   scrollbar-face-color:#E4E4E4; </span><br><span class="line">   scrollbar-arrow-color:#666; </span><br><span class="line">   scrollbar-shadow-color:#808080; </span><br><span class="line">   scrollbar-darkshadow-color:#D7DCE0; </span><br><span class="line">   scrollbar-base-color:#D7DCE0; </span><br><span class="line">   scrollbar-track-color:#;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="webkit内核："><a href="#webkit内核：" class="headerlink" title="webkit内核："></a>webkit内核：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Let&#x27;s get this party started */</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 12px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Track */</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); </span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Handle */</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background: rgba(255,0,0,0.8); </span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5); </span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:window-inactive &#123;</span><br><span class="line">background: rgba(255,0,0,0.4); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="隐藏滚动条"><a href="#隐藏滚动条" class="headerlink" title="隐藏滚动条"></a>隐藏滚动条</h5><p>开发H5页面时为了美观，可能会隐藏滚动条，那么此时只要使用如下CSS代码即可实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123; width: 0; height: 0; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="页面描述"><a href="#页面描述" class="headerlink" title="页面描述"></a>页面描述</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;http://www.xxx.com/App_icon_72.png&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个属性是当用户把连接保存到手机桌面时使用的图标，如果不设置，则会用网页的截图。有了这，就可以让你的网页像APP一样存在手机里了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/img/startup.png&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个是APP启动画面图片，用途和上面的类似，如果不设置，启动画面就是白屏，图片像素就是手机全屏的像素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个描述是表示打开的web app的最上面的时间、信号栏是黑色的，当然也可以设置其它参数，详细参数说明请参照：<a href="https://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html">Safari HTML Reference - Supported Meta Tags</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常见的-iPhone-和-Android-屏幕参数。"><a href="#常见的-iPhone-和-Android-屏幕参数。" class="headerlink" title="常见的 iPhone 和 Android 屏幕参数。"></a>常见的 iPhone 和 Android 屏幕参数。</h4><ul>
<li>设备 分辨率 设备像素比率</li>
<li>Android LDPI 320×240 0.75</li>
<li>Iphone 3 &amp; Android MDPI 320×480 1</li>
<li>Android HDPI 480×800 1.5</li>
<li>Iphone 4 960×640 2.0</li>
</ul>
<p>iPhone 4的一个 CSS 像素实际上表现为一块 2×2 的像素。所以图片像是被放大2倍一样，模糊不清晰。</p>
<p>解决办法：</p>
<p>1、页面引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 0.75)&quot; href=&quot;ldpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.0)&quot; href=&quot;mdpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.5)&quot; href=&quot;hdpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 2.0)&quot; href=&quot;retina.css&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>2、CSS文件里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">    background:url(mdpi/bg.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (-webkit-device-pixel-ratio: 1.5) &#123;</span><br><span class="line">    /*CSS for high-density screens*/</span><br><span class="line">    #header &#123;</span><br><span class="line">        background:url(hdpi/bg.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移动-Web-开发经验技巧"><a href="#移动-Web-开发经验技巧" class="headerlink" title="移动 Web 开发经验技巧"></a>移动 Web 开发经验技巧</h4><h5 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h5><h6 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h6><ul>
<li>离线缓存</li>
<li>css优化【3d动画优化】</li>
<li>js优化 【js worker】</li>
<li>spdy,http2</li>
<li>service worker</li>
<li>入口dns预解析</li>
<li>域名收敛</li>
<li>cookie压缩</li>
<li>网速及网络情况侦测</li>
<li>webp</li>
</ul>
<h3 id="策略相关"><a href="#策略相关" class="headerlink" title="策略相关"></a>策略相关</h3><ul>
<li>前端资源压缩去重</li>
<li>首屏前置与资源lazyload</li>
<li>页面模板与数据分离</li>
<li>适当的base64,首屏css不建议使用</li>
<li>script 异步</li>
<li>后台智能加载下一页</li>
<li>图片渐进显示</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/">7 天打造前端性能监控系统</a></p>
<p><a href="http://velocity.oreilly.com.cn/2013/ppts/16_ms_optimization--web_front-end_performance_optimization.pdf">16_ms_optimization—web_front-end_performance_optimization</a></p>
<p><a href="http://velocity.oreilly.com.cn/2011/index.php?func=session&name=%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%EF%BF%BD%25A">velocity 2011 移动互联网应用的性能优化</a></p>
<p><a href="https://github.com/lx7575000/Translation/blob/master/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F.md">Medium图片加载模式</a></p>
<p><a href="https://lwdgit.github.io/editor.md/">Web性能权威指南</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/?hl=zh-cn">Google 性能优化</a></p>
<p><a href="https://imququ.com/post/http2-resource.html">http2资料汇总</a></p>
<p><a href="http://www.html5rocks.com/zh/tutorials/appcache/beginner/">离线缓存使用规范</a></p>
<p><a href="http://www.cnblogs.com/qq309240790/p/5252992.html">12步创建高性能Web APP</a></p>
<p><a href="https://jakearchibald.com/2016/link-in-body/">css加载方式</a></p>
<p><a href="https://www.ampproject.org/docs/get_started/about-amp.html">Google AMP (AMP is a way to build web pages for static content that render fast)</a></p>
<p><a href="https://www.ampproject.org/docs/get_started/about-amp.html">缓存最佳实践</a></p>
<p><a href="http://www.html5rocks.com/zh/tutorials/speed/layers/">以层为基础的渲染加速－chrome</a></p>
<h4 id="点击与click事件"><a href="#点击与click事件" class="headerlink" title="点击与click事件"></a>点击与click事件</h4><p>对于a标记的点击导航，默认是在onclick事件中处理的。而移动客户端对onclick的响应相比PC浏览器有着明显的几百毫秒延迟。</p>
<p>在移动浏览器中对触摸事件的响应顺序应当是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ontouchstart -&gt; ontouchmove -&gt; ontouchend -&gt; onclick</span><br></pre></td></tr></table></figure>

<p>因此，如果确实要加快对点击事件的响应，就应当绑定ontouchend事件。</p>
<p>使用click会出现绑定点击区域闪一下的情况，解决：给该元素一个样式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: rgba(0,0,0,0);</span><br></pre></td></tr></table></figure>

<p>如果不使用click，也不能简单的用touchstart或touchend替代，需要用touchstart的模拟一个click事件，并且不能发生touchmove事件，或者用zepto中的tap（轻击）事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用iphone或ipad浏览很长的网页滚动时的滑动效果很不错吧？不过如果是一个div，然后设置 <code>height:200px;overflow:auto;</code>的话，可以滚动但是完全没有那滑动效果，很郁闷吧？</p>
<p>我看到很多网站为了实现这一效果，用了第三方类库，最常用的是iscroll（包括新浪手机页，百度等） 我一开始也使用，不过自从用了<code>-webkit-overflow-scrolling: touch;</code>样式后，就完全可以抛弃第三方类库了，把它加在<code>body&#123;&#125;</code>区域，所有的<code>overflow</code>需要滚动的都可以生效了。</p>
<p>另外有一篇比较全的移动端点击解决方案 <a href="http://www.zhihu.com/question/28979857">http://www.zhihu.com/question/28979857</a></p>
<h4 id="锁定-viewport"><a href="#锁定-viewport" class="headerlink" title="锁定 viewport"></a>锁定 viewport</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ontouchmove=&quot;event.preventDefault()&quot; //锁定viewport，任何屏幕操作不移动用户界面（弹出键盘除外）。</span><br></pre></td></tr></table></figure>

<h4 id="利用-Media-Query监听"><a href="#利用-Media-Query监听" class="headerlink" title="利用 Media Query监听"></a>利用 Media Query监听</h4><p>Media Query 相信大部分人已经使用过了。其实 JavaScript可以配合 Media Query这么用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mql = window.matchMedia(&quot;(orientation: portrait)&quot;);</span><br><span class="line">mql.addListener(handleOrientationChange);</span><br><span class="line">handleOrientationChange(mql);</span><br><span class="line">function handleOrientationChange(mql) &#123;</span><br><span class="line">    if (mql.matches) &#123;</span><br><span class="line">        alert(&#x27;The device is currently in portrait orientation &#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(&#x27;The device is currently in landscape orientation&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>借助了 Media Query 接口做的事件监听，所以很强大！</p>
<p>也可以通过获取 CSS 值来使用 Media Query 判断设备情况，详情请看：<a href="http://yujiangshui.com/use-javascript-css-media-queries-detect-device-state/">JavaScript 依据 CSS Media Queries 判断设备的方法</a>。</p>
<h4 id="rem最佳实践"><a href="#rem最佳实践" class="headerlink" title="rem最佳实践"></a>rem最佳实践</h4><p>rem是非常好用的一个属性，可以根据html来设定基准值，而且兼容性也很不错。不过有的时候还是需要对一些莫名其妙的浏览器优雅降级。以下是两个实践</p>
<ol>
<li><a href="http://jsbin.com/vaqexuge/4/edit">http://jsbin.com/vaqexuge/4/edit</a> 这有个demo，发现chrome当font-size小于12时，rem会按照12来计算。因此设置基准值要考虑这一点</li>
<li>可以用以下的代码片段保证在低端浏览器下也不会出问题</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html &#123; font-size: 62.5%; &#125; body &#123; font-size: 14px; font-size: 1.4rem; &#125; /* =14px / h1 &#123; font-size: 24px; font-size: 2.4rem; &#125; /=24px */</span><br></pre></td></tr></table></figure>

<h4 id="被点击元素的外观变化，可以使用样式来设定："><a href="#被点击元素的外观变化，可以使用样式来设定：" class="headerlink" title="被点击元素的外观变化，可以使用样式来设定："></a>被点击元素的外观变化，可以使用样式来设定：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: 颜色</span><br></pre></td></tr></table></figure>

<h4 id="检测判断-iPhone-iPod"><a href="#检测判断-iPhone-iPod" class="headerlink" title="检测判断 iPhone/iPod"></a>检测判断 iPhone/iPod</h4><p>开发特定设备的移动网站，首先要做的就是设备侦测了。下面是使用Javascript侦测iPhone/iPod的UA，然后转向到专属的URL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) &#123;</span><br><span class="line">　　if (document.cookie.indexOf(&quot;iphone_redirect=false&quot;) == -1) &#123;</span><br><span class="line">　　　　window.location = &quot;http://m.example.com&quot;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然Javascript是可以在水果设备上运行的，但是用户还是可以禁用。它也会造成客户端刷新和额外的数据传输，所以下面是服务器端侦测和转向：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPhone&#x27;) || strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPod&#x27;)) &#123;</span><br><span class="line">　　header(&#x27;Location: http://yoursite.com/iphone&#x27;);</span><br><span class="line">　　exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="阻止旋转屏幕时自动调整字体大小"><a href="#阻止旋转屏幕时自动调整字体大小" class="headerlink" title="阻止旋转屏幕时自动调整字体大小"></a>阻止旋转屏幕时自动调整字体大小</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="禁止body滚动"><a href="#禁止body滚动" class="headerlink" title="禁止body滚动"></a>禁止body滚动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.ontouchmove=function(e)&#123; e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="页面长按，高亮全选文本"><a href="#页面长按，高亮全选文本" class="headerlink" title="页面长按，高亮全选文本"></a>页面长按，高亮全选文本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;http://blog.csdn.net/freshlover/article/details/40432247&gt;</span><br></pre></td></tr></table></figure>

<h4 id="模拟-hover伪类"><a href="#模拟-hover伪类" class="headerlink" title="模拟:hover伪类"></a>模拟:hover伪类</h4><p>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myLinks = document.getElementsByTagName(&#x27;a&#x27;);</span><br><span class="line">for(var i = 0; i &lt; myLinks.length; i++)&#123;</span><br><span class="line">　　myLinks[i].addEventListener(’touchstart’, function()&#123;this.className = “hover”;&#125;, false);</span><br><span class="line">　　myLinks[i].addEventListener(’touchend’, function()&#123;this.className = “”;&#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后用CSS增加hover效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:hover, a.hover &#123; /* 你的hover效果 */ &#125;</span><br></pre></td></tr></table></figure>

<p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p>
<h4 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h4><p><a href="http://jsbin.com/ibuwol/2/edit">Flex 模板和实例</a></p>
<p><a href="http://www.w3cplus.com/blog/666.html">深入了解 Flexbox 伸缩盒模型</a></p>
<p><a href="http://yehao.diandian.com/post/2013-09-15/40052216426">CSS Flexbox Intro</a></p>
<p><a href="http://www.w3.org/TR/css3-flexbox/">http://www.w3.org/TR/css3-flexbox/</a></p>
<h4 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h4><p>居中是移动端跟pc端共同的噩梦。这里有两种兼容性比较好的新方案。</p>
<ul>
<li>table布局法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123; text-align:center; display:table-cell; vertical-align:middle; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>老版本flex布局法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123; display:-webkit-box; -webkit-box-pack: center; -webkit-box-align: center; text-align:center; &#125;</span><br></pre></td></tr></table></figure>

<p>以上两种其实分别是retchat跟ionic的布局基石。</p>
<p>这里有更详细的更多的选择<a href="http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/">http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</a> 来自周文彬的博客</p>
<h4 id="h5底部输入框被键盘遮挡问题"><a href="#h5底部输入框被键盘遮挡问题" class="headerlink" title="h5底部输入框被键盘遮挡问题"></a>h5底部输入框被键盘遮挡问题</h4><p>h5页面有个很蛋疼的问题就是，当输入框在最底部，点击软键盘后输入框会被遮挡。</p>
<p>可以使用这个api，在点击input的时候调用即可 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView</a></p>
<p>如果切换输入法，由于不同输入法高度不同，又会出现被遮挡问题。由于无法捕获切换输入法的事件，因此可以开一个计时器，不断执行sscrollintoview即可。</p>
<h4 id="移动端实现标题文字截断"><a href="#移动端实现标题文字截断" class="headerlink" title="移动端实现标题文字截断"></a>移动端实现标题文字截断</h4><p><a href="http://www.75team.com/archives/611">http://www.75team.com/archives/611</a></p>
<h4 id="placeholder–line-height"><a href="#placeholder–line-height" class="headerlink" title="placeholder–line-height"></a>placeholder–line-height</h4><p>input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal，（stackoverflow也可查到这种解决办法）。</p>
<h4 id="处理-Retina-双倍屏幕"><a href="#处理-Retina-双倍屏幕" class="headerlink" title="处理 Retina 双倍屏幕"></a>处理 Retina 双倍屏幕</h4><p><a href="http://miekd.com/articles/using-css-sprites-to-optimize-your-website-for-retina-displays/">（经典）Using CSS Sprites to optimize your website for Retina Displays</a></p>
<p><a href="http://www.w3cplus.com/css/css-background-size-graphics.html">使用CSS3的background-size优化苹果的Retina屏幕的图像显示</a></p>
<p><a href="http://www.w3cplus.com/css/using-css-sprites-to-optimize-your-website-for-retina-displays.html">使用 CSS sprites 来优化你的网站在 Retina 屏幕下显示</a></p>
<p><a href="http://alexthorpe.com/uncategorized/css-sprites-for-retina-display-devices/683/">（案例）CSS IMAGE SPRITES FOR RETINA (HIRES) DEVICES</a></p>
<h4 id="input类型为date情况下不支持placeholder（来自于江水）"><a href="#input类型为date情况下不支持placeholder（来自于江水）" class="headerlink" title="input类型为date情况下不支持placeholder（来自于江水）"></a>input类型为date情况下不支持placeholder（来自于江水）</h4><p>这其实是浏览器自己的处理。因为浏览器会针对此类型 input 增加 datepicker 模块。</p>
<p>对 input type date 使用 placeholder 的目的是为了让用户更准确的输入日期格式，iOS 上会有 datepicker 不会显示 placeholder 文字，但是为了统一表单外观，往往需要显示。Android 部分机型没有 datepicker 也不会显示 placeholder 文字。</p>
<p>桌面端（Mac）</p>
<ul>
<li>Safari 不支持 datepicker，placeholder 正常显示。</li>
<li>Firefox 不支持 datepicker，placeholder 正常显示。</li>
<li>Chrome 支持 datepicker，显示 年、月、日 格式，忽略 placeholder。</li>
</ul>
<p>移动端</p>
<ul>
<li>iPhone5 iOS7 有 datepicker 功能，但是不显示 placeholder。</li>
<li>Andorid 4.0.4 无 datepicker 功能，不显示 placeholder</li>
</ul>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&#x27;date&#x27;)&quot;  id=&quot;date&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>因为text是支持placeholder的。因此当用户focus的时候自动把type类型改变为date，这样既有placeholder也有datepicker了</p>
<h4 id="判断照片的横竖排列"><a href="#判断照片的横竖排列" class="headerlink" title="判断照片的横竖排列"></a>判断照片的横竖排列</h4><p>有这样一种需求，需要判断用户照片是横着拍出来的还是竖着拍出来的，这里需要使用照片得exif信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).change(function() &#123;</span><br><span class="line">    var file = this.files[0];</span><br><span class="line">    fr   = new FileReader;</span><br><span class="line"></span><br><span class="line">    fr.onloadend = function() &#123;</span><br><span class="line">        var exif = EXIF.readFromBinaryFile(new BinaryFile(this.result));</span><br><span class="line">        alert(exif.Orientation);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fr.readAsBinaryString(file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用这两个库 来取exif信息<a href="http://www.nihilogic.dk/labs/binaryajax/binaryajax.js">http://www.nihilogic.dk/labs/binaryajax/binaryajax.js</a> <a href="http://www.nihilogic.dk/labs/exif/exif.js">http://www.nihilogic.dk/labs/exif/exif.js</a></p>
<h4 id="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"><a href="#Android上当viewport的width大于device-width时出现文字无故折行的解决办法" class="headerlink" title="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"></a>Android上当viewport的width大于device-width时出现文字无故折行的解决办法</h4><p><a href="http://www.iunbug.com/archives/2013/04/23/798.html">http://www.iunbug.com/archives/2013/04/23/798.html</a></p>
<h4 id="白屏解决与优化方案"><a href="#白屏解决与优化方案" class="headerlink" title="白屏解决与优化方案"></a>白屏解决与优化方案</h4><p>当前很多无线页面都使用前端模板进行数据渲染，那么在糟糕的网速情况下，一进去页面，看到的不是白屏就是 loading，这成为白屏问题。</p>
<p>此问题发生的原因基本可以归结为网速跟静态资源</p>
<p>1、css文件加载需要一些时间，在加载的过程中页面是空白的。 解决：可以考虑将css代码前置和内联。 2、首屏无实际的数据内容，等待异步加载数据再渲染页面导致白屏。 解决：在首屏直接同步渲染html，后续的滚屏等再采用异步请求数据和渲染html。 3、首屏内联js的执行会阻塞页面的渲染。 解决：尽量不在首屏html代码中放置内联脚本。（来自翔歌）</p>
<p>解决方案</p>
<p>根本原因是客户端渲染的无力，因此最简单的方法是在服务器端，使用模板引擎渲染所有页面。同时</p>
<p>1减少文件加载体积，如html压缩，js压缩 2加快js执行速度 比如常见的无限滚动的页面，可以使用js先渲染一个屏幕范围内的东西 3提供一些友好的交互，比如提供一些假的滚动条 4使用本地存储处理静态文件。</p>
<h4 id="h5-小特效实践"><a href="#h5-小特效实践" class="headerlink" title="h5 小特效实践"></a>h5 小特效实践</h4><h5 id="加速度感应（摇一摇）"><a href="#加速度感应（摇一摇）" class="headerlink" title="加速度感应（摇一摇）"></a>加速度感应（摇一摇）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (window.DeviceMotionEvent) &#123; window.addEventListener(&#x27;devicemotion&#x27;,deviceMotionHandler, false);</span><br><span class="line">&#125; var speed = 30;//speed var x = y = z = lastX = lastY = lastZ = 0; function deviceMotionHandler(eventData) &#123;</span><br><span class="line">var acceleration =event.accelerationIncludingGravity; x = acceleration.x; y = acceleration.y; z = acceleration.z; if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed || Math.abs(z-lastZ) &gt; speed) &#123; alert(&#x27;别摇那么大力嘛...&#x27;); // your code here &#125; lastX = x; lastY = y; lastZ = z; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽奖转盘</li>
<li>刮彩票</li>
<li>全景效果</li>
<li>描边动画</li>
<li>翻书</li>
</ul>
<h4 id="如何实现打开已安装的app，若未安装则引导用户安装"><a href="#如何实现打开已安装的app，若未安装则引导用户安装" class="headerlink" title="如何实现打开已安装的app，若未安装则引导用户安装?"></a>如何实现打开已安装的app，若未安装则引导用户安装?</h4><p>来自 <a href="http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html">http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html</a> kissy mobile 通过iframe src发送请求打开app自定义url scheme，如taobao://home（淘宝首页） 、etao://scan（一淘扫描）); 如果安装了客户端则会直接唤起，直接唤起后，之前浏览器窗口（或者扫码工具的webview）推入后台； 如果在指定的时间内客户端没有被唤起，则js重定向到app下载地址。 大概实现代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goToNative:function()&#123;</span><br><span class="line"></span><br><span class="line">    if(!body) &#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            doc.body.appendChild(iframe);</span><br><span class="line">            &#125;, 0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            body.appendChild(iframe);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            doc.body.removeChild(iframe);</span><br><span class="line">            gotoDownload(startTime);//去下载，下载链接一般是itunes app store或者apk文件链接</span><br><span class="line">            /**</span><br><span class="line">             * 测试时间设置小于800ms时，在android下的UC浏览器会打开native app时并下载apk，</span><br><span class="line">             * 测试android+UC下打开native的时间最好大于800ms;</span><br><span class="line">             */</span><br><span class="line">        &#125;, 800);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是 如果是android chrome 25版本以后，在iframe src不会发送请求， 原因如下<a href="https://developers.google.com/chrome/mobile/docs/intents">https://developers.google.com/chrome/mobile/docs/intents</a> ，通过location href使用intent机制拉起客户端可行并且当前页面不跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location = &#x27;intent://&#x27; + schemeUrl + &#x27;#Intent;scheme=&#x27; + scheme + &#x27;;package=&#x27; + self.package + &#x27;;end&#x27;;</span><br></pre></td></tr></table></figure>

<p>补充一个来自三水清的详细讲解<a href="http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/">http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/</a></p>
<h4 id="active的兼容"><a href="#active的兼容" class="headerlink" title="active的兼容"></a>active的兼容</h4><p>今天发现，要让a链接的CSS active伪类生效，只需要给这个a链接的touch系列的任意事件touchstart/touchend绑定一个空的匿名方法即可hack成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">color: #000;</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;a herf=”asdasd”&gt;asdasd&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a=document.getElementsByTagName(‘a’);</span><br><span class="line">for(var i=0;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i].addEventListener(‘touchstart’,function()&#123;&#125;,false);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h4><p>两个方法：使用css3动画的时尽量利用3D加速，从而使得动画变得流畅。动画过程中的动画闪白可以通过 backface-visibility 隐藏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform-style: preserve-3d;</span><br><span class="line">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span><br><span class="line">-webkit-backface-visibility: hidden;</span><br><span class="line">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span><br></pre></td></tr></table></figure>

<h4 id="测试是否支持svg图片"><a href="#测试是否支持svg图片" class="headerlink" title="测试是否支持svg图片"></a>测试是否支持svg图片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.implementation.hasFeature(&quot;http:// www.w3.org/TR/SVG11/feature#Image&quot;, &quot;1.1&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html"><a href="#考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html" class="headerlink" title="考虑兼容“隐私模式”(from http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html)"></a><strong>考虑兼容“隐私模式”(from</strong> <a href="http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html"><strong>http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html</strong></a>)</h4><p>ios的safari提供一种“隐私模式”，如果你的webapp考虑兼容这个模式，那么在使用html5的本地存储的一种————localStorage时，可能因为“隐私模式”下没有权限读写localstorge而使代码抛出错误，导致后续的js代码都无法运行了。</p>
<p>既然在safari的“隐私模式”下，没有调用localStorage的权限，首先想到的是先判断是否支持localStorage，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(&#x27;localStorage&#x27; in window)&#123;</span><br><span class="line">    //需要使用localStorage的代码写在这</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //不支持的提示和向下兼容代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试发现，即使在safari的“隐私模式”下，’localStorage’ in window的返回值依然为true，也就是说，if代码块内部的代码依然会运行，问题没有得到解决。 接下来只能相当使用try catch了，虽然这是一个不太推荐被使用的方法，使用try catch捕获错误，使后续的js代码可以继续运行，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    if(&#x27;localStorage&#x27; in window)&#123;</span><br><span class="line">         //需要使用localStorage的代码写在这</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">         //不支持的提示和向下兼容代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    // 隐私模式相关提示代码和不支持的提示和向下兼容代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，提醒大家注意，在需要兼容ios的safari的“隐私模式”的情况下，本地存储相关的代码需要使用try catch包裹并降级兼容。</p>
<h4 id="安卓手机点击锁定页面效果问题"><a href="#安卓手机点击锁定页面效果问题" class="headerlink" title="安卓手机点击锁定页面效果问题"></a>安卓手机点击锁定页面效果问题</h4><p>有些安卓手机，页面点击时会停止页面的javascript，css3动画等的执行，这个比较蛋疼。不过可以用阻止默认事件解决。详细见 <a href="http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h">http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function touchHandlerDummy(e)</span><br><span class="line">&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">document.addEventListener(&quot;touchstart&quot;, touchHandlerDummy, false);</span><br><span class="line">document.addEventListener(&quot;touchmove&quot;, touchHandlerDummy, false);</span><br><span class="line">document.addEventListener(&quot;touchend&quot;, touchHandlerDummy, false);</span><br></pre></td></tr></table></figure>

<h4 id="消除ie10里面的那个叉号"><a href="#消除ie10里面的那个叉号" class="headerlink" title="消除ie10里面的那个叉号"></a>消除ie10里面的那个叉号</h4><p><a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh767361.aspx">IE Pseudo-elements</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:-ms-clear&#123;display:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等"><a href="#关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等" class="headerlink" title="关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)"></a>关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)</h4><p><a href="http://blog.sina.com.cn/s/blog_6da647a601011u4v.html">mac下网页中文字体优化</a></p>
<p><a href="http://stackoverflow.com/questions/3220662/uiwebview-font-is-thinner-in-portrait-than-landscape">UIWebView font is thinner in portrait than landscape</a></p>
<p>判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">navigator.standalone</span><br></pre></td></tr></table></figure>

<h4 id="隐藏地址栏-amp-处理事件的时候，防止滚动条出现："><a href="#隐藏地址栏-amp-处理事件的时候，防止滚动条出现：" class="headerlink" title="隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现："></a>隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 隐藏地址栏  &amp; 处理事件的时候 ，防止滚动条出现</span><br><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">    setTimeout(function()&#123; window.scrollTo(0, 1); &#125;, 100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="ios7-可以通过meta标签的minimal来隐藏地址栏了"><a href="#ios7-可以通过meta标签的minimal来隐藏地址栏了" class="headerlink" title="ios7 可以通过meta标签的minimal来隐藏地址栏了"></a>ios7 可以通过meta标签的minimal来隐藏地址栏了</h4><p><a href="http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html">http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html</a></p>
<h4 id="判断是否为iPhone："><a href="#判断是否为iPhone：" class="headerlink" title="判断是否为iPhone："></a>判断是否为iPhone：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为 iPhone ：</span><br><span class="line">function isAppleMobile() &#123;</span><br><span class="line">    return (navigator.platform.indexOf(&#x27;iPhone&#x27;) != -1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage:"></a>localStorage:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果名称是n的数据存在 ，则将其读出 ，赋予变量v。</span><br><span class="line">var v = localStorage.getItem(&#x27;n&#x27;) ? localStorage.getItem(&#x27;n&#x27;) : &quot;&quot;;   </span><br><span class="line">localStorage.setItem(&#x27;n&#x27;, v);      // 写入名称为 n、值为  v  的数据</span><br><span class="line">localStorage.removeItem(&#x27;n&#x27;);      // 删除名称为  n  的数据</span><br></pre></td></tr></table></figure>

<h4 id="使用特殊链接："><a href="#使用特殊链接：" class="headerlink" title="使用特殊链接："></a>使用特殊链接：</h4><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接 ,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>或用于单元格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;td onclick=&quot;location.href=&#x27;tel:122&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自动大写与自动修正"><a href="#自动大写与自动修正" class="headerlink" title="自动大写与自动修正"></a>自动大写与自动修正</h4><p>要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="不让-Android-识别邮箱"><a href="#不让-Android-识别邮箱" class="headerlink" title="不让 Android 识别邮箱"></a>不让 Android 识别邮箱</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-touch-callout:none</span><br></pre></td></tr></table></figure>

<h4 id="禁止用户选中文字"><a href="#禁止用户选中文字" class="headerlink" title="禁止用户选中文字"></a>禁止用户选中文字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-user-select:none</span><br></pre></td></tr></table></figure>

<h4 id="动画效果中，使用-translate-比使用定位性能高"><a href="#动画效果中，使用-translate-比使用定位性能高" class="headerlink" title="动画效果中，使用 translate 比使用定位性能高"></a>动画效果中，使用 translate 比使用定位性能高</h4><p><a href="http://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/">Why Moving Elements With Translate() Is Better Than Pos:abs Top/left</a></p>
<h4 id="拿到滚动条"><a href="#拿到滚动条" class="headerlink" title="拿到滚动条"></a>拿到滚动条</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.scrollY </span><br><span class="line">window.scrollX</span><br></pre></td></tr></table></figure>

<p>比如要绑定一个touchmove的事件，正常的情况下类似这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&#x27;touchmove&#x27;, function()&#123;</span><br><span class="line">//.….code</span><br><span class="line">&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>而如果中间的code需要处理的东西多的话，fps就会下降影响程序顺滑度，而如果改成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&#x27;touchmove&#x27;, function()&#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">//.….code</span><br><span class="line">&#125;,0);</span><br><span class="line">&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>把代码放在setTimeout中，会发现程序变快.</p>
<h4 id="关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置"><a href="#关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置" class="headerlink" title="关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置"></a>关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置</h4><p><a href="http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893">http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893</a></p>
<p><a href="https://stackoverflow.com/questions/4687698/multiple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad">Multiple “apple-touch-startup-image” resolutions for iOS web app (esp. for iPad)?</a></p>
<h4 id="position-sticky与position-fixed布局"><a href="#position-sticky与position-fixed布局" class="headerlink" title="position:sticky与position:fixed布局"></a>position:sticky与position:fixed布局</h4><p><a href="http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/">http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/</a><a href="http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/">http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/</a></p>
<h4 id="关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"><a href="#关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格" class="headerlink" title="关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"></a>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</h4><p>可以通过正则去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.value = this.value.replace(/\u2006/g, &#x27;&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="关于android-webview中，input元素输入时出现的怪异情况"><a href="#关于android-webview中，input元素输入时出现的怪异情况" class="headerlink" title="关于android webview中，input元素输入时出现的怪异情况"></a>关于android webview中，input元素输入时出现的怪异情况</h4><p>见下图</p>
<p>​    <img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/webview.png" alt="webview"></p>
<p>Android Web 视图,至少在 HTC EVO 和三星的 Galaxy Nexus 中，文本输入框在输入时表现的就像占位符。情况为一个类似水印的东西在用户输入区域，一旦用户开始输入便会消失(见图片)。</p>
<p>在 Android 的默认样式下当输入框获得焦点后，若存在一个绝对定位或者 fixed 的元素，布局会被破坏，其他元素与系统输入字段会发生重叠(如搜索图标将消失为搜索字段)，可以观察到布局与原始输入字段有偏差(见截图)。</p>
<p>这是一个相当复杂的问题，以下简单布局可以重现这个问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label for=&quot;phone&quot;&gt;Phone: *&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;tel&quot; name=&quot;phone&quot; id=&quot;phone&quot; minlength=&quot;10&quot; maxlength=&quot;10&quot; inputmode=&quot;latin digits&quot; required=&quot;required&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-user-modify: read-write-plaintext-only</span><br></pre></td></tr></table></figure>

<p>详细参考<a href="http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/">http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/</a> 注意，该属性会导致中文不能输入词组，只能单个字。感谢鬼哥与飞（游勇飞）贡献此问题与解决方案</p>
<p>另外，在position:fixed后的元素里，尽量不要使用输入框。更多的bug可参考<a href="http://www.cosdiv.com/page/M0/S882/882353.html">http://www.cosdiv.com/page/M0/S882/882353.html</a></p>
<p>依旧无法解决（摩托罗拉ME863手机），则使用input:text类型而非password类型，并设置其设置 -webkit-text-security: disc; 隐藏输入密码从而解决。</p>
<h4 id="JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用"><a href="#JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用" class="headerlink" title="JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用"></a>JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用</h4><p>解决方法删除了overflow-x:hidden; 然后在JS生成下来菜单之后focus聚焦，这两步操作之后解决了问题。(来自岛都-小Qi)</p>
<p>参考<a href="http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator">http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator</a></p>
<h4 id="Andriod-上去掉语音输入按钮"><a href="#Andriod-上去掉语音输入按钮" class="headerlink" title="Andriod 上去掉语音输入按钮"></a>Andriod 上去掉语音输入按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input::-webkit-input-speech-button &#123;display: none&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IE10-的特殊鼠标事件"><a href="#IE10-的特殊鼠标事件" class="headerlink" title="IE10 的特殊鼠标事件"></a>IE10 的特殊鼠标事件</h4><p><a href="http://www.mansonchor.com/blog/blog_detail_73.html">IE10 事件监听</a></p>
<h4 id="iOS-输入框最佳实践"><a href="#iOS-输入框最佳实践" class="headerlink" title="iOS 输入框最佳实践"></a>iOS 输入框最佳实践</h4><p><a href="http://stackoverflow.com/questions/11219242/mobile-friendly-input-of-a-digits-spaces-string-a-credit-card-number">Mobile-friendly input of a digits + spaces string (a credit card number)</a></p>
<p><a href="http://stackoverflow.com/questions/8216278/html5-input-type-number-vs-tel">HTML5 input type number vs tel</a></p>
<p><a href="http://stackoverflow.com/questions/6178556/iphone-numeric-keyboard-for-text-input">iPhone: numeric keyboard for text input</a></p>
<p><a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html">Text Programming Guide for iOS - Managing the Keyboard</a></p>
<p><a href="http://www.miketaylr.com/code/input-type-attr.html">HTML5 inputs and attribute support</a></p>
<h4 id="往返缓存问题"><a href="#往返缓存问题" class="headerlink" title="往返缓存问题"></a>往返缓存问题</h4><p>点击浏览器的回退，有时候不会自动执行js，特别是在mobilesafari中。这与**往返缓存(bfcache)**有关系。有很多hack的处理方法，可以参考</p>
<p><a href="http://stackoverflow.com/questions/24046/the-safari-back-button-problem">http://stackoverflow.com/questions/24046/the-safari-back-button-problem</a></p>
<p><a href="http://stackoverflow.com/questions/11979156/mobile-safari-back-button">http://stackoverflow.com/questions/11979156/mobile-safari-back-button</a></p>
<h4 id="不暂停的计时器（safari的进程冻结）"><a href="#不暂停的计时器（safari的进程冻结）" class="headerlink" title="不暂停的计时器（safari的进程冻结）"></a>不暂停的计时器（safari的进程冻结）</h4><p><a href="https://www.imququ.com/post/ios-none-freeze-timer.html">https://www.imququ.com/post/ios-none-freeze-timer.html</a> 或者可以用postmessage方式: 主页面:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决ios safari tab在后台会遭遇进程冻结问题</span><br><span class="line">// http://www.apple.com/safari/#gallery-icloud-tabs</span><br><span class="line">// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1</span><br><span class="line">var work;</span><br><span class="line">function startWorker() &#123;</span><br><span class="line">    if (typeof(Worker) !== &quot;undefined&quot;) &#123;</span><br><span class="line">        if (typeof(work) == &quot;undefined&quot;) &#123;</span><br><span class="line">            work = new Worker(&quot;/workers.js&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        work.onmessage = function(event) &#123;</span><br><span class="line">            // document.getElementById(&quot;result-count&quot;).innerHTML = event.data.count;</span><br><span class="line">            // document.getElementById(&quot;result-url&quot;).innerHTML = event.data.targetURL;</span><br><span class="line">            if (target &amp;&amp; event.data.targetURL != &quot;&quot;) target.location.href = event.data.targetURL;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;does not support Web Workers...&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stopWorker() &#123;</span><br><span class="line">    work.terminate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startWorker();</span><br></pre></td></tr></table></figure>

<p>worker:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决ios safari tab在后台会遭遇进程冻结问题</span><br><span class="line">// http://www.apple.com/safari/#gallery-icloud-tabs</span><br><span class="line">// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1</span><br><span class="line"></span><br><span class="line">importScripts(&#x27;/socket.io/socket.io.js&#x27;);</span><br><span class="line"></span><br><span class="line">var count = 0,</span><br><span class="line">    targetURL = &#x27;&#x27;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">var socket = io.connect(&#x27;/&#x27;);</span><br><span class="line">socket.on(&#x27;navigate&#x27;, function (data) &#123;</span><br><span class="line">  count = count++;</span><br><span class="line">  postMessage(&#123;targetURL:data.url,count:count&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Web移动端Fixed布局的解决方案"><a href="#Web移动端Fixed布局的解决方案" class="headerlink" title="Web移动端Fixed布局的解决方案"></a>Web移动端Fixed布局的解决方案</h4><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>
<h4 id="ios上background-attachment-fixed不能正常工作"><a href="#ios上background-attachment-fixed不能正常工作" class="headerlink" title="ios上background-attachment:fixed不能正常工作"></a>ios上background-attachment:fixed不能正常工作</h4><p>参考 <a href="http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7">http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7</a></p>
<h4 id="如何让音频跟视频在ios跟android上自动播放"><a href="#如何让音频跟视频在ios跟android上自动播放" class="headerlink" title="如何让音频跟视频在ios跟android上自动播放"></a>如何让音频跟视频在ios跟android上自动播放</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio autoplay &gt;&lt;source  src=&quot;audio/alarm1.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<p>系统默认情况下 audio的autoplay属性是无法生效的，这也是手机为节省用户流量做的考虑。 如果必须要自动播放，有两种方式可以解决。</p>
<p>1.捕捉一次用户输入后，让音频加载，下次即可播放。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//play and pause it once</span><br><span class="line">document.addEventListener(&#x27;touchstart&#x27;, function () &#123;</span><br><span class="line">    document.getElementsByTagName(&#x27;audio&#x27;)[0].play();</span><br><span class="line">    document.getElementsByTagName(&#x27;audio&#x27;)[0].pause();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这种方法需要捕获一次用户的点击事件来促使音频跟视频加载。当加载后，你就可以用javascript控制音频的播放了，如调用audio.play()</p>
<p>2.利用iframe加载资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ifr=document.createElement(&quot;iframe&quot;);</span><br><span class="line">ifr.setAttribute(&#x27;src&#x27;, &quot;http://mysite.com/myvideo.mp4&quot;);</span><br><span class="line">ifr.setAttribute(&#x27;width&#x27;, &#x27;1px&#x27;);</span><br><span class="line">ifr.setAttribute(&#x27;height&#x27;, &#x27;1px&#x27;);</span><br><span class="line">ifr.setAttribute(&#x27;scrolling&#x27;, &#x27;no&#x27;);</span><br><span class="line">ifr.style.border=&quot;0px&quot;;</span><br><span class="line">document.body.appendChild(ifr);</span><br></pre></td></tr></table></figure>

<p>这种方式其实跟第一种原理是一样的。当资源加载了你就可以控制播放了，但是这里使用iframe来加载，相当于直接触发资源加载。 注意，使用创建audio标签并让其加载的方式是不可行的。 慎用这种方法，会对用户造成很糟糕的影响。。</p>
<h4 id="iOS-6-跟-iPhone-5-的那些事"><a href="#iOS-6-跟-iPhone-5-的那些事" class="headerlink" title="iOS 6 跟 iPhone 5 的那些事"></a>iOS 6 跟 iPhone 5 的那些事</h4><h5 id="IP5-的媒体查询"><a href="#IP5-的媒体查询" class="headerlink" title="IP5 的媒体查询"></a>IP5 的媒体查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media (device-height: 568px) and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line"></span><br><span class="line">/* iPhone 5 or iPod Touch 5th generation */</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用媒体查询，提供不同的启动图片："><a href="#使用媒体查询，提供不同的启动图片：" class="headerlink" title="使用媒体查询，提供不同的启动图片："></a>使用媒体查询，提供不同的启动图片：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;startup-568h.png&quot; rel=&quot;apple-touch-startup-image&quot; media=&quot;(device-height: 568px)&quot;&gt;</span><br><span class="line">&lt;link href=&quot;startup.png&quot; rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x920&quot; media=&quot;(device-height: 480px)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="拍照上传"><a href="#拍照上传" class="headerlink" title="拍照上传"></a>拍照上传</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=file accept=&quot;video/*&quot;&gt;</span><br><span class="line">&lt;input type=file accept=&quot;image/*&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>不支持其他类型的文件 ，如音频，Pages文档或PDF文件。 也没有getUserMedia摄像头的实时流媒体支持。</p>
<h4 id="可以使用的-HTML5-高级-api"><a href="#可以使用的-HTML5-高级-api" class="headerlink" title="可以使用的 HTML5 高级 api"></a>可以使用的 HTML5 高级 api</h4><ul>
<li>multipart POST 表单提交上传</li>
<li>XMLHttpRequest 2 AJAX 上传（甚至进度支持）</li>
<li>文件 API ，在 iOS 6 允许 JavaScript 直接读取的字节数和客户端操作文件。</li>
</ul>
<h4 id="智能应用程序横幅"><a href="#智能应用程序横幅" class="headerlink" title="智能应用程序横幅"></a>智能应用程序横幅</h4><p>有了智能应用程序横幅，当网站上有一个相关联的本机应用程序时，Safari浏览器可以显示一个横幅。 如果用户没有安装这个应用程序将显示“安装”按钮，或已经安装的显示“查看”按钮可打开它。</p>
<p>在 iTunes Link Maker 搜索我们的应用程序和应用程序ID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用 app-argument 提供字符串值，如果参加iTunes联盟计划，可以添加元标记数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx, affiliate-data=partnerId=99&amp;siteID=XXXX&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>横幅需要156像素（设备是312 hi-dpi）在顶部，直到用户在下方点击内容或关闭按钮，你的网站才会展现全部的高度。 它就像HTML的DOM对象，但它不是一个真正的DOM。</p>
<p>CSS3 滤镜</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-filter: blur(5px) grayscale (.5) opacity(0.66) hue-rotate(100deg);</span><br></pre></td></tr></table></figure>

<p>交叉淡变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image: -webkit-cross-fade(url(&quot;logo1.png&quot;), url(&quot;logo2.png&quot;), 50%);</span><br></pre></td></tr></table></figure>

<p>Safari中的全屏幕</p>
<p>除了chrome-less 主屏幕meta标签，现在的iPhone和iPod Touch（而不是在iPad）支持全屏幕模式的窗口。 没有办法强制全屏模式，它需要由用户启动（工具栏上的最后一个图标）。需要引导用户按下屏幕上的全屏图标来激活全屏效果。 可以使用onresize事件检测是否用户切换到全屏幕。</p>
<p>支持requestAnimationFrameAPI</p>
<p>支持image-set,retina屏幕的利器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-image-set(url(low.png) 1x, url(hi.jpg) 2x)</span><br></pre></td></tr></table></figure>

<p>应用程序缓存限制增加至25MB。</p>
<p>Web View（pseudobrowsers，PhoneGap/Cordova应用程序，嵌入式浏览器） 上Javascript运行比Safari慢3.3倍（或者说，Nitro引擎在Safari浏览器是Web应用程序是3.3倍速度）。</p>
<p>autocomplete属性的输入遵循DOM规范</p>
<p>来自DOM4的Mutation Observers已经实现。 您可以使用WebKitMutationObserver构造器捕获DOM的变化</p>
<p>Safari不再总是对用 -webkit-transform:preserve-3d 的元素创建硬件加速</p>
<p>支持window.selection 的Selection API</p>
<p>Canvas更新 ：createImageData有一个参数，现在有两个新的功能做好准备，用webkitGetImageDataHD和webkitPutImageDataHD提供高分辨率图像 。</p>
<p>更新SVG处理器和事件构造函数</p>
<h4 id="IOS7的大更新"><a href="#IOS7的大更新" class="headerlink" title="IOS7的大更新"></a>IOS7的大更新</h4><p><a href="http://jinlong.github.io/blog/2013/09/23/safari-ios7-html5-problems-apis-review/#jtss-tsina">iOS 7 的 Safari 和 HTML5：问题，变化和新 API</a>(张金龙翻译)</p>
<p><a href="http://www.sencha.com/blog/the-html5-scorecard-the-good-the-bad-and-the-ugly-in-ios7">iOS 7 的一些坑(英文)</a></p>
<p><a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review">ios7的一些坑2(英文)</a></p>
<h4 id="webview相关"><a href="#webview相关" class="headerlink" title="webview相关"></a>webview相关</h4><h5 id="Cache开启和设置"><a href="#Cache开启和设置" class="headerlink" title="Cache开启和设置"></a>Cache开启和设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setAppCacheEnabled(true); browser.getSettings().setAppCachePath(&quot;/data/data/[com.packagename]/cache&quot;); browser.getSettings().setAppCacheMaxSize(5*1024*1024); // 5MB</span><br></pre></td></tr></table></figure>

<h5 id="LocalStorage相关设置"><a href="#LocalStorage相关设置" class="headerlink" title="LocalStorage相关设置"></a>LocalStorage相关设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setDatabaseEnabled(true);</span><br><span class="line">browser.getSettings().setDomStorageEnabled(true);</span><br><span class="line">String databasePath = browser.getContext().getDir(&quot;databases&quot;, Context.MODE_PRIVATE).getPath();</span><br><span class="line">browser.getSettings().setDatabasePath(databasePath);//Android　webview的LocalStorage有个问题，关闭APP或者重启后，就清楚了，所以需要browser.getSettings().setDatabase相关的操作，把LocalStoarge存到DB中</span><br><span class="line"></span><br><span class="line">myWebView.setWebChromeClient(new WebChromeClient()&#123;</span><br><span class="line">　　　 @Override</span><br><span class="line">　　　 public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)</span><br><span class="line">　　　 &#123;</span><br><span class="line">　　　　　　　 quotaUpdater.updateQuota(estimatedSize * 2);</span><br><span class="line">　　　 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="浏览器自带缩放按钮取消显示"><a href="#浏览器自带缩放按钮取消显示" class="headerlink" title="浏览器自带缩放按钮取消显示"></a>浏览器自带缩放按钮取消显示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setBuiltInZoomControls(false);</span><br></pre></td></tr></table></figure>

<h5 id="几个比较好的实践"><a href="#几个比较好的实践" class="headerlink" title="几个比较好的实践"></a>几个比较好的实践</h5><p>使用localstorage缓存html</p>
<p>使用lazyload，还要记得lazyload占位图虽然小，但是最好能提前加载到缓存</p>
<p>延时加载执行js</p>
<p>主要原因就在于Android Webview的onPageFinished事件，Android端一般是用这个事件来标识页面加载完成并显示的，也就是说在此之前，会一直loading，但是Android的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。</p>
<h5 id="manifest与缓存相关"><a href="#manifest与缓存相关" class="headerlink" title="manifest与缓存相关:"></a>manifest与缓存相关:</h5><p><a href="http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/">http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/</a> 相关解决方案 <a href="http://mt.tencent.com/">http://mt.tencent.com/</a></p>
<h3 id="移动端调适篇"><a href="#移动端调适篇" class="headerlink" title="移动端调适篇"></a>移动端调适篇</h3><h4 id="手机抓包与配host"><a href="#手机抓包与配host" class="headerlink" title="手机抓包与配host"></a>手机抓包与配host</h4><p>在PC上，我们可以很方便地配host，但是手机上如何配host，这是一个问题。</p>
<p>这里主要使用fiddler和远程代理，实现手机配host的操作，具体操作如下：</p>
<p>首先，保证PC和移动设备在同一个局域网下；</p>
<p>PC上开启fiddler，并在设置中勾选“allow remote computers to connect”</p>
<ol>
<li>首先，保证PC和移动设备在同一个局域网下；</li>
<li>PC上开启fiddler，并在设置中勾选“allow remote computers to connect” </li>
</ol>
<p>​    <img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/fiddler.png" alt="fiddler"></p>
<ol>
<li>手机上设置代理，代理IP为PC的IP地址，端口为8888（这是fiddler的默认端口）。通常手机上可以直接设置代理，如果没有，可以去下载一个叫ProxyDroid的APP来实现代理的设置。</li>
<li>此时你会发现，用手机上网，走的其实是PC上的fiddler，所有的请求包都会在fiddler中列出来，配合willow使用，即可实现配host，甚至是反向代理的操作。</li>
</ol>
<p>也可以用CCProxy之类软件，还有一种方法就是买一个随身wifi，然后手机连接就可以了！</p>
<h4 id="高级抓包"><a href="#高级抓包" class="headerlink" title="高级抓包"></a>高级抓包</h4><p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012112353515306/?suggestedreading&wumii">iPhone上使用Burp Suite捕捉HTTPS通信包方法</a></p>
<p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012101331848980/">mobile app 通信分析方法小议（iOS/Android)</a></p>
<p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012111954741585/">实时抓取移动设备上的通信包(ADVsock2pipe+Wireshark+nc+tcpdump)</a></p>
<h4 id="静态资源缓存问题"><a href="#静态资源缓存问题" class="headerlink" title="静态资源缓存问题"></a>静态资源缓存问题</h4><p>一般用代理软件代理过来的静态资源可以设置nocache避免缓存，但是有的手机比较诡异，会一直缓存住css等资源文件。由于静态资源一般都是用版本号管理的，我们以charles为例子来处理这个问题</p>
<p>charles 选择静态的html页面文件-saveResponse。之后把这个文件保存一下，修改一下版本号。之后继续发请求， 刚才的html页面文件 右键选择 –map local 选择我们修改过版本号的html文件即ok。这其实也是fiddler远程映射并修改文件的一个应用场景。</p>
<h4 id="安卓模拟器和真机区别"><a href="#安卓模拟器和真机区别" class="headerlink" title="安卓模拟器和真机区别"></a>安卓模拟器和真机区别</h4><p><a href="http://www.farsight.com.cn/news/emb105.htm">http://www.farsight.com.cn/news/emb105.htm</a></p>
<p><a href="http://testerhome.com/topics/388">http://testerhome.com/topics/388</a></p>
<p><a href="http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html">http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html</a></p>
<h3 id="移动浏览器篇"><a href="#移动浏览器篇" class="headerlink" title="移动浏览器篇"></a>移动浏览器篇</h3><h4 id="微信浏览器"><a href="#微信浏览器" class="headerlink" title="微信浏览器"></a>微信浏览器</h4><p>微信浏览器的调试技巧[<a href="http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076]">http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076]</a>(<a href="http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5">http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5</a> 3076)</p>
<p>微信浏览器的各种bug汇总 （x5内核） <a href="http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/">http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/</a></p>
<p>因为微信浏览器屏蔽了一部分链接图片，所以需要引导用户去打开新页面，可以用以下方式判断微信浏览器的ua</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixn()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后端判断也很简单，比如php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixin()&#123;</span><br><span class="line">    if ( strpos($_SERVER[&#x27;HTTP_USER_AGENT&#x27;], &#x27;MicroMessenger&#x27;) !== false ) &#123;</span><br><span class="line">            return true;</span><br><span class="line">    &#125;  </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/31">https://github.com/maxzhang/maxzhang.github.com/issues/31</a> 微信浏览器踩坑，来自maxZhang <a href="https://github.com/maxzhang">https://github.com/maxzhang</a></p>
<h4 id="【UC浏览器】video标签脱离文档流"><a href="#【UC浏览器】video标签脱离文档流" class="headerlink" title="【UC浏览器】video标签脱离文档流"></a>【UC浏览器】video标签脱离文档流</h4><p>场景：标签的父元素(祖辈元素)设置transform样式后，标签会脱离文档流。</p>
<p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p>
<p>Demo：<a href="http://t.cn/zj3xiyu">http://t.cn/zj3xiyu</a></p>
<p>解决方案：不使用transform属性。translate用top、margin等属性替代。</p>
<h4 id="【UC浏览器】video标签总在最前"><a href="#【UC浏览器】video标签总在最前" class="headerlink" title="【UC浏览器】video标签总在最前"></a>【UC浏览器】video标签总在最前</h4><p>场景：标签总是在最前（可以理解为video标签的z-index属性是Max）。</p>
<p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p>
<h4 id="【UC浏览器】position-fixed-属性在UC浏览器的奇葩现象"><a href="#【UC浏览器】position-fixed-属性在UC浏览器的奇葩现象" class="headerlink" title="【UC浏览器】position:fixed 属性在UC浏览器的奇葩现象"></a>【UC浏览器】position:fixed 属性在UC浏览器的奇葩现象</h4><p>场景：设置了position: fixed 的元素会遮挡z-index值更高的同辈元素。</p>
<p>　　　在8.6的版本,这个情况直接出现。</p>
<p>　　　在8.7之后的版本,当同辈元素的height大于713这个「神奇」的数值时,才会被遮挡。</p>
<p>测试环境：UC浏览器 8.8_beta/8.7/8.6 + Android 2.3/4.0 。</p>
<p>Demo：<a href="http://t.cn/zYLTSg6">http://t.cn/zYLTSg6</a></p>
<h4 id="【UC浏览器】rem-不能正确计算的问题"><a href="#【UC浏览器】rem-不能正确计算的问题" class="headerlink" title="【UC浏览器】rem 不能正确计算的问题"></a>【UC浏览器】rem 不能正确计算的问题</h4><p>场景：使用以下代码，横竖屏操作后，rem并没有被重新计算，一开始以为是页面没有重绘，强制重绘页面后，发现问题并没有解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (doc, win) &#123;</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">      resizeEvt = &#x27;orientationchange&#x27; in window ? &#x27;orientationchange&#x27; : &#x27;resize&#x27;,</span><br><span class="line">      recalc = function () &#123;</span><br><span class="line">          var clientWidth = docEl.clientWidth;</span><br><span class="line">          if (!clientWidth) return;</span><br><span class="line">          docEl.style.fontSize = 100 * (clientWidth / 320) + &#x27;px&#x27;;</span><br><span class="line">      &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  if (!doc.addEventListener) return;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">  doc.addEventListener(&#x27;DOMContentLoaded&#x27;, recalc, false);</span><br><span class="line">&#125;)(document, window);</span><br></pre></td></tr></table></figure>

<p>测试环境：UC浏览器 V10.9 + Android 6.0+ 。</p>
<p>解决方案：手动在head中插入style，给html设置font-size,并使用 !important 增加优先级，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (doc, win) &#123;</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">      resizeEvt = &#x27;orientationchange&#x27; in window ? &#x27;orientationchange&#x27; : &#x27;resize&#x27;,</span><br><span class="line">      recalc = function () &#123;</span><br><span class="line">          var clientWidth = docEl.clientWidth;</span><br><span class="line">          if (!clientWidth) return;</span><br><span class="line">          var style;</span><br><span class="line">          if(style=document.getElementById(&quot;hackUcRem&quot;))&#123;</span><br><span class="line">              style.parentNode.removeChild(style);</span><br><span class="line">          &#125;</span><br><span class="line">          style = document.createElement(&quot;style&quot;);</span><br><span class="line">          style.id=&quot;hackUcRem&quot;;</span><br><span class="line">          document.head.appendChild(style);</span><br><span class="line">          style.appendChild(document.createTextNode(&quot;html&#123;font-size:&quot; + 100 * (clientWidth / 320) + &quot;px !important;&#125;&quot;));</span><br><span class="line">          docEl.style.fontSize = 100 * (clientWidth / 320) + &#x27;px&#x27;;</span><br><span class="line">      &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  if (!doc.addEventListener) return;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">  doc.addEventListener(&#x27;DOMContentLoaded&#x27;, recalc, false);</span><br><span class="line">&#125;)(document, window);</span><br></pre></td></tr></table></figure>

<h4 id="【QQ手机浏览器】不支持HttpOnly"><a href="#【QQ手机浏览器】不支持HttpOnly" class="headerlink" title="【QQ手机浏览器】不支持HttpOnly"></a>【QQ手机浏览器】不支持HttpOnly</h4><p>场景：带有HttpOnly属性的Cookie，在QQ手机浏览器版本从4.0开始失效。JavaScript可以直接读取设置了HttpOnly的Cookie值。</p>
<p>测试环境：QQ手机浏览器 4.0/4.1/4.2 + Android 4.0 。</p>
<h4 id="【MIUI原生浏览器】浏览器地址栏hash不改变"><a href="#【MIUI原生浏览器】浏览器地址栏hash不改变" class="headerlink" title="【MIUI原生浏览器】浏览器地址栏hash不改变"></a>【MIUI原生浏览器】浏览器地址栏hash不改变</h4><p>场景：location.hash 被赋值后，地址栏的地址不会改变。</p>
<p>　　　但实际上 location.href 已经更新了，通过JavaScript可以顺利获取到更新后的地址。</p>
<p>　　　虽然不影响正常访问，但用户无法将访问过程中改变hash后的地址存为书签。</p>
<p>测试环境：MIUI 4.0</p>
<h4 id="【Chrome-Mobile】fixed元素无法点击"><a href="#【Chrome-Mobile】fixed元素无法点击" class="headerlink" title="【Chrome Mobile】fixed元素无法点击"></a>【Chrome Mobile】fixed元素无法点击</h4><p>场景：父元素设置position: fixed;</p>
<p>　　　子元素设置position: absolute;</p>
<p>　　　此时，如果父元素/子元素还设置了overflow: hidden 则出现“父元素遮挡该子元素“的bug。</p>
<p>　　　视觉(view)层并没有出现遮挡，只是无法触发绑定在该子元素上的事件。可理解为：「看到点不到」。</p>
<p>补充： 页面往下滚动，触发position: fixed;的特性时，才会出现这个bug，在最顶不会出现。</p>
<p>测试平台： 小米1S，Android4.0的Chrome18</p>
<p>demo： <a href="http://maplejan.sinaapp.com/demo/fixed_chromemobile.html">http://maplejan.sinaapp.com/demo/fixed_chromemobile.html</a></p>
<p>解决办法： 把父元素和子元素的overflow: hidden去掉。</p>
<p>以上来源于 <a href="http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html">http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html</a></p>
<h4 id="库的使用实践"><a href="#库的使用实践" class="headerlink" title="库的使用实践"></a>库的使用实践</h4><h5 id="zepto-js"><a href="#zepto-js" class="headerlink" title="zepto.js"></a>zepto.js</h5><p><a href="http://chaoskeh.com/blog/some-experience-of-using-zepto.html">zepto的一篇使用注意点讲解</a></p>
<p><a href="http://blog.youyo.name/archives/zepto-tap-click-through-research.html">zepto的著名的tap“点透”bug</a></p>
<p><a href="http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto源码注释</a></p>
<h5 id="使用zeptojs内嵌到android-webview影响正常滚动时"><a href="#使用zeptojs内嵌到android-webview影响正常滚动时" class="headerlink" title="使用zeptojs内嵌到android webview影响正常滚动时"></a>使用zeptojs内嵌到android webview影响正常滚动时</h5><p><a href="https://github.com/madrobby/zepto/blob/master/src/touch.js">https://github.com/madrobby/zepto/blob/master/src/touch.js</a> 去掉61行,其实就是使用原生的滚动</p>
<h5 id="iscroll4"><a href="#iscroll4" class="headerlink" title="iscroll4"></a>iscroll4</h5><p>iscroll4 的几个bug(来自 <a href="http://www.mansonchor.com/blog/blog_detail_64.html">http://www.mansonchor.com/blog/blog_detail_64.html</a> 内有详细讲解)</p>
<p>1.滚动容器点击input框、select等表单元素时没有响应】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onBeforeScrollStart: function (e) &#123; e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onBeforeScrollStart: function (e) &#123; var nodeType = e.explicitOriginalTarget © e.explicitOriginalTarget.nodeName.toLowerCase():(e.target © e.target.nodeName.toLowerCase():&#x27;&#x27;);if(nodeType !=&#x27;select&#x27;&amp;&amp; nodeType !=&#x27;option&#x27;&amp;&amp; nodeType !=&#x27;input&#x27;&amp;&amp; nodeType!=&#x27;textarea&#x27;) e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<p>2.往iscroll容器内添加内容时，容器闪动的bug</p>
<p>源代码的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">has3d = &#x27;WebKitCSSMatrix&#x27; in window &amp;&amp; &#x27;m11&#x27; in new WebKitCSSMatrix()</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">has3d = false</span><br></pre></td></tr></table></figure>

<p>在配置iscroll时，useTransition设置成false</p>
<p>3.过长的滚动内容，导致卡顿和app直接闪退</p>
<ol>
<li><p>不要使用checkDOMChanges。虽然checkDOMChanges很方便，定时检测容器长度是否变化来refresh，但这也意味着你要消耗一个Interval的内存空间</p>
</li>
<li><p>隐藏iscroll滚动条，配置时设置hScrollbar和vScrollbar为false。</p>
</li>
<li><p>不得已的情况下，去掉各种效果，momentum、useTransform、useTransition都设置为false</p>
<p>4.左右滚动时，不能正确响应正文上下拉动</p>
</li>
</ol>
<p>iscroll的闪动问题也与渲染有关系，可以参考 <a href="http://www.iunbug.com/archives/2012/09/19/411.html">运用webkit绘制渲染页面原理解决iscroll4闪动的问题</a> <a href="http://blog.csdn.net/gcz564539969/article/details/9156141">iscroll4升级到5要注意的问题</a></p>
<h5 id="iscroll或者滚动类框架滚动时不点击的方法"><a href="#iscroll或者滚动类框架滚动时不点击的方法" class="headerlink" title="iscroll或者滚动类框架滚动时不点击的方法"></a>iscroll或者滚动类框架滚动时不点击的方法</h5><p>可以使用以下的解决方案(利用data-setapi)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a ontouchmove=&quot;this.s=1&quot; ontouchend=&quot;this.s || window.open(this.dataset.href),this.s=0&quot; target=&quot;_blank&quot; data-href=&quot;http://www.hao123.com/topic/pig&quot;&gt;黄浦江死猪之谜&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>也可以用这种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).delegate(&#x27;[data-target]&#x27;, &#x27;touchmove&#x27;, function () &#123;</span><br><span class="line">    $(this).attr(&#x27;moving&#x27;,&#x27;moving&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(document).delegate(&#x27;[data-target]&#x27;, &#x27;touchend&#x27;, function () &#123;</span><br><span class="line">    if ($(this).attr(&#x27;moving&#x27;) !== &#x27;moving&#x27;) &#123;</span><br><span class="line">     //做你想做的。。</span><br><span class="line">        $(this).attr(&#x27;moving&#x27;, &#x27;notMoving&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $(this).attr(&#x27;moving&#x27;, &#x27;notMoving&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="移动端字体问题"><a href="#移动端字体问题" class="headerlink" title="移动端字体问题"></a>移动端字体问题</h4><p>[知乎专栏 - <a href="http://zhuanlan.zhihu.com/zhezhexiong/19565895">无线手册-4] dp、sp、px傻傻分不清楚[完整]</a></p>
<p><a href="http://www.sencha.com/blog/resolution-independent-mobile-ui">Resolution Independent Mobile UI</a></p>
<p><a href="http://stackoverflow.com/questions/12058574/pixel-density-retina-display-and-font-size-in-css">Pixel density, retina display and font-size in CSS</a></p>
<p><a href="http://bjango.com/articles/min-device-pixel-ratio/">Device pixel density tests</a></p>
<h4 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h4><p>手机浏览器也是浏览器，在ajax调用外部api的时候也存在跨域问题。当然利用 PhoneGap 打包后，由于协议不一样就不存在跨域问题了。 但页面通常是需要跟后端进行调试的。一般会报类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load XXX</span><br><span class="line">Origin null is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://. Request header field Content-Type is not allowed by Access-Control-Allow-Headers.&quot;</span><br></pre></td></tr></table></figure>

<p>这时候可以让后端加上两个http头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">Access-Control-Allow-Headers &quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span><br></pre></td></tr></table></figure>

<p>第一个头可以避免跨域问题，第二个头可以方便ajax请求设置content-type等配置项</p>
<p>这个会存在一些安全问题，可以参考这个问题的讨论 <a href="http://www.zhihu.com/question/22992229">http://www.zhihu.com/question/22992229</a></p>
<h4 id="PhoneGap-部分"><a href="#PhoneGap-部分" class="headerlink" title="PhoneGap 部分"></a>PhoneGap 部分</h4><p><a href="http://snoopyxdy.blog.163.com/blog/static/60117440201432491123551">http://snoopyxdy.blog.163.com/blog/static/60117440201432491123551</a> 这里有一大堆snoopy总结的phonggap开发坑</p>
<h4 id="Should-not-happen-no-rect-based-test-nodes-found"><a href="#Should-not-happen-no-rect-based-test-nodes-found" class="headerlink" title="Should not happen: no rect-based-test nodes found"></a>Should not happen: no rect-based-test nodes found</h4><p>在 Android 项目中的 assets 中的 HTML 页面中加入以下代码，便可解决问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window,html,body&#123;</span><br><span class="line">    overflow-x:hidden !important;</span><br><span class="line">    -webkit-overflow-scrolling: touch !important;</span><br><span class="line">    overflow: scroll !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/12090899/android-webview-jellybean-should-not-happen-no-rect-based-test-nodes-found">http://stackoverflow.com/questions/12090899/android-webview-jellybean-should-not-happen-no-rect-based-test-nodes-found</a></p>
<h4 id="拿联系人的时候报-ContactFindOptions-is-not-defined"><a href="#拿联系人的时候报-ContactFindOptions-is-not-defined" class="headerlink" title="拿联系人的时候报 ContactFindOptions is not defined"></a>拿联系人的时候报 ContactFindOptions is not defined</h4><p>出现这个问题可能是因为 Navigator 取 contacts 时绑定的 window.onload</p>
<p>注意使用 PhoneGap 的 API 时，一定要在 devicereay 事件的处理函数中使用 API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);</span><br><span class="line"></span><br><span class="line">function onDeviceReady() &#123;    </span><br><span class="line">    callFetchContacts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function callFetchContacts()&#123;</span><br><span class="line">var options = new ContactFindOptions();</span><br><span class="line">options.multiple = true;</span><br><span class="line">var fields       = [&quot;displayName&quot;, &quot;name&quot;,&quot;phoneNumbers&quot;];</span><br><span class="line">navigator.contacts.find(fields, onSuccess, onError,options);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移动端适配：font-size"><a href="#移动端适配：font-size" class="headerlink" title="移动端适配：font-size"></a>移动端适配：font-size</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html&#123;font-size:10px&#125;</span><br><span class="line">@media screen and (min-width:321px) and (max-width:375px)&#123;html&#123;font-size:11px&#125;&#125;</span><br><span class="line">@media screen and (min-width:376px) and (max-width:414px)&#123;html&#123;font-size:12px&#125;&#125;</span><br><span class="line">@media screen and (min-width:415px) and (max-width:639px)&#123;html&#123;font-size:15px&#125;&#125;</span><br><span class="line">@media screen and (min-width:640px) and (max-width:719px)&#123;html&#123;font-size:20px&#125;&#125;</span><br><span class="line">@media screen and (min-width:720px) and (max-width:749px)&#123;html&#123;font-size:22.5px&#125;&#125;</span><br><span class="line">@media screen and (min-width:750px) and (max-width:799px)&#123;html&#123;font-size:23.5px&#125;&#125;</span><br><span class="line">@media screen and (min-width:800px)&#123;html&#123;font-size:25px&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/kkk0526/article/details/9836369/">在 iOS 应用中直接跳转到 AppStore 的方法</a></p>
<p><strong>移动端避免使用fixed定位</strong>，并且避免同时有fixed和输入框同时出现</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="https://book.douban.com/subject/20390374/">《响应式Web设计》</a></p>
<p><a href="https://book.douban.com/subject/6025285/">《 HTML5 与 CSS3 权威指南》</a></p>
<h4 id="获取安卓手机版本"><a href="#获取安卓手机版本" class="headerlink" title="获取安卓手机版本"></a>获取安卓手机版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">var arr = u.split(&#x27;;&#x27;)</span><br><span class="line">console.log(arr)</span><br><span class="line">for(var i in arr) &#123;</span><br><span class="line">    if(arr[i].indexOf(&#x27;Android&#x27;) &gt; -1) &#123;</span><br><span class="line">        console.log(arr[i]);</span><br><span class="line">        var arr2 = arr[i].trim().split(&#x27; &#x27;);</span><br><span class="line">        console.log(arr2);</span><br><span class="line">        var version = arr2[1].charAt(0);</span><br><span class="line">        console.log(version)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取设备dpr"><a href="#获取设备dpr" class="headerlink" title="获取设备dpr"></a>获取设备dpr</h4><p><a href="https://blog.csdn.net/xueli_2017/article/details/91492971">设备像素比（devicePixelRatio）</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.devicePixelRatio</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html">devicePixelRatio</a></li>
<li><a href="https://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html">More about devicePixelRatio</a></li>
<li><a href="https://www.quirksmode.org/mobile/viewports2.html">A tale of two viewports — part two</a></li>
</ul>
<h4 id="获取设备宽度"><a href="#获取设备宽度" class="headerlink" title="获取设备宽度"></a>获取设备宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// alert($(window).width())</span><br><span class="line"></span><br><span class="line">// var w = $(&quot;#to-withdraw&quot;).width()</span><br><span class="line">// alert(w)</span><br></pre></td></tr></table></figure>



<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/-webkit-device-pixel-ratio">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/-webkit-device-pixel-ratio</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution">https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution</a></p>
<p><a href="https://blog.csdn.net/wys997/article/details/111380796">教你@media媒体查询来适配ipad iphone5678plus 各种屏幕</a></p>
<h4 id="移动端媒体查询media的设置"><a href="#移动端媒体查询media的设置" class="headerlink" title="移动端媒体查询media的设置"></a>移动端媒体查询media的设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; rel=&quot;stylesheet/less&quot; type=&quot;text/less&quot; scoped&gt;</span><br><span class="line">  /*iPhone6/7/8*/</span><br><span class="line">  @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*iPhone6/7/8 Plus*/</span><br><span class="line">  @media only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*iPhone X*/</span><br><span class="line">  @media only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-device-pixel-ratio: 3) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*移动端竖屏 css*/</span><br><span class="line">  @media only screen and (orientation: portrait) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*移动端横屏 css*/</span><br><span class="line">  @media only screen and (orientation: landscape) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断ipad */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* ipad横屏 */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* ipad竖屏 */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断iphone5 */ /* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断iphone4-iphone4s */ /* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>@media媒体查询 这功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的web页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 判断ipad */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* ipad横屏 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)</span><br><span class="line">and (orientation : landscape)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* ipad竖屏 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)</span><br><span class="line">and (orientation : portrait)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* 判断iphone5 *//* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 320px)</span><br><span class="line">and (max-device-width : 568px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* 判断iphone4-iphone4s *//* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 320px)</span><br><span class="line">and (max-device-width : 480px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* iphone5分辨率 */</span><br><span class="line">screen Width = 320px (css像素)</span><br><span class="line">screen Height = 568px (css像素)</span><br><span class="line">screen Width = 640px (实际像素)</span><br><span class="line">screen Height = 1136px (实际像素)</span><br><span class="line">Device-pixel-ratio:2</span><br><span class="line">/* iphone4-iphone4s分辨率 */</span><br><span class="line">screen Width = 320px (css像素)</span><br><span class="line">screen Height = 480px (css像素)</span><br><span class="line">screen Width = 640px (实际像素)</span><br><span class="line">screen Height = 960px (实际像素)</span><br><span class="line">Device-pixel-ratio:2</span><br></pre></td></tr></table></figure>



<p>连接手机到电脑，传输文件时，不能两台手机同时连电脑，会识别不出来</p>
<p><a href="https://blog.csdn.net/g1437353759/article/details/118574134">Media媒体查询使用大全</a></p>
<p><a href="https://www.php.cn/css-tutorial-462277.html">详解CSS中的Media媒体查询</a></p>
<p><a href="https://www.jb51.net/article/262042.htm">Android Studio模拟器运行apk文件</a></p>
<p><a href="https://blog.csdn.net/qq_48211069/article/details/123918040">Android Studio模拟器如何运行apk文件</a></p>
<p><a href="https://blog.csdn.net/weixin_64094652/article/details/126032471">adb 出现 adb.exe: more than one device/emulator 解决方法</a></p>
<p>](<a href="https://blog.csdn.net/weixin_64094652/article/details/126032471">https://blog.csdn.net/weixin_64094652/article/details/126032471</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">依次输入以下命令，再重新启动模拟器</span><br><span class="line"></span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">adb remount</span><br></pre></td></tr></table></figure>

<p>如果显示以下提示，表示重启成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br></pre></td></tr></table></figure>

<p>然后重新输入以下命令完成apk文件的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install base.apk</span><br></pre></td></tr></table></figure>

<p><a href="https://zeptojs.com/">Zepto</a></p>
<blockquote>
<p><strong>Zepto</strong>是一个轻量级的<strong>针对现代高级浏览器的JavaScript库，</strong> 它与jquery<strong>有着类似的api</strong>。 如果你会用jquery，那么你也会用zepto。</p>
</blockquote>
<h4 id="微信引导用户在浏览器中打开"><a href="#微信引导用户在浏览器中打开" class="headerlink" title="微信引导用户在浏览器中打开"></a>微信引导用户在浏览器中打开</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;wechat-enable-text-zoom-em&quot; content=&quot;true&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=0,viewport-fit=cover&quot;&gt;</span><br><span class="line">    &lt;title&gt;绑定成功&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/weui.css&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #openBrowser&#123;</span><br><span class="line">            background: rgba(0,0,0,0.75);</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .open-browser-img&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 300px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot; id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;weui-msg&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;weui-msg__icon-area&quot;&gt;&lt;i class=&quot;weui-icon-success weui-icon_msg&quot;&gt;&lt;/i&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;weui-msg__text-area&quot;&gt;</span><br><span class="line">                &lt;h2 class=&quot;weui-msg__title&quot;&gt;绑定成功&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">     &lt;!-- 引导用户在浏览器打开 --&gt;</span><br><span class="line">     &lt;div class=&quot;weui-mask&quot; id=&quot;openBrowser&quot;&gt;</span><br><span class="line">        &lt;img class=&quot;open-browser-img&quot; src=&quot;./images/open_browser.png&quot; alt=&quot;在浏览器打开&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./js/zepto.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        </span><br><span class="line">        // IOS系统</span><br><span class="line">        var isIOS = navigator.userAgent.match(/iphone|ipad|ipod|mac/i);</span><br><span class="line">        var iosURL = &#x27;https://itunes.apple.com/cn/app/id1221155886?mt=8&#x27;</span><br><span class="line">        , androidURL = &#x27;http://nanopkg.vxinyou.com/android/output/twjy/zidou/twjy_zidou_1.0.35__twjy03_20221114154923.apk&#x27;;</span><br><span class="line">        </span><br><span class="line">        // 判断是否为微信</span><br><span class="line">        function isWeixin() &#123;</span><br><span class="line">            var WxObj = window.navigator.userAgent.toLowerCase();</span><br><span class="line">            if(WxObj.match(/microMessenger/i) == &#x27;micromessenger&#x27;) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 下载安装包事件</span><br><span class="line">        function downloadPack() &#123;</span><br><span class="line">            if(isIOS) &#123;</span><br><span class="line">                window.location.href = iosURL;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(isWeixin())&#123;</span><br><span class="line">                    $(&#x27;#openBrowser&#x27;).show();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    window.location.href = androidURL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 点击蒙层</span><br><span class="line">        // $(&#x27;#openBrowser&#x27;).click(function () &#123;</span><br><span class="line">        //     $(&#x27;#openBrowser&#x27;).hide();</span><br><span class="line">        // &#125;);</span><br><span class="line"></span><br><span class="line">        // 下载安装包</span><br><span class="line">        downloadPack();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="从微信跳转到appstore下载App"><a href="#从微信跳转到appstore下载App" class="headerlink" title="从微信跳转到appstore下载App"></a>从微信跳转到appstore下载App</h5><h6 id="获取App在App-Store的下载链接"><a href="#获取App在App-Store的下载链接" class="headerlink" title="获取App在App Store的下载链接"></a>获取App在App Store的下载链接</h6><p>这个链接并非是在手机打开App Store后找到自己的App点击分享按钮之后点击”复制链接”得到的链接,而是一个itunes链接,基本格式是：<a href="https://itunes.apple.com/cn/app/idxxxxxxxxxx?mt=8">https://itunes.apple.com/cn/app/idxxxxxxxxxx?mt=8</a> </p>
<blockquote>
<p>去到<a href="https://itunes.apple.com,可以搜索想要的应用,拿到链接上的id,拿来测试/">https://itunes.apple.com，可以搜索想要的应用，拿到链接上的id，拿来测试</a></p>
</blockquote>
<h4 id="meta标签-1"><a href="#meta标签-1" class="headerlink" title="meta标签"></a>meta标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Refresh&quot;content=&quot;2;URL=http://www.haorooms.com&quot;&gt; //(注意后面的引号，分别在秒数的前面和网址的后面) </span><br><span class="line">&lt;meta http-equiv=&quot;Set-Cookie&quot;content=&quot;cookie value=xxx;expires=Friday,12-Jan-200118:18:18GMT；path=/&quot;&gt; </span><br><span class="line">&lt;meta http-equiv=&quot;Window-target&quot;content=&quot;_top&quot;&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//(设置屏幕宽度为设备宽度，禁止用户手动调整缩放)</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no&quot; /&gt;</span><br><span class="line"></span><br><span class="line">//(设置屏幕密度为高频，中频，低频自动缩放，禁止用户手动调整缩放)</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,target-densitydpi=high-dpi,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;/&gt;</span><br><span class="line">//name之format-detection忽略电话号码和邮箱&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//name之设置作者姓名及联系方式</span><br><span class="line">//说明：设置作者姓名及联系方式</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;author&quot; contect=&quot;name, xxx@163.com&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 页面关键词 --&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 搜索引擎抓取 --&gt;</span><br><span class="line">&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 开启对web app程序的支持&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 改变顶部状态条的颜色；&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Flexible-js可伸缩布局实现方法详解"><a href="#Flexible-js可伸缩布局实现方法详解" class="headerlink" title="Flexible.js可伸缩布局实现方法详解"></a><a href="https://www.jb51.net/article/199635.htm">Flexible.js可伸缩布局实现方法详解</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(function(win, lib) &#123;</span><br><span class="line">  var doc = win.document;</span><br><span class="line">  var docEl = doc.documentElement;</span><br><span class="line">  var metaEl = doc.querySelector(&#x27;meta[name=&quot;viewport&quot;]&#x27;);</span><br><span class="line">  var flexibleEl = doc.querySelector(&#x27;meta[name=&quot;flexible&quot;]&#x27;);</span><br><span class="line">  var dpr = 0;</span><br><span class="line">  var scale = 0;</span><br><span class="line">  var tid;</span><br><span class="line">  var flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line">   </span><br><span class="line">  if (metaEl) &#123;</span><br><span class="line">    console.warn(&#x27;将根据已有的meta标签来设置缩放比例&#x27;);</span><br><span class="line">    var match = metaEl.getAttribute(&#x27;content&#x27;).match(/initial\-scale=([\d\.]+)/);</span><br><span class="line">    if (match) &#123;</span><br><span class="line">      scale = parseFloat(match[1]);</span><br><span class="line">      dpr = parseInt(1 / scale);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (flexibleEl) &#123;</span><br><span class="line">    var content = flexibleEl.getAttribute(&#x27;content&#x27;);</span><br><span class="line">    if (content) &#123;</span><br><span class="line">      var initialDpr = content.match(/initial\-dpr=([\d\.]+)/);</span><br><span class="line">      var maximumDpr = content.match(/maximum\-dpr=([\d\.]+)/);</span><br><span class="line">      if (initialDpr) &#123;</span><br><span class="line">        dpr = parseFloat(initialDpr[1]);</span><br><span class="line">        scale = parseFloat((1 / dpr).toFixed(2));  </span><br><span class="line">      &#125;</span><br><span class="line">      if (maximumDpr) &#123;</span><br><span class="line">        dpr = parseFloat(maximumDpr[1]);</span><br><span class="line">        scale = parseFloat((1 / dpr).toFixed(2));  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  if (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">    var isAndroid = win.navigator.appVersion.match(/android/gi);</span><br><span class="line">    var isIPhone = win.navigator.appVersion.match(/iphone/gi);</span><br><span class="line">    var devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">    if (isIPhone) &#123;</span><br><span class="line">      // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span><br><span class="line">      if (devicePixelRatio &gt;= 3 &amp;&amp; (!dpr || dpr &gt;= 3)) &#123;        </span><br><span class="line">        dpr = 3;</span><br><span class="line">      &#125; else if (devicePixelRatio &gt;= 2 &amp;&amp; (!dpr || dpr &gt;= 2))&#123;</span><br><span class="line">        dpr = 2;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        dpr = 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 其他设备下，仍旧使用1倍的方案</span><br><span class="line">      dpr = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    scale = 1 / dpr;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  docEl.setAttribute(&#x27;data-dpr&#x27;, dpr);</span><br><span class="line">  if (!metaEl) &#123;</span><br><span class="line">    metaEl = doc.createElement(&#x27;meta&#x27;);</span><br><span class="line">    metaEl.setAttribute(&#x27;name&#x27;, &#x27;viewport&#x27;);</span><br><span class="line">    metaEl.setAttribute(&#x27;content&#x27;, &#x27;initial-scale=&#x27; + scale + &#x27;, maximum-scale=&#x27; + scale + &#x27;, minimum-scale=&#x27; + scale + &#x27;, user-scalable=no&#x27;);</span><br><span class="line">    if (docEl.firstElementChild) &#123;</span><br><span class="line">      docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      var wrap = doc.createElement(&#x27;div&#x27;);</span><br><span class="line">      wrap.appendChild(metaEl);</span><br><span class="line">      doc.write(wrap.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  function refreshRem()&#123;</span><br><span class="line">    var width = docEl.getBoundingClientRect().width;</span><br><span class="line">    if (width / dpr &gt; 540) &#123;</span><br><span class="line">      width = 540 * dpr;</span><br><span class="line">    &#125;</span><br><span class="line">    var rem = width / 10;</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  win.addEventListener(&#x27;resize&#x27;, function() &#123;</span><br><span class="line">    clearTimeout(tid);</span><br><span class="line">    tid = setTimeout(refreshRem, 300);</span><br><span class="line">  &#125;, false);</span><br><span class="line">  win.addEventListener(&#x27;pageshow&#x27;, function(e) &#123;</span><br><span class="line">    if (e.persisted) &#123;</span><br><span class="line">      clearTimeout(tid);</span><br><span class="line">      tid = setTimeout(refreshRem, 300);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, false);</span><br><span class="line"> </span><br><span class="line">  if (doc.readyState === &#x27;complete&#x27;) &#123;</span><br><span class="line">    doc.body.style.fontSize = 12 * dpr + &#x27;px&#x27;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    doc.addEventListener(&#x27;DOMContentLoaded&#x27;, function(e) &#123;</span><br><span class="line">      doc.body.style.fontSize = 12 * dpr + &#x27;px&#x27;;</span><br><span class="line">    &#125;, false);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">  refreshRem();</span><br><span class="line"> </span><br><span class="line">  flexible.dpr = win.dpr = dpr;</span><br><span class="line">  flexible.refreshRem = refreshRem;</span><br><span class="line">  flexible.rem2px = function(d) &#123;</span><br><span class="line">    var val = parseFloat(d) * this.rem;</span><br><span class="line">    if (typeof d === &#x27;string&#x27; &amp;&amp; d.match(/rem$/)) &#123;</span><br><span class="line">      val += &#x27;px&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line">  flexible.px2rem = function(d) &#123;</span><br><span class="line">    var val = parseFloat(d) / this.rem;</span><br><span class="line">    if (typeof d === &#x27;string&#x27; &amp;&amp; d.match(/px$/)) &#123;</span><br><span class="line">      val += &#x27;rem&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;)(window, window[&#x27;lib&#x27;] || (window[&#x27;lib&#x27;] = &#123;&#125;));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>优化JS代码的34种方法</title>
    <url>/2021/09/10/%E4%BC%98%E5%8C%96JS%E4%BB%A3%E7%A0%81%E7%9A%8434%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="优化JS代码的34种方法"><a href="#优化JS代码的34种方法" class="headerlink" title="优化JS代码的34种方法"></a>优化JS代码的34种方法</h3><h4 id="1-含有多个条件的if语句"><a href="#1-含有多个条件的if语句" class="headerlink" title="1. 含有多个条件的if语句"></a>1. 含有多个条件的if语句</h4><p>我们可以在数组中存储多个值，也可以使用数据的includes方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// longhand</span><br><span class="line">if (x=== &#x27;abc&#x27; || x === &#x27;def&#x27; || x === &#x27;ghi&#x27; || x ===jkl&#x27;) &#123;</span><br><span class="line">	// logic</span><br><span class="line">&#125;</span><br><span class="line">// shorthand</span><br><span class="line">if ([ &#x27;abc &#x27;, &#x27;def&#x27;, &#x27;ghi&#x27;, &#x27;jkl&#x27; ].includes (x)) &#123;</span><br><span class="line">    // logic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-If-…-else的缩写法"><a href="#2-If-…-else的缩写法" class="headerlink" title="2. If … else的缩写法"></a>2. If … else的缩写法</h4><p>当我们在if-else条件下的逻辑比较简单时，我们可以使用三元条件运算符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let test: boolean;</span><br><span class="line"></span><br><span class="line">if(x &gt; 100)&#123;</span><br><span class="line">	test = true;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    test = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// shorthand</span><br><span class="line">let test = (x &gt; 10) ? true : false;</span><br><span class="line"></span><br><span class="line">// or we can use directly</span><br><span class="line">let test = x &gt; 10;</span><br><span class="line"></span><br><span class="line">console.log (test) ;</span><br></pre></td></tr></table></figure>

<p>如果包含嵌套条件，也可以使用这种方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = 300,</span><br><span class="line">test2 = (x &gt; 100) ? &#x27;greater 100&#x27; : (x&lt;50) ? &#x27;less 50&#x27; : &#x27;between50 and 100&#x27;;</span><br><span class="line"></span><br><span class="line">console.log (test2);    // &quot;greater than 100&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-定义变量"><a href="#3-定义变量" class="headerlink" title="3. 定义变量"></a>3. 定义变量</h4><p>当我们想要定义两个变量，并且这两个变量拥有相同的值或者类型的话，我们可以运用此种简略的表达方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let testl;</span><br><span class="line">let test2 = 1;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">let test1, test2 = 1;</span><br></pre></td></tr></table></figure>

<h4 id="4-关于Null-undefined的检查"><a href="#4-关于Null-undefined的检查" class="headerlink" title="4. 关于Null, undefined的检查"></a>4. 关于Null, undefined的检查</h4><p>当我们创建新的变量时，有时候需要检查我们引用变量的值是否为null或是undefined，js本身就有一种缩写法能实现这个功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">if (testl !== null || test1 !== undefined || test1 !== &#x27;&#x27;) &#123;</span><br><span class="line">	let test2 - test1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// shorthand</span><br><span class="line">let test2 = test1 || &#x27;&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="5-Null值检查与指定默认赋值"><a href="#5-Null值检查与指定默认赋值" class="headerlink" title="5. Null值检查与指定默认赋值"></a>5. Null值检查与指定默认赋值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let test1 = null,</span><br><span class="line">	test2 = test1 || &#x27;&#x27;;</span><br><span class="line">	</span><br><span class="line">console.log (&quot;null check&quot;, test2); // output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="6-Undefined值检查与默认赋值"><a href="#6-Undefined值检查与默认赋值" class="headerlink" title="6. Undefined值检查与默认赋值"></a>6. Undefined值检查与默认赋值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let testl = undefined,</span><br><span class="line">	test2 = testl l| &#x27;&#x27;;</span><br><span class="line">	</span><br><span class="line">console.log (&quot;undefined check&quot;, test2); // output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>正常值检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let test1 = &#x27;test&#x27;,</span><br><span class="line">    test2 = test1 || &#x27;&#x27;;</span><br><span class="line">    </span><br><span class="line">console.log(test2);  // output: &#x27;test&#x27;</span><br></pre></td></tr></table></figure>

<p>（现在我们可以在4、5、6条中使用 ?? 运算符了）</p>
<h4 id="7-聚合运算符"><a href="#7-聚合运算符" class="headerlink" title="7. 聚合运算符"></a>7. 聚合运算符</h4><p>**??**是聚合运算符，如果左值为null或undefined，就返回右值。默认返回左值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const test= null ?? &#x27;default&#x27;;</span><br><span class="line">console.log(test);</span><br><span class="line">// expected output: &quot;default&quot;const test1 =0 ?? 2;</span><br><span class="line">console.log(test1);</span><br><span class="line">// expected output: 0</span><br></pre></td></tr></table></figure>

<h4 id="8-为多个变量赋值"><a href="#8-为多个变量赋值" class="headerlink" title="8. 为多个变量赋值"></a>8. 为多个变量赋值</h4><p>当我们处理多个变量，想为不同的变量赋不同的值时，就会真正发现这种简略的表达方式的实用之处了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let test1, test2, test3;</span><br><span class="line">test1 = 1;</span><br><span class="line">test2 = 2;</span><br><span class="line">test3 = 3;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">let [testl, test2, test3] = [1，2，3];</span><br></pre></td></tr></table></figure>

<h4 id="9-赋值运算符简略的表达方式"><a href="#9-赋值运算符简略的表达方式" class="headerlink" title="9. 赋值运算符简略的表达方式"></a>9. 赋值运算符简略的表达方式</h4><p>通常，我们会在程序中处理大量的算术运算符。而对于JavaScript变量的赋值运算符来说，这是其中一个实用的技巧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">testl = testl + l;</span><br><span class="line">test2 = test2 - 1;</span><br><span class="line">test3 = test3 *20;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">test1++;</span><br><span class="line">test2--;</span><br><span class="line">test3 *= 20;</span><br></pre></td></tr></table></figure>

<h4 id="10-判断变量是否存在的缩写法"><a href="#10-判断变量是否存在的缩写法" class="headerlink" title="10. 判断变量是否存在的缩写法"></a>10. 判断变量是否存在的缩写法</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器-构建连接mongodb数据库的接口</title>
    <url>/2022/10/22/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%9E%84%E5%BB%BA%E8%BF%9E%E6%8E%A5mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="云服务器数据库"><a href="#云服务器数据库" class="headerlink" title="云服务器数据库"></a>云服务器数据库</h3><ol>
<li><p>进入<code>mongo</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看已有数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin      0.078GB</span><br><span class="line">local      0.078GB</span><br><span class="line">myFirstDB  0.078GB</span><br><span class="line">shopping   0.078GB</span><br><span class="line">test       0.078GB</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db</span><br><span class="line">test</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前数据库的所有集合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">system.indexes</span><br><span class="line">users</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找某个集合的所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64255dec03b14a5ae59ad213&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;642650ee5d48a1118feb04d1&quot;), &quot;name&quot; : &quot;张三AAAAAA&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;男&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6426aa7de101e51497b40037&quot;), &quot;name&quot; : &quot;张三BBBBBB&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;女&quot;, &quot;__v&quot; : 0 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; use wedding</span><br><span class="line">switched to db wedding</span><br><span class="line">&gt; db</span><br><span class="line">wedding</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建集合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.createCollection(&#x27;blessing&#x27;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集合中插入文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.blessing.insert(&#123;&quot;name&quot;:&quot;张三&quot;, &quot;bless&quot;: &quot;快乐快乐快乐快乐&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看集合中插入的文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.blessing.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;64dc9dcfc7acd67531cafb17&quot;), &quot;name&quot; : &quot;张三&quot;, &quot;bless&quot; : &quot;快乐快乐快乐快乐&quot; &#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="express接口搭建"><a href="#express接口搭建" class="headerlink" title="express接口搭建"></a>express接口搭建</h3><p>接口所在目录：<code>/usr/local/src/webCode/wx</code></p>
<p>接口文件所在位置：<code>/usr/local/src/webCode/wx/server/wedding/blessing.js</code></p>
<h5 id="node命令使用之前"><a href="#node命令使用之前" class="headerlink" title="node命令使用之前"></a>node命令使用之前</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm  use 16.13.0</span><br></pre></td></tr></table></figure>

<h4 id="运行接口"><a href="#运行接口" class="headerlink" title="运行接口"></a>运行接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node api.js</span><br></pre></td></tr></table></figure>

<h4 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h4><p><code>Access to XMLHttpRequest at &#39;https://www.winney07.cn:8080/wedding/blessing/getBlessingList&#39; from origin &#39;http://192.168.1.15:5500&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p>
<p>使用的是<code>https</code>协议，在微信开发者中，请求<code>https://www.winney07.cn:8080/wedding/blessing/getBlessingList</code>接口，是可以得到数据的。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li>服务端——接口响应前加上</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);              	// 允许任意外源访问</span><br><span class="line">res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);		// 自定义请求首部字段</span><br><span class="line">res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;);    		 	// 允许所有请求方法</span><br><span class="line">res.header(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);	// 设置数据返回类型为json，字符集为utf8</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>前端——使用Fetch请求</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&quot;https://www.winney07.cn:8080/wedding/blessing/getBlessingList&quot;,&#123;</span><br><span class="line">   method:&#x27;GET&#x27;</span><br><span class="line">&#125;).then(response =&gt; &#123;</span><br><span class="line">    if (!response.ok) &#123;</span><br><span class="line">        throw new Error(&#x27;Network response was not ok&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return response.json(); // 解析响应数据为 JSON 格式</span><br><span class="line">&#125;)</span><br><span class="line">.then(data =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Response data:&#x27;, data);</span><br><span class="line">    // 在这里处理获取到的响应数据</span><br><span class="line">&#125;)</span><br><span class="line">.catch(error =&gt; &#123;</span><br><span class="line">    console.error(&#x27;Fetch error:&#x27;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>fetch</code> 规范主要在三个方面与 <code>jQuery.ajax()</code> 不同：</p>
<ul>
<li>从 <code>fetch()</code> 返回的 Promise <strong>不会因 HTTP 的错误状态而被拒绝</strong>，即使响应是 HTTP <code>404</code> 或 <code>500</code>。相反，它将正常兑现（<code>ok</code> 状态会被设置为 <code>false</code>），并且只有在网络故障或者有任何阻止请求完成时，才拒绝。</li>
</ul>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a></p>
<h4 id="接口一直保持运行状态"><a href="#接口一直保持运行状态" class="headerlink" title="接口一直保持运行状态"></a>接口一直保持运行状态</h4><p>要保持云服务器上的 Express 接口一直运行，使其在服务器启动后保持运行状态，而不需要手动运行 <code>node api.js</code>。</p>
<p><strong>使用进程管理工具</strong></p>
<p>在服务器上安装 <code>pm2</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure>

<p>然后，在项目文件夹中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 start api.js</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>修改layui-select下拉框的placeholder提示语</title>
    <url>/2019/09/14/%E4%BF%AE%E6%94%B9layui-select%E4%B8%8B%E6%8B%89%E6%A1%86%E7%9A%84placeholder%E6%8F%90%E7%A4%BA%E8%AF%AD/</url>
    <content><![CDATA[<h3 id="使用option"><a href="#使用option" class="headerlink" title="使用option"></a>使用option</h3><p>HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;layui-form-label&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">        &lt;select name=&quot;account&quot; lay-filter=&quot;account&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;&quot;&gt;请选择账号&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&lt;option value=&quot;&quot;&gt;请选择账号&lt;/option&gt;</code> ，value值为空</p>
</blockquote>
<p>如图所示：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/%E4%BD%BF%E7%94%A8option%E5%8A%A0%E4%B8%8Aplaceholder.png" alt="使用option加上placeholder.png (395×188) (raw.githubusercontent.com)"></p>
<h3 id="使用定位元素模拟placeholder"><a href="#使用定位元素模拟placeholder" class="headerlink" title="使用定位元素模拟placeholder"></a>使用定位元素模拟placeholder</h3><blockquote>
<p>”所属项目“默认不选择。”账号“下拉框的数据，是根据所选的”所属项目“进行动态渲染。</p>
<p>因”所属项目“默认不选择，”账号“初始化时没有下拉框列表数据。需求还要求不显示可选项，也就是<code>&lt;option value=&quot;&quot;&gt;请选择账号&lt;/option&gt;</code> 也不显示。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;layui-form-label&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">        &lt;select name=&quot;account&quot; lay-filter=&quot;account&quot;&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>如果不加option选项，下拉框默认样式如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/select%E6%A1%86%E6%B2%A1%E6%9C%89%E9%80%89%E9%A1%B9%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A0%B7%E5%AD%90.png" alt="select框没有选项时初始化样子.png (389×180) (raw.githubusercontent.com)"></p>
<blockquote>
<p>项目中使用的是layui是<code>v2.5.6 </code>版本。而更换版本，可能会带来其他影响，而且layui也停更了。</p>
</blockquote>
</li>
<li><p>所以使用定位元素覆盖掉默认的<code>placeholder</code></p>
<p>HTML:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;layui-form-label&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;layui-input-block&quot; id=&quot;account-select&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;account-placeholder&quot;&gt;请选择账号&lt;/div&gt;</span><br><span class="line">        &lt;select name=&quot;account&quot; lay-filter=&quot;account&quot;&gt;&lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>CSS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#account-select&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">#account-select .account-placeholder &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 3px;</span><br><span class="line">    top: 3px;</span><br><span class="line">    z-index: 10;</span><br><span class="line">    padding-left: 8px;</span><br><span class="line">    height: 32px;</span><br><span class="line">    line-height: 32px;</span><br><span class="line">    width: 184px;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    color: rgb(117, 117, 117);</span><br><span class="line">    background-color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E6%A8%A1%E6%8B%9Fplaceholder0.png" alt="定位元素模拟placeholder0.png (390×214) (raw.githubusercontent.com)"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E6%A8%A1%E6%8B%9Fplaceholder.png" alt="定位元素模拟placeholder.png (376×389) (raw.githubusercontent.com)"></p>
</li>
<li><p><code>select</code>框初始化时设置为<code>disabled</code></p>
<blockquote>
<p>如上图所示，使用了定位元素挡住了默认的placeholder，但是还是会显示”没有选项“这一项。</p>
<p>所以干脆初始化时，将<code>select</code>框初始化时设置为<code>disabled</code></p>
</blockquote>
<p>HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;layui-form-label&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;layui-input-block&quot; id=&quot;account-select&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;account-placeholder&quot;&gt;请选择账号&lt;/div&gt;</span><br><span class="line">        &lt;select name=&quot;account&quot; lay-filter=&quot;account&quot; disabled&gt;&lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="其他细节处理"><a href="#其他细节处理" class="headerlink" title="其他细节处理"></a>其他细节处理</h4><ol>
<li><p>点击下拉框时，弹出”需要选择所属项目“的提示语</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 点击账号下拉框</span><br><span class="line">layui.$(&quot;#account-select&quot;).on(&#x27;click&#x27;, &#x27;.layui-form-select&#x27;, function()&#123;</span><br><span class="line">    var project = layui.$(&#x27;[name=&quot;project&quot;]:checked&#x27;).val();</span><br><span class="line">    if(!project) &#123;</span><br><span class="line">        layer.msg(&#x27;需选择所属项目&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>向下箭头为禁用的样式，修改为正常样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#account-select .layui-select-disabled .layui-edge&#123;</span><br><span class="line">    border-top-color: #c2c2c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>鼠标放在select框上，是禁止图标，然而鼠标移到下拉框的向下箭头，光标显示为小手；</p>
<p>如图所示：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%88%B0%E4%B8%8B%E6%8B%89%E6%A1%86%E7%9A%84%E5%90%91%E4%B8%8B%E7%AE%AD%E5%A4%B4-%E6%98%BE%E7%A4%BA%E5%B0%8F%E6%89%8B.png" alt="鼠标移到下拉框的向下箭头-显示小手.png (339×129) (raw.githubusercontent.com)"></p>
<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#account-select .layui-select-disabled .layui-edge&#123;</span><br><span class="line">    cursor: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择”所属项目“时，追加对应的数据，同时需要去除<code>select</code>框的<code>disabled</code>属性，以及隐藏模拟<code>placeholder</code>的定位元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 渲染 select 框的数据</span><br><span class="line"> function renderSelectData(dataList) &#123;</span><br><span class="line">    var selectElem = layui.$(&#x27;select[name=&quot;account&quot;]&#x27;);</span><br><span class="line">    selectElem.empty(); // 清空原有选项</span><br><span class="line">    selectElem.append(&#x27;&lt;option value=&quot;&quot;&gt;请选择账号&lt;/option&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">    // 添加新的选项</span><br><span class="line">    layui.$.each(dataList, function(index, item) &#123;</span><br><span class="line">        var optionElem = layui.$(&#x27;&lt;option&gt;&#x27;);</span><br><span class="line">        optionElem.val(item.value);</span><br><span class="line">        optionElem.text(item.name);</span><br><span class="line">        selectElem.append(optionElem);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    layui.form.render(&#x27;select&#x27;); // 重新渲染 select 框</span><br><span class="line">&#125;</span><br><span class="line">var accountList = &#123;</span><br><span class="line">    &quot;1&quot;: [</span><br><span class="line">        &#123; value: 1, name: &#x27;项目AAA_account1&#x27;&#125;,</span><br><span class="line">        &#123; value: 2, name: &#x27;项目AAA_account2&#x27;&#125;,</span><br><span class="line">        &#123; value: 3, name: &#x27;项目AAA_account3&#x27;&#125;,</span><br><span class="line">    ],</span><br><span class="line">    &quot;2&quot;: [</span><br><span class="line">        &#123; value: 4, name: &#x27;项目BBB_account1&#x27;&#125;,</span><br><span class="line">        &#123; value: 5, name: &#x27;项目BBB_account2&#x27;&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">// 监听单选框</span><br><span class="line">form.on(&#x27;radio(project)&#x27;, function(data)&#123;</span><br><span class="line">    // 渲染账号下拉列表</span><br><span class="line">    renderSelectData(accountList[data.value]);</span><br><span class="line"></span><br><span class="line">    layui.$(&#x27;select[name=&quot;account&quot;]&#x27;).removeAttr(&#x27;disabled&#x27;);</span><br><span class="line">    form.render(&#x27;select&#x27;);</span><br><span class="line">    layui.$(&#x27;.account-placeholder&#x27;).hide();	// 隐藏模拟的placeholder</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/layui-select/%E9%BC%A0%E6%A0%87%E7%A7%BB%E4%B8%8A%E6%98%BE%E7%A4%BA%E7%A6%81%E6%AD%A2%E5%9B%BE%E6%A0%87%E6%95%88%E6%9E%9C.png" alt="鼠标移上显示禁止图标效果.png (347×274) (raw.githubusercontent.com)"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>修改文件选择框input type=file的样式</title>
    <url>/2019/08/14/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A1%86input%20type=file%E7%9A%84%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>文件选择框(input type=”file”)的默认样式跟项目中的样式不是很搭，所以需要修改文件选择框的样式。</p>
<p>效果图：</p>
<p><img src="https://images.winney07.cn/blog/input-file-btn.png" alt="文件选择框"></p>
<h2 id="方式一，使用-file-selector-button"><a href="#方式一，使用-file-selector-button" class="headerlink" title="方式一，使用::file-selector-button"></a>方式一，使用::file-selector-button</h2><p>HTML:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;default-btn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#default-btn::file-selector-button&#123;</span><br><span class="line">    padding: 6px 10px;</span><br><span class="line">    background-color: #1E9FFF;</span><br><span class="line">    border: 1px solid #1E9FFF;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法，文件选择框右侧默认就显示“未选择文件”的文字。如果您想隐藏这些文字，可以设置选择框<code>input</code>元素的<code>font-size：0</code>，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#default-btn&#123;</span><br><span class="line">    font-size: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>了解更多关于<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::file-selector-button">::file-selector-button</a></p>
<h2 id="方式二，使用label标签"><a href="#方式二，使用label标签" class="headerlink" title="方式二，使用label标签"></a>方式二，使用label标签</h2><p>HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">    &lt;label for=&quot;fileInput&quot; class=&quot;input-button&quot; title=&quot;选择您的头像图片进行上传&quot;&gt;选择文件&lt;/label&gt;</span><br><span class="line">    &lt;input id=&quot;fileInput&quot; type=&quot;file&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;fileName&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>CSS： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.input-button &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    padding: 6px 10px;</span><br><span class="line">    background-color: #1E9FFF;</span><br><span class="line">    border: 1px solid #1E9FFF;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方式三，使用相对定位-透明"><a href="#方式三，使用相对定位-透明" class="headerlink" title="方式三，使用相对定位+透明"></a>方式三，使用相对定位+透明</h2><p>HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span class=&quot;inputBtn&quot;&gt;</span><br><span class="line">    &lt;span&gt;选择文件&lt;/span&gt;</span><br><span class="line">    &lt;input class=&quot;inputFile&quot; type=&quot;file&quot; id=&quot;myImg&quot; name=&quot;myImg&quot; title=&quot;选择您的头像图片进行上传&quot;&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;fileName&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>CSS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.inputBtn &#123;  </span><br><span class="line">    position: relative;  </span><br><span class="line">    display: inline-block;  </span><br><span class="line">    padding: 6px 10px;  </span><br><span class="line">    border: 1px solid #1E9FFF;  </span><br><span class="line">    border-radius: 3px;  </span><br><span class="line">    background-color: #1E9FFF;  </span><br><span class="line">    cursor: pointer;  </span><br><span class="line">    font-size: 12px;  </span><br><span class="line">    color: #fff;  </span><br><span class="line">&#125;  </span><br><span class="line">.inputBtn:hover&#123;  </span><br><span class="line">    border: 1px solid #3aa9fb;  </span><br><span class="line">    background-color: #3aa9fb;  </span><br><span class="line">&#125;  </span><br><span class="line">.inputFile &#123;  </span><br><span class="line">    position: absolute;  </span><br><span class="line">    left: 0;  </span><br><span class="line">    top: 0;  </span><br><span class="line">    width: 100%;  </span><br><span class="line">    height: 100%;  </span><br><span class="line">    opacity: 0;  </span><br><span class="line">    filter: alpha(opacity=0);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>方法三无法修改鼠标移上去时的手势，即input框设置为`cursor: pointer`不生效。因为方法三将input框的透明度设置为0，实际上还是在按钮上方的。如果项目没有要求鼠标移上去时的手势，就忽略这个问题。</p>
</blockquote>
<h2 id="显示上传文件的文件名称："><a href="#显示上传文件的文件名称：" class="headerlink" title="显示上传文件的文件名称："></a>显示上传文件的文件名称：</h2><blockquote>
<p>针对方法二和方法三</p>
</blockquote>
<p>效果图：</p>
<p><img src="https://images.winney07.cn/blog/input-file-btn2.png" alt="显示文件名称"></p>
<p>默认的文件选择框上传完文件之后，在右侧会显示上传文件的文件名称。如果需求需要显示，则可以按以下方式实现，如果不需要可忽略。   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const myImgEL = document.getElementById(&#x27;myImg&#x27;);  </span><br><span class="line">const fileNameEL = document.getElementById(&#x27;fileName&#x27;);  </span><br><span class="line">myImgEL.addEventListener(&#x27;change&#x27;, (event) =&gt; &#123;</span><br><span class="line">    // event.target.value的值打印是C:\fakepath\head.jpg</span><br><span class="line">    // var name = event.target.value.split(&#x27;\\&#x27;)[2];	// 这种方式也可以  </span><br><span class="line">    // console.log(name);</span><br><span class="line">    const fileName = event.target.value.match(/[^\\|/]*$/)[0];</span><br><span class="line">    console.log(fileName)</span><br><span class="line">    fileNameEL.innerHTML = fileName;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>想鼠标移上去，显示手指手势，设置了<code>cursor: pointer;</code>不起作用，解决方法：将input的字体大小设置为0：<code>font-size: 0</code></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端CSS处理</title>
    <url>/2020/03/22/%E5%89%8D%E7%AB%AFCSS%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h4 id="要让一张图片在页面中以最佳效果铺满整屏，同时在不同设备上保持一致的显示效果"><a href="#要让一张图片在页面中以最佳效果铺满整屏，同时在不同设备上保持一致的显示效果" class="headerlink" title="要让一张图片在页面中以最佳效果铺满整屏，同时在不同设备上保持一致的显示效果"></a>要让一张图片在页面中以最佳效果铺满整屏，同时在不同设备上保持一致的显示效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    object-fit: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="压缩字体文件的大小"><a href="#压缩字体文件的大小" class="headerlink" title="压缩字体文件的大小"></a>压缩字体文件的大小</h4><h3 id="处理CSS兼容性"><a href="#处理CSS兼容性" class="headerlink" title="处理CSS兼容性"></a>处理<code>CSS</code>兼容性</h3><blockquote>
<p>如果一个浏览器在解析你所书写的 CSS 规则的过程中遇到了无法理解的属性或者值，它会忽略这些并继续解析下面的 CSS 声明。在你书写了错误的 CSS 代码（或者误拼写），又或者当浏览器遇到对于它来说很新的还没有支持的 CSS 代码的时候上述的情况同样会发生（直接忽略）。</p>
<p>相似的，当浏览器遇到无法解析的选择器的时候，他会直接忽略整个选择器规则，然后解析下一个 CSS 选择器。</p>
</blockquote>
<blockquote>
<p>这样做好处多多，代表着你使用最新的 CSS 优化的过程中浏览器遇到无法解析的规则也不会报错。当你为一个元素指定多个 CSS 样式的时候，浏览器会加载样式表中的最后的 CSS 代码进行渲染（样式表，优先级等请读者自行了解），也正因为如此，你可以为同一个元素指定多个 CSS 样式来解决有些浏览器不兼容新特性的问题（比如指定两个<code>width</code>）。</p>
<p>这一特点在你想使用一个很新的 CSS 特性但是不是所有浏览器都支持的时候（浏览器兼容）非常有用，举例来说，一些老的浏览器不接收<code>calc()</code>(calculate 的缩写，CSS3 新增，为元素指定动态宽度、长度等，注意此处的动态是计算之后得一个值) 作为一个值。我可能使用它结合像素为一个元素设置了动态宽度（如下），老式的浏览器由于无法解析忽略这一行；新式的浏览器则会把这一行解析成像素值，并且覆盖第一行指定的宽度。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  width: calc(100% - 50px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制用户是否可以选择文本-user-select"><a href="#控制用户是否可以选择文本-user-select" class="headerlink" title="控制用户是否可以选择文本-user-select"></a>控制用户是否可以选择文本-<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/user-select">user-select</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;你应该可以选中这段文本。&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;unselectable&quot;&gt;嘿嘿，你不能选中这段文本！&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;all&quot;&gt;点击一次就会选中这段文本。&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.unselectable &#123;</span><br><span class="line">  -webkit-user-select: none; /* Safari */</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.all &#123;</span><br><span class="line">  -webkit-user-select: all;</span><br><span class="line">  user-select: all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>删除 GitHub 仓库中本该ignore的.DS_Store 文件</title>
    <url>/2025/03/19/%E5%88%A0%E9%99%A4-GitHub-%E4%BB%93%E5%BA%93%E4%B8%AD%E6%9C%AC%E8%AF%A5ignore%E7%9A%84-DS-Store-%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>前提：在提交文件到GitHub上之前，忘了加上.gitignore文件，把.DS_Store文件提交到github上面了</p>
</blockquote>
<blockquote>
<p>说明：.DS_Store 是 macOS 系统生成的文件，用于存储文件夹的元数据（如图标位置等），通常不需要提交到 Git 仓库</p>
</blockquote>
<h2 id="删除-GitHub-仓库中已经提交的-DS-Store-文件"><a href="#删除-GitHub-仓库中已经提交的-DS-Store-文件" class="headerlink" title="删除 GitHub 仓库中已经提交的 .DS_Store 文件"></a>删除 GitHub 仓库中已经提交的 <code>.DS_Store</code> 文件</h2><p>⚠️ 注意：终端命令行操作路径是当前项目目录</p>
<h5 id="步骤-1：创建-gitignore-文件（如果没有的话）"><a href="#步骤-1：创建-gitignore-文件（如果没有的话）" class="headerlink" title="步骤 1：创建 .gitignore 文件（如果没有的话）"></a><strong>步骤 1：创建 <code>.gitignore</code> 文件（如果没有的话）</strong></h5><p>在项目根目录下创建一个 <code>.gitignore</code> 文件，并添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略 .DS_Store 文件</span><br><span class="line">.DS_Store</span><br></pre></td></tr></table></figure>

<h5 id="步骤-2：删除已经提交的-DS-Store-文件"><a href="#步骤-2：删除已经提交的-DS-Store-文件" class="headerlink" title="步骤 2：删除已经提交的 .DS_Store 文件"></a><strong>步骤 2：删除已经提交的 <code>.DS_Store</code> 文件</strong></h5><h5 id="删除所有-DS-Store-文件"><a href="#删除所有-DS-Store-文件" class="headerlink" title="删除所有 .DS_Store 文件"></a>删除所有 <code>.DS_Store</code> 文件</h5><p> 运行以下命令递归删除项目中的 <code>.DS_Store</code> 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;.DS_Store&quot; -delete</span><br></pre></td></tr></table></figure>

<h5 id="步骤-3：从-Git-仓库中移除-DS-Store-文件"><a href="#步骤-3：从-Git-仓库中移除-DS-Store-文件" class="headerlink" title="步骤 3：从 Git 仓库中移除 .DS_Store 文件"></a><strong>步骤 3：从 Git 仓库中移除 <code>.DS_Store</code> 文件</strong></h5><p>即使你删除了 <code>.DS_Store</code> 文件，这些文件仍然存在于 Git 的历史记录中。执行以下命令将它们从 Git 记录中删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached -r .</span><br></pre></td></tr></table></figure>

<h5 id="步骤-4：重新添加文件到-Git"><a href="#步骤-4：重新添加文件到-Git" class="headerlink" title="步骤 4：重新添加文件到 Git"></a><strong>步骤 4：重新添加文件到 Git</strong></h5><p>在 <code>.gitignore</code> 文件生效后，重新添加文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h5 id="步骤-5：提交更改"><a href="#步骤-5：提交更改" class="headerlink" title="步骤 5：提交更改"></a><strong>步骤 5：提交更改</strong></h5><p>提交此次删除 <code>.DS_Store</code> 文件的更改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;Remove .DS_Store files and update .gitignore&quot;</span><br></pre></td></tr></table></figure>

<h5 id="步骤-6：推送到-GitHub"><a href="#步骤-6：推送到-GitHub" class="headerlink" title="步骤 6：推送到 GitHub"></a><strong>步骤 6：推送到 GitHub</strong></h5><p>将更改推送到远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：<code>main</code> 是默认分支名，如果你的分支名是 <code>master</code> 或其他分支名，请替换 <code>main</code>。</p>
<h4 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a><strong>完成！</strong></h4><p>现在 <code>.DS_Store</code> 文件已经从 GitHub 仓库中删除，并且 <code>.gitignore</code> 会阻止它们再次被提交！</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端插件相关笔记</title>
    <url>/2019/03/22/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.bootstrapmb.com/chajian">前端插件</a></p>
<p><a href="http://www.bootstrapmb.com/muban">前端模板</a></p>
<h4 id="Jquery-Upload-File"><a href="#Jquery-Upload-File" class="headerlink" title="Jquery Upload File"></a>Jquery Upload File</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;js/jQuery-File-Upload-9.18.0/css/jquery.fileupload.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;js/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/vendor/jquery.ui.widget.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/jquery.iframe-transport.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/jquery.fileupload.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;game_apk&quot; /&gt;</span><br><span class="line">&lt;span class=&quot;btn btn-success fileinput-button&quot;&gt;</span><br><span class="line">	&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt;</span><br><span class="line">	&lt;span&gt;请上传apk文件&lt;/span&gt;</span><br><span class="line"> 	 &lt;input id=&quot;fileupload_1&quot; type=&quot;file&quot; name=&quot;files[]&quot; multiple&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;div id=&quot;progress&quot;&gt;&lt;/div&gt;</span><br><span class="line">$(&#x27;#fileupload_1&#x27;).fileupload(&#123;</span><br><span class="line">    url: &quot;上传文件请求地址&quot;,</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    done: function (e, data) &#123;</span><br><span class="line">        $.each(data.result.files, function (index, file) &#123;</span><br><span class="line">          $(&#x27;:input[name=game_apk]&#x27;).val(decodeURIComponent(file.url));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: function (e, data) &#123;</span><br><span class="line">        console.log(&quot;上传失败&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    progressall: function (e, data) &#123;</span><br><span class="line">        console.log(progress);</span><br><span class="line">        $(&quot;#progress&quot;).html(progress + &#x27;%&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jquery-copy-js"><a href="#jquery-copy-js" class="headerlink" title="jquery.copy.js"></a>jquery.copy.js</h4><blockquote>
<p>点击复制内容移动端全兼容(专治各种移动端浏览器)</p>
</blockquote>
<ul>
<li>单页面一个复制</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;copy&quot;&gt;复制链接&lt;/button&gt;</span><br><span class="line">$.copy(&#123;</span><br><span class="line">    // imgUrl:&quot;success-tips.png&quot;,   // 分享图标地址</span><br><span class="line">    text:&quot;复制成功&quot;, //分享提示文案</span><br><span class="line">    copyUrl:&quot;复制的内容/链接&quot;,   // 自定义复制链接地址</span><br><span class="line">    tipTime:2000, 	// 分享提示消失时间</span><br><span class="line">    copyId:&quot;#copy&quot;	// 复制按钮id</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<ul>
<li>单页面多个复制链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.baidu.com&quot; &#125;,</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.qq.com&quot; &#125;,</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.163.com&quot; &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$.each(data,function(i,item)&#123;</span><br><span class="line">    $(&quot;body&quot;).append(&#x27;&lt;button id=&quot;copy&#x27;+i+&#x27;&quot;&gt;复制链接&lt;/button&gt;&#x27;);</span><br><span class="line">    $.copy(&#123;</span><br><span class="line">        // imgUrl:&quot;success-tips.png&quot;,  // 分享图标地址</span><br><span class="line">        text:&quot;复制成功&quot;,  // 分享提示文案</span><br><span class="line">        copyUrl:item.url,  // 自定义复制链接地址</span><br><span class="line">        tipTime:2000,  // 分享提示消失时间</span><br><span class="line">        copyId:&quot;#copy&quot;+i  // 复制按钮id</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="mobileSelect-js-多级联动下拉菜单"><a href="#mobileSelect-js-多级联动下拉菜单" class="headerlink" title="mobileSelect.js-多级联动下拉菜单"></a>mobileSelect.js-多级联动下拉菜单</h4><p><a href="https://github.com/onlyhom/mobileSelect.js">mobileSelect.js-github</a></p>
<h4 id="datetimepicker多次点击input日期选择器不显示"><a href="#datetimepicker多次点击input日期选择器不显示" class="headerlink" title="datetimepicker多次点击input日期选择器不显示"></a>datetimepicker多次点击input日期选择器不显示</h4><p>遇到datetimepicker多次（包括第二次点击）点击input框时日期选择器不显示，需要使用鼠标监听触发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*点方input框时加租监听毒件*/</span><br><span class="line">document.getElementsByName(&#x27;input的name名称&#x27;)[0].addEventListener(&#x27;click&#x27;,myfunc)</span><br><span class="line">function myfunc(e)&#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上这段代码必须放在datetimepicker方法的后面。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//日历</span><br><span class="line">var startDate = $(&#x27;#startDate&#x27;).fdatepicker(&#123;</span><br><span class="line">	format: &quot;yyyy-mm-dd&quot;,</span><br><span class="line">	todayBtn: true</span><br><span class="line">&#125;).on(&#x27;changeDate&#x27;, function (ev)&#123;</span><br><span class="line">	startDate.hide();</span><br><span class="line">	$(&#x27;#endDate&#x27;)[0].focus();</span><br><span class="line">&#125;).data(&#x27;datepicker&#x27;);</span><br><span class="line"></span><br><span class="line">var endDate = $(&#x27;#endDate&#x27;).fdatepicker(&#123;</span><br><span class="line">	format: &quot;yyyy-mm-dd&quot;,</span><br><span class="line">	todayBtn: true,</span><br><span class="line">&#125;).on(&#x27;changeDate&#x27;, function (ev)&#123;</span><br><span class="line">	endDate.hide();</span><br><span class="line">&#125;).data(&#x27;datepicker&#x27;);</span><br><span class="line"></span><br><span class="line">//解决输入框点击多次（包括两次）不显示的问题</span><br><span class="line">document.getElementById(&#x27;startDate&#x27;).addEventListener(&#x27;click&#x27;,myfunc);</span><br><span class="line">document.getElementById(&#x27;endDate&#x27;).addEventListener(&#x27;click&#x27;,myfunc);</span><br><span class="line">function myfunc(e)&#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a><a href="https://www.swiper.com.cn/">swiper</a></h4><h5 id="轮播图由两层效果改为三层"><a href="#轮播图由两层效果改为三层" class="headerlink" title="轮播图由两层效果改为三层"></a>轮播图由两层效果改为三层</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上这个样式，控制偏移量</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-prev&#123;</span><br><span class="line">        transform: translateX(480px) scale(0.8) !important;</span><br><span class="line">    &#125;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-next&#123;</span><br><span class="line">        transform: translateX(-480px) scale(0.8) !important;</span><br><span class="line">    &#125;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-next + .swiper-slide&#123;</span><br><span class="line">        transform: translateX(-986px) scale(0.6) !important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var certifySwiper = new Swiper(&#x27;.detail&#x27;, &#123;</span><br><span class="line">    watchSlidesProgress: true,</span><br><span class="line">    slidesPerView: &#x27;auto&#x27;,</span><br><span class="line">    centeredSlides: true,</span><br><span class="line">    loop: true,</span><br><span class="line">    loopedSlides: 5,</span><br><span class="line">    autoplay: true,</span><br><span class="line">    navigation: &#123;</span><br><span class="line">        nextEl: &#x27;.swiper-button-next&#x27;,</span><br><span class="line">        prevEl: &#x27;.swiper-button-prev&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // pagination: &#123;</span><br><span class="line">    // 	el: &#x27;.swiper-pagination&#x27;,</span><br><span class="line">    // 	clickable: true,</span><br><span class="line">    // &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">        progress: function (progress) &#123;</span><br><span class="line">            for (i = 0; i &lt; this.slides.length; i++) &#123;</span><br><span class="line">                var slide = this.slides.eq(i);</span><br><span class="line">                var slideProgress = this.slides[i].progress;</span><br><span class="line">                modify = 1;</span><br><span class="line">                if (Math.abs(slideProgress) &gt; 1) &#123;</span><br><span class="line">                    modify = (Math.abs(slideProgress) - 1) * 0.3 + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                translate = slideProgress * modify * 260 + &#x27;px&#x27;;</span><br><span class="line">                scale = 1 - Math.abs(slideProgress) / 5;</span><br><span class="line">                zIndex = 999 - Math.abs(Math.round(10 * slideProgress));</span><br><span class="line">                slide.transform(&#x27;translateX(&#x27; + translate + &#x27;) scale(&#x27; + scale + &#x27;)&#x27;);</span><br><span class="line">                slide.css(&#x27;zIndex&#x27;, zIndex);</span><br><span class="line">                slide.css(&#x27;opacity&#x27;, 1);</span><br><span class="line">                if (Math.abs(slideProgress) &gt; 3) &#123;</span><br><span class="line">                    slide.css(&#x27;opacity&#x27;, 0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        setTransition: function (transition) &#123;</span><br><span class="line">            for (var i = 0; i &lt; this.slides.length; i++) &#123;</span><br><span class="line">                var slide = this.slides.eq(i)</span><br><span class="line">                slide.transition(transition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        // 加上这段代码</span><br><span class="line">        slideChangeTransitionStart: function() &#123;</span><br><span class="line">            $(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;).css(&#123;&quot;transform&quot;: &quot;translateX(986px) scale(0.6)&quot;&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> // 加上这段代码</span><br><span class="line">// 修改样式</span><br><span class="line">$(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;).css(&#123;&quot;transform&quot;: &quot;translateX(986px) scale(0.6)&quot;&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jquery-cityselect-js—城市选择插件—省市联动效果"><a href="#jquery-cityselect-js—城市选择插件—省市联动效果" class="headerlink" title="jquery.cityselect.js—城市选择插件—省市联动效果"></a>jquery.cityselect.js—城市选择插件—省市联动效果</h4><p><a href="http://www.ijquery.cn/?p=360">第74款插件：jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML代码</span><br><span class="line">&lt;div id=&quot;city&quot;&gt; </span><br><span class="line">    &lt;select class=&quot;prov&quot;&gt;&lt;/select&gt;  </span><br><span class="line">    &lt;select class=&quot;city&quot; disabled=&quot;disabled&quot;&gt;&lt;/select&gt; </span><br><span class="line">    &lt;select class=&quot;dist&quot; disabled=&quot;disabled&quot;&gt;&lt;/select&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// JS和CSS代码 ，请注意这里默认需要把城市数据库 city.min.js 放到 jquery.cityselect.js 所在的数据库中，千万不要丢失！</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/City/jquery.cityselect.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&quot;#city&quot;).citySelect(&#123;</span><br><span class="line">            nodata:&quot;none&quot;,</span><br><span class="line">            required:false</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">注意：要配置服务器访问页面，不然city.min.js的获取路径有问题</span><br></pre></td></tr></table></figure>

<h4 id="Bootstrap-Multiselect"><a href="#Bootstrap-Multiselect" class="headerlink" title="Bootstrap Multiselect"></a>Bootstrap Multiselect</h4><p><a href="https://www.bootstrap-multiselect.cn/">Bootstrap Multiselect 中文网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/bootstrap/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;./js/Plugins/bootstrap-multiselect/bootstrap-multiselect.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/bootstrap-multiselect/bootstrap-multiselect.css&quot;&gt;</span><br><span class="line">&lt;select id=&quot;example-getting-started&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;cheese&quot;&gt;Cheese&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;tomatoes&quot;&gt;Tomatoes&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;mozarella&quot;&gt;Mozzarella&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;mushrooms&quot;&gt;Mushrooms&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;pepperoni&quot;&gt;Pepperoni&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;onions&quot;&gt;Onions&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        $(&#x27;#example-getting-started&#x27;).multiselect();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CKEditor-富文本编辑器"><a href="#CKEditor-富文本编辑器" class="headerlink" title="CKEditor-富文本编辑器"></a><a href="https://ckeditor.com/ckeditor-5/demo/#document">CKEditor</a>-富文本编辑器</h4><p><a href="https://cdn.ckeditor.com/">CKEditor CDN</a></p>
<p><a href="https://ckeditor.com/">CKEditor</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CKEditor 5 – Classic editor&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.ckeditor.com/ckeditor5/35.0.1/classic/ckeditor.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Classic editor&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;editor&quot;&gt;</span><br><span class="line">        &lt;p&gt;This is some sample content.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        ClassicEditor</span><br><span class="line">            .create( document.querySelector( &#x27;#editor&#x27; ) )</span><br><span class="line">            .catch( error =&gt; &#123;</span><br><span class="line">                console.error( error );</span><br><span class="line">            &#125; );</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Distpicker—中国省市区地址三级联动插件"><a href="#Distpicker—中国省市区地址三级联动插件" class="headerlink" title="Distpicker—中国省市区地址三级联动插件"></a><a href="http://fengyuanchen.github.io/distpicker/">Distpicker</a>—中国省市区地址三级联动插件</h4><p><a href="https://github.com/fengyuanchen/distpicker">distpicker-github</a></p>
<p><a href="https://www.jq22.com/jquery-info8054">jQuery中国省市区地址三级联动插件Distpicker</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/distpicker/distpicker.data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/distpicker/distpicker.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div data-toggle=&quot;distpicker&quot;&gt;</span><br><span class="line">  &lt;select data-province=&quot;---- 选择省 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select data-city=&quot;---- 选择市 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select data-district=&quot;---- 选择区 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;distpicker1&quot;&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;#distpicker1&quot;).distpicker();</span><br></pre></td></tr></table></figure>

<h4 id="city-picker—地区联动插件"><a href="#city-picker—地区联动插件" class="headerlink" title="city-picker—地区联动插件"></a><a href="http://tshi0912.github.io/city-picker/">city-picker</a>—地区联动插件</h4><p><a href="https://github.com/tshi0912/city-picker">city-picker—github</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/city-picker/city-picker.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/city-picker/city-picker.data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/city-picker/city-picker.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div style=&quot;position: relative;&quot;&gt;&lt;!-- container --&gt;</span><br><span class="line">    &lt;input readonly type=&quot;text&quot; data-toggle=&quot;city-picker&quot; placeholder=&quot;请选择省/市&quot; data-level=&quot;city&quot; &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Web-Uploader—现代文件上传组件"><a href="#Web-Uploader—现代文件上传组件" class="headerlink" title="Web Uploader—现代文件上传组件"></a><a href="http://fex.baidu.com/webuploader/">Web Uploader</a>—现代文件上传组件</h4><h4 id="zTree—-jQuery-树插件"><a href="#zTree—-jQuery-树插件" class="headerlink" title="zTree— jQuery 树插件"></a><a href="https://treejs.cn/v3/main.php#_zTreeInfo">zTree</a>— jQuery 树插件</h4><h4 id="jstree—树插件"><a href="#jstree—树插件" class="headerlink" title="jstree—树插件"></a><a href="https://www.jstree.com/">jstree</a>—树插件</h4><h4 id="Font-Awesome—字体图标"><a href="#Font-Awesome—字体图标" class="headerlink" title="Font Awesome—字体图标"></a><a href="http://www.fontawesome.com.cn/">Font Awesome</a>—字体图标</h4><h4 id="fastclick—解决移动端click事件延迟300ms"><a href="#fastclick—解决移动端click事件延迟300ms" class="headerlink" title="fastclick—解决移动端click事件延迟300ms"></a>fastclick—解决移动端click事件延迟300ms</h4><p><a href="https://github.com/ftlabs/fastclick">fastclick-github</a></p>
<h4 id="jQuery-WeUI"><a href="#jQuery-WeUI" class="headerlink" title="jQuery WeUI"></a><a href="https://github.com/lihongxun945/jquery-weui">jQuery WeUI</a></h4><h4 id="swiper-1"><a href="#swiper-1" class="headerlink" title="swiper"></a><a href="https://www.swiper.com.cn/index.html">swiper</a></h4><h4 id="粒子插件–页面特效"><a href="#粒子插件–页面特效" class="headerlink" title="粒子插件–页面特效"></a><a href="https://github.com/VincentGarreau/particles.js">粒子插件–页面特效</a></h4><h5 id="Particles"><a href="#Particles" class="headerlink" title="Particles"></a>Particles</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install particles.js</span><br></pre></td></tr></table></figure>

<p><a href="http://www.bootstrapmb.com/tag/particles">particles-插件</a></p>
<h4 id="前端react-粒子特效"><a href="#前端react-粒子特效" class="headerlink" title="前端react 粒子特效"></a><a href="https://blog.csdn.net/weixin_54127208/article/details/124380211">前端react 粒子特效</a></h4><h4 id="particles官网"><a href="#particles官网" class="headerlink" title="particles官网"></a><a href="https://particles.js.org/">particles官网</a></h4><h4 id="particles的使用"><a href="#particles的使用" class="headerlink" title="particles的使用"></a>particles的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Particles from &quot;react-tsparticles&quot;;</span><br><span class="line">import &#123; loadFull &#125; from &quot;tsparticles&quot;;</span><br><span class="line"></span><br><span class="line">// 在组件外定义下面两个函数</span><br><span class="line">const particlesInit = async (main) =&gt; &#123;</span><br><span class="line">  console.log(main);</span><br><span class="line">  await loadFull(main);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const particlesLoaded = (container) =&gt; &#123;</span><br><span class="line">  console.log(container);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 粒子参数</span><br><span class="line">const options = &#123;</span><br><span class="line">    &quot;background&quot;: &#123;</span><br><span class="line">        &quot;color&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;#232741&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;position&quot;: &quot;50% 50%&quot;,</span><br><span class="line">        &quot;repeat&quot;: &quot;no-repeat&quot;,</span><br><span class="line">        &quot;size&quot;: &quot;cover&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 帧数，越低越卡,默认60</span><br><span class="line">    &quot;fpsLimit&quot;: 120,</span><br><span class="line">    &quot;fullScreen&quot;: &#123;</span><br><span class="line">        &quot;zIndex&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;interactivity&quot;: &#123;</span><br><span class="line">        &quot;events&quot;: &#123;</span><br><span class="line">            &quot;onClick&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true,</span><br><span class="line">                &quot;mode&quot;: &quot;push&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;onHover&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true,</span><br><span class="line">                &quot;mode&quot;: &quot;slow&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;modes&quot;: &#123;</span><br><span class="line">            &quot;push&quot;: &#123;</span><br><span class="line">                //点击是添加1个粒子</span><br><span class="line">                &quot;quantity&quot;: 3,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;bubble&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 200,</span><br><span class="line">                &quot;duration&quot;: 2,</span><br><span class="line">                &quot;opacity&quot;: 0.8,</span><br><span class="line">                &quot;size&quot;: 20,</span><br><span class="line">                &quot;divs&quot;: &#123;</span><br><span class="line">                    &quot;distance&quot;: 200,</span><br><span class="line">                    &quot;duration&quot;: 0.4,</span><br><span class="line">                    &quot;mix&quot;: false,</span><br><span class="line">                    &quot;selectors&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;grab&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 400</span><br><span class="line">            &#125;,</span><br><span class="line">            //击退</span><br><span class="line">            &quot;repulse&quot;: &#123;</span><br><span class="line">                &quot;divs&quot;: &#123;</span><br><span class="line">                    //鼠标移动时排斥粒子的距离</span><br><span class="line">                    &quot;distance&quot;: 200,</span><br><span class="line">                    //翻译是持续时间</span><br><span class="line">                    &quot;duration&quot;: 0.4,</span><br><span class="line">                    &quot;factor&quot;: 100,</span><br><span class="line">                    &quot;speed&quot;: 1,</span><br><span class="line">                    &quot;maxSpeed&quot;: 50,</span><br><span class="line">                    &quot;easing&quot;: &quot;ease-out-quad&quot;,</span><br><span class="line">                    &quot;selectors&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //缓慢移动</span><br><span class="line">            &quot;slow&quot;: &#123;</span><br><span class="line">                //移动速度</span><br><span class="line">                &quot;factor&quot;: 2,</span><br><span class="line">                //影响范围</span><br><span class="line">                &quot;radius&quot;: 200,</span><br><span class="line">            &#125;,</span><br><span class="line">            //吸引</span><br><span class="line">            &quot;attract&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 200,</span><br><span class="line">                &quot;duration&quot;: 0.4,</span><br><span class="line">                &quot;easing&quot;: &quot;ease-out-quad&quot;,</span><br><span class="line">                &quot;factor&quot;: 3,</span><br><span class="line">                &quot;maxSpeed&quot;: 50,</span><br><span class="line">                &quot;speed&quot;: 1</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //  粒子的参数</span><br><span class="line">    &quot;particles&quot;: &#123;</span><br><span class="line">        //粒子的颜色</span><br><span class="line">        &quot;color&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        //是否启动粒子碰撞</span><br><span class="line">        &quot;collisions&quot;: &#123;</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        //粒子之间的线的参数</span><br><span class="line">        &quot;links&quot;: &#123;</span><br><span class="line">            &quot;color&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;distance&quot;: 150,</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">            &quot;warp&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;move&quot;: &#123;</span><br><span class="line">            &quot;attract&quot;: &#123;</span><br><span class="line">                &quot;rotate&quot;: &#123;</span><br><span class="line">                    &quot;x&quot;: 600,</span><br><span class="line">                    &quot;y&quot;: 1200</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">            &quot;outModes&quot;: &#123;</span><br><span class="line">                &quot;bottom&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;left&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;right&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;top&quot;: &quot;out&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;speed&quot;: 6,</span><br><span class="line">            &quot;warp&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;number&quot;: &#123;</span><br><span class="line">            &quot;density&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            //初始粒子数</span><br><span class="line">            &quot;value&quot;: 40</span><br><span class="line">        &#125;,</span><br><span class="line">        //透明度</span><br><span class="line">        &quot;opacity&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 0.5,</span><br><span class="line">            &quot;animation&quot;: &#123;</span><br><span class="line">                &quot;speed&quot;: 3,</span><br><span class="line">                &quot;minimumValue&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //大小</span><br><span class="line">        &quot;size&quot;: &#123;</span><br><span class="line">            &quot;random&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;value&quot;: &#123;</span><br><span class="line">                &quot;min&quot;: 1,</span><br><span class="line">                &quot;max&quot;: 3</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;animation&quot;: &#123;</span><br><span class="line">                &quot;speed&quot;: 20,</span><br><span class="line">                &quot;minimumValue&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;/* 粒子插件 */&#125;</span><br><span class="line">&lt;Particles</span><br><span class="line">  id=&quot;tsparticles&quot;</span><br><span class="line">  init=&#123;particlesInit&#125;</span><br><span class="line">  loaded=&#123;particlesLoaded&#125;</span><br><span class="line">  options=&#123;options&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://clipboardjs.com/">clipboard.js</a>-复制功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var clipboard = new ClipboardJS(&quot;.copy-btn&quot;);</span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="line">    layer.msg(&#x27;复制成功&#x27;, &#123;id: &#x27;clipboard&#x27;, time: 1000&#125;);</span><br><span class="line">    e.clearSelection();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard">Clipboard</a></p>
<h4 id="模拟环形进度条"><a href="#模拟环形进度条" class="headerlink" title="模拟环形进度条"></a>模拟环形进度条</h4><p><a href="https://www.jq22.com/yanshi22829">circle-progress.js</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建模拟环形进度条</span><br><span class="line">// 导出文件过程中-网络请求卡顿/接口pending状态下的交互效果（假进度-只提供用户交互）</span><br><span class="line">var canvas = new EnableCircle(&#123;</span><br><span class="line">    id:&#x27;le-canvas&#x27;,		// 被渲染元素的canvas的ID</span><br><span class="line">    value: 96,			// 最大值</span><br><span class="line">    target: &#x27;primary&#x27;,</span><br><span class="line">    lineWidth: 10,		// 环形宽度</span><br><span class="line">    lineCap: &#x27;round&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://tigrr.github.io/circle-progress/">Circle Progress: JavaScript circular progress bar plugin (tigrr.github.io)</a></p>
<p><a href="https://blog.csdn.net/weixin_41309331/article/details/98476467">移动前端学习笔记（2）——移动端点击（touch、click、tap、fastclick）</a></p>
<h4 id="iScroll-js"><a href="#iScroll-js" class="headerlink" title="iScroll.js"></a>iScroll.js</h4><p><a href="https://www.cnblogs.com/JoannaQ/p/3155873.html">改变滚动条滚动速度</a></p>
<p><a href="https://www.cnblogs.com/JoannaQ/p/3155873.html">iScroll框架的使用和修改</a></p>
<p><strong>鼠标滚轮滚动</strong></p>
<p>iscroll支持在pc端浏览器中使用鼠标滚轮控制区域滚动，但操作起来很不灵敏。这是由于iscroll对鼠标滚轮事件做了拦截，然后缩小了滚轮的滚动距离，详见iscroll4.js源代码608-609行：<br>wheelDeltaX = e.wheelDeltaX / 12;//控制X轴鼠标滚轮速度*<br>wheelDeltaY = e.wheelDeltaY / 12;//控制Y轴鼠标滚轮速度</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/iScroll.js%E4%BF%AE%E6%94%B9%E6%BB%9A%E5%8A%A8%E9%80%9F%E5%BA%A6.png" alt="iScroll.js修改滚动速度"></p>
<h4 id="Easy-Sass"><a href="#Easy-Sass" class="headerlink" title="Easy Sass"></a><a href="https://www.pianshen.com/article/4482303415/">Easy Sass</a></h4><p><a href="https://www.imooc.com/article/19624">使用 VSCode 编辑器来编译 Sass</a></p>
<h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><p><a href="https://www.npmjs.com/package/jquery.pagination">jquery.pagination</a></p>
<p><a href="https://docs.djangoproject.com/en/dev/topics/pagination/">Pagination</a></p>
<p><a href="https://www.jq22.com/jquery-info5697">jQuery分页插件pagination.js</a></p>
<h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p><a href="https://www.jstree.com/">jsTree</a> 注意：要使用高版本的JQ版本</p>
<h4 id="单选-多选下拉框"><a href="#单选-多选下拉框" class="headerlink" title="单选/多选下拉框"></a>单选/多选下拉框</h4><p><a href="https://fly.layui.com/extend/xmSelect/">xm-select</a> <a href="https://maplemei.gitee.io/xm-select/#/component/install">使用手册</a></p>
<h4 id="拾色器插件"><a href="#拾色器插件" class="headerlink" title="拾色器插件"></a>拾色器插件</h4><p><a href="https://github.com/jdavidhermoso">jdavidhermoso</a>/ <a href="https://github.com/jdavidhermoso/jQueryColorPicker">jQueryColorPicker</a></p>
<p>jquerycolorpicker</p>
<p><a href="https://www.jq22.com/jquery-info2021">jQuery颜色选择器ColorPicker</a></p>
<p><a href="https://plugins.jquery.com/tag/colorpicker/">Tagged: colorpicker</a></p>
<h4 id="图片放大功能-类似放大镜"><a href="#图片放大功能-类似放大镜" class="headerlink" title="图片放大功能(类似放大镜)"></a>图片放大功能(类似放大镜)</h4><p>enlarge.js</p>
<p><a href="https://github.com/filamentgroup">filamentgroup</a> / <a href="https://github.com/filamentgroup/enlarge">enlarge</a></p>
<p><a href="https://github.com/yb">yb</a> /<a href="https://github.com/yb/enlarge.js">enlarge.js</a></p>
<p><a href="http://filamentgroup.github.io/enlarge/docs/">页面效果</a></p>
<h4 id="拖拽替换图片的排列顺序"><a href="#拖拽替换图片的排列顺序" class="headerlink" title="拖拽替换图片的排列顺序"></a>拖拽替换图片的排列顺序</h4><h4 id="上拉加载下拉刷新"><a href="#上拉加载下拉刷新" class="headerlink" title="上拉加载下拉刷新"></a>上拉加载下拉刷新</h4><p><a href="http://caibaojian.com/iscroll-5/">iScroll 5</a></p>
<p>swiper</p>
<p>pulltorefresh</p>
<p><a href="https://github.com/cubiq">cubiq</a>/<a href="https://github.com/cubiq/iscroll">iscroll</a></p>
<p><a href="https://www.jq22.com/jquery-info378">daterangepicker日历插件</a></p>
<h4 id="模拟ios日历时间选择效果"><a href="#模拟ios日历时间选择效果" class="headerlink" title="模拟ios日历时间选择效果"></a>模拟ios日历时间选择效果</h4><p><a href="https://docs.mobiscroll.com/2-13-2">Mobiscroll</a> <a href="https://demo.mobiscroll.com/select/country-picker#language=zh&display=modal">demo</a> <a href="https://demo.mobiscroll.com/v4/datetime#demo=mobile-desktop-usage">demo</a></p>
<p><a href="https://www.jq22.com/jquery-info7072">jQuery-mobiscroll</a></p>
<h4 id="jQuery仿QQ登录表单弹出窗"><a href="#jQuery仿QQ登录表单弹出窗" class="headerlink" title="jQuery仿QQ登录表单弹出窗"></a>jQuery仿QQ登录表单弹出窗</h4><p><a href="https://www.jq22.com/jquery-info8342">jQuery仿QQ登录表单弹出窗</a></p>
<h4 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h4><p><a href="https://select2.org/">Select2</a> <a href="https://github.com/select2/select2">select2-github</a></p>
<p><a href="https://www.bootstrapselect.cn/">bootstrap-select</a> <a href="http://file.moyublog.com/code/5dc59f18be908/index.html">jQuery Selectric</a> <a href="http://file.moyublog.com/code/5dc59f18be908/index.html">jQuery Selectric</a></p>
<p><a href="https://www.jq22.com/jquery-info17279">好用的自定义select下拉插件jQuery Selectric</a></p>
<p><a href="https://www.jq22.com/jquery-info14788">jQuery模拟select下拉框插件SelectBox</a></p>
<p><a href="https://www.jq22.com/jquery-info20485">jQuery自定义下拉框插件select-mania</a></p>
<h5 id="可搜索、多选的下拉框插件-简单-xm-select"><a href="#可搜索、多选的下拉框插件-简单-xm-select" class="headerlink" title="可搜索、多选的下拉框插件-简单-xm-select"></a>可搜索、多选的下拉框插件-简单-<a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步: 下载 https://gitee.com/maplemei/xm-select/blob/master/dist/xm-select.js#</span><br><span class="line">第二步: 引入 xm-select.js</span><br><span class="line">第三步: 写一个`&lt;div id=&quot;demo1&quot;&gt;&lt;/div&gt;`</span><br><span class="line">第四步: 渲染</span><br><span class="line">	var demo1 = xmSelect.render(&#123;</span><br><span class="line">		el: &#x27;#demo1&#x27;,</span><br><span class="line">		language: &#x27;zn&#x27;,</span><br><span class="line">		data: [</span><br><span class="line">			&#123;name: &#x27;张三&#x27;, value: 1&#125;,</span><br><span class="line">			&#123;name: &#x27;李四&#x27;, value: 2&#125;,</span><br><span class="line">			&#123;name: &#x27;王五&#x27;, value: 3&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;div id=&quot;game_id_select&quot; class=&quot;xm-select-demo&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 游戏数据列表</span><br><span class="line">var applist = [] </span><br><span class="line">// 游戏下拉框</span><br><span class="line">var game_id_select = xmSelect.render(&#123;</span><br><span class="line">	el: &#x27;#game_id_select&#x27;, </span><br><span class="line">	name:&#x27;&#x27;,   // 如果将值存在另外一个隐藏input里，将name设置为空，否则为对应的name值</span><br><span class="line">	filterable: true,	// 可搜索</span><br><span class="line">	tips: &#x27;请选择游戏&#x27;,</span><br><span class="line">	searchTips: &#x27;请输入游戏&#x27;,</span><br><span class="line">	height: 300,</span><br><span class="line">	style: &#123;</span><br><span class="line">		width: &#x27;200px&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	prop: &#123;</span><br><span class="line">		name: &#x27;app_name&#x27;,  // 数据中对应的name值的属性名</span><br><span class="line">		value: &#x27;app_id&#x27;,	// 数据中对应的value值的属性名</span><br><span class="line">	&#125;,</span><br><span class="line">	data: applist,</span><br><span class="line">	on: function(data)&#123;</span><br><span class="line">		 /*---处理动态赋值-开始-----*/</span><br><span class="line">		var arr = data.arr      // 当前多选已选中的数据</span><br><span class="line">			, str = &#x27;&#x27;;         // 选中数据的valueStr集合</span><br><span class="line">		arr.map(function(item, index) &#123;</span><br><span class="line">			console.log(item);</span><br><span class="line">			str += (index == 0) ? item.app_id : &#x27;,&#x27; + item.app_id;</span><br><span class="line">		&#125;)</span><br><span class="line">		// 动态赋值(在on时触发事件，获取到的值不是最新选择的值,是上次选中的值，要动态赋值)</span><br><span class="line">		// mini.get(&#x27;game_id&#x27;).setValue(str)  mini的用法</span><br><span class="line">		$(&#x27;[name=&quot;game_id&quot;]&#x27;).val(str)</span><br><span class="line">		/*---处理动态赋值-结束-----*/</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3D轮播图支持滚轮"><a href="#3D轮播图支持滚轮" class="headerlink" title="3D轮播图支持滚轮"></a>3D轮播图支持滚轮</h4><p>jQuery-3dlbt</p>
<h4 id="jQuery头像上传裁剪"><a href="#jQuery头像上传裁剪" class="headerlink" title="jQuery头像上传裁剪"></a>jQuery头像上传裁剪</h4><p>jqueryJcropPhp</p>
<h4 id="日历插件"><a href="#日历插件" class="headerlink" title="日历插件"></a>日历插件</h4><p><a href="http://www.my97.net/">My97DatePicker</a></p>
<h4 id="穿梭插件"><a href="#穿梭插件" class="headerlink" title="穿梭插件"></a>穿梭插件</h4><h4 id="左侧导航栏"><a href="#左侧导航栏" class="headerlink" title="左侧导航栏"></a>左侧导航栏</h4><h4 id="导出数据表格"><a href="#导出数据表格" class="headerlink" title="导出数据表格"></a>导出数据表格</h4><p><a href="https://github.com/wangerzi/layui-excel">layui-excel-GitHub</a></p>
<p><a href="http://excel.wj2015.com/_book/">LAY-EXCEL 简单快捷的导出插件</a></p>
<p><a href="http://excel.wj2015.com/">excel导出</a></p>
<p><a href="https://github.com/rainabba/jquery-table2excel">table2excel</a></p>
<p><a href="https://github.com/clarketm/TableExport">TableExport</a></p>
<h4 id="绘制图表插件"><a href="#绘制图表插件" class="headerlink" title="绘制图表插件"></a>绘制图表插件</h4><p><a href="https://www.highcharts.com.cn/">Highcharts</a></p>
<blockquote>
<p>Highcharts兼容 IE6+、完美支持移动端、图表类型丰富、方便快捷的 HTML5 交互性图表库</p>
</blockquote>
<h4 id="获取地图位置"><a href="#获取地图位置" class="headerlink" title="获取地图位置"></a>获取地图位置</h4><p><a href="http://api.map.baidu.com/api?v=2.0&ak=0PkXrIRUF8zocV4bv8aYNr06DZaHjWXa">百度</a></p>
<p><a href="https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js">QQ</a></p>
<h4 id="移动端下拉刷新，上拉加载更多插件"><a href="#移动端下拉刷新，上拉加载更多插件" class="headerlink" title="移动端下拉刷新，上拉加载更多插件"></a>移动端下拉刷新，上拉加载更多插件</h4><p><a href="https://github.com/wangshengxuan/dropload-gh-pages">dropload-gh-pages</a></p>
<h4 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h4><p><a href="https://validator.niceue.com/">nice-validator</a></p>
<h4 id="jQuery仿QQ登录表单弹出窗-1"><a href="#jQuery仿QQ登录表单弹出窗-1" class="headerlink" title="jQuery仿QQ登录表单弹出窗"></a>jQuery仿QQ登录表单弹出窗</h4><p><a href="https://www.jq22.com/jquery-info8342">https://www.jq22.com/jquery-info8342</a></p>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p><a href="http://danml.com/download.html">download.js</a></p>
<h4 id="Bootstrap-select-匹配实时搜索功能下拉框"><a href="#Bootstrap-select-匹配实时搜索功能下拉框" class="headerlink" title="Bootstrap-select-匹配实时搜索功能下拉框"></a>Bootstrap-select-匹配实时搜索功能下拉框</h4><p><a href="https://www.bootstrapselect.cn/">https://www.bootstrapselect.cn/</a></p>
<h4 id="Query-file-upload-的正确用法（限制上传大小和文件类型）"><a href="#Query-file-upload-的正确用法（限制上传大小和文件类型）" class="headerlink" title="Query file upload 的正确用法（限制上传大小和文件类型）"></a>Query file upload 的正确用法（限制上传大小和文件类型）</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://www.cnblogs.com/jinzhao/p/5914211.html">参考</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add: function (e, data) &#123;</span><br><span class="line">    var file = data.originalFiles[0].name.split(&quot;.&quot;);</span><br><span class="line">    </span><br><span class="line">    文件名有可能是sdk-icon1.apk.zip   所以不能只判断含有apk，而是判断根据.拆分的数组中的最后一个是不是apk</span><br><span class="line">    if(file[file.length -1].indexOf(&quot;apk&quot;) == -1) &#123;</span><br><span class="line">      msg(&quot;请上传apk后缀名文件&quot;);</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // data.originalFiles[0].size   这里的大小的单位是b</span><br><span class="line">    if(data.originalFiles[0].size &gt; 2 * 1024 * 1024 * 1024) &#123;</span><br><span class="line">      msg(&quot;应用完整包文件不能超过2G&quot;);    //</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data.submit();    //如果满足条件就上传文件（执行上传文件）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="is-js-强大的通用js表单验证插件"><a href="#is-js-强大的通用js表单验证插件" class="headerlink" title="is.js-强大的通用js表单验证插件"></a>is.js-强大的通用js表单验证插件</h4><p><a href="https://www.javascriptcn.com/post/52057">is.js</a> 是一个微型通用性数据检查验证包。目前提供了数据类型、存在性、正则表达、字符串、数学、对象、数组、运行环境、时间、配置10大类110个验证方法。</p>
<h4 id="移动端选择控件"><a href="#移动端选择控件" class="headerlink" title="移动端选择控件"></a>移动端选择控件</h4><p>原生 js 移动端选择控件，不依赖任何库</p>
<p>仿IOS选择下拉框</p>
<p><a href="https://github.com/onlyhom/mobileSelect.js/blob/master/docs/README-CN.md">mobileSelect.js</a></p>
<h4 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h4><p><a href="http://www.sublimetext.com/">Sublime Text</a></p>
<p><a href="https://www.haorooms.com/post/sublime_use">前端神器-sublime text3插件安装及使用</a></p>
<h4 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a><a href="https://github.com/ftlabs/fastclick">fastclick</a></h4><p>处理移动端click延迟</p>
<h4 id="日期选择器-datetimepicker"><a href="#日期选择器-datetimepicker" class="headerlink" title="日期选择器-datetimepicker"></a>日期选择器-datetimepicker</h4><p>多次点击input日期选择器不显示</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//解决输入框点击多次（包括两次）不显示的问题</span><br><span class="line">document.getElementById(&#x27;startDate&#x27;).addEventListener(&#x27;click&#x27;, myfunc);</span><br><span class="line">document.getElementById(&#x27;endDate&#x27;).addEventListener(&#x27;click&#x27;, myfunc);</span><br><span class="line">function myfunc(e) &#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="兼容IE日历插件—My97DatePicker"><a href="#兼容IE日历插件—My97DatePicker" class="headerlink" title="**兼容IE日历插件—My97DatePicker **"></a>**兼容IE日历插件—My97DatePicker **</h4><p><a href="http://www.my97.net/">My97DatePicker</a></p>
<p>调用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、&lt;script type=&quot;text/javascript&quot; src=&quot;libs/My97DatePicker/WdatePicker.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">2、直接调用：在调用的输入框  onclick = &quot;WdatePicker(&#123;dateFmt:&#x27;yyyy/MM/dd&#x27;&#125;);&quot;    </span><br></pre></td></tr></table></figure>

<h4 id="jquery-SuperSlide自动轮播插件"><a href="#jquery-SuperSlide自动轮播插件" class="headerlink" title="jquery.SuperSlide自动轮播插件"></a>jquery.SuperSlide自动轮播插件</h4><h4 id="jQueryValidation"><a href="#jQueryValidation" class="headerlink" title="jQueryValidation"></a>jQueryValidation</h4><p><a href="https://www.jb51.net/article/65257.htm">jquery Validation表单验证使用详解</a></p>
<h4 id="laypage"><a href="#laypage" class="headerlink" title="laypage"></a>laypage</h4><p><a href="https://www.jb51.net/article/166382.htm">laypage.js分页插件使用方法详解</a></p>
<h4 id="validform"><a href="#validform" class="headerlink" title="validform"></a>validform</h4><p><a href="https://blog.csdn.net/qq_31873539/article/details/83268049">Validform基础及用法</a></p>
<p><a href="https://www.jianshu.com/p/4b33566b9566">Validform小结</a></p>
<h4 id="bootstrap-switch"><a href="#bootstrap-switch" class="headerlink" title="bootstrap-switch"></a>bootstrap-switch</h4><p><a href="http://www.manongjc.com/detail/28-nycazzhhhuysxli.html">bootstrap-switch</a></p>
<p><a href="https://www.bootcss.com/p/bootstrap-switch/">Bootstrap 开关（switch）控件</a></p>
<h4 id="Lazy-Load"><a href="#Lazy-Load" class="headerlink" title="Lazy Load"></a>Lazy Load</h4><p><a href="https://www.lazyloadjs.cn/">Lazy Load 中文网</a></p>
<h4 id="icheck"><a href="#icheck" class="headerlink" title="icheck"></a>icheck</h4><p><a href="https://www.jq22.com/jquery-info784">iCheck不一样的checkbok</a></p>
<h4 id="hui-iconfont"><a href="#hui-iconfont" class="headerlink" title="hui-iconfont"></a>hui-iconfont</h4><p><a href="http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml?t=283718787">字体图标</a></p>
<h4 id="UMeditor"><a href="#UMeditor" class="headerlink" title="UMeditor"></a>UMeditor</h4><blockquote>
<p>UEditor Mini版本</p>
</blockquote>
<h5 id="UEditor"><a href="#UEditor" class="headerlink" title="UEditor"></a><a href="http://docs.upyun.com/misc/ueditor/">UEditor</a></h5><p><a href="http://www.miniui.com/demo/thirdparty/htmleditor/ueditor/ueditor.html">编辑器</a></p>
<p><a href="https://open-demo.modstart.com/ueditor-plus/dist-min/">在线示例</a></p>
<h5 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h5><ul>
<li><a href="https://open-demo.modstart.com/ueditor-plus/dist-min/">https://open-demo.modstart.com/ueditor-plus/dist-min/</a></li>
</ul>
<h5 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h5><h6 id="第一步，下载最新版本"><a href="#第一步，下载最新版本" class="headerlink" title="第一步，下载最新版本"></a>第一步，下载最新版本</h6><ul>
<li>国内：<a href="https://gitee.com/modstart-lib/ueditor-plus">https://gitee.com/modstart-lib/ueditor-plus</a></li>
<li>国外：<a href="https://github.com/modstart-lib/ueditor-plus">https://github.com/modstart-lib/ueditor-plus</a></li>
</ul>
<h6 id="第二步，打开浏览器"><a href="#第二步，打开浏览器" class="headerlink" title="第二步，打开浏览器"></a>第二步，打开浏览器</h6><ul>
<li>使用浏览器打开 _examples/index.html 查看</li>
</ul>
<h5 id="UEditor相关链接"><a href="#UEditor相关链接" class="headerlink" title="UEditor相关链接"></a>UEditor相关链接</h5><ul>
<li>UEditor 官网：<a href="http://ueditor.baidu.com/">http://ueditor.baidu.com</a></li>
<li>UEditor API 文档：<a href="http://ueditor.baidu.com/doc">http://ueditor.baidu.com/doc</a></li>
<li>UEditor 文档：<a href="http://fex.baidu.com/ueditor/">http://fex.baidu.com/ueditor/</a></li>
<li>UEditor API 文档：<a href="http://ueditor.baidu.com/doc">http://ueditor.baidu.com/doc</a></li>
</ul>
<h4 id="FASTADMIN"><a href="#FASTADMIN" class="headerlink" title="FASTADMIN"></a><a href="https://www.fastadmin.net/">FASTADMIN</a></h4><h4 id="nprogress"><a href="#nprogress" class="headerlink" title="nprogress"></a><a href="https://ricostacruz.com/nprogress/">nprogress</a></h4><p><a href="https://www.jb51.net/article/170539.htm">NProgress显示顶部进度条效果及使用详解</a></p>
<h4 id="jquery-autocomplete"><a href="#jquery-autocomplete" class="headerlink" title="jquery.autocomplete"></a><a href="http://edu.jb51.net/jquery/jquery-plugin-autocomplete.html">jquery.autocomplete</a></h4><h4 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a><a href="https://github.com/seajs/seajs">seajs</a></h4><p><a href="https://www.zhangxinxu.com/sp/seajs/#intro">seajs中文文档</a></p>
<h4 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a><a href="https://fontawesome.com/">Font Awesome</a></h4><p><a href="http://www.fontawesome.com.cn/">Font Awesome-中文文档</a></p>
<h4 id="HttpWatch"><a href="#HttpWatch" class="headerlink" title="HttpWatch"></a><a href="https://www.httpwatch.com/">HttpWatch</a></h4><p>网页数据分析工具</p>
<p>专业化网页抓包数据分析工具</p>
<h4 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a><a href="https://ionic.io/">ionic</a></h4><p><a href="http://www.ionic.wang/">http://www.ionic.wang/</a></p>
<h4 id="ART-TEMPLATE—高性能-JavaScript-模板引擎"><a href="#ART-TEMPLATE—高性能-JavaScript-模板引擎" class="headerlink" title="ART-TEMPLATE—高性能 JavaScript 模板引擎"></a><a href="http://aui.github.io/art-template/zh-cn/">ART-TEMPLATE</a>—高性能 JavaScript 模板引擎</h4><p><a href="https://github.com/lhywork/artTemplate">artTemplate</a></p>
<h4 id="Underscore-js-—JavaScript实用库"><a href="#Underscore-js-—JavaScript实用库" class="headerlink" title="Underscore.js —JavaScript实用库"></a><a href="https://underscorejs.net/#">Underscore.js </a>—JavaScript实用库</h4><h4 id="extjs"><a href="#extjs" class="headerlink" title="extjs"></a><a href="https://www.w3cschool.cn/extjs/">extjs</a></h4><h2 id="Atom-工具使用"><a href="#Atom-工具使用" class="headerlink" title="Atom_工具使用"></a>Atom_工具使用</h2><p>由github发布的前端开发工具</p>
<p>非常强大和非常开发的开发工具平台</p>
<ul>
<li>官网地址: <a href="https://atom.io/">https://atom.io/</a></li>
<li>百度网盘下载地址：<a href="http://pan.baidu.com/s/1ntszCgT">http://pan.baidu.com/s/1ntszCgT</a></li>
</ul>
<p>Atom的插件和主题安装和配置</p>
]]></content>
      <categories>
        <category>WEB前端</category>
      </categories>
      <tags>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>动态生成元素的事件处理</title>
    <url>/2019/08/10/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="appendTo"><a href="#appendTo" class="headerlink" title="appendTo()"></a><code>appendTo()</code></h2><blockquote>
<p>将动态生成的元素添加到指定的目标元素中作为子元素</p>
</blockquote>
<p><code>html</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;target-element&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>jQuery</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;&lt;div class=&quot;dynamic-element&quot;&gt;...&lt;/div&gt;&#x27;).appendTo(&#x27;.target-element&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var html = </span><br><span class="line">`</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;新闻11111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻22222&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻33333&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻44444&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line">$(html).appendTo(&#x27;.target-element&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="append"><a href="#append" class="headerlink" title="append()"></a><code>append()</code></h2><blockquote>
<p>将动态生成的元素添加到指定的父元素中</p>
</blockquote>
<p><code>html</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;parent-element&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>jQuery</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;.parent-element&#x27;).append(&#x27;&lt;div class=&quot;dynamic-element&quot;&gt;...&lt;/div&gt;&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var html = </span><br><span class="line">`</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;新闻11111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻22222&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻33333&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻44444&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line">$(&#x27;.parent-element&#x27;).append(html);</span><br></pre></td></tr></table></figure>

<h2 id="on"><a href="#on" class="headerlink" title="on()"></a><code>on()</code></h2><blockquote>
<p>使用事件委托机制绑定事件处理程序，可以捕获动态生成元素的事件</p>
</blockquote>
<blockquote>
<p>使用 <code>.on()</code> 方法绑定事件时，应该选择一个静态的父元素，并通过选择器指定目标动态生成的元素。这样可以确保事件处理程序能够捕获到动态生成元素的事件。</p>
</blockquote>
<blockquote>
<p>对动态生成的元素进行操作，应该确保在元素已经生成并添加到 DOM 树中后再执行相应的操作，以避免操作无效。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).on(&#x27;click&#x27;, &#x27;动态生成的元素的选择器&#x27;, function() &#123; ... &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(父元素的选择器).on(&#x27;click&#x27;, &#x27;动态生成的元素的选择器&#x27;, function() &#123; ... &#125;);</span><br></pre></td></tr></table></figure>

<p><code>html</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;news-box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>jQuery</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var html = </span><br><span class="line">`</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;新闻11111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻22222&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻33333&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;新闻44444&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line">$(&#x27;.news-box&#x27;).append(html);</span><br><span class="line"></span><br><span class="line">$(&#x27;.news-box&#x27;).on(&#x27;click&#x27;, &#x27;ul li&#x27;, function(e)&#123;</span><br><span class="line">    console.log(&#x27;点击某条新闻&#x27;)</span><br><span class="line">    console.log(this);				// &lt;li&gt;新闻11111&lt;/li&gt;</span><br><span class="line">    console.log(e.target);			// &lt;li&gt;新闻11111&lt;/li&gt;</span><br><span class="line">    console.log($(this).index())	// 0</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>live()</code> 方法在旧版本的 <code>jQuery</code> 中用于绑定事件处理程序，包括对动态生成的元素的事件进行绑定。然而，自 <code>jQuery</code> 版本 <code>1.7</code> 起，<code>live()</code> 方法已被废弃，不再推荐使用。</p>
</blockquote>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a><code>remove()</code></h2><blockquote>
<p>从 DOM 中移除动态生成的元素</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;.dynamic-element&#x27;).remove();</span><br></pre></td></tr></table></figure>

<h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a><code>empty()</code></h2><blockquote>
<p> 清空动态生成元素的内容</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;.dynamic-element&#x27;).empty();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>动画效果</title>
    <url>/2019/09/09/%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h4 id="雪花动画"><a href="#雪花动画" class="headerlink" title="雪花动画"></a>雪花动画</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    body&#123;background-color: #999;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">//添加雪花动画</span><br><span class="line">//canvas init</span><br><span class="line">var canvas = document.getElementById(&quot;canvas&quot;);</span><br><span class="line">var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line"></span><br><span class="line">//canvas dimensions</span><br><span class="line">var W = window.innerWidth;</span><br><span class="line">var H = window.innerHeight;</span><br><span class="line">canvas.width = W;</span><br><span class="line">canvas.height = H;</span><br><span class="line"></span><br><span class="line">//snowflake particles</span><br><span class="line">var mp = 60; //max particles</span><br><span class="line">var particles = [];</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">particles.push(&#123;</span><br><span class="line">  x: Math.random()*W, //x-coordinate</span><br><span class="line">  y: Math.random()*H, //y-coordinate</span><br><span class="line">  r: Math.random()*4+1, //radius</span><br><span class="line">  d: Math.random()*mp //density</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Lets draw the flakes</span><br><span class="line">function draw()</span><br><span class="line">&#123;</span><br><span class="line">ctx.clearRect(0, 0, W, H);</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = &quot;rgba(255, 255, 255, 0.6)&quot;;</span><br><span class="line">ctx.strokeStyle = &#x27;rgba(255, 255, 255, 0.4)&#x27;;</span><br><span class="line">ctx.lineWidth = &#x27;0.01&#x27;;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">  var p = particles[i];</span><br><span class="line">  ctx.moveTo(p.x, p.y);</span><br><span class="line">  ctx.arc(p.x, p.y, p.r, 0, Math.PI*2, true);</span><br><span class="line">&#125;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Function to move the snowflakes</span><br><span class="line">//angle will be an ongoing incremental flag. Sin and Cos functions will be applied to it to create vertical and horizontal movements of the flakes</span><br><span class="line">var angle = 0;</span><br><span class="line">function update()</span><br><span class="line">&#123;</span><br><span class="line">angle += 0.01;</span><br><span class="line">for(var i = 0; i &lt; mp; i++)</span><br><span class="line">&#123;</span><br><span class="line">  var p = particles[i];</span><br><span class="line">  //Updating X and Y coordinates</span><br><span class="line">  //We will add 1 to the cos function to prevent negative values which will lead flakes to move upwards</span><br><span class="line">  //Every particle has its own density which can be used to make the downward movement different for each flake</span><br><span class="line">  //Lets make it more random by adding in the radius</span><br><span class="line">  p.y += Math.cos(angle+p.d) + 1 + p.r/6;</span><br><span class="line">  p.x += Math.sin(angle) * 2; </span><br><span class="line"></span><br><span class="line">  //Sending flakes back from the top when it exits</span><br><span class="line">  //Lets make it a bit more organic and let flakes enter from the left and right also.</span><br><span class="line">  if(p.x &gt; W+5 || p.x &lt; -5 || p.y &gt; H)</span><br><span class="line">  &#123;</span><br><span class="line">    if(i%3 &gt; 0) //66.67% of the flakes</span><br><span class="line">    &#123;</span><br><span class="line">      particles[i] = &#123;x: Math.random()*W, y: -10, r: p.r, d: p.d&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      //If the flake is exitting from the right</span><br><span class="line">      if(Math.sin(angle) &gt; 0)</span><br><span class="line">      &#123;</span><br><span class="line">        //Enter from the left</span><br><span class="line">        particles[i] = &#123;x: -5, y: Math.random()*H, r: p.r, d: p.d&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        //Enter from the right</span><br><span class="line">        particles[i] = &#123;x: W+5, y: Math.random()*H, r: p.r, d: p.d&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//animation loop</span><br><span class="line">setInterval(draw, 33);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端CSS问题</title>
    <url>/2020/06/30/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/autoXingJY/p/11576469.html">html页面在苹果手机内，safari浏览器，微信中滑动不流畅问题解决方案</a></p>
<p><a href="https://blog.csdn.net/weixin_30896511/article/details/98370605">iPhone mobile safari fixed 元素滚动慢的问题处理</a></p>
<p><a href="http://www.wjhsh.net/autoXingJY-p-11576469.html">html页面在苹果手机内，safari浏览器，微信中滑动不流畅问题解决方案</a></p>
<h4 id="CSS控制字体自动转换成大写字母"><a href="#CSS控制字体自动转换成大写字母" class="headerlink" title="CSS控制字体自动转换成大写字母"></a>CSS控制字体自动转换成大写字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-transform: uppercase;</span><br></pre></td></tr></table></figure>



<h4 id="修改滚动条样式"><a href="#修改滚动条样式" class="headerlink" title="修改滚动条样式"></a>修改滚动条样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 滚动条样式 */</span><br><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  width: 2px;</span><br><span class="line">  height: 5px;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb&#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track&#123;</span><br><span class="line">  background-color: #001529;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="html5-video在固定的宽度和高度内铺满"><a href="#html5-video在固定的宽度和高度内铺满" class="headerlink" title="html5 video在固定的宽度和高度内铺满"></a>html5 video在固定的宽度和高度内铺满</h5><p>一般是视频的缩略图或者视频需要铺满我们固定的区域。<br>video ： poster是缩略图</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">video</span>&#123;</span><br><span class="line">    <span class="attribute">object-fit</span>:fill;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.weixin.qq.com/community/develop/doc/0004403ab0c158af9f0adf1bd5b800">https://developers.weixin.qq.com/community/develop/doc/0004403ab0c158af9f0adf1bd5b800</a></p>
<p><a href="https://bbs.csdn.net/topics/392450329">https://bbs.csdn.net/topics/392450329</a></p>
<p><a href="https://blog.csdn.net/sepier/article/details/112780701">https://blog.csdn.net/sepier/article/details/112780701</a></p>
<h5 id="隐藏video的全屏按钮"><a href="#隐藏video的全屏按钮" class="headerlink" title="隐藏video的全屏按钮"></a>隐藏video的全屏按钮</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">video::-webkit-media-controls-fullscreen-button &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度"><a href="#video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度" class="headerlink" title="video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度"></a>video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度</h5><h4 id="Chrome下面查看placeholder的样式"><a href="#Chrome下面查看placeholder的样式" class="headerlink" title="Chrome下面查看placeholder的样式"></a><a href="https://blog.csdn.net/weixin_30657999/article/details/95180171">Chrome下面查看placeholder的样式</a></h4><p>F12——&gt;Settings——&gt;Preferences——&gt;Element——&gt;Show user agent shadow DOM（将这个勾选上）</p>
<h4 id="浏览器默认滚动条默认样式"><a href="#浏览器默认滚动条默认样式" class="headerlink" title="浏览器默认滚动条默认样式"></a>浏览器默认滚动条默认样式</h4><ol>
<li><p><strong>火狐和IE浏览器不可以修改浏览器滚动条默认样式</strong>，IE浏览器可以修改滚动条颜色，但不能修改宽度</p>
</li>
<li><p>谷歌和360浏览器修改默认样式代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /*滚动条样式*/</span><br><span class="line">::-webkit-scrollbar &#123;/*滚动条整体样式*/</span><br><span class="line">  width: 2px;     /*高宽分别对应横竖滚动条的尺寸*/</span><br><span class="line">  height: 2px;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;/*滚动条里面小方块*/</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  box-shadow: inset 0 0 5px rgba(0,0,0,0.2);</span><br><span class="line">  background: rgba(0,0,0,0.2);</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;/*滚动条里面轨道*/</span><br><span class="line">  box-shadow: inset 0 0 5px rgba(0,0,0,0);</span><br><span class="line">  border-radius: 0;</span><br><span class="line">  background: rgba(0,0,0,0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果只修改某个盒子的滚动条：</span><br><span class="line">.box-name::-webkit-scrollbar&#123;&#125;</span><br><span class="line">.box-name::-webkit-scrollbar-thumb&#123;&#125;</span><br><span class="line">.box-name::-webkit-scrollbar-track&#123;&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="获取已知元素的前一个元素"><a href="#获取已知元素的前一个元素" class="headerlink" title="获取已知元素的前一个元素"></a>获取已知元素的前一个元素</h4><p>css不能实现，使用js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;已知元素&quot;).prev(&quot;需要获取的元素&quot;)</span><br><span class="line">$(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="获取已知元素的后一个元素，使用"><a href="#获取已知元素的后一个元素，使用" class="headerlink" title="获取已知元素的后一个元素，使用 +"></a>获取已知元素的后一个元素，使用 +</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#certify .swiper-slide.swiper-slide-next + .swiper-slide&#123;</span><br><span class="line">    transform: translateX(-986px) scale(0.6) !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="safari浏览器下-input-select-表单的阴影"><a href="#safari浏览器下-input-select-表单的阴影" class="headerlink" title="safari浏览器下 input/select 表单的阴影"></a>safari浏览器下 input/select 表单的阴影</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">	-webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line">加上这个，单选/复选框按钮会不显示</span><br><span class="line">select&#123;</span><br><span class="line">	-webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iPhone-Safari浏览器字体放大-——解决方法"><a href="#iPhone-Safari浏览器字体放大-——解决方法" class="headerlink" title="iPhone Safari浏览器字体放大 ——解决方法"></a>iPhone Safari浏览器字体放大 ——解决方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-size-adjust: 100%;</span><br><span class="line">-webkit-text-size-adjust: 100%;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css1.png" alt="iPhone Safari浏览器字体放大"></p>
<h3 id="去除Safari浏览器下复选框和下拉框默认样式"><a href="#去除Safari浏览器下复选框和下拉框默认样式" class="headerlink" title="去除Safari浏览器下复选框和下拉框默认样式"></a>去除Safari浏览器下复选框和下拉框默认样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select&#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）"><a href="#表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）" class="headerlink" title="表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）"></a>表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）</h3><h5 id="需要在td里面加上span等标签来限制宽度和溢出隐藏"><a href="#需要在td里面加上span等标签来限制宽度和溢出隐藏" class="headerlink" title="需要在td里面加上span等标签来限制宽度和溢出隐藏"></a>需要在td里面加上span等标签来限制宽度和溢出隐藏</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table&#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: 30%;</span><br><span class="line">    border: 1px solid #666;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-collapse:collapse;</span><br><span class="line">&#125;</span><br><span class="line">th&#123;</span><br><span class="line">    height:40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">td&#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">tr&#123;</span><br><span class="line">    border-bottom: 1px solid #666;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td span &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width:160px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">td span:hover &#123;</span><br><span class="line">    white-space: inherit;</span><br><span class="line">    text-overflow: inherit;</span><br><span class="line">    overflow: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;简介&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;羊羊羊&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;25&lt;/td&gt;</span><br><span class="line">        &lt;td &gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                79942 79942 79942 79942 79942 79942 79942 79942 79942 79942 79942 79942</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<h5 id="溢出隐藏："><a href="#溢出隐藏：" class="headerlink" title="溢出隐藏："></a>溢出隐藏：</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css2.png" alt="溢出隐藏"></p>
<h5 id="鼠标上移，换行显示全部内容："><a href="#鼠标上移，换行显示全部内容：" class="headerlink" title="鼠标上移，换行显示全部内容："></a>鼠标上移，换行显示全部内容：</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css3.png" alt="鼠标上移，换行显示全部内容"></p>
<h3 id="css3超出宽度自动换行以及超出宽度显示…"><a href="#css3超出宽度自动换行以及超出宽度显示…" class="headerlink" title="css3超出宽度自动换行以及超出宽度显示…"></a>css3超出宽度自动换行以及超出宽度显示…</h3><h4 id="css3超出宽度自动换行，并且首行缩进2字符"><a href="#css3超出宽度自动换行，并且首行缩进2字符" class="headerlink" title="css3超出宽度自动换行，并且首行缩进2字符"></a>css3超出宽度自动换行，并且首行缩进2字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">    word-break: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单行超出宽度显示…"><a href="#单行超出宽度显示…" class="headerlink" title="单行超出宽度显示…"></a>单行超出宽度显示…</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行"><a href="#多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行" class="headerlink" title="多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行"></a>多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: 2;  //控制显示几行</span><br><span class="line">    -webkit-box-orient: vertical;   //webbox方向</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CSS3强制英文、中文换行与不换行-强制英文换行"><a href="#CSS3强制英文、中文换行与不换行-强制英文换行" class="headerlink" title="CSS3强制英文、中文换行与不换行 强制英文换行"></a>CSS3强制英文、中文换行与不换行 强制英文换行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. word-break:break-all;只对英文起作用，以字母作为换行依据</span><br><span class="line">2. word-wrap:break-word; 只对英文起作用，以单词作为换行依据</span><br><span class="line">3. white-space:pre-wrap; 只对中文起作用，强制换行</span><br><span class="line">4. white-space:nowrap; 强制不换行，都起作用 </span><br><span class="line">5. white-space:nowrap; overflow:hidden; text-overflow:ellipsis;不换行，超出部分隐藏且以省略号形式出现（部分浏览器支持）</span><br></pre></td></tr></table></figure>

<h4 id="input输入框禁止显示历史记录"><a href="#input输入框禁止显示历史记录" class="headerlink" title="input输入框禁止显示历史记录"></a>input输入框禁止显示历史记录</h4><p>在输入input时会提示原来输入过的内容，还会出现下拉的历史记录，禁止这种情况(关闭自动提示)，只需在input中加入：<br>autocomplete=”off”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;  autocomplete=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>如果所有表单元素都不想使用自动提示功能，只需在表单form上设置autocomplete=off：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form autocomplete=&quot;off&quot;&gt; </span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/amao_aguai/article/details/83344455">参考博客</a></p>
<h4 id="【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景"><a href="#【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景" class="headerlink" title="【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景"></a>【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景</h4><p>1、使用Chrome的都知道，当鼠标焦点在input\textarea这些元素上时，Chrome默认的会给它们加上黄色的边框。 可以使用下面的css代码去掉所有元素的边框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*:focus&#123;outline:none;&#125;</span><br></pre></td></tr></table></figure>

<p>2、Chrome默认用户可以控制textarea的大小，在CSS中加入下面一句就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea &#123;resize:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览器记住密码的情况下，解决密码输入框自动填充密码框（input-type-”password”-的问题）"><a href="#浏览器记住密码的情况下，解决密码输入框自动填充密码框（input-type-”password”-的问题）" class="headerlink" title="浏览器记住密码的情况下，解决密码输入框自动填充密码框（input type=”password” 的问题）"></a>浏览器记住密码的情况下，解决密码输入框自动填充密码框（input type=”password” 的问题）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名：&lt;input type=&#x27;text&#x27; autocomplete=&#x27;off&#x27;&gt;</span><br><span class="line">密码：&lt;input type=&#x27;password&#x27; autocomplete=&quot;new-password&quot; style=&quot;background-color: #fff!important;&quot; readonly onfocus=&quot;this.removeAttribute(&#x27;readonly&#x27;);&quot; onblur=&quot;this.setAttribute(&#x27;readonly&#x27;,true);&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="解决html页面英文和数字不自动换行，但中文就可以自动换行"><a href="#解决html页面英文和数字不自动换行，但中文就可以自动换行" class="headerlink" title="解决html页面英文和数字不自动换行，但中文就可以自动换行"></a>解决html页面英文和数字不自动换行，但中文就可以自动换行</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/huanhang.png" alt="处理换行"></p>
<h6 id="解决方法：添加css属性word-break-break-all"><a href="#解决方法：添加css属性word-break-break-all" class="headerlink" title="解决方法：添加css属性word-break: break-all;"></a>解决方法：添加css属性word-break: break-all;</h6><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/huanhang2.png" alt="word-break: break-all"></p>
<h4 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>

<h4 id="溢出文字省略号显示"><a href="#溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.content&#123;</span><br><span class="line">    /* display:block; */</span><br><span class="line">    width:200px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：如果是表格元素，需要加上display:block;</p>
</blockquote>
<p>处理IE浏览器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function($) &#123; </span><br><span class="line">    $.fn.ellipsis = function(enableUpdating)&#123; </span><br><span class="line">        var s = document.documentElement.style; </span><br><span class="line">        if (!(&#x27;textOverflow&#x27; in s || &#x27;OTextOverflow&#x27; in s)) &#123; </span><br><span class="line">            return this.each(function()&#123; </span><br><span class="line">                var el = $(this); </span><br><span class="line">                if(el.css(&quot;overflow&quot;) == &quot;hidden&quot;)&#123; </span><br><span class="line">                    var originalText = el.html(); </span><br><span class="line">                    var w = el.width(); </span><br><span class="line"></span><br><span class="line">                  var t = $(this.cloneNode(true)).hide().css(&#123; </span><br><span class="line">                      &#x27;position&#x27;: &#x27;absolute&#x27;, </span><br><span class="line">                      &#x27;width&#x27;: &#x27;auto&#x27;, </span><br><span class="line">                      &#x27;overflow&#x27;: &#x27;visible&#x27;, </span><br><span class="line">                      &#x27;max-width&#x27;: &#x27;inherit&#x27; </span><br><span class="line">                  &#125;); </span><br><span class="line">                  el.after(t); </span><br><span class="line"></span><br><span class="line">                  var text = originalText; </span><br><span class="line">                  while(text.length &gt; 0 &amp;&amp; t.width() &gt; el.width())&#123; </span><br><span class="line">                         text = text.substr(0, text.length - 1); </span><br><span class="line">                         t.html(text + &quot;...&quot;); </span><br><span class="line">                     &#125; </span><br><span class="line">                     el.html(t.html()); </span><br><span class="line"></span><br><span class="line">                     t.remove(); </span><br><span class="line"></span><br><span class="line">                     if(enableUpdating == true)&#123; </span><br><span class="line">                         var oldW = el.width(); </span><br><span class="line">                         setInterval(function()&#123; </span><br><span class="line">                             if(el.width() != oldW)&#123; </span><br><span class="line">                                 oldW = el.width(); </span><br><span class="line">                                 el.html(originalText); </span><br><span class="line">                                 el.ellipsis(); </span><br><span class="line">                             &#125; </span><br><span class="line">                         &#125;, 200); </span><br><span class="line">                     &#125; </span><br><span class="line">                 &#125; </span><br><span class="line">             &#125;); </span><br><span class="line">         &#125; else return this; </span><br><span class="line">     &#125;; </span><br><span class="line"> &#125;)(jQuery);</span><br></pre></td></tr></table></figure>

<p>要调整placeholder属性的样式，如果在谷歌浏览器下审核不了placeholder</p>
<p>解决方法：</p>
<ol>
<li>F12，打开控制台</li>
<li>在控制台右上角，选择三个点（更多选项图标），选择“Settings”</li>
<li>将Show user agent shadow DOM勾选上</li>
</ol>
<h4 id="文本域-textarea-的提示文字-placeholder-换行显示"><a href="#文本域-textarea-的提示文字-placeholder-换行显示" class="headerlink" title="文本域(textarea)的提示文字(placeholder)换行显示"></a>文本域(textarea)的提示文字(placeholder)换行显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在需要换行的地方加上&amp;#13;&amp;#10;</span><br><span class="line"></span><br><span class="line">placeholder=&quot;请输入微信APP支付参数，便于技术查看，涉及字段如下：&amp;#13;&amp;#10;微信支付商户号：&amp;#13;&amp;#10;商户Key：&amp;#13;&amp;#10;微信AppID：&amp;#13;&amp;#10;AppSecret:&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改placeholder样式"><a href="#修改placeholder样式" class="headerlink" title="修改placeholder样式"></a>修改placeholder样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123; /* Chrome/Opera/Safari */ </span><br><span class="line">	color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder &#123; /* Firefox 19+ */  </span><br><span class="line">	color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123; /* IE 10+ */ </span><br><span class="line"> color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">:-moz-placeholder &#123; /* Firefox 18- */ </span><br><span class="line"> color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="textarea元素的placeholder属性不显示"><a href="#textarea元素的placeholder属性不显示" class="headerlink" title="textarea元素的placeholder属性不显示"></a>textarea元素的placeholder属性不显示</h4><blockquote>
<p>textarea的placeholder属性值不显示的原因可能是<code>&lt;textarea&gt;</code>与<code>&lt;/textarea&gt;</code>之间存在空格或者换行</p>
</blockquote>
<h4 id="placeholder兼容浏览器的解决方案"><a href="#placeholder兼容浏览器的解决方案" class="headerlink" title="placeholder兼容浏览器的解决方案"></a><a href="https://blog.csdn.net/xw505501936/article/details/52815876">placeholder兼容浏览器的解决方案</a></h4><blockquote>
<p>关于placeholder的使用，众所周知它是h5的新属性，所以IE9以下就别想用它了，不支持。 那么我们必须要低版本的浏览器，做一些降级处理的兼容，原理自然就是：提示语placeholder用其他方式替代显示咯。 以下是一小段兼容处理。 </p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;welcome to ixiewei world&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        body&#123;font:12px/1.5 &quot;\5FAE\8F6F\96C5\9ED1&quot;,&quot;\9ED1\4F53&quot;,Helvetica,Tahoma,arial,sans-serif; margin:0 auto; color:#333;&#125;</span><br><span class="line">        p,ul,ol,dl,dt,dd,h1,h2,h3,h4,h5,h6,form,input,select,button,textarea,iframe&#123;margin:0; padding:0;&#125;</span><br><span class="line">        .clearfix:after&#123;content:&quot;.&quot;;display:block;height:0;clear: both;visibility:hidden;&#125;</span><br><span class="line">        .clearfix&#123;*zoom:1;&#125;</span><br><span class="line">        .fl&#123; float:left;_display: inline&#125;</span><br><span class="line">        .pr&#123; position:relative&#125;</span><br><span class="line">        .abs&#123;position:absolute;&#125;</span><br><span class="line"> </span><br><span class="line">        /*placeholder字体颜色*/</span><br><span class="line">        ::-webkit-input-placeholder &#123; /* WebKit browsers */</span><br><span class="line">            color:    #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">        :-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */</span><br><span class="line">            color:    #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">        ::-moz-placeholder &#123; /* Mozilla Firefox 19+ */</span><br><span class="line">            color:    #ccc;opacity:1</span><br><span class="line">        &#125;</span><br><span class="line">        :-ms-input-placeholder &#123; /* Internet Explorer 10+ */</span><br><span class="line">            color:    #ccc !important;</span><br><span class="line">        &#125;</span><br><span class="line">        input:-webkit-autofill &#123; /* 谷歌浏览器-文本框边框阴影遮住了背景颜色浅黄*/</span><br><span class="line">            -webkit-box-shadow: 0 0 0 1000px #ffffff inset !important;</span><br><span class="line">        &#125;</span><br><span class="line">        .demod&#123;width:440px;height:auto;background:#ffffff;padding-top:35px;position:relative;font-family:microsoft yahei&#125;</span><br><span class="line">        .demod .demodin&#123;height:40px;margin:0 37px 20px;border:1px solid #d2d6e0&#125;</span><br><span class="line">        .demod .demodin .input_d&#123;height:30px;margin:5px 0 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d input&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#333;outline: none&#125;</span><br><span class="line">        .demod .demodin .input_d label&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#ccc;top:0;left:0;display:none&#125;</span><br><span class="line">        .demod&#123;width:440px;height:auto;background:#ffffff;position:relative;font-family:microsoft yahei&#125;</span><br><span class="line">        .demod .demodin&#123;height:40px;margin:0 37px 20px;border:1px solid #d2d6e0&#125;</span><br><span class="line">        .demod .demodin p&#123;height:16px;width:34px;border-right:1px solid #ddd;margin:13px 12px 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d&#123;height:30px;margin:5px 0 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d input&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#333;outline: none&#125;</span><br><span class="line">        .demod .demodin .input_d label&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#ccc;top:0;left:0;display:none&#125;</span><br><span class="line">        .demod .demodin .input_d_pwd input&#123;width:240px&#125;</span><br><span class="line">        .demod .demodin .see_pwd_btn&#123;display:block;top:10px;right:10px;cursor:pointer;height:22px&#125;</span><br><span class="line">        .demod .demodin .see_pwd_on&#123;color:#00AA00&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--demo示例--&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;demod&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d fl&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; placeholder=&quot;请输入手机号&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d fl pr&quot;&gt;</span><br><span class="line">                &lt;label class=&quot;abs&quot;&gt;&lt;/label&gt;</span><br><span class="line">                &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; autocomplete=&quot;new-password&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d input_d_pwd fl pr&quot;&gt;</span><br><span class="line">                &lt;label class=&quot;abs&quot;&gt;&lt;/label&gt;</span><br><span class="line">                &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码2&quot; autocomplete=&quot;new-password&quot; class=&quot;ch_reg_pwd&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;see_pwd_btn abs&quot;&gt;查看密码&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        //兼容不支持placeholder的浏览器[ie浏览器，并且10以下均采用替代方式处理]</span><br><span class="line">        if ((navigator.appName == &quot;Microsoft Internet Explorer&quot;) &amp;&amp; (document.documentMode &lt; 10 || document.documentMode == undefined)) &#123;</span><br><span class="line">            var $placeholder = $(&quot;input[placeholder]&quot;);</span><br><span class="line">            for (var i = 0; i &lt; $placeholder.length; i++) &#123;</span><br><span class="line">                if ($placeholder.eq(i).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    $placeholder.eq(i).siblings(&quot;label&quot;).text($placeholder.eq(i).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $placeholder.eq(i).val($placeholder.eq(i).attr(&quot;placeholder&quot;)).css(&#123;&quot;color&quot;: &quot;#ccc&quot;&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $placeholder.focus(function () &#123;</span><br><span class="line">                if ($(this).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    $(this).siblings(&quot;label&quot;).hide()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if ($(this).val() == $(this).attr(&quot;placeholder&quot;)) &#123;</span><br><span class="line">                        $(this).val(&quot;&quot;).css(&#123;&quot;color&quot;: &quot;#333&quot;&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).blur(function () &#123;</span><br><span class="line">                if ($(this).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                        $(this).siblings(&quot;label&quot;).text($(this).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                        $(this).val($(this).attr(&quot;placeholder&quot;)).css(&#123;&quot;color&quot;: &quot;#ccc&quot;&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&quot;.clone_input_text&quot;).live(&quot;focus&quot;, function () &#123;</span><br><span class="line">                $(this).siblings(&quot;label&quot;).hide()</span><br><span class="line">            &#125;).live(&quot;blur&quot;, function () &#123;</span><br><span class="line">                if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                    $(this).siblings(&quot;label&quot;).text($(this).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $placeholder.siblings(&quot;label&quot;).click(function () &#123;</span><br><span class="line">                if ($(this).parent(&quot;div&quot;).siblings(&quot;.see_pwd_btn&quot;).attr(&quot;data-flag&quot;) == &quot;1&quot;) &#123;</span><br><span class="line">                    $(this).hide().next(&quot;input&quot;).next(&quot;input&quot;).focus()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $(this).hide().next(&quot;input&quot;).focus()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        //可视密码</span><br><span class="line">        $(&quot;.see_pwd_btn&quot;).click(function() &#123;</span><br><span class="line">            var obj=$(this);</span><br><span class="line">            var ch_reg_pwd = $(&quot;.ch_reg_pwd&quot;);</span><br><span class="line">            if (obj.attr(&quot;data-flag&quot;) != 1) &#123;</span><br><span class="line">                var clone_input = &#x27;&lt;input type=&quot;text&quot; class=&quot;clone_input_text&quot; placeholder=&quot;&#x27;+ ch_reg_pwd.attr(&quot;placeholder&quot;) + &#x27;&quot; value=&quot;&#x27; + ch_reg_pwd.val() + &#x27;&quot;/&gt;&#x27;;</span><br><span class="line">                ch_reg_pwd.after(clone_input);</span><br><span class="line">                ch_reg_pwd.hide();</span><br><span class="line">                obj.addClass(&quot;see_pwd_on&quot;).attr(&quot;data-flag&quot;, 1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ch_reg_pwd.val($(&quot;.clone_input_text&quot;).val()).show();</span><br><span class="line">                $(&quot;.clone_input_text&quot;).remove();</span><br><span class="line">                obj.removeClass(&quot;see_pwd_on&quot;).attr(&quot;data-flag&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="HTML5-INPUT-placeholder及兼容性处理"><a href="#HTML5-INPUT-placeholder及兼容性处理" class="headerlink" title="HTML5 INPUT placeholder及兼容性处理"></a><a href="https://www.cnblogs.com/dachie/archive/2012/08/10/2632422.html">HTML5 INPUT placeholder及兼容性处理</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTML5对Web Form做了许多增强，比如input新增的type类型、Form Validation等。Placeholder是HTML5新增的另一个属性，当input或者textarea设置了该属性后，该值的内容将作为灰字提示显示在文本框中，当文本框获得焦点时，提示文字消失。以前要实现这效果都是用JavaScript来控制才能实现： </span><br><span class="line">请输入文字</span><br><span class="line">由于placeholder是个新增属性，目前只有少数浏览器支持，如何检测浏览器是否支持它呢？(更多HTML5/CSS3特性检测可以访问)</span><br><span class="line"></span><br><span class="line">function hasPlaceholderSupport() &#123;</span><br><span class="line">  return &#x27;placeholder&#x27; in document.createElement(&#x27;input&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">默认提示文字是灰色的，可以通过CSS来改变文字样式：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">/* all */</span><br><span class="line">::-webkit-input-placeholder &#123; color:#f00; &#125;</span><br><span class="line">input:-moz-placeholder &#123; color:#f00; &#125;</span><br><span class="line"> </span><br><span class="line">/* individual: webkit */</span><br><span class="line">#field2::-webkit-input-placeholder &#123; color:#00f; &#125;</span><br><span class="line">#field3::-webkit-input-placeholder &#123; color:#090; background:lightgreen; text-transform:uppercase; &#125;</span><br><span class="line">#field4::-webkit-input-placeholder &#123; font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; &#125;</span><br><span class="line"> </span><br><span class="line">/* individual: mozilla */</span><br><span class="line">#field2:-moz-placeholder &#123; color:#00f; &#125;</span><br><span class="line">#field3:-moz-placeholder &#123; color:#090; background:lightgreen; text-transform:uppercase; &#125;</span><br><span class="line">#field4:-moz-placeholder &#123; font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">兼容其他不支持placeholder的浏览器：</span><br><span class="line"></span><br><span class="line">var PlaceHolder = &#123;</span><br><span class="line">    _support: (function() &#123;</span><br><span class="line">        return &#x27;placeholder&#x27; in document.createElement(&#x27;input&#x27;);</span><br><span class="line">    &#125;)(),</span><br><span class="line"></span><br><span class="line">    //提示文字的样式，需要在页面中其他位置定义</span><br><span class="line">    className: &#x27;abc&#x27;,</span><br><span class="line"></span><br><span class="line">    init: function() &#123;</span><br><span class="line">        if (!PlaceHolder._support) &#123;</span><br><span class="line">            //未对textarea处理，需要的自己加上</span><br><span class="line">            var inputs = document.getElementsByTagName(&#x27;input&#x27;);</span><br><span class="line">            PlaceHolder.create(inputs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    create: function(inputs) &#123;</span><br><span class="line">        var input;</span><br><span class="line">        if (!inputs.length) &#123;</span><br><span class="line">            inputs = [inputs];</span><br><span class="line">        &#125;</span><br><span class="line">        for (var i = 0, length = inputs.length; i &lt;length; i++) &#123;</span><br><span class="line">            input = inputs[i];</span><br><span class="line">            if (!PlaceHolder._support &amp;&amp; input.attributes &amp;&amp; input.attributes.placeholder) &#123;</span><br><span class="line">                PlaceHolder._setValue(input);</span><br><span class="line">                input.addEventListener(&#x27;focus&#x27;, function(e) &#123;</span><br><span class="line">                    if (this.value === this.attributes.placeholder.nodeValue) &#123;</span><br><span class="line">                        this.value = &#x27;&#x27;;</span><br><span class="line">                        this.className = &#x27;&#x27;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, false);</span><br><span class="line">                input.addEventListener(&#x27;blur&#x27;, function(e) &#123;</span><br><span class="line">                    if (this.value === &#x27;&#x27;) &#123;</span><br><span class="line">                        PlaceHolder._setValue(this);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _setValue: function(input) &#123;</span><br><span class="line">        input.value = input.attributes.placeholder.nodeValue;</span><br><span class="line">        input.className = PlaceHolder.className;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//页面初始化时对所有input做初始化</span><br><span class="line">//PlaceHolder.init();</span><br><span class="line">//或者单独设置某个元素</span><br><span class="line">//PlaceHolder.create(document.getElementById(&#x27;t1&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="关于input标签和placeholder在IE8，9下的兼容问题"><a href="#关于input标签和placeholder在IE8，9下的兼容问题" class="headerlink" title="关于input标签和placeholder在IE8，9下的兼容问题"></a><a href="https://www.cnblogs.com/2010master/p/6194291.html">关于input标签和placeholder在IE8，9下的兼容问题</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一、input常用在表单的输入，包括text，password，H5后又新增了许多type属性值，如url, email, member等等，考虑到非现代浏览器的兼容性问题，这些新的type常用在移动端的项目中。</span><br><span class="line"></span><br><span class="line">二、IE10+浏览器下，input标签会有一个默认的样式，比如文本框的‘×’号，密码框的小眼睛。初衷是好的，有时候很方便，但有时候我们会自己设置样式和功能。可以用伪元素方法去除： </span><br><span class="line"></span><br><span class="line">::-ms-clear, ::-ms-reveal&#123;display: none;&#125;</span><br><span class="line"> </span><br><span class="line">三、在低版本的IE下，input中的文字位置会改变（偏上显示），解决方法：（思路： 设置input的高度=行高）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">    height: 60px;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">四、实际中，我们会在input的前面用label标签或其他，提示input的内容信息。在IE下，在获得焦点、失去焦点时，label标签里的文字会出现抖动问题。解决方法：（设置input的显示方式为行内块）</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  display: inline-block;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">五、##placeholder是H5的一个新属性，但是在IE9以下是不支持的，为此我们会封装一个函数进行能力检测。　</span><br><span class="line">参考地址：http://www.studyofnet.com/news/1022.html</span><br><span class="line">###以下是代码部分：</span><br><span class="line"></span><br><span class="line"> 1 $(function() &#123;</span><br><span class="line"> 2     // 如果不支持placeholder，用jQuery来完成</span><br><span class="line"> 3     if(!isSupportPlaceholder()) &#123;</span><br><span class="line"> 4         // 遍历所有input对象, 除了密码框</span><br><span class="line"> 5         $(&#x27;input&#x27;).not(&quot;input[type=&#x27;password&#x27;]&quot;).each(</span><br><span class="line"> 6             function() &#123;</span><br><span class="line"> 7                 var self = $(this);</span><br><span class="line"> 8                 var val = self.attr(&quot;placeholder&quot;);</span><br><span class="line"> 9                 input(self, val);</span><br><span class="line">10             &#125;</span><br><span class="line">11         );</span><br><span class="line">12 </span><br><span class="line">13         /**</span><br><span class="line">14          *  对password框的特殊处理</span><br><span class="line">15          * 1.创建一个text框 </span><br><span class="line">16          * 2.获取焦点和失去焦点的时候切换</span><br><span class="line">17          */</span><br><span class="line">18         $(&#x27;input[type=&quot;password&quot;]&#x27;).each(</span><br><span class="line">19             function() &#123;</span><br><span class="line">20                 var pwdField    = $(this);</span><br><span class="line">21                 var pwdVal      = pwdField.attr(&#x27;placeholder&#x27;);</span><br><span class="line">22                 var pwdId       = pwdField.attr(&#x27;id&#x27;);</span><br><span class="line">23                 // 重命名该input的id为原id后跟1</span><br><span class="line">24                 pwdField.after(&#x27;&lt;input id=&quot;&#x27; + pwdId +&#x27;1&quot; type=&quot;text&quot; value=&#x27;+pwdVal+&#x27; autocomplete=&quot;off&quot; /&gt;&#x27;);</span><br><span class="line">25                 var pwdPlaceholder = $(&#x27;#&#x27; + pwdId + &#x27;1&#x27;);</span><br><span class="line">26                 pwdPlaceholder.show();</span><br><span class="line">27                 pwdField.hide();</span><br><span class="line">28 </span><br><span class="line">29                 pwdPlaceholder.focus(function()&#123;</span><br><span class="line">30                     pwdPlaceholder.hide();</span><br><span class="line">31                     pwdField.show();</span><br><span class="line">32                     pwdField.focus();</span><br><span class="line">33                 &#125;);</span><br><span class="line">34 </span><br><span class="line">35                 pwdField.blur(function()&#123;</span><br><span class="line">36                     if(pwdField.val() == &#x27;&#x27;) &#123;</span><br><span class="line">37                         pwdPlaceholder.show();</span><br><span class="line">38                         pwdField.hide();</span><br><span class="line">39                     &#125;</span><br><span class="line">40                 &#125;);</span><br><span class="line">41             &#125;</span><br><span class="line">42         );</span><br><span class="line">43     &#125;</span><br><span class="line">44 &#125;);</span><br><span class="line">45 </span><br><span class="line">46 // 判断浏览器是否支持placeholder属性</span><br><span class="line">47 function isSupportPlaceholder() &#123;</span><br><span class="line">48     var input = document.createElement(&#x27;input&#x27;);</span><br><span class="line">49     return &#x27;placeholder&#x27; in input;</span><br><span class="line">50 &#125;</span><br><span class="line">51 </span><br><span class="line">52 // jQuery替换placeholder的处理</span><br><span class="line">53 function input(obj, val) &#123;</span><br><span class="line">54     var $input = obj;</span><br><span class="line">55     var val = val;</span><br><span class="line">56     $input.attr(&#123;value:val&#125;);</span><br><span class="line">57     $input.focus(function() &#123;</span><br><span class="line">58         if ($input.val() == val) &#123;</span><br><span class="line">59             $(this).attr(&#123;value:&quot;&quot;&#125;);</span><br><span class="line">60         &#125;</span><br><span class="line">61     &#125;).blur(function() &#123;</span><br><span class="line">62         if ($input.val() == &quot;&quot;) &#123;</span><br><span class="line">63             $(this).attr(&#123;value:val&#125;);</span><br><span class="line">64         &#125;</span><br><span class="line">65     &#125;);</span><br><span class="line">66 &#125;</span><br></pre></td></tr></table></figure>

<h4 id="头部和底部固定定位，中间内容区滚动展示"><a href="#头部和底部固定定位，中间内容区滚动展示" class="headerlink" title="头部和底部固定定位，中间内容区滚动展示"></a>头部和底部固定定位，中间内容区滚动展示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;header class=&quot;head&quot;&gt;顶部固定区域&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">&lt;article  class=&quot;main&quot; id=&quot;wrapper&quot;&gt;  </span><br><span class="line">&lt;/article&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer class=&quot;foot&quot;&gt;底部固定区域&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.head,.foot&#123;position:fixed;left:0;height:38px;line-height:38px;width:100%;background-color:#999;&#125;</span><br><span class="line"></span><br><span class="line">.head&#123;top:0;&#125;</span><br><span class="line"></span><br><span class="line">.foot&#123;bottom:0;&#125;</span><br><span class="line"></span><br><span class="line">.main&#123;position:fixed;top:38px;bottom:38px;width:100%;overflow:scroll;background-color:#f2f2f2;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="出现浮层时，禁止页面滚动"><a href="#出现浮层时，禁止页面滚动" class="headerlink" title="出现浮层时，禁止页面滚动"></a>出现浮层时，禁止页面滚动</h4><p>当浮层出现的时候∶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;htm1&#x27;).addc1ass(&quot;noscro1l&#x27;);</span><br></pre></td></tr></table></figure>

<p>当浮层隐藏的时候︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;htm1&#x27;).removec1ass(&quot;noscro1l&#x27;);</span><br></pre></td></tr></table></figure>

<p>可以让一部分浏览器的窗体不能滚动，但不包括Safari等浏览器，怎么办呢?</p>
<p>我们可以在浮层<code>touchmove</code>的时候，阻止默认事件达到避免滚动的问题，例如︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;aside&#x27;).on(&#x27;touchmove&#x27;, function(event)&#123;</span><br><span class="line">	event.preventDefault();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这种处理兼容性强，效果最好，但是有一个问题，就是如果浮层自己也有滚动，那么这种处理会让浮层里面自己的滚动行为也无法触发，因此，我们的处理要更进一步，如下:</p>
<ol>
<li>当手指<code>touchstart</code>的元素不是滚动容器同时不失容器的子元素的时候，阻止默认行为;</li>
<li>如果手指<code>touchstart</code>的元素是滚动容器或者容器子元素的时候，不阻止默认行为，但不包括滚动到容器边缘的时候。</li>
</ol>
<p>根据上述原理，我自己抽象了一个简单的方法，方法名和语法如下，完整代码见这里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.smartscro11(container, selectorscro11able);</span><br></pre></td></tr></table></figure>



<h4 id="选择倒数第n个元素"><a href="#选择倒数第n个元素" class="headerlink" title="选择倒数第n个元素"></a>选择倒数第n个元素</h4><p>css3    :nth-last-child()选择器</p>
<p>规定属于其父元素的第二个子元素的每个p元素，从最后一个子元素开始计数∶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p:nth-last-child(2) &#123;</span><br><span class="line">	background: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Chrome提示框（弹窗）字体模糊"><a href="#Chrome提示框（弹窗）字体模糊" class="headerlink" title="Chrome提示框（弹窗）字体模糊"></a>Chrome提示框（弹窗）字体模糊</h4><p>白己写的一个很简单的提示框弹窗，firefox , Safari , ie都清晰，但是chrome就惑觉很模糊</p>
<p>导致模糊的原因：在提示框样式中使用了transform、z-index样式有可能导致这个问题</p>
<blockquote>
<p>例如： transform: translate(-50%, -50%); //让提示框垂直居中和水平居中</p>
<p>解决办法：弹窗提示框不使用transform来做垂直居中水平居中。</p>
<p>1，如果弹窗是大小固定的，可以使用：left:50%;top:50%; margin-left:-（弹窗宽度/2）px; margin-top:-（弹窗高度/2）px;</p>
<p>2，如果弹窗大小不固定；可以使用js获取弹窗高度和高度，然后按照1方法中的方式，让盒子居中</p>
</blockquote>
<h4 id="取消a标签在移动端点击时的蓝色"><a href="#取消a标签在移动端点击时的蓝色" class="headerlink" title="取消a标签在移动端点击时的蓝色:"></a>取消a标签在移动端点击时的蓝色:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: rgba(255,255,255, 0);</span><br><span class="line">-webkit-user-select: none;</span><br><span class="line">-moz-user-focus: none;</span><br><span class="line">-moz-user-select: none;</span><br></pre></td></tr></table></figure>

<h4 id="使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰"><a href="#使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰" class="headerlink" title="使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰"></a>使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,a:hover,a:active,a:visited,a:link,a:focus&#123;</span><br><span class="line">	-webkit-tap-highlight-color:rgba(0,0,0,0);</span><br><span class="line">	-webkit-tap-highlight-color: transparent;</span><br><span class="line">	outline:none;</span><br><span class="line">	background: none;</span><br><span class="line">	text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变选中内容的背景颜色"><a href="#改变选中内容的背景颜色" class="headerlink" title="改变选中内容的背景颜色"></a>改变选中内容的背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">	background: #FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">	background: #FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">)</span><br><span class="line">::-webkit-selection &#123;</span><br><span class="line">	background:#FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="input-消除自动记忆功能-关闭浏览器自动填充输入框"><a href="#input-消除自动记忆功能-关闭浏览器自动填充输入框" class="headerlink" title="input 消除自动记忆功能 关闭浏览器自动填充输入框"></a>input 消除自动记忆功能 关闭浏览器自动填充输入框</h4><p>input 的autocomplete属性默认是on：其含义代表是否让浏览器自动记录之前输入的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocomplete=&quot;off&quot;</span><br></pre></td></tr></table></figure>

<h4 id="去除ios-input框点击时的灰色背景︰"><a href="#去除ios-input框点击时的灰色背景︰" class="headerlink" title="去除ios input框点击时的灰色背景︰"></a>去除ios input框点击时的灰色背景︰</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color:rgba(0,0,0,0);</span><br></pre></td></tr></table></figure>

<h4 id="区分标准模式下ie6-ie9和Firefox-Chrome的hack："><a href="#区分标准模式下ie6-ie9和Firefox-Chrome的hack：" class="headerlink" title="区分标准模式下ie6~ie9和Firefox/Chrome的hack："></a>区分标准模式下ie6~ie9和Firefox/Chrome的hack：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color:orange;       //all - for Firefox/Chrome</span><br><span class="line">background-color:red\0;        //ie 8/9/10/Opera - for ie8/ie10/Opera</span><br><span class="line">background-color:blue\9\0;     //ie 9/10 - for ie9/10</span><br><span class="line">*background-color:black;       //ie 6/7 -for ie7</span><br><span class="line">_background-color:green;      //ie6 - for ie6</span><br><span class="line"></span><br><span class="line">IE6显示为：绿色，</span><br><span class="line">IE7显示为：黑色，</span><br><span class="line">IE8显示为：红色，</span><br><span class="line">IE9显示为：蓝色，</span><br><span class="line">Firefox/Chrome显示为：橘色</span><br><span class="line">（本例IE10效果同IE9，Opera最新版效果同IE8）</span><br></pre></td></tr></table></figure>

<h4 id="自定义滚动条样式，兼容IE浏览器"><a href="#自定义滚动条样式，兼容IE浏览器" class="headerlink" title="自定义滚动条样式，兼容IE浏览器"></a>自定义滚动条样式，兼容IE浏览器</h4><h5 id="Chrome浏览器滚动条自定义样式修改"><a href="#Chrome浏览器滚动条自定义样式修改" class="headerlink" title="Chrome浏览器滚动条自定义样式修改"></a>Chrome浏览器滚动条自定义样式修改</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  /*滚动条滑块按钮的颜色*/</span><br><span class="line">  scrollbar-face-color: #134187;</span><br><span class="line">  /*滚动条整体颜色*/</span><br><span class="line">  scrollbar-highlight-color: #134187;</span><br><span class="line">  /*滚动条轨道颜色*/</span><br><span class="line">  scrollbar-track-color: #011433;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条整体部分,必须要设置*/</span><br><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  background-color: #011433;</span><br><span class="line">  width:10px;</span><br><span class="line">  height:10px;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条的轨道*/</span><br><span class="line">::-webkit-scrollbar-track&#123;</span><br><span class="line">  background-color: #011433;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条的滑块按钮*/</span><br><span class="line">::-webkit-scrollbar-thumb&#123;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background-color: #134087;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="IE浏览器滚动条自定义样式修改"><a href="#IE浏览器滚动条自定义样式修改" class="headerlink" title="IE浏览器滚动条自定义样式修改"></a>IE浏览器滚动条自定义样式修改</h5><p>在写样式之前，我们看一下IE浏览器滚动条样式设置位置参考图：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%85%BC%E5%AE%B9IE%E6%B5%8F%E8%A7%88%E5%99%A8/ie-scrollar.png" alt="IE浏览器滚动条样式设置位置参考图"></p>
<table>
<thead>
<tr>
<th>滚动条样式</th>
<th>支持情况</th>
<th>支持浏览器版本</th>
<th>可否继承</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>scrollbar-3dlight-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头左上边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-highlight-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头左上边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-face-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框和滚动条箭头的颜色</td>
</tr>
<tr>
<td>scrollbar-arrow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置i滚动条箭头的颜色</td>
</tr>
<tr>
<td>scrollbar-shadow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头右下边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-dark-shadow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条槽的颜色</td>
</tr>
<tr>
<td>scrollbar-base-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条主要构成部分的颜色</td>
</tr>
<tr>
<td>scrollbar-track-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条轨迹组成部分的颜色</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//IE下滚动条样式</span><br><span class="line">HTML &#123;</span><br><span class="line">  scrollbar-base-color: #134087;</span><br><span class="line">  //scrollbar-base-color: #134087;</span><br><span class="line">  scrollbar-3dlight-color:#134087;</span><br><span class="line">  scrollbar-highlight-color: #134087;</span><br><span class="line">  scrollbar-track-color: #011433;</span><br><span class="line">  scrollbar-arrow-color: #011433;</span><br><span class="line">  scrollbar-shadow-color:#011433;</span><br><span class="line">  //scrollbar-dark-shadow-color: #011433;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>摘抄自：<a href="https://blog.csdn.net/qq_36727756/article/details/92795170">https://blog.csdn.net/qq_36727756/article/details/92795170</a></p>
<h4 id="下划线css偏移量"><a href="#下划线css偏移量" class="headerlink" title="下划线css偏移量"></a>下划线css偏移量</h4><p><a href="https://www.cnblogs.com/yeminglong/p/5481645.html">用CSS下划线距离</a></p>
<p>代码一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">    text-decoration: none; </span><br><span class="line">    background: url(underline.gif) repeat-x 100% 100%;</span><br><span class="line">    padding-bottom: 4px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123; </span><br><span class="line">	text-decoration: none;</span><br><span class="line">	padding:0 0 6 0;</span><br><span class="line">	border-bottom-color:0;</span><br><span class="line">	border-bottom-width:1px;</span><br><span class="line">	border-bottom-style:solid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&#123;  </span><br><span class="line">    text-decoration:none; </span><br><span class="line">    border-bottom:1px solid #ccc; /* #ccc换成链接的颜色 */</span><br><span class="line">    display: inline-block; </span><br><span class="line">    padding-bottom:10px;  /*这里设置你要空的距离*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="解决IE阴影兼容性"><a href="#解决IE阴影兼容性" class="headerlink" title="解决IE阴影兼容性"></a>解决IE阴影兼容性</h4><p><a href="https://www.cnblogs.com/viewcozy/p/4828122.html">ie-css3.htc</a>       <a href="http://css3pie.com/about/">CSS3PIe</a></p>
<h4 id="IE样式的兼容写法"><a href="#IE样式的兼容写法" class="headerlink" title="IE样式的兼容写法"></a>IE样式的兼容写法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.example&#123;</span><br><span class="line">    color:#fff;//FF,OP,IE8</span><br><span class="line">    *color:#ff0;//IE7</span><br><span class="line">    _color:#f00;//IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元素在盒子中水平居中-垂直居中"><a href="#元素在盒子中水平居中-垂直居中" class="headerlink" title="元素在盒子中水平居中+垂直居中"></a>元素在盒子中水平居中+垂直居中</h4><p><a href="https://blog.csdn.net/qq_27576607/article/details/78697812">参考文章</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: flex;//flex布局</span><br><span class="line">justify-content: center;//使子项目水平居中</span><br><span class="line">align-items: center;//使子项目垂直居中</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/namechenfl/article/details/83029189">参考教程</a></p>
<h4 id="KindEditor在移动端默认显示源码模式"><a href="#KindEditor在移动端默认显示源码模式" class="headerlink" title="KindEditor在移动端默认显示源码模式"></a>KindEditor在移动端默认显示源码模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var editor;</span><br><span class="line">KindEditor.ready(function(K) &#123;</span><br><span class="line">	editor = K.create(&#x27;textarea[name=&quot;content&quot;]&#x27;, &#123;</span><br><span class="line">		resizeType : 1,</span><br><span class="line">		allowPreviewEmoticons : false,</span><br><span class="line">		allowImageUpload : false,</span><br><span class="line">		items : [</span><br><span class="line">			&#x27;source&#x27;, &#x27;fontsize&#x27;, &#x27;|&#x27;, &#x27;forecolor&#x27;, &#x27;hilitecolor&#x27;, &#x27;bold&#x27;, &#x27;italic&#x27;, &#x27;underline&#x27;,</span><br><span class="line">			&#x27;removeformat&#x27;, &#x27;|&#x27;, &#x27;justifyleft&#x27;, &#x27;justifycenter&#x27;, &#x27;justifyright&#x27;, &#x27;insertorderedlist&#x27;,</span><br><span class="line">			&#x27;insertunorderedlist&#x27;, &#x27;|&#x27;, &#x27;link&#x27;]</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // 安卓手机兼容性处理(KindEditor在移动端默认显示源码模式)</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    var isAndroid = u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Adr&#x27;) &gt; -1;</span><br><span class="line">    if(isAndroid) &#123;</span><br><span class="line">        $(&quot;.ke-outline[data-name=&#x27;source&#x27;]&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但如果想要对IE8单独定义样式，可以这样：<br>html*~body .example{这里是针对IE8识别的样式}</p>
<p>针对IE9的CSS只需在相应CSS代码加入只有IE9识别的 \9\0。具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.div&#123; background-color:#0f0\9\0;/* ie9 */ &#125;</span><br></pre></td></tr></table></figure>

<p>其他浏览器写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color:#f00;/*all*/</span><br><span class="line">background-color:#0ff\0;/* ie 8/9 */</span><br><span class="line">background-color:#0f0\9\0;/* ie9 */</span><br><span class="line">*background-color:#00f;/*ie7*/</span><br><span class="line">_background-color:#ff0;/*ie6*/</span><br><span class="line">background-color//:#090;/*非IE*/</span><br><span class="line">background-color:#900\9;/*所有ie*/</span><br></pre></td></tr></table></figure>

<p>怎么规定CSS的属性仅在IE下生效？在非IE浏览器下不生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--[if IE]&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.test&#123;color:red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>

<p>css中判断<a href="https://www.baidu.com/s?wd=IE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IE</a>版本的语句</p>
<h4 id="Koala设置scss编译后的输出路径"><a href="#Koala设置scss编译后的输出路径" class="headerlink" title="Koala设置scss编译后的输出路径"></a>Koala设置scss编译后的输出路径</h4><h4 id="IE兼容性处理"><a href="#IE兼容性处理" class="headerlink" title="IE兼容性处理"></a>IE兼容性处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--[if !IE]&gt; 除IE外都可识别 &lt;!--&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 5.0]&gt; 只有IE5.0可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 5]&gt; 仅IE5.0与IE5.5可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gt IE 5.0]&gt; IE5.0以及IE5.0以上版本都可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>

<h4 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea[name=&#x27;test&#x27;]::-webkit-input-placeholder::after &#123;</span><br><span class="line">    display:block;</span><br><span class="line">    content:&quot;Line 2\A Line 3&quot;;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textarea[name=&#x27;test&#x27;]::-webkit-input-placeholder::before &#123;</span><br><span class="line">    color:#666;</span><br><span class="line">    content:&quot;Line 1\A Line 2\A Line 3\A&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中发布文章</title>
    <url>/2018/08/02/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h4 id="1、新建一篇文章"><a href="#1、新建一篇文章" class="headerlink" title="1、新建一篇文章"></a>1、新建一篇文章</h4><p>（1）在<code>hexo</code>博客目录下，进入<code>Git Bash</code>命令窗口中，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;在这里&quot;</span></span><br></pre></td></tr></table></figure>
<p>（2）在博客目录下的<code>/source/_posts/</code> 文件夹下，可以看到已经生成了标题为(<code>在这里.md</code>)的博客文件：<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai.png" alt="生成的博客文件"><br>（3）在（<code>在这里.md</code>)文件中编辑自己的博客文章即可。<br>注意：<code>Hexo</code> 发布的文章是 <code>Markdown</code> 格式的文件， Markdown 基本语法的网址：<a href="http://www.markdown.cn/">点这里前往</a>  </p>
<h4 id="2、给文章添加分类和标签"><a href="#2、给文章添加分类和标签" class="headerlink" title="2、给文章添加分类和标签"></a>2、给文章添加分类和标签</h4><p>(1) 在（<code>在这里.md</code>）文件中设置<code>tags</code>和<code>categories</code>属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 在这里</span><br><span class="line"><span class="built_in">date</span>: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           //多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-edit.png" alt="博客文章-基本设置"></p>
<h4 id="3、启动服务器，本地测试"><a href="#3、启动服务器，本地测试" class="headerlink" title="3、启动服务器，本地测试"></a>3、启动服务器，本地测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-page.png" alt="查看博客文章"></p>
<h4 id="4、添加“阅读全文”按钮"><a href="#4、添加“阅读全文”按钮" class="headerlink" title="4、添加“阅读全文”按钮"></a>4、添加“阅读全文”按钮</h4><p>方法一：在文章任意你想添加的位置添加<code>&lt;!--more--&gt;</code>即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;        </span><br></pre></td></tr></table></figure>
<p>例如：<br><code>在这里.md</code>里面的内容是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 在这里</span><br><span class="line"><span class="built_in">date</span>: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br><span class="line">---</span><br><span class="line">javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">后面的内容在首页不显示，只显示到&lt;!--more--&gt;这里</span><br></pre></td></tr></table></figure>
<p>在页面中显示的效果是：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-more.png" alt="阅读全文按钮-更多"><br>方法二：设置首页文章以摘要形式显示，打开主题配置文件，找到<code>auto_excerpt</code>进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>其中<code>length</code>代表显示摘要的截取字符长度。<br>注：这两种方法，在博客首页显示的效果不一样，根据自己的需要，选择自己喜欢的方法</p>
<h4 id="5、在博文中添加图片"><a href="#5、在博文中添加图片" class="headerlink" title="5、在博文中添加图片"></a>5、在博文中添加图片</h4><p>方法一：<br>(1)在<code>hexo</code>目录下，安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>(2)在<code>hexo\source</code> 目录下新建一个<code>img</code>文件夹，把图片放置在里面；<br>(3)在<code>xxx.md</code>文件中引用图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![header]( img/header.jpg)</span><br></pre></td></tr></table></figure>
<p>方法二：<br>(1)在全局配置文件<code>（hexo/_config.yml)</code>中将<code>post_asset_folder</code>设置为<code>true</code>；<br>(2)创建文章（在创建的时候，会在<code>hexo/source/_post</code>目录下，生成一个<code>XXX.md</code>文件和一个<code>XXX</code>的文件夹）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;XXX&quot;</span></span><br></pre></td></tr></table></figure>
<p>(3)把<code>XXX</code>这个博文需要展示的图片放在<code>XXX</code>文件夹目录下；<br>(4)在<code>XXX.md</code>文件中引入图片的方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、发布到Github上"><a href="#6、发布到Github上" class="headerlink" title="6、发布到Github上"></a>6、发布到Github上</h4><p>（1）发表的文章在本地预览无误后，在 <code>Git Bash</code> 命令窗口执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>（2）在浏览器，访问自己的博客域名，即可看到刚 发布的文章</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue项目中使用sass的配置方法</title>
    <url>/2020/03/19/%E5%9C%A8Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8sass%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="1、安装sass的依赖包"><a href="#1、安装sass的依赖包" class="headerlink" title="1、安装sass的依赖包"></a>1、安装sass的依赖包</h4><p>sass-loader依赖于node-sass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev </span><br></pre></td></tr></table></figure>
<h4 id="2、在build文件夹下的webpack-base-conf-js的rules里面添加配置"><a href="#2、在build文件夹下的webpack-base-conf-js的rules里面添加配置" class="headerlink" title="2、在build文件夹下的webpack.base.conf.js的rules里面添加配置"></a>2、在build文件夹下的webpack.base.conf.js的rules里面添加配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> test: /\.sass$/,</span><br><span class="line"> loaders: [&#x27;style&#x27;, &#x27;css&#x27;, &#x27;scss&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		...</span><br><span class="line">		&#123;</span><br><span class="line">			test: /\.scss$/,</span><br><span class="line">			loaders:[&#x27;style&#x27;,&#x27;css&#x27;,&#x27;sass&#x27;]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、在APP-vue中修改style标签"><a href="#3、在APP-vue中修改style标签" class="headerlink" title="3、在APP.vue中修改style标签"></a>3、在APP.vue中修改style标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">   $blue:red;</span><br><span class="line">    .common-header&#123;</span><br><span class="line">        color: $blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4、运行项目"><a href="#4、运行项目" class="headerlink" title="4、运行项目"></a>4、运行项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>如有以下报错，是版本的问题影响的：</p>
<p>Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</p>
<p><strong>解决方法</strong>： 选择更低版本的sass-loader</p>
<p><strong>卸载当前版本</strong>：npm uninstall sass-loader<br><strong>安装指定版本</strong>：npm install <a href="mailto:&#115;&#97;&#115;&#x73;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#55;&#x2e;&#51;&#46;&#x31;">&#115;&#97;&#115;&#x73;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#55;&#x2e;&#51;&#46;&#x31;</a> –save-dev</p>
<p>参考： <a href="https://blog.csdn.net/ze1024/article/details/100516650">安装node-sass运行报错</a></p>
]]></content>
      <categories>
        <category>前端开发框架</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔和wordpress搭建个人博客</title>
    <url>/2022/08/04/%E5%AE%9D%E5%A1%94%E5%92%8Cwordpress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="使用宝塔和wordpress搭建个人博客"><a href="#使用宝塔和wordpress搭建个人博客" class="headerlink" title="使用宝塔和wordpress搭建个人博客"></a>使用宝塔和wordpress搭建个人博客</h2><h3 id="1-宝塔的安装"><a href="#1-宝塔的安装" class="headerlink" title="1.宝塔的安装"></a>1.宝塔的安装</h3><h4 id="1-1安装方式"><a href="#1-1安装方式" class="headerlink" title="1.1安装方式"></a>1.1安装方式</h4><ol>
<li><a href="https://www.code-nav.cn/">编程导航</a> 搜”宝塔“</li>
<li>选择”<strong>Linux面板</strong>“（<a href="https://www.bt.cn/new/download.html">选择安装</a> ）</li>
<li>选“安装脚本”</li>
<li>复制 “<strong>Centos安装脚本</strong>” 的代码</li>
<li>粘贴命令，直接安装【在git上登录服务器，切换到opt目录（cd /opt）】</li>
<li>把面板地址和用户名密码记住</li>
</ol>
<h4 id="1-2-8888端口不可以访问-要做以下两个配置"><a href="#1-2-8888端口不可以访问-要做以下两个配置" class="headerlink" title="1.2 8888端口不可以访问-要做以下两个配置"></a>1.2 8888端口不可以访问-要做以下两个配置</h4><ol>
<li><h5 id="在腾讯云控制台，配置安全组"><a href="#在腾讯云控制台，配置安全组" class="headerlink" title="在腾讯云控制台，配置安全组"></a>在腾讯云控制台，配置安全组</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image.png" alt="配置安全组"></p>
</li>
<li><h5 id="在腾讯云控制台，配置防火墙"><a href="#在腾讯云控制台，配置防火墙" class="headerlink" title="在腾讯云控制台，配置防火墙"></a>在腾讯云控制台，配置防火墙</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image2.png" alt="配置防火墙"></p>
</li>
</ol>
<h3 id="2-登录面板地址后"><a href="#2-登录面板地址后" class="headerlink" title="2.登录面板地址后"></a>2.登录面板地址后</h3><h4 id="2-1注册宝塔账号"><a href="#2-1注册宝塔账号" class="headerlink" title="2.1注册宝塔账号"></a>2.1注册宝塔账号</h4><h4 id="2-2安装推荐套件（使用默认推荐即可）"><a href="#2-2安装推荐套件（使用默认推荐即可）" class="headerlink" title="2.2安装推荐套件（使用默认推荐即可）"></a>2.2安装推荐套件（使用默认推荐即可）</h4><p><code>备注：安装LNMP(推荐)</code></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image3.png" alt="配置防火墙"></p>
<h3 id="3-网站-添加站点"><a href="#3-网站-添加站点" class="headerlink" title="3.网站-添加站点"></a>3.网站-添加站点</h3><h3 id="4-WordPress安装"><a href="#4-WordPress安装" class="headerlink" title="4. WordPress安装"></a>4. WordPress安装</h3><p><code>备注：1.先把刚建的站点删除，以免冲突； </code></p>
<p>4.1<a href="https://wordpress.org/download/">wordpress官网</a>下载安装包（ .tar.gz格式的）</p>
<p>4.2将 .tar.gz文件上传到站点根目录</p>
<p>4.3鼠标放上 .tar.gz文件，选择“解压”</p>
<p>4.4进入解压后的文件夹，将里面的文件全部复制到站点根目录</p>
<p>4.5安装包和解压后的文件夹可以删掉了</p>
<p><a href="https://blog.csdn.net/qq_33468857/article/details/124652515">宝塔wordpress安装及使用（宝塔wordpress建站教程）</a></p>
<p><a href="https://blog.csdn.net/JunyouYH/article/details/123448276">宝塔面板安装wordpress详细教程</a></p>
<h4 id="添加子域名"><a href="#添加子域名" class="headerlink" title="添加子域名"></a>添加子域名</h4><p>在阿里云-控制台-域名解析-解析设置，添加记录值</p>
<p><code>注：需要等10分钟，才生效</code></p>
<h4 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a><a href="https://vuepress.vuejs.org/zh/">VuePress</a></h4><p><a href="https://github.com/vuejs/vuepress/tree/master/packages/%40vuepress/core">极简静态网站生成器</a></p>
<p>可以直接 云开发</p>
<p><a href="https://github.com/Tencent/cloudbase-framework?site=vuepress#%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B">https://github.com/Tencent/cloudbase-framework?site=vuepress#%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B</a></p>
]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>富文本编辑器</title>
    <url>/2021/08/22/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p><a href="https://codepen.io/winney07/pen/bGQeLMv">Quill -&gt; Markdown (codepen.io)</a></p>
<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a><code>Vue</code></h4><p><a href="https://codepen.io/kabanoki/pen/aboZgXd">vue-quill-editor (codepen.io)</a></p>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p><a href="https://codepen.io/alexkrolick/pen/gmroPj">React-Quill Custom HTML Toolbar (codepen.io)</a></p>
<p><a href="https://codepen.io/dnus/pen/OojaeN">Real-time collaboration in Quill.js (codepen.io)</a></p>
<p><a href="https://codepen.io/liuwave/pen/wvBwqod">Quill Playground (codepen.io)</a></p>
<h4 id="TinyMCE"><a href="#TinyMCE" class="headerlink" title="TinyMCE"></a>TinyMCE</h4><p><a href="https://juejin.cn/post/7054319287627939877">「富文本」从 Quill 到 TinyMCE，我爱过恨过，也哭过笑过…</a>    </p>
<h4 id="Quill"><a href="#Quill" class="headerlink" title="Quill"></a>Quill</h4><p><a href="https://www.kancloud.cn/liuwave/quill/1434140">quill中文文档</a></p>
<p><a href="https://quilljs.com/docs/modules/toolbar/">官网</a></p>
<p><a href="https://www.npmjs.com/package/vue-quill-editor">vue-quill-editor</a></p>
]]></content>
      <categories>
        <category>WEB前端</category>
      </categories>
      <tags>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>将Hexo博客主题更换为NexT主题</title>
    <url>/2018/08/01/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>1、<a href="https://gitforwindows.org/">下载NexT主题</a>，下载解压后，将该文件夹命名为next，把这个文件夹放置到博客目录的themes 文件夹下，如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/next.png" alt="将主题的文件夹命名为next"><br>想了解更多，可以查看NexT 主题使用文档： <a href="http://theme-next.iissnan.com/">官方使用文档 </a> </p>
<p>2、修改主配置文件_<code>config.yml</code>（<code>hexo</code>目录下的<code>_config.yml</code>文件)，将<code>theme</code>属性修改为<code>next</code>，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions 扩展</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>3、在博客目录，右键点击<code>Git Bash</code>，进入命令窗口，输入下面的命令，本地预览博客，如果发现<code>Hexo</code>博客的主题已经变成了<code>NexT</code>主题，说明你已经成功更换主题了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>4、打开主题配置文件 <code>_config.yml</code><br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/next-config.png" alt="打开主题配置文件 _config.yml"><br>5、在主题配置文件 <code>_config.yml</code>中将<code>scheme</code>设置为 <code>Pisces</code>（<code>Hexo</code>默认样式是<code>Muse</code>，根据你自己的喜好选择你想要设置的样式，这里以<code>Pisces</code>为例)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>6、在主题配置文件 <code>_config.yml</code>中配置博客网站底部的基本信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  since: 2018      <span class="comment">#网站起始运营年份</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  icon: user     <span class="comment">#声明图标</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  copyright: winney07   <span class="comment">#版权所有</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  powered: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">false</span>    <span class="comment">#是否显示主题</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    version: <span class="literal">false</span>     <span class="comment">#是否显示驱动</span></span><br></pre></td></tr></table></figure>
<p> 7、在主题配置文件 <code>_config.yml</code>中配置菜单按钮，找到<code>menu</code>属性，做以下配置：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: / || home     <span class="comment">#首页，后面的表示图标</span></span><br><span class="line"> categories: /categories/ || th   <span class="comment">#分类</span></span><br><span class="line"> tags: /tags/ || tags       <span class="comment">#标签</span></span><br><span class="line"> archives: /archives/ || archive     <span class="comment">#归档</span></span><br><span class="line"> about: /about/ || user       <span class="comment">#关于</span></span><br><span class="line"> <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"> <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"> <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><br>8、创建相应的页面<br>（1）执行命令<code>hexo s</code>，本地预览我们的博客页面，会发现，点击分类、标签、关于这几个页面的时候，会显示<code>404</code>。<br>（2）在<code>Git Bash</code>命令窗口，输入以下命令来创建相应页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">hexo new page <span class="string">&#x27;tags&#x27;</span></span><br><span class="line">hexo new page <span class="string">&#x27;about&#x27;</span></span><br></pre></td></tr></table></figure>
<p>（3）可以在<code>hexo/source</code>目录下看到创建的3个文件夹<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/source.png" alt="在hexo/source目录下看到创建的3个文件夹"><br>9、每一个分类菜单都生成了一个 <code>index.md</code> 初始文件（在刚创建的文件夹目录下)，默认包含了 <code>title</code> 和 <code>date</code> 字段，我们需要给每一 <code>index.md</code> 文件添加上 <code>type</code> 字段<br>如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:28:33</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:28:54</span><br><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:29:13</span><br><span class="line"><span class="built_in">type</span>: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>10、配置搜索菜单：<br>（1）安装 <code>hexo-generator-searchdb</code> ，在 <code>Git Bash</code> 命令窗口，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>（2）打开全局配置文件<code>（hexo/_config.yml）</code>，新增以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>（3）打开主题配置文件<code>（hexo/themes/next/_config.yml）</code>，找到 <code>local_search</code> 属性，开启本地搜索功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>
<p>11、执行命令<code>hexo s</code>，本地预览我们的博客页面，发现刚才的配置已经完成<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/winney-blog.png" alt="预览本地博客页面"><br>12、在命令窗口，输入以下命令，将修改后的本地<code>hexo</code>项目托管到<code>GitHub</code>上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>13、上传成功后，可以通过自己的博客域名访问修改主题和修改相关配置后的博客页面</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/2020/05/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装依赖包：</span><br><span class="line">cnpm i</span><br><span class="line"></span><br><span class="line">运行项目：</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">打包：</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure>

<h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><p>快速格式化JSON格式</p>
<blockquote>
<p>JSON 格式要求每个对象的属性与值之间用逗号分隔，但是在对象的最后一个属性后面不能有逗号，否则会导致语法错误</p>
</blockquote>
<ol>
<li>Visual Studio Code 编辑器安装“Prettier”扩展。</li>
<li>打开 JSON 文件并将其粘贴到编辑器中。</li>
<li>按下 Shift+Alt+F（在 Windows 和 Linux 上）或 Shift+Option+F（在 macOS 上）来格式化文件。</li>
</ol>
<p><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></p>
<p><a href="http://gitref.justjavac.com/">Git 参考手册</a></p>
<h3 id="Git提交代码到Github"><a href="#Git提交代码到Github" class="headerlink" title="Git提交代码到Github"></a>Git提交代码到Github</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释内容&quot;</span><br><span class="line">git pull </span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure>

<h4 id="git查看仓库代码"><a href="#git查看仓库代码" class="headerlink" title="git查看仓库代码"></a>git查看仓库代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h4 id="删除远程地址"><a href="#删除远程地址" class="headerlink" title="删除远程地址"></a><a href="https://www.cnblogs.com/stronger-xsw/p/12991139.html">删除远程地址</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<h4 id="添加新地址"><a href="#添加新地址" class="headerlink" title="添加新地址"></a>添加新地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure>

<h4 id="更新package-json依赖到最新版本"><a href="#更新package-json依赖到最新版本" class="headerlink" title="更新package.json依赖到最新版本"></a>更新package.json依赖到最新版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line"></span><br><span class="line">ncu -u</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>npm 可改为cnpm</p>
</blockquote>
<h4 id="git-add-添加错文件-撤销"><a href="#git-add-添加错文件-撤销" class="headerlink" title="git add 添加错文件 撤销"></a>git add 添加错文件 撤销</h4><p><strong>git add 添加 多余文件</strong><br>这样的错误是由于， 有的时候 可能</p>
<p>git add . （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件</p>
<p>git add 如果添加了错误的文件的话</p>
<p>撤销操作</p>
<p>git status 先看一下add 中的文件<br>git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了<br>git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</p>
<h4 id="查看Node-js版本"><a href="#查看Node-js版本" class="headerlink" title="查看Node.js版本"></a>查看Node.js版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h4 id="Giteet特技"><a href="#Giteet特技" class="headerlink" title="Giteet特技"></a>Giteet特技</h4><ol>
<li> 使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li>
<li> Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li>
<li> 你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li>
<li> <a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li>
<li> Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li>
<li> Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li>
</ol>
<h3 id="Hexo指令"><a href="#Hexo指令" class="headerlink" title="Hexo指令"></a><a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s (运行)</span><br><span class="line">hexo new &quot;aaa&quot; (新增)</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d (发布)   // 在git bash中</span><br></pre></td></tr></table></figure>

<h5 id="启动个人博客"><a href="#启动个人博客" class="headerlink" title="启动个人博客"></a>启动个人博客</h5><ol>
<li>在根目录，鼠标右键，选择“Git Bash Here”</li>
<li>启动服务：hexo s</li>
</ol>
<p>重装系统后，要重新安装以下两个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="JsonServer"><a href="#JsonServer" class="headerlink" title="JsonServer"></a><a href="https://www.npmjs.com/package/json-server">JsonServer</a></h2><ol>
<li>安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g json-server</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建db目录，新建json文件</li>
</ol>
<blockquote>
<p>把db.json文件当作数据库文件，可以对它进行增删改查，执行方法，会直接改变这个json文件里面的内容</p>
</blockquote>
<ol start="3">
<li>开启服务(在 db.json文件所在目录中)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json-server --watch db.json --port 5000</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:5000/posts</span><br></pre></td></tr></table></figure>



<h3 id="快速生成目录结构"><a href="#快速生成目录结构" class="headerlink" title="快速生成目录结构"></a>快速生成目录结构</h3><p><a href="https://blog.csdn.net/qq_43538596/article/details/111089188">参考博客</a></p>
<h4 id="一、进入需要生成目录的文件夹"><a href="#一、进入需要生成目录的文件夹" class="headerlink" title="一、进入需要生成目录的文件夹"></a>一、进入需要生成目录的文件夹</h4><h5 id="Window系统下"><a href="#Window系统下" class="headerlink" title="Window系统下"></a>Window系统下</h5><p>1、打开windows命令窗口（或windows+R，输入cmd，enter）</p>
<p>2、使用cd命令进入到指定目录</p>
<h5 id="linux系统下"><a href="#linux系统下" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>1、打开命令窗口，cd进入指定目录</p>
<h4 id="二、使用tree命令"><a href="#二、使用tree命令" class="headerlink" title="二、使用tree命令"></a>二、使用tree命令</h4><p><a href="http://t.zoukankan.com/JayeHe-p-7058341.html">windows和linux打印树状目录结构</a></p>
<h5 id="Window系统下-1"><a href="#Window系统下-1" class="headerlink" title="Window系统下"></a>Window系统下</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree /f</span><br></pre></td></tr></table></figure>

<h5 id="linux系统下-1"><a href="#linux系统下-1" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>这里的n表示数字，指你要展示的最深层级，如n为2时表示深度为2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L n</span><br></pre></td></tr></table></figure>

<p>这里已经完成了我们所需要的功能，如果你还想进一步把目录结构存进文件里方便查看，那么可以采用输出<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&spm=1001.2101.3001.7020">重定向</a>的方式将tree命令的输出结果输出到指定文件下，如我要<strong>将tree命令结果输出到一个名为result.txt文件下</strong>：</p>
<h5 id="Window系统下-2"><a href="#Window系统下-2" class="headerlink" title="Window系统下"></a>Window系统下</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree /f &gt; result.txt</span><br></pre></td></tr></table></figure>

<h5 id="linux系统下-2"><a href="#linux系统下-2" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>深度为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L 2 &gt; result.txt</span><br></pre></td></tr></table></figure>

<p>清空终端控制台的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure>

<h4 id="win10-输入法-繁简-切换"><a href="#win10-输入法-繁简-切换" class="headerlink" title="win10 输入法 繁简 切换"></a><a href="https://m.uc23.net/jiaocheng/51690.html">win10 输入法 繁简 切换</a></h4><p>方法一：</p>
<p>1、在微软输入法的情况下，直接按下【Ctrl + Shift + F】即可在简体和繁体之间互相切换。</p>
<h4 id="快速打开命令窗口"><a href="#快速打开命令窗口" class="headerlink" title="快速打开命令窗口"></a>快速打开命令窗口</h4><p>在文件路径地址栏，输入”cmd“或”powershell”可以打开命令窗口</p>
<p><a href="https://www.jianshu.com/p/bf8348abe52f">FinalShell</a> </p>
<h4 id="使用import方式引入json文件"><a href="#使用import方式引入json文件" class="headerlink" title="使用import方式引入json文件"></a>使用import方式引入json文件</h4><p><code>data.json</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1004,</span><br><span class="line">    &quot;name&quot;: &quot;ers&quot;,</span><br><span class="line">    &quot;age&quot;: 28</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import config from &#x27;./data.json&#x27;;</span><br><span class="line">console.log(&#x27;config&#x27;)</span><br><span class="line">console.log(config)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：在使用webpack打包的项目中</p>
</blockquote>
<p><a href="https://m.imooc.com/wenda/detail/601583">如何在ecmascript 6中导入json文件？</a>——参考这个的</p>
<p><a href="https://segmentfault.com/q/1010000042241121/a-1020000042241372">node执行中，import引用json文件失败？</a></p>
<blockquote>
<p>网友：不幸的是，ES6 / ES2015不支持通过模块导入语法加载JSON。但是 …有很多方法可以做到。根据您的需求，您可以研究如何在JavaScript中读取文件（window.FileReader如果正在浏览器中运行，则可以选择），也可以使用其他问题中所述的其他加载程序（假设您正在使用NodeJS）。IMO最简单的方法可能是将JSON作为JS对象放入ES6模块并导出。这样，您就可以将其导入所需的位置。同样值得注意的是，如果您使用的是Webpack，则默认情况下（因为webpack &gt;= v2.0.0），JSON文件的导入将起作用。import config from ‘../config.json’;</p>
</blockquote>
<h4 id="json文件中写注释"><a href="#json文件中写注释" class="headerlink" title="json文件中写注释"></a>json文件中写注释</h4><p><a href="https://blog.csdn.net/kalman2019/article/details/128214814">可以在 JSON 中使用注释吗？</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2125187">JSON文件内容加注释的几种方法「建议收藏」</a></p>
<p><a href="https://www.somode.com/softjc/25022.html">json怎么注释</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1621234385422475208&wfr=spider&for=pc">JSON文件加注释的7种方法</a></p>
<p><a href="https://xinzhi.wenda.so.com/a/1667121412207558">json文件怎么注释</a></p>
<p><a href="https://www.cnblogs.com/WikiChen/p/17054762.html">【VS Code】 解决JSON文件注释提示Comments are not permitted in JSON.</a></p>
<h4 id="简体繁体之间转换的快捷键"><a href="#简体繁体之间转换的快捷键" class="headerlink" title="简体繁体之间转换的快捷键"></a>简体繁体之间转换的快捷键</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+Shift+F</span><br></pre></td></tr></table></figure>

<p>Format Selection</p>
<p>按下Shift + alt +f</p>
<h4 id="修改文件夹的修改日期"><a href="#修改文件夹的修改日期" class="headerlink" title="修改文件夹的修改日期"></a>修改文件夹的修改日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ItemProperty -Path &quot;F:\test\txt&quot; -Name LastWriteTime -Value &quot;2021-03-22 11:14:00&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&quot;F:\test\txt&quot; </code>：文件夹名称，<code>注意：要使用管理员身份运行PowerShell</code></p>
</blockquote>
<h4 id="修改文件夹的创建日期"><a href="#修改文件夹的创建日期" class="headerlink" title="修改文件夹的创建日期"></a>修改文件夹的创建日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Get-Item &quot;F:\test\txt&quot;).CreationTime = &quot;2022-08-23 10:34:00&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2021/08/22/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://www.w3cschool.cn/regexp/m2ez1pqk.html">常用正则表达式大全_w3cschool</a></p>
<p><a href="https://c.runoob.com/front-end/854/"> 正则表达式在线测试</a></p>
<p><a href="https://c.runoob.com/front-end/854/">正则表达式示例</a></p>
<p><a href="https://tool.chinaz.com/Tools/regexgenerate">常用正则表达式</a></p>
<p><a href="https://tool.chinaz.com/regex">正则测试</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/note1.png" alt="正则表达式-思维导图"></p>
<h4 id="最全的常用正则表达式大全-校验数字-字符-号码等"><a href="#最全的常用正则表达式大全-校验数字-字符-号码等" class="headerlink" title="最全的常用正则表达式大全(校验数字,字符,号码等)"></a><a href="https://www.cnblogs.com/yoyowin/p/12208917.html">最全的常用正则表达式大全(校验数字,字符,号码等)</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reg = /^[\u4e00-\u9fffa-zA-Z]&#123;1,15&#125;$/;</span><br><span class="line">if(!reg.test(value)) &#123;</span><br><span class="line">  callback(new Error(&#x27;请输入15个以内的字符&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大于0的所有数，小数点后保留两位小数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^0\.([1-9]|\d[1-9])$|^[1-9]\d&#123;0,8&#125;\.\d&#123;0,2&#125;$|^[1-9]\d&#123;0,8&#125;$/</span><br></pre></td></tr></table></figure>

<p>正整数(不包括0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^\+?[1-9][0-9]*$/</span><br></pre></td></tr></table></figure>

<p>正整数(包括0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^\d+$/</span><br></pre></td></tr></table></figure>

<p>大于0的整数—使用这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d*$/      // 表示所有大于等于1的整数(整数第一位不为0，后面的随意)</span><br></pre></td></tr></table></figure>

<h4 id="用户名、密码等15个常用的js正则表达式"><a href="#用户名、密码等15个常用的js正则表达式" class="headerlink" title="用户名、密码等15个常用的js正则表达式"></a><a href="https://blog.csdn.net/qq_41465646/article/details/108105076">用户名、密码等15个常用的js正则表达式</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用户名正则，4到16位（字母，数字，下划线，减号）  </span><br><span class="line">var uPattern = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/;  </span><br><span class="line">//输出 true  </span><br><span class="line">console.log(uPattern.test(&quot;iFat3&quot;)); </span><br><span class="line">if(!/^[A-Za-z0-9@*_-\u4E00-\u9FA5]&#123;1,20&#125;$/.test(params.name)) &#123;</span><br><span class="line">    layer.msg(&#x27;姓名请输入20位字符以内的中英文或数字或@*_-&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>date（日期格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(\d&#123;4&#125;)[-\/](\d&#123;1&#125;|0\d&#123;1&#125;|1[0-2])([-\/](\d&#123;1&#125;|0\d&#123;1&#125;|[1-2][0-9]|3[0-1]))*$/</span><br></pre></td></tr></table></figure>

<p>email（邮箱格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span><br></pre></td></tr></table></figure>

<p>identity（请输入正确的身份证号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(x|X|\d)$)/</span><br></pre></td></tr></table></figure>

<p>phone（请输入正确的手机号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^1\d&#123;10&#125;$/</span><br></pre></td></tr></table></figure>

<p>required（必填项不能为空）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/[\S]+/</span><br></pre></td></tr></table></figure>

<p>url（链接格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/(^#)|(^http(s*):\/\/[^\s]+\.[^\s]+)/</span><br></pre></td></tr></table></figure>

<p>请输入数字/小数点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>最多只能输入两位小数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>判断是否为数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(Number(money))</span><br></pre></td></tr></table></figure>

<p>只能输入百分比正则（数字+%）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>判断是否是非数字值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN()</span><br><span class="line"></span><br><span class="line">例如：isNaN(Number(money))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。</p>
</blockquote>
<p>正浮点数正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(\d+)(\.\d+)?$/.test()</span><br><span class="line"></span><br><span class="line">例如：/^(\d+)(\.\d+)?$/.test(money)</span><br></pre></td></tr></table></figure>

<p>url正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&amp;=]*)?$/</span><br><span class="line"></span><br><span class="line">/^((ht|f)tps?):\/\/[\w\-]+(\.[\w\-]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?$/</span><br></pre></td></tr></table></figure>

<p>0-100的正整数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:0|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>

<p>数字/小大写字母/（30个字以内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9]&#123;1,30&#125;$/</span><br></pre></td></tr></table></figure>

<p>只能输入汉字（30个字以内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[\u4e00-\u9fa5]&#123;1,30&#125;$/</span><br></pre></td></tr></table></figure>

<p>2-6位汉字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[\u4E00-\u9FA5]&#123;2,6&#125;$/</span><br></pre></td></tr></table></figure>

<p>不能输入汉字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[^\u4e00-\u9fa5]&#123;0,&#125;$/</span><br><span class="line">中文字符：[\u4e00-\u9fa5]</span><br><span class="line">双字节字符：[^\x00-\xff]</span><br><span class="line">空白行：\s</span><br><span class="line">Email地址：\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]&#123;2,14&#125;</span><br><span class="line">网址URL：^((https|http|ftp|rtsp|mms)?:\/\/)[^\s]+</span><br><span class="line">手机（国内）：0?(13|14|15|17|18|19)[0-9]&#123;9&#125;</span><br><span class="line">电话号码（国内）：[0-9-()（）]&#123;7,18&#125;</span><br><span class="line">负浮点数：-([1-9]\d*.\d*|0.\d*[1-9]\d*)</span><br><span class="line">匹配整数：-?[1-9]\d*</span><br><span class="line">正浮点数：[1-9]\d*.\d*|0.\d*[1-9]\d*</span><br><span class="line">腾讯QQ号：[1-9]([0-9]&#123;5,11&#125;)</span><br><span class="line">邮政编码：\d&#123;6&#125;</span><br><span class="line">IP：(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)</span><br><span class="line">身份证号：\d&#123;17&#125;[\d|x]|\d&#123;15&#125;</span><br><span class="line">格式日期：\d&#123;4&#125;(\-|\/|.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;</span><br><span class="line">正整数：[1-9]\d*</span><br><span class="line">负整数：-[1-9]\d*</span><br><span class="line">用户名：[A-Za-z0-9_\-\u4e00-\u9fa5]+</span><br></pre></td></tr></table></figure>

<p>JavaScript代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var pattern = /[\u4e00-\u9fa5]/,</span><br><span class="line">	str = &#x27;&#x27;;</span><br><span class="line">console.log(pattern.test(str));</span><br></pre></td></tr></table></figure>

<p>用户名—3-12位字符（大小写字母或数字）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9_]&#123;3,12&#125;$/</span><br></pre></td></tr></table></figure>

<p>用户密码—6-16位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9!@#$%^&amp;*()&lt;&gt;,.?-_+=`~]&#123;6,16&#125;$/</span><br></pre></td></tr></table></figure>

<p>昵称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z\u4e00-\u9fa5]&#123;1,10&#125;$/</span><br></pre></td></tr></table></figure>

<p>身份证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;5&#125;(19|20)\d&#123;2&#125;[01]\d[0123]\d\d&#123;3&#125;[xX\d]$/</span><br></pre></td></tr></table></figure>

<p>身份证号码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/</span><br></pre></td></tr></table></figure>

<p>匹配0到100之间的正整数的正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:0|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>

<p>匹配1到100之间的正整数的正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:1|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>

<p>QQ</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;4,10&#125;$/</span><br></pre></td></tr></table></figure>

<p>手机号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(13[0-9]|14[57]|15[0-9]|18[0-9])\d&#123;8&#125;$/</span><br></pre></td></tr></table></figure>

<p>邮件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^\w+([+-.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span><br></pre></td></tr></table></figure>

<p>电话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^0\d&#123;2,3&#125;-\d&#123;7,8&#125;$/</span><br></pre></td></tr></table></figure>

<p>name/姓名/用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[\u4e00-\u9fa5]&#123;2,&#125;$/</span><br></pre></td></tr></table></figure>

<p>密码强度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inp1.onkeyup = function () &#123;</span><br><span class="line">    var level = 0;</span><br><span class="line">    if (/[a-z]/.test(this.value)) &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[0-9]/.test(this.value)) &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[^a-z0-9]/.test(this.value)) &#123;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.value.length &lt; 6) &#123;</span><br><span class="line">        level = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (level &gt; 3) &#123;</span><br><span class="line">        level = 3;</span><br><span class="line">    &#125;</span><br><span class="line">    strength.innerHTML = array[level];</span><br><span class="line">    strengthLevel.className = &#x27;strengthLv&#x27; + level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="regular-config-js"><a href="#regular-config-js" class="headerlink" title="regular.config.js"></a><code>regular.config.js</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const regExpConfig = &#123;</span><br><span class="line">IDcard: /^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/, // 身份证</span><br><span class="line">mobile: /^1([3|4|5|7|8|])\d&#123;9&#125;$/, // 手机号码</span><br><span class="line">telephone: /^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;$/, // 固定电话</span><br><span class="line">num: /^[0-9]*$/, // 数字</span><br><span class="line">phoneNo: /(^1([3|4|5|7|8|])\d&#123;9&#125;$)|(^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;$)/, // 电话或者手机</span><br><span class="line">policeNo: /^[0-9A-Za-z]&#123;4,10&#125;$/, // 账号4-10位数字或字母组成</span><br><span class="line">pwd: /^[0-9A-Za-z]&#123;6,16&#125;$/, // 密码由6-16位数字或者字母组成</span><br><span class="line">isNumAlpha: /^[0-9A-Za-z]*$/, // 字母或数字</span><br><span class="line">isAlpha: /^[a-zA-Z]*$/, // 是否字母</span><br><span class="line">isNumAlphaCn: /^[0-9a-zA-Z\u4E00-\uFA29]*$/, // 是否数字或字母或汉字</span><br><span class="line">isPostCode: /^[\d-]*$/i, // 是否邮编</span><br><span class="line">isNumAlphaUline: /^[0-9a-zA-Z_]*$/, // 是否数字、字母或下划线</span><br><span class="line">isNumAndThanZero: /^([1-9]\d*(\.\d+)?|0)$/, // 是否为整数且大于0/^[1-9]\d*(\.\d+)?$/</span><br><span class="line">isNormalEncode: /^(\w||[\u4e00-\u9fa5])&#123;0,&#125;$/, // 是否为非特殊字符（包括数字字母下划线中文）</span><br><span class="line">isTableName: /^[a-zA-Z][A-Za-z0-9#$_-]&#123;0,29&#125;$/, // 表名</span><br><span class="line">isInt: /^-?\d+$/, // 整数</span><br><span class="line">isTableOtherName: /^[\u4e00-\u9fa5]&#123;0,20&#125;$/, // 别名</span><br><span class="line">// isText_30: /^(\W|\w&#123;1,2&#125;)&#123;0,15&#125;$/, // 正则</span><br><span class="line">// isText_20: /^(\W|\w&#123;1,2&#125;)&#123;0,10&#125;$/, // 正则</span><br><span class="line">isText_30: /^(\W|\w&#123;1&#125;)&#123;0,30&#125;$/, // 匹配30个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_50: /^(\W|\w&#123;1&#125;)&#123;0,50&#125;$/, // 匹配50个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_20: /^(\W|\w&#123;1&#125;)&#123;0,20&#125;$/, // 匹配20个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_100: /^(\W|\w&#123;1&#125;)&#123;0,100&#125;$/, // 匹配100个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_250: /^(\W|\w&#123;1&#125;)&#123;0,250&#125;$/, // 匹配250个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isNotChina: /^[^\u4e00-\u9fa5]&#123;0,&#125;$/, // 不为中文  IDcard: /^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/, // 身份证</span><br><span class="line">IDcardAndAdmin: /^(([1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X))|(admin))$/, // 身份证或者是admin账号</span><br><span class="line">IDcardTrim: /^\s*(([1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;)|([1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X))|(admin))\s*$/, // 身份证</span><br><span class="line">num1: /^[1-9]*$/, // 数字</span><br><span class="line">companyNO: /^qqb_[0-9a-zA-Z_]&#123;1,&#125;$/, // 公司人员账号</span><br><span class="line">imgType: /image\/(png|jpg|jpeg|gif)$/, // 上传图片类型</span><br><span class="line">isChina: /^[\u4e00-\u9fa5]&#123;2,8&#125;$/,</span><br><span class="line">isNozeroNumber: /^\+?[1-9]\d*$/, // 大于零的正整数</span><br><span class="line">float: /^\d+(\.?|(\.\d+)?)$/, // 匹配正整数或者小数 或者0.这个特殊值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>split ：切割字符串的方法，我们通常传递字符或者字符串来切割字符串，此时我们通常传递的参数是能看到的摸得着，是比较具体的，</li>
<li>search：用来寻找字符或者字符串在父字符串中的位置，我们可以传递字符，也可以传递字符串。</li>
<li>match：在父字符串中寻找匹配字符串</li>
<li>replace</li>
<li>regexp</li>
<li>exec：在字符串中寻找匹都字符串，该方法比其他正则方法或字符串方法支持的更复杂</li>
<li>test</li>
<li>char</li>
<li>special char</li>
<li>集合</li>
<li>边界</li>
<li>手机号验证</li>
<li>分组</li>
</ul>
<p><code>0-10</code>，支持一位小数，包括<code>10.0</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^(10(\.0)?|[0-9](\.[0-9])?)$</span><br></pre></td></tr></table></figure>

<p>大于等于0小于等于100正数的正则表达式（0≤x≤100）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以有小数：^100$|^(\d|[1-9]\d)(\.\d+)*$</span><br><span class="line">不可以有小数：^100$|^(\d|[1-9]\d)$</span><br></pre></td></tr></table></figure>

<p>20位字符以内的中英文或数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9_\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+$/u</span><br></pre></td></tr></table></figure>

<p>15位字符以内的大小写字母或数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9]&#123;1,15&#125;$/</span><br></pre></td></tr></table></figure>

<p>6-18位至少包含数字、大小字母中的两种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?![A-Z]+$)(?![a-z]+$)(?!\d+$)\S+$/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>异步处理-笔记</title>
    <url>/2021/01/21/%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.icode9.com/content-4-1302901.html">接口测试工具Apifox 基础篇：配置环境</a></p>
<table>
<thead>
<tr>
<th><a href="https://api.jquery.com/jquery.ajax/">jQuery.ajax</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/ajax/ajax-tutorial.html">AJAX教程</a></td>
<td><a href="https://www.w3school.com.cn/ajax/index.asp">W3school</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&quot;&quot;,</span><br><span class="line">    timeout:8000,</span><br><span class="line">    type:&quot;POST&quot;,</span><br><span class="line">    dataType:&quot;json&quot;,</span><br><span class="line">    data:&#123;name:&quot;大名&quot;,age:&quot;23&quot;&#125;,</span><br><span class="line">    success:function(data,status,xhr)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    error:function(xhr,status,error)&#123;</span><br><span class="line">        $(&quot;.success&quot;).hide();</span><br><span class="line">        $(&quot;.maskBg&quot;).hide();      </span><br><span class="line">        if(xhr.status === 0)&#123;</span><br><span class="line">            if(status === &quot;timeout&quot;)&#123;</span><br><span class="line">                app.alert(&quot;网络不给力，请检查网络设置&quot;); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(xhr.status.toString().charAt(0) === &quot;4&quot;)&#123;</span><br><span class="line">            app.alert(&quot;客户端出错，请重新操作：&quot; + xhr.status);   </span><br><span class="line">        &#125;else if(xhr.status.toString().charAt(0) == &quot;5&quot;)&#123;</span><br><span class="line">            app.alert(&quot;服务端出错，请联系网站管理员！错误代码：&quot;  + xhr.status);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="axios-的简单封装"><a href="#axios-的简单封装" class="headerlink" title="axios 的简单封装"></a>axios 的简单封装</h4><p><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档|axios中文网</a></p>
<p>axios：基于promise的http库</p>
<p>1.首先引入 axios</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2.创建一个实例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 所有请求的公共地址部分</span></span><br><span class="line">    timeout: 　<span class="number">3000</span> <span class="comment">// 请求超时时间 这里的意思是当请求时间超过5秒还未取得结果时 提示用户请求超时</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.request拦截器</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求相关处理 请求拦截 在请求拦截中可以补充请求相关的配置</span></span><br><span class="line"><span class="comment">// interceptors axios的拦截器对象</span></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// config 请求的所有信息</span></span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    <span class="keyword">return</span> config <span class="comment">// 将配置完成的config对象返回出去 如果不返回 请求讲不会进行</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求发生错误时的相关处理 抛出错误</span></span><br><span class="line">   <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.response拦截器</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">api.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 我们一般在这里处理，请求成功后的错误状态码 例如状态码是500，404，403</span></span><br><span class="line">    <span class="comment">// res 是所有相应的信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 服务器响应发生错误时的处理</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>7.暴漏出去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api</span><br></pre></td></tr></table></figure>

<h3 id="封装接口"><a href="#封装接口" class="headerlink" title="封装接口"></a>封装接口</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;../index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">下面是简写的形式</span><br><span class="line"><span class="comment">// getXXX 自定义的接口名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getXXX</span> = (<span class="params">params</span>) =&gt; api.<span class="title function_">get</span>(<span class="string">`/apigb/v1/component`</span>, &#123; params&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">postXXX</span> = (<span class="params">params</span>) =&gt; api.<span class="title function_">post</span>(<span class="string">`/apigb/v1/component/update-info`</span>, params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是详细的写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">xxxx</span> = (<span class="params">params</span>) =&gt; <span class="title function_">api</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 请求方式</span></span><br><span class="line">        <span class="comment">// data: params, // (一般post请求，我们习惯使用 data属性来传参)</span></span><br><span class="line">        <span class="attr">params</span>: params <span class="comment">//(一般get请求，我们习惯使用params属性来传参）</span></span><br><span class="line">        <span class="comment">// 注意：data，和 params 两个属性传参使用，并不是固定的，也可以调换使用。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ol>
<li>同步和异步</li>
<li>XMLHttpRequest对象创建</li>
<li>HTTP请求</li>
<li>XMLHttpRequest发送请求</li>
<li>XMLHttpRequest取得响应</li>
</ol>
<h4 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a></h4><p>fetch返回promise对象</p>
<h4 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h4><p>作用：简化promise对象的使用：不用再使用then()来指定成功/失败的回调函数，以同步编码(没有回调函数)方式实现异步流程</p>
<h5 id="哪里写await"><a href="#哪里写await" class="headerlink" title="哪里写await?"></a>哪里写await?</h5><p>在返回promise的表达式左侧写await：不想要promise，想要promise异步执行的成功的value数据</p>
<h5 id="哪里写async"><a href="#哪里写async" class="headerlink" title="哪里写async?"></a>哪里写async?</h5><p>await所在函数(最近的)定义的左侧写async</p>
<h4 id="跨域-代理"><a href="#跨域-代理" class="headerlink" title="跨域-代理"></a>跨域-代理</h4><p>配置跨域的方式：</p>
<p>服务端最常用的两种：</p>
<ol>
<li>cors配置跨域</li>
<li>nginx反向代理处理跨域</li>
</ol>
<p><code>前端的代理，只能本地调试使用</code></p>
<blockquote>
<p>Vite搭建的Vue项目，在本地使用代理解决了跨域问题，打包到线上的跨域问题怎么解决？ </p>
<p>跨域的地址不属于自己服务器的连接，是别人服务器的连接</p>
<p>——服务器要配置地址（需要服务端来处理）</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>微信开发</title>
    <url>/2020/07/26/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><a href="https://developers.weixin.qq.com/doc/">微信官网文档</a></p>
<p><a href="https://developers.weixin.qq.com/community/homepage">微信开放社区</a></p>
<p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">微信公众号-开发文档</a></p>
<p><a href="https://github.com/Tencent/weui">weui-ui框架</a></p>
<p><a href="https://weui.io/">WeUI体验官网</a></p>
<p><a href="https://www.kancloud.cn/ywfwj2008/weui/274290">WeUI中文文档</a></p>
<p><a href="https://www.zcool.com.cn/article/ZODQ2Mzg0.html">移动端设计规范和方法汇总</a></p>
<p><a href="http://www.uishe.cn/153001.html">超全面的移动端UI 设计规范整理汇总</a></p>
<p><a href="https://www.uisdc.com/mobile-ui-design-specifications">超全面的移动端UI 设计规范整理汇总</a></p>
<p><a href="https://gitee.com/ZhongBangKeJi/CRMEB">众邦科技 / CRMEB开源商城系统</a></p>
<p>使用flex布局</p>
<h4 id="微信公众平台（申请公众号）：https-mp-weixin-qq-com"><a href="#微信公众平台（申请公众号）：https-mp-weixin-qq-com" class="headerlink" title="微信公众平台（申请公众号）：https://mp.weixin.qq.com/"></a>微信公众平台（申请公众号）：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></h4><ol>
<li><p>公众号注册：<a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN&amp;token=">https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN&amp;token=</a></p>
</li>
<li><p>公众号类型</p>
<ol>
<li>订阅号【为媒体和个人提供一种新的信息传播方式，主要功能是在微信侧给用户传达资讯;(功能类似报纸杂志，提供新闻信息或娱乐趣事)】</li>
<li>服务号【为企业和组织提供更强大的业务服务与用户管理能力，主要偏向服务类交互(功能类似12315，114，银行，提供绑定信息，服务交互的)】</li>
<li>小程序</li>
<li>企业号</li>
</ol>
</li>
<li><p>后台接入微信和网页接入微信</p>
<ol>
<li>后台接入<ul>
<li>公众号注册后提供开发者配置，可以通过后端语言完成接入，调用提供的接口</li>
<li>应用场景<ul>
<li>可以通过自己后台对公众号上面的内容进行操作</li>
</ul>
</li>
</ul>
</li>
<li>网页接入<ul>
<li>微信JS-SDK是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包</li>
<li>应用场景<ul>
<li>用户在微信客户端中访问第三方网页，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p>接入微信公众号开发步骤</p>
<ul>
<li>公众号账号注册</li>
<li>申请服务器</li>
<li>搭建服务</li>
<li>开发者基本配置</li>
</ul>
</li>
<li><p>开发环境搭建</p>
<ul>
<li><p>通过Node接入公众号</p>
</li>
<li><p>填写服务器配置</p>
<ul>
<li>URL服务器地址</li>
<li>Token自己指定</li>
<li>EncodingAESKey消息加解密密钥</li>
</ul>
</li>
<li><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html">接入指南</a></p>
<ul>
<li>登录微信公众平台官网后，在公众平台官网的开发 - 基本设置页面，勾选协议成为开发者，点击“修改配置”按钮，填写服务器地址（URL）、Token和EncodingAESKey，其中 URL 是开发者用来接收微信消息和事件的接口URL。</li>
</ul>
</li>
<li><p><a href="https://www.bilibili.com/read/cv11629901">第5节：云服务器安装Node</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1J64y1d7pV">云服务器安装node</a></p>
</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.13.0/node-v16.13.0.tar.gz </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf node-v16.13.0.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd node-v16.13.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure   如果报错，执行：ls -l /usr/bin | grep python    然后：python3 configure.py</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING: C++ compiler (CXX=g++, 4.8.5) too old, need g++ 8.3.0 or clang++ 8.0.0</span><br><span class="line">WARNING: warnings were emitted in the configure phase</span><br><span class="line">INFO: configure completed successfully</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/w345731923/article/details/107204098/">C++ compiler (CXX=g++, 4.8.5) too old, need g++ 6.3.0</a></p>
<p>升级gcc版本：gcc下载地址<a href="http://ftp.gnu.org/gnu/gcc/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E7%9A%84.tar.gz">http://ftp.gnu.org/gnu/gcc/，可以找到任意版本的.tar.gz</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">wget http://ftp.gnu.org/gnu/gcc/gcc-8.3.0/gcc-8.3.0.tar.gz</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">tar -zxvf gcc-8.3.0.tar.gz </span><br></pre></td></tr></table></figure>

<p><a href="https://www.zhaomu.com/help/detail-782.html">如何在Ubuntu云服务器上安装MongoDB、Express、Angular和Node.js？</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2003058">nodeJS之Express框架–安装以及配置服务器</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1118247?from=article.detail.2003058">CentOS安装运行NodeJS框架Express</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1373597?from=article.detail.2003058">CentOS安装NodeJS及Express开发框架</a></p>
<h4 id="1-安装nvm，不直接安装nodejs在服务器，"><a href="#1-安装nvm，不直接安装nodejs在服务器，" class="headerlink" title="1.安装nvm，不直接安装nodejs在服务器，"></a>1.安装<a href="https://github.com/nvm-sh/nvm">nvm</a>，不直接安装nodejs在服务器，</h4><h5 id="版本更新太快，使用nvm管理先将安装的卸载"><a href="#版本更新太快，使用nvm管理先将安装的卸载" class="headerlink" title="版本更新太快，使用nvm管理先将安装的卸载"></a>版本更新太快，使用nvm管理先将安装的卸载</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm node-v16.13.0.tar.gz</span><br><span class="line">rm -rf node-v16.13.0        要加-rf</span><br><span class="line"></span><br><span class="line">rm gcc-8.3.0.tar.gz</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/zjxlicheng/p/16070719.html">linux环境安装nvm</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2186375?from=15425">在linux下使用nvm安装node</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2033434">VI退出 退出VIM 适用新手</a></p>
<p><a href="https://nodejs.org/zh-cn/download/releases/">node的版本</a></p>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 19.3.0</span><br></pre></td></tr></table></figure>

<p>node版本过高报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-8-7-centos ~]# nvm use 19.3.0</span><br><span class="line">Now using node v19.3.0 (npm v)</span><br><span class="line">[root@VM-8-7-centos ~]# node -v</span><br><span class="line">node: /lib64/libm.so.6: version `GLIBC_2.27&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.25&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.28&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27; not found (required by node)</span><br><span class="line">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27; not found (required by node)</span><br><span class="line">[root@VM-8-7-centos ~]# cat /etc/issue</span><br></pre></td></tr></table></figure>

<p>安装低版本的,   <a href="https://nodejs.org/dist/">node-安装版本</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 16.13.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-8-7-centos ~]# node -v</span><br><span class="line">v16.13.0</span><br></pre></td></tr></table></figure>

<h5 id="安装express"><a href="#安装express" class="headerlink" title="安装express"></a>安装express</h5><p><a href="https://my.oschina.net/sfatpaper/blog/3164048">Node 微信公众号开发 接入公众号</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2078690">使用node.js接入微信公众号开发</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1481429">nodejs微信公众号开发</a></p>
<p><a href="https://blog.csdn.net/hzw2312/article/details/69664485">微信开发——测试号申请，接口配置，JS接口安全域名，自定义菜单</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1816714">如何接入微信公众平台开发</a></p>
<p>课程链接：<a href="https://www.bilibili.com/video/BV13k4y1m79R">【尚硅谷】零基础开发微信公众号丨手把手带你搭建打通前后端的项目</a></p>
<h4 id="订阅号和服务号的主要区别"><a href="#订阅号和服务号的主要区别" class="headerlink" title="订阅号和服务号的主要区别"></a>订阅号和服务号的主要区别</h4><ol>
<li>推送频率<ul>
<li>订阅号：1天内可群发1条消息</li>
<li>服务号：1个月内可发送4条群发消息</li>
</ul>
</li>
<li>提供功能<ul>
<li>订阅号：包含大部分功能</li>
<li>服务号：认证的服务号包含全部功能</li>
</ul>
</li>
<li>使用人群<ul>
<li>订阅号：个人、媒体</li>
<li>服务号：企业、政府或其他组织</li>
</ul>
</li>
</ol>
<h4 id="公众号设置"><a href="#公众号设置" class="headerlink" title="公众号设置"></a>公众号设置</h4><p>设置与开发——公众号设置（公众号名称，一年可修改两次）</p>
<h4 id="接口权限"><a href="#接口权限" class="headerlink" title="接口权限"></a>接口权限</h4><p>设置与开发——接口权限</p>
<h4 id="自动回复"><a href="#自动回复" class="headerlink" title="自动回复"></a>自动回复</h4><p>内容与互动——自动回复</p>
<h4 id="发布图文"><a href="#发布图文" class="headerlink" title="发布图文"></a>发布图文</h4><p>内容与互动——草稿箱——+创作</p>
<h4 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h4><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">开发者文档</a></p>
<p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Requesting_an_API_Test_Account.html">接口测试号申请</a></p>
<h5 id="自行开发之验证服务器有效性"><a href="#自行开发之验证服务器有效性" class="headerlink" title="自行开发之验证服务器有效性"></a>自行开发之验证服务器有效性</h5><p>设置与开发——开发者工具——</p>
<p>开发者服务器会验证是否来自于腾讯微信服务器的，微信服务器也验证改验证消息是否来自于开发者服务器</p>
<h5 id="验证服务器的有效性的js"><a href="#验证服务器的有效性的js" class="headerlink" title="验证服务器的有效性的js"></a>验证服务器的有效性的js</h5><ol>
<li><p>在目录中，创建package.json文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装express</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure>
</li>
<li><p>写验证服务器有效性的js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// wx_verify.js</span><br><span class="line"></span><br><span class="line">// 引入express模块</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">// 创建app应用对象</span><br><span class="line">const app = express();</span><br><span class="line">// 验证服务器的有效性</span><br><span class="line"></span><br><span class="line">// 接受处理所有信息</span><br><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听端口号</span><br><span class="line">app.listen(3000, () =&gt; console.log(&#x27;服务器启动成功了~~&#x27;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wx_verify.js</span><br><span class="line"></span><br><span class="line">// 服务器启动成功了~~</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ngrok——实现内网穿透</p>
</li>
</ol>
<p><a href="https://ngrok.com/">ngrok官网</a>       <a href="https://ngrok.com/">ngrok中文网</a>      <a href="https://github.com/inconshreveable/ngrok">ngrok-github</a>    <a href="https://ngrok.com/download">ngrok-官网下载</a></p>
<p>ngrok会在您计算机上的本地Web服务器上创建安全的公共URL（<a href="https://yourapp.ngrok.io)/">https://yourapp.ngrok.io）</a></p>
<p>   ngrok是一款强大的免费内网穿透工具，无需公网ip，无需端口映射</p>
<p>   <a href="https://blog.csdn.net/yxt625520/article/details/124454253">ngrok内网穿透工具搭建，方便微信公众号，小程序、钉钉等开发【已投入使用】</a></p>
<pre><code>[ngrok下载与使用方法](https://www.ngui.cc/el/1023843.html)
</code></pre>
<p>   <a href="https://www.pudn.com/news/62f454755425817ffc2db897.html">ngrok内网穿透</a></p>
<ul>
<li>双击ngrok.exe</li>
<li>输入<code>ngrok http 3000</code>  （如果关闭窗口，需要重启<code>ngrok http 3000</code>，然后得到的随机链接会变，所以在使用阶段，最好保持窗口不被关闭）</li>
<li>然后将得到的地址<code>https://69b9-183-63-101-66.jp.ngrok.io</code>，复制到<code>“测试号管理——接口配置信息——URL&quot;</code>中</li>
</ul>
<ol start="6">
<li><p>填写Token</p>
<p> 测试号管理——接口配置信息——Token</p>
<p>Token：<code>winneyTest2022</code></p>
</li>
<li><p>提交（测试号管理——接口配置信息——提交按钮）</p>
<ul>
<li><p>测试接口输出的<code>req.query</code>的值（<code>如果修改了js文件内容，需要重启服务器</code>）</p>
</li>
<li><p>成功，服务器端会打印以下内容：【但是点击提交的时候，还是会弹出<code>配置失败</code>】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  signature: &#x27;1c8252cde8b31780880af4cee3accbf3ded1c9b5&#x27;,</span><br><span class="line">  echostr: &#x27;2707147274709880411&#x27;,</span><br><span class="line">  timestamp: &#x27;1672219674&#x27;,</span><br><span class="line">  nonce: &#x27;584600126&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不成功，退出ngrok的终端，重新输入<code>ngrok http 3000</code>，将生成的链接重新填到<code>“测试号管理——接口配置信息——URL&quot;</code>中</p>
</li>
</ul>
</li>
<li><p>安装sha1-进行sha1加密处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i sha1</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写完wx_server.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入express模块</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">// 引入sha1模块</span><br><span class="line">const sha1 = require(&#x27;sha1&#x27;);</span><br><span class="line"></span><br><span class="line">// 创建app应用对象</span><br><span class="line">const app = express();</span><br><span class="line">// 验证服务器的有效性</span><br><span class="line">// 1。微信服务器知道开发者服务器是哪个</span><br><span class="line">//    –测试号管理页面上填写url开发者服务器地址</span><br><span class="line">//      -使用ngrok内网穿透将本地端口号开启的服务映射外网跨域访间一个网址</span><br><span class="line">//      - ngrok http 3000</span><br><span class="line">//    -填写token</span><br><span class="line">//      -参与微信签名加密的一个参数</span><br><span class="line">// 2．开发者服务器–验证消息.是否来自于微信服务器</span><br><span class="line">// 3．加密完成就生成了一个signatrue，和微信发送过来的进行对比。</span><br><span class="line">//    -如果一样，说明消息来自于微信服务器，返回echostr给微信服务器</span><br><span class="line">//    -如果不一样，说明不是微信服务器发送的消息，返回error</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">    token: &#x27;winneyTest2022&#x27;,</span><br><span class="line">    appID: &#x27;wx79fdb62c7b0ac61c&#x27;,</span><br><span class="line">    appsecret: &#x27;f4e6a78705fde2487ca9e5ebb0c1762d&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">    console.log(req.query);</span><br><span class="line">    // &#123;</span><br><span class="line">    //     signature: &#x27;1c8252cde8b31780880af4cee3accbf3ded1c9b5&#x27;,</span><br><span class="line">    //     echostr: &#x27;2707147274709880411&#x27;,</span><br><span class="line">    //     timestamp: &#x27;1672219674&#x27;,</span><br><span class="line">    //     nonce: &#x27;584600126&#x27;</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    const &#123; signature, echostr, timestamp, nonce &#125; = req.query;</span><br><span class="line">    const &#123; token &#125; = config;</span><br><span class="line">    // 1，将参与微信加密签名的三个参数（timestamp、nonce、token)按照字典序排序并组合在一起形成一个数组</span><br><span class="line">    const arr = [timestamp, nonce, token];</span><br><span class="line">    const arrSort = arr.sort();</span><br><span class="line">    // 2， 将数组里所有参数拼接成一个字符串，进行sha1加密</span><br><span class="line">    const str = arr.join(&#x27;&#x27;);</span><br><span class="line">    console.log(str);</span><br><span class="line">    const sha1Str = sha1(str);</span><br><span class="line">    console.log(sha1Str);</span><br><span class="line"></span><br><span class="line">    // 3．加密完成就生成了一个signatrue，和微信发送过来的进行对比。</span><br><span class="line">    if(sha1Str === signature) &#123;</span><br><span class="line">        // 如果一样，说明消息来自于微信服务器，返回echostr给微信服务器</span><br><span class="line">        res.send(echostr);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 如果不一样，说明不是微信服务器发送的消息，返回error</span><br><span class="line">        res.send(&#x27;error&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 监听端口号</span><br><span class="line">app.listen(3000, () =&gt; console.log(&#x27;服务器启动成功了~~&#x27;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器，重新点击提交（测试号管理——接口配置信息——提交按钮）</p>
<p><a href="https://blog.csdn.net/qq_54588794/article/details/122530100">【微信公众号开发解决URL接口配置问题 】</a></p>
<ul>
<li>使用GitHub账号，Create a Account    <a href="https://dashboard.ngrok.com/get-started/setup">https://dashboard.ngrok.com/get-started/setup</a></li>
<li>复制<code>2. Connect your account</code> 中最后面的token</li>
<li>在ngrok的命令窗口，重新输入：<code>ngrok http 3000 --authtoken 2JZUKTz8ROT86mL7kLHClXLcVDn_5jYt7e3PwtygL3bdesWjV</code></li>
<li>将生成的链接，重新复制到<code>“测试号管理——接口配置信息——URL&quot;</code>中   （还是不行）</li>
</ul>
</li>
</ol>
<h4 id="云服务器-express搭建"><a href="#云服务器-express搭建" class="headerlink" title="云服务器-express搭建"></a>云服务器-express搭建</h4><p>文件存放目录：<code>/usr/local/src/webCode/wx</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/webCode/wx</span><br></pre></td></tr></table></figure>

<p>将本地服务器的相关代码压缩(server.zip)（除了node_modules目录）</p>
<p>上传压缩文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rz -y      // 选择server.zip</span><br></pre></td></tr></table></figure>

<p>查看是否上传成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls     // 可以看到有server.zip</span><br></pre></td></tr></table></figure>

<p>解压server.zip：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip server.zip</span><br></pre></td></tr></table></figure>

<p>安装依赖包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br><span class="line">nvm use 16.13.0</span><br><span class="line"></span><br><span class="line">npm install     // 安装依赖包</span><br></pre></td></tr></table></figure>

<p>启动服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node wx_verify.js</span><br></pre></td></tr></table></figure>

<p>修改js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi wx_verify.js</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/qq_24264965/article/details/120617458">拯救报错：Error: connect ETIMEDOUT</a></p>
<p><a href="https://help.aliyun.com/document_detail/198938.html">安装证书到服务器</a></p>
<p><a href="https://help.aliyun.com/document_detail/98728.html?spm=a2c4g.11186623.0.0.2bd24c01c4FBh6">在Nginx或Tengine服务器上安装证书</a> ——阿里云</p>
<h3 id="微信小程序的request合法域名"><a href="#微信小程序的request合法域名" class="headerlink" title="微信小程序的request合法域名"></a>微信小程序的request合法域名</h3><p><code>需要是https协议的</code></p>
<p>开发——开发管理——开发设置——服务器域名——request合法域名</p>
<p>具体步骤，查看博客【云服务器-相关笔记】——云服务器配置https协议</p>
<p><a href="https://www.jianshu.com/p/4b3477756d5e">超小DEMO：微信小程序+Express+腾讯云服务器部署（Nginx+SSL）</a></p>
<p><a href="https://blog.csdn.net/weixin_38091174/article/details/126500156">微信小程序请求接口提示Provisional headers are shown</a></p>
<h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>1、安装后：</p>
<p>启动的时候，扫描这个二维码：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/1.png" alt="二维码"></p>
<p>2、选择</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2.png" alt="选择"></p>
<p>3、创建目录：</p>
<p>项目——新建项目——填写内容——确定按钮</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/3.png" alt="创建目录"></p>
<p>4、会自动生成以下文件：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/4.png" alt="文件"></p>
<p><a href="http://blog.chengsanjin.com/2016/09/21/yingyonghaoawesome/">微信应用号资料</a></p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html">微信小程序文档</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket?t=1475052049833">Web API</a></p>
<h4 id="微信小程序-替换文件"><a href="#微信小程序-替换文件" class="headerlink" title="微信小程序-替换文件"></a>微信小程序-替换文件</h4><h5 id="Mac测试可用-Windows测试可用"><a href="#Mac测试可用-Windows测试可用" class="headerlink" title="Mac测试可用, Windows测试可用"></a>Mac测试可用, Windows测试可用</h5><ol>
<li><p>下载开发工具，并安装(注意: 一定要安装0.9版本)</p>
</li>
<li><p>打开「微信Web开发者工具」的程序目录</p>
<ul>
<li><p>Windows: 使用资源管理器查看</p>
</li>
<li><p>Mac: 右键点击图标，选择「显示包内容」</p>
</li>
</ul>
</li>
<li><p>进入程序目录后，替换以下文件(只需要替换0.9版本里的，0.7版本用来登陆) ：</p>
<ul>
<li>Windows:<ul>
<li><code>\package.nw\app\dist\components\create\createstep.js</code></li>
<li><code>\package.nw\app\dist\stroes\projectStores.js</code>或<code>\package.nw\app\dist\stores\projectStores.js </code>(0.9.0923002之后版本）</li>
<li><code>package.nw\app\dist\weapp\appservice\asdebug.js</code></li>
</ul>
</li>
<li>Mac:<ul>
<li><code>/Resources/app.nw/app/dist/components/create/createstep.js</code></li>
<li><code>/Resources/app.nw/app/dist/stroes/projectStores.js </code>或<code>/Resources/app.nw/app/dist/stroes/projectStores.js</code><br>(0.9.092300之后版本)</li>
<li><code>/Resources/app.nw/app/dist/weapp/appservice/asdebug.js</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="微信公众号-菜单设置的跳转链接不匹配"><a href="#微信公众号-菜单设置的跳转链接不匹配" class="headerlink" title="微信公众号-菜单设置的跳转链接不匹配"></a>微信公众号-菜单设置的跳转链接不匹配</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E8%8F%9C%E5%8D%95.png" alt="微信公众号菜单"></p>
<p>重现bug：</p>
<ol>
<li></li>
<li></li>
</ol>
<p>原因：公众号获取openid影响的，因为不管点击”WW游戏验证”，还是”HH游戏验证”，后端都默认跳转到“WW游戏验证通过的页面”</p>
<p><a href="https://www.w3cschool.cn/weixinapp/">微信小程序开发文档</a></p>
<p><a href="https://weui.io/">WeUI示例</a></p>
<p><a href="https://github.com/Tencent/weui.js/blob/master/docs/component/form.md#validate">weui.js验证函数</a></p>
<p><a href="http://mpvue.com/">mpvue</a></p>
<h4 id="微信小程序-1"><a href="#微信小程序-1" class="headerlink" title="微信小程序"></a>微信小程序</h4><p><a href="https://www.bilibili.com/video/BV1H34y1p7Fd">网易云音乐微信小程序【2022最新教程】</a></p>
<p>贪吃蛇</p>
<h3 id="微信小游戏"><a href="#微信小游戏" class="headerlink" title="微信小游戏"></a>微信小游戏</h3><h4 id="微信小游戏黑屏的解决方法"><a href="#微信小游戏黑屏的解决方法" class="headerlink" title="微信小游戏黑屏的解决方法"></a>微信小游戏黑屏的解决方法</h4><ol>
<li>在VScode中的终端，选择“输出”；</li>
<li>选择“任务”；</li>
</ol>
<p>​     如图所示：</p>
<p>​    <img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%BB%91%E5%B1%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.png" alt="微信小游戏黑屏的解决方法">        </p>
]]></content>
      <categories>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>微信开发</tag>
      </tags>
  </entry>
  <entry>
    <title>导出表格功能</title>
    <url>/2020/08/22/%E5%AF%BC%E5%87%BA%E8%A1%A8%E6%A0%BC%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="使用window-open-url-‘-self’-导出表格"><a href="#使用window-open-url-‘-self’-导出表格" class="headerlink" title="使用window.open(url, ‘_self’)导出表格"></a>使用<code>window.open(url, ‘_self’)</code>导出表格</h3><p>使用<code>window.open(url, ‘_self’)</code>导出表格后，页面会刷新，本来存放的<code>localStorage</code>会被清（因为刷新页面做了清空表格筛选条件和页码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听手动刷新页面事件(按浏览器的刷新按钮||使用js方法刷新页面)</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    // 清空表格缓存的页码数据</span><br><span class="line">    removeItem(&quot;pages&quot;);</span><br><span class="line">    // 清空表格筛选条件缓存数据</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">    console.log(&#x27;刷新了页面&#x27;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>解决方法：使用<code>sessionStorage</code>临时缓存一份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在导出表格前，先临时拷贝localStorage缓存数据到sessionStorage</span><br><span class="line">// 使用window.open导出表格，会将localStorage中的formData清空</span><br><span class="line">sessionStorage.setItem(&#x27;formData&#x27;, JSON.stringify(getItem(&#x27;formData&#x27;)));</span><br><span class="line">sessionStorage.setItem(&#x27;pages&#x27;, JSON.stringify(getItem(&#x27;pages&#x27;)));</span><br><span class="line">// 导出表格后，从sessionStorage中拷贝数据再次缓存到locaStorage</span><br><span class="line">setItem(&#x27;formData&#x27;, sessionStorage.getItem(&#x27;formData&#x27;));</span><br><span class="line">setItem(&#x27;pages&#x27;, sessionStorage.getItem(&#x27;pages&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="通过url导出服务器端文件"><a href="#通过url导出服务器端文件" class="headerlink" title="通过url导出服务器端文件"></a>通过<code>url</code>导出服务器端文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// window.location.href= url;</span><br><span class="line">// 或</span><br><span class="line">window.open(url, &#x27;_self&#x27;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-相关笔记</title>
    <url>/2020/12/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="本地目录"><a href="#本地目录" class="headerlink" title="本地目录"></a>本地目录</h4><ul>
<li>实战项目目录：<code>H:\Gitee\wx_code</code></li>
<li>参考项目目录：<code>H:\Test_Code\wx_code</code></li>
</ul>
<h4 id="云服务器目录"><a href="#云服务器目录" class="headerlink" title="云服务器目录"></a>云服务器目录</h4><p><code>/usr/local/src/webCode/wx</code></p>
<h4 id="node命令使用之前"><a href="#node命令使用之前" class="headerlink" title="node命令使用之前"></a>node命令使用之前</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm  use 16.13.0</span><br></pre></td></tr></table></figure>

<h4 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h4><p>使用<code>apifox</code></p>
<h5 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h5><p>项目设置——数据管理——导出数据——Markdown格式</p>
<h4 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h4><ul>
<li><a href="https://vant-contrib.gitee.io/vant-weapp/#/home">Vant Weapp</a></li>
<li><a href="https://tdesign.tencent.com/miniprogram/getting-started">TDesign</a></li>
</ul>
<h4 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h4><p><a href="https://juejin.cn/post/6844903461968936974">微信小程序开源项目库集合</a></p>
<p><a href="https://juejin.cn/post/6844903816219852814">企业级微信小程序实战详解</a></p>
<p><a href="https://juejin.cn/post/6844903860587233293">微信小程序开源项目排行榜</a></p>
<p><a href="https://juejin.cn/post/6844903876865294350">微信小程序实战-音乐播放器</a></p>
<p><a href="https://juejin.cn/post/6844904119119921160">微信小程序初始化项目架构</a></p>
<p><a href="https://juejin.cn/post/6844903479211720711">微信小程序项目实战（商城）</a></p>
<p><a href="https://juejin.cn/post/6968623114917773325">微信小程序实战之仿今日头条</a></p>
<p><a href="https://www.bilibili.com/video/BV1nE41117BQ">课程链接</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/sandbox.html">开发测试号</a></p>
<p><a href="https://mp.weixin.qq.com/wxamp/sandbox?doc=1">申请小程序测试号</a></p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>注册【使用未在微信公众平台使用过的邮箱，注册】</li>
<li>需要有AppID【开发——开发管理——开发设置】</li>
<li>新建项目【开发阶段，若没有AppID，可使用测试号，上线的时候改为自己的AppID就行】<ul>
<li>在微信开发者工具的右上角【详情】中，可以更改AppID</li>
</ul>
</li>
</ol>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="编译模式："><a href="#编译模式：" class="headerlink" title="编译模式："></a>编译模式：</h4><p>普通编译：默认打开的是首页</p>
<p>如果想调试某个页面，可以添加编译模式</p>
<h4 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h4><p>在本地设置中，可以查看到【调试基础库】，根据对应的版本，查找对应的api</p>
<p>开发阶段，在本地设置中，将”不校验合法域名、web-view(业务域名)、TLS版本以及HITPS证书“勾选上</p>
<h4 id="页面路径"><a href="#页面路径" class="headerlink" title="页面路径"></a>页面路径</h4><p>在模拟器的下方，可以看到页面路径和页面参数</p>
<h4 id="结构目录"><a href="#结构目录" class="headerlink" title="结构目录"></a>结构目录</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/structure.html">目录结构</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree /f</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─pages						_____________页面文件夹</span><br><span class="line">│  ├─index					_____________首页</span><br><span class="line">│  │      index.js			_____________首页的逻辑文件</span><br><span class="line">│  │      index.json		_____________首页的配置文件</span><br><span class="line">│  │      index.wxml		_____________首页的结构文件</span><br><span class="line">│  │      index.wxss		_____________首页的样式文件</span><br><span class="line">│  │</span><br><span class="line">│  └─logs					_____________日志 页面</span><br><span class="line">│          logs.js</span><br><span class="line">│          logs.json</span><br><span class="line">│          logs.wxml</span><br><span class="line">│          logs.wxss</span><br><span class="line">│</span><br><span class="line">└─utils						_____________第三方的工具js(可以删除的)</span><br><span class="line">│       util.js</span><br><span class="line">│  .eslintrc.js</span><br><span class="line">│  app.js					_____________项目的全局入口文件</span><br><span class="line">│  app.json					_____________全局配置文件</span><br><span class="line">│  app.wxss					_____________全局样式文件</span><br><span class="line">│  project.config.json		_____________项目的配置文件  如appid</span><br><span class="line">│  project.private.config.json</span><br><span class="line">│  sitemap.json				_____________微信索引配置文件</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html">sitemap配置</a>     用来配置小程序及其页面是否允许被微信索引</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">app.json</a></p>
<h4 id="快速新建目录及里面的相关文件"><a href="#快速新建目录及里面的相关文件" class="headerlink" title="快速新建目录及里面的相关文件"></a>快速新建目录及里面的相关文件</h4><p>在<code>app.json</code>中的pages属性中，添加<code>&quot;pages/demo/demo&quot;</code>，保存之后，会在pages目录中自动创建demo目录，以及<code>demo.wxml、demo.wxss、demo.js、demo.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;,</span><br><span class="line">    &quot;pages/demo/demo&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>



<p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/data.html">数据绑定</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html">列表渲染</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/conditional.html">条件渲染</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/template.html">模板</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html">引用，import和include</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件详解</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view id=&quot;tapTest&quot; data-hi=&quot;Weixin&quot; bindtap=&quot;tapName&quot;&gt; Click me! &lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  tapName: function(event) &#123;</span><br><span class="line">    console.log(event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">dataset</a></p>
<p>在 WXML 中，这些自定义数据以 <code>data-</code> 开头，多个单词由连字符 <code>-</code> 连接。这种写法中，连字符写法会转换成驼峰写法，而大写字符会自动转成小写字符。如：</p>
<ul>
<li><code>data-element-type</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementType</code> ；</li>
<li><code>data-elementType</code> ，最终会呈现为 <code>event.currentTarget.dataset.elementtype</code> 。</li>
</ul>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">页面配置</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;light&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="封装-wx-request方法"><a href="#封装-wx-request方法" class="headerlink" title="封装 wx.request方法"></a>封装 wx.request方法</h4><p><code>utils/request.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//request.js</span><br><span class="line">const baseUrl = &#x27;https://www.winney07.cn:8080/&#x27;</span><br><span class="line"></span><br><span class="line">const request = (url, method, data) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: baseUrl + url,</span><br><span class="line">      method: method,</span><br><span class="line">      data: data,</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        resolve(res.data)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: err =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const get = (url, data) =&gt; &#123;</span><br><span class="line">  return request(url, &#x27;GET&#x27;, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const post = (url, data) =&gt; &#123;</span><br><span class="line">  return request(url, &#x27;POST&#x27;, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  baseUrl,</span><br><span class="line">  request,</span><br><span class="line">  get,</span><br><span class="line">  post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import request from &#x27;../../utils/request.js&#x27;</span><br><span class="line"></span><br><span class="line">// 请求接口，获取数据</span><br><span class="line">async getData() &#123;</span><br><span class="line">    const swiperList = await request.get(&#x27;shopping/swiper&#x27;);</span><br><span class="line">    const tabList = await request.get(&#x27;shopping/good/tabList&#x27;);</span><br><span class="line">    const goodList = await request.get(&#x27;shopping/good/getGoodList&#x27;);</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      swiperList,</span><br><span class="line">      tabList,</span><br><span class="line">      goodList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 生命周期函数--监听页面加载</span><br><span class="line">*/</span><br><span class="line">onLoad(options) &#123;</span><br><span class="line">    this.getData();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="父子组件之间传值"><a href="#父子组件之间传值" class="headerlink" title="父子组件之间传值"></a>父子组件之间传值</h4><p>父组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;good-list goodsList=&quot;&#123;&#123;goodsList&#125;&#125;&quot;&gt;&lt;/good-list&gt;</span><br></pre></td></tr></table></figure>

<p>子组件.js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">    goodsList: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      value: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>子组件.wxml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view class=&quot;good-list&quot;&gt;</span><br><span class="line">  &lt;block</span><br><span class="line">  wx:for=&quot;&#123;&#123; goodsList &#125;&#125;&quot;</span><br><span class="line">  wx:key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;good-card class=&quot;good-item&quot; i=&quot;&#123;&#123;index&#125;&#125;&quot; data=&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&lt;/good-card&gt;</span><br><span class="line">  &lt;/block&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p><code>goods/category/index</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-grid-item </span><br><span class="line">    use-slot </span><br><span class="line">    class=&quot;grid-item&quot; </span><br><span class="line">    data-groupid=&quot;&#123;&#123;item.groupId&#125;&#125;&quot; </span><br><span class="line">    bindtap=&quot;toList&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">&lt;/van-grid-item&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toList(event) &#123;</span><br><span class="line">    console.log(&#x27;event&#x27;);</span><br><span class="line">    console.log(event.currentTarget.dataset);		// &#123;groupid: &quot;249480&quot;&#125;</span><br><span class="line">    let groupid = event.currentTarget.dataset.groupid;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: `/pages/goods/list/index?groupid=$&#123;groupid&#125;`</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在元素中自定义的<code>data-</code>属性，在<code>event.currentTarget.dataset</code>中。</p>
</blockquote>
<h4 id="获取URL传来的参数："><a href="#获取URL传来的参数：" class="headerlink" title="获取URL传来的参数："></a>获取URL传来的参数：</h4><p><code>goods/list/index.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onLoad(options) &#123;</span><br><span class="line">    console.log(&#x27;options&#x27;); </span><br><span class="line">    console.log(options);      // &#123;groupid: &quot;249480&quot;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="微信小游戏"><a href="#微信小游戏" class="headerlink" title="微信小游戏"></a>微信小游戏</h3><p><a href="http://www.mpgcw.com/9101.html">微信小游戏账号注册教程</a></p>
<blockquote>
<p>在微信开发者中，创建小游戏项目，进入项目后，界面是黑色的。</p>
</blockquote>
<p>需要注册个测试号（这个测试号是针对小游戏的）</p>
<ol>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/sandbox.html">开发测试号</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/wxamp/sandbox?doc=1">申请小程序测试号</a></p>
</li>
<li><p>在微信开发中创建小游戏项目时，选择<code>”测试号“</code>，进入项目，即可正常显示</p>
</li>
</ol>
<p><a href="https://developers.weixin.qq.com/community/develop/doc/00028edbe3c58081e7cc834705b801">微信公众平台用户信息相关接口调整公告</a></p>
<h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><p><a href="https://blog.csdn.net/weixin_44183483/article/details/119330629">微信小程序编译遇到 ReferenceError: regeneratorRuntime is not defined 解决办法</a></p>
<p> 解析方法：</p>
<p>打包前，在js文件中加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import regeneratorRuntime from &quot;./runtime&quot;</span><br></pre></td></tr></table></figure>



<h4 id="在地图上显示当前位置"><a href="#在地图上显示当前位置" class="headerlink" title="在地图上显示当前位置"></a>在地图上显示当前位置</h4><ol>
<li>在<code>.json</code>页面中进行配置<code>permission</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &quot;pages&quot;:[</span><br><span class="line">        &quot;pages/index/index&quot;,</span><br><span class="line">        &quot;pages/logs/logs&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;permission&quot;: &#123;</span><br><span class="line">        &quot;scope.userLocation&quot;: &#123;</span><br><span class="line">          &quot;desc&quot;: &quot;你的位置信息将用于小程序位置接口的效果展示&quot; // 高速公路行驶持续后台定位</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取位置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.getLocation(&#123;</span><br><span class="line">  type: &#x27;wgs84&#x27;,</span><br><span class="line">  success: (res) =&gt; &#123;</span><br><span class="line">    var latitude = res.latitude // 纬度</span><br><span class="line">    var longitude = res.longitude // 经度</span><br><span class="line">    console.log(&#x27;维度&#x27;)</span><br><span class="line">    console.log(latitude)</span><br><span class="line">    console.log(&#x27;经度&#x27;)</span><br><span class="line">    console.log(longitude)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="微信开发者工具-关闭声音"><a href="#微信开发者工具-关闭声音" class="headerlink" title="微信开发者工具-关闭声音"></a>微信开发者工具-关闭声音</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7-%E9%9D%99%E9%9F%B3.png" alt="关闭声音"></p>
]]></content>
      <categories>
        <category>微信开发</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>技术胖浏览器收藏夹公开</title>
    <url>/2020/08/25/%E6%8A%80%E6%9C%AF%E8%83%96%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%B6%E8%97%8F%E5%A4%B9%E5%85%AC%E5%BC%80/</url>
    <content><![CDATA[<h1 id="收藏夹"><a href="#收藏夹" class="headerlink" title="收藏夹"></a>收藏夹</h1><h4 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h4><ul>
<li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li>
<li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a></li>
<li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li>
<li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li>
<li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li>
<li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li>
<li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li>
<li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li>
</ul>
<h4 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h4><ul>
<li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li>
<li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li>
<li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li>
<li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li>
<li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li>
<li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li>
<li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li>
<li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li>
<li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li>
</ul>
<h4 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h4><ul>
<li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li>
<li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li>
<li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li>
<li><a href="https://visualgo.net/en">算法可视化来源 </a></li>
<li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li>
</ul>
<h4 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h4><ul>
<li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li>
<li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li>
<li><a href="https://yuchengkai.cn/">前端面试图谱</a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li>
</ul>
<h4 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h4><ul>
<li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li>
<li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li>
<li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li>
<li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li>
<li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li>
<li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li>
<li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li>
<li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li>
<li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li>
<li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li>
<li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li>
<li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li>
<li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li>
</ul>
<h4 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h4><ul>
<li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li>
<li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li>
<li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li>
<li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li>
<li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li>
<li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li>
<li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li>
<li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li>
</ul>
<h4 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h4><ul>
<li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li>
<li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li>
<li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li>
<li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li>
<li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li>
<li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li>
<li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li>
</ul>
<h4 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h4><ul>
<li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li>
<li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li>
<li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li>
<li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li>
<li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li>
</ul>
<h4 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h4><ul>
<li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li>
<li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li>
<li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li>
</ul>
<h4 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h4><ul>
<li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li>
<li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li>
<li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li>
<li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li>
<li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li>
<li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li>
<li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li>
</ul>
<h4 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h4><ul>
<li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li>
<li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li>
</ul>
<h4 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h4><ul>
<li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li>
<li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li>
<li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li>
<li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li>
<li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li>
<li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li>
<li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li>
<li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li>
<li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li>
<li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li>
<li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li>
</ul>
<h4 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h4><ul>
<li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li>
<li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li>
<li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li>
<li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li>
<li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li>
</ul>
<h4 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h4><ul>
<li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li>
<li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li>
<li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li>
<li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li>
</ul>
<h4 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h4><ul>
<li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li>
<li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li>
<li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li>
<li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li>
<li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li>
</ul>
<h1 id="B站学习资源整合"><a href="#B站学习资源整合" class="headerlink" title="B站学习资源整合"></a>B站学习资源整合</h1><h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><p>（Internet）</p>
<ul>
<li><ol>
<li>网络工作原理</li>
</ol>
</li>
<li>计算机网络原理：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></li>
<li><ol>
<li>什么是HTTP</li>
</ol>
</li>
<li>HTTP协议详解：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></li>
<li><ol>
<li>浏览器及工作方式</li>
</ol>
</li>
<li>浏览器是如何运作的？：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a></li>
<li><ol>
<li>DNS 及其工作原理</li>
</ol>
</li>
<li>DNS基本工作原理：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a></li>
<li>直观DNS科普：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></li>
<li><ol>
<li>域名相关知识</li>
</ol>
</li>
<li>域名解析完整讲解：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></li>
<li><ol>
<li>云服务相关知识</li>
</ol>
</li>
<li>揭秘阿里云服务器：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a></li>
</ul>
<h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>（HTML）</p>
<ul>
<li><ol>
<li>HTML基础知识学习</li>
</ol>
</li>
<li>HTML全套基础教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></li>
<li><ol>
<li>HTML 编写规则 和语义化写法</li>
</ol>
</li>
<li>HTML 速成：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></li>
<li><ol>
<li>表单和验证</li>
</ol>
</li>
<li>html5表单验证：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></li>
<li><ol>
<li>公约和最佳实践方法</li>
</ol>
</li>
<li>前端代码规范秘籍：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></li>
<li><ol>
<li>SEO 基础知识</li>
</ol>
</li>
<li>SEO优化学习教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a></li>
</ul>
<h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><p>（CSS)</p>
<ul>
<li><ol>
<li>CSS 基础知识学习</li>
</ol>
</li>
<li><p>CSS3基础教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a></p>
</li>
<li><p>CSS3全套教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></p>
</li>
<li><ol>
<li>页面切图和布局实现</li>
</ol>
</li>
<li><p>浮动布局</p>
</li>
<li><p>浮动布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></p>
</li>
<li><p>定位布局</p>
</li>
<li><p>CSS定位布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></p>
</li>
<li><p>Display</p>
</li>
<li><p>display&amp;visibility：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></p>
</li>
<li><p>盒子模型</p>
</li>
<li><p>CSS盒子模型与定位：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></p>
</li>
<li><p>Grid 布局</p>
</li>
<li><p>如何用grid：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></p>
</li>
<li><p>Flex 布局</p>
</li>
<li><p>Flex伸缩布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a></p>
</li>
<li><ol>
<li>页面响应式布局设计</li>
</ol>
</li>
<li><p>六个案例学会响应式布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a></p>
</li>
</ul>
<h2 id="浏览器脚本语言"><a href="#浏览器脚本语言" class="headerlink" title="浏览器脚本语言"></a>浏览器脚本语言</h2><p>(JavaScript)</p>
<ul>
<li><ol>
<li>JavaScript基础语法和知识</li>
</ol>
</li>
<li>JavaScript基础语法：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li>
<li><ol>
<li>使用JavaScript 操作 DOM元素</li>
</ol>
</li>
<li>JS必会的DOM BOM操作：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></li>
<li><ol>
<li>Ajax 异步请求相关知识学习</li>
</ol>
</li>
<li>Ajax入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li>
<li><ol>
<li>ES6 以上版本 的JavaScript</li>
</ol>
</li>
<li>ES6-ES11新特性：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></li>
</ul>
<h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2><p>Version Control System</p>
<ul>
<li><ol>
<li>Git的基本用法</li>
</ol>
</li>
<li><p>Git最新教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></p>
</li>
<li><ol>
<li>相关平台/软件的使用</li>
</ol>
</li>
<li><p>GitHub</p>
</li>
<li><p>十分钟学会Github：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></p>
</li>
<li><p>GitLab</p>
</li>
<li><p>gitlab使用说明：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></p>
</li>
<li><p>Gitee</p>
</li>
<li><p>这个看中文网址就可以了，目前B站还没有很好的视频介绍</p>
</li>
</ul>
<h2 id="网络安全相关知识"><a href="#网络安全相关知识" class="headerlink" title="网络安全相关知识"></a>网络安全相关知识</h2><p>Web Security Knowledge</p>
<ul>
<li><ol>
<li>HTTPS 原理和使用</li>
</ol>
</li>
<li>你连HTTPS原理都不懂：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></li>
<li><ol>
<li>CORS 跨域请求和安全知识</li>
</ol>
</li>
<li>什么是CORS：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></li>
<li><ol>
<li>内容安全策略</li>
</ol>
</li>
<li>网络渗透：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></li>
<li><ol>
<li>OWASP 安全风险知识</li>
</ol>
</li>
<li>OWASP TOP10：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a></li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>Package Managers</p>
<ul>
<li><ol>
<li>npm</li>
</ol>
</li>
<li>包管理工具：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li>
<li><ol>
<li>yarn</li>
</ol>
</li>
<li>Yarn入门：<a href="https://gitee.com/link?target=https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a> (B站没有，推荐这个免费)</li>
</ul>
<h2 id="CSS-预处理-语言"><a href="#CSS-预处理-语言" class="headerlink" title="CSS 预处理 语言"></a>CSS 预处理 语言</h2><p>CSS Preprocessors</p>
<ul>
<li><ol>
<li>Sass</li>
</ol>
</li>
<li>SCSS从入门到实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></li>
<li><ol>
<li>PostCSS</li>
</ol>
</li>
<li>B站没太好的视频，建议买书《深入PostCSS Web设计》</li>
<li><ol>
<li>Less</li>
</ol>
</li>
<li>前端less教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a></li>
</ul>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>Build Tools</p>
<ul>
<li><ol>
<li>任务执行命令 [Task Runners]</li>
</ol>
</li>
<li><p>npm scripts</p>
</li>
<li><p>npm包管理应用：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></p>
</li>
<li><p>Gulp</p>
</li>
<li><p>Gulp入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a></p>
</li>
<li><ol>
<li>打包工具</li>
</ol>
</li>
<li><p>Webpack</p>
</li>
<li><p>Webpack从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></p>
</li>
<li><p>Parcel</p>
</li>
<li><p>Parcel初体验：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a></p>
</li>
<li><ol>
<li>代码格式化工具</li>
</ol>
</li>
<li><p>Prettier</p>
</li>
<li><p>Prettier和ESLint使用：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></p>
</li>
<li><p>ESLint</p>
</li>
<li><p>ESLint基础入门：<a href="https://gitee.com/link?target=https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a></p>
</li>
</ul>
<h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2><p>Web Framework</p>
<ul>
<li>React.js</li>
<li>React基础视频：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a></li>
<li>React全家桶：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></li>
<li>React实战博客：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a></li>
<li>React商城实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a></li>
<li>Vue.js</li>
<li>Vue2全家桶：<a href="https://gitee.com/link?target=https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a></li>
<li>Vue3全家桶：<a href="https://gitee.com/link?target=https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a></li>
<li>vuejs从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a></li>
<li>Angular</li>
<li>Angular基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a></li>
</ul>
<h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2><p>Web Components</p>
<ul>
<li>HTML Templates</li>
<li>Custom Elements</li>
<li>Shadow DOM</li>
<li>概要: 此部分内容没有找到合适视频</li>
</ul>
<h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2><p>CSS Frameworks</p>
<ul>
<li>BootStrap</li>
<li>一周学会BootStrap：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a></li>
<li>Material UI</li>
<li>Material UI入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a></li>
<li>Materialize CSS</li>
<li>Materialize CSS Crash Course：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a></li>
<li>ReactStrap</li>
</ul>
<h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2><p>Type Checkers</p>
<ul>
<li>TypeScript</li>
<li>TypeScript从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a></li>
<li>Flow</li>
</ul>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>Server Side Rendering （SSR）</p>
<ul>
<li><p>React.js</p>
</li>
<li><p>Next.js</p>
</li>
<li><p>Next.js入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></p>
</li>
<li><p>GatsbyJS</p>
</li>
<li><p>GatsbyJS 实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</p>
</li>
<li><p>Vue.js</p>
</li>
<li><p>Nuxt.js</p>
</li>
<li><p>Nuxt.js入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></p>
</li>
<li><p>Angular</p>
</li>
<li><p>Universal</p>
</li>
</ul>
<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2><p>GraphQL</p>
<ul>
<li>Cocos Creator</li>
<li>Cocos 图形游戏开发：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a></li>
<li>Three.js</li>
<li>Three.js基础教程-英文：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a></li>
<li>Three.js教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a></li>
</ul>
<h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2><p>Static Site Generators</p>
<ul>
<li>Next.js</li>
<li>Next.js入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li>
<li>GatsbyJS</li>
<li>GatsbyJS 实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</li>
<li>Nuxt.js</li>
<li>Nuxt.js入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></li>
<li>Vuepress</li>
<li>Vuepress入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a></li>
<li>Hugo</li>
<li>10分钟搭建个人网站：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a></li>
</ul>
<h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2><p>Mobile Applications</p>
<ul>
<li>React Native</li>
<li>ReactNatvie基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a></li>
<li>ReactNatvie实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a></li>
<li>UniApp</li>
<li>Uni-App从入门到实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a></li>
<li>Uni-App美团外卖：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a></li>
<li>Flutter</li>
<li>Flutter基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a></li>
<li>Flutter实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a></li>
<li>Ionic</li>
<li>Ionic入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a></li>
</ul>
<h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2><p>Desktop Applications</p>
<ul>
<li>Electron</li>
<li>Electron入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a></li>
<li>Electron基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></li>
</ul>
]]></content>
      <categories>
        <category>资源库</category>
        <category>收藏夹</category>
      </categories>
      <tags>
        <tag>收藏夹</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索框搜索防抖事件</title>
    <url>/2018/08/22/%E6%90%9C%E7%B4%A2%E6%A1%86%E6%90%9C%E7%B4%A2%E9%98%B2%E6%8A%96%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="搜索框-搜索防抖事件"><a href="#搜索框-搜索防抖事件" class="headerlink" title="搜索框-搜索防抖事件"></a>搜索框-搜索防抖事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//搜索框-搜索事件</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        //搜索内容</span><br><span class="line">        var txt = $(this).val().trim();</span><br><span class="line"></span><br><span class="line">        //显示的列表</span><br><span class="line">        var list = $(&quot;.layui-show .poplist li&quot;);</span><br><span class="line">        //匹配查询结果</span><br><span class="line">        for(var i  = 0; i&lt; list.length; i ++) &#123;</span><br><span class="line">            var item = $(list[i]).html();</span><br><span class="line">            if(item.indexOf(txt) &gt; -1) &#123;</span><br><span class="line">                $(list[i]).show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(list[i]).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>解决搜索框输入中文时，未输入完整词语就搜索的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//搜索框-搜索事件（解决中文输入法过程中，未输入完整就请求）</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">// 解决</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号后台配置</title>
    <url>/2024/03/21/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="设置关键词自动回复"><a href="#设置关键词自动回复" class="headerlink" title="设置关键词自动回复"></a>设置关键词自动回复</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E5%85%B3%E9%94%AE%E8%AF%8D%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D%E5%B7%B2%E5%8F%91%E8%A1%A8%E5%86%85%E5%AE%B9.png" alt="微信公众号后台设置"></p>
<h4 id="生成公众号二维码"><a href="#生成公众号二维码" class="headerlink" title="生成公众号二维码"></a>生成公众号二维码</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7.png" alt="生成二维码"></p>
<h4 id="获取开发者密码"><a href="#获取开发者密码" class="headerlink" title="获取开发者密码"></a>获取开发者密码</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E8%8E%B7%E5%8F%96%E5%BC%80%E5%8F%91%E8%80%85%E5%AF%86%E7%A0%81.png" alt="获取开发者密码"></p>
<h4 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E6%8E%A5%E5%8F%A3.png" alt="接口配置"></p>
<h4 id="客户端-微信服务器-开发者服务器"><a href="#客户端-微信服务器-开发者服务器" class="headerlink" title="客户端-微信服务器-开发者服务器"></a>客户端-微信服务器-开发者服务器</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E5%BC%80%E5%8F%91%E8%80%85-%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="客户端-微信服务器-开发者服务器"></p>
<h4 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E7%99%BD%E5%90%8D%E5%8D%95.png" alt="设置白名单"></p>
]]></content>
      <categories>
        <category>微信开发</category>
      </categories>
      <tags>
        <tag>微信开发</tag>
      </tags>
  </entry>
  <entry>
    <title>日期对象Date的常用方法</title>
    <url>/2020/08/10/%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1Date%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="创建Date实例"><a href="#创建Date实例" class="headerlink" title="创建Date实例"></a>创建Date实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let date = new Date();		// Fri Jul 14 2023 15:23:52 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let date = new Date(1689321710307);		// Fri Jul 14 2023 16:01:50 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let date = new Date(&#x27;2023-07-14 16:10:40&#x27;);	 // Fri Jul 14 2023 16:10:40 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let date = new Date(2023, 6, 14, 15, 23, 52);  // Fri Jul 14 2023 15:23:52 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><h4 id="1-Date对象方法"><a href="#1-Date对象方法" class="headerlink" title="1. Date对象方法"></a>1. Date对象方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let LDS = date.toLocaleDateString();	// 2023/7/14</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let LS = date.toLocaleString();			// 2023/7/14 15:23:52</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let LTS = date.toLocaleTimeString(); 	// 15:23:52</span><br></pre></td></tr></table></figure>

<h4 id="2-封装方法"><a href="#2-封装方法" class="headerlink" title="2. 封装方法"></a>2. 封装方法</h4><p>格式：<code>2023-07-14</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function formatDate(date) &#123;</span><br><span class="line">    const year = date.getFullYear();</span><br><span class="line">    const month = String(date.getMonth() + 1).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const day = String(date.getDate()).padStart(2, &#x27;0&#x27;);</span><br><span class="line"></span><br><span class="line">    return `$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const date = new Date();</span><br><span class="line">const formattedDate = formatDate(date);</span><br><span class="line">console.log(formattedDate); 	//	2023-07-14</span><br></pre></td></tr></table></figure>

<p>格式：<code>2023-07-14 15:30:45</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function formatDate(date, format) &#123;</span><br><span class="line">    const year = date.getFullYear();</span><br><span class="line">    const month = String(date.getMonth() + 1).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const day = String(date.getDate()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const hours = String(date.getHours()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const minutes = String(date.getMinutes()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const seconds = String(date.getSeconds()).padStart(2, &#x27;0&#x27;);</span><br><span class="line"></span><br><span class="line">    return format</span><br><span class="line">        .replace(&#x27;YYYY&#x27;, year)</span><br><span class="line">        .replace(&#x27;MM&#x27;, month)</span><br><span class="line">        .replace(&#x27;DD&#x27;, day)</span><br><span class="line">        .replace(&#x27;HH&#x27;, hours)</span><br><span class="line">        .replace(&#x27;mm&#x27;, minutes)</span><br><span class="line">        .replace(&#x27;ss&#x27;, seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const date = new Date();</span><br><span class="line">const formattedDate = formatDate(date, &#x27;YYYY-MM-DD HH:mm:ss&#x27;);</span><br><span class="line">console.log(formattedDate); // 2023-07-14 15:30:45</span><br></pre></td></tr></table></figure>

<p>格式：<code>2023-07-14 15:30:45</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function formatDate(date, separator = &#x27;-&#x27;) &#123;</span><br><span class="line">    const year = date.getFullYear();</span><br><span class="line">    const month = String(date.getMonth() + 1).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const day = String(date.getDate()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const hours = String(date.getHours()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const minutes = String(date.getMinutes()).padStart(2, &#x27;0&#x27;);</span><br><span class="line">    const seconds = String(date.getSeconds()).padStart(2, &#x27;0&#x27;);</span><br><span class="line"></span><br><span class="line">    const formattedDate = [year, month, day].join(separator);</span><br><span class="line">    const formattedTime = [hours, minutes, seconds].join(&#x27;:&#x27;);</span><br><span class="line"></span><br><span class="line">    return formattedDate + &#x27; &#x27; + formattedTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const date = new Date();</span><br><span class="line">const formattedDate = formatDate(date, &#x27;-&#x27;);</span><br><span class="line">console.log(formattedDate); // 2023-07-14 15:30:45</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后面两种方法，传参方式不一样，实现效果一样。</p>
</blockquote>
<blockquote>
<p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串（如果需要的话，会重复多次），以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p>
<p>参数：<code>targetLength</code>：当前字符串需要填充到的目标长度；<code>padString</code>：填充字符串。默认值为 “ “（空格）</p>
</blockquote>
<h3 id="获取时间戳（当前时间的毫秒数）"><a href="#获取时间戳（当前时间的毫秒数）" class="headerlink" title="获取时间戳（当前时间的毫秒数）"></a>获取时间戳（当前时间的毫秒数）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let t = date.getTime();		// 1689319432759</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let now = Date.now();    	// 1689319432759</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><code>Date.now()</code>: 静态方法，直接通过 <code>Date.now()</code> 调用，返回的是当前时间的毫秒数，不需要创建 <code>Date</code> 对象实例。</li>
<li><code>Date.getTime()</code>:  <code>Date</code> 对象的实例方法，需要先创建一个 <code>Date</code> 对象，然后通过该对象调用 <code>getTime()</code> 方法，返回的是该日期对象表示的时间的毫秒数。</li>
</ol>
<p>总结来说，<code>Date.now()</code> 更方便和直接，可以直接获取当前时间的毫秒数，而 <code>date.getTime()</code> 则是通过 <code>date</code> 对象获取该对象表示的时间的毫秒数。</p>
</blockquote>
<h3 id="获取年份"><a href="#获取年份" class="headerlink" title="获取年份"></a>获取年份</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let y = date.getFullYear();		// 2023</span><br></pre></td></tr></table></figure>

<h3 id="获取月份"><a href="#获取月份" class="headerlink" title="获取月份"></a>获取月份</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let m = date.getMonth() + 1;	// 7</span><br></pre></td></tr></table></figure>

<h3 id="获取月中的哪一日"><a href="#获取月中的哪一日" class="headerlink" title="获取月中的哪一日"></a>获取月中的哪一日</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let d = date.getDate();		// 14</span><br></pre></td></tr></table></figure>

<h3 id="获取小时"><a href="#获取小时" class="headerlink" title="获取小时"></a>获取小时</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let h = date.getHours();	// 15</span><br></pre></td></tr></table></figure>

<h3 id="获取分钟"><a href="#获取分钟" class="headerlink" title="获取分钟"></a>获取分钟</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let min = date.getMinutes();   // 23</span><br></pre></td></tr></table></figure>

<h3 id="获取秒数"><a href="#获取秒数" class="headerlink" title="获取秒数"></a>获取秒数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let s = date.getSeconds();		// 52</span><br></pre></td></tr></table></figure>

<h3 id="获取星期几"><a href="#获取星期几" class="headerlink" title="获取星期几"></a>获取星期几</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let day = date.getDay();		// 5</span><br></pre></td></tr></table></figure>

<h3 id="时间戳转换格式"><a href="#时间戳转换格式" class="headerlink" title="时间戳转换格式"></a>时间戳转换格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//时间戳转换格式</span><br><span class="line">function formatDateTime(timeStamp) &#123; </span><br><span class="line">    var date = new Date();</span><br><span class="line">    date.setTime(timeStamp * 1000);</span><br><span class="line">    var y = date.getFullYear();    </span><br><span class="line">    var m = date.getMonth() + 1;    </span><br><span class="line">    m = m &lt; 10 ? (&#x27;0&#x27; + m) : m;    </span><br><span class="line">    var d = date.getDate();    </span><br><span class="line">    d = d &lt; 10 ? (&#x27;0&#x27; + d) : d;    </span><br><span class="line">    var h = date.getHours();  </span><br><span class="line">    h = h &lt; 10 ? (&#x27;0&#x27; + h) : h;  </span><br><span class="line">    var minute = date.getMinutes();  </span><br><span class="line">    var second = date.getSeconds();  </span><br><span class="line">    minute = minute &lt; 10 ? (&#x27;0&#x27; + minute) : minute;    </span><br><span class="line">    second = second &lt; 10 ? (&#x27;0&#x27; + second) : second;   </span><br><span class="line">    return y + &#x27;-&#x27; + m + &#x27;-&#x27; + d+&#x27; &#x27;+h+&#x27;:&#x27;+minute+&#x27;:&#x27;+second;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="js获取当前时间-昨天、今天、明天"><a href="#js获取当前时间-昨天、今天、明天" class="headerlink" title="js获取当前时间(昨天、今天、明天)"></a><a href="https://www.cnblogs.com/menxiaojin/p/13753525.html">js获取当前时间(昨天、今天、明天)</a></h4><h4 id="获取时间戳-valueOf"><a href="#获取时间戳-valueOf" class="headerlink" title="获取时间戳-valueOf()"></a>获取时间戳-valueOf()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date().valueOf();</span><br></pre></td></tr></table></figure>

<h4 id="new-Date-方法"><a href="#new-Date-方法" class="headerlink" title="new Date()方法"></a>new Date()方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toDateString()</span><br><span class="line">Wed Mar 02 2020</span><br><span class="line">new Date().toLocaleDateString()</span><br><span class="line">2020/3/2</span><br><span class="line">new Date().toLocaleTimeString()</span><br><span class="line">17:50:21</span><br><span class="line">new Date().toLocaleString();</span><br><span class="line">2020/3/2 17:46:52</span><br><span class="line">new Date().toTimeString()</span><br><span class="line">17:50:59 GMT+0800 (中国标准时间)</span><br><span class="line">new Date().toUTCString()</span><br><span class="line">Wed, 02 Mar 2020 09:51:30 GMT</span><br></pre></td></tr></table></figure>

<h4 id="获取明天的日期并格式化"><a href="#获取明天的日期并格式化" class="headerlink" title="获取明天的日期并格式化"></a>获取明天的日期并格式化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 格式化日期</span><br><span class="line">function format(t, symbol)&#123;</span><br><span class="line">    var year = t.getFullYear()       // 年份</span><br><span class="line">        , month = t.getMonth() + 1   // 月份</span><br><span class="line">        , date = t.getDate()         // 日</span><br><span class="line">        , symbol = symbol || &#x27;-&#x27;;    // 分隔符，默认为-</span><br><span class="line">    month = month &lt; 10 ? &#x27;0&#x27; + month : month;</span><br><span class="line">    date = date &lt; 10 ? &#x27;0&#x27; + date : date;</span><br><span class="line">    return year + symbol + month + symbol + date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var now = new Date()               // 获取当前时间</span><br><span class="line">    , time_stamp = now.setDate(now.getDate() +  1)</span><br><span class="line">    , tomorrow = format(new Date(time_stamp));  // 明天</span><br></pre></td></tr></table></figure>

<h4 id="获取前后相隔n天的日期"><a href="#获取前后相隔n天的日期" class="headerlink" title="获取前后相隔n天的日期"></a>获取前后相隔n天的日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据间隔天数获取日期</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function getDate(interval, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date()               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据某天的前后几天获取日期"><a href="#根据某天的前后几天获取日期" class="headerlink" title="根据某天的前后几天获取日期"></a>根据某天的前后几天获取日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据某天的前/后几天</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param value：某天的日期</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line">function getPreDate(interval, value, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date(value)               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现倒计时功能"><a href="#实现倒计时功能" class="headerlink" title="实现倒计时功能"></a>实现倒计时功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 倒计时功能</span><br><span class="line">var div = document.getElementById(&quot;showtime&quot;);</span><br><span class="line">setInterval (function () &#123;</span><br><span class="line">    div.innerHTML = showtime();</span><br><span class="line">&#125;, 1000); </span><br><span class="line"></span><br><span class="line">var showtime = function () &#123;</span><br><span class="line">    var nowTime = new Date(),  // 获取当前时间</span><br><span class="line">        // endTime = new Date(&quot;2022/8/20&quot;);  // 定义结束时间  </span><br><span class="line">        endTime = new Date(&quot;2022/8/20 23:59:59&quot;);  // 定义结束具体时间——即8月21凌晨结束</span><br><span class="line">    var time = endTime.getTime() - nowTime.getTime(),  // 距离结束时间的毫秒数</span><br><span class="line">        d = Math.floor(time/(1000*60*60*24)),  // 计算天数</span><br><span class="line">        h = Math.floor(time/(1000*60*60)%24),  // 计算小时数</span><br><span class="line">        m = Math.floor(time/(1000*60)%60),  // 计算分钟数</span><br><span class="line">        s = Math.floor(time/1000%60);  // 计算秒数</span><br><span class="line"></span><br><span class="line">    h = h &lt; 10 ? &quot;0&quot; + h : h;</span><br><span class="line">    m = m &lt; 10 ? &quot;0&quot; + m : m;</span><br><span class="line">    s = s &lt; 10 ? &quot;0&quot; + s : s;</span><br><span class="line">    return d + &quot;天&quot; + h + &quot;:&quot; + m + &quot;:&quot; + s;  //返回倒计时的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>注意事项</title>
    <url>/2019/07/11/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p><code>&#123;与//之间要有空格</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(os === 1)&#123;	// iOS</span><br><span class="line">	// iOS</span><br><span class="line">&#125; else if(os === 2) &#123; // 安卓</span><br><span class="line">	// 安卓</span><br><span class="line">&#125; else if(os === 3) &#123;// H5小游戏        // 这样写会影响后面的代码执行  &#123;与//之间要有空格</span><br><span class="line">	// H5小游戏</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB前端</category>
      </categories>
      <tags>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>普通HTML页面分享链接到微信显示标题、描述、缩略图</title>
    <url>/2022/06/21/%E6%99%AE%E9%80%9AHTML%E9%A1%B5%E9%9D%A2%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5%E5%88%B0%E5%BE%AE%E4%BF%A1%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98%E3%80%81%E6%8F%8F%E8%BF%B0%E3%80%81%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>显示弹窗时，禁止页面内容滑动</title>
    <url>/2018/07/09/%E6%98%BE%E7%A4%BA%E5%BC%B9%E7%AA%97%E6%97%B6%EF%BC%8C%E7%A6%81%E6%AD%A2%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9%E6%BB%91%E5%8A%A8/</url>
    <content><![CDATA[<blockquote>
<p>当页面内容过长，出现滚动条的情况下，显示弹窗时，禁止弹窗底下的页面内容可滑动；隐藏弹窗时，页面恢复可滑动</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/blog/modal/%E6%98%BE%E7%A4%BA%E5%BC%B9%E7%AA%97.png" alt="显示弹窗.png (377×538) (raw.githubusercontent.com)"></p>
<h3 id="控制body样式来实现"><a href="#控制body样式来实现" class="headerlink" title="控制body样式来实现"></a>控制body样式来实现</h3><p>显示弹窗：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function openModal() &#123;</span><br><span class="line">    const modalContainer = document.getElementById(&#x27;modalContainer&#x27;);   // 弹窗内容</span><br><span class="line">    const mask = document.getElementById(&#x27;mask&#x27;);   // 蒙层</span><br><span class="line"></span><br><span class="line">    modalContainer.style.display = &#x27;block&#x27;;</span><br><span class="line">    mask.style.display = &#x27;block&#x27;;</span><br><span class="line">    document.body.style.overflow = &#x27;hidden&#x27;; // 禁止滚动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>隐藏弹窗：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function closeModal() &#123;</span><br><span class="line">    const modalContainer = document.getElementById(&#x27;modalContainer&#x27;);    // 弹窗内容</span><br><span class="line">    const mask = document.getElementById(&#x27;mask&#x27;);   // 蒙层</span><br><span class="line"></span><br><span class="line">    modalContainer.style.display = &#x27;none&#x27;;</span><br><span class="line">    mask.style.display = &#x27;none&#x27;;</span><br><span class="line">    document.body.style.overflow = &#x27;&#x27;; // 允许滚动</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="event-preventDefault-方法（取消事件的默认行为）"><a href="#event-preventDefault-方法（取消事件的默认行为）" class="headerlink" title="event.preventDefault()方法（取消事件的默认行为）"></a><code>event.preventDefault()</code>方法（取消事件的默认行为）</h3><p>显示弹窗：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let isModalOpen = false;</span><br><span class="line">function openModal() &#123;</span><br><span class="line">    const modalContainer = document.getElementById(&#x27;modalContainer&#x27;);   // 弹窗内容</span><br><span class="line">    const mask = document.getElementById(&#x27;mask&#x27;);   // 蒙层</span><br><span class="line"></span><br><span class="line">    modalContainer.style.display = &#x27;block&#x27;;</span><br><span class="line">    mask.style.display = &#x27;block&#x27;;</span><br><span class="line">    isModalOpen = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>隐藏弹窗：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function closeModal() &#123;</span><br><span class="line">    const modalContainer = document.getElementById(&#x27;modalContainer&#x27;);    // 弹窗内容</span><br><span class="line">    const mask = document.getElementById(&#x27;mask&#x27;);   // 蒙层</span><br><span class="line"></span><br><span class="line">    modalContainer.style.display = &#x27;none&#x27;;</span><br><span class="line">    mask.style.display = &#x27;none&#x27;;</span><br><span class="line">    isModalOpen = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加事件监听：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function preventScrolling(event) &#123;</span><br><span class="line">    if (isModalOpen) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&#x27;scroll&#x27;, preventScrolling);</span><br><span class="line">window.addEventListener(&#x27;touchmove&#x27;, preventScrolling);</span><br></pre></td></tr></table></figure>

<p>会报错：<code>[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See &lt;URL&gt;</code></p>
<p>解决报错：</p>
<blockquote>
<p>事件监听，加上<code>&#123; passive: false &#125;</code>参数</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#x27;scroll&#x27;, preventScrolling, &#123; passive: false &#125;);</span><br><span class="line">window.addEventListener(&#x27;touchmove&#x27;, preventScrolling, &#123; passive: false &#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器调试技巧</title>
    <url>/2020/09/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><code>这里以Chrome浏览器做演示</code></p>
<h3 id="一、展开某元素的所有子节点"><a href="#一、展开某元素的所有子节点" class="headerlink" title="一、展开某元素的所有子节点"></a>一、展开某元素的所有子节点</h3><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/%E5%B1%95%E5%BC%80%E6%89%80%E6%9C%89%E5%AD%90%E8%8A%82%E7%82%B9.png" alt="展开所有子节点.png (952×488) (raw.githubusercontent.com)"></p>
<ol>
<li>选中需要被展开的元素前面的三角箭头</li>
<li>按下键盘上的‘Alt’键</li>
<li>单击鼠标</li>
<li><code>”modal-dialog&quot;</code>里面的子节点都展开</li>
</ol>
<h4 id="收起"><a href="#收起" class="headerlink" title="收起"></a>收起</h4><ol>
<li>选中需要被展开的元素前面的三角箭头，单击鼠标，再单击鼠标，看到里面的子节点都是展开状态。</li>
<li>选中需要被展开的元素前面的三角箭头，按下键盘上的‘Alt’键，单击鼠标，再单击鼠标，看到里面的子节点是收起状态。</li>
</ol>
<h3 id="二、控制台写多行代码"><a href="#二、控制台写多行代码" class="headerlink" title="二、控制台写多行代码"></a>二、控制台写多行代码</h3><p>在控制台，编写多行代码时，实现换行的快捷键：<code>Shift + Enter</code></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%86%99%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="控制台写多行代码快捷键.png (448×264) (raw.githubusercontent.com)"></p>
<h3 id="三、全局搜索资源中的匹配代码-匹配文本"><a href="#三、全局搜索资源中的匹配代码-匹配文本" class="headerlink" title="三、全局搜索资源中的匹配代码/匹配文本"></a>三、全局搜索资源中的匹配代码/匹配文本</h3><p>快捷键：<code>Ctrl + Shift + F</code></p>
<p><code>注意：输入快捷键之前，在浏览器已经按了F12，也就是已经打开浏览器的开发者工具</code></p>
<p>如果没有打开浏览器的开发者工具就按<code>Ctrl + Shift + F</code>，输入法会切换到繁体字，如果不小心切换到繁体字状态，可以再按一次<code>Ctrl + Shift + F</code>，就切回来简体。（前提是操作系统中使用 Ctrl + Shift + F 快捷键来切换输入法的字体，如果不是，忽略）</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E8%B5%84%E6%BA%90%E5%8C%B9%E9%85%8D%E6%96%87%E6%9C%AC1.png" alt="全局搜索资源匹配文本1.png (896×360) (raw.githubusercontent.com)"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E8%B5%84%E6%BA%90%E5%8C%B9%E9%85%8D%E6%96%87%E6%9C%AC2.png" alt="全局搜索资源匹配文本2.png (715×582) (raw.githubusercontent.com)"></p>
<blockquote>
<p> 这效果类似于在代码编辑器中，对项目进行全局搜索一样。但是有时在查看学习和了解别人网站时，可以使用这种全局搜索查找。</p>
</blockquote>
<h3 id="四、控制台中复制变量"><a href="#四、控制台中复制变量" class="headerlink" title="四、控制台中复制变量"></a>四、控制台中复制变量</h3><p>有时候在控制台打印出来的变量值，想复制到其他地方。简单的变量，直接选中复制即可。但是对于对象数组这样的变量，选中复制粘贴之后，不是想要的效果。如果想复制对象数组这样的变量值，使用<code>copy(变量名)</code>，然后粘贴即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy(变量名)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%A4%8D%E5%88%B6%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F.png" alt="控制台复制复杂变量.png (564×512) (raw.githubusercontent.com)"></p>
<p><a href="https://www.cnblogs.com/white0710/p/6686290.html">兼容各个浏览器的事件监听代码</a></p>
<p><a href="https://blog.csdn.net/qq_34764577/article/details/81184628">Chrome的插件扩展程序安装目录是什么？在哪个文件夹？</a></p>
<p><a href="https://blog.csdn.net/qq_36485978/article/details/97897798">浏览器调试工具如何查看placeholder值</a></p>
<p><a href="https://www.bilibili.com/read/cv13356084">打包备份/转移安装微软Edge和谷歌Chrome浏览器的扩展程序/插件【手把手保姆级教程】</a></p>
]]></content>
      <categories>
        <category>WEB前端</category>
      </categories>
      <tags>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流效果</title>
    <url>/2019/08/15/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h4 id="JS实现瀑布流效果"><a href="#JS实现瀑布流效果" class="headerlink" title="JS实现瀑布流效果"></a>JS实现瀑布流效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  	.....</span><br><span class="line">    &lt;div class=&quot;item&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">   margin: 0;</span><br><span class="line">   padding: 0;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&#123;</span><br><span class="line">   width: 100%;</span><br><span class="line">   height: 2000px;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&gt;div&#123;</span><br><span class="line">   float: left;</span><br><span class="line">   border: 1px solid #ddd;</span><br><span class="line">   padding: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&gt;div&gt;img&#123;</span><br><span class="line">   width: 130px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload =  function () &#123;</span><br><span class="line">    // 获取主容器的宽度</span><br><span class="line">    var content = document.getElementsByClassName(&#x27;content&#x27;)[0];</span><br><span class="line">    contentWidth = content.offsetWidth;</span><br><span class="line"></span><br><span class="line">    // 获取单个图片的宽度</span><br><span class="line">    var imgs = content.children;</span><br><span class="line">    var imgsWidth = imgs[0].offsetWidth;</span><br><span class="line"></span><br><span class="line">    // 第一行可以排列多少张图片</span><br><span class="line">    var nums = Math.floor(contentWidth/imgsWidth)</span><br><span class="line"></span><br><span class="line">    // 收集第一排的所有高度</span><br><span class="line">    var arrHeight = [];</span><br><span class="line"></span><br><span class="line">    for(var i = 0; i &lt; imgs.length; i++) &#123;</span><br><span class="line">      if(i &lt; nums) &#123;</span><br><span class="line">        arrHeight.push(imgs[i].offsetHeight)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 创建一个元素的对象</span><br><span class="line">        var obj = &#123;</span><br><span class="line">          minH: arrHeight[0],</span><br><span class="line">          minI: 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(var j = 0; j &lt; arrHeight.length; j++) &#123;</span><br><span class="line">          if(arrHeight[j] &lt; obj.minH) &#123;</span><br><span class="line">            obj.minH = arrHeight[j]</span><br><span class="line">            obj.minI = j</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        imgs[i].style.position = &quot;absolute&quot;</span><br><span class="line">        imgs[i].style.left = imgs[obj.minI].offsetLeft + &quot;px&quot;</span><br><span class="line">        imgs[i].style.top = obj.minH + &quot;px&quot;</span><br><span class="line">        arrHeight[obj.minI] = arrHeight[obj.minI] + imgs[i].offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="纯CSS实现瀑布流效果-方法1"><a href="#纯CSS实现瀑布流效果-方法1" class="headerlink" title="纯CSS实现瀑布流效果-方法1"></a>纯CSS实现瀑布流效果-方法1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;shell&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .shell&#123;</span><br><span class="line">        max-width: 1300px;</span><br><span class="line">        column-count: 5;</span><br><span class="line">        column-gap: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .image&#123;</span><br><span class="line">        margin-bottom: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .image img&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:1200px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:850px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:600px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>pinterest是使用瀑布流最具代表性的网站</p>
<h4 id="纯CSS实现瀑布流效果-方法2-带编号（竖向）"><a href="#纯CSS实现瀑布流效果-方法2-带编号（竖向）" class="headerlink" title="纯CSS实现瀑布流效果-方法2-带编号（竖向）"></a>纯CSS实现瀑布流效果-方法2-带编号（竖向）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;shell&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">.shell&#123;</span><br><span class="line">    column-count: 4;</span><br><span class="line">    column-gap: 0;</span><br><span class="line">&#125;</span><br><span class="line">.image&#123;</span><br><span class="line">    padding: 2px;</span><br><span class="line">    position: relative;</span><br><span class="line">    counter-increment: item-counter;</span><br><span class="line">&#125;</span><br><span class="line">.image img&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line">.image::after&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    display: block;</span><br><span class="line">    top: 2px;</span><br><span class="line">    left: 2px;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    color: #fff;</span><br><span class="line">    content: counter(item-counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/stevenlei/pen/vYNZaZN">https://codepen.io/stevenlei/pen/vYNZaZN</a></p>
<h4 id="纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox"><a href="#纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox" class="headerlink" title="纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox"></a>纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;masonry&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;https://picsum.photos/360/460?random=1&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">	......</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;https://picsum.photos/360/420?random=15&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 4px;</span><br><span class="line">  font-family: Helvetica;</span><br><span class="line">  </span><br><span class="line">  /* Centering &amp; Limit Width */</span><br><span class="line">  margin: auto;</span><br><span class="line">  width: 720px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.masonry &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding: 2px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  counter-increment: item-counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item img &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item::after &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: block;</span><br><span class="line">  top: 2px;</span><br><span class="line">  left: 2px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 24px;</span><br><span class="line">  background-color: #000;</span><br><span class="line">  color: #fff;</span><br><span class="line">  content: counter(item-counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+1) &#123;</span><br><span class="line">  order: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+2) &#123;</span><br><span class="line">  order: 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+3) &#123;</span><br><span class="line">  order: 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n) &#123;</span><br><span class="line">  order: 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片资源：<a href="https://picsum.photos/">picsum</a></p>
<p>引用方式：<a href="https://picsum.photos/360/460?random=1">https://picsum.photos/360/460?random=1</a></p>
<p>代码参考：<a href="https://codepen.io/stevenlei/pen/PoPjBBm">https://codepen.io/stevenlei/pen/PoPjBBm</a> </p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>滚动条相关笔记</title>
    <url>/2018/08/25/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="滚动条样式修改"><a href="#滚动条样式修改" class="headerlink" title="滚动条样式修改"></a>滚动条样式修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 火狐浏览器</span><br><span class="line">.dashboard-container,</span><br><span class="line">.no-page-table .layui-table-main&#123;</span><br><span class="line">    // scrollbar-color: #0064a7 #8ea5b5;   // 如果有scrollbar-width才设置</span><br><span class="line">    scrollbar-width:none;				// 目前只有3个值可选：auto、thin、none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 针对谷歌浏览器、360浏览器、safari浏览器、Edge、Opera等</span><br><span class="line">.no-page-table ::-webkit-scrollbar,</span><br><span class="line">.right-content ::-webkit-scrollbar&#123;  /* 滚动条整体部分 */</span><br><span class="line">    width: 0;</span><br><span class="line">    margin-right:2px</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-button,</span><br><span class="line">.right-content ::-webkit-scrollbar-button &#123; /* 滚动条两端的按钮 */</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">// ::-webkit-scrollbar:horizontal针对横向滚动条，为了方便鼠标拖动，如果也设置为0，不好控制</span><br><span class="line">.no-page-table ::-webkit-scrollbar:horizontal,</span><br><span class="line">.right-content ::-webkit-scrollbar:horizontal &#123;   </span><br><span class="line">    height:6px;</span><br><span class="line">    margin-bottom:2px</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-track,</span><br><span class="line">.right-content ::-webkit-scrollbar-track  &#123;  /* 外层轨道 */</span><br><span class="line">    box-shadow: inset 0 0 5px transparent;</span><br><span class="line">    border-radius: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-track-piece,</span><br><span class="line">.right-content ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分 */</span><br><span class="line">    background-color: transparent;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-thumb,</span><br><span class="line">.right-content ::-webkit-scrollbar-thumb&#123;  /* 滑块 */</span><br><span class="line">    /* width:1px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    background: #CBCBCB; */</span><br><span class="line">    /*滚动条里面小方块*/</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    background: rgba(0, 0, 0, 0.2);</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-corner,</span><br><span class="line">.right-content ::-webkit-scrollbar-corner &#123; /* 边角 */</span><br><span class="line">    width: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-thumb:hover,</span><br><span class="line">.right-content ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</span><br><span class="line">    background: #909090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要自定义设置其他样式，可根据上面的属性进行自定义设置</p>
<h4 id="如果设置滚动条宽度为0，可简略写："><a href="#如果设置滚动条宽度为0，可简略写：" class="headerlink" title="如果设置滚动条宽度为0，可简略写："></a>如果设置滚动条宽度为0，可简略写：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 火狐浏览器 */</span><br><span class="line">.dashboard-container,</span><br><span class="line">.no-page-table .layui-table-main&#123;</span><br><span class="line">    scrollbar-width:none;    // 这个值要设置给真实滚动内容的盒子，直接给html，不会全部生效</span><br><span class="line">&#125;</span><br><span class="line">// scrollbar-width的设置元素与谷歌浏览器::-webkit-scrollbar设置的元素可能不一样，要针对实际情况设置</span><br><span class="line"></span><br><span class="line">/* 滚动条整体部分 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar,</span><br><span class="line">.right-content ::-webkit-scrollbar&#123;  </span><br><span class="line">    width: 0;</span><br><span class="line">&#125;</span><br><span class="line">/* 滚动条两端的按钮 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar-button,</span><br><span class="line">.right-content ::-webkit-scrollbar-button &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">/* 横向滚动条 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar:horizontal,</span><br><span class="line">.right-content ::-webkit-scrollbar:horizontal &#123;</span><br><span class="line">    height:6px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Custom CSS Scrollbar for Firefox</a></p>
<p><a href="https://stackoverflow.com/questions/7357203/custom-scrollbars">Custom scrollbars</a></p>
<p><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Custom CSS Scrollbar for Firefox</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/scrollbar-color">scrollbar-color</a></p>
<p><a href="http://www.divcss5.com/css3-style/c57127.shtml">如何用CSS修改浏览器滚动条的样式</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/144204013">浏览器滚动条样式修改</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;  /* 滚动条整体部分 */</span><br><span class="line">     width:10px;</span><br><span class="line">     margin-right:2px</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-button &#123; /* 滚动条两端的按钮 */</span><br><span class="line">     width:10px;</span><br><span class="line">     background-color: yellow;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar:horizontal &#123;</span><br><span class="line">     height:10px;</span><br><span class="line">     margin-bottom:2px</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-track &#123;  /* 外层轨道 */</span><br><span class="line">     border-radius: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分 */</span><br><span class="line">     background-color: #333333;</span><br><span class="line">     border-radius: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-thumb &#123;  /* 滑块 */</span><br><span class="line">     width:10px;</span><br><span class="line">     border-radius: 5px;</span><br><span class="line">     background: #CBCBCB;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-corner &#123; /* 边角 */</span><br><span class="line">     width: 10px;</span><br><span class="line">     background-color: red;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</span><br><span class="line">     background: #909090;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/cddcj/article/details/70332771">CSS设置滚动条样式</a></p>
<h4 id="监听滚动条事件"><a href="#监听滚动条事件" class="headerlink" title="监听滚动条事件"></a>监听滚动条事件</h4><p><code>.scroll</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//监听内容区的滚动事件</span><br><span class="line">$(&quot;.dashboard-container&quot;).scroll(function() &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    timer = setTimeout(function()&#123;</span><br><span class="line">        var hourDataTop = $(&quot;#hourData&quot;).offset().top;</span><br><span class="line">        var viewWidth = window.innerWidth;</span><br><span class="line">        var viewHeight = window.innerHeight;</span><br><span class="line"></span><br><span class="line">        // 内容滚动高度</span><br><span class="line">        var sctop = $(&quot;.dashboard-container&quot;).scrollTop(); </span><br><span class="line">        var isPC = IsPC();	// 是否PC端</span><br><span class="line">        var isHorizontal = viewWidth &gt; viewHeight;   // 是否横屏</span><br><span class="line"></span><br><span class="line">        // alert(isHorizontal);</span><br><span class="line"></span><br><span class="line">        var detailTablePos = isPC ? 153 : (isHorizontal ? 253 : 480);</span><br><span class="line">        var hourDataPos = isPC ? 90  : (isHorizontal ? 140 : 140);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(sctop &gt;= detailTablePos) &#123;</span><br><span class="line">            // 相关操作</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">           // 相关操作</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,150);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="控制滚动条滚动到某个位置"><a href="#控制滚动条滚动到某个位置" class="headerlink" title="控制滚动条滚动到某个位置"></a>控制滚动条滚动到某个位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;scrollBox&#x27;).scrollTop = $(el).offset().top;</span><br><span class="line"></span><br><span class="line">scrollBox：滚动的盒子的id</span><br><span class="line">$(el).offset().top: 元素的位置</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>火狐兼容</title>
    <url>/2019/07/11/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="文本溢出省略号显示-火狐不兼容"><a href="#文本溢出省略号显示-火狐不兼容" class="headerlink" title="文本溢出省略号显示-火狐不兼容"></a>文本溢出省略号显示-火狐不兼容</h3><h4 id="第一种解决方案："><a href="#第一种解决方案：" class="headerlink" title="第一种解决方案："></a>第一种解决方案：</h4><p>layui框架对文本溢出隐藏省略号显示<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/1.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<h5 id="解决：将溢出文字修剪，而不用省略号显示"><a href="#解决：将溢出文字修剪，而不用省略号显示" class="headerlink" title="解决：将溢出文字修剪，而不用省略号显示"></a>解决：将溢出文字修剪，而不用省略号显示</h5><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.activity-table .layui-table-cell&#123;</span><br><span class="line">    text-overflow: clip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/2.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<h4 id="第二种解决方案："><a href="#第二种解决方案：" class="headerlink" title="第二种解决方案："></a>第二种解决方案：</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/3.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<p>使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>
<p>在谷歌浏览器没有问题。火狐浏览器不兼容，IE对文本溢出本来是没有兼容问题的，因为这个文本是在表格（table）里面的，所以IE也会有兼容问题。</p>
<p>要解决IE的兼容问题，要将td改为display:inline-block;</p>
<p>由于改为这样，样式需要改变的地方比较多，而且还是不兼容火狐，所以<b>使用JQ截取字符串来解决.</b></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//页面结构</span><br><span class="line">&lt;td class=<span class="string">&quot;link word_cont&quot;</span>&gt;</span><br><span class="line">Android：&lt;a href=<span class="string">&quot;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">ios：&lt;a href=<span class="string">&quot;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">//处理溢出隐藏省略号显示 兼容性问题</span><br><span class="line">$(<span class="string">&#x27;.word_cont a&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    //获取td宽度</span><br><span class="line">    var tdWidth = $(<span class="string">&quot;.word_cont&quot;</span>).width();</span><br><span class="line">    //一个字符宽度</span><br><span class="line">    var internal = 5; </span><br><span class="line">    //显示个数</span><br><span class="line">    var maxwidth = Math.floor((tdWidth- 160)/internal) ;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>($(this).text().length&gt;maxwidth)&#123;</span><br><span class="line">        //截取字符串</span><br><span class="line">        $(this).text($(this).text().substring(0,maxwidth));</span><br><span class="line">        //多余的用省略号显示</span><br><span class="line">        $(this).html($(this).html()+<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    //先隐藏，截取之后，再显示</span><br><span class="line">    $(this).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;inline-block&quot;</span>);   </span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>但是有个问题，由于字母，数字，分号(.)，空格(&nbsp;)的字符大小不太一样，<br>所以以一个字符5px来算，不是特别精准。但大致可以解决这个问题。<br>（若有更好的方法，可以留言给我，感谢！）</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>火狐浏览器使用firebug插件</p>
]]></content>
      <categories>
        <category>兼容性处理</category>
        <category>火狐兼容</category>
      </categories>
      <tags>
        <tag>火狐兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端H5页面强制横屏显示</title>
    <url>/2021/03/22/%E7%A7%BB%E5%8A%A8%E7%AB%AFH5%E9%A1%B5%E9%9D%A2%E5%BC%BA%E5%88%B6%E6%A8%AA%E5%B1%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>HTML结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;mb-3&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;exampleFormControlInput1&quot; class=&quot;form-label&quot;&gt;账号&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleFormControlInput1&quot; placeholder=&quot;请输入账号&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;mb-3&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;exampleFormControlInput1&quot; class=&quot;form-label&quot;&gt;密码&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;exampleFormControlInput1&quot; placeholder=&quot;请输入密码&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;mb-3&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;exampleFormControlTextarea1&quot; class=&quot;form-label&quot;&gt;备注&lt;/label&gt;</span><br><span class="line">        &lt;textarea class=&quot;form-control&quot; id=&quot;exampleFormControlTextarea1&quot; rows=&quot;3&quot; placeholder=&quot;请输入备注&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>CSS</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 竖屏 */</span><br><span class="line">@media screen and (orientation: portrait) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">        width: 100vh;</span><br><span class="line">        height: 100vw;</span><br><span class="line">        top: calc((100vh - 100vw) / 2);</span><br><span class="line">        left: calc((100vw - 100vh) / 2);</span><br><span class="line">        transform: rotate(90deg);</span><br><span class="line">        /* transform-origin: 50% 50%; */</span><br><span class="line">        /* transform-origin: center center; */</span><br><span class="line">        /* transform-origin: center; */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 横屏 */</span><br><span class="line">@media screen and (orientation: landscape) &#123;</span><br><span class="line">    .container &#123;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        transform: none;</span><br><span class="line">        /* transform-origin: 50% 50%; */</span><br><span class="line">        /* transform-origin: center center; */</span><br><span class="line">        /* transform-origin: center; */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>transform-origin：更改一个元素变形的原点</p>
<p><code>rotate()</code>函数的转换原点是旋转中心</p>
<p>默认的转换原点是 <code>center</code>，所以如果是以center为旋转中心，可以不写<code>transform-origin</code>属性，或者写<code>transform-origin: 50% 50%;</code>、<code>transform-origin: center center;</code>、<code>transform-origin: center;</code>都可以。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BC%BA%E5%88%B6%E9%A1%B5%E9%9D%A2%E6%A8%AA%E5%B1%8F%E6%98%BE%E7%A4%BA/1.png" alt="强制页面横屏显示"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端调试方法汇总</title>
    <url>/2019/07/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="移动端开发所的资源与小技巧"><a href="#移动端开发所的资源与小技巧" class="headerlink" title="移动端开发所的资源与小技巧"></a><a href="https://github.com/jtyjty99999/mobileTech">移动端开发所的资源与小技巧</a></h4><h3 id="一：Android手机-chrome（真机调试）"><a href="#一：Android手机-chrome（真机调试）" class="headerlink" title="一：Android手机 + chrome（真机调试）"></a>一：Android手机 + chrome（真机调试）</h3><p><a href="https://juejin.im/post/5b15022ff265da6e163720c6">参考的博客-掘金</a></p>
<h5 id="一台Android手机，一台电脑，一根Android数据线"><a href="#一台Android手机，一台电脑，一根Android数据线" class="headerlink" title="一台Android手机，一台电脑，一根Android数据线"></a>一台Android手机，一台电脑，一根Android数据线</h5><h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><p>1、在Android手机上安装<strong>chrome浏览器</strong><br>2、打开手机的开发者模式（开发人员选项——“USB调试”打开）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/usb0.png" alt="打开“USB调试”"><br>3、将手机与电脑通过USB线连接，弹出对话框<strong>“是否允许USB调试”</strong>，选择“确定”<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/usb.png" alt="允许USB调试"></p>
<p><strong>遇到的问题：</strong><br>问题一：连接电脑显示  “无法识别的USB”<br>解决方法：<a href="https://www.yunqishi.net/video/9896.html">参考的链接</a><br>    1. 在控制面板打开设备管理器<br>    2. 展开通用串行总线控制器，右击设备选择卸载， 每个设备重复以上操作，重启计算机系统会自动安装usb控制器<br>    （这里我选择了unknown的卸载了，拔掉USB线，然后重启电脑）<br>    3.重启电脑之后，重新插上USB线，会自动安装驱动</p>
<p>问题二：如果连不了，可以下载360手机助手连接一下手机。</p>
<p>4、打开手机上的chrome浏览器，并进入需要调试的页面（例如：进入百度搜索内容）<br>5、打开PC端chrome浏览器，在地址栏中输入chrome://inspect/，进入调试页面，此时，我们发现，chrome检测到了我们的手机<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/chrome.png" alt="chrome检测到了我们的手机"><br>6、点击<strong>inspect</strong> 会弹出chrome调试工具，然后就可以在电脑上调试真机了</p>
<p><strong>注意事项：</strong><br>在上面第6步的时候，点击inspect后，弹出的面板可能是一片空白，这是因为，<strong>首次使用该功能时，需要连接外网（翻墙）</strong>，初始化后，成功显示了调试工具的面板后，以后就不需要翻墙了。</p>
<h3 id="二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole"><a href="#二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole" class="headerlink" title="二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole"></a>二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole</h3><p>在页面中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vConsole/3.3.3/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vConsole = new VConsole();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>加入之后，在移动端页面就可以看到console.log打印出来的结果了</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/vConsole.png" alt="移动端-打印输出"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/vConsole2.png" alt="移动端-打印输出"></p>
<h4 id="判断是否为移动端设备"><a href="#判断是否为移动端设备" class="headerlink" title="判断是否为移动端设备"></a>判断是否为移动端设备</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isMobile()&#123;</span><br><span class="line">  if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为PC端"><a href="#判断是否为PC端" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function IsPC() &#123;</span><br><span class="line">     var userAgentInfo = navigator.userAgent;</span><br><span class="line">     var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">                 &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">                 &quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">     var flag = true;</span><br><span class="line">     for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">         if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">             flag = false;</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return flag;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="移动端设备旋转设备为横屏时，刷新页面"><a href="#移动端设备旋转设备为横屏时，刷新页面" class="headerlink" title="移动端设备旋转设备为横屏时，刷新页面"></a>移动端设备旋转设备为横屏时，刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mobile = isMobile();</span><br><span class="line">if(mobile) &#123;</span><br><span class="line">    window.addEventListener(&quot;orientationchange&quot;, function() &#123;</span><br><span class="line">        //横屏，刷新页面</span><br><span class="line">        if(window.orientation == 90) &#123;</span><br><span class="line">            window.top.document.location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">如果是刷新当前页面，直接Window.location.reload();就可以。</span><br><span class="line">如果是使用iframe嵌套页面的，要往上一层去刷新，window.top.document.location.reload();</span><br></pre></td></tr></table></figure>

<p>使用window.top.document.location.reload();的原因，是使用iframe嵌套页面的：（蓝色区域为子页面嵌套在里面）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/main.png" alt="iframe嵌套页面"></p>
<h4 id="判断是否移动设备是否为横屏"><a href="#判断是否移动设备是否为横屏" class="headerlink" title="判断是否移动设备是否为横屏"></a>判断是否移动设备是否为横屏</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//判断是否移动设备是否横屏状态</span><br><span class="line">function isLandscape() &#123;</span><br><span class="line">	if (window.orientation === 180 || window.orientation === 0) &#123; </span><br><span class="line">		return false;</span><br><span class="line">	&#125; </span><br><span class="line">	if (window.orientation === 90 || window.orientation === -90 )&#123; </span><br><span class="line">		return true;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取iframe父子页面之间获取元素"><a href="#获取iframe父子页面之间获取元素" class="headerlink" title="获取iframe父子页面之间获取元素"></a>获取iframe父子页面之间获取元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【父找子】</span><br><span class="line">//从父级找到iframe，然后找contents</span><br><span class="line">var inputs = $(&quot;.tab-pane.active iframe&quot;).contents().find(&quot;input&quot;);</span><br><span class="line">【子找父】</span><br><span class="line">//从子页面找到parent.document,然后找对应元素</span><br><span class="line">$(window.parent.document).find(&quot;.content-wrapper&quot;).offset(&#123;top:0&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="处理移动端页面，软键盘弹起导致页面底部空白"><a href="#处理移动端页面，软键盘弹起导致页面底部空白" class="headerlink" title="处理移动端页面，软键盘弹起导致页面底部空白"></a>处理移动端页面，软键盘弹起导致页面底部空白</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/input.png" alt="软键盘弹起导致页面底部空白"><br>实际上，页面内容是在的，只是被挡住了，所以要将最外层的页面高度设置到跟设备一样高</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setOffset() &#123;</span><br><span class="line">  //是否为移动端</span><br><span class="line">  var mobile = isMobile();</span><br><span class="line">  //是否是横屏状态</span><br><span class="line">  var landscape = isLandscape();</span><br><span class="line"></span><br><span class="line">  //移动端横屏状态 监听输入框输入状态</span><br><span class="line">  if(mobile &amp;&amp; landscape) &#123;</span><br><span class="line">    var flag = true;</span><br><span class="line">    var inputs = $(&quot;.tab-pane.active iframe&quot;).contents().find(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">    inputs.on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">      flag = false;</span><br><span class="line">    &#125;);</span><br><span class="line">    inputs.on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">      flag = true;</span><br><span class="line">    &#125;);</span><br><span class="line">    inputs.on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">      if(flag) &#123;</span><br><span class="line">        //设置iframe的offsetTop</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).offset(&#123;top:0&#125;);</span><br><span class="line">        $(document).find(&quot;.permiss&quot;).offset(&#123;top:143&#125;);</span><br><span class="line"></span><br><span class="line">        【解决问题的主要代码】</span><br><span class="line">        //将最外层的页面高度设置到跟设备一样高</span><br><span class="line"></span><br><span class="line">        //获取屏幕高度</span><br><span class="line">        var bodyHeight = $(&#x27;body&#x27;)[0].clientHeight;</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).css(&quot;height&quot;, bodyHeight + &quot;px&quot;);</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).css(&quot;top&quot;, &quot;0px&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="响应式调试"><a href="#响应式调试" class="headerlink" title="响应式调试"></a>响应式调试</h4><p>Firefox 浏览器内置了 <code>自定义设计视图</code> 的功能，可以通过<code> Firefox-&gt;Web 开发者-&gt;自定义设计视图</code>（或者摁下 <code>Shift + Ctrl + m</code>）。相比网络工具，运行更加流畅，无需联网。</p>
<p><code>Shift + Ctrl + m</code>：手机模式和PC模式之间进行切换</p>
<p><a href="http://www.responsinator.com/">移动端在线调试工具</a></p>
<p><a href="http://responsivepx.com/">在线调试工具</a>—手动设置宽度</p>
<h4 id="移动端调试工具vconsole-—-在移动端打开控制台"><a href="#移动端调试工具vconsole-—-在移动端打开控制台" class="headerlink" title="移动端调试工具vconsole — 在移动端打开控制台"></a><a href="https://zhidao.baidu.com/question/1583238883492321940.html">移动端调试工具vconsole — 在移动端打开控制台</a></h4><p>在移动端项目中打开控制台有两种方案：</p>
<p>步骤一：通过 CDN  地址引入 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/vConsole/3.2.2/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>步骤二：实例化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; var vConsole = new VConsole(); &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>步骤三、运行项目查看项目页面中是否出现一个绿色 vConsole 的按钮，点击该按钮便可以打开控制台</p>
<p>步骤一、通过npm安装 vconsole</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vconsole --save-dev </span><br></pre></td></tr></table></figure>

<p>步骤二、在项目入口文件中引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import vconsole from &#x27;vconsole&#x27;</span><br></pre></td></tr></table></figure>

<p>步骤三、实例化 vconsole: </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vConsole = new vconsole()</span><br></pre></td></tr></table></figure>

<p>步骤四、运行项目查看项目页面中是否出现一个绿色 vConsole 的按钮，点击该按钮便可以打开控制台</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>获取hash链接（hash片段）的参数</title>
    <url>/2022/08/10/%E8%8E%B7%E5%8F%96hash%E9%93%BE%E6%8E%A5%EF%BC%88hash%E7%89%87%E6%AE%B5%EF%BC%89%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p><strong>URL 结构</strong>：URL 由多个部分组成，包括协议（如 <code>http</code> 或 <code>https</code>）、主机名（如 <code>www.example.com</code>）、端口号（可选，默认为 80 或 443）、路径（如 <code>/path/to/page</code>）、查询字符串（如 <code>?id=123&amp;name=John</code>）以及哈希片段（如 <code>#section2</code>）。</p>
<h4 id="window-location-hash"><a href="#window-location-hash" class="headerlink" title="window.location.hash"></a><code>window.location.hash</code></h4><p>通过 <code>window.location.hash</code> 属性来访问当前 URL 的哈希片段。这个属性返回包括 <code>#</code> 符号的哈希部分，例如 <code>#section2</code>。</p>
<h4 id="获取hash片段中的参数的方法"><a href="#获取hash片段中的参数的方法" class="headerlink" title="获取hash片段中的参数的方法"></a>获取hash片段中的参数的方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getHashParams() &#123;</span><br><span class="line">    const hash = window.location.hash.substr(1); // 去掉开头的 #</span><br><span class="line">    const params = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    if (hash) &#123;</span><br><span class="line">        const parts = hash.split(&#x27;?&#x27;); // 以 ? 分割</span><br><span class="line">        const path = parts[0]; // 获取路径部分</span><br><span class="line">        params.path = path; // 存储路径</span><br><span class="line"></span><br><span class="line">        if (parts.length &gt; 1) &#123;</span><br><span class="line">            const queryString = parts[1]; // 获取查询参数部分</span><br><span class="line">            const paramPairs = queryString.split(&#x27;&amp;&#x27;);</span><br><span class="line"></span><br><span class="line">            paramPairs.forEach(pair =&gt; &#123;</span><br><span class="line">                const [key, value] = pair.split(&#x27;=&#x27;);</span><br><span class="line">                params[key] = decodeURIComponent(value || &#x27;&#x27;); // 解码参数值</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const params = getHashParams();</span><br><span class="line">console.log(window.location.hash); //URL 中的哈希链接</span><br><span class="line">console.log(params.path); // 输出路径</span><br><span class="line">console.log(params.id); // 输出 id 参数的值</span><br><span class="line">console.log(params.name); // 输出 name 参数的值</span><br></pre></td></tr></table></figure>

<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol>
<li><p>链接1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5500/hash.html#?id=2&amp;name=winney</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#?id=2&amp;name=winney</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">winney</span><br></pre></td></tr></table></figure>
</li>
<li><p>链接2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5500/hash.html#/?id=2&amp;name=winney</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/?id=2&amp;name=winney</span><br><span class="line">/</span><br><span class="line">2</span><br><span class="line">winney</span><br></pre></td></tr></table></figure>
</li>
<li><p>链接3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5500/hash.html#/test/text.html?id=2&amp;name=winney</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/test/text.html?id=2&amp;name=winney</span><br><span class="line">/test/text.html</span><br><span class="line">2</span><br><span class="line">winney</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>注意：查询参数前需要加上<code>?</code>号</p>
</blockquote>
<p><code>getHashParams()</code>方法适合以上3种情况的hash链接获取参数</p>
<p>如果不使用<code>params.id</code>这种方法获取参数对应的值，也可以使用解构赋值获取需要的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; id, name &#125; = params;</span><br></pre></td></tr></table></figure>

<h4 id="根据参数名获取对应的值"><a href="#根据参数名获取对应的值" class="headerlink" title="根据参数名获取对应的值"></a>根据参数名获取对应的值</h4><p><code>getHashParams()</code>方法是一次性返回全部参数。如果想通过传参数名来获取参数对应的值，可以给<code>getHashParams()</code>方法添加参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">** @param paramName&#123;string&#125;    // 参数名</span><br><span class="line">*/</span><br><span class="line">function getHashParams(paramName) &#123;</span><br><span class="line">    const hash = window.location.hash.substr(1); // 去掉开头的 #</span><br><span class="line">    const params = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    if (hash) &#123;</span><br><span class="line">        const parts = hash.split(&#x27;?&#x27;); // 以 ? 分割</span><br><span class="line">        const path = parts[0]; // 获取路径部分</span><br><span class="line">        params.path = path; // 存储路径</span><br><span class="line"></span><br><span class="line">        if (parts.length &gt; 1) &#123;</span><br><span class="line">            const queryString = parts[1]; // 获取查询参数部分</span><br><span class="line">            const paramPairs = queryString.split(&#x27;&amp;&#x27;);</span><br><span class="line"></span><br><span class="line">            paramPairs.forEach(pair =&gt; &#123;</span><br><span class="line">                const [key, value] = pair.split(&#x27;=&#x27;);</span><br><span class="line">                params[key] = decodeURIComponent(value || &#x27;&#x27;); // 解码参数值</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果提供了参数名称，返回特定参数的值；否则返回所有参数</span><br><span class="line">    if (paramName) &#123;</span><br><span class="line">        return params[paramName] || null; // 返回特定参数的值或 null（如果参数不存在）</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const id = getHashParams(&#x27;id&#x27;);</span><br><span class="line">console.log(id); // 输出 id 参数的值</span><br><span class="line">var params_all = getHashParams();</span><br><span class="line">console.log(params_all); // 输出所有参数</span><br><span class="line">const age = getHashParams(&#x27;age&#x27;);</span><br><span class="line">console.log(age); // 输出 age 参数的值</span><br></pre></td></tr></table></figure>

<p>链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5500/hash.html#/test/text.html?id=2&amp;name=winney</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">&#123;path: &#x27;/test/text.html&#x27;, id: &#x27;2&#x27;, name: &#x27;winney&#x27;&#125;</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>视频剪辑-Adobe-Pr</title>
    <url>/2021/04/01/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91-Adobe-Pr/</url>
    <content><![CDATA[<h4 id="Adobe-Premiere"><a href="#Adobe-Premiere" class="headerlink" title="Adobe Premiere"></a>Adobe Premiere</h4><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ol>
<li>电影电视(院线电影、网络大电影、个人微电影、电视专题片)</li>
<li>节目剪辑(综艺娱乐、人物访谈、街坊)</li>
<li>抖音短视频( vlog、旅拍、剧情短片、炫酷视频)</li>
<li>宣传片广告片(企业宣传片、专题片、产品广告宣传片)</li>
<li>自媒体短视频（电影混剪、解说、音乐类、科普类等)</li>
<li>从事专业剪辑岗位(Premiere 、Final cut 、After Effects等)</li>
</ol>
<p><a href="http://p4.xmyjhkj.cn/index.php?m=goods&a=details&content_id=4#">官网正版授权  软件下载</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91-Adobe-Pr/image-20210401174712668.png" alt="分辨率"></p>
<h4 id="帧速率"><a href="#帧速率" class="headerlink" title="帧速率"></a>帧速率</h4><ol>
<li>帧——影像动画中最小的单位,无数的帧构成了秒。</li>
<li>一帧相当于一个画面,一秒就是由一定的帧构成。</li>
<li>视频常用的帧数有:24帧、25帧、29.97帧以及30帧。</li>
<li>自媒体或一般的短视频剪辑：选择25帧/秒。</li>
</ol>
]]></content>
      <categories>
        <category>视频剪辑</category>
      </categories>
      <tags>
        <tag>Adobe-Pr</tag>
      </tags>
  </entry>
  <entry>
    <title>网页特效</title>
    <url>/2021/01/19/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h4 id="轻松解决网站大部分特效展示问题"><a href="#轻松解决网站大部分特效展示问题" class="headerlink" title="轻松解决网站大部分特效展示问题"></a>轻松解决网站大部分特效展示问题</h4><p><a href="http://www.superslide2.com/index.html">SuperSlide</a>     <a href="https://www.swiper.com.cn/">Swiper</a>     <a href="https://github.com/nolimits4web/swiper">Swiper-github</a></p>
<h4 id="拖拽排序图片"><a href="#拖拽排序图片" class="headerlink" title="拖拽排序图片"></a>拖拽排序图片</h4><p><a href="https://www.jq22.com/jquery-info572">模仿360首页导航Div排序插件</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/note1.png" alt="移动替换效果"></p>
<p><a href="https://www.jq22.com/jquery-info14968">jquery 拖拽排序</a></p>
<h4 id="鼠标点击网页出现爱心特效"><a href="#鼠标点击网页出现爱心特效" class="headerlink" title="鼠标点击网页出现爱心特效"></a>鼠标点击网页出现爱心特效</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function(window,document,undefined)&#123;</span><br><span class="line">    var hearts = [];</span><br><span class="line">    window.requestAnimationFrame = (function()&#123;</span><br><span class="line">        return window.requestAnimationFrame ||</span><br><span class="line">        window.webkitRequestAnimationFrame ||</span><br><span class="line">        window.mozRequestAnimationFrame ||</span><br><span class="line">        window.oRequestAnimationFrame ||</span><br><span class="line">        window.msRequestAnimationFrame ||</span><br><span class="line">        function (callback)&#123;</span><br><span class="line">            setTimeout(callback,1000/60);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    init();</span><br><span class="line">    function init()&#123;</span><br><span class="line">        css(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;);</span><br><span class="line">        attachEvent();</span><br><span class="line">        gameloop();</span><br><span class="line">    &#125;</span><br><span class="line">    function gameloop()&#123;</span><br><span class="line">        for(var i=0;i&lt;hearts.length;i++)&#123;</span><br><span class="line">            if(hearts[i].alpha &lt;=0)&#123;</span><br><span class="line">                document.body.removeChild(hearts[i].el);</span><br><span class="line">                hearts.splice(i,1);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].y--;</span><br><span class="line">            hearts[i].scale += 0.004;</span><br><span class="line">            hearts[i].alpha -= 0.013;</span><br><span class="line">            hearts[i].el.style.cssText = &quot;left:&quot;+hearts[i].x+&quot;px;top:&quot;+hearts[i].y+&quot;px;opacity:&quot;+hearts[i].alpha+&quot;;transform:scale(&quot;+hearts[i].scale+&quot;,&quot;+hearts[i].scale+&quot;) rotate(45deg);background:&quot;+hearts[i].color;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line">    function attachEvent()&#123;</span><br><span class="line">        var old = typeof window.onclick===&quot;function&quot; &amp;&amp; window.onclick;</span><br><span class="line">        window.onclick = function(event)&#123;</span><br><span class="line">            old &amp;&amp; old();</span><br><span class="line">            createHeart(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function createHeart(event)&#123;</span><br><span class="line">        var d = document.createElement(&quot;div&quot;);</span><br><span class="line">        d.className = &quot;heart&quot;;</span><br><span class="line">        hearts.push(&#123;</span><br><span class="line">            el : d,</span><br><span class="line">            x : event.clientX - 5,</span><br><span class="line">            y : event.clientY - 5,</span><br><span class="line">            scale : 1,</span><br><span class="line">            alpha : 1,</span><br><span class="line">            color : randomColor()</span><br><span class="line">        &#125;);</span><br><span class="line">        document.body.appendChild(d);</span><br><span class="line">    &#125;</span><br><span class="line">    function css(css)&#123;</span><br><span class="line">        var style = document.createElement(&quot;style&quot;);</span><br><span class="line">        style.type=&quot;text/css&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            style.appendChild(document.createTextNode(css));</span><br><span class="line">        &#125;catch(ex)&#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style);</span><br><span class="line">    &#125;</span><br><span class="line">    function randomColor()&#123;</span><br><span class="line">        return &quot;rgb(&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window,document);</span><br></pre></td></tr></table></figure>

<h4 id="TouchSlide"><a href="#TouchSlide" class="headerlink" title="TouchSlide"></a>TouchSlide</h4><p><a href="http://www.superslide2.com/TouchSlide/">TouchSlide</a></p>
<p>触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等</p>
<h4 id="点击鼠标，图片落在鼠标点击的位置"><a href="#点击鼠标，图片落在鼠标点击的位置" class="headerlink" title="点击鼠标，图片落在鼠标点击的位置"></a>点击鼠标，图片落在鼠标点击的位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/beetle.gif&quot; id=&quot;pic&quot; style=&quot;visibility:hidden;position:absolute&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function show()&#123;</span><br><span class="line">        pic.style.left = event.x + &quot;px&quot;;</span><br><span class="line">        pic.style.top  = event.y + &quot;px&quot;;</span><br><span class="line">        pic.style.visibility = &quot;visible&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.onclick = show;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="鼠标移到文字上，出现提示信息"><a href="#鼠标移到文字上，出现提示信息" class="headerlink" title="鼠标移到文字上，出现提示信息"></a>鼠标移到文字上，出现提示信息</h4><ul>
<li><p>使用title属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; title=&quot;提示信息&quot;&gt;超链接文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件和自定义样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;tip&quot; &gt;这是提示信息&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; onMouseOver=&quot;mm()&quot; onmouseout=&quot;tip.style.visibility=&#x27;hidden&#x27;&quot;&gt;超链接文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link&#123;text-decoration: none;&#125;</span><br><span class="line">#tip&#123;</span><br><span class="line">    background:#fcfcfc;</span><br><span class="line">    position:absolute;</span><br><span class="line">    width:auto;</span><br><span class="line">    height:auto;</span><br><span class="line">    visibility:hidden;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    border:1px solid #ccc;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    border-radius:4px;</span><br><span class="line">    box-shadow: 2px 4px 7px #ccc;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function mm()&#123;  </span><br><span class="line">        tip.style.visibility=&#x27;visible&#x27;;</span><br><span class="line">        tip.style.top = (event.y+10) + &quot;px&quot;;</span><br><span class="line">        tip.style.left = (event.x+10) + &quot;px&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="按←↑→↓键移到图片位置"><a href="#按←↑→↓键移到图片位置" class="headerlink" title="按←↑→↓键移到图片位置"></a>按←↑→↓键移到图片位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img id=&quot;pic&quot; src=&quot;images/beetle.gif&quot; style=&quot;position:absolute;left:100px;top:100px;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function move()&#123;</span><br><span class="line">        var key = event.keyCode;</span><br><span class="line">        var x = parseInt(pic.style.left);</span><br><span class="line">        var y = parseInt(pic.style.top);</span><br><span class="line">        var step = 10;</span><br><span class="line">        if (key == 37)  pic.style.left = x - step + &quot;px&quot;;</span><br><span class="line">        if (key == 38)  pic.style.top  = y - step + &quot;px&quot;;</span><br><span class="line">        if (key == 39)  pic.style.left = x + step + &quot;px&quot;;</span><br><span class="line">        if (key == 40)  pic.style.top  = y + step + &quot;px&quot;;</span><br><span class="line"></span><br><span class="line">        console.log(key)</span><br><span class="line">        console.log(x)</span><br><span class="line">        console.log(y)</span><br><span class="line">    &#125;</span><br><span class="line">    document.onkeydown=move;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="文字滚动效果"><a href="#文字滚动效果" class="headerlink" title="文字滚动效果"></a>文字滚动效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;marquee direction =&quot;left&quot; onMouseOver=&quot;this.stop()&quot; onMouseOut=&quot;this.start()&quot; scrollamount=3&gt;JavaScript特效制作最新JavaScript特效常用HTML标签讲解ASP入门教程Dreamweaver 8 教程</span><br><span class="line">&lt;/marquee&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用鼠标拖到图片到相应位置"><a href="#使用鼠标拖到图片到相应位置" class="headerlink" title="使用鼠标拖到图片到相应位置"></a>使用鼠标拖到图片到相应位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/beetle.gif&quot;  style=&quot;position:absolute;left:0px;top:0px;&quot; onMouseDown=&quot;dragImage(this)&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var down = false;</span><br><span class="line">    var x,y,imgID;</span><br><span class="line"></span><br><span class="line">    function dragImage(obj)&#123;</span><br><span class="line">        imgID = obj;</span><br><span class="line">        x = event.x - parseInt(imgID.style.left);</span><br><span class="line">        y = event.y - parseInt(imgID.style.top);</span><br><span class="line"></span><br><span class="line">        down=true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function cancelDrag()&#123;  down=false; &#125;</span><br><span class="line"></span><br><span class="line">    function moveImage()&#123;</span><br><span class="line">        if(down)&#123;</span><br><span class="line">            //要加上单位“px”，不然图片不能移动</span><br><span class="line">            imgID.style.left  = (event.x - x) + &quot;px&quot;;</span><br><span class="line">            imgID.style.top   = (event.y - y) + &quot;px&quot;;   </span><br><span class="line"></span><br><span class="line">            event.returnValue = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    document.onmousemove = moveImage;</span><br><span class="line">    document.onmouseup = cancelDrag;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/winney/work/blob/master/effects/follow-mouse/mousemove.html">跟随鼠标移动的文字</a></p>
<h4 id="tpanorama-全景图"><a href="#tpanorama-全景图" class="headerlink" title="tpanorama-全景图"></a>tpanorama-全景图</h4><p><a href="https://github.com/ConardLi/tpanorama">github地址</a></p>
<p><a href="http://www.bootstrapmb.com/item/5657/preview">效果预览</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机常用命令</title>
    <url>/2019/07/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="命令行新建文件和文件夹"><a href="#命令行新建文件和文件夹" class="headerlink" title="命令行新建文件和文件夹"></a>命令行新建文件和文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.cmd           ——进去命令行提示符</span><br><span class="line">2.D:            ——去到对应的盘</span><br><span class="line">3.<span class="built_in">dir</span>           ——查看d盘下所有目录和文件</span><br><span class="line">4.<span class="built_in">cd</span> baidu      ——例如进去baidu文件夹目录</span><br><span class="line">5.<span class="built_in">dir</span>           ——查看D盘baidu文件夹下的所有目录</span><br><span class="line">6.md xx         ——创建一个baidu文件夹下的xx文件夹</span><br><span class="line">7.<span class="built_in">dir</span>           ——查看xx这个文件夹已经创建成功了</span><br><span class="line">8.<span class="built_in">cd</span>.&gt;.babelrc  ——创建一个.babelrc的文件，<span class="built_in">cd</span>.表示为当前目录</span><br><span class="line">9.<span class="built_in">dir</span>           ——可以看到baidu文件夹下已经生成了“.babelrc”文件</span><br><span class="line">10.EXIT         ——退出命令行提示符</span><br></pre></td></tr></table></figure>

<h6 id="1、删除空文件夹"><a href="#1、删除空文件夹" class="headerlink" title="1、删除空文件夹"></a>1、删除空文件夹</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> 空文件夹名</span><br></pre></td></tr></table></figure>

<h6 id="2、删除文件夹以及文件夹内所有内容（-s是删除所有子目录以及其中的内容；-q是在删除时，不提示yes-or-no）"><a href="#2、删除文件夹以及文件夹内所有内容（-s是删除所有子目录以及其中的内容；-q是在删除时，不提示yes-or-no）" class="headerlink" title="2、删除文件夹以及文件夹内所有内容（/s是删除所有子目录以及其中的内容；/q是在删除时，不提示yes or no）"></a>2、删除文件夹以及文件夹内所有内容（/s是删除所有子目录以及其中的内容；/q是在删除时，不提示yes or no）</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> /s/q 文件夹名</span><br></pre></td></tr></table></figure>

<h6 id="3、删除指定盘符的文件夹-删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示"><a href="#3、删除指定盘符的文件夹-删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示" class="headerlink" title="3、删除指定盘符的文件夹(删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示)"></a>3、删除指定盘符的文件夹(删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir /s/q d:\multify\my-multify</span><br></pre></td></tr></table></figure>



<h4 id="如何把文件夹里的文件名都复制下来"><a href="#如何把文件夹里的文件名都复制下来" class="headerlink" title="如何把文件夹里的文件名都复制下来"></a><a href="https://jingyan.baidu.com/article/b24f6c82000491c7bfe5daff.html">如何把文件夹里的文件名都复制下来</a></h4><h4 id="浏览器无法播放flash"><a href="#浏览器无法播放flash" class="headerlink" title="浏览器无法播放flash"></a>浏览器无法播放flash</h4><p>安装Adobe Flash Player PPAPI</p>
<h4 id="设置电脑桌面上的图标和文件随意摆放"><a href="#设置电脑桌面上的图标和文件随意摆放" class="headerlink" title="设置电脑桌面上的图标和文件随意摆放"></a>设置电脑桌面上的图标和文件随意摆放</h4><p>在桌面右击鼠标，选“查看”，把“自动排列图标”和“将图标与网格对齐”取消勾选就可以。</p>
<h2 id="操作系统常用配置"><a href="#操作系统常用配置" class="headerlink" title="操作系统常用配置"></a>操作系统常用配置</h2><ul>
<li>系统调整为最佳性能(建议设置)</li>
<li><ul>
<li>开始菜单&gt;控制面板&gt;性能信息和工具&gt;调整视觉效果&gt;调整到最佳性能</li>
</ul>
</li>
<li>文件夹显示设置(强烈建议设置)</li>
<li><ul>
<li>列表显示文件夹（要用这种形式才比较专业）</li>
<li>显示隐藏文件</li>
<li>应用到所有文件</li>
<li>操作：工具→文件夹选项&gt;隐藏已知文件类型.. (去掉）&gt;应用到所有文件夹</li>
</ul>
</li>
</ul>
<p>注意：隐藏已知文件类型的扩展名（这个一定要去掉），在标题栏显示完整路径（这个要勾选上）</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/2.png" alt="img"></p>
<ul>
<li>任务栏设置(建议设置)</li>
<li><ul>
<li>任务栏右击&gt;锁定任务栏+任务栏使用小图标</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>网站素材</title>
    <url>/2021/01/08/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90/</url>
    <content><![CDATA[<div class="website-collect">



<p><a href="https://www.joshwcomeau.com/">JoshWComeau</a></p>
<p><a href="https://goshacmd.com/">Gosha Arinich</a></p>
<h4 id="前端-常用"><a href="#前端-常用" class="headerlink" title="前端-常用"></a>前端-常用</h4><p>CODEPEN——The best place to build, test, and discover front-end code.</p>
<table>
<thead>
<tr>
<th><a href="https://codepen.io/">CODEPEN—示例</a></th>
<th><a href="https://caniuse.com/">Can I use</a>-兼容性速查表</th>
<th><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Stack Overflow</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript-MDN</a> |<a href="https://developer.mozilla.org/en-US/">MDN</a></td>
<td><a href="https://tool.chinaz.com/">站长工具</a>  |<a href="https://tool.chinaz.com/map.aspx">工具导航</a></td>
</tr>
<tr>
<td><a href="https://cli.im/">草料二维码</a>    |  <a href="https://tinypng.com/">TinyPNG </a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN Web Docs</a>  | <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a></td>
<td><a href="https://kb.cnblogs.com/list/1002/">博客园</a>  | <a href="https://www.ltonus.com/">前端这点事</a></td>
</tr>
<tr>
<td><a href="http://mobile.chinaz.com/mft.html">移动适配报告</a> |<a href="http://mobile.chinaz.com/fitscreen.html">移动跨屏模拟</a></td>
<td><a href="http://www.responsinator.com/">移动端在线调试工具</a></td>
<td><a href="http://tool.chinaz.com/tools/httptest.aspx">在线HTTP接口测试</a></td>
</tr>
<tr>
<td><a href="https://www.apifox.cn/apihub/">API Hub-开放API共享平台</a></td>
<td><a href="https://gitee.com/">Gitee</a>  | <a href="https://github.com/">GitHub</a></td>
<td><a href="https://home.code-nav.cn/">编程导航</a> |<a href="http://www.h-ui.net/site.shtml">IT网址导航</a> |<a href="http://caibaojian.com/fedbook/">前端开发者手册</a></td>
</tr>
<tr>
<td><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></td>
<td><a href="https://react.docschina.org/">React </a></td>
<td><a href="https://cloud.tencent.com/developer/section/1072218">开发者手册</a></td>
</tr>
<tr>
<td><a href="https://www.iconfont.cn/">iconfont</a>   | <a href="https://cdnjs.com/">CDN</a></td>
<td><a href="https://codesandbox.io/search?refinementList%5Btemplate%5D%5B0%5D=create-react-app&page=1&configure%5BhitsPerPage%5D=12">react学习demo</a></td>
<td><a href="https://cn.vuejs.org/">Vue.js</a></td>
</tr>
<tr>
<td><a href="https://antd-mobile.gitee.io/zh">Ant Design Mobile</a>   |  <a href="https://ant.design/index-cn">Antd</a>  | <a href="https://vant-contrib.gitee.io/vant/#/zh-CN">Vant 3 </a></td>
<td><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts">React Router</a></td>
<td><a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md">JavaScript standard代码规范的全文</a></td>
</tr>
<tr>
<td><a href="https://codesandbox.io/search?refinementList%5Btemplate%5D%5B0%5D=vue-cli&page=1&configure%5BhitsPerPage%5D=12">vue学习demo</a></td>
<td><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts">React Router</a></td>
<td><a href="http://html5please.com/">HTML5与CSS3技术应用评估</a></td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/">npm</a></td>
<td><a href="https://vitejs.cn/">Vite中文</a></td>
<td><a href="https://vitejs.dev/">Vite</a></td>
</tr>
<tr>
<td><a href="https://www.antdv.com/docs/vue/migration-v3-cn">Antd Vue</a></td>
<td><a href="https://www.layui.site/demo/laydate.html">layDate</a></td>
<td><a href="https://www.bianchengquan.com/">编程圈</a> |<a href="http://www.haorooms.com/nav">前端导航</a></td>
</tr>
<tr>
<td><a href="https://linjinze999.github.io/vue-llplatform/">vue-llplatform</a></td>
<td><a href="https://ionic.io/ionicons">Ionicons</a></td>
<td><a href="https://cloud.tencent.com/developer/user/1036137">前端达人</a></td>
</tr>
<tr>
<td><a href="https://www.kancloud.cn/ywfwj2008/weui/274290">ActionSheet · WeUI 中文文档 · 看云</a></td>
<td><a href="https://cloud.tencent.com/developer/rank">腾讯云开发者社区</a></td>
<td><a href="https://github.com/Tencent/weui">weui</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/community/homepage">首页|微信开放社区</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">微信公众平台开发概述|微信开放文档</a></td>
<td><a href="https://weui.io/">WeUI</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档|微信开放文档</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/iOS_WKWebview.html">背景|微信开放文档</a></td>
<td><a href="https://www.runoob.com/jsref/met-win-btoa.html">Browser 对象</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档|微信开放文档</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/iOS_WKWebview.html">背景|微信开放文档</a></td>
<td><a href="https://www.runoob.com/jsref/jsref-obj-array.html">JavaScript 对象</a></td>
</tr>
<tr>
<td><a href="http://kangax.github.io/compat-table/es6/">ECMAScript 6 compatibility table</a> —测试浏览器对 ECMAScript6 的支持度</td>
<td><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">自适应网页设计</a></td>
<td><a href="http://www.divcss5.com/">DIVCSS5</a></td>
</tr>
<tr>
<td><a href="http://resource.haorooms.com/">前端资料库</a></td>
<td><a href="https://tool.css-js.com/jsonformat.html">JSON格式化</a></td>
<td><a href="https://tool.css-js.com/html2js.html">JS与HTML互转</a></td>
</tr>
<tr>
<td><a href="https://tool.css-js.com/htmlchar.html">HTML特殊符号对照表</a></td>
<td><a href="https://tool.css-js.com/base64.html">图片在线转换Base64</a></td>
<td><a href="https://www.atool99.com/img2base64.php">图片转Base64编码工具</a></td>
</tr>
<tr>
<td><a href="https://tool.css-js.com/rgba.html">RGB与16进制色互转</a></td>
<td><a href="https://tool.oschina.net/jscompress">在线JS/CSS/HTML压缩</a></td>
<td><a href="https://tool.css-js.com/compressor.html">CSS, JavaScript 压缩, 美化, 加密, 解密</a></td>
</tr>
<tr>
<td><a href="https://tool.lu/css/">css工具</a></td>
<td><a href="http://think2011.net/localResizeIMG/test/">在线压缩图片</a></td>
<td><a href="https://www.bitbug.net/">在线制作ico图标</a></td>
</tr>
<tr>
<td><a href="http://www.5idev.com/javascript/">5idev.com—JavaScript基础教程</a></td>
<td><a href="http://www.yyyweb.com/">前端里</a></td>
<td><a href="https://www.mindmeister.com/zh">mindmeister-在线创建的思维导图</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/sb19871023/p/3894452.html">前端知识体系</a></td>
<td><a href="https://validator.niceue.com/">validator-表单验证解决方案</a></td>
<td><a href="https://niceue.com/validator/demo/index.php">nice Validator 示例</a></td>
</tr>
<tr>
<td><a href="https://github.com/jikeytang/front-end-collect">性能优化优秀教程</a></td>
<td><a href="https://fontawesome.dashgame.com/">Font Awesome</a></td>
<td><a href="https://www.quirksmode.org/blog/">QuirksBlog</a></td>
</tr>
</tbody></table>
<p>工作流</p>
<ul>
<li>前端</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.csdn.net/?spm=1001.2101.3001.4476">CSDN</a></th>
<th><a href="https://juejin.cn/">掘金</a></th>
<th><a href="https://chinese.freecodecamp.org/learn/front-end-development-libraries/">前端开发库</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.microsoft.com/zh-cn/documentation/">Microsoft 文档-技术文档</a></td>
<td><a href="https://home.code-nav.cn/">编程导航-程序员导航</a></td>
<td><a href="https://www.code-nav.cn/">编程导航</a></td>
</tr>
<tr>
<td><a href="https://www.w3cplus.com/">W3Cplus-博客</a></td>
<td><a href="https://www.w3school.com.cn/">w3school</a>  |  <a href="https://www.w3cschool.cn/doc_css/">w3cschool</a></td>
<td><a href="http://www.web-jshtml.cn/#/">手把手撸码前端</a></td>
</tr>
<tr>
<td><a href="https://www.jb51.cc/css/662083.html">编程之家</a></td>
<td><a href="https://cloud.tencent.com/developer/section/1072218">腾讯云-开发者手册</a></td>
<td><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_20&index=1">微信支付–开发文档</a></td>
</tr>
<tr>
<td><a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS</a></td>
<td><a href="https://api.aa1.cn/">免费API</a></td>
<td><a href="https://docschina.org/">印记中国</a></td>
</tr>
<tr>
<td><a href="https://xiaoman.blog.csdn.net/?type=blog">小满zs-CSDN博客</a></td>
<td><a href="https://ionic.io/ionicons">ionicons</a></td>
<td><a href="http://www.manongjc.com/">码农教程</a></td>
</tr>
<tr>
<td><a href="https://www.bootcdn.cn/">BootCDN</a></td>
<td><a href="https://www.w3cplus.com/">W3cplus</a></td>
<td><a href="https://support.cloudflare.com/hc/zh-cn/articles/360029779472-Troubleshooting-Cloudflare-1XXX-errors?utm_source=1020_error#error1000">Cloudflare 1XXX 错误故障排除</a></td>
</tr>
<tr>
<td><a href="https://www.quirksmode.org/compatibility.html">Compatibility overview-浏览器兼容表</a></td>
<td><a href="https://html5boilerplate.com/">HTML5 Boilerplate</a>—前端模板</td>
<td><a href="https://www.zhihu.com/question/19551815">什么是 HTML5 Boilerplate ?</a></td>
</tr>
<tr>
<td><a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a></td>
<td><a href="https://webix.com/">支持移动端的框架</a></td>
<td><a href="https://webix.com/">JavaScript UI库;HTML5 JS框架</a></td>
</tr>
<tr>
<td><a href="https://www.jsdaima.com/">JS代码</a></td>
<td><a href="https://www.lanrentuku.com/js/">JS代码-懒人图库</a></td>
<td><a href="https://www.processon.com/view/593749b6e4b01e98478ef98e">JavaScript学习导图</a></td>
</tr>
<tr>
<td><a href="https://www.templatemonster.com/">HTML5响应式模板</a></td>
<td><a href="https://zh.wix.com/">专业网页制作</a></td>
<td><a href="https://www.gavick.com/">Joomla Templates and WordPress Themes</a></td>
</tr>
<tr>
<td><a href="http://beecloud.cn/">BeeCloud</a>-全新的秒支付应用支付接口</td>
<td><a href="https://easings.net/zh-cn">easings-缓动函数速查表</a></td>
<td><a href="https://www.webdesignerdepot.com/">Web Design Blog</a></td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/svg/svg_reference.asp">SVG参考手册</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG</a></td>
<td><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></td>
<td><a href="https://github.com/mailzwj/node.js">Node.js 资源汇总</a></td>
</tr>
<tr>
<td><a href="https://github.com/jikeytang/front-end-collect">前端收集</a></td>
<td><a href="https://www.html5plus.org/doc/h5p.html#">H5+规范</a></td>
<td><a href="https://uniapp.dcloud.net.cn/">uni-app</a> | <a href="https://www.w3cschool.cn/uni_app/">uni-app-w3c</a></td>
</tr>
</tbody></table>
<h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><table>
<thead>
<tr>
<th><a href="https://excalidraw.com/">画图工具</a></th>
<th><a href="https://www.uupoop.com/#/">在线PS软件</a></th>
<th><a href="https://ps.gaoding.com/#/">在线PS</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bilibili.com/video/BV1dG411j7uW/?spm_id_from=333.1007.tianma.1-1-1.click&vd_source=40931b9b7a6dfae9780e1c6f05637a83">前端超有用的10个JS工具函数</a></td>
<td><a href="https://koutu.gaoding.com/passport">证件照</a></td>
<td><a href="https://www.somode.com/">系统家园</a>-下载软件</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>手册网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Learn"> Web 开发/MDN</a>  | <a href="https://developer.mozilla.org/en-US/docs/Web/API">Web APIs</a></th>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Web/API">API 接口参考/MDN</a></th>
<th><a href="https://tool.oschina.net/apidocs">在线API文档</a></th>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors">JS错误参考列表</a></th>
<th><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN-JavaScript</a></td>
<td><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档</a></td>
<td><a href="https://www.axios-http.cn/">Axios</a></td>
<td><a href="https://www.lanmper.cn/">学编程</a></td>
<td><a href="http://caibaojian.com/fedbook/">前端开发者手册</a></td>
</tr>
<tr>
<td><a href="https://www.runoob.com/">菜鸟教程</a></td>
<td><a href="https://cloud.tencent.com/developer/devdocs">开发者手册-腾讯云</a></td>
<td><a href="https://www.html.cn/study/manual/">web前端手册</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">fetch</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Games/Examples">网页游戏开发-Examples</a></td>
</tr>
<tr>
<td><a href="https://www.awesomes.cn/rank">前端TOP100</a></td>
<td><a href="http://restful.p2hp.com/resources/http-status-codes">HTTP状态码</a></td>
<td><a href="https://www.javascriptcn.com/">JavaScript中文网</a></td>
<td><a href="http://c.biancheng.net/js/">JavaScript学习指南</a></td>
<td><a href="https://www.w3school.com.cn/html5/html_5_form_input_types.asp">HTML5 Input 类型</a></td>
</tr>
<tr>
<td><a href="http://es6.ruanyifeng.com/">ECMAScript 6入门</a></td>
<td><a href="http://tool.oschina.net/apidocs/apidoc?api=jquery">在线文档-jQuery</a></td>
<td><a href="http://www.bootcss.com/p/underscore/">Underscore.js中文文档</a></td>
<td><a href="http://www.w3school.com.cn/">w3school在线教程</a></td>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档</a></td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/b.asp">浏览器脚本教程</a></td>
<td><a href="https://www.w3.org/html/ig/zh/wiki/Main_Page">W3C</a></td>
<td><a href="http://javascript.ruanyifeng.com/tool/requirejs.html">RequireJS和AMD规范</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">JavaScript</a></td>
<td><a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015">ECMAScript</a></td>
</tr>
<tr>
<td><a href="http://hemin.cn/jq/index.html">jQuery 手册</a>  |  <a href="https://learn.jquery.com/">jQuery</a></td>
<td><a href="https://api.jquery.com/">jQuery API</a> | <a href="http://hemin.cn/jq/">jQuery在线手册</a></td>
<td><a href="http://jquery.cuishifeng.cn/index.html">jQuery API 中文</a></td>
<td><a href="http://www.jq22.com/chm/jquery/">jQuery速查表</a></td>
<td><a href="https://www.bootcss.com/">Bootstrap相关优质项目推荐</a></td>
</tr>
<tr>
<td><a href="https://docs.wex5.com/">WeX5</a></td>
<td><a href="https://www.imangodoc.com/">芒果文档</a></td>
<td><a href="https://www.underscore-js.com/">underscorejs中文网</a></td>
<td><a href="https://web.dev/learn/">web.dev</a></td>
<td><a href="http://browserhacks.com/">Browserhacks-浏览器hack</a></td>
</tr>
<tr>
<td><a href="https://developer.apple.com/safari/resources/">safari开发中心</a></td>
<td><a href="https://devdocs.io/">DevDocs API Documentation</a></td>
<td><a href="http://es5.github.io/">Annotated ECMAScript 5</a></td>
<td><a href="http://yanhaijing.com/es5/#about">ECMAScript5.1中文版</a></td>
<td><a href="https://www.typescriptlang.org/">TypeScript</a></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/?redirectedfrom=MSDN">Microsoft Edge developer documentation</a></td>
<td><a href="https://www.jquery123.com/">jQuery API 中文文档</a></td>
<td><a href="http://koen301.github.io/fxtpl/">Fxtpl—前端模板引擎</a></td>
<td><a href="http://underscorejs.org/#">Underscore.js</a></td>
<td><a href="https://flow.org/en/docs/types/">Flow 文档：类型注解</a></td>
</tr>
<tr>
<td><a href="http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html">js秘密花园</a></td>
<td><a href="https://aui.github.io/art-template/zh-cn">art-template—高性能 JavaScript 模板引擎</a></td>
<td><a href="https://github.com/aui/art-template">art-template—github</a></td>
<td><a href="https://github.com/aui/art-template-loader">art-template-loader</a></td>
<td><a href="https://github.com/aui/tmodjs">tmodjs</a></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions//cc351024(v=vs.85)?redirectedfrom=MSDN">CSS 兼容性和 Internet Explorer</a></td>
<td><a href="https://csscreator.com/properties">CSS Properties &amp; Selectors  | CSS Creator</a></td>
<td><a href="http://www.worldhello.net/gotgithub/index.html">GotGitHub</a></td>
<td><a href="https://www.cyj.me/why-seajs/zh/">SeaJS</a>  | <a href="http://seajs.org/">seajs</a></td>
<td><a href="http://extjs-doc-cn.github.io/ext4api/">Ext4.1.0 Doc中文版</a></td>
</tr>
<tr>
<td><a href="https://git-scm.com/book/zh/v2">Git-Book</a></td>
<td><a href="http://gitref.justjavac.com/">Git 参考手册</a></td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">Git Magic</a></td>
<td><a href="https://lbs.amap.com/api/">高德地图API</a></td>
<td><a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">在 React 中使用 TypeScript</a></td>
</tr>
<tr>
<td><a href="https://linux265.com/course/linux-command-tree.html">Linux命令大全</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>博客网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://winney07.github.io/">Github个人博客</a></th>
<th><a href="https://www.jspang.com/">技术胖</a></th>
<th><a href="https://www.jb51.net/">脚本之家</a></th>
<th><a href="https://github.com/happypeter">happypeter</a></th>
<th><a href="http://www.zhangxinxu.com/">张鑫旭播客</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.awesomes.cn/rank">前端TOP100</a></td>
<td><a href="https://www.winney07.cn/">我的博客</a></td>
<td><a href="https://winney07.github.io/">Github个人博客</a></td>
<td><a href="http://winney.gitee.io/">Gitee 个人博客</a></td>
<td><a href="https://gitee.com/help#article-header0">Gitee帮助中心</a></td>
</tr>
<tr>
<td><a href="www.nczonline.net">Nicholas C.Zakas（尼古拉斯泽卡斯）</a></td>
<td><a href="https://www.oreilly.com/">oreilly</a></td>
<td><a href="http://www.safaribooksonline.com/">Safari Books Online-数字图书馆</a></td>
<td><a href="https://rmurphey.com/">Rebecca Murphey</a></td>
<td><a href="https://www.jianshu.com/p/937c6003851a">手把手教你封装JavaScript插件</a></td>
</tr>
<tr>
<td><a href="https://www.joshwcomeau.com/">JoshWComeau</a></td>
<td><a href="https://leetcode.cn/">LeetCode</a></td>
<td></td>
<td><a href="https://goshacmd.com/">Gosha Arinich</a></td>
<td><a href="https://blog.csdn.net/qq1195566313">小满zs</a></td>
</tr>
<tr>
<td><a href="http://winney.gitee.io/">Gitee 个人博客</a></td>
<td><a href="http://www.ruanyifeng.com/blog/">阮一峰网络日志</a></td>
<td><a href="https://mubiaozhan.cn/">目标站</a></td>
<td><a href="https://github.com/happypeter/peter-vim">peter-vim</a></td>
<td><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></td>
</tr>
<tr>
<td><a href="https://gitee.com/help#article-header0">Gitee 帮助中心</a></td>
<td><a href="http://www.ruanyifeng.com/home.html">阮一峰的个人网站</a></td>
<td><a href="https://www.jianshu.com/u/379793a403c7">视觉派Pie</a></td>
<td><a href="https://github.com/ruanyf/weekly">科技爱好者周刊</a></td>
<td><a href="https://www.cnblogs.com/">博客园</a></td>
</tr>
<tr>
<td><a href="https://gitee.com/help/articles/4136#article-header0">Gitee Pages</a></td>
<td><a href="http://www.itprobie.com/Default.html">ITPROBIE-程序员的基础教程</a></td>
<td><a href="https://www.imooc.com/u/2667395/articles">五月君</a></td>
<td><a href="http://blog.northpark.cn/">Northpark博客</a></td>
<td><a href="https://www.cnblogs.com/xiaohuochai/">博客园-xiaohuochai</a></td>
</tr>
<tr>
<td><a href="http://www.360doc.com/content/18/1220/07/6889381_803045204.shtml">javascript学习目录</a></td>
<td><a href="https://segmentfault.com/a/1190000022736837">前端常用60余种工具方法</a></td>
<td><a href="https://www.vue-js.com/topic/5ecc88c10ef711364aa1f24d">前端常用工具方法</a></td>
<td><a href="https://www.xuebuyuan.com/">学步园</a></td>
<td><a href="http://www.maxzhang.com/">Max Zhang博客</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/xiaomili/p/7862819.html">JavaScript如何封装插件</a></td>
<td><a href="https://www.cnblogs.com/xiaomili/default.html?page=1">黄鹂</a></td>
<td><a href="https://www.cnblogs.com/chenguiya/p/5278387.html">【javascript详细说明】js封装插件的方法</a></td>
<td><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程（alpha）</a></td>
<td><a href="https://cloud.tencent.com/developer/user/1036137">前端达人</a></td>
</tr>
<tr>
<td><a href="https://cloud.tencent.com/developer/rank">腾讯云开发者社区作者排行榜</a></td>
<td><a href="https://blog.csdn.net/weixin_43880397?type=blog">前端人-CDN</a></td>
<td><a href="https://www.cnblogs.com/makalochen">makalo</a></td>
<td><a href="http://www.manongjc.com/">码农教程</a></td>
<td><a href="https://www.shuzhiduo.com/search/JavaScript/">术之多</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html">使用 CSS3 实现超炫的 Loading（加载）动画效果</a></td>
<td><a href="https://www.processon.com/view/5903f7a9e4b027506a44c494">前端基础知识</a></td>
<td><a href="http://www.maxzhang.com/">博客：Max Zhang 的空岛</a></td>
<td><a href="https://www.cnblogs.com/jikey/p/3632392.html">6. web前端开发分享-css,js移动篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/">豪情</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/yexiaochai/p/4901341.html">前端优化带来的思考，浅谈前端工程化 </a></td>
<td><a href="https://www.cnblogs.com/iamzhanglei/">当耐特</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3600308.html">web前端开发分享-css,js入门篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3601666.html">web前端开发分享-css,js进阶篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3604459.html">web前端开发分享-css,js提高篇</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/jikey/p/3607133.html">web前端开发分享-css,js工具篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3611394.html">web前端开发分享-css,js深化篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3632392.html">web前端开发分享-css,js移动篇</a></td>
<td><a href="https://www.iteye.com/blog/desert3-1198400">JavaScript语言精粹读书笔记- JavaScript函数</a></td>
<td><a href="https://www.iteye.com/blog/zzy603-973649">JS的Object漫想：从现象到“本质”</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/fool/tag/%E7%90%86%E8%A7%A3Javascript/">理解Javascript</a></td>
<td><a href="https://www.cnblogs.com/RicCC/archive/2008/02/15/JavaScript-Object-Model-Execution-Model.html">JavaScript对象模型-执行模型</a></td>
<td><a href="https://www.iteye.com/topic/288808">javascript面向对象技术基础(四)</a></td>
<td><a href="https://www.cnblogs.com/mrsunny/archive/2011/05/09/2041185.html">javascript 类属性、类方法、类实例、实例属性、实例方法、prototype、<strong>proto</strong> 测试与小结</a></td>
<td><a href="https://www.cnblogs.com/jeffwongishandsome/archive/2009/05/17/1457674.html">javascript作用域链(Scope Chain)初探</a></td>
</tr>
<tr>
<td><a href="http://www.linuxfly.org/post/524/">JavaScript 的in 操作符</a></td>
<td><a href="https://blog.csdn.net/aimingoo/article/details/6634977">再谈JavaScript的数据类型问题</a></td>
<td><a href="https://bbs.csdn.net/topics/360024555">JavaScript对象与继承教程之内置对象（下）</a></td>
<td><a href="https://bbs.csdn.net/topics/360022809">JavaScript对象与继承教程之内置对象（上）</a></td>
<td><a href="https://www.cnblogs.com/qiantuwuliang/archive/2009/10/17/1584998.html">JavaScript面向对象-静态方法-私有方法-公有方法-特权方法</a></td>
</tr>
<tr>
<td><a href="https://baijiahao.baidu.com/s?id=1719903131321243042&wfr=spider&for=pc">百度智能云实战——静态文件CDN加速</a></td>
<td><a href="http://caibaojian.com/toutiao/">前端头条</a></td>
<td><a href="http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/">Git 教學(1) : Git 的基本使用</a></td>
<td><a href="https://gogojimmy.net/">好麻煩部落格</a></td>
<td><a href="https://www.cnblogs.com/wangfupeng1988/p/4649709.html">自己总结的web前端知识体系大全</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/yexiaochai/p/4901341.html">前端优化带来的思考，浅谈前端工程化</a></td>
<td><a href="http://www.h-ui.net/">H-ui 前端框架</a></td>
<td><a href="https://www.jianshu.com/p/b25c5b88baf5">前端chrome浏览器调试总结</a></td>
<td><a href="https://www.cr173.com/gonglue/62840_1.html">谷歌浏览器开发调试工具中Sources面板 js调试等 完全介绍</a></td>
<td><a href="https://www.jianshu.com/p/00baf1e65322">WEB前端知识体系脑图</a></td>
</tr>
<tr>
<td><a href="https://www.haorooms.com/">Haorooms</a></td>
<td><a href="https://github.com/chokcoco">Coco</a></td>
<td><a href="https://juejin.cn/user/2330620350437678">chokcoco</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>CSS</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://meyerweb.com/eric/tools/css/reset/">reset.css</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.colorzilla.com/gradient-editor/">css3渐变在线制作器</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://xiebiji.com/2010/01/static_js/?wptheme=Plainscape&ie=1">人像</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>课程平台</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.imooc.com/">慕课网</a></th>
<th></th>
<th></th>
<th><a href="http://www.icketang.com/">爱创课堂</a></th>
<th><a href="http://www.zhinengshe.com/">智能社</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.icourse163.org/">中国大学</a></td>
<td><a href="https://www.w3cschool.cn/">W3Cschool</a></td>
<td><a href="https://www.lmonkey.com/">学习猿地</a></td>
<td><a href="http://www.zhufengpeixun.cn/">珠峰培训</a></td>
<td><a href="http://www.itblw.com/">部落窝教育</a></td>
</tr>
<tr>
<td><a href="https://cloud.tencent.com/edu/learning?from=gw.head">腾讯云</a></td>
<td><a href="https://www.kaikeba.com/">开课吧</a></td>
<td><a href="https://www.vue-js.com/topic/5e4c0d497a28821363fb68b5">2020 年最新前后端编程学习视频</a></td>
<td><a href="https://www.vue-js.com/topic/5e58b40e7d2d480729ae7685">前后端编程视频</a></td>
<td><a href="https://www.html.cn/">Html中文网</a></td>
</tr>
<tr>
<td><a href="https://e.jikexueyuan.com/html5.html?hmsr=baidu_sem_html5_dy_5">极客学院</a></td>
<td><a href="http://www.xiaomuedu.com/">小木学堂</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>课程链接</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.bilibili.com/video/av46236917?from=search&seid=11530041288730825105">web前端 初中高+资深+专家</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>API 文档、API 调试、API Mock、API 自动化测试</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://apifox.apipark.cn/">Apifox</a></th>
<th>Postman</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://swagger.io/">Swagger-定义API文档</a></td>
<td><a href="https://www.jianshu.com/p/33c28a65deb8">Swagger-强大的API文档工具</a></td>
<td>Jmeter-写测试用例</td>
</tr>
</tbody></table>
<ul>
<li>前端框架</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></th>
<th><a href="https://www.vuepress.cn/">VuePress</a></th>
<th></th>
<th></th>
<th><a href="https://www.iviewui.com/components/select">View UI</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.dcloud.net.cn/mui/">MUI</a></td>
<td><a href="https://cba.github.io/layuiAdmin-doc/">layuiAdmin pro-文档</a></td>
<td><a href="http://www.h-ui.net/">H-ui框架</a></td>
<td><a href="https://gitee.com/yingjienet/h-ui">H-ui-Gitee</a></td>
<td><a href="https://github.com/youzan/zanui-weapp.git">Zan UI</a></td>
</tr>
<tr>
<td><a href="https://www.vue-js.com/">Vue.js社区</a></td>
<td><a href="https://www.kancloud.cn/chenmk/web-knowledges/1077402">H5·前端小册</a></td>
<td><a href="https://www.highcharts.com.cn/">Highcharts</a></td>
<td><a href="https://www.canvasapi.cn/CanvasRenderingContext2D/canvas">Canvas API</a></td>
<td><a href="https://github.com/Tencent/weui">WeUI</a></td>
</tr>
<tr>
<td><a href="https://github.com/tsunhua/egret_demo">egret_demo-白鹭引擎</a></td>
<td><a href="https://github.com/egret-labs/egret-game-library">egret-game-library</a></td>
<td><a href="https://github.com/schteppe/p2.js">p2.js</a></td>
<td><a href="https://github.com/schteppe/p2.js/wiki/Chinese-wiki-%E4%B8%AD%E6%96%87%E7%BB%B4%E5%9F%BA">p2.js中文文档</a></td>
<td><a href="https://github.com/egret-labs/egret-core">egret-core</a></td>
</tr>
<tr>
<td><a href="https://github.com/backstage/backstage">backstage</a></td>
<td><a href="https://github.com/ant-design/ant-design-pro">ant-design-pro</a></td>
<td><a href="http://www.h-ui.net/bug.shtml">兼容性及经验汇总</a></td>
<td><a href="http://www.bootcss.com/">Bootstrap中文网</a></td>
<td><a href="http://www.dedecms.com/">织梦CMS</a></td>
</tr>
<tr>
<td><a href="https://tumult.com/">Tumult Hype</a> —macOS的HTML5创建应用程序</td>
<td><a href="https://semantic-ui.com/">Semantic UI</a></td>
<td><a href="https://unicorn-ui.com/">Unicorn UI</a></td>
<td><a href="https://unicorn-ui.com/buttons/builder/">Buttons</a></td>
<td><a href="http://hiloki.github.io/kitecss/">Kite</a></td>
</tr>
<tr>
<td><a href="http://www.h-ui.net/aboutHui.shtml">H-ui前端框架</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>素材网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.iconfont.cn/">Iconfont</a></th>
<th><a href="http://sc.chinaz.com/">站长素材</a></th>
<th><a href="http://www.fontawesome.com.cn/">Font Awesome-字体图标</a></th>
<th><a href="https://icomoon.io/">IconMoon</a></th>
<th><a href="http://www.bootcss.com/p/font-awesome/">bootsrap 图标库</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://api.it120.cc/doc.html#/home">前端接口列表</a></td>
<td><a href="https://www.jianshu.com/p/7bc1fa9b5ef8">免费API接口分享</a></td>
<td><a href="https://www.58pic.com/">千图网</a></td>
<td><a href="http://iconfont.cn/">阿里iconfont</a></td>
<td><a href="https://cdnjs.com/">cdnjs</a></td>
</tr>
<tr>
<td><a href="https://zhuanlan.zhihu.com/p/79463188">免费API接口</a></td>
<td><a href="http://www.sucaijishi.com/">素材集市</a></td>
<td><a href="https://ajz.fkw.com/pro11.html?_ta=2298">凡科建站-3000套模板免费任换</a></td>
<td><a href="http://www.cssmoban.com/">网页/网站模板</a></td>
<td><a href="https://www.kancloud.cn/explore">看云·广场</a></td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/wcqwcq123/article/details/53408789">百度云干货资源</a></td>
<td><a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/">前端教程资料库</a></td>
<td><a href="http://www.h-ui.net/site.shtml">IT网址导航</a></td>
<td><a href="http://www.icketang.com/2017/ickt_state_0713/190.html?shcss881">2018年1000集大型Web前端视频教程</a></td>
<td><a href="https://www.mycodes.net/154/">后台模板-网站模板</a></td>
</tr>
<tr>
<td><a href="https://www.oreilly.com/">Safari Books Online</a></td>
<td><a href="https://jz.fkw.com/muban.html?_ta=2298">免费网站模板</a></td>
<td><a href="http://www.cssmoban.com/">模板之家</a></td>
<td><a href="https://sc.chinaz.com/moban/">站长之家-模板</a></td>
<td><a href="http://www.dedecms51.com/">织梦无忧-模板</a></td>
</tr>
<tr>
<td><a href="https://www.pageadmin.net/moban/">PAGEADMIN-模板</a></td>
<td><a href="https://muban.io/">模板</a></td>
<td><a href="https://picsum.photos/">图片资源</a></td>
<td><a href="https://mb.bootcss.com/">Bootstrap · 精选模板</a></td>
<td><a href="https://stock.tuchong.com/">图虫</a></td>
</tr>
<tr>
<td><a href="https://www.eightandfour.com/">eight&amp;four</a></td>
<td><a href="https://www.17sucai.com/">17素材</a>-模板</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://tool.oschina.net/">在线工具</a></th>
<th><a href="http://tool.lu/">在线工具</a></th>
<th><a href="http://www.minifycss.com/">Minify CSS</a></th>
<th><a href="https://tool.chinaz.com/tools/unicode.aspx">站长工具</a></th>
<th><a href="http://fis.baidu.com/">FIS3-构建工具</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://webpack.github.io/">wepack</a></td>
<td><a href="https://www.gulpjs.com.cn/">Gulp</a></td>
<td><a href="https://www.gruntjs.net/">Grunt</a></td>
<td><a href="https://yarn.bootcss.com/">Yarn</a> || <a href="https://www.yarnpkg.cn/">Yarn</a></td>
<td><a href="https://jingyan.baidu.com/article/e8cdb32b37c7fa37052bad8b.html">汉化SVN</a></td>
</tr>
<tr>
<td><a href="http://sfz.uzuzuz.com/?region=110101&birthday=19920307&sex=1&num=5&r=50">生成身份证号码</a></td>
<td><a href="http://fex-team.github.io/fis-plus/document.html#%25E5%25BF%25AB%25E9%2580%259F%25E5%2585%25A5%25E9%2597%25A8">FIS-PLUS</a></td>
<td><a href="http://fis.baidu.com/">FIS3-工程构建</a></td>
<td><a href="https://coding.net/">CODING-团队协作</a></td>
<td><a href="https://tortoisesvn.net/downloads.zh.html">下载SVN</a></td>
</tr>
<tr>
<td><a href="http://lisperator.net/uglifyjs/">UglifyJS</a></td>
<td><a href="https://excalidraw.com/">绘图/画图</a></td>
<td><a href="https://www.yuque.com/">语雀·笔记软件</a></td>
<td>jest-JavaScript 测试框架<a href="https://jestjs.io/zh-Hans/">https://jestjs.io/zh-Hans/</a></td>
<td><a href="http://dynalon.github.io/mdwiki/#!index.md">MDkiti</a></td>
</tr>
<tr>
<td><a href="https://docsify.js.org/#/">docsify</a></td>
<td><a href="https://docsify.js.org/#/zh-cn/more-pages">docsify-中文版</a></td>
<td>拾色器-jcpicker.exe</td>
<td>beyond compare-代码对比工具</td>
<td><a href="https://cn.wordpress.org/">博客工具-workpress</a></td>
</tr>
<tr>
<td><a href="http://caibaojian.com/vuepress/guide/">VuePress</a></td>
<td><a href="https://gitee.com/">码云-gitee</a></td>
<td><a href="https://colormania.en.softonic.com/">吸色工具-ColorMania</a></td>
<td><a href="http://naotu.baidu.com/">百度脑图</a></td>
<td><a href="http://share.baidu.com/">百度分享</a></td>
</tr>
<tr>
<td><a href="https://www.pc-daily.com/ruanjian/58782.html">vscode注释快捷键</a></td>
<td><a href="http://xqtesting.sxl.cn/">fiddler-小强测试品牌</a></td>
<td></td>
<td><a href="http://html5test.com/">HTML5test</a></td>
<td><a href="https://tongji.baidu.com/web/welcome/login">百度统计</a></td>
</tr>
<tr>
<td><a href="https://github.com/fanmingfei/qiniu_cdn_tool">七牛 CDN 上传工具</a></td>
<td><a href="https://www.laozuo.org/20743.html">网站测速</a></td>
<td><a href="http://www.um.com/">友盟统计</a></td>
<td><a href="http://tongji.baidu.com/data/browser">百度PC平台浏览器，分辨率，操作系统，网名，流量统计</a></td>
<td><a href="http://tongji.baidu.com/data/mobile/brand">百度移动统计（移动端设备品牌占比，移动设备市场份额）</a></td>
</tr>
<tr>
<td><a href="https://www.netmarketshare.com/browser-market-share.aspx?qprid=0&qpcustomd=1">全球移动端浏览器统计</a></td>
<td></td>
<td><a href="http://www.umindex.com/">友盟指数</a></td>
<td><a href="http://brow.data.cnzz.com/">CNZZ桌面及移动端浏览器统计</a></td>
<td><a href="https://www.fontsquirrel.com/tools/webfont-generator">Webfont Generator</a>—在线转换字体</td>
</tr>
<tr>
<td><a href="http://www.opera.com/zh-cn/developer/mobile-emulator">Opera多终端界面模拟</a></td>
<td><a href="https://developer.ibm.com/">IBM Developer</a></td>
<td><a href="https://www.oschina.net/news/54483/21-best-node-js-frameworks-2014">为开发者推荐 21 款最佳的 Node.js 框架</a></td>
<td><a href="https://bestwebhostingaustralia.org/browserscope-org-joins-aussie-hosting/">Browser Scope Has Merged With Aussie Hosting</a>—浏览器的一些独特参数</td>
<td><a href="https://www.jetbrains.com/webstorm/">WebStorm</a></td>
</tr>
<tr>
<td><a href="https://coding.net/">Coding -让开发更简单</a></td>
<td><a href="https://www.wex5.com/wex5/?utm_source=Baidu">WeX5</a></td>
<td><a href="https://www.pintuer.com/">拼图大前端</a></td>
<td><a href="https://github.com/jikeytang/sublime-text">sublime-text</a></td>
<td><a href="https://account.aliyun.com/login/login.htm?oauth_callback=https://pts.aliyun.com/lite/test.htm?spm=0.0.0.0.cI5G4F&lang=zh#/home">性能测试</a></td>
</tr>
</tbody></table>
<p><a href="https://devopshub.cn/2018/10/14/mdwiki/">使用 MDWiki 搭建个人轻博客、知识库或文档中心</a></p>
<ul>
<li>站长工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://tool.chinaz.com/map.aspx">日常实用工具-站长工具</a></th>
<th><a href="http://mobile.chinaz.com/mft.html">移动适配报告</a></th>
<th><a href="http://mobile.chinaz.com/fitscreen.html">移动跨屏模拟</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://tool.chinaz.com/Tools/regexgenerate">正则表达式在线生成</a></td>
<td><a href="https://tool.chinaz.com/regex">正则测试</a></td>
<td><a href="http://tool.chinaz.com/js.aspx">JS混淆加密压缩</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/jsformat.aspx">JS/HTML格式化</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_js.aspx">HTML/JS转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/jscodeconfusion.aspx">JS代码混淆</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/jsonformat.aspx">JSON格式化/校验</a></td>
<td><a href="http://tool.chinaz.com/Tools/jsonescape.aspx">JSON压缩转义</a></td>
<td><a href="http://tool.chinaz.com/Tools/json2entity.aspx">JSON生成实体类</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/base64.aspx">Base64加密、解密</a></td>
<td><a href="http://tool.chinaz.com/Tools/json2get.aspx">JSON-GET互转</a></td>
<td><a href="http://tool.chinaz.com/Tools/jsoneditor.aspx">JSON在线编辑</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/scriptencode.aspx">JS加密、解密</a></td>
<td><a href="http://tool.chinaz.com/Tools/md5.aspx">MD5加密</a></td>
<td><a href="http://tool.chinaz.com/Tools/textencrypt.aspx">文字在线加密解密</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/unicode.aspx">Unicode编码转换</a></td>
<td><a href="http://tool.chinaz.com/Tools/unixtime.aspx">Unix时间戳转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/urlencode.aspx">UrlEncode编码/UrlDecode解码</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/utf-8.aspx">UTF-8 转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_js.aspx">HTML/JS转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_ubb.aspx">HTML/UBB代码转换工具</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/htmlfilter">在线HTML/Js/Css过滤</a></td>
<td><a href="http://tool.chinaz.com/tools/httptest.aspx">在线HTTP POST/GET接口测试</a></td>
<td><a href="http://tool.chinaz.com/tools/dwz.aspx">短链生成</a></td>
</tr>
</tbody></table>
<ul>
<li>编辑工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://code.visualstudio.com/">VScode</a></th>
<th><a href="https://www.postman.com/">Postman-接口测试</a></th>
<th><a href="http://markdown.p2hp.com/index.html">markdown</a></th>
<th></th>
<th><a href="https://brackets.io/">brackets</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.typora.io/">Typora</a></td>
<td><a href="http://www.navicat.com.cn/">Navicat-数据库管理</a></td>
<td>WebStorm</td>
<td>Notepad++</td>
<td><a href="https://sspai.com/post/52176">Notion</a></td>
</tr>
</tbody></table>
<ul>
<li>插件</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.javascriptcn.com/read-35553.html">jquery.fileDownload</a></th>
<th><a href="http://www.clipboardjs.cn/">clipboard.js-复制功能</a></th>
<th><a href="https://www.jstree.com.cn/">jsTree中文网</a></th>
<th><a href="https://www.jq22.com/">jQuery插件库</a></th>
<th><a href="https://jqueryui.com/datepicker/">Datepicker</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.cnblogs.com/ghfjj/p/6732855.html">Foundation datepicker</a></td>
<td><a href="http://foundation-datepicker.peterbeno.com/">Foundation-datepicker.js</a></td>
<td><a href="https://www.jstree.com/">jsTree-树</a></td>
<td><a href="https://ant.design/components/date-picker-cn/">Datepicker日期插件</a></td>
<td><a href="https://cloud.tencent.com/developer/section/1489878">DatePicker</a></td>
</tr>
<tr>
<td><a href="http://www.my97.net/demo/resource/main.asp#m1">My97 DatePicker</a></td>
<td><a href="http://foundation-datepicker.peterbeno.com/">Foundation-datepicker.js</a></td>
<td><a href="http://code.ciaoca.com/javascript/qrcode/demo/">QRCode.js 生成二维码</a></td>
<td><a href="https://github.com/davidshimjs/qrcodejs">qrcodejs-github</a></td>
<td><a href="http://nodeca.github.io/pako/">pako</a></td>
</tr>
<tr>
<td><a href="https://github.com/blueimp/jQuery-File-Upload">jQuery-File-Upload</a></td>
<td><a href="https://www.jq22.com/jquery-info230">jQuery File Upload-jQuery</a></td>
<td><a href="https://www.swiper.com.cn/">Swiper-滑动功能，触摸导航</a></td>
<td><a href="https://github.com/smalot/bootstrap-datetimepicker">bootstrap-datetimepicker</a></td>
<td><a href="https://demo.16css.com/qtdm/1195/demo.html">jquery.pagination.js-分页</a></td>
</tr>
<tr>
<td><a href="https://terryz.github.io/bpage/index.html">bpage-分页插件</a></td>
<td><a href="https://www.highcharts.com.cn/">Highcharts</a></td>
<td><a href="https://github.com/cubiq/iscroll">iscroll-github</a></td>
<td><a href="http://caibaojian.com/iscroll-5/">iscroll5 API</a></td>
<td><a href="http://www.htmleaf.com/ziliaoku/">jQuery之家-插件库</a></td>
</tr>
<tr>
<td><a href="http://www.bshare.cn/">bShare分享</a></td>
<td><a href="http://www.superslide2.com/">superslide</a></td>
<td><a href="http://www.jq22.com/yanshi819">Animate.css 一款强大的预设css</a></td>
<td><a href="https://jqueryui.com/datepicker/">datepicker</a></td>
<td><a href="http://www.ijquery.cn/">插件库</a></td>
</tr>
<tr>
<td><a href="https://iscrolljs.com/#initialization">iScroll.js</a></td>
<td><a href="https://jqpaginator.keenwon.com/">jqPaginator</a>-分页插件</td>
<td><a href="http://www.bshare.cn/">爱点击-bShare分享代码|分享按钮</a></td>
<td><a href="https://github.com/aui/artDialog">artDialog</a>—网页对话框</td>
<td><a href="https://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a></td>
</tr>
<tr>
<td><a href="https://www.dowebok.com/77.html">jQuery全屏滚动插件fullPage.js</a></td>
<td><a href="https://blog.csdn.net/weixin_44058725/article/details/119022903">前端粒子效果（particles.js）</a></td>
<td><a href="https://www.jq22.com/demo/particles20160927/">粒子效果</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>K线</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://blog.csdn.net/u010527630/article/details/52098999?locationNum=2&fps=1">k线图学习</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.highcharts.com/demo/stock/basic-line">Hightcharts</a></td>
<td><a href="http://h5.vstock.cairenhui.com/">k线案例</a></td>
<td><a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></td>
</tr>
<tr>
<td>CSDN-<a href="https://so.csdn.net/so/search?q=k%E7%BA%BF%E5%9B%BE">K线图</a></td>
<td><a href="http://www.zcool.com.cn/work/ZMTMzOTQ1OTY=.html">聚宝盆APP</a></td>
<td></td>
</tr>
<tr>
<td>Github-<a href="https://github.com/search?utf8=%E2%9C%93&q=k%E7%BA%BF">K线图</a></td>
<td><a href="http://www.zcool.com.cn/work/ZMTM3NzIxMzY=.html">金融App</a></td>
<td><a href="https://echarts.apache.org/handbook/zh/get-started">快速入门</a><a href="https://echarts.apache.org/examples/zh/index.html">所有示例</a><a href="https://www.zcool.com.cn/work/ZMTI5MjAwNTI=.html">股票配资</a></td>
</tr>
</tbody></table>
<p>bug论坛  <a href="https://stackoverflow.com/">stackoverflow</a></p>
<ul>
<li>网站模板</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.cssmoban.com/cssthemes/10773.shtml">CloudAdmin网站后台管理系统</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>ui框架</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://bulma.io/">bulma</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>Bulma 是一款基于 Flexbox 的现代 CSS 框架。有以下特性：</p>
<ul>
<li>响应式，Bulma 是一个优先考虑移动版的框架</li>
<li>模块化，只需导入你需要的</li>
<li>现代化，基于 Flexbox</li>
</ul>
</blockquote>
<h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><ul>
<li>Vue.js</li>
</ul>
<table>
<thead>
<tr>
<th>官网+社区</th>
<th><a href="https://vuex.vuejs.org/zh/">Vuex</a></th>
<th><a href="https://cli.vuejs.org/zh/">Vue CLI</a></th>
<th>全家桶</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://cn.vuejs.org/v2/guide/">Vue.js</a></td>
<td><a href="https://vuex.vuejs.org/api/">Vuex英文版官网</a></td>
<td><a href="https://router.vuejs.org/zh/">Vue Router</a></td>
<td><a href="https://vue-js.com/topic/5dcf8c7fe71cf96248983463">TypesScript + Node.js + Express + Mongoose</a></td>
</tr>
<tr>
<td><a href="https://www.vue-js.com/">Vue.js专业社区</a></td>
<td><a href="https://linjinze999.github.io/vue-llplatform/">vue-llplatform-搭建一个后台管理项目</a></td>
<td><a href="http://www.axios-js.com/">axios中文官网</a></td>
<td><a href="https://vue-js.com/topic/596ad6b24357a3434f91f5a3">vue+express+mongodb-个人博客</a></td>
</tr>
<tr>
<td><a href="https://vuejs.org/v2/guide/list.html#Maintaining-State">Vue.js英文版官网</a></td>
<td></td>
<td></td>
<td><a href="https://www.vue-js.com/topic/5979b2d04357a3434f91f82c">vue2+node(express)+mongodb(mongoose)</a></td>
</tr>
<tr>
<td><a href="https://vueschool.io/courses">Vue School</a></td>
<td><a href="https://www.vue-js.com/topic/5ed9ba550ef711364aa1f258">Vue优秀文章集合</a></td>
<td><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></td>
<td><a href="https://vue-js.com/topic/592e7622fbaee51e2432c1e2">vue+websocket+express+mongodb-实时聊天</a></td>
</tr>
<tr>
<td><a href="https://learning.dcloud.io/#/">Vue.js教程</a></td>
<td><a href="https://www.vue-js.com/topic/5ed9b90c0ef711364aa1f255">Vue3学习资源集合</a></td>
<td><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a></td>
<td><a href="https://segmentfault.com/a/1190000013025450">vue+node+mongodb-搭建博客</a></td>
</tr>
<tr>
<td><a href="http://coffee-script.org/">CoffeeScript</a></td>
<td><a href="https://ant.design/index-cn">Ant</a></td>
<td><a href="https://bulma.io/">Bulma</a></td>
<td><a href="https://github.com/seajs/seajs">Seajs</a></td>
</tr>
<tr>
<td><a href="https://cn.wordpress.org/">WordPress</a></td>
<td><a href="http://backbonejs.org/">backbone.js</a></td>
<td><a href="https://knockoutjs.com/">Knockout</a></td>
<td></td>
</tr>
</tbody></table>
<h5 id="vue-llplatform-基于Vue-Element搭建一个后台管理项目"><a href="#vue-llplatform-基于Vue-Element搭建一个后台管理项目" class="headerlink" title="vue-llplatform-基于Vue + Element搭建一个后台管理项目"></a>vue-llplatform-基于Vue + Element搭建一个后台管理项目</h5><p>教学说明：<a href="https://linjinze999.github.io/vue-llplatform/">https://linjinze999.github.io/vue-llplatform/</a></p>
<p>源码地址：<a href="https://github.com/linjinze999/vue-llplatform">https://github.com/linjinze999/vue-llplatform</a></p>
<p>在线预览：<a href="https://linjinze999.github.io/vue-llplatform/preview/#/login">https://linjinze999.github.io/vue-llplatform/preview/#/login</a></p>
<h4 id="View-UI"><a href="#View-UI" class="headerlink" title="View UI"></a>View UI</h4><table>
<thead>
<tr>
<th><a href="https://www.iviewui.com/docs/introduce">View UI</a> (基于vue.js UI框架)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>React</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://zh-hans.reactjs.org/">React中文官网</a></th>
<th><a href="https://github.com/facebook/react/blob/main/CHANGELOG.md">React-GitHub</a></th>
<th><a href="https://zh-hans.reactjs.org/docs/react-component.html">React-API</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://zh-hans.reactjs.org/docs/glossary.html">React 术语词汇表</a></td>
<td><a href="https://zh-hans.reactjs.org/docs/faq-structure.html">项目文件结构</a></td>
<td><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></td>
</tr>
<tr>
<td><a href="https://zh-hans.reactjs.org/docs/faq-ajax.html">AJAX and APIs</a></td>
<td><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html">react-边学边做</a></td>
<td><a href="https://zh-hans.reactjs.org/blog/2021/12/17/react-conf-2021-recap.html">react版本更新</a></td>
</tr>
<tr>
<td><a href="https://zh-hans.reactjs.org/docs/faq-state.html">组件状态</a></td>
<td><a href="https://atomicdesign.bradfrost.com/">Atomic Design by Brad Frost</a></td>
<td><a href="https://github.com/facebook/react/releases">react版本</a></td>
</tr>
<tr>
<td><a href="https://www.nextjs.cn/">Next.js</a></td>
<td><a href="https://github.com/typescript-cheatsheets/react">React+TypeScript Cheatsheets</a></td>
<td><a href="https://bradfrost.com/blog/post/atomic-web-design/">原子设计</a></td>
</tr>
<tr>
<td><a href="https://github.com/reduxjs/redux">Redux</a></td>
<td><a href="https://github.com/reduxjs/rtk-convert-todos-example">rtk-convert-todos-example</a></td>
<td><a href="https://github.com/nokazn/redux-essentials-example">redux-essentials-example</a></td>
</tr>
<tr>
<td><a href="https://github.com/HY88883/admin-client_final_redux">admin-client_final_redux</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Element-UI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://element.eleme.cn/2.13/#/zh-CN/component/installation">Element</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Vant</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://youzan.github.io/vant/#/zh-CN/form">Vant</a></th>
<th><a href="https://github.com/vant-ui/vant-demo">vant-ui—vant-demo</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://youzan.github.io/vant-weapp/#/intro">Vant Weapp</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>layuiAdmin Pro</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.layui.com/admin/pro/#/">layuiAdmin Pro</a></th>
<th><a href="https://cba.github.io/layuiAdmin-doc/">layuiAdmin pro v1.x 开发者文档</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/pizepei">pizepei</a> / <a href="https://github.com/pizepei/LayuiAdminProPHP">LayuiAdminProPHP</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Node.js</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://nodejs.org/en/">Node.js</a></th>
<th><a href="https://pan.baidu.com/s/12ixFs">《深入浅出Node.js.pdf》</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://nodejs.cn/">Node.js中文网</a></td>
<td><a href="https://github.com/nvm-sh/nvm">nvm</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Git</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://git-scm.com/">Git官网</a></th>
<th><a href="https://git-scm.com/book/zh/v2">Git文档</a></th>
<th><a href="https://www.w3cschool.cn/git/git-tutorial.html">Git教程_w3cschool</a></th>
<th><a href="https://gitforwindows.org/">安装包下载地址</a></th>
<th><a href="https://git-scm.com/docs">Git完整命令手册</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://npm.taobao.org/mirrors/git-for-windows/">git-for-windows Mirror</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用Git命令清单</a></td>
<td><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰官方网站</a></td>
<td><a href="https://desktop.github.com/">Github客户端</a></td>
<td><a href="https://www.w3cschool.cn/statics/demosource/github-git-cheat-sheet.pdf">PDF版命令手册</a></td>
</tr>
<tr>
<td><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html">Git远程操作详解</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a></td>
<td><a href="https://blog.csdn.net/duomoke/article/details/49992039">git操作详解（阮一峰）</a></td>
<td><a href="https://www.techug.com/post/git-use-process.html">阮一峰：Git 使用规范流程</a></td>
<td><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">非常详细准确的git学习资料</a></td>
</tr>
<tr>
<td><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E9%85%8D%E7%BD%AE">git-cheat-sheet中文版</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>MongoDB</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.mongodb.com/">MongoDB</a></th>
<th><a href="https://www.mongodb.com/cn">mongoDB</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.mongodb.org.cn/">mongoDB</a></td>
<td><a href="https://www.jianshu.com/p/60e5775937b5">mongoDB基本操作</a></td>
<td></td>
<td></td>
<td><a href="https://docs.mongodb.com/manual/">MongoDB Manual</a></td>
</tr>
</tbody></table>
<ul>
<li>Hexo</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://hexo.io/zh-cn/index.html">Hexo</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://bigzcoder.gitee.io/2020/06/27/autohexomaker/">Hexo自动化工具</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Markdown</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://markdown.p2hp.com/">Markdown中文网</a></th>
<th></th>
<th><a href="https://www.jianshu.com/p/093aba73b751?utm_source=oschina-app">用“思维导图”写md</a></th>
<th><a href="https://www.jianshu.com/p/e74eb43960a1">md数学公式语法</a></th>
<th><a href="https://www.jianshu.com/p/abb8b9407911">有道云md输入数学公式</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.markdownguide.org/">Markdown Guide</a></td>
<td><a href="http://www.mdeditor.com/">md在线编辑器</a></td>
<td><a href="https://www.jianshu.com/p/25f0139637b7">md中公式编辑教程</a></td>
<td><a href="https://www.jianshu.com/p/c2814458dbfe">md 公式指导手册</a></td>
<td><a href="https://list.yinxiang.com/markdown/eef42447-db3f-48ee-827b-1bb34c03eb83.php">印象笔记 md 入门指南</a></td>
</tr>
<tr>
<td><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/?id=markdown-preview-enhanced">Markdown Preview Enhanced</a></td>
<td></td>
<td></td>
<td><a href="http://note.youdao.com/iyoudao/?p=2411">有道云笔记md指南-简明</a></td>
<td><a href="http://note.youdao.com/iyoudao/?p=2445">有道云笔记md指南-进阶</a></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Markdown Preview Enhanced</strong> 是一款为 <a href="https://atom.io/packages/markdown-preview-enhanced"><strong>Atom</strong></a> 以及 <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced"><strong>Visual Studio Code</strong></a> 编辑器编写的<strong>超级强大的</strong> Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。</p>
</blockquote>
<ul>
<li>ECMAScript 6</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://es6.ruanyifeng.com/">ECMAScript 6</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.jianshu.com/p/2bfb741b1f01">Promise完全详解</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Typescript</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.typescriptlang.org/">Typescript</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.typescriptlang.org/zh/">Typescript中文</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Layui</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.layui.com/">layui</a></th>
<th><a href="https://fly.layui.com/notice/close.html">layui社区</a></th>
<th><a href="https://gitee.com/sentsin/layui/issues">layui-码云</a></th>
<th><a href="https://fly.layui.com/extend/xmSelect/">xmSelect下拉多选</a></th>
<th><a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select文档</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://fly.layui.com/extend/excel/">layui.excel</a></td>
<td><a href="http://excel.wj2015.com/_book/">LAY-EXCEL-导出插件</a></td>
<td><a href="https://fly.layui.com/extend/">layui 第三方组件平台</a></td>
<td><a href="https://fly.layui.com/extend/formSelects/#doc">formSelects 4</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Bootstrap</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://v2.bootcss.com/index.html">Bootstrap</a></th>
<th><a href="http://expo.bootcss.com/">Bootstrap优站精选</a></th>
<th><a href="http://www.bootcss.com/">Bootstrap中文网</a></th>
<th><a href="http://v3.bootcss.com/">Bootstrap 中文文档</a></th>
<th><a href="https://www.bootcss.com/p/layoutit/">Bootstrap可视化布局系统-</a>拖拽布局</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bootstrap-table.com.cn/doc/api/table-options/#rowstyle">Bootstrap-Table</a></td>
<td><a href="http://www.w3cschool.cc/bootstrap/bootstrap-intro.html">Bootstrap 简介 | w3cschool菜鸟教程</a></td>
<td><a href="http://www.bootcss.com/p/layoutit/">Bootstrap可视化布局系统</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Flutter</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://flutterchina.club/get-started/install/">Flutter中文网</a></th>
<th><a href="https://juejin.cn/tag/Flutter?utm_source=flutterchina&utm_medium=word&utm_medium=word&utm_content=btn&utm_content=btn&utm_campaign=q3_website?utm_source=flutterchina&utm_campaign=q3_website">Flutter-掘金标签</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/flutter/flutter/wiki">flutter-github</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>H+</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://yanshi.sucaihuo.com/modals/40/4078/demo/">H+</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Weex</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://weex.apache.org/zh/guide/introduction.html">Weex</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>WeUI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://weui.io/1.x/">WeUI</a></th>
<th><a href="https://www.kancloud.cn/ywfwj2008/weui/274286">WeUI中文文档</a></th>
<th><a href="http://weui.github.io/weui">WeUI 官方 Demo</a></th>
<th><a href="https://github.com/weui/weui/wiki">WeUI 官方 Wiki</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/design/#%E9%87%8D%E7%82%B9%E7%AA%81%E5%87%BA">微信小程序设计指南</a></td>
<td><a href="https://github.com/weui/weui">WeUI 官方 Github</a></td>
<td><a href="https://github.com/weui/weui/releases">WeUI 官方 Releases</a></td>
<td></td>
<td><a href="https://www.jianshu.com/p/6c8e55fc501b">WeUI简明入门指南</a></td>
</tr>
</tbody></table>
<ul>
<li>MUI</li>
</ul>
<table>
<thead>
<tr>
<th><strong><a href="https://github.com/liganghui/mui-learn-demo"> mui-learn-demo</a></strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/dcloudio/mui">mui-github</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://dcloud.io/hellomui/">Hello mui</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>jQuery</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://jquery.com/">jQuery</a></th>
<th><a href="http://www.jquery123.com/">jQuery | jQuery 中文网</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.jq22.com/">jQuery插件库</a></td>
<td><a href="http://www.jeasyui.net/">JQuery EasyUI中文网</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>jQuery MiniUI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.miniui.com/index.html">jQuery MiniUI</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>webpack</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.webpackjs.com/">webpack中文文档</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Babel</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://babeljs.io/">Babel</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.babeljs.cn/">Babel中文网</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>FastAdmin</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.fastadmin.net/">FastAdmin框架文档</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Express</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.expressjs.com.cn/">Express</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>uni-app</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://uniapp.dcloud.io/">uni-app</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>QRcode.js-二维码生成器</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/davidshimjs/qrcodejs">qrcode-github</a></th>
<th><a href="http://code.ciaoca.com/javascript/qrcode/">qrcode-文档</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/w3cnote/javascript-qrcodejs-library.html">qrcode-菜鸟教程</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://github.com/NicepageApp/Nicepage">NicePage</a>：基于强大的<a href="https://www.layui.com/"> layui </a>框架,通过扩展laypage.js, <a href="https://github.com/nicez2/nicepage">nicePage.js</a>实现JSON数据格式的自动表格分页和跳转功能</p>
<ul>
<li>Sea.js</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.w3cschool.cn/seajs/">sea.js使用手册</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/seajs/seajs">sea.js-github</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>yarn</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://yarnpkg.com/">yarn</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>nvm</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/nvm-sh/nvm">nvm-github</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>GUI</p>
<h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><table>
<thead>
<tr>
<th><a href="https://www.cnblogs.com/manongxiaobing/p/4720568.html">移动端图片上传解决方案localResizeIMG先压缩后ajax无刷新上传</a></th>
<th><a href="https://www.iteye.com/blog/elim-1109315">使用swfUpload进行批量上传图片</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://segmentfault.com/q/1010000000094937">关于客户端JS能否等比例压缩图片的请教</a></td>
<td><a href="https://www.cnblogs.com/zjfree/archive/2010/12/26/1917222.html">图片压缩后上传【Flash】</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.jb51.net/article/68949.htm">angularjs客户端实现压缩图片文件并上传实例</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://blog.csdn.net/alexwang1983/article/details/46744207">在angularjs客户端压缩图片文件然后上传</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="前端视频"><a href="#前端视频" class="headerlink" title="前端视频"></a>前端视频</h4><table>
<thead>
<tr>
<th><a href="https://www.bilibili.com/video/BV14J4114768">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bilibili.com/video/BV1Kg411T7t9">前端开发入门教程，web前端零基础html5 +css3+前端项目视频教程</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.jikexueyuan.com/course/javascript/">极客学院-JavaScript</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://study.163.com/provider/440039/index.htm?_trace_c_p_k2_=1c2255f9efa24a73bc63bdfd50b68f7f">妙味课堂</a>-视频</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h4><p><a href="https://www.lanrenzhijia.com/others/4299.html">https://www.lanrenzhijia.com/others/4299.html</a></p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul>
<li>资源网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://huaban.com/">花瓣网</a></th>
<th><a href="https://unsplash.com/">Unsplash-免版权图库</a></th>
<th><a href="https://helpx.adobe.com/support.html">Adobe Help Center</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://app.xueui.cn/">学ui网</a></td>
<td><a href="https://hao.xueui.cn/">UI设计导航</a></td>
<td><a href="https://www.uisdc.com/">优设</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://v.paixin.com/">拍信创意</a></td>
<td><a href="https://showroom.littleworkshop.fr/">室内设计稿</a></td>
<td><a href="https://www.taptap.com/">TapTap-发现好游戏</a></td>
<td><a href="https://www.5tu.cn/colors/yansebiao.html">百图汇-颜色表</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>图库网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.socwall.com/">Desktop Wallpaper-壁纸</a></th>
<th><a href="https://pixabay.com/zh/photos/?order=latest">免费正版高清照片素材库</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://desktopography.net/">Desktopgraphy-壁纸</a></td>
<td><a href="https://500px.com/popular">热门照片-500px</a></td>
<td><a href="https://www.123rf.com.cn/">图片库-专业商业图片素材网</a></td>
</tr>
<tr>
<td><a href="https://www.stockvault.net/">Free Stock Photos，Images</a></td>
<td><a href="https://www.pexels.com/zh-cn/">Pexels-免费素材图片</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://wallhaven.cc/">Awesome Wallpapers-壁纸</a></td>
<td><a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">百度识图</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>学习网站</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.gogoup.com/">站酷高高手</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.snipaste.com/">Snipaste-颜色吸取</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.figma.com/">Figma-设计工具</a></td>
<td><a href="https://figmachina.com/">Figma-中文</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>原型</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.xiaopiu.com/square?platform=web">即时原型</a></th>
<th><a href="http://www.colordrop.io/">Colordrop</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.yrucd.com/">云端</a></td>
<td><a href="http://khroma.co/">khroma</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://creativemarket.com/">Creative</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://placeit.net/">Placeit</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>视频链接</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.bilibili.com/video/BV1pt4y1C7jN/?spm_id_from=333.337.search-card.all.click&vd_source=40931b9b7a6dfae9780e1c6f05637a83">PS后期高手之路基础篇</a>-李涛老师</th>
<th><a href="https://www.bilibili.com/video/BV1ba411m7NY">Axure 9 从入门到精通全集，自学必备</a></th>
<th><a href="https://www.bilibili.com/video/BV14B4y1z7Hp">【色彩搭配】2022至今看过最棒的关于基础色彩理论的视频</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bilibili.com/video/BV1ox411f7tA">AI教程AI2019教程(illustrator2019版 零基础入门50集)</a></td>
<td><a href="https://www.bilibili.com/video/BV1WV411i7SH">Axure 9从入门到精通_Axure RP9零基础入门【产品经理基础】</a></td>
<td><a href="https://www.bilibili.com/video/BV1BG4y1i7ta">【色彩大师】2022全网最全的设计色彩搭配原理讲解，设计师调色保姆级教程</a></td>
</tr>
<tr>
<td><a href="https://www.bilibili.com/video/BV1Jr4y137q1">Photoshop全套教程</a></td>
<td><a href="https://www.bilibili.com/video/BV184411g7R2">【官方】Axure9.0产品经理（全集）</a></td>
<td><a href="https://www.bilibili.com/video/BV1QK411G7zW">色彩搭配视频教程合集（已完结）</a></td>
</tr>
<tr>
<td><a href="https://www.bilibili.com/video/BV1Yx411f7d6">Axure教程视频，0基础入门，2小时学会</a></td>
<td><a href="https://www.bilibili.com/video/BV1Gx41187Bj">Axure从入门到精通系列课程</a></td>
<td><a href="https://www.bilibili.com/video/BV1ai4y1N7SV">设计必学！2021全网最全的“设计色彩理论知识“</a></td>
</tr>
<tr>
<td><a href="https://www.bilibili.com/video/BV1o4411o71R">【配色基础原理】50分钟干货，设计师颜色搭配口诀，色彩搭配的技巧大全</a></td>
<td><a href="https://www.bilibili.com/video/BV1a741147tj">零基础室内设计软装教程和装修风格及色彩搭配</a></td>
<td></td>
</tr>
</tbody></table>
<h3 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h3><table>
<thead>
<tr>
<th><a href="https://study.163.com/course/introduction.htm?courseId=214003#/courseDetail?tab=1">手绘POP生活插画精选范例-汤小元</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.edrawsoft.cn/mindmaster/">亿图脑图MindMaster</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>视频素材</p>
<p><a href="https://699pic.com/media/">摄图</a></p>
<p><a href="https://www.paixin.com/video">拍信创意</a></p>
<p><a href="https://www.51miz.com/so-sound/220452.html?utm_term=1682992&utm_source=baidu&bd_vid=7543317075384873797">音频下载</a></p>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul>
<li>资源网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.52pojie.cn/">吾爱破解</a></th>
<th><a href="http://www.nlc.cn/dsb_zyyfw/ts/tszyk/">中国国家图书馆</a></th>
<th><a href="https://www.zjlib.cn/zyzxyd/index.htm">在线阅读</a></th>
<th><a href="http://www.rejoiceblog.com/">rejoice-海量电子书</a></th>
<th><a href="https://www.sohu.com/a/255356802_800660">52个办案检索网站</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.gzlib.org.cn/">广州图书馆</a></td>
<td><a href="http://h.bkzx.cn/">中国大百科全书数据库</a></td>
<td><a href="https://www.mbalib.com/">MBA智库</a></td>
<td><a href="http://www.360doc.com/index.html">360doc个人图书馆</a></td>
<td><a href="https://se.zhangyue.com/channel/index?appId=fcfa84ba">公共数字文化工程</a></td>
</tr>
<tr>
<td><a href="http://opac.gzlib.org.cn/opac/reader/login?returnUrl=/reader/space">我的图书馆</a></td>
<td><a href="https://max.book118.com/">原创力文档</a></td>
<td><a href="http://czjy.100xuexi.com/">电子书</a></td>
<td><a href="http://gz.bendibao.com/life/20121121/110006.shtml">广州居住证办理地点-览表</a></td>
<td><a href="http://www.legalinfo.gov.cn/pub/sfbzhfx/index.html">智慧普法平台</a></td>
</tr>
<tr>
<td><a href="http://ds.eywedu.com/">在线读书网</a></td>
<td><a href="http://www.cas.cn/ky/kycc/kxsjk/">科学数据库-中国科学院</a></td>
<td><a href="https://mso.pansoso.com/">网盘搜索</a></td>
<td><a href="http://deng.resgain.net/index.html">姓名参考网</a></td>
<td><a href="https://www.net-a-porter.com/cn/zh/?cm_mmc=BaiduChinaCN--c-_-NAP_CN_CN_SIMPLE-_-BrandZone--PCtitle-_-newarrivals">NET-A-PORTER.COM-购物</a></td>
</tr>
<tr>
<td><a href="http://ishare.iask.sina.com.cn/">sina爱问共享资料</a></td>
<td><a href="http://www.qqstudent.com/baidupanxuexi/">百度云网盘资源</a></td>
<td><a href="http://www.qqstudent.com/search.php">QQ学生网</a></td>
<td><a href="http://tieba.baidu.com/f/user/passport?jumpUrl=http://tieba.baidu.com">百度贴吧</a></td>
<td><a href="http://focus.tianya.cn/">天涯社区</a></td>
</tr>
<tr>
<td><a href="http://cha.buyiju.com/">卜易居-实用查询</a></td>
<td><a href="http://www.tup.tsinghua.edu.cn/index.html">清华大学出版社</a></td>
<td><a href="https://www.zhihu.com/">知乎</a></td>
<td><a href="http://www.pinmuch.com/">品品品资源论坛-电子书，杂志，学习教育等</a></td>
<td><a href="https://www.wobangzhao.com/">我帮找网</a></td>
</tr>
</tbody></table>
<ul>
<li>网站模板</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.cssmoban.com/">模板之家</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.wemorefun.com/">微魔</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cssmoban.com/preview/index.html?url=http://demo.kangjingept.com:8020/cssthemes6/4.10ZF02/index.html&id=21150&tid=20125072756579">数据管理后台模板参考</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cssmoban.com/preview/index.html?url=http://demo.kangjingept.com:8020/cssthemes6/1.13ZF04/index.html&id=17280&tid=20137004880497">企事业通用后台管理模板</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://pandownload.com/">PanDownload-下载</a></th>
<th><a href="https://duplicatefilefinder4pc.com/duplicate-file-finder-plus.htm?selectedTab=updates">Duplicate-重复文件查找器</a></th>
<th><a href="http://www.navicat.com.cn/products/navicat-for-mysql/">Navicat</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.yuque.com/">语雀-写作工具</a></td>
<td><a href="https://www.voidtools.com/zh-cn/">Everything-快速定位文件</a></td>
<td><a href="https://www.wangeditor.com/">wangEditor-富文本编辑器</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://saladict.crimx.com/">Saladict 沙拉查词</a></td>
<td><a href="https://www.i4.cn/">爱思助手-苹果刷机</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://ad.oceanengine.com/pages/login/index.html">广告投放平台</a></p>
<ul>
<li>资讯网</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.admin5.com/">A5创业网</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://news.baidu.com/">百度新闻</a></td>
<td><a href="https://shixian.com/">实现网</a></td>
<td></td>
</tr>
</tbody></table>
<h3 id="教师资格证"><a href="#教师资格证" class="headerlink" title="教师资格证"></a>教师资格证</h3><table>
<thead>
<tr>
<th><a href="http://ntce.neea.edu.cn/">NTCE - 中国教育考试网</a></th>
<th><a href="http://www.zgjsks.com/html/2019/linianzhenti_0107/351947.html">中公教师</a></th>
<th><a href="http://www.hteacher.net/zige/">华图教师</a></th>
<th><a href="https://www.tingkez.com/">听课站</a></th>
<th><a href="http://www.dogwood.com.cn/">新东方图书网</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.fenbi.com/spa/tiku/guide/catalog/jszgz?prefix=jszgzhz">粉笔网题库</a></td>
<td><a href="https://www.sp910.com/">教视网-优质课</a></td>
<td><a href="https://www.xueersi.com/">学而思网校</a></td>
<td><a href="http://www.dzkbw.com/">电子课本网</a></td>
<td><a href="https://www.pep.com.cn/">人民教育出版社</a></td>
</tr>
<tr>
<td><a href="https://www.zxxk.com/">学科网</a></td>
<td><a href="https://www.21cnjy.com/">21世纪教育网-教案-课件</a></td>
<td><a href="https://book.21cnjy.com/">21书城-资源专辑</a></td>
<td><a href="http://www.dearedu.com/">第二教育网</a></td>
<td><a href="https://www.17kjs.com/Course/together?exam=certification&type=interview">一起考教师-面试</a></td>
</tr>
<tr>
<td><a href="https://www.examw.com/">中华考试网</a></td>
<td><a href="http://www.xdf.cn/">新东方网</a></td>
<td><a href="https://tiku.baidu.com/tikupc/homepage/1742a8956bec0975f465e205">百度题库</a></td>
<td><a href="https://www.educity.cn/tiku/">e希赛</a></td>
<td><a href="https://wenku.baidu.com/">百度文库</a></td>
</tr>
<tr>
<td><a href="http://www.zgjsks.com/html/jszg/mianshi/">中公教师-面试</a></td>
<td><a href="http://www.offcn.com/">中公教育</a></td>
<td><a href="http://www.eoffcn.com/">中公网校</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>信息技术</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://book.21cnjy.com/book?stage=3&subject_id=14&version_id=0&isjin=&idtype=&typeidroot=&isfinish=&year=">高中信息技术书籍汇编</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://ke.qq.com/course/64825?taid=922859622956345">《Excel小白脱白系列课程》</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>数学</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.dzkbw.com/books/chuzhong-shuxue/">初中数学电子课本</a></th>
<th><a href="http://www.zgjsks.com/html/jszg/xueke/shuxue/">数学考试试题及答案</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.renjiaoshe.com/shuxue/">教师之家-数学备课网</a></td>
<td><a href="https://www.hxx100.com/show.php?id=7024">高等数学-宋浩老师</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>地理</li>
</ul>
<p>这里给大家总结了一份CIE官网推荐的A-level地理学习网站！不要太贴心了！</p>
<p><a href="https://www.zhihu.com/question/23427617">如何构建自己的笔记系统？</a></p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="https://book.douban.com/subject/3590768/">《JavaScript语言精粹》</a></p>
<p><a href="https://book.douban.com/subject/10733304/">《基于MVC的JavaScript Web富应用开发》</a></p>
<p><a href="https://book.douban.com/subject/10826093/">《HTML5实验室》</a></p>
<p><a href="https://book.douban.com/subject/23820912/">《HTML5 Canvas游戏开发实战》</a>——这书前半部分是canvas基础，后半部分是游戏的示例。</p>
<p><a href="http://book.douban.com/subject/5402708/">《 HTML5高级程序设计》</a></p>
<p><a href="https://book.douban.com/subject/26369130/">《移动Web手册》</a></p>
<p>【1】 ES5/词法 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">https://www.w3.org/html/ig/zh/wiki/ES5/lexical</a><br>【2】 阮一峰Javascript标准参考教程——语法概述 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">http://javascript.ruanyifeng.com/grammar/basic.html</a><br>【3】 W3School-Javascript高级教程——ECMAScript语法 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">http://www.w3school.com.cn/js/pro_js_syntax.asp</a><br>【4】《javascript权威指南(第6版)》第2章 词法结构<br>【5】《javascript高级程序设计(第3版)》第3章 基本概念<br>【6】《javascript语言精粹(修订版)》第2章 语法<br>【7】《javascript DOM编程艺术(第2版)》第2章 Javascript语法</p>
<ol>
<li>javascript高级程序设计【红宝书】</li>
<li>javascript忍者秘籍</li>
<li>你不知道的javascript 【小黄书】</li>
<li>javascript语言精粹与编程实践【绿皮书】</li>
<li>how javascript works</li>
<li>javascript20年（电子八卦书）</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9aa1JkS2VuMVNJZFlOaWExcmdUZzU3TlVFYThJWllHazJqblQxcHhhazZxbnprREpUQ1RpY2FRYVlJd2ljZ2FBT1IyVWlidE9pYUxQVndpYjRmRnJmS0wyOWRpYncvNjQw?x-oss-process=image/format,png" alt="img"></p>
<p><strong>About Geography</strong></p>
<p><a href="http://www.geography.about.com/">www.geography.about.com</a></p>
<p><strong>Bennett</strong></p>
<p><a href="http://www.bennett.karoo.net/">www.bennett.karoo.net</a></p>
<p><strong>Geo Resources</strong></p>
<p><a href="http://www.georesources.co.uk/">www.georesources.co.uk</a></p>
<p><strong>Geography</strong></p>
<p><a href="http://www.geography.org.uk/">www.geography.org.uk</a></p>
<p><strong>Greenpeace</strong></p>
<p><a href="http://www.greenpeace.org.uk/">www.greenpeace.org.uk</a></p>
<p><strong>Kapili</strong></p>
<p><a href="http://www.kapili.com/terrarum/index.html">www.kapili.com/terrarum/index.html</a></p>
<p><strong>Panda</strong></p>
<p><a href="http://www.panda.org/">www.panda.org</a></p>
<p><strong>Pavilion</strong></p>
<p><a href="http://www.pavilion.co.uk/dwakefield">www.pavilion.co.uk/dwakefield</a></p>
<p><strong>People and Planet</strong></p>
<p><a href="http://www.peopleandplanet.net/">www.peopleandplanet.net</a></p>
<p><strong>Popexpo</strong></p>
<p><a href="http://www.popexpo.net/eMain.html">www.popexpo.net/eMain.html</a></p>
<p><strong>Schoolsnet</strong></p>
<p><a href="http://www.schoolsnet.com/cgi-bin/inetcgi/schoolsnet/classroom/geo004.jsp">www.schoolsnet.com/cgi-bin/inetcgi/schoolsnet/classroom/geo004.jsp</a></p>
<p><strong>University of Keele</strong></p>
<p>（多数政府网站链接都能找到）</p>
<p><a href="http://www.psr.keele.ac.uk/official.htm">www.psr.keele.ac.uk/official.htm</a></p>
<p><strong>World-Tourism</strong></p>
<p><a href="http://www.world-tourism.org/">www.world-tourism.org</a></p>
<p><strong>Zephryus</strong></p>
<p><a href="http://www.zephryus.demon.co.uk/geography/resources/earth/tect.html">www.zephryus.demon.co.uk/geography/resources/earth/tect.html</a></p>
<p>1、中学地理<a href="http://gzdl.2000y.net/">http://gzdl.2000y.net/</a></p>
<p>2、资源集锦之动画之高一篇<a href="http://lwl.czyz.com.cn/ziyuanjijing/donghua/gaoyi/">http://lwl.czyz.com.cn/ziyuanjijing/donghua/gaoyi/</a></p>
<p>3、互联网上的地理教学资源<a href="http://www.nhyz.org/yxx/jxzy/jy/jy1.htm">http://www.nhyz.org/yxx/jxzy/jy/jy1.htm</a></p>
<p>4、网页素材结合国<a href="http://sosoo.cnnb.net/gifs/">http://sosoo.cnnb.net/gifs/</a></p>
<p>5、中教导星多媒体教导资源库&amp;平台<a href="http://estar.rdfz.cn/">http://estar.rdfz.cn/</a></p>
<p>6、Flash作品<a href="http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi">http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi</a></p>
<p>7、CCTV国度地理<a href="http://www.cctv.com/geography/index.shtml">http://www.cctv.com/geography/index.shtml</a></p>
<p>8、中国外交部<a href="http://www.fmprc.gov.cn/chn/">http://www.fmprc.gov.cn/chn/</a></p>
<p>9、地理教师网<a href="http://dljsw.myrice.com/">http://dljsw.myrice.com/</a></p>
<p>10、地理图库<a href="http://dili.cpedu.net/tuku/tukukj.htm">http://dili.cpedu.net/tuku/tukukj.htm</a></p>
<p>11、中国国度地理中文网<a href="http://www.cng.com.cn/">http://www.cng.com.cn/</a></p>
<p>12、中国地理教学资源网<a href="http://61.142.127.153:8081/">http://61.142.127.153:8081/</a></p>
<p>13、地理教导网<a href="http://geo.qdedu.net/">http://geo.qdedu.net/</a></p>
<p>14、地理知识<a href="http://dlpy.myrice.com/adlzs.htm">http://dlpy.myrice.com/adlzs.htm</a></p>
<p>15、中国科普博览之南极<a href="http://www.kepu.org.cn/gb/earth/antarctica/index.html">http://www.kepu.org.cn/gb/earth/antarctica/index.html</a></p>
<p>16、地理教与学<a href="http://210.39.136.105/Sites/dili/">http://210.39.136.105/Sites/dili/</a></p>
<p>17、地理E家<a href="http://www.dili.cn.gs/">http://www.dili.cn.gs/</a></p>
<p>18、三思科学网<a href="http://www.oursci.org/">http://www.oursci.org/</a></p>
<p>19、北京地理教学资源网<a href="http://www.zxdl.bjedu.gov.cn/new/">http://www.zxdl.bjedu.gov.cn/new/</a></p>
<p>20、马鞍山地理教学网<a href="http://www.zxdili.com/">http://www.zxdili.com/</a></p>
<p>21、新新地理课堂<a href="http://www.hsyfg.net/tl/xinxin/news/index.asp">http://www.hsyfg.net/tl/xinxin/news/index.asp</a></p>
<p>22、<a href="http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi">http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi</a></p>
<p>23、大连教育网<a href="http://www.foredu.com.cn/subject/index.jsp?subjectid=118">http://www.foredu.com.cn/subject/index.jsp?subjectid=118</a></p>
<p>24、中国科普博览</p>
<p><a href="http://www.kepu.com.cn/gb/index.html">http://www.kepu.com.cn/gb/index.html</a></p>
<p>25、水利人的网上家园<a href="http://video.waterinfo.net.cn/">http://video.waterinfo.net.cn/</a></p>
<p>26、<a href="http://www.ltyz.gx.cn/dljxzyw/bus/">http://www.ltyz.gx.cn/dljxzyw/bus/</a></p>
<p>27、<a href="http://www.scxxt.com.cn/ziyuan/mdv/seniorgeo/">http://www.scxxt.com.cn/ziyuan/mdv/seniorgeo/</a></p>
<p>28、<a href="http://jy.nbedu.net.cn:60003/xinjc/xjc-main.htm">http://jy.nbedu.net.cn:60003/xinjc/xjc-main.htm</a></p>
<p>29、地理课堂<a href="http://www.zydl.net/news/index.asp">http://www.zydl.net/news/index.asp</a></p>
<p>30、多媒体课堂——慈溪电子备课体系<a href="http://beike.cixiedu.net/">http://beike.cixiedu.net/</a></p>
<p>31、地理柳州巴士站<a href="http://www.ltyz.gx.cn/dili/ffeeii/index.asp">http://www.ltyz.gx.cn/dili/ffeeii/index.asp</a></p>
<p>32、<a href="http://www.iecn.cn/zgpd/ccdl.htm">http://www.iecn.cn/zgpd/ccdl.htm</a></p>
<p>33、喜好者<a href="http://61.184.119.196:8018/default.aspCAI">http://61.184.119.196:8018/default.aspCAI</a></p>
<p>34、世界自然基金会中国网<a href="http://www.wwfchina.org/">http://www.wwfchina.org/</a></p>
<p>35、大科普网<a href="http://www.ikepu.com.cn/">http://www.ikepu.com.cn/</a></p>
<p>36、地理雪窗<a href="http://wujh.sosoo.net/">http://wujh.sosoo.net/</a></p>
<p>37、地理教师<a href="http://geoteach.jyjy.net.cn/">http://geoteach.jyjy.net.cn/</a></p>
<p>38、地理课<a href="http://www.qd65.qdedu.net/teacher/bbs/index.asp">http://www.qd65.qdedu.net/teacher/bbs/index.asp</a></p>
<p>39、地理课件积件库<a href="http://zjycy.myetang.com/kjzc/dlkjml.htm">http://zjycy.myetang.com/kjzc/dlkjml.htm</a></p>
<p>40、地理频道<a href="http://www.dlpd.com/">http://www.dlpd.com/</a></p>
<p>41、地理纵横<a href="http://61.130.175.245/dl/index.htm">http://61.130.175.245/dl/index.htm</a></p>
<p>42、风水宝地<a href="http://61.177.236.130/1/index.asp">http://61.177.236.130/1/index.asp</a></p>
<p>43、国度电力信息网<a href="http://www.sp.com.cn/default.htm">http://www.sp.com.cn/default.htm</a></p>
<p>44、国家基本地理信息体系<a href="http://nfgis.nsdi.gov.cn/">http://nfgis.nsdi.gov.cn/</a></p>
<p>45、海洋科学<a href="http://www.bjkp.gov.cn/gkjqy/hykx/left.htm">http://www.bjkp.gov.cn/gkjqy/hykx/left.htm</a></p>
<p>前端注重：</p>
<p>1、业务</p>
<p>2、插件，框架开发（vue,angular,react)</p>
<p>3、简化业务，提高开发效率</p>
<p><a href="https://www.zhihu.com/question/289588888">https://www.zhihu.com/question/289588888</a>  一个人的离职成本有多高</p>
<p><a href="https://remixicon.com/">https://remixicon.com/</a> 推荐一套开源图标库</p>
<p><a href="https://juejin.im/post/5cd8c361f265da03a33c5521">https://juejin.im/post/5cd8c361f265da03a33c5521</a>  25 岁，毕业写前端的这三年</p>
<p><a href="https://juejin.im/post/5cda10f9f265da0368147cc8#heading-28">https://juejin.im/post/5cda10f9f265da0368147cc8#heading-28</a>  程序员画像，十年沉浮</p>
<p><a href="https://segmentfault.com/a/1190000019147365">https://segmentfault.com/a/1190000019147365</a>  What’s New in JavaScript</p>
<p><a href="https://segmentfault.com/a/1190000019161737">https://segmentfault.com/a/1190000019161737</a>  从 React Native 到 Flutter，移动跨平台方案的真相</p>
<p><a href="https://shimo.im/docs/VXEZSWMLxlw4XB2M/read">https://shimo.im/docs/VXEZSWMLxlw4XB2M/read</a>  FDCon2019  会后资料下载</p>
<p><a href="https://chvin.github.io/react-tetris/?lan=en">https://chvin.github.io/react-tetris/?lan=en</a>  react俄罗斯方块</p>
<p><a href="https://juejin.im/post/5cd4cbe2518825408b33e9c5">https://juejin.im/post/5cd4cbe2518825408b33e9c5</a> 【译】前端练级攻略</p>
<p>《Flutter实战》电子书 <a href="https://book.flutterchina.club/">https://book.flutterchina.club</a></p>
]]></content>
      <categories>
        <category>资源库</category>
        <category>网站素材</category>
      </categories>
      <tags>
        <tag>网站素材</tag>
      </tags>
  </entry>
  <entry>
    <title>页面刷新相关笔记</title>
    <url>/2022/08/04/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="监听页面刷新事件方法"><a href="#监听页面刷新事件方法" class="headerlink" title="监听页面刷新事件方法"></a>监听页面刷新事件方法</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowEventHandlers/onbeforeunload">window.onbeforeunload</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听刷新页面事件方法（手动刷新）-监听手动刷新页面事件(按浏览器的刷新按钮||使用js方法刷新页面)</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">    // 清空缓存数据</span><br><span class="line">	localStorage.clear();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="JS-模拟浏览器-F5-自动刷新页面效果"><a href="#JS-模拟浏览器-F5-自动刷新页面效果" class="headerlink" title="JS 模拟浏览器 F5 自动刷新页面效果"></a>JS 模拟浏览器 F5 自动刷新页面效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. window.location.replace(window.location.href);</span><br><span class="line"></span><br><span class="line">2. window.location.href = window.location.href;</span><br><span class="line"></span><br><span class="line">3. window.document.location.reload();</span><br><span class="line"> </span><br><span class="line">有iframe的使用这个：</span><br><span class="line">4. window.top.document.location.reload();</span><br><span class="line"> </span><br><span class="line">5.window.top.document.location = “url”</span><br><span class="line"></span><br><span class="line">6.window.document.location. = “url”</span><br></pre></td></tr></table></figure>

<h4 id="屏蔽Backspace键返回上个页面"><a href="#屏蔽Backspace键返回上个页面" class="headerlink" title="屏蔽Backspace键返回上个页面"></a>屏蔽Backspace键返回上个页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//屏蔽Backspace键返回上个页面</span><br><span class="line">function banBackSpace(e) &#123;</span><br><span class="line">    var ev = e || window.event;//获取event对象  </span><br><span class="line">    var flag=(ev.keyCode == 8) ? true:false;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">     //禁止后退键 作用于Firefox、Opera</span><br><span class="line">     document.onkeypress=banBackSpace;</span><br><span class="line">     //禁止后退键  作用于IE、Chrome</span><br><span class="line">     document.onkeydown=banBackSpace;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止浏览器默认行为触发的通用方法"><a href="#阻止浏览器默认行为触发的通用方法" class="headerlink" title="阻止浏览器默认行为触发的通用方法"></a>阻止浏览器默认行为触发的通用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //阻止浏览器默认行为触发的通用方法 </span><br><span class="line"> function stopDefault(e) &#123;</span><br><span class="line">    if (e &amp;&amp; e.preventDefault) &#123;</span><br><span class="line">        e.preventDefault();//防止浏览器默认行为(W3C) </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       window.event.returnValue = false;//IE中阻止浏览器行为 </span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>设置代理相关笔记</title>
    <url>/2020/09/04/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="访问他人本地项目–使用火狐浏览器代理"><a href="#访问他人本地项目–使用火狐浏览器代理" class="headerlink" title="访问他人本地项目–使用火狐浏览器代理"></a>访问他人本地项目–使用火狐浏览器代理</h4><p>设置——常规——网络设置——手动配置代理</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/1.png" alt="火狐浏览器配置代理"></p>
<h4 id="手机访问电脑本地项目——使用Charles代理"><a href="#手机访问电脑本地项目——使用Charles代理" class="headerlink" title="手机访问电脑本地项目——使用Charles代理"></a>手机访问电脑本地项目——使用Charles代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">备注：使用手机端访问本地后台项目，在手机wifi里配置代理</span><br></pre></td></tr></table></figure>

<h5 id="注意：连接不成功，看一下端口号是否写错了"><a href="#注意：连接不成功，看一下端口号是否写错了" class="headerlink" title="注意：连接不成功，看一下端口号是否写错了"></a><code>注意：连接不成功，看一下端口号是否写错了</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首次连接，需要在Charles上授权（allow）</span><br></pre></td></tr></table></figure>

<ul>
<li>电脑安装Charles，进行代理设置：“代理”——“代理设置”</li>
</ul>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/Charles%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="代理设置"></p>
<ul>
<li>在手机端要设置“HTTP代理”【注意：手机连接的WiFi要跟电脑端是在同一个路由】</li>
</ul>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210622185834.png" alt="img"><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202106221858341.png" alt="img"><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202106221858342.png" alt="img"></p>
<ul>
<li>配置好手机HTTP代理之后，在Charles中会弹出一个是否同意的一个确认框，选择同意之后；手机就可以访问本地的项目</li>
</ul>
<p>如果在手机中忽略过该WiFi，重新连接上该WiFi后要重新设置“HTTP代理”</p>
]]></content>
      <categories>
        <category>WEB前端</category>
      </categories>
      <tags>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title>阮一峰Git学习笔记</title>
    <url>/2021/02/19/%E9%98%AE%E4%B8%80%E5%B3%B0Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>阮一峰网络日志：<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>
<h3 id="1、Git-工作流程"><a href="#1、Git-工作流程" class="headerlink" title="1、Git 工作流程"></a>1、Git 工作流程</h3><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。</p>
<p>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。”工作流程”在英语里，叫做”workflow”或者”flow”，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p>
<p><img src="../images/clip_image002-1613720214906.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122301.png"></p>
<p>本文介绍三种广泛使用的工作流程：</p>
<ul>
<li>Git flow</li>
<li>Github flow</li>
<li>Gitlab flow</li>
</ul>
<p>如果你对Git还不是很熟悉，可以先阅读下面的文章。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html">《Git 使用规范流程》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">《常用 Git 命令清单》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html">《Git 远程操作详解》</a></li>
</ul>
<h4 id="一、功能驱动"><a href="#一、功能驱动" class="headerlink" title="一、功能驱动"></a>一、功能驱动</h4><p>本文的三种工作流程，有一个共同点：都采用<a href="https://en.wikipedia.org/wiki/Feature-driven_development">“功能驱动式开发”</a>（Feature-driven development，简称FDD）。</p>
<p>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p>
<h4 id="二、Git-flow"><a href="#二、Git-flow" class="headerlink" title="二、Git flow"></a>二、Git flow</h4><p>最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/">Git flow</a> 。</p>
<h5 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h5><p>它最主要的特点有两个。</p>
<p><img src="../images/clip_image003.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122302.png"></p>
<p>首先，项目存在两个长期分支。</p>
<ul>
<li>主分支master</li>
<li>开发分支develop</li>
</ul>
<p>前者用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；后者用于日常开发，存放最新的开发版。</p>
<p>其次，项目存在三种短期分支。</p>
<ul>
<li>功能分支（feature     branch）</li>
<li>补丁分支（hotfix     branch）</li>
<li>预发分支（release     branch）</li>
</ul>
<p>一旦完成开发，它们就会被合并进develop或master，然后被删除。</p>
<p>Git flow 的详细介绍，请阅读我翻译的中文版<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">《Git 分支管理策略》</a>。</p>
<h5 id="2-2-评价"><a href="#2-2-评价" class="headerlink" title="2.2 评价"></a>2.2 评价</h5><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将master当作默认分支，可是开发是在develop分支进行的，这导致经常要切换分支，非常烦人。</p>
<p>更大问题在于，这个模式是基于”版本发布”的，目标是一段时间以后产出一个新版本。但是，很多网站项目是”持续发布”，代码一有变动，就部署一次。这时，master分支和develop分支的差别不大，没必要维护两个长期分支。</p>
<h4 id="三、Github-flow"><a href="#三、Github-flow" class="headerlink" title="三、Github flow"></a>三、Github flow</h4><p><a href="http://scottchacon.com/2011/08/31/github-flow.html">Github flow</a> 是Git flow的简化版，专门配合”持续发布”。它是 Github.com 使用的工作流程。</p>
<h5 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h5><p>它只有一个长期分支，就是master，因此用起来非常简单。</p>
<p>官方推荐的<a href="https://guides.github.com/introduction/flow/index.html">流程</a>如下。</p>
<p><img src="../images/clip_image005.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122305.png"></p>
<p>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。</p>
<p>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个<a href="https://help.github.com/articles/using-pull-requests/">pull request</a>（简称PR）。</p>
<p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p>
<p>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>
<h5 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h5><p>Github flow 的最大优点就是简单，对于”持续发布”的产品，可以说是最合适的流程。</p>
<p>问题在于它的假设：master分支的更新与产品的发布是一致的。也就是说，master分支的最新代码，默认就是当前的线上代码。</p>
<p>可是，有些时候并非如此，代码合并进入master分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，master分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于master分支。</p>
<p>上面这种情况，只有master一个主分支就不够用了。通常，你不得不在master分支以外，另外新建一个production分支跟踪线上版本。</p>
<h4 id="四、Gitlab-flow"><a href="#四、Gitlab-flow" class="headerlink" title="四、Gitlab flow"></a>四、Gitlab flow</h4><p><a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html">Gitlab flow</a> 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p>
<h5 id="4-1-上游优先"><a href="#4-1-上游优先" class="headerlink" title="4.1 上游优先"></a>4.1 上游优先</h5><p>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），即只存在一个主分支master，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p>
<p><a href="https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first">Chromium项目</a>就是一个例子，它明确规定，上游分支依次为：</p>
<ol>
<li>Linus Torvalds的分支</li>
<li>子系统（比如netdev）的分支</li>
<li>设备厂商（比如三星）的分支</li>
</ol>
<h5 id="4-2-持续发布"><a href="#4-2-持续发布" class="headerlink" title="4.2 持续发布"></a>4.2 持续发布</h5><p>Gitlab flow 分成两种情况，适应不同的开发流程。</p>
<p><img src="../images/clip_image006.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122306.png"></p>
<p>对于”持续发布”的项目，它建议在master分支以外，再建立不同的环境分支。比如，”开发环境”的分支是master，”预发环境”的分支是pre-production，”生产环境”的分支是production。</p>
<p>开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到master，确认没有问题，再cherry-pick到pre-production，这一步也没有问题，才进入production。</p>
<p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p>
<h5 id="4-3-版本发布"><a href="#4-3-版本发布" class="headerlink" title="4.3 版本发布"></a>4.3 版本发布</h5><p><img src="../images/clip_image007.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122307.png"></p>
<p>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从master分支拉出一个分支，比如2-3-stable、2-4-stable等等。</p>
<p>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p>
<h4 id="五、一些小技巧"><a href="#五、一些小技巧" class="headerlink" title="五、一些小技巧"></a>五、一些小技巧</h4><h5 id="5-1-Pull-Request"><a href="#5-1-Pull-Request" class="headerlink" title="5.1 Pull Request"></a>5.1 Pull Request</h5><p><img src="../images/clip_image009.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122310.png"></p>
<p>功能分支合并进master分支，必须通过Pull Request（Gitlab里面叫做 Merge Request）。</p>
<p><img src="../images/clip_image011.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122308.png"></p>
<p>前面说过，Pull Request本质是一种对话机制，你可以在提交的时候，@相关<a href="https://github.com/blog/1004-mention-autocompletion">人员</a>或<a href="https://github.com/blog/1121-introducing-team-mentions">团队</a>，引起他们的注意。</p>
<h5 id="5-2-Protected-branch"><a href="#5-2-Protected-branch" class="headerlink" title="5.2 Protected branch"></a>5.2 Protected branch</h5><p>master分支应该受到保护，不是每个人都可以修改这个分支，以及拥有审批 Pull Request 的权力。</p>
<p><a href="https://help.github.com/articles/about-protected-branches/">Github</a> 和 <a href="http://doc.gitlab.com/ce/permissions/permissions.html">Gitlab</a> 都提供”保护分支”（Protected branch）这个功能。</p>
<h5 id="5-3-Issue"><a href="#5-3-Issue" class="headerlink" title="5.3 Issue"></a>5.3 Issue</h5><p>Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p>
<p>功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如”15-require-a-password-to-change-it”。</p>
<p><img src="../images/clip_image012.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122311.png"></p>
<p>开发完成后，在提交说明里面，可以写上”fixes #14”或者”closes #67”。Github规定，只要commit message里面有下面这些<a href="https://help.github.com/articles/closing-issues-via-commit-messages/">动词</a> + 编号，就会关闭对应的issue。</p>
<ul>
<li>close</li>
<li>closes</li>
<li>closed</li>
<li>fix</li>
<li>fixes</li>
<li>fixed</li>
<li>resolve</li>
<li>resolves</li>
<li>resolved</li>
</ul>
<p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是username/repository#issue_number。</p>
<p>Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p>
<h5 id="5-4-Merge节点"><a href="#5-4-Merge节点" class="headerlink" title="5.4 Merge节点"></a>5.4 Merge节点</h5><p>Git有两种合并：一种是”直进式合并”（fast forward），不生成单独的合并节点；另一种是”非直进式合并”（none fast-forword），会生成单独节点。</p>
<p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用–no-ff参数）。只要发生合并，就要有一个单独的合并节点。</p>
<h5 id="5-5-Squash-多个commit"><a href="#5-5-Squash-多个commit" class="headerlink" title="5.5 Squash 多个commit"></a>5.5 Squash 多个commit</h5><p>为了便于他人阅读你的提交，也便于cherry-pick或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。（前提是，该分支只有你一个人开发，且没有跟master合并过。）</p>
<p><img src="../images/clip_image014.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122309.png"></p>
<p>这可以采用rebase命令附带的squash操作，具体方法请参考我写的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html">《Git 使用规范流程》</a>。</p>
<h3 id="2、Git分支管理策略"><a href="#2、Git分支管理策略" class="headerlink" title="2、Git分支管理策略"></a>2、Git分支管理策略</h3><p>如果你严肃对待编程，就必定会使用”<a href="http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html">版本管理系统</a>“（Version Control System）。</p>
<p>眼下最流行的”版本管理系统”，非<a href="http://git-scm.com/">Git</a>莫属。</p>
<p><img src="../images/clip_image015.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070501.png"></p>
<p>相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称”快照”）的指针，因此非常快捷易用。</p>
<p>但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。</p>
<p><img src="../images/clip_image017.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070502.png"></p>
<p><a href="http://nvie.com/">Vincent Driessen</a>提出了一个分支管理的<a href="http://nvie.com/posts/a-successful-git-branching-model/">策略</a>，我觉得非常值得借鉴。它可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。理论上，这些策略对所有的版本管理系统都适用，Git只是用来举例而已。如果你不熟悉Git，跳过举例部分就可以了。</p>
<p><strong>一、主分支Master</strong></p>
<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>
<p><img src="../images/clip_image018.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070503.png"></p>
<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>
<p><strong>二、开发分支Develop</strong></p>
<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>
<p><img src="../images/clip_image019.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070504.png"></p>
<p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>
<p>Git创建Develop分支的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure>

<p>将Develop分支发布到Master分支的命令：</p>
<p>　　### 切换到Master分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>



<p>　　### 对Develop分支进行合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure>

<p>这里稍微解释一下，上一条命令的–no-ff参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。</p>
<p><img src="../images/clip_image020.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png"></p>
<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的<a href="http://sandofsky.com/blog/git-workflow.html">《Understanding the Git Workflow》</a>。</p>
<p><img src="../images/clip_image021.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070506.png"></p>
<p><strong>三、临时性分支</strong></p>
<p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>
<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<p>　　* 功能（feature）分支</p>
<p>　　* 预发布（release）分支</p>
<p>　　* 修补bug（fixbug）分支</p>
<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<p><strong>四、 功能分支</strong></p>
<p>接下来，一个个来看这三种”临时性分支”。</p>
<p>第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>
<p><img src="../images/clip_image022.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070507.png"></p>
<p>功能分支的名字，可以采用feature-*的形式命名。</p>
<p>创建一个功能分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure>

<p>开发完成后，将功能分支合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure>

<p>删除feature分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d feature-x</span><br></pre></td></tr></table></figure>

<p><strong>五、预发布分支</strong></p>
<p>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>
<p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>
<p>创建一个预发布分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure>

<p>确认没有问题后，合并到master分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure>



<p>对合并生成的新节点，做一个标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure>

<p>再合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure>

<p>最后，删除预发布分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure>

<p><strong>六、修补bug分支</strong></p>
<p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>
<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>
<p><img src="../images/clip_image023.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070508.png"></p>
<p>创建一个修补bug分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure>

<p>修补结束后，合并到master分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"></span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure>

<p>再合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure>

<p>最后，删除”修补bug分支”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure>

<h3 id="3、常用-Git-命令清单"><a href="#3、常用-Git-命令清单" class="headerlink" title="3、常用 Git 命令清单"></a>3、常用 Git 命令清单</h3><p>我每天使用 Git ，但是很多命令记不住。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="../images/clip_image025.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><p>在当前目录新建一个Git代码库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure>

<p>下载一个项目和它的整个代码历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<p>显示当前的Git配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>编辑Git配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -e [--global]</span><br></pre></td></tr></table></figure>

<p>设置提交代码时的用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br><span class="line"></span><br><span class="line">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><p>添加指定文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<p>添加指定目录到暂存区，包括子目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

<p>添加当前目录的所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>添加每个变化前，都会要求确认</p>
<p>对于同一个文件的多处变化，可以实现分次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure>

<p>删除工作区文件，并且将这次删除放入暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<p>停止追踪指定文件，但该文件会保留在工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached [file]</span><br></pre></td></tr></table></figure>

<p>改名文件，并且将这个改名放入暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><p>提交暂存区到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>

<p>提交暂存区的指定文件到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>

<p>提交工作区自上次commit之后的变化，直接到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>

<p>提交时显示所有diff信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -v</span><br></pre></td></tr></table></figure>

<p>使用一次新的commit，替代上一次提交</p>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>

<p>重做上一次commit，并包括指定文件的新变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><p>列出所有本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>列出所有远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<p>列出所有本地分支和远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p>新建一个分支，但依然停留在当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，并切换到该分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，指向指定commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch] [commit]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，与指定的远程分支建立追踪关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>

<p>切换到指定分支，并更新工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>

<p>切换到上一个分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>

<p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>

<p>合并指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure>

<p>选择一个commit，合并进当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cherry-pick [commit]</span><br></pre></td></tr></table></figure>

<p>删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure>

<p>删除远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete [branch-name]</span><br><span class="line"></span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><p>列出所有tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p>新建一个tag在当前commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [tag]</span><br></pre></td></tr></table></figure>

<p>新建一个tag在指定commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [tag] [commit]</span><br></pre></td></tr></table></figure>

<p>删除本地tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d [tag]</span><br></pre></td></tr></table></figure>

<p>删除远程tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>

<p>查看tag信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [tag]</span><br></pre></td></tr></table></figure>

<p>提交指定tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] [tag]</span><br></pre></td></tr></table></figure>

<p>提交所有tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --tags</span><br></pre></td></tr></table></figure>

<p>新建一个分支，指向某个tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><p>显示有变更的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>显示当前分支的版本历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>显示commit历史，以及每次commit发生变更的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure>

<p>搜索提交历史，根据关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -S [keyword]</span><br></pre></td></tr></table></figure>

<p>显示某个commit之后的所有变动，每个commit占据一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [tag] HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>

<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [tag] HEAD --grep feature</span><br></pre></td></tr></table></figure>

<p>显示某个文件的版本历史，包括文件改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --follow [file]</span><br><span class="line"></span><br><span class="line">git whatchanged [file]</span><br></pre></td></tr></table></figure>

<p>显示指定文件相关的每一次diff</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p [file]</span><br></pre></td></tr></table></figure>

<p>显示过去5次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>

<p>显示所有提交过的用户，按提交次数排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git shortlog -sn</span><br></pre></td></tr></table></figure>

<p>显示指定文件是什么人在什么时间修改过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame [file]</span><br></pre></td></tr></table></figure>

<p>显示暂存区和工作区的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>显示暂存区和上一个commit的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --cached [file]</span><br></pre></td></tr></table></figure>

<p>显示工作区与当前分支最新commit之间的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>

<p>显示两次提交之间的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>

<p>显示今天你写了多少行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>显示某次提交的元数据和内容变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]</span><br></pre></td></tr></table></figure>

<p>显示某次提交发生变化的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show --name-only [commit]</span><br></pre></td></tr></table></figure>

<p>显示某次提交时，某个文件的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]:[filename]</span><br></pre></td></tr></table></figure>

<p>显示当前分支的最近几次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><p>下载远程仓库的所有变动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch [remote]</span><br></pre></td></tr></table></figure>

<p>显示所有远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>显示某个远程仓库的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show [remote]</span><br></pre></td></tr></table></figure>

<p>增加一个新的远程仓库，并命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>

<p>取回远程仓库的变化，并与本地分支合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>上传本地指定分支到远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>强行推送当前分支到远程仓库，即使有冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --force</span><br></pre></td></tr></table></figure>

<p>推送所有分支到远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>

<h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><p>恢复暂存区的指定文件到工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [file]</span><br></pre></td></tr></table></figure>

<p>恢复某个commit的指定文件到暂存区和工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [commit] [file]</span><br></pre></td></tr></table></figure>

<p>恢复暂存区的所有文件到工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [file]</span><br></pre></td></tr></table></figure>

<p>重置暂存区与工作区，与上一次commit保持一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [commit]</span><br></pre></td></tr></table></figure>

<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard [commit]</span><br></pre></td></tr></table></figure>

<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --keep [commit]</span><br></pre></td></tr></table></figure>

<p>新建一个commit，用来撤销指定commit</p>
<p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure>

<p>暂时将未提交的变化移除，稍后再移入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><p>生成一个可供发布的压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive</span><br></pre></td></tr></table></figure>

<h3 id="4、Git-使用规范流程"><a href="#4、Git-使用规范流程" class="headerlink" title="4、Git 使用规范流程"></a>4、Git 使用规范流程</h3><p>团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。</p>
<p>否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。</p>
<p>下面是<a href="https://github.com/thoughtbot/guides/tree/master/protocol/git">ThoughtBot</a> 的Git使用规范流程。我从中学到了很多，推荐你也这样使用Git。</p>
<p><img src="../images/clip_image027.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png"></p>
<p>第一步：新建分支</p>
<p>首先，每次开发新功能，都应该新建一个单独的分支（这方面可以参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">《Git分支管理策略》</a>）。</p>
<p>获取主干最新代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>新建一个开发分支myfeature</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure>

<p>第二步：提交分支commit</p>
<p>分支修改后，就可以提交commit了。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git commit --verbose</span><br></pre></td></tr></table></figure>

<p>git add 命令的all参数，表示保存所有变化（包括新建、修改和删除）。从Git 2.0开始，all是 git add 的默认参数，所以也可以用 git add . 代替。</p>
<p>git status 命令，用来查看发生变动的文件。</p>
<p>git commit 命令的verbose参数，会列出 <a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html">diff</a> 的结果。</p>
<p>第三步：撰写提交信息</p>
<p>提交commit时，必须给出完整扼要的提交信息，下面是一个范本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Present-tense summary under 50 characters</span><br><span class="line"></span><br><span class="line">* More information about commit (under 72 characters).</span><br><span class="line"></span><br><span class="line">* More information about commit (under 72 characters).</span><br><span class="line"></span><br><span class="line">http://project.management-system.com/ticket/123</span><br></pre></td></tr></table></figure>

<p>第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、以及需要注意的问题。最后，提供对应的网址（比如Bug ticket）。</p>
<p>第四步：与主干同步</p>
<p>分支的开发过程中，要经常与主干保持同步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure>

<p>第五步：合并commit</p>
<p>分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。</p>
<p>那么，怎样才能将多个commit合并呢？这就要用到 git rebase 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure>

<p>git rebase命令的i参数表示互动（interactive），这时git会打开一个互动界面，进行下一步操作。</p>
<p>下面采用<a href="https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history">Tute Costa</a>的例子，来解释怎么合并commit。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line">pick de9b1eb Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line">pick 3e7ee36 Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">pick fa20af3 git interactive rebase, squash, amend</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Rebase 8db7e8b..fa20af3 onto 8db7e8b</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">p, pick = use commit</span><br><span class="line"></span><br><span class="line">r, reword = use commit, but edit the commit message</span><br><span class="line"></span><br><span class="line">e, edit = use commit, but stop for amending</span><br><span class="line"></span><br><span class="line">s, squash = use commit, but meld into previous commit</span><br><span class="line"></span><br><span class="line">f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span><br><span class="line"></span><br><span class="line">x, exec = run command (the rest of the line) using shell</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">Note that empty commits are commented out</span><br></pre></td></tr></table></figure>

<p>上面的互动界面，先列出当前分支最新的4个commit（越下面越新）。每个commit前面有一个操作命令，默认是pick，表示该行commit被选中，要进行rebase操作。</p>
<p>4个commit的下面是一大堆注释，列出可以使用的命令。</p>
<ul>
<li>pick：正常选中</li>
<li>reword：选中，并且修改提交信息；</li>
<li>edit：选中，rebase时会暂停，允许你修改这个commit（参考<a href="https://schacon.github.io/gitbook/4_interactive_rebasing.html">这里</a>）</li>
<li>squash：选中，会将当前commit与上一个commit合并</li>
<li>fixup：与squash相同，但不会保存当前commit的提交信息</li>
<li>exec：执行其他shell命令</li>
</ul>
<p>上面这6个命令当中，squash和fixup可以用来合并commit。先把需要合并的commit前面的动词，改成squash（或者s）。</p>
<p>pick 07c5abd Introduce OpenPGP and teach basic usage</p>
<p>s de9b1eb Fix PostChecker::Post#urls</p>
<p>s 3e7ee36 Hey kids, stop all the highlighting</p>
<p>pick fa20af3 git interactive rebase, squash, amend</p>
<p>这样一改，执行后，当前分支只会剩下两个commit。第二行和第三行的commit，都会合并到第一行的commit。提交信息会同时包含，这三个commit的提交信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a combination of 3 commits.</span><br><span class="line"></span><br><span class="line">The first commit&#x27;s message is:</span><br><span class="line"></span><br><span class="line">Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 2nd commit message:</span><br><span class="line"></span><br><span class="line">Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 3rd commit message:</span><br><span class="line"></span><br><span class="line">Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">如果将第三行的squash命令改成fixup命令。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line">s de9b1eb Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line">f 3e7ee36 Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">pick fa20af3 git interactive rebase, squash, amend</span><br></pre></td></tr></table></figure>

<p>运行结果相同，还是会生成两个commit，第二行和第三行的commit，都合并到第一行的commit。但是，新的提交信息里面，第三行commit的提交信息，会被注释掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a combination of 3 commits.</span><br><span class="line"></span><br><span class="line">The first commit&#x27;s message is:</span><br><span class="line"></span><br><span class="line">Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 2nd commit message:</span><br><span class="line"></span><br><span class="line">Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 3rd commit message:</span><br><span class="line"></span><br><span class="line">Hey kids, stop all the highlighting</span><br></pre></td></tr></table></figure>

<p><a href="http://ponyfoo.com/articles/git-github-hacks">Pony Foo</a>提出另外一种合并commit的简便方法，就是先撤销过去5个commit，然后再建一个新的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD~5</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -am &quot;Here&#x27;s the bug fix that closes #28&quot;</span><br><span class="line"></span><br><span class="line">git push --force</span><br><span class="line"></span><br><span class="line">squash和fixup命令，还可以当作命令行参数使用，自动合并commit。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git commit --fixup </span><br><span class="line"></span><br><span class="line">git rebase -i --autosquash </span><br></pre></td></tr></table></figure>

<p>这个用法请参考<a href="http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html">这篇文章</a>，这里就不解释了。</p>
<h4 id="第六步：推送到远程仓库"><a href="#第六步：推送到远程仓库" class="headerlink" title="第六步：推送到远程仓库"></a>第六步：推送到远程仓库</h4><p>合并commit后，就可以推送当前分支到远程仓库了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --force origin myfeature</span><br></pre></td></tr></table></figure>

<p>git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送（参见<a href="http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/">这里</a>）。</p>
<h4 id="第七步：发出Pull-Request"><a href="#第七步：发出Pull-Request" class="headerlink" title="第七步：发出Pull Request"></a>第七步：发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p>
<h3 id="5、Git远程操作详解"><a href="#5、Git远程操作详解" class="headerlink" title="5、Git远程操作详解"></a>5、Git远程操作详解</h3><p><a href="http://zh.wikipedia.org/wiki/Git">Git</a>是目前最流行的<a href="http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html">版本管理系统</a>，学会Git几乎成了开发者的必备技能。</p>
<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>
<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>
<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>
<p><img src="../images/clip_image029.jpg" alt="git"></p>
<h4 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h4><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure>

<p>比如，克隆jQuery的版本库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>

<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt;&lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>

<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone http[s]://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone ssh://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone git://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone /opt/git/project.git </span><br><span class="line"></span><br><span class="line">git clone file:///opt/git/project.git</span><br><span class="line"></span><br><span class="line">git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure>

<p>SSH协议还有另一种写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure>

<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols">官方文档</a>。</p>
<h4 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h4><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>
<p>不带选项的时候，git remote命令列出所有远程主机。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br><span class="line"></span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>使用-v选项，可以参看远程主机的网址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">origin [git@github](mailto:git@github).com:jquery/jquery.git (fetch)</span><br><span class="line"></span><br><span class="line">origin [git@github](mailto:git@github).com:jquery/jquery.git (push)</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>
<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -o jQuery https://github.com/jquery/jquery.git</span><br><span class="line"></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line">jQuery</span><br></pre></td></tr></table></figure>

<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show命令加上主机名，可以查看该主机的详细信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote show &lt;主机名&gt;</span><br><span class="line">git remote add命令用于添加远程主机。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git remote add &lt;主机名&gt;&lt;网址&gt;</span><br><span class="line">git remote rm命令用于删除远程主机。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote rm &lt;主机名&gt;</span><br><span class="line">git remote rename命令用于远程主机的改名。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote rename &lt;原主机名&gt;&lt;新主机名&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h4><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令将某个远程主机的更新，全部取回本地。</p>
<p>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>
<p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt;&lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回origin主机的master分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br></pre></td></tr></table></figure>

<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p>
<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line">origin/master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">*master</span><br><span class="line"></span><br><span class="line">remotes/origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>
<p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b newBrach origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>
<p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示在当前分支上，合并origin/master。</p>
<h4 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h4><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin next:master</span><br></pre></td></tr></table></figure>

<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin next</span><br></pre></td></tr></table></figure>

<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">git merge origin/next</span><br></pre></td></tr></table></figure>

<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>
<p>Git也允许手动建立追踪关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure>

<p>上面命令指定master分支追踪origin/next分支。</p>
<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。</p>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>
<p>如果合并需要采用rebase模式，可以使用–rebase选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p>
<p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull -p</span><br></pre></td></tr></table></figure>

<p>等同于下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --prune origin </span><br><span class="line"></span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>



<h4 id="五、git-push"><a href="#五、git-push" class="headerlink" title="五、git push"></a>五、git push</h4><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;远程主机名&gt;&lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>
<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :master</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure>

<p>上面命令表示删除origin主机的master分支。</p>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global push.default matching</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global push.default simple</span><br></pre></td></tr></table></figure>

<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将所有本地分支都推送到origin主机。</p>
<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --force origin </span><br></pre></td></tr></table></figure>

<p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>
<p>最后，git push不会推送标签（tag），除非使用–tags选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
