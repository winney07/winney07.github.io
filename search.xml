<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ajax-笔记</title>
    <url>/2021/01/21/Ajax-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th><a href="https://api.jquery.com/jquery.ajax/">jQuery.ajax</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/ajax/ajax-tutorial.html">AJAX教程</a></td>
<td><a href="https://www.w3school.com.cn/ajax/index.asp">W3school</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&quot;&quot;,</span><br><span class="line">    timeout:8000,</span><br><span class="line">    type:&quot;POST&quot;,</span><br><span class="line">    dataType:&quot;json&quot;,</span><br><span class="line">    data:&#123;name:&quot;大名&quot;,age:&quot;23&quot;&#125;,</span><br><span class="line">    success:function(data,status,xhr)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    error:function(xhr,status,error)&#123;</span><br><span class="line">        $(&quot;.success&quot;).hide();</span><br><span class="line">        $(&quot;.maskBg&quot;).hide();      </span><br><span class="line">        if(xhr.status === 0)&#123;</span><br><span class="line">            if(status === &quot;timeout&quot;)&#123;</span><br><span class="line">                app.alert(&quot;网络不给力，请检查网络设置&quot;); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(xhr.status.toString().charAt(0) === &quot;4&quot;)&#123;</span><br><span class="line">            app.alert(&quot;客户端出错，请重新操作：&quot; + xhr.status);   </span><br><span class="line">        &#125;else if(xhr.status.toString().charAt(0) == &quot;5&quot;)&#123;</span><br><span class="line">            app.alert(&quot;服务端出错，请联系网站管理员！错误代码：&quot;  + xhr.status);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="axios-的简单封装"><a href="#axios-的简单封装" class="headerlink" title="axios 的简单封装"></a>axios 的简单封装</h4><p>1.首先引入 axios</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2.创建一个实例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 所有请求的公共地址部分</span></span><br><span class="line">    timeout: 　<span class="number">3000</span> <span class="comment">// 请求超时时间 这里的意思是当请求时间超过5秒还未取得结果时 提示用户请求超时</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.request拦截器</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求相关处理 请求拦截 在请求拦截中可以补充请求相关的配置</span></span><br><span class="line"><span class="comment">// interceptors axios的拦截器对象</span></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// config 请求的所有信息</span></span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    <span class="keyword">return</span> config <span class="comment">// 将配置完成的config对象返回出去 如果不返回 请求讲不会进行</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求发生错误时的相关处理 抛出错误</span></span><br><span class="line">   <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.response拦截器</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">api.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 我们一般在这里处理，请求成功后的错误状态码 例如状态码是500，404，403</span></span><br><span class="line">    <span class="comment">// res 是所有相应的信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 服务器响应发生错误时的处理</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>7.暴漏出去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api</span><br></pre></td></tr></table></figure>

<h3 id="封装接口"><a href="#封装接口" class="headerlink" title="封装接口"></a>封装接口</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;../index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">下面是简写的形式</span><br><span class="line"><span class="comment">// getXXX 自定义的接口名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getXXX</span> = (<span class="params">params</span>) =&gt; api.<span class="title function_">get</span>(<span class="string">`/apigb/v1/component`</span>, &#123; params&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">postXXX</span> = (<span class="params">params</span>) =&gt; api.<span class="title function_">post</span>(<span class="string">`/apigb/v1/component/update-info`</span>, params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是详细的写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">xxxx</span> = (<span class="params">params</span>) =&gt; <span class="title function_">api</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="comment">// 请求方式</span></span><br><span class="line">        <span class="comment">// data: params, // (一般post请求，我们习惯使用 data属性来传参)</span></span><br><span class="line">        <span class="attr">params</span>: params <span class="comment">//(一般get请求，我们习惯使用params属性来传参）</span></span><br><span class="line">        <span class="comment">// 注意：data，和 params 两个属性传参使用，并不是固定的，也可以调换使用。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>AntDesignUI相关笔记</title>
    <url>/2020/05/24/AntDesignUI%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://ant.design/components/alert-cn/">文字滚动，轮播效果</a></p>
<p><a href="https://ant.design/components/alert-cn/#components-alert-demo-loop-banner">轮播的公告</a></p>
<p>配合 <a href="https://npmjs.com/package/react-text-loop-next">react-text-loop-next</a> 或 <a href="https://npmjs.com/package/react-fast-marquee">react-fast-marquee</a> 实现消息轮播通知栏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i --save react-text-loop-next react-fast-marquee</span><br></pre></td></tr></table></figure>

<h4 id="key报错"><a href="#key报错" class="headerlink" title="key报错"></a>key报错</h4><p><a href="https://blog.csdn.net/AS_TS/article/details/107981367">antd key报错 Each child in a list should have a unique “key“ prop.</a></p>
<p>Table表格，Select选择器中的Option，<code>map()</code> 遍历渲染，Modal 对话框    需要添加key</p>
]]></content>
      <tags>
        <tag>AntDesignUI</tag>
        <tag>工作笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CMS-笔记</title>
    <url>/2021/01/19/CMS-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.phome.net/">帝国cms官网</a></p>
<p><a href="http://phome.net/doc/ecmsedu/template/ecmsinfo.html">万能标签</a></p>
<h4 id="帝国CMS模板的策划"><a href="#帝国CMS模板的策划" class="headerlink" title="帝国CMS模板的策划"></a>帝国CMS模板的策划</h4><p>1、 确定网站的栏目</p>
<p>2、 添加自定义字段</p>
<p>3、 定制系统模型</p>
<p><a href="http://www.phome.net/doc/manual/install/">帝国网站管理系统(EmpireCMS)－安装手册</a></p>
<h5 id="采集教程"><a href="#采集教程" class="headerlink" title="采集教程"></a>采集教程</h5><p><a href="https://www.jb51.net/cms/44793_2.html">帝国cms采集图文教程(上,中,下)全集</a></p>
<p><a href="http://www.baiwanzhan.com/site/t125853/?tdsourcetag=s_pctim_aiomsg">百万站官网资料-帝国cms采集图文教程（上）</a></p>
<p>采集思路:</p>
<p>1.先确定你的服务器是否支持采集</p>
<p>2.寻找响应速度快的目标网站,当然首先要看准目标网站是否防采集的</p>
<p>3.查看源文件,写正则</p>
<p>4.正则写好,先预览,预览正常后再采集</p>
<p>影响采集速度:</p>
<p>1.本身空间的质量与速度</p>
<p>2.本身网站的数据大小,即数据库的使用情况.</p>
<p>3.目标网站的速度及代码结构</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>CMS</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>AppCan</title>
    <url>/2021/10/13/AppCan/</url>
    <content><![CDATA[<p><a href="http://appcan.cn/">AppCan</a></p>
<p><a href="http://newdocx.appcan.cn/AppCan">AppCan-开发者</a></p>
<p><a href="https://www.w3cschool.cn/appcan/">AppCan 教程-w3cschool</a></p>
]]></content>
      <tags>
        <tag>AppCan</tag>
        <tag>Hybrid App</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap相关笔记</title>
    <url>/2018/08/18/Bootstrap%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Bootstrap3与Bootstrap4的区别"><a href="#Bootstrap3与Bootstrap4的区别" class="headerlink" title="Bootstrap3与Bootstrap4的区别"></a>Bootstrap3与Bootstrap4的区别</h4><table>
<thead>
<tr>
<th>Bootstrap3</th>
<th>Bootstrap4</th>
</tr>
</thead>
<tbody><tr>
<td>Less</td>
<td>Sass</td>
</tr>
<tr>
<td>4种栅格类</td>
<td>5种栅格类</td>
</tr>
<tr>
<td>使用px为单位</td>
<td>使用rem和em为单位（除部分margin和padding使用px）</td>
</tr>
<tr>
<td>使用push和pull向左右移动</td>
<td>偏移列通过offset-类设置</td>
</tr>
<tr>
<td>使用float的布局方式</td>
<td>选择弹性盒模型(flexbox)</td>
</tr>
</tbody></table>
<ul>
<li>Bootstrap4中的栅格系统可以不用添加指定的列数 如row 里面有2个col 会任何尺寸下均分row</li>
<li>Bootstrap3只有4种栅格类 分别为（col-xs特小，col-sm小,col-md,中col-lg大）</li>
<li>Bootstrap4有5种栅格类，（col-特小，col-sm-小，col-md-中，col-lg-大，col-xl-超大）</li>
<li>Bootstrap4设置列偏移时通过 offset-sm-4,而Bootstrap3通过col-sm-offset-4</li>
<li>Bootstrap4增加了响应式容器如 container-sm ,container-md….,当小于屏幕尺寸小于栅格类时会占满整个屏幕</li>
</ul>
<h4 id="Bootstrap4与Bootstrap5之间的区别"><a href="#Bootstrap4与Bootstrap5之间的区别" class="headerlink" title="Bootstrap4与Bootstrap5之间的区别"></a><a href="https://www.imangodoc.com/120811.html">Bootstrap4与Bootstrap5之间的区别</a></h4><p>Bootstrap5删除的一些类是：</p>
<ul>
<li>表格-行</li>
<li>表格-内联</li>
<li>清单-内联</li>
<li>卡-甲板</li>
</ul>
<p>一些添加的类：</p>
<ul>
<li>gx-*(类控制水平/列装订线的宽度)</li>
<li>gy-*(类控制垂直/行装订线的宽度)</li>
<li>g-*(类控制水平和垂直装订线的宽度)</li>
<li>行cols自动</li>
</ul>
<h4 id="日期插件"><a href="#日期插件" class="headerlink" title="日期插件"></a><a href="https://getdatepicker.com/4/">日期插件</a></h4><p><a href="https://bootstrap-datepicker.readthedocs.io/en/stable/">文档</a></p>
<p><a href="https://uxsolutions.github.io/bootstrap-datepicker/?markup=input&format=&weekStart=&startDate=&endDate=&startView=0&minViewMode=0&maxViewMode=4&todayBtn=false&clearBtn=false&language=en&orientation=auto&multidate=&multidateSeparator=&keyboardNavigation=on&forceParse=on#sandbox">demo</a></p>
<p><a href="https://github.com/uxsolutions/bootstrap-datepicker">github</a>——存在安全缺陷组件的影响</p>
<p><a href="https://www.bootcdn.cn/bootstrap-datetimepicker/">CDN</a></p>
<p><a href="https://www.eyecon.ro/bootstrap-datepicker/">示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- bootstrap样式表 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器样式表 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- jquery --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- bootstrap脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器前置脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/moment.js/2.22.1/moment-with-locales.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 时间选择器核心脚本 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Bootstrap-Table"><a href="#Bootstrap-Table" class="headerlink" title="Bootstrap Table"></a><a href="https://bootstrap-table.com/">Bootstrap Table</a></h4><p><a href="https://blog.csdn.net/Mr_XiMu/article/details/106059687">bootstrapTable的使用及表格的导出</a></p>
]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-笔记</title>
    <url>/2018/09/02/CSS3-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p> <a href="http://caibaojian.com/css3/">CSS3参考手册</a></p>
<p><a href="https://www.w3cschool.cn/doc_css/">CSS 官方参考文档</a></p>
<p>[CSS3/CSS2/CSS 教程/参考/帮助](CSS3/CSS2/CSS 教程/参考/帮助)</p>
<p><a href="https://www.w3cschool.cn/doc_css/css-@media.html?lang=en">media媒体查询相关属性</a></p>
<p><a href="https://www.quirksmode.org/blog/">QuirksBlog</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media">@media</a></p>
<h4 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h4><ul>
<li>圆角(border-radius );</li>
<li>阴影(box-shadow );</li>
<li>对文字加特效(text-shadow );</li>
<li>线性渐变（gradient );</li>
<li>变换(transform），如 transform: rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg)//旋转、缩放、定位、倾斜.</li>
<li>更多的 CSS 选择器；</li>
<li>多背景设置；</li>
<li>色彩模式，如rgba;</li>
<li>伪元素：selection;</li>
<li>媒体杏询；</li>
<li>多栏布局；</li>
<li>图片边框 (border-image )。</li>
</ul>
<h4 id="CSS3-新增伪类"><a href="#CSS3-新增伪类" class="headerlink" title="CSS3 新增伪类"></a>CSS3 新增伪类</h4><p>新增伪类有以下几个：</p>
<ul>
<li>p:first-of-type，选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素。</li>
<li>p:last-of-type，选择属于其父元素的最后一个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</li>
<li>p:only-of-type，选择属于其父元素的唯一<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素。</li>
<li>p:only-child，选择属于其父元素的唯一子元素的每个<code>&lt;p&gt;</code>元素。</li>
<li>p:nth-child(2)，选择属于其父元素的第二个子元素的每个<code>&lt;p&gt;</code>元素。</li>
<li>:enabled:disabled，控制表单控件的禁用状态。</li>
<li>:checked，单选框或复选框被选中。</li>
</ul>
<h4 id="first-child-与first-of-type-的区别"><a href="#first-child-与first-of-type-的区别" class="headerlink" title="first-child 与first-of-type 的区别"></a>first-child 与first-of-type 的区别</h4><p>first-child 匹配的是父元素的第一个子元素，可以说是结构上的第一个子元素</p>
<p>first-oftype 匹配的是该类型的第一个元素，类型就是指冒号前面匹配到的元素。并不限制是第一个子元泰，只要是该类型元素的第一个即可。当然，这些元素的范国都属于同一级，也就是同辈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p&gt;&lt;/p&gt;</span><br><span class="line">  &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>p:tirst-child 匹配到p元素，因为p元素是div的第一个子元素。<br>span:first-chid 匹配不到 span 元素，因为span 是div的第二个子元素。<br>p:first-of-type 匹配到p元素，因为p是div所有为p的子元素中的第一个。<br>span:first-of-type 匹配到span 元素，因为span是div 所有为span 的子元素中的第一个。</p>
<h4 id="解决使用-transform-translate-属性时出现闪烁现象的问题"><a href="#解决使用-transform-translate-属性时出现闪烁现象的问题" class="headerlink" title="解决使用 transform:translate 属性时出现闪烁现象的问题"></a>解决使用 transform:translate 属性时出现闪烁现象的问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-backface-visibility:hidden;		// 隐藏转换的元素的背面</span><br><span class="line">-webkit-transform-style: preserve-3d;	// 使被转换的元素的子元素保留其3D转换</span><br><span class="line">-webkit-transform: translate3d(0,0,0);// 开启GPU硬件加速模式，使用GPU代替CPU渲染动画</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在某些 Android 系统中，有时会有莫名其妙的 Bug，建议慎重使用</p>
</blockquote>
<h4 id="CSS3-动画在动作结束时保持该状态不变"><a href="#CSS3-动画在动作结束时保持该状态不变" class="headerlink" title="CSS3 动画在动作结束时保持该状态不变"></a>CSS3 动画在动作结束时保持该状态不变</h4><p>采用animation-fill-mode。其可以设置为以下值</p>
<ul>
<li>none，不改变默认行为。</li>
<li>forwards，当动画完成后，保持最后一个属性值（在最后一个关键帧中定义)。</li>
<li>backwards， 在animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</li>
<li>both，向前和向后填充模式都可以应用</li>
</ul>
<h4 id="实现某-DIV-元素以每秒50px-的速度左移-100px"><a href="#实现某-DIV-元素以每秒50px-的速度左移-100px" class="headerlink" title="实现某 DIV 元素以每秒50px 的速度左移 100px"></a>实现某 DIV 元素以每秒50px 的速度左移 100px</h4><p>方法一，使用 jQuery：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div&#x27;).animate(&#123;&#x27;left&#x27;: 100&#125;, 2000);</span><br></pre></td></tr></table></figure>

<p>方法二，使用JavaScript + CSS3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  transition: al1 2s 1inear; // 1inear 规定以相同速度（匀速）开始至结束的过渡效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div.style.left = (div.offsetLeft + 100) + &#x27;px&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="box-sizing-属性"><a href="#box-sizing-属性" class="headerlink" title="box-sizing 属性"></a>box-sizing 属性</h4><p>box-sizing 属性主要用来控制元素盒模型的解析模式。默认值是content-box.</p>
<p>content-box 让元素维持 W3C的标准盒模型。元素的宽度/高度由border + padding +content 的宽度/高度决定，设置width/height 属性指的是指定content 部分的宽度/高度。</p>
<p>border-box 让元素维持正 传统盒模型（IE6以下版本和IE6、IE7 的怪异模式）。设置width/height 属性指的是指定border + padding + content 的宽度/高度</p>
<p>标淮浏览器下，按照 W3C 规范解析盒模型。一旦修政了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</p>
<h4 id="content-box-盒模型"><a href="#content-box-盒模型" class="headerlink" title="content-box 盒模型"></a>content-box 盒模型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Width(布局所占宽度) = width + padding-left + padding-right + border-left + border-right</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Height(布局所占高度) = height + padding-top + padding-bottom + border-top + border-bottom</span><br></pre></td></tr></table></figure>

<h4 id="padding-box-盒模型"><a href="#padding-box-盒模型" class="headerlink" title="padding-box 盒模型"></a>padding-box 盒模型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Width(布局所占宽度) = width（包含 padding-left + padding-right) + border-top + border-bottom</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Height(布局所占高度) = height（包含 padding-top + padding-bottom) + border-top + border-bottom</span><br></pre></td></tr></table></figure>

<h4 id="border-box-盒模型"><a href="#border-box-盒模型" class="headerlink" title="border-box 盒模型"></a>border-box 盒模型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Width(布局所占宽度) = width(包含 padding-left + padding-right + border-left + border-right)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Height(布局所占高度) = height (包含padding-top + padding-bottom + border-top + border-bottom)</span><br></pre></td></tr></table></figure>

<h4 id="CSS3-动画的优缺点"><a href="#CSS3-动画的优缺点" class="headerlink" title="CSS3 动画的优缺点"></a>CSS3 动画的优缺点</h4><p>优点：</p>
<p>（1）在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化。<br>（2）代码相对简单</p>
<p>缺点：</p>
<p>（1）在动画控制上不够灵活。<br>（2）兼容性不好。<br>（3）部分动画功能无法实现</p>
<h4 id="Animation-与-Transition-的异同"><a href="#Animation-与-Transition-的异同" class="headerlink" title="Animation 与 Transition 的异同"></a>Animation 与 Transition 的异同</h4><p>Animation 与Transition 的功能相同，都是通过改变元素的属性值来实现动画效果的。<br>它们的区别在于，使用Transition 的功能时只能用指定属性的开始值和结束值，然后在这两个属性值之问使用平滑过渡的方式实现动画效果，因此不能实现比较复杂的动画效果。Animation 功能通过定义多个关键帧，以及定义每个关键帧中元素的属性值来实现更为复杂的动画效果。</p>
<h4 id="Animation-属性值"><a href="#Animation-属性值" class="headerlink" title="Animation 属性值"></a>Animation 属性值</h4><p>两个必要属性如下</p>
<ul>
<li>animation-name，即动画名称。</li>
<li>animation-duration，即动画持续时间。</li>
</ul>
<p>其他属性值如下。</p>
<ul>
<li>animation-play-state，即播放状态（running 表示播放，paused 表示暂停），可以用来控制动画暂停</li>
<li>animation-timing-function，即动画运动形式。</li>
<li>animation-delay，即动画延迟时间。</li>
<li>animation-iteration-count，即重复次数。</li>
<li>animation-direction，即播放前重置（alternate 动画,直接从上一次停止的位置开始执行）。</li>
</ul>
<h4 id="媒体查询的使用方法"><a href="#媒体查询的使用方法" class="headerlink" title="媒体查询的使用方法"></a>媒体查询的使用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media 媒体类型 and（媒体特性）&#123;样式规则&#125;</span><br></pre></td></tr></table></figure>

<p>两个缺点<br>(1）适配屏幕的尺寸不是连续的。<br>(2）会在CSS文件中添加大段的查询代码，增加了CSS 文件的大小，<br>为改进上述缺点，可以使用 Javascript 获取移动设备屏幕的宽度，根据设计稿的原型尺寸，动态地计算 font-size 的值</p>
<h4 id="设置-CSS3-文本阴影"><a href="#设置-CSS3-文本阴影" class="headerlink" title="设置 CSS3 文本阴影"></a>设置 CSS3 文本阴影</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hl &#123;text-shadow：水平阴影，重直阴影，模糊距离，阴影颜色&#125;</span><br></pre></td></tr></table></figure>

<h4 id="把元素从左侧移动-50-像素，从顶端移动-100-像素"><a href="#把元素从左侧移动-50-像素，从顶端移动-100-像素" class="headerlink" title="把元素从左侧移动 50 像素，从顶端移动 100 像素"></a>把元素从左侧移动 50 像素，从顶端移动 100 像素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  transform: translate (50px, 100px);</span><br><span class="line">  -ms-transform: translate (50px, 100px) ;/*IE 9*/</span><br><span class="line">  -webkit-transform: translate (50px, 100px) ;/* Safari 和 Chrome */</span><br><span class="line">  -o-transform: translate (50px, 100px) ;/* Opera */</span><br><span class="line">  -moz-transform: translate (50px, 100px) ;/* Firefox */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="把一个元素旋转-30°"><a href="#把一个元素旋转-30°" class="headerlink" title="把一个元素旋转 30°"></a>把一个元素旋转 30°</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  transform: rotate(30deg);</span><br><span class="line">  -ms-transform: rotate(30deg);/*IE 9*/</span><br><span class="line">  -webkit-transform: rotate(30deg);/* Safari 和 Chrome */</span><br><span class="line">  -o-transform: rotate(30deg);/* Opera */</span><br><span class="line">  -moz-transform: rotate (30deg);/* Firefox */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-matrix-将div元素旋转-30°"><a href="#使用-matrix-将div元素旋转-30°" class="headerlink" title="使用 matrix()将div元素旋转 30°"></a>使用 matrix()将div元素旋转 30°</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  transform:matrix (0.866,0.5,-0.5,0.866, 0, 0) ;</span><br><span class="line">  -ms-transform:matrix (0.866, 0.5,-0.5,0.866, 0, 0) ;/*IE 9*/</span><br><span class="line">  -moz-transform:matrix(0.866,0.5,-0.5,0.866,0,0);/* Safari 和 Chrome */</span><br><span class="line">  -webkit-transform:matrix (0.866,0.5,-0.5,0.866, 0, 0) ;/* Opera */</span><br><span class="line">  -0-transform:matrix (0.866,0.5,-0.5,0.866, 0, 0);/* Firefox */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="利用-CSS3-制作淡入淡出的动画效果"><a href="#利用-CSS3-制作淡入淡出的动画效果" class="headerlink" title="利用 CSS3 制作淡入淡出的动画效果"></a>利用 CSS3 制作淡入淡出的动画效果</h4><p>（1）定义动画关键帧，名称为 fadeln</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@-webkit-keyframes fadeIn &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    opacity：0;/* 初始状态，透明度为 0 */</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    opacity：1; /* 结尾状态，透明度为 1 */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes fadeOut&#123;</span><br><span class="line">  from&#123;</span><br><span class="line">    opacity：1; /*初始状态，透明度为 1*/</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    opacity：0; /*结尾状态，透明度为 0*/</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）为div增加动画代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  -webkit-animation-name:fadeIn;	/*动画名称*/</span><br><span class="line">  -webkit-animation-duration:3s;	/*动画持线时间*/</span><br><span class="line">  -webkit-animation-iteration-count:1;	/*动画次数*/</span><br><span class="line">  -webkit-animation-delay: 0s;	/*延迟时间*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="盒阴影"><a href="#盒阴影" class="headerlink" title="盒阴影"></a>盒阴影</h4><p>盒阴影的语法结构与文本阴影类似，如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">box-shadow:5px 5px 5px rgba(255,15,255,0.5);</span><br></pre></td></tr></table></figure>

<p>但是，盒阴影多了一个属性，即外延值 inset， 如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">box-shadow: 5px 5px 25px rgba(0,0,255,0.5）inset;</span><br></pre></td></tr></table></figure>

<h4 id="为盒子添加蒙版"><a href="#为盒子添加蒙版" class="headerlink" title="为盒子添加蒙版"></a>为盒子添加蒙版</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.demo &#123;</span><br><span class="line">  height: 144px;</span><br><span class="line">  width: 144px;</span><br><span class="line">  background: url(logo.png);</span><br><span class="line">  -webkit-mask-image: url (shadow.png) ;</span><br><span class="line">  -webkit-mask-position: 50% 50%;</span><br><span class="line">  -webkit-mask-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>蒙版复合属性的语法是<code>-webkit-mask: url(pro_pho_ show_ pic.png) 50% 50% no-repeat</code></p>
<p>蒙版相关属性如下:</p>
<ul>
<li>-webkit-mask-clip，即蒙版裁剪位置。</li>
<li>-webkit-mask-origin，即蒙版原点位置。</li>
</ul>
<h4 id="CSS3-实现背景颜色线性渐变"><a href="#CSS3-实现背景颜色线性渐变" class="headerlink" title="CSS3 实现背景颜色线性渐变"></a>CSS3 实现背景颜色线性渐变</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  background: -webkit-linear-gradient (left, red, green 50%, blue) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-CSS3-倒影"><a href="#实现-CSS3-倒影" class="headerlink" title="实现 CSS3 倒影"></a>实现 CSS3 倒影</h3><p>通过<code>-webkit-box-reflect</code>设置方向、距离。<br>方向可以设置为below、 above、left、 right.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">demo &#123;</span><br><span class="line">  height: 144px:</span><br><span class="line">  width: 144px;</span><br><span class="line">  background: url (logo.png) ;</span><br><span class="line">  -webkit-box-reflect: below 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="当元素不面向屏幕时，定义其可见性"><a href="#当元素不面向屏幕时，定义其可见性" class="headerlink" title="当元素不面向屏幕时，定义其可见性"></a>当元素不面向屏幕时，定义其可见性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 backface-visibility : visible | hidden.</span><br></pre></td></tr></table></figure>

<h4 id="CSS3中transition-属性值及含义"><a href="#CSS3中transition-属性值及含义" class="headerlink" title="CSS3中transition 属性值及含义"></a>CSS3中transition 属性值及含义</h4><p>transition 属性是一个简写属性，用于设置以下4个过渡属性</p>
<ul>
<li>transition-property，哪个属性需要实现过渡。</li>
<li>transition-duration，完成过渡效果需要多少秒/毫秒</li>
<li>transition-timing-function，速度效果的运动曲线，如linear ease-in ease、ease-out、ease-in-out、 cube-bezier.</li>
<li>transition-delay，规定过渡开始前的延迟时问。</li>
</ul>
<h4 id="相对于内容框定义图像"><a href="#相对于内容框定义图像" class="headerlink" title="相对于内容框定义图像"></a>相对于内容框定义图像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">  height: 200px;</span><br><span class="line">  width: 200px;</span><br><span class="line">  padding: 50px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  background-image: url (&#x27;logo.png&#x27;);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-position: left top;</span><br><span class="line">  background-origin: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法为<code> background-origin: padding-box | border-box | content-box;</code></p>
<h4 id="background-clip-和-background-origin-的区别"><a href="#background-clip-和-background-origin-的区别" class="headerlink" title="background-clip 和 background-origin 的区别"></a>background-clip 和 background-origin 的区别</h4><p>background-olip 规定背景（包括背景颜色和背景图片）的绘制区域。<br>它有3种属性，分别是border-box、padding-box、 content-box.</p>
<ul>
<li>border-box，即背景从边框开始绘制。</li>
<li>padding-box，即背景在边框内部绘制。</li>
<li>content-box，即背景从内容部分绘制。</li>
</ul>
<p>background-origin 规定背景图片的定位区域。</p>
<p>它也有了种属性：border-box、padding-box、content-box。但要注意，它描述的是“背景图片”。也就是说，它只能对背景做样式上的操作。一旦规定了图片开始绘制的区域，就当于规定图片的左上角从什么地方开始，其他的它就不负责了</p>
<h4 id="把文本分隔为-4列并使两列之问间隔30-像素"><a href="#把文本分隔为-4列并使两列之问间隔30-像素" class="headerlink" title="把文本分隔为 4列并使两列之问间隔30 像素"></a>把文本分隔为 4列并使两列之问间隔30 像素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  -moz-column-count:4;</span><br><span class="line">  -webkit-column-count:4;</span><br><span class="line">  column-count:4;</span><br><span class="line">  -moz-column-gap:40px;</span><br><span class="line">  -webkit-column-gap:40px;</span><br><span class="line">  column-gap:40px;</span><br><span class="line">  width: 600px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现文本换行"><a href="#实现文本换行" class="headerlink" title="实现文本换行"></a>实现文本换行</h4><p>使用word-wrap 属性。</p>
<ul>
<li><p>normal，只在允许的断字点换行（浏览器保持默认处理）。</p>
</li>
<li><p>break-word，在长单词或 URL 地址内部进行换行。</p>
</li>
</ul>
<h4 id="用-keytrames-使-dliv-元素移动-200-像素"><a href="#用-keytrames-使-dliv-元素移动-200-像素" class="headerlink" title="用@keytrames 使 dliv 元素移动 200 像素"></a>用@keytrames 使 dliv 元素移动 200 像素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: #f30;</span><br><span class="line">  animation: move 3s;</span><br><span class="line">  @keyframes move</span><br><span class="line">  from &#123;</span><br><span class="line">  margin-left: 0px;</span><br><span class="line">  to</span><br><span class="line">  margin-left: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式Demo</title>
    <url>/2019/08/22/CSS%E6%A0%B7%E5%BC%8FDemo/</url>
    <content><![CDATA[<h4 id="使用flex布局实现上下布局，整屏背景图设置—图片会变形"><a href="#使用flex布局实现上下布局，整屏背景图设置—图片会变形" class="headerlink" title="使用flex布局实现上下布局，整屏背景图设置—图片会变形"></a>使用flex布局实现上下布局，整屏背景图设置—图片会变形</h4><p>优点：铺满</p>
<p>缺点：图片变形</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>contain</td>
<td>此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小。</td>
</tr>
<tr>
<td>cover</td>
<td>此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小。</td>
</tr>
</tbody></table>
<p><code>注：使用 background-size: cover;  ，背景图会根据屏幕高度铺满，图片会发生变形</code></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE1.png" alt="背景图设置"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;上下布局，背景图设置&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    background: url(./images/pubuliu/24.jpg) center center no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">.form-box&#123;</span><br><span class="line">    width: 90%;</span><br><span class="line">    margin: 200rem auto 0;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用img和定位，设置背景图–图片不变形"><a href="#使用img和定位，设置背景图–图片不变形" class="headerlink" title="使用img和定位，设置背景图–图片不变形"></a>使用img和定位，设置背景图–图片不变形</h4><p>优点：图片不 变形</p>
<p>缺点：不铺满</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE2.png" alt="设置背景图"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;使用img和定位，设置背景图--图片不变形&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;img src=&quot;./images/pubuliu/24.jpg&quot; alt=&quot;&quot; class=&quot;bg&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">&#125;</span><br><span class="line">.bg&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 200rem;</span><br><span class="line">    left: 5%;</span><br><span class="line">    z-index: 100;</span><br><span class="line">    width: 90%;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="直接给body设置背景图–图片会变形"><a href="#直接给body设置背景图–图片会变形" class="headerlink" title="直接给body设置背景图–图片会变形"></a>直接给body设置背景图–图片会变形</h4><p>优点：铺满</p>
<p>缺点：图片变形</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80%EF%BC%8C%E8%83%8C%E6%99%AF%E5%9B%BE%E8%AE%BE%E7%BD%AE3.png" alt="设置背景"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;直接给body设置背景图--图片会变形&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;form-box&quot;&gt;</span><br><span class="line">       &lt;/div&gt;     </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    font-family: &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">    background: url(./images/pubuliu/24.jpg) center center no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    padding-top: 88rem;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 88rem;</span><br><span class="line">    line-height: 88rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 18em;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    margin: 200rem auto 0;</span><br><span class="line">    width: 90%;</span><br><span class="line">    min-height: 600rem;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-radius: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Clipboard的使用</title>
    <url>/2020/11/04/Clipboard%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="如果存在clipboard-先将它销毁"><a href="#如果存在clipboard-先将它销毁" class="headerlink" title="如果存在clipboard,先将它销毁"></a>如果存在clipboard,先将它销毁</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(clipboard) &#123;</span><br><span class="line">    clipboard.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Clipboard官网使用教程"><a href="#Clipboard官网使用教程" class="headerlink" title="Clipboard官网使用教程"></a><a href="http://www.clipboardjs.cn/">Clipboard官网使用教程</a></h5><h5 id="复制成功和复制失败的提示"><a href="#复制成功和复制失败的提示" class="headerlink" title="复制成功和复制失败的提示"></a>复制成功和复制失败的提示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="line">    layer.msg(&#x27;复制成功&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    e.clearSelection();</span><br><span class="line">&#125;);</span><br><span class="line">clipboard.on(&#x27;error&#x27;, function(e) &#123;</span><br><span class="line">    if(u.indexOf(&#x27;UCBrowser&#x27;) &gt; -1)&#123;</span><br><span class="line">        layer.msg(&#x27;您的浏览器不支持，请长按内容手动复制！&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        layer.msg(&#x27;复制失败&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="如果提示信息弹两次"><a href="#如果提示信息弹两次" class="headerlink" title="如果提示信息弹两次"></a>如果提示信息弹两次</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自己写一个copySuccessTip提示信息</span><br><span class="line">$(&quot;.copySuccessTip&quot;).addClass(&quot;mymove&quot;);</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    $(&quot;.copySuccessTip&quot;).removeClass(&quot;mymove&quot;);</span><br><span class="line">&#125;,1000);</span><br></pre></td></tr></table></figure>

<h4 id="解决clipboard复制弹多次提示的问题"><a href="#解决clipboard复制弹多次提示的问题" class="headerlink" title="解决clipboard复制弹多次提示的问题"></a>解决clipboard复制弹多次提示的问题</h4><p>1、使用destroy（在单页面里面，回来页面，如果存在这个对象，就删除。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果存在clipboard，先将它销毁</span><br><span class="line">if(clipboard)&#123;</span><br><span class="line">	clipboard.destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var clipboard =new ClipboardJS(&#x27;.copyBtn&#x27;, &#123;</span><br><span class="line">	text: function(trigger)&#123;</span><br><span class="line">		var txt = $(trigger).data( &quot;clipboard-text&quot;);</span><br><span class="line">		return txt;		//	返回需要复制的内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var u = navigator.userAgent;</span><br><span class="line"></span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e)&#123;</span><br><span class="line">	layer.msg(&#x27;复制成功&#x27;);</span><br><span class="line">	e.clearselection();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">clipboard.on(&#x27;error&#x27;, function(e) &#123;</span><br><span class="line">	if(u.indexOf(&quot;UCBrowser&quot;) &gt;-1)&#123;</span><br><span class="line">		layer.msg(&#x27;您的浏览器不支持，请长按内容手动复制!&#x27;);</span><br><span class="line">	&#125;else &#123;</span><br><span class="line">		layer.msg(&#x27;复制失败&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、换成setTimeout，不用layer.msg（copySuccessTip的样式模拟layer.msg的样式即可）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clipboard.on(&#x27;success&#x27;, function(e)&#123;</span><br><span class="line">	$(&#x27;.copySuccessTip&#x27;).show();</span><br><span class="line">	</span><br><span class="line">	setTimeout(function()&#123;</span><br><span class="line">		$(&#x27;.copySuccessTip&#x27;).hide();</span><br><span class="line">	&#125;, 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Clipboard</category>
      </categories>
      <tags>
        <tag>Clipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-基础课程</title>
    <url>/2019/07/10/ES6-%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p>腾讯课堂学习笔记</p>
<h2 id="ES6·历史"><a href="#ES6·历史" class="headerlink" title="ES6·历史"></a>ES6·历史</h2><blockquote>
<p>1990年底，欧洲核能研究组织(CERN) 科学家Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网(World Wide Web)</p>
<p>1992年底，美国国家超级电脑应用中心(NCSA) 开始开发一个独立的浏览器， 叫做Mosaic。 这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。</p>
<p>1994年10月，NCSA的一个主要程序员Marc Andreessen联合风险投资家Jim Clark，成立了Mosaic通信公司(Mosaic Communications)，不久后改名为Netscape。这家公司的方向，就是在Mosaic的基础上，开发面向普通用户的新一 代的浏览器Netscape Navigator。</p>
<p>1994年12月，Navigator发布 了1.0版，市场份额一举超过90%。</p>
<p>1995年<br>Netscape公司雇佣了程序员Brendan Eich开发这种网页脚本语言。Brendan Eich只用了10天，就设计完成了这种语言的第一版。<br>基本语法：借鉴C语言和Java语言。<br>数据结构：借鉴Java语言， 包括将值分成原始值和对象两大类。<br>函数的用法：将函数当作第一等公民，并引入闭包。<br>原型继承模型：借鉴Self语 言。<br>正则表达式：借鉴Perl语言 。<br>字符串和数组处理：借鉴Python语言.</p>
<p>Netscape公司的这种浏览器脚本语言，最初名字叫做Mocha, 1995年9月 改为LiveScript。12月，Netscape公 司与Sun公司(Java语 言的发明者和所有者)达成协议，后者允许将这种语言叫做JavaScript。这样一来， Netscape公 司可以借助Java语言的声势，而Sun公司则将自己的影响力扩展到了浏览器。</p>
<p>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型(subtyping) 等等，但是可以利用现有功能找出解决办法。这种功能的不足，对于其他语言，你需要学习语言的各种功能，JavaScript,你需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript的编程 风格是函数式编程和面向对象编程的一种混合体。</p>
</blockquote>
<ul>
<li><p>1996年3月， Navigator 2.0浏览器正式内置了JavaScript脚本语言。</p>
</li>
<li><p>1996年8月，微软模仿JavaScript开发了一种相近的语言，取名为JScript (JavaScript是Netscape的注册商标，微软不能用)，首先内置于IE 3.0。网景公司面临丧失浏览器脚本语言的主导权的局面。</p>
</li>
<li><p>1996年11月，网景公司决定将JavaScript提交给国际标准化组织ECMA，希望JavaScript能够成为国际标准，以此抵抗微软。</p>
</li>
<li><p>1997年7月，ECMA组织发布262号标准文件(ECMA-262) 的第一版，规定了浏览器脚本语<br>言的标准，并将这种语言称为ECMAScript。这个版本就是ECMAScript 1.0版。</p>
</li>
<li><p>1998年6月， ECMAScript 2.0版发布。</p>
</li>
<li><p>1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准， 得到了广泛支持。</p>
</li>
<li><p>2007年10月， ECMAScript 4.0版草案发布，被各大厂商抵制，和谐了</p>
</li>
<li><p>2009年12月，ECMAScript 5.0版正式发布。</p>
</li>
<li><p>2011年6月， ECMAscript 5.1版发布，并且成为IOS国际标准（IOS/IEC 16262：2011）。</p>
</li>
<li><p>2013年12月， ECMAScript 6草案发布。然后是12个月的讨论期，听取各方反馈。</p>
</li>
<li><p>2014年12月，ECMAScript6发布正式版本</p>
</li>
<li><p>浏览器支持情况：<a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a></p>
</li>
</ul>
<a href="http://kangax.github.io/compat-table/es6/" title="" target="">查看浏览器支持ES6的情况</a>

<h4 id="编译ES6"><a href="#编译ES6" class="headerlink" title="编译ES6"></a>编译ES6</h4><p>例如，文件目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- code </span><br><span class="line">-- dist</span><br><span class="line">-- src</span><br><span class="line">--- index.js</span><br><span class="line">--- index.html</span><br></pre></td></tr></table></figure>
<p>将src里使用es6写的index.js编译成es5的js文件，放置到dist目录中。</p>
<p>(因为本机使用npm安装gulp有问题，所以改为使用cnpm安装)</p>
<h4 id="检查浏览器对ES6的支持情况"><a href="#检查浏览器对ES6的支持情况" class="headerlink" title="检查浏览器对ES6的支持情况"></a><a href="http://ruanyf.github.io/es-checker/index.cn.html">检查浏览器对ES6的支持情况</a></h4><h5 id="0、使用淘宝镜像安装"><a href="#0、使用淘宝镜像安装" class="headerlink" title="0、使用淘宝镜像安装"></a>0、使用淘宝镜像安装</h5><a href="https://www.xiaochao.me/seo/118.html" title="" target="">使用淘宝镜像安装</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h5 id="1、项目初始化"><a href="#1、项目初始化" class="headerlink" title="1、项目初始化"></a>1、项目初始化</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm init -y</span><br></pre></td></tr></table></figure>
<h5 id="2、全局安装babel-cli"><a href="#2、全局安装babel-cli" class="headerlink" title="2、全局安装babel-cli"></a>2、全局安装babel-cli</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g babel-cli</span><br></pre></td></tr></table></figure>
<h5 id="3、安装将代码转为ESCMA-script-的模块（安装转换包）"><a href="#3、安装将代码转为ESCMA-script-的模块（安装转换包）" class="headerlink" title="3、安装将代码转为ESCMA script 的模块（安装转换包）"></a>3、安装将代码转为ESCMA script 的模块（安装转换包）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure>
<h5 id="4、新建-babelrc文件"><a href="#4、新建-babelrc文件" class="headerlink" title="4、新建.babelrc文件"></a>4、新建.babelrc文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1)在当前项目目录下创建：</span><br><span class="line"><span class="built_in">cd</span>.&gt;.babelrc</span><br><span class="line"></span><br><span class="line">2).babelrc文件内容：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译前的src/index.js ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> a  = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>
<h5 id="5、编译"><a href="#5、编译" class="headerlink" title="5、编译"></a>5、编译</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">babel src/index.js -o dist/index.js</span><br></pre></td></tr></table></figure>
<p>编译后的dist/index.js：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">var a = 3;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure>
<h5 id="6、命令的简化方式"><a href="#6、命令的简化方式" class="headerlink" title="6、命令的简化方式"></a>6、命令的简化方式</h5><ol>
<li>修改package.json文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel src/index.js -o dist/index.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在命令行中 输入下面的简化命令来代替 babel src/index.js -o dist/index.js<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm run build</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h4><a href="https://www.gulpjs.com.cn/" title="" target="">Gulp中文网</a>
<h5 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure>
<p>(这里安装后是gulp4,因为gulp4和gulp3的执行有差别，这里安装3.9.1版本的，暂不对gulp4做学习处理，这里主要学习es6)</p>
<h5 id="安装browser-sync"><a href="#安装browser-sync" class="headerlink" title="安装browser-sync"></a>安装browser-sync</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install browser-sync --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="安装gulp-babel"><a href="#安装gulp-babel" class="headerlink" title="安装gulp-babel"></a>安装gulp-babel</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-babel --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="新建gulpfile-js"><a href="#新建gulpfile-js" class="headerlink" title="新建gulpfile.js"></a>新建gulpfile.js</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var gulp        = require(<span class="string">&quot;gulp&quot;</span>)</span><br><span class="line">var browserSync = require(<span class="string">&quot;browser-sync&quot;</span>).create()</span><br><span class="line">var babel       = require(<span class="string">&quot;gulp-babel&quot;</span>)</span><br><span class="line">//修改完之后，刷新页面</span><br><span class="line">var reload       = browserSync.reload</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./src/index.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            presets:[<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./dist/&#x27;</span>))</span><br><span class="line">        .pipe(reload(&#123;stream:<span class="literal">true</span>&#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&quot;default&quot;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server:&#123;</span><br><span class="line">            baseDir: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        port:<span class="string">&#x27;8089&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    gulp.watch(<span class="string">&#x27;src/*.js&#x27;</span>,[<span class="string">&#x27;js&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>参考 <a href="https://www.cnblogs.com/liangcheng11/p/6909387.html" title="" target="">简单利用gulp-babel搭建es6转es5环境</a></p>
<p>gulpfile.js:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var gulp = require(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    $ = require(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)();</span><br><span class="line"> </span><br><span class="line">var app = &#123;</span><br><span class="line">    srcPath: <span class="string">&#x27;src/&#x27;</span>,</span><br><span class="line">    devPath: <span class="string">&#x27;dist/&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">&#x27;js&#x27;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(app.srcPath + <span class="string">&#x27;/*.js&#x27;</span>,&#123;base:app.srcPath&#125;)</span><br><span class="line">        .pipe($.plumber())</span><br><span class="line">        .pipe($.babel(&#123;</span><br><span class="line">            　presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(app.devPath));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">&#x27;html&#x27;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(app.srcPath + <span class="string">&#x27;/*.html&#x27;</span>,&#123;base:app.srcPath&#125;)</span><br><span class="line">        .pipe(gulp.dest(app.devPath));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">&#x27;clean&#x27;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(app.devPath)</span><br><span class="line">        .pipe($.clean());</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//浏览器同步</span><br><span class="line">gulp.task(<span class="string">&#x27;webserve&#x27;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(app.devPath)</span><br><span class="line">        .pipe($.webserver(&#123;</span><br><span class="line">            livereload: <span class="literal">true</span>, //开启gulp-livereload</span><br><span class="line">            open: <span class="literal">true</span>,</span><br><span class="line">            port: 2333 //浏览器端口</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 监听</span><br><span class="line">gulp.task(<span class="string">&#x27;watch&#x27;</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">&#x27;/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">&#x27;**/*.html&#x27;</span>, [<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;build&#x27;</span>,[<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">//定义gulp默认任务</span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>,[<span class="string">&#x27;build&#x27;</span>,<span class="string">&#x27;watch&#x27;</span>], <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(app.devPath)</span><br><span class="line">        .pipe($.webserver(&#123;</span><br><span class="line">            livereload: <span class="literal">true</span>, //开启gulp-livereload</span><br><span class="line">            open: <span class="literal">true</span>,</span><br><span class="line">            port: 2333 //浏览器端口</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="利用转码器让ES6在浏览器运行-不推荐"><a href="#利用转码器让ES6在浏览器运行-不推荐" class="headerlink" title="利用转码器让ES6在浏览器运行(不推荐)"></a>利用转码器让ES6在浏览器运行(不推荐)</h4><h6 id="Traceur转码器"><a href="#Traceur转码器" class="headerlink" title="Traceur转码器"></a>Traceur转码器</h6><p>Google公司的Traceur转码器，可以将ES6代码转为ES5代码。这意味着，你可以用ES6的方式编写程序，又不用担心浏览器是否支持。<br>它有多种使用方式。</p>
<h6 id="直接插入网页"><a href="#直接插入网页" class="headerlink" title="直接插入网页"></a>直接插入网页</h6><p>Traceur允许将ES6代码直接插入网页。<br>首先，必须在网页头部加载Traceur库文件。</p>
<a href="https://blog.gaoqixhb.com/p/55783789cef7e0a008d5d6ef" title="" target="">利用转码器让ES6在浏览器运行</a>



<blockquote>
<p>低版本的浏览器对es6的兼容性不太好，所以需要把es6编译成es5</p>
</blockquote>
<h4 id="实时监听代码"><a href="#实时监听代码" class="headerlink" title="实时监听代码"></a>实时监听代码</h4><p>安装 live-server，在控制台输入live-server运行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install –g live-server</span><br></pre></td></tr></table></figure>



<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var   = variable 变量   声明全局变量</span><br><span class="line"><span class="built_in">let</span>   = 假设</span><br><span class="line">const = 常量</span><br></pre></td></tr></table></figure>

<p>for循环使用let，不受污染</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i &lt;10; i++) &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">console.log(i);   // Uncaught ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>

<p>例如：gulpfile.js引入插件模块可以使用const gulp = require(‘gulp’);</p>
<h4 id="数据解构"><a href="#数据解构" class="headerlink" title="数据解构"></a>数据解构</h4><h6 id="注：数据解构，数据模式要一样"><a href="#注：数据解构，数据模式要一样" class="headerlink" title="注：数据解构，数据模式要一样"></a>注：数据解构，数据模式要一样</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> array = [1,2,3];</span><br><span class="line"><span class="built_in">let</span> [i,j,k] = [1,2,3];</span><br><span class="line"><span class="built_in">let</span> [x,y,z] = array;</span><br><span class="line">console.log(z);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">undefined  无      NaN    缺少值</span><br><span class="line">null       无对象    0    不是对象</span><br></pre></td></tr></table></figure>

<h6 id="允许默认值存在"><a href="#允许默认值存在" class="headerlink" title="允许默认值存在"></a>允许默认值存在</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> [m, n=<span class="string">&#x27;hello world&#x27;</span>] = [<span class="string">&#x27;say&#x27;</span>];</span><br><span class="line"><span class="built_in">let</span> [m, n=<span class="string">&#x27;hello world&#x27;</span>] = [<span class="string">&#x27;say&#x27;</span>, undefined];</span><br><span class="line">这两种情况，n为hello world</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> [m, n=<span class="string">&#x27;hello world&#x27;</span>] = [<span class="string">&#x27;say&#x27;</span>, null];</span><br><span class="line">这两种情况，n为null</span><br></pre></td></tr></table></figure>

<h6 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span>&#123;u, v&#125; = &#123;u:1, v:3, e:0&#125;</span><br><span class="line">console.log(v);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这样写，会报错，让gulp不能执行正常编译</span><br><span class="line"><span class="built_in">let</span> l</span><br><span class="line">&#123;l&#125; = &#123;l: 222&#125;</span><br><span class="line">console.log(l)</span><br><span class="line">要加上括号：</span><br><span class="line"><span class="built_in">let</span> l</span><br><span class="line">(&#123;l&#125; = &#123;l: 222&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="常量数据结构"><a href="#常量数据结构" class="headerlink" title="常量数据结构"></a>常量数据结构</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const [aa,bb,cc,<span class="built_in">dd</span>,ee] = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h6 id="函数参数的数据结构"><a href="#函数参数的数据结构" class="headerlink" title="函数参数的数据结构"></a>函数参数的数据结构</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> add([a,b]) &#123;</span><br><span class="line">    <span class="built_in">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">console.log(add([1,2]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> add([a,b=3]) &#123;</span><br><span class="line">    <span class="built_in">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">console.log(add([1]));</span><br></pre></td></tr></table></figure>

<h6 id="json的数据结构"><a href="#json的数据结构" class="headerlink" title="json的数据结构"></a>json的数据结构</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> json = &#123;</span><br><span class="line">    name: <span class="string">&#x27;yangyanyi&#x27;</span>,</span><br><span class="line">    age: 27</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> &#123;name, age&#125; = json;</span><br></pre></td></tr></table></figure>

<h3 id="对象扩展运算符-…-（对象的值扩展）"><a href="#对象扩展运算符-…-（对象的值扩展）" class="headerlink" title="对象扩展运算符 … （对象的值扩展）"></a>对象扩展运算符 … （对象的值扩展）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">aaa</span></span>() &#123;</span><br><span class="line">    console.log(arguments[0])</span><br><span class="line">    console.log(arguments[1])</span><br><span class="line">    console.log(arguments[2])</span><br><span class="line">    console.log(arguments[3])</span><br><span class="line">&#125;</span><br><span class="line">aaa(1,2,3);</span><br><span class="line">输出的是1，2，3，undefined</span><br><span class="line"><span class="keyword">function</span> bbb(...arg) &#123;</span><br><span class="line">    console.log(arg[0])</span><br><span class="line">    console.log(arg[1])</span><br><span class="line">    console.log(arg[2])</span><br><span class="line">    console.log(arg[3])</span><br><span class="line">&#125;</span><br><span class="line">bbb(1,2,3);</span><br><span class="line">输出的是1，2，3，undefined</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> arr1 = [1,2,3];</span><br><span class="line"><span class="built_in">let</span> arr2 = arr1;</span><br><span class="line">console.log(arr2);    //[1,2,3]</span><br><span class="line">arr2.push(4);</span><br><span class="line">console.log(arr1);    //[1,2,3,4]</span><br><span class="line">console.log(arr2);    //[1,2,3,4]</span><br><span class="line">注：这种赋值不是简单的赋值，而是地址映射</span><br></pre></td></tr></table></figure>

<p>只要是对象，都可以用对象运算符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> arr2 = [...arr1];</span><br><span class="line">加上...代表对象的值</span><br><span class="line"><span class="built_in">let</span> arr2 = [...arr1,4,5,6,7];</span><br><span class="line">console.log(arr1);    //[1,2,3]</span><br><span class="line">console.log(arr2);    //[1,2,3,4,5,6,7]</span><br><span class="line">这样赋值，修改arr2的值，不会对arr1有影响。</span><br></pre></td></tr></table></figure>

<h6 id="rest运算符-rest休息-剩余的部分"><a href="#rest运算符-rest休息-剩余的部分" class="headerlink" title="rest运算符  rest休息 剩余的部分"></a>rest运算符  rest休息 剩余的部分</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> ccc(first, ...arg) &#123;</span><br><span class="line">    console.log(arg.length);</span><br><span class="line">    console.log(first);</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> val of arg)&#123;</span><br><span class="line">        console.log(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ccc(1,2,3,4,5,6,7);</span><br></pre></td></tr></table></figure>

<p>（可以使用在组件化编程的时候，父组件调子组件，子组件调父组件）</p>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> chr = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="built_in">let</span> chr1 =<span class="string">&#x27;\z&#x27;</span>;</span><br><span class="line"><span class="built_in">let</span> chr2 =<span class="string">&#x27;\u007A&#x27;</span>;</span><br><span class="line"><span class="built_in">let</span> chr3 = <span class="string">&#x27;\x2F&#x27;</span>;</span><br><span class="line">console.log(chr3);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> person = <span class="string">&#x27;杨&#x27;</span>;</span><br><span class="line">// ES5写法：</span><br><span class="line"><span class="built_in">let</span> news = <span class="string">&#x27;今天上午10点，&#x27;</span> + person + <span class="string">&#x27;学习ES6&#x27;</span>;</span><br><span class="line">// ES6写法：</span><br><span class="line"><span class="built_in">let</span> news1 = `今天上午10点，<span class="variable">$&#123;person&#125;</span>学习ES6`;</span><br><span class="line">console.log(news);</span><br><span class="line">console.log(news1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> a = 1;</span><br><span class="line"><span class="built_in">let</span> b = 2;</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">sum</span> = `&lt;p&gt;<span class="variable">$&#123; a+b &#125;</span>&lt;/p&gt;`</span><br></pre></td></tr></table></figure>

<h5 id="判断一个字符串里面是否含有某字符"><a href="#判断一个字符串里面是否含有某字符" class="headerlink" title="判断一个字符串里面是否含有某字符"></a>判断一个字符串里面是否含有某字符</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> person = <span class="string">&#x27;杨&#x27;</span>;</span><br><span class="line"><span class="built_in">let</span> news = <span class="string">&#x27;今天上午10点，杨学习ES6&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ES5:</span><br><span class="line">console.log(news.indexOf(person));</span><br><span class="line"></span><br><span class="line">ES6:</span><br><span class="line">console.log(news.includes(person));</span><br><span class="line">//文章开头</span><br><span class="line">console.log(news.startsWidth(person));</span><br><span class="line">//文章结尾</span><br><span class="line">console.log(news.endsWidth(person));</span><br></pre></td></tr></table></figure>

<h5 id="循环输出"><a href="#循环输出" class="headerlink" title="循环输出"></a>循环输出</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">console.log(<span class="string">&#x27;*&#x27;</span>,repeat(2));   //**</span><br><span class="line">//会自动去掉小数点</span><br><span class="line">console.log(<span class="string">&#x27;*&#x27;</span>,repeat(2.5));   //** </span><br></pre></td></tr></table></figure>

<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><a href="https://flykeying.github.io/regex/index.html" title="" target="">正则表达式学习环境</a>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Egret-Engine-白鹭引擎</title>
    <url>/2021/02/07/Egret-Engine-%E7%99%BD%E9%B9%AD%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h4 id="Egret-Engine-2D"><a href="#Egret-Engine-2D" class="headerlink" title="Egret Engine 2D"></a>Egret Engine 2D</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 第一天：掌握TypeScript的独有概念，掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day01_display_object/src">Egret Engine 2D # 显示对象部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day02_display_container/src">Egret Engine 2D # 显示容器部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第三天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day03_vector_drawing/src">Egret Engine 2D #矢量绘图部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第四天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day04_shade/src">Egret Engine 2D #遮罩部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第五天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day05_collision_detection/src">Egret Engine 2D #碰撞检测部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第六天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day06_text/src">Egret Engine 2D #文本部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第七天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day07_event_mechanism/src">Egret Engin 2D #事件机制部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第八天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day08_network/src">Egret Engine 2D #网络部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第九天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day09_bitmap_texture/src">Egret Engine 2D #位图纹理部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day10_mixed_mode/src">Egret Engine 2D #混合模式部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十一天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day11_filter_effect/src">Egret Engine 2D #滤镜部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十二天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day12_time_controll/src">Egret Engine 2D #时间控制部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十三天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day13_multimedia/src">Egret Engine 2D #多媒体部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十四天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day14_render_mode/src">Egret Engine 2D #渲染模式部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十五天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day15_screen_adaptation/src">Egret Engine 2D #屏幕适配部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十六天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day16_debug/src">Egret Engine 2D #调试部分</a></li>
<li><input checked="" disabled="" type="checkbox"> 第十七天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day17_call_js/src">Egret Engine 2D #调用原生JS</a></li>
<li><input disabled="" type="checkbox"> <del>第十八天：掌握<a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/native/horizontalScreen/index.html">Egret Engine 2D #原生支持与打包发布部分</a></del></li>
</ul>
<h4 id="EUI库"><a href="#EUI库" class="headerlink" title="EUI库"></a>EUI库</h4><ul>
<li><input checked="" disabled="" type="checkbox"> 第十九天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day19_eui_get_start/src">Egret Engine # EUI库 # 入门</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day20_exml/src">Egret Engine # EUI库 # EXML基本语法</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十一天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day21_skin/src">Egret Engine # EUI库 # 皮肤</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十二天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day22_auto_layout/src">Egret Engine # EUI库 # 自动布局</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十三天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day23_use_layout/src">Egret Engine # EUI库 # 使用布局类</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十四天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day24_controls/src">Egret Engine # EUI库 # 控件</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十五天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day25_container/src">Egret Engine # EUI库 # 容器</a></li>
<li><input checked="" disabled="" type="checkbox"> 第二十六天：掌握<a href="https://github.com/LinLshare/egret_demo/tree/master/day26_data_collection/src">Egret Engine # EUI库 # 数据集合</a></li>
<li><input disabled="" type="checkbox"> <del>第二十七天：掌握<a href="http://developer.egret.com/cn/github/egret-docs/extension/EUI/advancedSkills/tool/index.html">Egret Engine # EUI库 # 进阶技巧</a></del></li>
</ul>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><ul>
<li><input disabled="" type="checkbox"> <del>第二十八天：<a href="https://github.com/LinLshare/egret_demo/tree/master/day28_elimination_game/src">消除类游戏开发</a></del></li>
<li><input checked="" disabled="" type="checkbox"> 第二十九天：<a href="https://github.com/LinLshare/egret_demo/tree/master/day29_new_begin/src">新的开始</a></li>
<li><input checked="" disabled="" type="checkbox"> 第三十天：<a href="https://github.com/LinLshare/egret_demo/tree/master/day30_simple_math_test/src">狐狸计算题小游戏</a></li>
</ul>
<h2 id="TypeScript-和-JavaScript学习站"><a href="#TypeScript-和-JavaScript学习站" class="headerlink" title="TypeScript 和 JavaScript学习站"></a>TypeScript 和 JavaScript学习站</h2><ul>
<li><a href="https://www.zhihu.com/question/25421196">TypeScript 和 JavaScript 的区别？ – 知乎</a></li>
<li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/">TypeScript Handbook（中文版）– gitbooks</a></li>
<li><a href="http://www.kancloud.cn/kancloud/javascript-style-guide/43119">Airbnb JavaScript 代码规范（ES6）</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">JavaScript教程 – 廖雪峰的官方网站</a> </li>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门 – 阮一峰</a></li>
<li><a href="http://justineo.github.io/singles/writing-modular-js/">使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript</a></li>
<li><a href="http://blog.csdn.net/u010019717/article/details/50443970">Visual Studio Code之常备快捷键 –CSDN</a></li>
<li><a href="http://developer.egret.com/cn/github/egret-docs/Wing/editor/code/index.html">Egret Wing编辑器快捷键</a></li>
</ul>
<h2 id="白鹭引擎学习站"><a href="#白鹭引擎学习站" class="headerlink" title="白鹭引擎学习站"></a>白鹭引擎学习站</h2><ul>
<li><a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/getStarted/helloWorld/index.html">Egret Engine 2D Get Started  – egret.com</a></li>
<li><a href="http://yuedu.baidu.com/ebook/bb0631226f1aff00bfd51e08"><strong>Egret 引擎基础入门</strong></a></li>
<li><a href="http://developer.egret.com/cn/github/egret-docs/extension/threes/instructions/index.html">Egret 扩展库</a></li>
<li><a href="http://developer.egret.com/cn/example/egret2d/index.html#010-disp-basic">教学示例 –白鹭开发者中心</a></li>
<li><a href="http://developer.egret.com/cn/github/egret-docs/Engine2D/debug/performanceOptimization/index.html">Egret 最佳实战</a></li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><a href="http://developer.egret.com/cn/github/egret-docs/tools/TextureMerger/manual/index.html">Texture Merger</a>：Texture Merger 可将零散纹理拼合为整图，同时也可以解析SWF、GIF动画，导出可供Egret使用的配置文件</li>
<li><a href="http://www.pcgeshi.com/">格式工厂</a>：用于多媒体文件的格式转换</li>
<li><a href="http://developer.egret.com/cn/github/egret-docs/Wing/update/update400/index.html">Egret Wing 4.0.0</a>：EgretWing是Egret团队基于VSCode开发的编辑器</li>
<li><a href="https://code.visualstudio.com/">VS Code</a>：微软开源的支持多种编程语言的轻量级代码编辑器</li>
<li><a href="https://gifcam.en.softonic.com/download">GifCam</a>：轻巧实用的Gif录制工具</li>
</ul>
<h2 id="第三方库与素材"><a href="#第三方库与素材" class="headerlink" title="第三方库与素材"></a>第三方库与素材</h2><ul>
<li><a href="http://t.egret.com/">Egret素材商城</a></li>
<li><a href="http://www.dilyblog.com/eger/">H5游戏解决方案eger</a></li>
</ul>
<h2 id="开源实战项目"><a href="#开源实战项目" class="headerlink" title="开源实战项目"></a>开源实战项目</h2><ul>
<li><a href="https://github.com/f111fei/2048egret">2048小游戏</a></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><pre><code>Copyright 2017 Lshare

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</code></pre>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Egret Engine</category>
      </categories>
      <tags>
        <tag>Egret Engine</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript 6简介</title>
    <url>/2019/07/04/ECMAScript-6%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<a href="http://es6.ruanyifeng.com/" title="" target="">阮一峰-ECMAScript 6</a> 

<p>ECMAScript 6.0（以下简称 ES6）。2015 年 6 月正式发布</p>
<h4 id="ES6-与-ECMAScript-2015-的关系"><a href="#ES6-与-ECMAScript-2015-的关系" class="headerlink" title="ES6 与 ECMAScript 2015 的关系"></a>ES6 与 ECMAScript 2015 的关系</h4><p>ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。<br>ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p>
<h4 id="部署进度"><a href="#部署进度" class="headerlink" title="部署进度"></a>部署进度</h4><p>各大浏览器的最新版本，对 ES6 的支持可以查看<a href="http://kangax.github.io/compat-table/es6/" title="" target="">点这里前往</a><br>Node 是 JavaScript 的服务器运行环境（runtime）。</p>
<h4 id="Babel转码器"><a href="#Babel转码器" class="headerlink" title="Babel转码器"></a>Babel转码器</h4><h5 id="1、安装Babel"><a href="#1、安装Babel" class="headerlink" title="1、安装Babel"></a>1、安装Babel</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core</span><br></pre></td></tr></table></figure>
<h5 id="2、配置文件-babelrc"><a href="#2、配置文件-babelrc" class="headerlink" title="2、配置文件.babelrc"></a>2、配置文件.babelrc</h5><p>（使用命令行创建.babelrc文件）<br>Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新转码规则</span></span><br><span class="line">npm install --save-dev @babel/preset-env</span><br><span class="line"></span><br><span class="line"><span class="comment"># react 转码规则</span></span><br><span class="line">npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure>
<p>4、然后，将这些规则加入.babelrc。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;@babel/env&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@babel/preset-react&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，以下所有 Babel 工具和模块的使用，都必须先写好.babelrc。</p>
<h5 id="命令行转码"><a href="#命令行转码" class="headerlink" title="命令行转码"></a>命令行转码</h5><p>Babel 提供命令行工具@babel/cli，用于命令行转码。<br>5、安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/cli</span><br></pre></td></tr></table></figure>
<p>基本用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">npx babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">npx babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npx babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">npx babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npx babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">npx babel src -d lib -s</span><br></pre></td></tr></table></figure>
<p>6、如：npx babel es6.js -o es5.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj1 = &#123;name: &#x27;yangyanyi&#x27;&#125;;</span><br><span class="line">var obj2 = &#123;name: &#x27;yangyanyi&#x27;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(obj1 == obj2);  //因为指向的地址不一样</span><br><span class="line"></span><br><span class="line">var obj3 = &#123;age: 12&#125;;</span><br><span class="line">var obj4 = obj3;</span><br><span class="line"></span><br><span class="line">console.log(obj3 == obj4);  //指向同一个地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 包装类</span><br><span class="line">// 自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁</span><br><span class="line">var s1 = &#x27;some text&#x27;;</span><br><span class="line">s1.color = &#x27;red&#x27;;</span><br><span class="line">console.log(s1.color);  //undefined</span><br><span class="line"></span><br><span class="line">//使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。</span><br><span class="line">var s2 = new String(&#x27;some text&#x27;);</span><br><span class="line">s2.color = &#x27;red&#x27;;</span><br><span class="line">console.log(s2.color);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//可以通过new操作符显式创建包装对象</span><br><span class="line">//两种方式显式创建包装类型的方式：</span><br><span class="line">//Object方式</span><br><span class="line">var a = new Object(&#x27;abc&#x27;);</span><br><span class="line">//构造函数方式</span><br><span class="line">var a = new String(&#x27;abc&#x27;);</span><br><span class="line"></span><br><span class="line">// 常常使用“逻辑或运算符”给省略的参数设置一个合理的默认值</span><br><span class="line"></span><br><span class="line">function add(x, y) &#123;</span><br><span class="line">    y = y || 2;</span><br><span class="line">    console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line">add(1);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let [a, b, c] = [1, 2, 3];</span><br><span class="line">console.log(a, b, c);</span><br><span class="line"></span><br><span class="line">let [x, , y] = [1, 2, 3];</span><br><span class="line">console.log(x, y);</span><br><span class="line"></span><br><span class="line">let[head, ...tail] = [1, 2, 3, 4];</span><br><span class="line">console.log(head, tail);</span><br><span class="line"></span><br><span class="line">let [q, w, ...e] = [&#x27;a&#x27;];</span><br><span class="line">console.log(q, w, e);</span><br><span class="line"></span><br><span class="line">// let [foo] = &#123;&#125;;  //报错</span><br><span class="line"></span><br><span class="line">let [l, m, n] = new Set([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">console.log(l, m, n);</span><br><span class="line"></span><br><span class="line">// ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以只有当一个数组成员严格等于undefined，默认值才会成效</span><br><span class="line"></span><br><span class="line">let [x = 1] =[undefined];</span><br><span class="line"></span><br><span class="line">let [ y = 1] = [null];</span><br><span class="line"></span><br><span class="line">console.log(x, y);  //1  null   </span><br><span class="line">// 原因：因为null不严格等于undefined，所以默认值不会生效</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对象的结构赋值            </span><br><span class="line">let  &#123; foo, bar &#125; = &#123; foo: &#x27;aaa&#x27;, bar: &quot;bbb&quot;&#125;;</span><br><span class="line">console.log(foo, bar);</span><br><span class="line"></span><br><span class="line">// 不是按照顺序，是根据键名</span><br><span class="line">let &#123; bbb, aaa &#125; = &#123; aaa: &#x27;aaa&#x27;, bbb: &#x27;bbbb&#x27;&#125;;</span><br><span class="line">console.log(aaa, bbb);</span><br><span class="line"></span><br><span class="line">let &#123; baz &#125; = &#123; bnv:&#x27;bnv&#x27;, kjl: &#x27;kjl&#x27;&#125;;</span><br><span class="line">console.log(baz);</span><br><span class="line"></span><br><span class="line">// 当变量名与属性名不一致，必须写成下面这样</span><br><span class="line">let &#123; foo: baz &#125; = &#123; foo: &#x27;aaa&#x27;, bar: &#x27;bbb&#x27;&#125;;</span><br><span class="line">console.log(baz);</span><br><span class="line"></span><br><span class="line">let obj = &#123; first: &#x27;hello&#x27;, last: &#x27;world&#x27;&#125;;</span><br><span class="line">let &#123; first: f, last: l&#125; = obj;</span><br><span class="line">console.log(f, l);</span><br><span class="line"></span><br><span class="line">let &#123; foo: baz &#125; = &#123; foo: &#x27;aaa&#x27;, bar: &#x27;bbb&#x27;&#125;;</span><br><span class="line">console.log(baz, foo);    //foo is not defined</span><br><span class="line">// 原因：foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>阮一峰-ES6</category>
      </categories>
      <tags>
        <tag>阮一峰-ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>FastAdmin框架-使用笔记</title>
    <url>/2020/07/24/FastAdmin%E6%A1%86%E6%9E%B6-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="在FastAdmin动态追加bootstrap-select下拉列表"><a href="#在FastAdmin动态追加bootstrap-select下拉列表" class="headerlink" title="在FastAdmin动态追加bootstrap-select下拉列表"></a>在FastAdmin动态追加bootstrap-select下拉列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select data-rule=&quot;required&quot; class=&quot;form-control selectpicker&quot; data-live-search=&quot;true&quot; name=&quot;row[admin_role_name]&quot; data-url=&quot;&quot; data-query-name=&quot;&quot;&gt; &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">注：data-live-search=&quot;true&quot;是添加可以模糊搜索功能</span><br></pre></td></tr></table></figure>

<p>关键代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;jquery&#x27;, &#x27;bootstrap&#x27;, &#x27;backend&#x27;, &#x27;table&#x27;, &#x27;form&#x27;], function ($, undefined, Backend, Table, Form) &#123;</span><br><span class="line">    var Controller = &#123;</span><br><span class="line">      ......</span><br><span class="line">      ......</span><br><span class="line">      add: function () &#123;</span><br><span class="line">            //关键代码：（要引入）</span><br><span class="line">            require([&#x27;bootstrap-select&#x27;, &#x27;bootstrap-select-lang&#x27;]);</span><br><span class="line"></span><br><span class="line">            //渲染下拉框</span><br><span class="line">            var renderselect = function (select, data, defaultOpt) &#123;</span><br><span class="line">                if(defaultOpt &amp;&amp; data.length&gt;0) &#123;</span><br><span class="line">                    var opt = &#x27;&lt;option value=&quot;&quot;&gt;&#x27; + defaultOpt + &#x27;&lt;/option&gt;&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">                var html = [opt] || [];</span><br><span class="line">                for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">                    html.push(&quot;&lt;option value=&#x27;&quot; + data[i] + &quot;&#x27;&gt;&quot; + data[i] + &quot;&lt;/option&gt;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                $(select).html(html.join(&quot;&quot;));</span><br><span class="line">                $(&quot;.selectpicker&quot;).selectpicker(&#x27;refresh&#x27;);</span><br><span class="line">                return select;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">           $(&quot;select[name=&#x27;row[server_id]&#x27;]&quot;).change(function () &#123;</span><br><span class="line">                var admin_id = $(&quot;select[name=&#x27;row[admin_id]&#x27;]&quot;).val();</span><br><span class="line">                var app_id = $(&quot;select[name=&#x27;row[app_id]&#x27;]&quot;).val();</span><br><span class="line">                var server_id = $(&quot;select[name=&#x27;row[server_id]&#x27;]&quot;).val();</span><br><span class="line"></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &#x27;/admin/boon/resource/role_name_lise&#x27;,</span><br><span class="line">                    data: &#123;admin_id: admin_id, app_id: app_id, server_id: server_id&#125;,</span><br><span class="line">                    type: &#x27;get&#x27;,</span><br><span class="line">                    dataType: &#x27;json&#x27;,</span><br><span class="line">                    success: function (data, textStatus, xhr) &#123;</span><br><span class="line">                        var list = data.data.list;</span><br><span class="line"></span><br><span class="line">                        renderselect($(&quot;select[name=&#x27;row[admin_role_name]&#x27;]&quot;), list, &quot;请选择测试角色名&quot;);</span><br><span class="line">                        renderselect($(&quot;select[name=&#x27;row[player_role_name]&#x27;]&quot;), list, &quot;请选择玩家角色名&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line">            </span><br><span class="line">           $(&quot;select[name=&#x27;row[admin_id]&#x27;], select[name=&#x27;row[app_id]&#x27;]&quot;).change(function () &#123;</span><br><span class="line">               console.log(&quot;dianji&quot;)</span><br><span class="line">               var list = [];</span><br><span class="line">                renderselect($(&quot;select[name=&#x27;row[admin_role_name]&#x27;]&quot;), list);</span><br><span class="line">                renderselect($(&quot;select[name=&#x27;row[player_role_name]&#x27;]&quot;), list);</span><br><span class="line">           &#125;); </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>FastAdmin框架</category>
      </categories>
      <tags>
        <tag>FastAdmin框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-UI笔记</title>
    <url>/2021/05/13/Element-UI%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i element-ui -S</span><br></pre></td></tr></table></figure>

<h4 id="引入element-ui"><a href="#引入element-ui" class="headerlink" title="引入element-ui"></a>引入element-ui</h4><p>在 main.js 中写入以下内容（完整引入）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="ElementUI表格合并单元格"><a href="#ElementUI表格合并单元格" class="headerlink" title="ElementUI表格合并单元格"></a>ElementUI表格合并单元格</h4><p>摘抄自<a href="https://www.cnblogs.com/yuwenjing0727/p/10110721.html">博客</a>，仅用于学习。</p>
<table>
  <tr>
    <th>序号</th>
    <th>工单类型</th>
    <th>taskKey</th>
    <th>templateUrl</th>
    <th>操作</th>
  </tr>
  <tr>
    <td rowspan="3">1</td>
    <td rowspan="3">事件单</td>
    <td>shijian_01</td>
    <td>/shijian_01</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_02</td>
    <td>/shijian_02</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_03</td>
    <td>/shijian_03</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td rowspan="3">2</td>
    <td rowspan="3">问题单</td>
    <td>shijian_04</td>
    <td>/shijian_04</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_05</td>
    <td>/shijian_05</td>
    <td>编辑   删除</td>
  </tr>
  <tr>
    <td>shijian_06</td>
    <td>/shijian_06</td>
    <td>编辑   删除</td>
  </tr>
</table>


<p>代码附上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;&quot;&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">        :data=&quot;listData&quot;</span><br><span class="line">        :span-method=&quot;objectSpanMethod&quot;</span><br><span class="line">        class=&quot;tableArea&quot;</span><br><span class="line">        style=&quot;width: 100%&quot;&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;type&quot;</span><br><span class="line">          label=&quot;序号&quot;</span><br><span class="line">          align=&quot;center&quot;</span><br><span class="line">          width=&quot;200&quot;/&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;sheetType&quot;</span><br><span class="line">          label=&quot;工单类型&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;taskKey&quot;</span><br><span class="line">          label=&quot;taskKey&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          prop=&quot;templateUrl&quot;</span><br><span class="line">          label=&quot;templateUrl&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;el-table-column</span><br><span class="line">          label=&quot;操作&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">              &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; content=&quot;修改&quot; placement=&quot;top-start&quot;&gt;</span><br><span class="line">                      &lt;i class=&quot;el-icon-edit-outline&quot;  @click=&quot;modify(scope)&quot; /&gt;</span><br><span class="line">                    &lt;/el-tooltip&gt;</span><br><span class="line">                    &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; content=&quot;删除&quot; placement=&quot;top-start&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-delete&quot; @click=&quot;deleteData(scope)&quot; /&gt;</span><br><span class="line">                    &lt;/el-tooltip&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-table-column &gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;myNeedDeal&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      rowList: [],</span><br><span class="line">      spanArr: [],</span><br><span class="line">      position: 0,</span><br><span class="line">      listData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">      queryData()&#123;//查询操作</span><br><span class="line">          this.listData = [</span><br><span class="line">              &#123;</span><br><span class="line">            id:1,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_01&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_01&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:2,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_02&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_02&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:3,</span><br><span class="line">          type:1,</span><br><span class="line">          sheetType: &quot;事件单&quot;,</span><br><span class="line">          taskKey: &quot;shijian_03&quot;,</span><br><span class="line">          templateUrl: &quot;/shijian_04&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:4,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_01&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_01&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:5,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_02&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_02&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id:6,</span><br><span class="line">          type:2,</span><br><span class="line">          sheetType: &quot;问题单&quot;,</span><br><span class="line">          taskKey: &quot;wenti_03&quot;,</span><br><span class="line">          templateUrl: &quot;/wenti_03&quot;</span><br><span class="line">        &#125;</span><br><span class="line">          ];</span><br><span class="line">          this.rowspan()</span><br><span class="line">      &#125;,</span><br><span class="line">      rowspan() &#123;</span><br><span class="line">          this.listData.forEach((item,index) =&gt; &#123;</span><br><span class="line">            if( index === 0)&#123;</span><br><span class="line">                this.spanArr.push(1);</span><br><span class="line">                this.position = 0;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(this.listData[index].type === this.listData[index-1].type )&#123;</span><br><span class="line">                    this.spanArr[this.position] += 1;</span><br><span class="line">                    this.spanArr.push(0);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    this.spanArr.push(1);</span><br><span class="line">                    this.position = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    objectSpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;  //表格合并行</span><br><span class="line">        if (columnIndex === 0) &#123;</span><br><span class="line">            const _row = this.spanArr[rowIndex];</span><br><span class="line">            const _col = _row&gt;0 ? 1 : 0;</span><br><span class="line">            return &#123;</span><br><span class="line">                rowspan: _row,</span><br><span class="line">                colspan: _col</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(columnIndex === 1)&#123;</span><br><span class="line">            const _row = this.spanArr[rowIndex];</span><br><span class="line">            const _col = _row&gt;0 ? 1 : 0;</span><br><span class="line">            return &#123;</span><br><span class="line">                rowspan: _row,</span><br><span class="line">                colspan: _col</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.queryData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.el-select &#123;</span><br><span class="line">  margin-right: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.el-input &#123;</span><br><span class="line">  margin-right: 15px;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.tableArea &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  box-shadow: 0 0 8px 0 #aaa;</span><br><span class="line">&#125;</span><br><span class="line">i[class^=&quot;el-icon&quot;] &#123;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.modify_table&#123;</span><br><span class="line">    td&#123;</span><br><span class="line">        padding: 10px ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.item_title&#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>详细说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:span-method=&quot;objectSpanMethod&quot;  </span><br></pre></td></tr></table></figure>

<p>这个是官方给定的绑定属性和对应的方法，objectSpanMethod 传入了 { row, column, rowIndex, columnIndex }</p>
<p>row: 当前行</p>
<p>column: 当前列</p>
<p>rowIndex：当前行号</p>
<p>columnIndex ：当前列号</p>
<p>该函数可以返回一个包含两个元素的数组，第一个元素代表<code>rowspan</code>，第二个元素代表<code>colspan</code>。 也可以返回一个键名为<code>rowspan</code>和<code>colspan</code>的对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.spanArr 数组 ，返回的是相对应的行合并行数</span><br></pre></td></tr></table></figure>

<p>这个示例打印出的this.spanArr为 [3, 0, 0, 3, 0, 0]，比如，第一个元素为3，表示第一行应该向下合并3行（即第一行的rowspan为3），第二个元素的rowspan为0，就让它“消失”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rowspan（）这个函数就是用来返回 this.spanArr 数组的，定义每一行的 rowspan</span><br></pre></td></tr></table></figure>

<p>rowspan（）函数，if( index === 0)，第一行，直接先给数组push进一个1，表示自己先占一行，this.position是数组元素的位置（此时是从数组元素的第一个开始，所以this.position为0）， this.position为0意思表示的就是数组的第一个元素。</p>
<p>当到了index为2的时候，if(this.listData[index].type === this.listData[index-1].type )，让第二行与第一行作比较，</p>
<p>如果第二行与第一行相等的话，this.position就+1，当有n行第一行相同，this.position就为n，表示向下合并n行；第二行自己就this.spanArr.push(0)，表示第二行“消失”，因为第一行和第二行合并了啊。</p>
<p>如果第二行与第一行不相等的话，那么this.spanArr.push(1);就让第二行自己独占一行；this.position = index意思就是把指针拿到index这行来，表示设置数组this.spanArr[this.position]的元素值，然后定义从此行开始向下合并几行（可能这句话我表述的不是很清楚你可以根据我这个示例研究下，当index为3时，this.position为3，当index为4时，第四行与第三行需要合并，那么在数组的this.position元素就要+1了，也就是this.spanArr[this.position] += 1）</p>
<p>还有最后一句话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const _col = _row&gt;0 ? 1 : 0;</span><br></pre></td></tr></table></figure>

<p>定义的这一个单元格列的合并，我们项目只合并行，不合并列；</p>
<p>_row：代表合并行的行数，_row的值要么是1，或者更大的自然正整数，要么是0。</p>
<p>1代表：独占一行</p>
<p>更大的自然数：代表合并了若干行</p>
<p>0：代表“消失”的哪那一个单元格，后面的单元格向前推一格</p>
<p>注意：如果配合分页一起渲染数据，要在rowspan函数中，先将this.spanArr清空数组。不添加，点分页加载数据会导致表格错乱。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rowspan() &#123;</span><br><span class="line">    this.spanArr=[];</span><br><span class="line">    .......</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/weixin_33982670/article/details/91446060">elementui表格动态数据单元格合并</a></p>
<p><a href="https://www.imooc.com/wenda/detail/522127">elementUI table合并相同数据的单元格</a></p>
<p><a href="https://segmentfault.com/a/1190000019176628">elementUI table表格动态合并</a></p>
<h3 id="slot的使用"><a href="#slot的使用" class="headerlink" title="slot的使用"></a>slot的使用</h3><h5 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h5><table>
<thead>
<tr>
<th>事件名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>标题内容</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-page-header @back=<span class="string">&quot;goBack&quot;</span> content=<span class="string">&quot;管理&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>修改标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/el-page-header&gt;</span><br></pre></td></tr></table></figure>

<h4 id="解决引用Element-UI-导致弹出多个message消息提示的问题"><a href="#解决引用Element-UI-导致弹出多个message消息提示的问题" class="headerlink" title="解决引用Element UI 导致弹出多个message消息提示的问题"></a><a href="https://www.cnblogs.com/cndarren/p/14691315.html">解决引用Element UI 导致弹出多个message消息提示的问题</a></h4><h4 id="改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框"><a href="#改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框" class="headerlink" title="改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框"></a><a href="https://blog.csdn.net/yangmiemie120/article/details/100736154">改造elementui的穿梭框，让他直接点击选项就穿梭到另一个框</a></h4><h4 id="element-ui-change事件传值"><a href="#element-ui-change事件传值" class="headerlink" title="element-ui change事件传值"></a><a href="https://blog.csdn.net/qq_15601471/article/details/89048951">element-ui change事件传值</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@change=<span class="string">&quot;handleSelect($event)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">handleSelect</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="vue使用elementUI表单的获取select-checkbox的value值"><a href="#vue使用elementUI表单的获取select-checkbox的value值" class="headerlink" title="vue使用elementUI表单的获取select,checkbox的value值"></a><a href="https://blog.csdn.net/weixin_43834855/article/details/108817517">vue使用elementUI表单的获取select,checkbox的value值</a></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;el-checkbox</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;game in gameData&quot;</span></span><br><span class="line">  :label=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :key=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :data-id=<span class="string">&quot;game.id&quot;</span></span><br><span class="line">  :data-group=<span class="string">&quot;game.group_id&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;game.<span class="property">name</span>&#125;&#125;&lt;/el-checkbox&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把想要的value值放在label中，将需要显示的内容放在 &lt;el-checkbox&gt;标签之间</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:label</span>=<span class="string">&quot;想要获取的value值&quot;</span>&gt;</span>&#123;&#123;显示的内容值&#125;&#125;<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>checkbox的获取可以通过label来获得，将原来的label写在<el-checkbox>{名称}&lt;/&gt;中，因为elementUI获取绑定的是label，<br>即<el-checkbox label=[value]>[label]&lt;/&gt;</p>
<p>事件传多参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;ul-list txt-left&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-for</span>=<span class="string">&quot;(game, index) in checkedData&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label</span>=<span class="string">&quot;game.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:key</span>=<span class="string">&quot;game.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">     @<span class="attr">click</span>=<span class="string">&quot;chooseGame(index, game.id)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:class</span> = <span class="string">&quot;isactive == index ? &#x27;blue-txt&#x27; : &#x27;&#x27; &quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123;game.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">isactive</span>: <span class="number">0</span>,</span><br><span class="line">  </span><br><span class="line"><span class="title function_">chooseGame</span>(<span class="params">index, id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isactive</span> = index</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">thisGameChannels</span> = <span class="variable language_">this</span>.<span class="property">allGameChannels</span>[id]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="Element-ui-el-row-el-col里面高度不一致的问题"><a href="#Element-ui-el-row-el-col里面高度不一致的问题" class="headerlink" title="Element ui el-row el-col里面高度不一致的问题"></a><a href="https://blog.csdn.net/sinat_33255495/article/details/114366877">Element ui el-row el-col里面高度不一致的问题</a></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-row type=<span class="string">&quot;flex&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-textarea__inner&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 33.2333px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span>&gt;</span>test<span class="tag">&lt;<span class="name">br</span>&gt;</span>test<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>用饿了吗el-row，el-col布局页面的时候会因为el-col的内容高度不统一，造成布局混乱，解决方案就是在el-row中添加type=”flex”。</p>
<p>注意：里面的内容要有设定的高度，不然加上flex也无效。</p>
]]></content>
      <tags>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-笔记</title>
    <url>/2021/01/14/Git-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="提交到远程仓库报错"><a href="#提交到远程仓库报错" class="headerlink" title="提交到远程仓库报错"></a>提交到远程仓库报错</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:443</span><br><span class="line"> </span><br><span class="line"> 或</span><br><span class="line"> </span><br><span class="line">OpenSSL SSL_connect: Connection was reset in connection to github.com:403</span><br></pre></td></tr></table></figure>

<p>解决方法，将.git/config：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = https://github.com/winney07/winney07.github.io.git</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = git@github.com:winney07/winney07.github.io.git</span><br></pre></td></tr></table></figure>



<h4 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Git-%E7%AC%94%E8%AE%B0/create.png" alt="Github创建仓库"></p>
<h3 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h3><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><ol>
<li><p>克隆远程版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化本地版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h4><ol>
<li><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看变更内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟踪所有改动过的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟踪指定的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv &lt;old&gt; &lt;new&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止跟踪文件但不删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交所有更新过的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改最后一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><ol>
<li><p>查看提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看指定文件的提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以列表方式查看指定文件的提交历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ol>
<li><p>撤销工作目录中所有未提交文件的修改内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销指定的未提交文件的修改内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销指定的提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h4><ol>
<li><p>显示所有本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到指定分支或标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch/tag&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有本地标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
</li>
<li><p>给予最新提交创建标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h4><ol>
<li><p>合并指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>衍合指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><ol>
<li><p>查看远程版本库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看指定远程版本库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>添加远程版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>从远程库获取代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>下载代码及快速合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>上传代码及快速合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>删除远程分支或标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; : &lt;branch/tag-name&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>上传所有标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="管理分支"><a href="#管理分支" class="headerlink" title="管理分支"></a>管理分支</h3><h4 id="1、查看本地分支"><a href="#1、查看本地分支" class="headerlink" title="1、查看本地分支"></a>1、查看本地分支</h4><p>使用 git branch命令，如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>*<strong>标识的是你当前所在的分支。</strong></p>
<h4 id="2、查看远程分支"><a href="#2、查看远程分支" class="headerlink" title="2、查看远程分支"></a>2、查看远程分支</h4><p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h4 id="3、查看所有分支"><a href="#3、查看所有分支" class="headerlink" title="3、查看所有分支"></a>3、查看所有分支</h4><p>命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h4 id="2、本地创建新的分支"><a href="#2、本地创建新的分支" class="headerlink" title="2、本地创建新的分支"></a>2、本地创建新的分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch save</span><br></pre></td></tr></table></figure>

<h4 id="3、切换到新的分支"><a href="#3、切换到新的分支" class="headerlink" title="3、切换到新的分支"></a>3、切换到新的分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git checkout <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout save</span><br></pre></td></tr></table></figure>

<h4 id="4、创建-切换分支"><a href="#4、创建-切换分支" class="headerlink" title="4、创建+切换分支"></a>4、创建+切换分支</h4><p>创建分支的同时切换到该分支上，命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>git checkout -b [branch name] 的效果相当于以下两步操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch <span class="selector-attr">[branch name]</span></span><br><span class="line">git checkout <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<h4 id="5、将新分支推送到github"><a href="#5、将新分支推送到github" class="headerlink" title="5、将新分支推送到github"></a>5、将新分支推送到github</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push origin <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin save</span><br></pre></td></tr></table></figure>

<h4 id="6、删除本地分支"><a href="#6、删除本地分支" class="headerlink" title="6、删除本地分支"></a>6、删除本地分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git branch -d <span class="selector-attr">[branch name]</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d save</span><br></pre></td></tr></table></figure>

<h4 id="7、删除github远程分支"><a href="#7、删除github远程分支" class="headerlink" title="7、删除github远程分支"></a>7、删除github远程分支</h4><p>命令如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push origin :[branch name]</span><br></pre></td></tr></table></figure>

<p>分支名前的冒号代表删除。<br> 例如：</p>
<p>git push origin :save</p>
<h4 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h4 id="提交工作区文件到暂存区"><a href="#提交工作区文件到暂存区" class="headerlink" title="提交工作区文件到暂存区"></a>提交工作区文件到暂存区</h4><ol>
<li><p>提交工作区中所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交工作区中指定文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;file1&gt; &lt;file2&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>提交工作区中某个文件夹中所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><ol>
<li><p>将暂存区中的文件提交到本地仓库中，即打上新版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;commit_info&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a -m “commit_info”</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="查看本地仓库关联的远程仓库"><a href="#查看本地仓库关联的远程仓库" class="headerlink" title="查看本地仓库关联的远程仓库"></a>查看本地仓库关联的远程仓库</h4><ol>
<li><p>查看本地仓库关联的远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看远程仓库的url地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="解决git-pull后本地写的代码没了的问题"><a href="#解决git-pull后本地写的代码没了的问题" class="headerlink" title="解决git pull后本地写的代码没了的问题"></a>解决git pull后本地写的代码没了的问题</h4><p>第一步：git reflog</p>
<p>第二步：git reset –hard HEAD@{n}   (HEAD:为版本号，就前面那一串数字，n是你要回退到的引用位置)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard 84ef223</span><br></pre></td></tr></table></figure>

<h4 id="创建分支，回退到某个版本"><a href="#创建分支，回退到某个版本" class="headerlink" title="创建分支，回退到某个版本"></a>创建分支，回退到某个版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch pagination 96ba9b3</span><br><span class="line">git branch 分支名称 版本号</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果为了测试原来的代码，将它回退到某个版本，但是为了不影响当前分支里面的内容，创建一个新的分支。  如果git branch 分支名称，不加版本号，会在当前版本下创建分支。   如果需要回退到某个版本，需要在创建分支的时候加上版本号。</p>
</blockquote>
<p>如果要切换回原来的分支(master)，要先对新创建的分支(pagination)的内容提交，这个提交只会提交到pagination分支里面，不会影响到master分支</p>
<p>提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;复习&quot;</span><br></pre></td></tr></table></figure>

<p>切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<h4 id="解决pre-commit-hook-failed-add-–no-verify-的问题"><a href="#解决pre-commit-hook-failed-add-–no-verify-的问题" class="headerlink" title="解决pre -commit hook failed (add –no-verify)的问题"></a><a href="https://www.jianshu.com/p/aac394600727">解决pre -commit hook failed (add –no-verify)的问题</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .git</span><br><span class="line"></span><br><span class="line">rm hooks/pre-commit</span><br></pre></td></tr></table></figure>



<p>git commit 不单保存了当前的版本号还保存了他的父版本号</p>
<h4 id="查看命令："><a href="#查看命令：" class="headerlink" title="查看命令："></a>查看命令：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git / git help</span><br></pre></td></tr></table></figure>

<h4 id="查看所有命令："><a href="#查看所有命令：" class="headerlink" title="查看所有命令："></a>查看所有命令：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help -a</span><br></pre></td></tr></table></figure>

<h4 id="查看使用手册："><a href="#查看使用手册：" class="headerlink" title="查看使用手册："></a>查看使用手册：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help -g</span><br></pre></td></tr></table></figure>

<h4 id="查看某个命令的详细使用："><a href="#查看某个命令的详细使用：" class="headerlink" title="查看某个命令的详细使用："></a>查看某个命令的详细使用：</h4><p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help add</span><br></pre></td></tr></table></figure>

<p>按Q可以退出</p>
<p><code>.git</code>是做版本控制的，如果想去除，直接删了这个目录。</p>
<p>是隐藏文件，在mac 用<code>open .git</code>打开（在.git的上层目录）</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Git命令</title>
    <url>/2021/02/19/Github-Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Git Cheat Sheet 中文版：<a href="https://github.com/flyhigher139/Git-Cheat-Sheet">Git-Cheat-Sheet</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="列出当前配置："><a href="#列出当前配置：" class="headerlink" title="列出当前配置："></a>列出当前配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h4 id="列出repository配置："><a href="#列出repository配置：" class="headerlink" title="列出repository配置："></a>列出repository配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --local --list</span><br></pre></td></tr></table></figure>

<h4 id="列出全局配置："><a href="#列出全局配置：" class="headerlink" title="列出全局配置："></a>列出全局配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>



<h4 id="列出系统配置："><a href="#列出系统配置：" class="headerlink" title="列出系统配置："></a>列出系统配置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure>



<h4 id="设置用户名："><a href="#设置用户名：" class="headerlink" title="设置用户名："></a>设置用户名：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name “[firstname lastname]”</span><br></pre></td></tr></table></figure>



<h4 id="设置用户邮箱："><a href="#设置用户邮箱：" class="headerlink" title="设置用户邮箱："></a>设置用户邮箱：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email “[valid-email]”</span><br></pre></td></tr></table></figure>



<h4 id="设置git命令输出为彩色："><a href="#设置git命令输出为彩色：" class="headerlink" title="设置git命令输出为彩色："></a>设置git命令输出为彩色：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global color.ui auto</span><br></pre></td></tr></table></figure>



<h4 id="设置git使用的文本编辑器设："><a href="#设置git使用的文本编辑器设：" class="headerlink" title="设置git使用的文本编辑器设："></a>设置git使用的文本编辑器设：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.editor vi</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="Repository配置对应的配置文件路径-–local-："><a href="#Repository配置对应的配置文件路径-–local-：" class="headerlink" title="Repository配置对应的配置文件路径[–local]："></a>Repository配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;repo&gt;/.git/config</span><br></pre></td></tr></table></figure>



<h4 id="用户全局配置对应的配置文件路径-–global-："><a href="#用户全局配置对应的配置文件路径-–global-：" class="headerlink" title="用户全局配置对应的配置文件路径[–global]："></a>用户全局配置对应的配置文件路径[–global]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure>



<h4 id="系统配置对应的配置文件路径-–local-："><a href="#系统配置对应的配置文件路径-–local-：" class="headerlink" title="系统配置对应的配置文件路径[–local]："></a>系统配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/gitconfig</span><br></pre></td></tr></table></figure>



<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="复制一个已创建的仓库"><a href="#复制一个已创建的仓库" class="headerlink" title="复制一个已创建的仓库:"></a>复制一个已创建的仓库:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过 SSH</span><br><span class="line">git clone ssh://user@domain.com/repo.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过 HTTP</span><br><span class="line">git clone http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure>



<h4 id="创建一个新的本地仓库"><a href="#创建一个新的本地仓库" class="headerlink" title="创建一个新的本地仓库:"></a>创建一个新的本地仓库:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>



<h3 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h3><h4 id="显示工作路径下已修改的文件："><a href="#显示工作路径下已修改的文件：" class="headerlink" title="显示工作路径下已修改的文件："></a>显示工作路径下已修改的文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>



<h4 id="显示与上次提交版本文件的不同："><a href="#显示与上次提交版本文件的不同：" class="headerlink" title="显示与上次提交版本文件的不同："></a>显示与上次提交版本文件的不同：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>



<h4 id="把当前所有修改添加到下次提交中："><a href="#把当前所有修改添加到下次提交中：" class="headerlink" title="把当前所有修改添加到下次提交中："></a>把当前所有修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>



<h4 id="把对某个文件的修改添加到下次提交中："><a href="#把对某个文件的修改添加到下次提交中：" class="headerlink" title="把对某个文件的修改添加到下次提交中："></a>把对某个文件的修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -p &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="提交本地的所有修改："><a href="#提交本地的所有修改：" class="headerlink" title="提交本地的所有修改："></a>提交本地的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>



<h4 id="提交之前已标记的变化："><a href="#提交之前已标记的变化：" class="headerlink" title="提交之前已标记的变化："></a>提交之前已标记的变化：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<h4 id="附加消息提交："><a href="#附加消息提交：" class="headerlink" title="附加消息提交："></a>附加消息提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;message here&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="提交，并将提交时间设置为之前的某个日期"><a href="#提交，并将提交时间设置为之前的某个日期" class="headerlink" title="提交，并将提交时间设置为之前的某个日期:"></a>提交，并将提交时间设置为之前的某个日期:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --date=&quot;`date --date=&#x27;n day ago&#x27;`&quot; -am &quot;Commit Message&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h4><blockquote>
<p>注：请勿修改已发布的提交记录!</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交的committer-date："><a href="#修改上次提交的committer-date：" class="headerlink" title="修改上次提交的committer date："></a>修改上次提交的committer date：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=&quot;date&quot; git commit --amend</span><br></pre></td></tr></table></figure>

<h4 id="修改上次提交的author-date："><a href="#修改上次提交的author-date：" class="headerlink" title="修改上次提交的author date："></a>修改上次提交的author date：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend --date=&quot;date&quot;</span><br></pre></td></tr></table></figure>

<h4 id="把当前分支中未提交的修改移动到其他分支："><a href="#把当前分支中未提交的修改移动到其他分支：" class="headerlink" title="把当前分支中未提交的修改移动到其他分支："></a>把当前分支中未提交的修改移动到其他分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git checkout branch2</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>



<h4 id="将-stashed-changes-应用到当前分支："><a href="#将-stashed-changes-应用到当前分支：" class="headerlink" title="将 stashed changes 应用到当前分支："></a>将 stashed changes 应用到当前分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>



<h4 id="删除最新一次的-stashed-changes："><a href="#删除最新一次的-stashed-changes：" class="headerlink" title="删除最新一次的 stashed changes："></a>删除最新一次的 stashed changes：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>



<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="从当前目录的所有文件中查找文本内容："><a href="#从当前目录的所有文件中查找文本内容：" class="headerlink" title="从当前目录的所有文件中查找文本内容："></a>从当前目录的所有文件中查找文本内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git grep &quot;Hello&quot;</span><br></pre></td></tr></table></figure>



<h4 id="在某一版本中搜索文本："><a href="#在某一版本中搜索文本：" class="headerlink" title="在某一版本中搜索文本："></a>在某一版本中搜索文本：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git grep &quot;Hello&quot; v2.5</span><br></pre></td></tr></table></figure>



<h3 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h3><h4 id="从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）："><a href="#从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）：" class="headerlink" title="从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）："></a>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>



<h4 id="显示所有提交（仅显示提交的hash和message）："><a href="#显示所有提交（仅显示提交的hash和message）：" class="headerlink" title="显示所有提交（仅显示提交的hash和message）："></a>显示所有提交（仅显示提交的hash和message）：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>



<h4 id="显示某个用户的所有提交："><a href="#显示某个用户的所有提交：" class="headerlink" title="显示某个用户的所有提交："></a>显示某个用户的所有提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --author=&quot;username&quot;</span><br></pre></td></tr></table></figure>



<h4 id="显示某个文件的所有修改："><a href="#显示某个文件的所有修改：" class="headerlink" title="显示某个文件的所有修改："></a>显示某个文件的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集："><a href="#仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集：" class="headerlink" title="仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集："></a>仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline &lt;origin/master&gt;..&lt;remote/master&gt; --left-right</span><br></pre></td></tr></table></figure>



<h4 id="谁，在什么时间，修改了文件的什么内容："><a href="#谁，在什么时间，修改了文件的什么内容：" class="headerlink" title="谁，在什么时间，修改了文件的什么内容："></a>谁，在什么时间，修改了文件的什么内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="显示reflog："><a href="#显示reflog：" class="headerlink" title="显示reflog："></a>显示reflog：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog show </span><br></pre></td></tr></table></figure>



<h3 id="删除reflog："><a href="#删除reflog：" class="headerlink" title="删除reflog："></a>删除reflog：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog delete</span><br></pre></td></tr></table></figure>



<h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><h4 id="列出所有的分支："><a href="#列出所有的分支：" class="headerlink" title="列出所有的分支："></a>列出所有的分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>



<h4 id="列出所有的远端分支："><a href="#列出所有的远端分支：" class="headerlink" title="列出所有的远端分支："></a>列出所有的远端分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>



<h4 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支:"></a>创建并切换到新分支:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="基于当前分支创建新分支："><a href="#基于当前分支创建新分支：" class="headerlink" title="基于当前分支创建新分支："></a>基于当前分支创建新分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="基于远程分支创建新的可追溯的分支："><a href="#基于远程分支创建新的可追溯的分支：" class="headerlink" title="基于远程分支创建新的可追溯的分支："></a>基于远程分支创建新的可追溯的分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --track &lt;new-branch&gt;&lt;remote-branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支:"></a>删除本地分支:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="强制删除一个本地分支："><a href="#强制删除一个本地分支：" class="headerlink" title="强制删除一个本地分支："></a>强制删除一个本地分支：</h4><blockquote>
<p>注：将会丢失未合并的修改</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="给当前版本打标签："><a href="#给当前版本打标签：" class="headerlink" title="给当前版本打标签："></a>给当前版本打标签：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>



<h4 id="给当前版本打标签并附加消息："><a href="#给当前版本打标签并附加消息：" class="headerlink" title="给当前版本打标签并附加消息："></a>给当前版本打标签并附加消息：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>



<h3 id="更新与发布"><a href="#更新与发布" class="headerlink" title="更新与发布"></a>更新与发布</h3><h4 id="列出当前配置的远程端："><a href="#列出当前配置的远程端：" class="headerlink" title="列出当前配置的远程端："></a>列出当前配置的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>



<h4 id="显示远程端的信息："><a href="#显示远程端的信息：" class="headerlink" title="显示远程端的信息："></a>显示远程端的信息：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>



<h4 id="添加新的远程端："><a href="#添加新的远程端：" class="headerlink" title="添加新的远程端："></a>添加新的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add &lt;remote&gt;&lt;url&gt;</span><br></pre></td></tr></table></figure>



<h4 id="下载远程端版本，但不合并到HEAD中："><a href="#下载远程端版本，但不合并到HEAD中：" class="headerlink" title="下载远程端版本，但不合并到HEAD中："></a>下载远程端版本，但不合并到HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>



<h4 id="下载远程端版本，并自动与HEAD版本合并："><a href="#下载远程端版本，并自动与HEAD版本合并：" class="headerlink" title="下载远程端版本，并自动与HEAD版本合并："></a>下载远程端版本，并自动与HEAD版本合并：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote pull &lt;remote&gt;&lt;url&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将远程端版本合并到本地版本中："><a href="#将远程端版本合并到本地版本中：" class="headerlink" title="将远程端版本合并到本地版本中："></a>将远程端版本合并到本地版本中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>



<h4 id="以rebase方式将远端分支与本地合并："><a href="#以rebase方式将远端分支与本地合并：" class="headerlink" title="以rebase方式将远端分支与本地合并："></a>以rebase方式将远端分支与本地合并：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt;&lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将本地版本发布到远程端："><a href="#将本地版本发布到远程端：" class="headerlink" title="将本地版本发布到远程端："></a>将本地版本发布到远程端：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push remote &lt;remote&gt;&lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除远程端分支："><a href="#删除远程端分支：" class="headerlink" title="删除远程端分支："></a>删除远程端分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</span><br></pre></td></tr></table></figure>



<h4 id="发布标签"><a href="#发布标签" class="headerlink" title="发布标签:"></a>发布标签:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure>



<h3 id="合并与重置-Rebase"><a href="#合并与重置-Rebase" class="headerlink" title="合并与重置(Rebase)"></a>合并与重置(Rebase)</h3><h4 id="将分支合并到当前HEAD中："><a href="#将分支合并到当前HEAD中：" class="headerlink" title="将分支合并到当前HEAD中："></a>将分支合并到当前HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将当前HEAD版本重置到分支中"><a href="#将当前HEAD版本重置到分支中" class="headerlink" title="将当前HEAD版本重置到分支中:"></a>将当前HEAD版本重置到分支中:</h4><blockquote>
<p>注：请勿重置已发布的提交!</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="退出重置"><a href="#退出重置" class="headerlink" title="退出重置:"></a>退出重置:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure>



<h4 id="解决冲突后继续重置："><a href="#解决冲突后继续重置：" class="headerlink" title="解决冲突后继续重置："></a>解决冲突后继续重置：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>



<h4 id="使用配置好的merge-tool-解决冲突："><a href="#使用配置好的merge-tool-解决冲突：" class="headerlink" title="使用配置好的merge tool 解决冲突："></a>使用配置好的merge tool 解决冲突：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>



<h4 id="在编辑器中手动解决冲突后，标记文件为已解决冲突："><a href="#在编辑器中手动解决冲突后，标记文件为已解决冲突：" class="headerlink" title="在编辑器中手动解决冲突后，标记文件为已解决冲突："></a>在编辑器中手动解决冲突后，标记文件为已解决冲突：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;resolved-file&gt;</span><br><span class="line"></span><br><span class="line">git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="合并提交："><a href="#合并提交：" class="headerlink" title="合并提交："></a>合并提交：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i &lt;commit-just-before-first&gt;</span><br></pre></td></tr></table></figure>



<h4 id="把上面的内容替换为下面的内容："><a href="#把上面的内容替换为下面的内容：" class="headerlink" title="把上面的内容替换为下面的内容："></a>把上面的内容替换为下面的内容：</h4><h4 id="原内容："><a href="#原内容：" class="headerlink" title="原内容："></a>原内容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line">pick &lt;commit_id2&gt;</span><br><span class="line"></span><br><span class="line">pick &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure>



<h4 id="替换为："><a href="#替换为：" class="headerlink" title="替换为："></a>替换为：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line"></span><br><span class="line">squash &lt;commit_id2&gt;</span><br><span class="line"></span><br><span class="line">squash &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure>



<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><h4 id="放弃工作目录下的所有修改："><a href="#放弃工作目录下的所有修改：" class="headerlink" title="放弃工作目录下的所有修改："></a>放弃工作目录下的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>



<h4 id="移除缓存区的所有文件（i-e-撤销上次git-add）"><a href="#移除缓存区的所有文件（i-e-撤销上次git-add）" class="headerlink" title="移除缓存区的所有文件（i.e. 撤销上次git add）:"></a>移除缓存区的所有文件（i.e. 撤销上次git add）:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure>



<h4 id="放弃某个文件的所有本地修改："><a href="#放弃某个文件的所有本地修改：" class="headerlink" title="放弃某个文件的所有本地修改："></a>放弃某个文件的所有本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h4 id="重置一个提交（通过创建一个截然不同的新提交）"><a href="#重置一个提交（通过创建一个截然不同的新提交）" class="headerlink" title="重置一个提交（通过创建一个截然不同的新提交）"></a>重置一个提交（通过创建一个截然不同的新提交）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："><a href="#将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：" class="headerlink" title="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："></a>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="用远端分支强制覆盖本地分支："><a href="#用远端分支强制覆盖本地分支：" class="headerlink" title="用远端分支强制覆盖本地分支："></a>用远端分支强制覆盖本地分支：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;remote/branch&gt; e.g., upstream/master, origin/my-feature</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："><a href="#将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："></a>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："><a href="#将HEAD重置到上一次提交的版本，并保留未提交的本地修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："></a>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure>



<h4 id="删除添加-gitignore文件前错误提交的文件："><a href="#删除添加-gitignore文件前错误提交的文件：" class="headerlink" title="删除添加.gitignore文件前错误提交的文件："></a>删除添加.gitignore文件前错误提交的文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &quot;remove xyz file&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git-Flow"></a>Git-Flow</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%AE%89%E8%A3%85">安装</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%BC%80%E5%A7%8B">开始</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E7%89%B9%E6%80%A7">特性</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E5%81%9A%E4%B8%80%E4%B8%AArelease%E7%89%88%E6%9C%AC">做一个release版本</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E7%B4%A7%E6%80%A5%E4%BF%AE%E5%A4%8D">紧急修复</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#commands">Commands</a></li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>你需要有一个可以工作的 git 作为前提。</li>
<li>Git     flow 可以工作在 OSX, Linux 和 Windows之下</li>
</ul>
<h5 id="OSX-Homebrew"><a href="#OSX-Homebrew" class="headerlink" title="OSX Homebrew:"></a>OSX Homebrew:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git-flow</span><br></pre></td></tr></table></figure>

<h5 id="OSX-Macports"><a href="#OSX-Macports" class="headerlink" title="OSX Macports:"></a>OSX Macports:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port install git-flow</span><br></pre></td></tr></table></figure>



<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install git-flow</span><br></pre></td></tr></table></figure>



<h5 id="Windows-Cygwin"><a href="#Windows-Cygwin" class="headerlink" title="Windows (Cygwin):"></a>Windows (Cygwin):</h5><p>安装 git-flow, 你需要 wget 和 util-linux。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure>



<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><ul>
<li>为了自定义你的项目，Git flow 需要初始化过程。</li>
<li>使用     git-flow，从初始化一个现有的 git 库内开始。</li>
<li>初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure>



<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>为即将发布的版本开发新功能特性。</li>
<li>这通常只存在开发者的库中。</li>
</ul>
<h4 id="创建一个新特性"><a href="#创建一个新特性" class="headerlink" title="创建一个新特性:"></a>创建一个新特性:</h4><p>下面操作创建了一个新的feature分支，并切换到该分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature start MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="完成新特性的开发"><a href="#完成新特性的开发" class="headerlink" title="完成新特性的开发:"></a>完成新特性的开发:</h4><p>完成开发新特性。这个动作执行下面的操作：</p>
<ol>
<li>合并 MYFEATURE     分支到 ‘develop’</li>
<li>删除这个新特性分支</li>
<li>切换回     ‘develop’ 分支</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature finish MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="发布新特性"><a href="#发布新特性" class="headerlink" title="发布新特性:"></a>发布新特性:</h4><p>你是否合作开发一项新特性？ 发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature publish MYFEATURE</span><br></pre></td></tr></table></figure>

<p>取得一个发布的新特性分支:</p>
<p>取得其它用户发布的新特性分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature pull origin MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="追溯远端上的特性"><a href="#追溯远端上的特性" class="headerlink" title="追溯远端上的特性:"></a>追溯远端上的特性:</h4><p>通过下面命令追溯远端上的特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow feature track MYFEATURE</span><br></pre></td></tr></table></figure>



<h4 id="做一个release版本"><a href="#做一个release版本" class="headerlink" title="做一个release版本"></a>做一个release版本</h4><ul>
<li>支持一个新的用于生产环境的发布版本。</li>
<li>允许修正小问题，并为发布版本准备元数据。</li>
</ul>
<h4 id="开始创建release版本"><a href="#开始创建release版本" class="headerlink" title="开始创建release版本:"></a>开始创建release版本:</h4><ul>
<li>开始创建release版本，使用 git flow release 命令。</li>
<li>‘release’     分支的创建基于 ‘develop’ 分支。</li>
<li>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。</li>
<li>这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。</li>
</ul>
<p>git flow release start RELEASE [BASE]</p>
<p>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow release publish RELEASE</span><br></pre></td></tr></table></figure>

<p>(你可以通过 git flow release track RELEASE 命令追溯远端的 release 版本)</p>
<h4 id="完成-release-版本"><a href="#完成-release-版本" class="headerlink" title="完成 release 版本:"></a>完成 release 版本:</h4><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：</p>
<ol>
<li>归并     release 分支到 ‘master’ 分支。</li>
<li>用     release 分支名打 Tag</li>
<li>归并     release 分支到 ‘develop’</li>
<li>移除     release 分支。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow release finish RELEASE</span><br></pre></td></tr></table></figure>

<p>不要忘记使用git push –tags将tags推送到远端</p>
<h4 id="紧急修复"><a href="#紧急修复" class="headerlink" title="紧急修复"></a>紧急修复</h4><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>
<p>开始 git flow 紧急修复:</p>
<p>像其它 git flow 命令一样, 紧急修复分支开始自：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow hotfix start VERSION [BASENAME]</span><br></pre></td></tr></table></figure>

<p>VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]`为finish release时填写的版本号</p>
<h4 id="完成紧急修复"><a href="#完成紧急修复" class="headerlink" title="完成紧急修复:"></a>完成紧急修复:</h4><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git flow hotfix finish VERSION</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4></li>
<li><ul>
<li><p>有人说是这3个单词的缩写</p>
</li>
<li><ul>
<li>global 全局</li>
<li>information 信息</li>
<li>track 跟踪器</li>
</ul>
</li>
<li><p>版本控制工具</p>
</li>
</ul>
</li>
<li></li>
<li><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4></li>
<li><ul>
<li><p>Git和Linux之父，Linus</p>
</li>
<li><p>Github让Git变得更易用</p>
</li>
<li><p>官网</p>
</li>
<li><ul>
<li><p>浏览器中使用</p>
</li>
<li><ul>
<li>commit（当前版本）</li>
<li>在提交版本的时候，还保存了父版本号，parent</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端</p>
</li>
<li><p>客户端操作</p>
</li>
<li><ul>
<li><p>简单分支操作</p>
</li>
<li><ul>
<li>master分支（一般是放到服务器跑的代码）。master分支是默认分支，是不可以被删除的。</li>
<li>例如创建idea分支，用于开发测试性代码是非常方便的，不会对原来分支的有影响。</li>
<li>当前分支是不能被删除的，要想删除idea分支，就要切换到其他分支，然后删除idea分支</li>
<li>如果只想删除github上的idea分支，本地的idea分支不删除的话，选择unpublic，而不是使用delete，如果使用delete，就会将本地和github的都删除。</li>
<li>可以在github修改默认分支，不是master，但一般不做这样的修改。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h5><p><a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands.png">https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands.png</a></p>
<h5 id="Git-flow-schema"><a href="#Git-flow-schema" class="headerlink" title="Git flow schema"></a>Git flow schema</h5><p><a href="https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands-without-flow.png">https://github.com/flyhigher139/Git-Cheat-Sheet/blob/master/Img/git-flow-commands-without-flow.png</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/2019/08/21/CSS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><ol>
<li>id选择器</li>
<li>类选择器</li>
<li>标签选择器</li>
<li>相邻选择器（+）</li>
<li>子选择器（&gt;）</li>
<li>后代选择器（li a)</li>
<li>通配符选择器（*）</li>
<li>属性选择器（button[disabled=”true”])</li>
<li>伪类选择器（a:hover、li:nth-child）表示一种状态</li>
<li>伪元素选择器（li:before、”:after”、”:first-letter”、”:first-line”、”:selecton”）表示文档某个部分的表现</li>
</ol>
<blockquote>
<p>在CSS3规范中，为了区别伪元素和伪类，CSS3建议伪类用单冒号“:“，伪元素用双冒号”::“。</p>
</blockquote>
<h4 id="可继承的样式"><a href="#可继承的样式" class="headerlink" title="可继承的样式"></a>可继承的样式</h4><ul>
<li>font-size</li>
<li>font-family</li>
<li>color</li>
</ul>
<h4 id="不可继承的样式"><a href="#不可继承的样式" class="headerlink" title="不可继承的样式"></a>不可继承的样式</h4><ul>
<li>border</li>
<li>padding</li>
<li>margin</li>
<li>width</li>
<li>height</li>
</ul>
<blockquote>
<p>注：与字体相关的样式通常可以继承，与尺寸相关的样式通常不能继承</p>
</blockquote>
<p>博客：<a href="https://blog.csdn.net/weixin_51109349/article/details/109580508">css那些样式可以继承</a></p>
<h4 id="CSS优先级排序"><a href="#CSS优先级排序" class="headerlink" title="CSS优先级排序"></a>CSS优先级排序</h4><p>!important&gt;style行内样式&gt; id<a href="https://so.csdn.net/so/search?q=%E9%80%89%E6%8B%A9%E5%99%A8&spm=1001.2101.3001.7020">选择器</a>（权重100）&gt; 类选择器（权重10）&gt;标签（权重1）&gt;通配符&gt; 继承 &gt; 浏览器默认样式(最低)。同类别动样式中，后面的会覆盖前面的</p>
<h4 id="初始化CSS"><a href="#初始化CSS" class="headerlink" title="初始化CSS"></a>初始化CSS</h4><p>最简单的初始化方法就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;margin: 0; padding: 0;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    margin: -100px 0 0 -200px;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    /* 便于看效果 */</span><br><span class="line">    background-color: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="display的值和作用"><a href="#display的值和作用" class="headerlink" title="display的值和作用"></a><a href="https://blog.csdn.net/CM22222/article/details/115555369">display的值和作用</a></h4><h4 id="左右固定宽度，中间自适应实现3拦布局"><a href="#左右固定宽度，中间自适应实现3拦布局" class="headerlink" title="左右固定宽度，中间自适应实现3拦布局"></a>左右固定宽度，中间自适应实现3拦布局</h4><p>双飞翼布局或两翼齐飞布局</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 中间自适应 --&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 左边固定宽带 --&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 右边固定宽度 --&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container div&#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    padding: 0 200px;</span><br><span class="line">&#125;</span><br><span class="line">.main,</span><br><span class="line">.left,</span><br><span class="line">.right&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">.left,</span><br><span class="line">.right&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.main&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    left: -200px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    margin-left: -200px;</span><br><span class="line">    left: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要想使元素浮动，必须为元素设置一个宽度</p>
</blockquote>
<h4 id="在高效CSS时需要考虑的问题"><a href="#在高效CSS时需要考虑的问题" class="headerlink" title="在高效CSS时需要考虑的问题"></a>在高效CSS时需要考虑的问题</h4><ol>
<li>类型选择器的速度，id最快，*最慢</li>
<li>不要用标签限制ID选择器（如ul#main，ID已经是唯一的，不需要tag来限制，这样做会让选择器变慢）</li>
<li>后代选择器最糟糕（html body ul li a是很低效的）</li>
<li>CSS3选择器</li>
<li>ID选择器速度最快，但都用ID选择器，会降低代码的可读性和可维护性</li>
</ol>
<h4 id="display-none和visibility-hidden的区别"><a href="#display-none和visibility-hidden的区别" class="headerlink" title="display:none和visibility:hidden的区别"></a>display:none和visibility:hidden的区别</h4><ul>
<li>display:none—不分配空间，脱离文档流</li>
<li>visibility:hidden—在文档流中仍保留原来的空间</li>
</ul>
<h4 id="before-after伪元素中content属性"><a href="#before-after伪元素中content属性" class="headerlink" title=":before/:after伪元素中content属性"></a>:before/:after伪元素中content属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    counter-reset: chapter;</span><br><span class="line">&#125;</span><br><span class="line">ul li::before&#123;</span><br><span class="line">    content: &quot;第&quot;counter(chapter)&quot;章&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">    counter-increment: chapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第1章</span><br><span class="line">第2章</span><br><span class="line">第3章</span><br></pre></td></tr></table></figure>

<blockquote>
<p>放置元素的前后，可插入文本、图像、引号，并可以结合计数器，为页面元素插入编号</p>
</blockquote>
<h4 id="定义高度很小的容器"><a href="#定义高度很小的容器" class="headerlink" title="定义高度很小的容器"></a>定义高度很小的容器</h4><ol>
<li><code>overflow:hidden</code></li>
<li><code>font-size:容器高度px</code></li>
</ol>
<h4 id="在图片下方设置几像素的空白间隙"><a href="#在图片下方设置几像素的空白间隙" class="headerlink" title="在图片下方设置几像素的空白间隙"></a>在图片下方设置几像素的空白间隙</h4><ul>
<li>定义img为<code>display:block</code></li>
<li>定义父容器为f<code>ont-size:0</code>;</li>
</ul>
<h4 id="超出宽度的文字显示为省略号"><a href="#超出宽度的文字显示为省略号" class="headerlink" title="超出宽度的文字显示为省略号"></a>超出宽度的文字显示为省略号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  overflow:hidden;</span><br><span class="line">  width:**px;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使英文单词发生词内断行"><a href="#使英文单词发生词内断行" class="headerlink" title="使英文单词发生词内断行"></a>使英文单词发生词内断行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">word-wrap:break-word;</span><br></pre></td></tr></table></figure>

<h4 id="实现-lE6-下的-position-fixed"><a href="#实现-lE6-下的-position-fixed" class="headerlink" title="实现 lE6 下的 position:fixed"></a>实现 lE6 下的 position:fixed</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html (overflow: hidden; )</span><br><span class="line">body (overflow: auto;height: 100%;&#125;</span><br><span class="line">•fixed(position:fixed; position: absolute;left:0;top: 0;padding: 10px;background: #000;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="让-min-height-兼容-IE6"><a href="#让-min-height-兼容-IE6" class="headerlink" title="让 min-height 兼容 IE6"></a>让 min-height 兼容 IE6</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.min-heicht&#123;</span><br><span class="line">  min-height:100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="已知高度的容器在页面中水平垂直居中"><a href="#已知高度的容器在页面中水平垂直居中" class="headerlink" title="已知高度的容器在页面中水平垂直居中"></a>已知高度的容器在页面中水平垂直居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: red;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin:-100px 0 0 -100px;</span><br><span class="line">  /*或者 marign:-100px* /</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="px和em-的区别"><a href="#px和em-的区别" class="headerlink" title="px和em 的区别"></a>px和em 的区别</h4><p>px和en都是长度单位，两者的区别是：px的值是固定的，指定为多少就是多少，计算比较容易；em 的值不是固定的，是相对于容器宇体的大小，并且en 会继承父级元素的字体大小</p>
<p>浏览器的默认字体高都是16px，所以未经调整的浏览器都符合1em = 16px，那么12px = 0.75em，10px = 0.625em.</p>
<p>与em对应的另一个长度单位是rem，是指相对于根元素（通常是HTML 元素）字体的大小</p>
<h4 id="Sass报错"><a href="#Sass报错" class="headerlink" title="Sass报错"></a>Sass报错</h4><p>如果按照了sass，使用<code>&lt;style lang=&quot;scss&quot; scoped&gt;</code>时报错，原因可能是安装的sass版本是最新的，版本太高的原因，安装以下两个版本，再使用sass就不会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;node-sass&quot;: &quot;^4.12.0&quot;,</span><br><span class="line">&quot;sass-loader&quot;: &quot;^8.0.2&quot;,</span><br></pre></td></tr></table></figure>

<h4 id="优雅降级与渐进增强的区别"><a href="#优雅降级与渐进增强的区别" class="headerlink" title="优雅降级与渐进增强的区别"></a>优雅降级与渐进增强的区别</h4><p><code>优雅降级graceful degradation</code> 是指一开始就构建完整的功能，然后再针对低版本浏览器进行兼容<br><code>渐进增强 progressive enhancement </code>是指针对低版本浏览器构建页西，保证最基本的功能，然后再针对高级浏览器进行效果、交互等政进并追加功能，以达到更好的用户体验</p>
<p>两者的区别如下：</p>
<ol>
<li>优雅降级从复杂的现状开始，并试图减少用户体验的供给。</li>
<li>渐进增强则从一个非常基础并且能够起作用的版本开始，并不断扩充，以适应未来环境的需要</li>
<li>降级（功能衰減）意味着往回看，而渐进增强则意味着朝前看，同时保证其根基处于安全地带</li>
</ol>
<h4 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h4><ul>
<li>JPG：压缩率高，文件小，最常用。</li>
<li>PNG：支持无损压缩，色彩损失小，保真度高，文件稍大。</li>
<li>GIF：支持动画品示，但只支持256 色显示，目前已经被 Flash 大量取代。</li>
</ul>
<h4 id="CSS的content-属性的作用和应用"><a href="#CSS的content-属性的作用和应用" class="headerlink" title="CSS的content 属性的作用和应用"></a>CSS的content 属性的作用和应用</h4><p>作用：CSS 的content 属性专门应用在before/after 伪元素上，用于插入生成的内容。</p>
<p>应用：最常见的应用是利用伪类清除浮动。</p>
<h4 id="对行内元素设置-margin-top-和margin-bottom-不起作用"><a href="#对行内元素设置-margin-top-和margin-bottom-不起作用" class="headerlink" title="对行内元素设置 margin-top 和margin-bottom 不起作用"></a>对行内元素设置 margin-top 和margin-bottom 不起作用</h4><p>对行内元素设置 margin-top 和margin-bottom 不起作用（需要注意行内元素的替换元素 img、input，它们是行内元素，但是可以设置它们的宽度和高度，并且margin 属性也对它们起作用，margin-top 和margin-botton 有<br>着类似于 inline-block 的行为）。</p>
<h4 id="div-css-的布局较-table-布局的优点"><a href="#div-css-的布局较-table-布局的优点" class="headerlink" title="div+css 的布局较 table 布局的优点"></a>div+css 的布局较 table 布局的优点</h4><p>（1）改版的时候更方便，只须改动CSS文件。<br>（2）页面加载速度更快、结构清晰、页面简洁。<br>（3）表现与结构分离<br>（4）搜索引擎优化（SEO）更友好，排名更靠前。</p>
<h4 id="各种规范"><a href="#各种规范" class="headerlink" title="各种规范"></a>各种规范</h4><ul>
<li>BFC(Block Formatting Context）指块级格式化上下文</li>
<li>IFC (Inline Formatting Context）指内联格式化上下文</li>
<li>GFC ( GridLayout Formatting Context）指网格布局格式化上下文</li>
<li>FFC ( Flex Formatting Context）指自适应格式化上下文</li>
</ul>
<h4 id="访问超链接后-hover-样式就不出现的原因及解决方法"><a href="#访问超链接后-hover-样式就不出现的原因及解决方法" class="headerlink" title="访问超链接后 hover 样式就不出现的原因及解决方法"></a>访问超链接后 hover 样式就不出现的原因及解决方法</h4><p>因为访问过的超链接样式覆盖了原有的 hover 和active 伪类选择器样式，解决方法是将 CSS 属性的排列顺序改为L-&gt;V-&gt;H-&gt;A (link, visited, hover, active )。</p>
<h4 id="rgba-和-opacity-的透明效果的区别"><a href="#rgba-和-opacity-的透明效果的区别" class="headerlink" title="rgba()和 opacity 的透明效果的区别"></a>rgba()和 opacity 的透明效果的区别</h4><p>gba()和 opacity 都能实现透明效果，但它们最大的不同是opacity 作用于元素，并且可以设置元素内所有内容的透明度；而rgba()只作用于元素的颜色或其背景色（设置rgba 透明的元素的子元素不会继承透明效果)。</p>
<h4 id="CSS-中可以让文字在垂直和水平方向上重叠的两个属性"><a href="#CSS-中可以让文字在垂直和水平方向上重叠的两个属性" class="headerlink" title="CSS 中可以让文字在垂直和水平方向上重叠的两个属性"></a>CSS 中可以让文字在垂直和水平方向上重叠的两个属性</h4><p>垂直方向的属性是line-height。水平方向的属性是letter-spacing。</p>
<h4 id="letter-spacing-的妙用"><a href="#letter-spacing-的妙用" class="headerlink" title="letter-spacing 的妙用"></a>letter-spacing 的妙用</h4><p>可以用于消除 inline-block 元素间的换行符空格间隙</p>
<h4 id="使DOM元素不显示在浏览器可视范围内的CSS属性"><a href="#使DOM元素不显示在浏览器可视范围内的CSS属性" class="headerlink" title="使DOM元素不显示在浏览器可视范围内的CSS属性"></a>使DOM元素不显示在浏览器可视范围内的CSS属性</h4><ul>
<li><p>设置 display 属性为none，</p>
</li>
<li><p>设置visibility 属性为hidden。</p>
</li>
<li><p>技巧性的方式如下：</p>
<ul>
<li>设置宽高为0，</li>
<li>透明度为0，</li>
<li>设置z-index 位置为-1000。</li>
</ul>
</li>
</ul>
<h4 id="浏览器标淮模式和怪异模式之间的区别"><a href="#浏览器标淮模式和怪异模式之间的区别" class="headerlink" title="浏览器标淮模式和怪异模式之间的区别"></a>浏览器标淮模式和怪异模式之间的区别</h4><p>它们的区别是盒子模型的渲染模式不同</p>
<p>可以使用 window.top.document.compatMode 判断当前模式为何种模式。<br>结果为 BackCompat，表示怪异模式．<br>结果为 CSSICompat，表示标准模式</p>
<h4 id="避免文档流中的空白符合并现象"><a href="#避免文档流中的空白符合并现象" class="headerlink" title="避免文档流中的空白符合并现象"></a>避免文档流中的空白符合并现象</h4><p>空白符合并是标淮文档流的特征之一，可以通过设置white-spac 修改这一特征，<br>属性值如下。</p>
<ul>
<li>pre 表示不会合并空自符，渲染换行符，不会自动换行，相当于pre 元素。</li>
<li>pre-wrap 表示不会合并空白符，渲染换行符，自动换行。</li>
<li>pre-line 表示合并空白符，渲染换行符，自动换行。</li>
<li>nowrap 表示合并空白符，不会渲染换行符，不会自动换行。</li>
<li>normal 表示默认值，按照文档流特点渲染，合并空白符，不会渲染换行符，自<br>动换行.</li>
</ul>
<h4 id="透明度具有继承性，如何取消透明度的继承"><a href="#透明度具有继承性，如何取消透明度的继承" class="headerlink" title="透明度具有继承性，如何取消透明度的继承"></a>透明度具有继承性，如何取消透明度的继承</h4><p>使用rgba 给元素的背景设置透明度的方式，来替代使用 opacity 设置元素透明度的方式，解決子元素继承父元素透明度的问题</p>
<h4 id="CSS-中，自适应的单位"><a href="#CSS-中，自适应的单位" class="headerlink" title="CSS 中，自适应的单位"></a>CSS 中，自适应的单位</h4><ul>
<li>百分比：％</li>
<li>相对于视口宽度的单位：vw</li>
<li>相对于视口高度的单位：vh</li>
<li>相对于视口宽度或者高度（取决于哪个小）的单位：vm</li>
<li>相对于父元素宇体大小的单位：em</li>
<li>相对于根元素字体大小的单位：rem</li>
</ul>
<h4 id="外边距重叠，重叠的结果"><a href="#外边距重叠，重叠的结果" class="headerlink" title="外边距重叠，重叠的结果"></a>外边距重叠，重叠的结果</h4><h4 id="引入字体图标"><a href="#引入字体图标" class="headerlink" title="引入字体图标"></a>引入字体图标</h4><ol>
<li><p>使用cdn链接，在public目录下的<code>index.html</code>中引入<code>iconfont字体图标链接</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_907707_neo27xdny5.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录账号——资源管理——我的项目——选中项目——选中“Font class”——复制链接——放到<code>public/index.html</code>    </p>
</blockquote>
</li>
<li><p>在页面中调用，要加上iconfont</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-IOS&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="前端轻松入门-CSS"><a href="#前端轻松入门-CSS" class="headerlink" title="前端轻松入门-CSS"></a>前端轻松入门-CSS</h3><h4 id="1-1CSS的定义"><a href="#1-1CSS的定义" class="headerlink" title="1.1CSS的定义"></a>1.1CSS的定义</h4><p>什么是CSS？</p>
<p>CSS指层叠样式表(Cascading Style Sheets)</p>
<p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>
<ul>
<li>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</li>
<li>CSS就是控制页面布局和样式CSS的版本：2.1→3.0</li>
<li>类比例子：奶油蛋糕、画画</li>
<li>HTML和CSS的关系：HTML结构层负责从语义的角度搭建页面结构</li>
<li>CSS样式层负责从审美的角度美化页面</li>
<li>JavaScript行为层负责从交互的角度提升用户体验</li>
</ul>
<h4 id="1-2引入CSS的方式"><a href="#1-2引入CSS的方式" class="headerlink" title="1.2引入CSS的方式"></a>1.2引入CSS的方式</h4><p>所有的标签都有一个默认样式，我们称为浏览器样式，或者默认样式</p>
<h4 id="1-2-1行内样式"><a href="#1-2-1行内样式" class="headerlink" title="1.2.1行内样式"></a>1.2.1行内样式</h4><p>行内样式，是通过在标签中设置style属性来达到实现控制标签的样式的效果。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;color: red;&quot;&gt;传智播客-前端与移动开发学院的CSS基础视频教程&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>Style属性中，可以设置多条的CSS样式。</p>
<h4 id="1-2-2嵌入样式"><a href="#1-2-2嵌入样式" class="headerlink" title="1.2.2嵌入样式"></a>1.2.2嵌入样式</h4><p>在head标签中，嵌套一个style标签，在style标签中可以书写CSS的样式内容。Style标签有一个属性type属性，默认值就是text/css,可以省略。例如demo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">  p &#123;</span><br><span class="line">    color: green; /*设置前景色，也就字体的颜色*/</span><br><span class="line">    background-color: silver;</span><br><span class="line">  &#125;</span><br><span class="line">  ul &#123;</span><br><span class="line">  	background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-3CSS注释"><a href="#1-3CSS注释" class="headerlink" title="1.3CSS注释"></a>1.3CSS注释</h4><p>CSS的注释语法/<em>注释的内容</em>/注释不能嵌套，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*注释的*/内容*/</span><br><span class="line">/* dsfsdfsd /* */ */</span><br></pre></td></tr></table></figure>

<p>多行注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">放多行的注释内容1</span><br><span class="line"></span><br><span class="line">放多行的注释内容2</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p>一般用于模块的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* S导航条开始*/</span><br><span class="line">ul &#123;</span><br><span class="line">	background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">/* E导航条结束*/</span><br></pre></td></tr></table></figure>

<p>文件头的注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* author:传智播客前端与移动开发学院</span><br><span class="line">* des：当前文件用于....</span><br><span class="line">* date：</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="彻底搞懂行高"><a href="#彻底搞懂行高" class="headerlink" title="彻底搞懂行高"></a>彻底搞懂行高</h3><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E7%AC%94%E8%AE%B0/1.png" alt="彻底搞懂行高"></p>
<h4 id="CSS的定义"><a href="#CSS的定义" class="headerlink" title="CSS的定义"></a>CSS的定义</h4><h5 id="什么是CSS？"><a href="#什么是CSS？" class="headerlink" title="什么是CSS？"></a>什么是CSS？</h5><ul>
<li><p>CSS指层叠样式表(Cascading Style Sheets)</p>
</li>
<li><p>CSS通常称为CSS样式表或层叠样式表(级联样式表)，主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等)、图片的外形（宽高、边框样式、边距等）以及版面的布局等<code>外观显示样式</code>。</p>
</li>
<li><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p>
</li>
<li><p>CSS就是控制页面布局和样式</p>
</li>
<li><p>CSS的版本：2.1→3.0</p>
</li>
<li><p>类比例子，奶油蛋糕、画画</p>
</li>
</ul>
<h5 id="HTML和CSS的关系："><a href="#HTML和CSS的关系：" class="headerlink" title="HTML和CSS的关系："></a>HTML和CSS的关系：</h5><ul>
<li>HTML结构层         负责从语义的角度搭建页面结构</li>
<li>CSS样式层             负责从审美的角度美化页面</li>
<li>JavaScript行为层      负责从交互的角度提升用户体验</li>
</ul>
<h4 id="如何编写CSS"><a href="#如何编写CSS" class="headerlink" title="如何编写CSS"></a>如何编写CSS</h4><h5 id="如何编写CSS样式"><a href="#如何编写CSS样式" class="headerlink" title="如何编写CSS样式?"></a>如何编写CSS样式?</h5><ul>
<li>缺省样式（浏览器样式)<ul>
<li>可以通过设置修改浏览器的样式。</li>
<li>所有的标签都有默认的样式：<code>h1 ,h2,p, div,span,ul</code>等</li>
</ul>
</li>
</ul>
<ul>
<li><p>内联样式style属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span style=&quot;color:red;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内嵌（嵌入，内部)样式，head标签中添加style标签。<br><code>在head标签中添加style标签</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt; p &#123;color:red&#125;&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部样式，外联样式(link)</p>
<ul>
<li><p>通过link标签引入css样式文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;a.css&quot;&quot; &gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>type属性：只有一个选项，“text/css”，指定当前为css文本文件</p>
</li>
<li><p>rel：指定当前HTML文件与CSS文件的关系是样式表。</p>
</li>
<li><p> href：指定外联样式表的路径</p>
</li>
</ul>
</li>
<li><p>导入样式:</p>
<ul>
<li>@impot，导入样式会导致，css文件不能并行下载。不推荐使用。</li>
<li>导入样式的书写必须在所有的css规则书写之前</li>
</ul>
</li>
</ul>
<h4 id="Emmate语法："><a href="#Emmate语法：" class="headerlink" title="Emmate语法："></a>Emmate语法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ul(li&gt;a[href=&quot;#&quot;])*3</span><br></pre></td></tr></table></figure>

<h4 id="浏览器可以设置默认样式"><a href="#浏览器可以设置默认样式" class="headerlink" title="浏览器可以设置默认样式"></a>浏览器可以设置默认样式</h4><p>所有标签都有默认样式，我们称为浏览器样式，或默认样式。</p>
<h4 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E7%AC%94%E8%AE%B0/2.png" alt="css"></p>
<h4 id="css注释"><a href="#css注释" class="headerlink" title="css注释"></a>css注释</h4><ul>
<li>CSS的注释格式：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 注释内容 */</span><br></pre></td></tr></table></figure>

<ul>
<li>可以同时注释多行语句比如:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 单行注释 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 多行注释</span><br><span class="line">多行注释</span><br><span class="line">多行注释*/</span><br><span class="line"></span><br><span class="line">// 常用用法，不是语法</span><br><span class="line">/* </span><br><span class="line">* 文件声明注释</span><br><span class="line">* 作者：winney</span><br><span class="line">* 目的：演示注释的用法</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* S 导航条开始 */</span><br><span class="line">ul&#123;</span><br><span class="line">	background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">/* E 导航条结束 */</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- S 导航条开始 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;&lt;a href=&quot;#&quot;&gt;上海&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;&lt;a href=&quot;#&quot;&gt;北京&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;&lt;a href=&quot;#&quot;&gt;广州&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!-- E 导航条结束 --&gt;</span><br></pre></td></tr></table></figure>

<h5 id="文件头的注释"><a href="#文件头的注释" class="headerlink" title="文件头的注释"></a>文件头的注释</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* </span><br><span class="line">* author: winney</span><br><span class="line">* des：当前文件用于...</span><br><span class="line">* date：....</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h4 id="CSS选择器综述"><a href="#CSS选择器综述" class="headerlink" title="CSS选择器综述"></a>CSS选择器综述</h4><p>所有标签选择器：<code>*&#123;&#125;</code></p>
<p>标签选择器：<code>p&#123;&#125;、div&#123;&#125;</code></p>
<p>ID选择器：<code>#head&#123;&#125;</code></p>
<p>类选择器：<code>.head&#123;&#125;</code></p>
<p>层级选择器</p>
<p>分组选择器</p>
<p>属性选择器</p>
<p>子元素选择器</p>
<p>相邻兄弟选择器</p>
<p>伪类选择器</p>
<p>伪元素选择器</p>
<h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;属性1:属性值1;属性2:属性值2;属性3:属性值3;&#125;</span><br></pre></td></tr></table></figure>

<p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0;	/* 定义外边距 */</span><br><span class="line">    padding: 0;	/* 定义内边距 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通配符的穿透力很强，优先级高于继承的样式，会覆盖继承的样式。<code>一般不用</code>。</p>
<h4 id="css复合选择器"><a href="#css复合选择器" class="headerlink" title="css复合选择器"></a>css复合选择器</h4><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，具体如下</p>
<h5 id="1、标签指定式选择器-即…-又…"><a href="#1、标签指定式选择器-即…-又…" class="headerlink" title="1、标签指定式选择器(即….又…)"></a>1、标签指定式选择器(即….又…)</h5><p>标签指定式选择器又称交集选择器，由两个选择器构成，其中第一个为标记选择器，第二个为class选择器或id选择器，两个选择器之间不能有空格，如<code>h3.special</code>或<code>p#one</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h3.class &#123;color:red&#125;   // h3:标记选择器， class：类别选择器</span><br></pre></td></tr></table></figure>

<h5 id="3、并集选择器"><a href="#3、并集选择器" class="headerlink" title="3、并集选择器"></a>3、并集选择器</h5><p>并集选择器是各个选择器通过逗号连接而成的，任何形式的选择器（包括标记选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.class, h3&#123;color:red; font-size:25px;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul>
<li><p>简单属性选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1[class]&#123;color: red;&#125;		// 选择所有拥有class属性的h1标签</span><br><span class="line">h1[class][id]&#123;color: red;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据属性值选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p[id=&quot;aside&quot;]&#123;color: red;&#125;	 // 根据属性名相等选择</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性名全包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p[class~=&quot;a&quot;]&#123;color: red;&#125;  // 只要包含属性，就被选择。ie6不支持</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性模糊选择</p>
<p>选择具有alt属性且属性值为以val开头（结尾）的字符串的E元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E[alt^=&quot;Val&quot;]&#123;sRules&#125;</span><br><span class="line">E[alt$=&quot;Val&quot;]&#123;sRules&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性模糊匹配包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E[alt*=&quot;Val&quot;]&#123;sRules&#125;  // 选择具有alt属性且属性值为包含val的字符串的E元素</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="CSS伪类"><a href="#CSS伪类" class="headerlink" title="CSS伪类"></a>CSS伪类</h4><p>伪类：元素的某个状态</p>
<ul>
<li><p>:link<br>伪类将应用于未被访问过的链接。lE6不兼容，解决此问题，直接使用a标签。</p>
</li>
<li><p>:hover<br>伪类将应用于有鼠标指针悬停于其上的元素。在IE6只能应用于a连接，lE7+所有元素都兼容。</p>
</li>
<li><p>:active<br>伪类将应用于被激活的元素，如被点击的链接、被按下的按钮等。</p>
</li>
<li><p>:visited<br>伪类将应用于已经被访问过的链接</p>
</li>
<li><p>:focus<br>伪类将应用于拥有键盘输入焦点的元素。</p>
</li>
</ul>
<p><strong>顺序问题: <code>LoVe HAte</code>原则。</strong><br><strong>综合案例，电商菜单。</strong></p>
<h4 id="CSS伪元素"><a href="#CSS伪元素" class="headerlink" title="CSS伪元素"></a>CSS伪元素</h4><p>伪元素是控制内容</p>
<p>:first-line伪元素</p>
<p>:first-letter伪元素<br>注释:以上两个伪元素只能用于块级元素</p>
<p>:first-child 伪元素，选择属于第一个子元素的元素。<br>例如：<code> span:first-child&#123;&#125;</code> <code>/*选择属于第一个子元素的所有span标签。*/</code></p>
<p>:before与:after伪元素，可以设置元素之前后之后的内容，并且配合content设置相关内容。比如<code>:#demo:after,demo:before &#123; content:&quot;--&quot;;,display:block; &#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.wrap:before, .wrap:after&#123;</span><br><span class="line">	content: &quot;-------&quot;;</span><br><span class="line">	display: block; /* 这个是让当前伪元素转换成块级元素 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">	wrap</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="CSS的层叠性和继承性"><a href="#CSS的层叠性和继承性" class="headerlink" title="CSS的层叠性和继承性"></a>CSS的层叠性和继承性</h3><h4 id="CSS的优先级"><a href="#CSS的优先级" class="headerlink" title="CSS的优先级"></a>CSS的优先级</h4><ol>
<li>内联样式</li>
<li>ID选择器</li>
<li>类选择器</li>
<li>标签选择器</li>
</ol>
<p>内联样式最大．内联样式的优先级最高。</p>
<p>ID选择器的优先级．仅次于内联样式。</p>
<p>类选择器优先级低于ID选择器</p>
<p>标签选择器低于类选择器。</p>
<p>256个标签选择器相加  大于   一个类选择器</p>
<p>256个类选择器相加   大于   一个ID选择器</p>
<h4 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h4><p>1、font-size：字号大小</p>
<p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长顾单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</p>
<p>可选参数值:<code> x-small | x-small | small | medium | large | x-large| xx-large| smaller | larger</code></p>
<p>一般页面中: 12px14px例如:<br>p { font-size: 32px; }</p>
<h4 id="复用代码"><a href="#复用代码" class="headerlink" title="复用代码"></a>复用代码</h4><h5 id="居中对齐-1"><a href="#居中对齐-1" class="headerlink" title="居中对齐"></a>居中对齐</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform: translate(-50%, -50%);</span><br><span class="line">   -moz-transform: translate(-50%, -50%);</span><br><span class="line">    -ms-transform: translate(-50%, -50%);</span><br><span class="line">     -o-transform: translate(-50%, -50%);</span><br><span class="line">        transform: translate(-50%, -50%);</span><br></pre></td></tr></table></figure>

<h5 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-radius: rem(10);</span><br><span class="line">-o-border-radius: rem(10);</span><br><span class="line">-ms-border-radius: rem(10);</span><br><span class="line">-moz-border-radius: rem(10);</span><br><span class="line">-webkit-border-radius: rem(10);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-top-left-radius: &lt;length&gt; &lt;length&gt; //左上角</span><br><span class="line">border-top-right-radius: &lt;length&gt; &lt;length&gt; //右上角</span><br><span class="line">border-bottom-right-radius:&lt;length&gt; &lt;length&gt; //右下角</span><br><span class="line">border-bottom-left-radius:&lt;length&gt; &lt;length&gt; //左下角</span><br></pre></td></tr></table></figure>

<h5 id="圆角不一样时的简写"><a href="#圆角不一样时的简写" class="headerlink" title="圆角不一样时的简写"></a>圆角不一样时的简写</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> border-radius：rem(10) 0 rem(10) 0;</span><br></pre></td></tr></table></figure>

<h4 id="去掉input-button-select-在ios的默认样式"><a href="#去掉input-button-select-在ios的默认样式" class="headerlink" title="去掉input ,button,select 在ios的默认样式"></a>去掉input ,button,select 在ios的默认样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-appearance:none;</span><br><span class="line">outline:none</span><br></pre></td></tr></table></figure>

<h4 id="ios-input阴影-去除"><a href="#ios-input阴影-去除" class="headerlink" title="ios input阴影 去除"></a>ios input阴影 去除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* ios input阴影 */  </span><br><span class="line">input &#123;  </span><br><span class="line">  outline: none;  </span><br><span class="line">  -webkit-appearance: none;  </span><br><span class="line">  /*去除系统默认的样式*/  </span><br><span class="line">  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);  </span><br><span class="line">  /* 点击高亮的颜色*/  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">// IOS点击阴影  </span><br><span class="line">select&#123;  </span><br><span class="line">  -webkit-tap-highlight-color: transparent;  </span><br><span class="line">  -webkit-touch-callout: none;  </span><br><span class="line">  -webkit-user-select: none;  </span><br><span class="line">  user-select:none;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="手机页面上面-按钮点击的时候有阴影-如何除去"><a href="#手机页面上面-按钮点击的时候有阴影-如何除去" class="headerlink" title="手机页面上面 按钮点击的时候有阴影 如何除去"></a><a href="http://blog.csdn.net/orichisonic/article/details/49583077">手机页面上面 按钮点击的时候有阴影 如何除去</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	-webkit-tap-highlight-color: rgba(0,0,0,0);</span><br><span class="line">	-webkit-tap-highlight-color: transparent; /* For some Androids */ </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="输入框的样式"><a href="#输入框的样式" class="headerlink" title="输入框的样式"></a>输入框的样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    font-size: rem(28);</span><br><span class="line">    height: rem(34);</span><br><span class="line">    line-height: normal;</span><br><span class="line">    width: 70%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义输入框placeholder-的样式"><a href="#自定义输入框placeholder-的样式" class="headerlink" title="自定义输入框placeholder 的样式"></a>自定义输入框placeholder 的样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123; </span><br><span class="line">    padding-top: rem(3);</span><br><span class="line">&#125; </span><br><span class="line">:-moz-placeholder &#123; </span><br><span class="line">    padding-top: rem(3);</span><br><span class="line">&#125; </span><br><span class="line">::-moz-placeholder &#123; </span><br><span class="line">    padding-top: rem(3);</span><br><span class="line">&#125; </span><br><span class="line">:-ms-input-placeholder &#123; </span><br><span class="line">    padding-top: rem(3);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="input-placeholder-颜色"><a href="#input-placeholder-颜色" class="headerlink" title="input placeholder 颜色"></a>input placeholder 颜色</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input::-webkit-input-placeholder,</span><br><span class="line">textarea::-webkit-input-placeholder &#123;</span><br><span class="line">  color: #666;</span><br><span class="line">&#125;</span><br><span class="line">input:-moz-placeholder, textarea:-moz-placeholder &#123;</span><br><span class="line">  color:#666;</span><br><span class="line">&#125;</span><br><span class="line">input::-moz-placeholder, textarea::-moz-placeholder &#123;</span><br><span class="line">  color:#666;</span><br><span class="line">&#125;</span><br><span class="line">input:-ms-input-placeholder, textarea:-ms-input-placeholder &#123;</span><br><span class="line">  color:#666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="让输入框中的placeholder-文字垂直居中"><a href="#让输入框中的placeholder-文字垂直居中" class="headerlink" title="让输入框中的placeholder 文字垂直居中"></a>让输入框中的placeholder 文字垂直居中</h5><p>加padding-top</p>
<h4 id="输入框不可用"><a href="#输入框不可用" class="headerlink" title="输入框不可用"></a>输入框不可用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disabled：disabled；</span><br><span class="line">readonly：readonly；</span><br></pre></td></tr></table></figure>

<h4 id="IOS-Input-Disabled默认样式问题"><a href="#IOS-Input-Disabled默认样式问题" class="headerlink" title="IOS Input Disabled默认样式问题"></a><a href="https://www.jianshu.com/p/c4e3bc4048f8">IOS Input Disabled默认样式问题</a></h4><p><code>input</code>或<code>textarea</code>设置为<code>disabled</code>后，在iphone手机上样式将被覆写。解决方案就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:disabled, textarea:diabled &#123;</span><br><span class="line">    -webkit-text-fill-color: #000;</span><br><span class="line">    -webkit-opacity: 1;</span><br><span class="line">    color: #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上样式将覆盖其系统默认设置的值，能够实现android和ios的兼容性。<br>其中,<code>-webkit-text-fill-color</code>是用来做填充色使用的，如果有设置这个值，则<code>color</code>属性将不生效。</p>
<p>这个属性也经常用于制作镂空字体等特效。<br>如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">  hello</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.demo &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  font-size: 40px;</span><br><span class="line">  -webkit-text-fill-color: transparent;</span><br><span class="line">  -webkit-text-stroke: 1px #000; /* 外面描线的样式 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top: 50%;</span><br><span class="line">transform: translateY(-50%);</span><br><span class="line">-o-transform: translateY(-50%);</span><br><span class="line">-ms-transform: translateY(-50%);</span><br><span class="line">-moz-transform: translateY(-50%);</span><br><span class="line">-webkit-transform: translateY(-50%);</span><br></pre></td></tr></table></figure>

<h4 id="CSS3中的Opacity多浏览器透明度兼容性问题"><a href="#CSS3中的Opacity多浏览器透明度兼容性问题" class="headerlink" title="CSS3中的Opacity多浏览器透明度兼容性问题"></a><a href="https://www.jb51.net/css/398056.html">CSS3中的Opacity多浏览器透明度兼容性问题</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.opacity&#123;   </span><br><span class="line">  filter:alpha(opacity=50); /* IE */  </span><br><span class="line">  -moz-opacity:0.5; /* 老版Mozilla */  </span><br><span class="line">  -khtml-opacity:0.5; /* 老版Safari */  </span><br><span class="line">  opacity: 0.5; /* 支持opacity的浏览器*/  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="兼容所有浏览器"><a href="#兼容所有浏览器" class="headerlink" title="兼容所有浏览器"></a>兼容所有浏览器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.transparent_class &#123;          </span><br><span class="line">  filter:alpha(opacity=50);          </span><br><span class="line">  -moz-opacity:0.5;          </span><br><span class="line">  -khtml-opacity: 0.5;          </span><br><span class="line">  opacity: 0.5;          </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<h4 id="文字超出长度，省略号显示"><a href="#文字超出长度，省略号显示" class="headerlink" title="文字超出长度，省略号显示"></a>文字超出长度，省略号显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;  // 可以不加这个</span><br></pre></td></tr></table></figure>

<h4 id="文字超出长度，换行"><a href="#文字超出长度，换行" class="headerlink" title="文字超出长度，换行"></a>文字超出长度，换行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">word-wrap:break-word;</span><br><span class="line">word-break:break-all;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>

<h4 id="文字超出长度，不换行，省略号显示"><a href="#文字超出长度，不换行，省略号显示" class="headerlink" title="文字超出长度，不换行，省略号显示"></a>文字超出长度，不换行，省略号显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">word-break: keep-all;</span><br></pre></td></tr></table></figure>

<h4 id="只显示两行文字，多出的用省略号代替"><a href="#只显示两行文字，多出的用省略号代替" class="headerlink" title="只显示两行文字，多出的用省略号代替"></a>只显示两行文字，多出的用省略号代替</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line"> -webkit-line-clamp: 2;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<h4 id="字体垂直居中"><a href="#字体垂直居中" class="headerlink" title="字体垂直居中"></a>字体垂直居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color:</span><br><span class="line">    gray;color: white;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    display: flex;</span><br><span class="line">    -webkit-align-items: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    -webkit-justify-content: center;</span><br><span class="line">    justify-content: center;&quot;</span><br><span class="line">   &gt;</span><br><span class="line">       this  is title this is title thle</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="当提示信息的文字长度不确定的时候"><a href="#当提示信息的文字长度不确定的时候" class="headerlink" title="当提示信息的文字长度不确定的时候"></a>当提示信息的文字长度不确定的时候</h4><p>给最小宽度，然后不允许换行</p>
<p>最小长度：min-width</p>
<p>不允许换行：white-space:nowrap;</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: none;</span><br><span class="line">position: fixed;</span><br><span class="line">z-index: 5000;</span><br><span class="line">min-width: rem(150);</span><br><span class="line">min-height: rem(40);</span><br><span class="line">padding: rem(20);</span><br><span class="line">top:rem(480);</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translateX(-50%);</span><br><span class="line">background: rgba(0, 0, 0, 0.5);</span><br><span class="line">text-align: center;</span><br><span class="line">border-radius: rem(10);</span><br><span class="line">color: $white;</span><br><span class="line">font-size: rem(26);</span><br><span class="line">white-space:nowrap;</span><br></pre></td></tr></table></figure>

<h4 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: block;</span><br><span class="line">border: 0;</span><br><span class="line">outline: 0;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 0;</span><br><span class="line">top:0;</span><br><span class="line">z-index: -1;</span><br></pre></td></tr></table></figure>

<h4 id="错误信息提示框样式"><a href="#错误信息提示框样式" class="headerlink" title="错误信息提示框样式"></a>错误信息提示框样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p#error &#123;</span><br><span class="line">  //	display: none;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 30%;</span><br><span class="line">  z-index: 999;</span><br><span class="line">  -webkit-transform: translateX(-50%);	</span><br><span class="line">  -moz-transform: translateX(-50%);</span><br><span class="line">  -o-transform: translateX(-50%);</span><br><span class="line">  transform: translateX(-50%);</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: rem(20);</span><br><span class="line">  font-size: rem(30);</span><br><span class="line">  color: $white;</span><br><span class="line">  background: rgba(0,0,0,.7);</span><br><span class="line">  border-radius: rem(10);</span><br><span class="line">  -webkit-border-radius: rem(10);</span><br><span class="line">  -moz-border-radius: rem(10);	</span><br><span class="line">  -o-border-radius: rem(10);</span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 0;</span><br><span class="line">  text-indent: 0;</span><br><span class="line">  width: auto;</span><br><span class="line">  min-width: 45%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transition: all .25s ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;);</span><br><span class="line">-moz-transition: all .25s ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;);</span><br><span class="line">-ms-transition: all .25s ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;);</span><br><span class="line">-o-transition: all .25s ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;);</span><br><span class="line">transition: all .25s ease|linear|ease-in|ease-out|ease-in-out|cubic-bezier(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;);</span><br><span class="line"></span><br><span class="line">transition: property duration timing-function delay;</span><br></pre></td></tr></table></figure>

<h4 id="transform-属性向元素应用-2D-或-3D-转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜"><a href="#transform-属性向元素应用-2D-或-3D-转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜" class="headerlink" title="transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜"></a>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform: ;</span><br><span class="line">   -moz-transform: ;</span><br><span class="line">    -ms-transform: ;</span><br><span class="line">     -o-transform: ;</span><br><span class="line">       	transform: ;</span><br></pre></td></tr></table></figure>

<h4 id="允许改变textarea-不同方向的大小"><a href="#允许改变textarea-不同方向的大小" class="headerlink" title="允许改变textarea 不同方向的大小"></a>允许改变textarea 不同方向的大小</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea &#123; resize:both; &#125; /* none|horizontal|vertical|both */</span><br><span class="line">textarea.vert &#123; resize:vertical; &#125;</span><br><span class="line">textarea.noResize &#123; resize:none; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="禁止输入框调整大小"><a href="#禁止输入框调整大小" class="headerlink" title="禁止输入框调整大小"></a>禁止输入框调整大小</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea &#123;</span><br><span class="line">  	resize: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="固定定位在IE6下是不兼容的"><a href="#固定定位在IE6下是不兼容的" class="headerlink" title="固定定位在IE6下是不兼容的"></a>固定定位在IE6下是不兼容的</h4><h4 id="在使用clientX和clientY时，要使用scrollTop和scrollLeft。避免出现问题"><a href="#在使用clientX和clientY时，要使用scrollTop和scrollLeft。避免出现问题" class="headerlink" title="在使用clientX和clientY时，要使用scrollTop和scrollLeft。避免出现问题"></a>在使用clientX和clientY时，要使用scrollTop和scrollLeft。避免出现问题</h4><h4 id="css-input-type-file-样式美化-input上传按钮美化"><a href="#css-input-type-file-样式美化-input上传按钮美化" class="headerlink" title="css input[type=file] 样式美化-input上传按钮美化"></a><a href="https://www.haorooms.com/post/css_input_uploadmh">css input[type=file] 样式美化-input上传按钮美化</a></h4><h5 id="DOM结构"><a href="#DOM结构" class="headerlink" title="DOM结构"></a>DOM结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:;&quot; class=&quot;a-upload&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot;&gt;点击这里上传文件</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;javascript:;&quot; class=&quot;file&quot;&gt;选择文件</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>CSS样式1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*a  upload */</span><br><span class="line">.a-upload &#123;</span><br><span class="line">    padding: 4px 10px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    position: relative;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #888;</span><br><span class="line">    background: #fafafa;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    *zoom: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.a-upload  input &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    filter: alpha(opacity=0);</span><br><span class="line">    cursor: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.a-upload:hover &#123;</span><br><span class="line">    color: #444;</span><br><span class="line">    background: #eee;</span><br><span class="line">    border-color: #ccc;</span><br><span class="line">    text-decoration: none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样式2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.file &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #D0EEFF;</span><br><span class="line">    border: 1px solid #99D3F5;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    padding: 4px 12px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    color: #1E88C7;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-indent: 0;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.file input &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.file:hover &#123;</span><br><span class="line">    background: #AADFFD;</span><br><span class="line">    border-color: #78C3F3;</span><br><span class="line">    color: #004974;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E7%AC%94%E8%AE%B0/input_upload.png" alt="样式"></p>
<h4 id="限制textarea文本域拉动"><a href="#限制textarea文本域拉动" class="headerlink" title="限制textarea文本域拉动"></a>限制textarea文本域拉动</h4><blockquote>
<p>textarea:resize属性值：both（表示横向纵向均可拉动）horizontal（表示只有横向可以拉动）vertical（表示只有纵向才可以拉动）none（禁止拉动）</p>
</blockquote>
<h5 id="设置文本域宽高"><a href="#设置文本域宽高" class="headerlink" title="设置文本域宽高"></a>设置文本域宽高</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cols=&quot;30&quot; rows=&quot;5&quot;</span><br></pre></td></tr></table></figure>

<h4 id="CSS-前缀"><a href="#CSS-前缀" class="headerlink" title="CSS 前缀"></a>CSS 前缀</h4><p>主流浏览器引擎前缀</p>
<ul>
<li>-webkit- (谷歌, Safari, 新版Opera浏览器等)</li>
<li>-moz- (火狐浏览器)</li>
<li>-o- (旧版Opera浏览器等)</li>
<li>-ms- (IE浏览器 和 Edge浏览器)</li>
</ul>
<h4 id="不用-JS-显示“更多”的按钮来展开更多内容"><a href="#不用-JS-显示“更多”的按钮来展开更多内容" class="headerlink" title="不用 JS 显示“更多”的按钮来展开更多内容"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA2MDcyOQ==&mid=2649567547&idx=1&sn=e022597760c3e5734a9505a71268e856&chksm=f1e159adc696d0bb7c87a84a56074a280efec840af9493da10f2fda8c683dcbac14ba96ddb30&scene=21#wechat_redirect">不用 JS 显示“更多”的按钮来展开更多内容</a></h4><h4 id="自定义滚动条样式"><a href="#自定义滚动条样式" class="headerlink" title="自定义滚动条样式"></a>自定义滚动条样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrollbar::-webkit-scrollbar&#123;</span><br><span class="line">  width: 5px;</span><br><span class="line">  height: 5px;</span><br><span class="line">  background:#f3f3f3;</span><br><span class="line">&#125;</span><br><span class="line">/*定义滑块，内阴影及圆角*/</span><br><span class="line">.scrollbar::-webkit-scrollbar-thumb&#123;</span><br><span class="line">  height: 20px;</span><br><span class="line">  background:rgba(0,0,0,.1);</span><br><span class="line">&#125;</span><br><span class="line">.onhost-data &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top:30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解决移动端fixed定位"><a href="#解决移动端fixed定位" class="headerlink" title="解决移动端fixed定位"></a>解决移动端fixed定位</h4><p><a href="https://blog.csdn.net/liu__hua/article/details/40106595">小技巧css解决移动端ios不兼容position:fixed属性，无需插件</a></p>
<p>需要解决的问题：头部fixed的情况下，右侧内容如果有输入框的话，在UC浏览器，当输入框获取焦点的时候，页面往上滚动，超过顶部固定导航。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E7%AC%94%E8%AE%B0/fixed1.png" alt="样式"></p>
<p>获取焦点后：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/CSS%E7%AC%94%E8%AE%B0/fixed2.png" alt="样式"></p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>让右侧内容也固定定位</p>
<h4 id="网页适配-iPhoneX"><a href="#网页适配-iPhoneX" class="headerlink" title="网页适配 iPhoneX"></a>网页适配 iPhoneX</h4><p><a href="https://jelly.jd.com/article/6006b1055b6c6a01506c87fd">网页适配 iPhoneX，就是这么简单</a></p>
<h4 id="溢出文字省略号显示兼容IE"><a href="#溢出文字省略号显示兼容IE" class="headerlink" title="溢出文字省略号显示兼容IE"></a>溢出文字省略号显示兼容IE</h4><p>原来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.essential-info td:nth-child(2) a:nth-child(1)&#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：加上宽度即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.essential-info td:nth-child(2) a:nth-child(1)&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width:100%;</span><br><span class="line">    width: 1000px\9;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IE浏览器图片兼容问题"><a href="#IE浏览器图片兼容问题" class="headerlink" title="IE浏览器图片兼容问题"></a>IE浏览器图片兼容问题</h4><p>在IE浏览器，图片有边框</p>
<p>解决方法：给img加上<code>border:0;</code>的样式，去掉边框</p>
<h4 id="textarea-placeholder文字换行"><a href="#textarea-placeholder文字换行" class="headerlink" title="textarea placeholder文字换行"></a><a href="https://www.cnblogs.com/wangmeijian/p/6953813.html">textarea placeholder文字换行</a></h4><h5 id="谷歌浏览器和火狐浏览器支持"><a href="#谷歌浏览器和火狐浏览器支持" class="headerlink" title="谷歌浏览器和火狐浏览器支持"></a>谷歌浏览器和火狐浏览器支持</h5><p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea rows=&quot;5&quot; cols=&quot;50&quot; &gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">document.querySelector(&#x27;textarea&#x27;).setAttribute(&#x27;placeholder&#x27;,&#x27;1、textarea\n2、success&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var txtArr = [&quot;自定义参数，格式如下:&quot;,&quot;key_1=value_1&quot;,&quot;key_2=value_2&quot;,&quot;...&quot;,&quot;key_n=value_n&quot;,&quot;key和value之间用等号&#x27;=&#x27;分隔，不要带空格&quot;,&quot;每一组key和value占用一行&quot;];</span><br><span class="line">var placeholderTxt= txtArr.join(&quot;\n&quot;);</span><br><span class="line">$(&quot;.sdk-textarea&quot;).attr(&quot;placeholder&quot;, placeholderTxt);</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea rows=&quot;5&quot; cols=&quot;50&quot; placeholder=&quot;1、textarea&amp;#10;2、success&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CSS实现固定表头-内容溢出滚动"><a href="#CSS实现固定表头-内容溢出滚动" class="headerlink" title="CSS实现固定表头  内容溢出滚动"></a>CSS实现固定表头  内容溢出滚动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thead&#123;</span><br><span class="line">  tr &#123;</span><br><span class="line">    display:table;</span><br><span class="line">    width:100%;</span><br><span class="line">    table-fixed:fixed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tbody&#123;</span><br><span class="line">  width:calc(100% + 17px);</span><br><span class="line">  display:block;</span><br><span class="line">  height:420px;</span><br><span class="line">  overflow-y:auto;</span><br><span class="line">  overflow-x:hidden;</span><br><span class="line">  tr&#123;</span><br><span class="line">  	display:table;</span><br><span class="line">    width:100%;</span><br><span class="line">    table-layout:fixed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解决苹果网页-手机字体变大"><a href="#解决苹果网页-手机字体变大" class="headerlink" title="解决苹果网页-手机字体变大"></a>解决苹果网页-手机字体变大</h4><p>解决移动端iPhone（苹果手机）网页兼容（部分字号变大）</p>
<p> safari浏览器是webkit内核</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body&#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-笔记</title>
    <url>/2021/01/18/HTML-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="传统前端"><a href="#传统前端" class="headerlink" title="传统前端"></a>传统前端</h2><p>还原“活”的设计</p>
<p>设计稿→PS &gt;HTML页面+效果</p>
<p>一切图→写标签和样式&gt;实现效果</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">HTML elements reference</a></p>
<h2 id="HTML5时代的大前端"><a href="#HTML5时代的大前端" class="headerlink" title="HTML5时代的大前端"></a>HTML5时代的大前端</h2><p>各种端的兼容开发(PC、移动端)</p>
<p>移动APP开发和移动站点开发</p>
<p>Ajax+服务器端技术开发</p>
<p>高级设计模式和框架(MVC、 AngularJS、 ..)</p>
<p>自动化工作流( Grunt)</p>
<p>网站安全、SEO、测试、源代码管理、团队合作</p>
<p>HTML5游戏</p>
<p>使用HTML5开发原生APP</p>
<h3 id="全栈工程师"><a href="#全栈工程师" class="headerlink" title="全栈工程师"></a>全栈工程师</h3><p>集前端和后端一体的大牛</p>
<p>专多能的时代</p>
<p>前后台通吃，快速解决问题</p>
<p>NodeJS：无所不能</p>
<p>现在的前端已经是突破所有边界的前端。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML-%E7%AC%94%E8%AE%B0/note1.png" alt="元素结构"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML-%E7%AC%94%E8%AE%B0/note2.png" alt="层级结构"></p>
<p>1、html</p>
<p>HTML：hyperText markup language (超文本标记语言）</p>
<p>2、是由标签组成的，解释标签是怎样的</p>
<p>根标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>3、头标签，身体标签，类似人，头部是装思想的，身体是衣服样子</p>
<p>写一个简单的英文，然后写中文乱码，因为是国外人创造的，不认识中文，需要告诉浏览器，要以中文的形式显示，然后要加meta标签，单加标签没有用。要加属性，解释属性</p>
<p>Lang属性是告诉搜索引擎爬虫，我们的网站是关于什么内容的</p>
<p>Lang = ‘en’ 英文的</p>
<p>Lang = ‘zh’ 中文的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">	&lt;!-- gb2312 gbk unicode--&gt;</span><br><span class="line">	&lt;!-- Utf-8是unicode的升级版 --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	Life is shit!!!美好的生活!!!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="select下拉框，添加分组-optgroup"><a href="#select下拉框，添加分组-optgroup" class="headerlink" title="select下拉框，添加分组(optgroup)"></a>select下拉框，添加分组(optgroup)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;optgroup label=&quot;蔬菜&quot;&gt;</span><br><span class="line">    &lt;option value =&quot;娃娃菜&quot;&gt;娃娃菜&lt;/option&gt;</span><br><span class="line">    &lt;option value =&quot;西红柿&quot;&gt;西红柿&lt;/option&gt;</span><br><span class="line">  &lt;/optgroup&gt;</span><br><span class="line"></span><br><span class="line">  &lt;optgroup label=&quot;水果&quot;&gt;</span><br><span class="line">    &lt;option value =&quot;苹果&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">    &lt;option value =&quot;蓝莓&quot;&gt;蓝莓&lt;/option&gt;</span><br><span class="line">  &lt;/optgroup&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h4 id="添加网页图标（favicon"><a href="#添加网页图标（favicon" class="headerlink" title="添加网页图标（favicon)"></a>添加网页图标（favicon)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot; /favicon.ico&quot; /&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Html的命名规则"><a href="#Html的命名规则" class="headerlink" title="Html的命名规则"></a>Html的命名规则</h4><ul>
<li><h5 id="文件名称命名规则"><a href="#文件名称命名规则" class="headerlink" title="文件名称命名规则"></a>文件名称命名规则</h5><ul>
<li><p>统一使用小写的英文字母、数字和下划线的组合，不得包含汉字、空格和特殊字符</p>
</li>
<li><p>命名的原则</p>
<ul>
<li><p>方便理解</p>
</li>
<li><p>方便查找</p>
</li>
</ul>
</li>
</ul>
</li>
<li><h5 id="索引文件命名原则"><a href="#索引文件命名原则" class="headerlink" title="索引文件命名原则"></a>索引文件命名原则</h5><ul>
<li>index.htm</li>
<li>index.html</li>
<li>index.asp</li>
<li>index.aspx</li>
<li>index.jsp</li>
<li>index.php</li>
</ul>
</li>
<li><h5 id="各子页命名的原则"><a href="#各子页命名的原则" class="headerlink" title="各子页命名的原则"></a>各子页命名的原则</h5><ul>
<li>统一用翻译的英文命名</li>
<li>统一用拼音命名</li>
<li>注意：不要英语拼音混用</li>
</ul>
</li>
</ul>
<h1 id="Web前端基础课程内容"><a href="#Web前端基础课程内容" class="headerlink" title="Web前端基础课程内容"></a>Web前端基础课程内容</h1><h2 id="第一阶段-Web前端开发环境搭建"><a href="#第一阶段-Web前端开发环境搭建" class="headerlink" title="第一阶段: Web前端开发环境搭建"></a>第一阶段: Web前端开发环境搭建</h2><ul>
<li>操作系统操作常用高级设置和快捷键</li>
<li>Sublime安装和配置</li>
<li>Atom安装和配置</li>
<li>WebStorm安装和配置</li>
</ul>
<h2 id="第二阶段-HTML5基础"><a href="#第二阶段-HTML5基础" class="headerlink" title="第二阶段: HTML5基础"></a>第二阶段: HTML5基础</h2><ul>
<li>HTML基础</li>
<li>语义化标签与SEO</li>
</ul>
<h2 id="第三阶段-CSS3基础"><a href="#第三阶段-CSS3基础" class="headerlink" title="第三阶段: CSS3基础"></a>第三阶段: CSS3基础</h2><ul>
<li>CSS属性基础</li>
<li>CSS布局</li>
<li>面向对象的CSS</li>
<li>less、 sass、 styleus、 postcss</li>
</ul>
<h2 id="第四阶段-JavaScript基-础"><a href="#第四阶段-JavaScript基-础" class="headerlink" title="第四阶段: JavaScript基 础"></a>第四阶段: JavaScript基 础</h2><ul>
<li>JavaScript语 法基础</li>
<li>JavaScript数组、 字符串、流程控制语句、</li>
<li>JavaScript高级 简介</li>
</ul>
<h2 id="综合项目"><a href="#综合项目" class="headerlink" title="综合项目"></a>综合项目</h2><h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h4 id="什么是浏览器"><a href="#什么是浏览器" class="headerlink" title="什么是浏览器?"></a>什么是浏览器?</h4><ul>
<li><p>360双核浏览器、qq浏览器</p>
</li>
<li><p>浏览器与浏览器内核:</p>
</li>
<li><p>ie: trident、 safari：webkit、 ff：gecko 、chrome、opera：blink</p>
</li>
</ul>
<h4 id="什么是服务器和服务器端程序"><a href="#什么是服务器和服务器端程序" class="headerlink" title="什么是服务器和服务器端程序?"></a>什么是服务器和服务器端程序?</h4><p>浏览器浏览页面背后的秘密(了解)</p>
<ul>
<li>浏览器接受用户操作→浏览器封装HTTP请求→连接服务器: DNS解析&gt; 发送请求Request&gt;服务器接收请求&gt;处理请求&gt;返回响应报文→浏览器接收响应报文→渲染页面呈现</li>
<li>HTTP协议(了解，就业班详细讲)</li>
</ul>
<p>服务器也是一台电脑，专门为用户进行服务，处理一些网站的请求。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML-%E7%AC%94%E8%AE%B0/note3.png" alt="img"></p>
<h2 id="HTML发展历程"><a href="#HTML发展历程" class="headerlink" title="HTML发展历程"></a>HTML发展历程</h2><p>HTML 1.0超文本标记语言(第一版)–在1993年6月发为互联网工程工作小组(IETF)工作草案发布(并非标准)</p>
<p>HTML 2.0– 1995年11月作为RFC 1866发布,在RFC 2854于2000年6月发布之后被宣布已经过时</p>
<p>HTML3.2– 1996年1月14日,W3C推荐标准</p>
<p>HTML 4.0– 1997年12月18日,W3C推荐标准</p>
<p>HTML 4.01(微小改进) - 1999年12月24日,W3C推荐标准</p>
<p>XHTML 1.0–发布于2000年1月26日,是W3C推荐标准，后来经过修订于2002年8月1日重新发布</p>
<p>XHTML 1.1–于2001年5月31日发布</p>
<p>HTML5.0 2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>Internet：因特网，互联网。可以实现全球信息互联的网络。</p>
<p>WWW：万维网(world wide web)，它是提供网站相关服务，人们可以通过万维网服务进行网上聊天、网上冲浪、网购、搜索资料、查看天气、查看新闻、交友聊天等!</p>
<p>W3C：万维网联盟创建于1994年是Web技术领域最具权威和影响力的国际中立性技术标准机构。我们后面学的html、css等标准都是由此机构主导制定。</p>
<p>HTTP：超文本传输协议(HTTP， HyperText Transfer Protocol)，也就是浏览器和服务器端的网页传输数据的约束和规范。</p>
<p>Web：web ( 互联网总称) web的本意是蜘蛛网和网的意思，在网页设计中我们称为网页的意思。现广泛译作网络、互联网等技术领域。表现为三种形式，即超文本(hypertext) 、超媒体(hypermedia) 、超文本传输协议(HTTP)等。</p>
<p>DNS：DNS ( Domain Name System,域名系统)，因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析)</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML-%E7%AC%94%E8%AE%B0/note4.png" alt="img"></p>
<h2 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h2><ul>
<li>HTML：页面结构</li>
<li>CSS：页面样式表现</li>
<li>JavaScript：交互行为</li>
</ul>
<p>HTML简介</p>
<p>- HTML (英文Hyper Text Markup Language的缩写)中文译为超文本标记语言”，主要是通过HTML标记对网页中的文本、图片、声音等内容进行描述。</p>
<p>- HTML提供了许多标记，如段落标记、标题标记、超链接标记、图片标记等，网页中需要定义什么内容，就用相应的HTML标记描述即可。</p>
<p>- HTML之所以称为超文本标记语言，不仅是因为他通过标记描述网页内容，同时也由于文本中包含了所谓的“超级链接”点。通过超链接将网站与网页以及各种网页元素链接起来，构成了丰富多彩的Web页面。</p>
<h4 id="end-让光标快速定位到结尾"><a href="#end-让光标快速定位到结尾" class="headerlink" title="end:让光标快速定位到结尾"></a>end:让光标快速定位到结尾</h4><h4 id="home-让光标快速定位到行首"><a href="#home-让光标快速定位到行首" class="headerlink" title="home:让光标快速定位到行首"></a>home:让光标快速定位到行首</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh_CN&quot;&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="HTML头部标签"><a href="#HTML头部标签" class="headerlink" title="HTML头部标签"></a>HTML头部标签</h2><p>doctype标签</p>
<p>head标签</p>
<p>title标签</p>
<p>link标签</p>
<p>meta标签</p>
<p>script标签</p>
<p>style标签</p>
<h3 id="1-1-HTML文件的后缀"><a href="#1-1-HTML文件的后缀" class="headerlink" title="1.1 HTML文件的后缀"></a>1.1 HTML文件的后缀</h3><h4 id="HTML文档的后缀名-html-htmn"><a href="#HTML文档的后缀名-html-htmn" class="headerlink" title="HTML文档的后缀名:.html    .htmn"></a>HTML文档的后缀名:.html    .htmn</h4><p>在早期的dos8位机的时代，电脑只识别3个字母的后缀名文件。所以HTML文件的后缀为: htm</p>
<p>现在所有的电脑都支持多字符的文件后缀名，所以现在大家都在使用.html后缀名了，</p>
<p>当然用.htm  == .html进行命名html文档的后缀名都是一样的效果</p>
<h4 id="快速生成html"><a href="#快速生成html" class="headerlink" title="快速生成html"></a>快速生成html</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html:5 + tab键</span><br><span class="line"></span><br><span class="line">html:4s + tab键</span><br><span class="line"></span><br><span class="line">html:4t + tab键</span><br></pre></td></tr></table></figure>

<h4 id="乱码处理"><a href="#乱码处理" class="headerlink" title="乱码处理"></a>乱码处理</h4><p>当浏览器解析当前文档的编码，和文档实际的编码不一-致的时候那么会出现乱码的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt; &lt;!-- 设置了当前页面的编码用UTF-8 --&gt;</span><br></pre></td></tr></table></figure>

<p>Head标签中设置都是用于给浏览器使用的一些配置和设置。比如meta标签告诉浏览器当前文档的编码格式。</p>
<h2 id="HTML基本文档格式一-lt-meta-gt-标记"><a href="#HTML基本文档格式一-lt-meta-gt-标记" class="headerlink" title="HTML基本文档格式一&lt;meta&gt; 标记"></a>HTML基本文档格式一<code>&lt;meta&gt;</code> 标记</h2><ul>
<li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li>
<li>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</li>
<li>gb2312简单中文</li>
<li>GBK包含全部中文字符繁体</li>
<li>BIG5繁体中文</li>
<li>UTF-8则包含全世界所有国家需要用到的字符</li>
<li>从二进制说起，符号表示文字，表示的模式就是编码:联想电报</li>
</ul>
<p><code>ctrl + shift + D</code>：快速复制一行代码</p>
<h2 id="Link标签"><a href="#Link标签" class="headerlink" title="Link标签"></a>Link标签</h2><ul>
<li>dns预解析(了解)</li>
<li><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://mimg.127.net&quot;&gt;</code></li>
<li>引入网站icon图标:</li>
<li><code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;http://www.126.com/favicon.ico&quot; /&gt;</code></li>
<li>引入css样式， [后面讲]</li>
<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/ bg.css&quot;&gt;</code></li>
</ul>
<h3 id="域名预解析-提高效率"><a href="#域名预解析-提高效率" class="headerlink" title="域名预解析-提高效率"></a>域名预解析-提高效率</h3><p>域名预解析，可以有效地提高网站后续访问的效率。（网站优化的时候做）</p>
<p>如果在页面中访问的资源用到<a href="http://mimg.127.net,不用再进行域名解析.提高效率/">http://mimg.127.net，不用再进行域名解析。提高效率</a></p>
<h3 id="shortcut"><a href="#shortcut" class="headerlink" title="shortcut"></a>shortcut</h3><p><code>&lt;link rel- shortcut icon&quot; hret= &quot;http://www.126. com/favicon.ico&quot;&gt;</code></p>
<h2 id="URL协议"><a href="#URL协议" class="headerlink" title="URL协议"></a>URL协议</h2><p>URL协议: Uniform Resource Locator,统一资源定 位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL,它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>
<ul>
<li>协议规定格式: scheme://host.domain:port/path/filename</li>
<li>scheme -定义因特网服务的类型。最常见的类型是http</li>
<li>host-定义域主机(http的默认主机是www)</li>
<li>domain-定义因特网域名，比如w3school.com.cn</li>
<li>port-定义主机上的端口号(http的默认端口号是80)</li>
<li>path-定义服务器上的路径(如果省略，则文档必须位于网站的根目录中)。</li>
<li>filename-定义文档/资源的名称</li>
</ul>
<p>常见协议: http、 https、 ftp、 迅雷协议等.</p>
<p>URL编码: url中的非ASCII码， 转为%ascii码</p>
<p>平时我们写的网址就是url 地址。</p>
<p>Url协议就是规定url地址的格式。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML-%E7%AC%94%E8%AE%B0/note5.png" alt="img"></p>
<p>协议名称://域名(ip 地址):80/路径文件a.htm</p>
<h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><p>将中文或其他语言的文字转换为ascii码，便于在不同国家，浏览器没有安装对应字体字符集的情况下，能够正常地访问同一个网页。</p>
<p>为什么要有URL编码呢?</p>
<p>如果我写的一个中文的网页要在阿拉伯国家的电脑上进行显示。</p>
<p><a href="http://www/">http://www</a>. sina com.cn/c/zg/2015-10-27/doc-传智播客61.html</p>
<p>中文字符在阿拉伯国家的电脑上会正常显示吗?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encodeURI(&#x27;编码&#x27;)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.jsons.cn/urlencode/">URL在线编码解码工具（UrlEncode编码 和 UrlDecode解码）</a></p>
<h2 id="常用的图像格式"><a href="#常用的图像格式" class="headerlink" title="常用的图像格式"></a>常用的图像格式</h2><h4 id="GIF格式"><a href="#GIF格式" class="headerlink" title="GIF格式"></a>GIF格式</h4><p>GIF最突出的地方就是他支持动画，同时GIF也是一种无损的图像格式，也就是说修改图片之后，图片质量几乎没有损失。再加上GIF支持透明（全透明或全不透明)，因此很适合在互联网上使用。但GIF只能处理256种颜色。在网页制作中，GIF格式常常用于Logo、小图标及其他色彩相对单一的图像。<br><code>总结:小、兼容性好、支持透明、色彩太多不行。</code></p>
<h4 id="JPG格式"><a href="#JPG格式" class="headerlink" title="JPG格式"></a>JPG格式</h4><p>JPEG格式是网络上比较流行的一种格式，其文件扩展名为.jpg或.jpeg。JPEG是一种有损压缩格式，其文件体积非常小，非常有利于网络传输，但由于是有损压缩，所以将一幅图像转换为JPEG格式后图像质量会降低。<br><code>一般用于广告，大的宣传的图片，照片等</code></p>
<h4 id="PNG格式"><a href="#PNG格式" class="headerlink" title="PNG格式"></a>PNG格式</h4><p>PNG包括PNG-8和真色彩PNG(PNG-24和PNG-32）。相对于GIF，PNG最大的优势是体积更小，支持alpha透明(全透明，半透明，全不透明），并且颜色过渡更平滑，但PNG不支持动画。同时需要注意的是IE6是可以支持PNG-8的，但在处理PNG-24的透明时会显示为灰色。通常，图片保存为PNG-8会在同等质量下获得比GIF更小的体积，而半透明的图片只能使用PNG-24。</p>
<p><code>IE浏览器选择Gif会更好一些。</code></p>
<p>dtd：文档类型的定义</p>
<h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><p>h1： 一般情况下，一个页面只能有一个h1标题 </p>
<p>H1标题标签上标注当前页面中的文档最重要的核心主题的文本。</p>
<p>H1到H6标签，相对于当前文档的重要性依次降低。注意h1标签在整个页面中最多一次（当然可以超过，但是不利于搜索SEO)</p>
<p>H2以后的这些标签可以在一个页面中有多个，但是不要滥用，滥用会导致网页的SEO受影响，搜索引擎会认为我们作弊。</p>
<p>H1到H6标签不是用于字体大小的样式设置。</p>
<h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><p>段落标签也只能嵌套行内标签</p>
<h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr/&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器会将多个空格和换行合并为一个空格</p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span id=&quot;demo&quot;&gt;标题&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;demo&quot;&gt;去到标题的位置&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序：ul</p>
<p>有序：ol（order list）</p>
<p>定义列表：dl</p>
<h2 id="表单组合标签"><a href="#表单组合标签" class="headerlink" title="表单组合标签"></a>表单组合标签</h2><h4 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;用户组1&lt;/legend&gt;</span><br><span class="line">  &lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">  &lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;用户组2&lt;/legend&gt;</span><br><span class="line">  &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="内联框架标签iframe"><a href="#内联框架标签iframe" class="headerlink" title="内联框架标签iframe"></a>内联框架标签iframe</h2><p>尽量不用</p>
<h2 id="字符实体HTML特殊符号处理"><a href="#字符实体HTML特殊符号处理" class="headerlink" title="字符实体HTML特殊符号处理"></a>字符实体HTML特殊符号处理</h2><p>特殊字符标记</p>
<h2 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h2><h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;&lt;!-- QQ强制竖屏 --&gt;</span><br></pre></td></tr></table></figure>

<h5 id="移动前端常用meta标签"><a href="#移动前端常用meta标签" class="headerlink" title="移动前端常用meta标签"></a><a href="https://www.cnblogs.com/qiye2016/p/5807524.html">移动前端常用meta标签</a></h5><p>摘自：<a href="http://caibaojian.com/mobile-meta.html">HTML meta标签总结,HTML5 head meta属性整理</a>， 仅用于学习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!DOCTYPE html&gt; &lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt; &lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 声明文档使用的字符编码 --&gt;</span><br><span class="line">    &lt;meta charset=&#x27;utf-8&#x27;&gt;</span><br><span class="line">    &lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</span><br><span class="line">    &lt;!-- 页面描述 --&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;/&gt;</span><br><span class="line">    &lt;!-- 页面关键词 --&gt;</span><br><span class="line">    &lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;</span><br><span class="line">    &lt;!-- 网页作者 --&gt;</span><br><span class="line">    &lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot;/&gt;</span><br><span class="line">    &lt;!-- 搜索引擎抓取 --&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">    &lt;!-- 为移动设备添加 viewport --&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- iOS 设备 begin --&gt;</span><br><span class="line">    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class="line">    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class="line">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class="line">    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class="line">    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class="line">    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class="line">    &lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class="line">    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class="line">    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class="line">    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class="line">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">    &lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;!-- 不让百度转码 --&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</span><br><span class="line">    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class="line">    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- 微软的老式浏览器 --&gt;</span><br><span class="line">    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class="line">    &lt;!-- uc强制竖屏 --&gt;</span><br><span class="line">    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">    &lt;!-- QQ强制竖屏 --&gt;</span><br><span class="line">    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">    &lt;!-- UC强制全屏 --&gt;</span><br><span class="line">    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">    &lt;!-- QQ强制全屏 --&gt;</span><br><span class="line">    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- UC应用模式 --&gt;</span><br><span class="line">    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class="line">    &lt;!-- QQ应用模式 --&gt;</span><br><span class="line">    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- windows phone 点击无高光 --&gt;</span><br><span class="line">    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class="line">    &lt;!-- iOS 图标 begin --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class="line">    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class="line">    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class="line">    &lt;!-- iOS 图标 end --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- iOS 启动画面 begin --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class="line">    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class="line">    &lt;!-- iOS 启动画面 end --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- iOS 设备 end --&gt;</span><br><span class="line">    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;</span><br><span class="line">    &lt;!-- Windows 8 磁贴颜色 --&gt;</span><br><span class="line">    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;</span><br><span class="line">    &lt;!-- Windows 8 磁贴图标 --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot;/&gt;</span><br><span class="line">    &lt;!-- 添加 RSS 订阅 --&gt;</span><br><span class="line">    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot;/&gt;</span><br><span class="line">    &lt;!-- 添加 favicon icon --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- sns 社交标签 begin --&gt;</span><br><span class="line">    &lt;!-- 参考微博API --&gt;</span><br><span class="line">    &lt;meta property=&quot;og:type&quot; content=&quot;类型&quot; /&gt;</span><br><span class="line">    &lt;meta property=&quot;og:url&quot; content=&quot;URL地址&quot; /&gt;</span><br><span class="line">    &lt;meta property=&quot;og:title&quot; content=&quot;标题&quot; /&gt;</span><br><span class="line">    &lt;meta property=&quot;og:image&quot; content=&quot;图片&quot; /&gt;</span><br><span class="line">    &lt;meta property=&quot;og:description&quot; content=&quot;描述&quot; /&gt;</span><br><span class="line">    &lt;!-- sns 社交标签 end --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;title&gt;标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<p>上面给出了常用的一些meta属性，下面给一个对meta使用的理解。 meta是html语言head区的一个辅助性标签。也许你认为这些代码可有可无。其实如果你能够用好meta标签，会给你带来意想不到的效果，meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！ meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。 <strong>1、name属性</strong> name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。 meta标签的name属性语法格式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;参数&quot;content=&quot;具体的参数值&quot;&gt;。 </span><br></pre></td></tr></table></figure>

<p>其中name属性主要有以下几种参数： <strong>A、Keywords(关键字)</strong> 说明：keywords用来告诉搜索引擎你网页的关键字是什么。 举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot;content=&quot;meta总结,html meta,meta属性,meta跳转&quot;&gt; </span><br></pre></td></tr></table></figure>

<p><strong>B、description(网站内容描述)</strong> 说明：description用来告诉搜索引擎你的网站主要内容。 举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot;content=&quot;haorooms博客,html的meta总结，meta是html语言head区的一个辅助性标签。&quot;&gt; </span><br></pre></td></tr></table></figure>

<p><strong>C、robots(机器人向导)</strong> 说明：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。 content的参数有all,none,index,noindex,follow,nofollow。默认是all。 举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;robots&quot;content=&quot;none&quot;&gt; </span><br></pre></td></tr></table></figure>

<p><strong>具体参数如下：</strong> 信息参数为all：文件将被检索，且页面上的链接可以被查询； 信息参数为none：文件将不被检索，且页面上的链接不可以被查询； 信息参数为index：文件将被检索； 信息参数为follow：页面上的链接可以被查询； 信息参数为noindex：文件将不被检索，但页面上的链接可以被查询； 信息参数为nofollow：文件将被检索，但页面上的链接不可以被查询； <strong>D、author(作者)</strong> 说明：标注网页的作者 举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;author&quot;content=&quot;root,root@xxxx.com&quot;&gt; </span><br></pre></td></tr></table></figure>

<p><strong>E、generator</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;generator&quot;content=&quot;信息参数&quot;/&gt; </span><br></pre></td></tr></table></figure>

<p>meta标签的generator的信息参数，代表说明网站的采用的什么软件制作。 <strong>F、COPYRIGHT</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;META NAME=&quot;COPYRIGHT&quot;CONTENT=&quot;信息参数&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>meta标签的COPYRIGHT的信息参数，代表说明网站版权信息。 <strong>G、revisit-after</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;META name=&quot;revisit-after&quot;CONTENT=&quot;7days&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>revisit-after代表网站重访,7days代表7天，依此类推。 <strong>2、http-equiv属性</strong> http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。 meta标签的http-equiv属性语法格式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;参数&quot;content=&quot;参数变量值&quot;&gt;； </span><br></pre></td></tr></table></figure>

<p>其中http-equiv属性主要有以下几种参数： <strong>A、Expires(期限)</strong> 说明：可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;expires&quot;content=&quot;Fri,12Jan200118:18:18GMT&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>注意：必须使用GMT的时间格式。 <strong>B、Pragma(cache模式)</strong> 说明：禁止浏览器从本地计算机的缓存中访问页面内容。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Pragma&quot;content=&quot;no-cache&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>注意：这样设定，访问者将无法脱机浏览。 <strong>C、Refresh(刷新)</strong> 说明：自动刷新并指向新页面。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Refresh&quot;content=&quot;2;URL=http://www.haorooms.com&quot;&gt; //(注意后面的引号，分别在秒数的前面和网址的后面) </span><br></pre></td></tr></table></figure>

<p>注意：其中的2是指停留2秒钟后自动刷新到URL网址。 <strong>D、Set-Cookie(cookie设定)</strong> 说明：如果网页过期，那么存盘的cookie将被删除。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Set-Cookie&quot;content=&quot;cookie value=xxx;expires=Friday,12-Jan-200118:18:18GMT；path=/&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>注意：必须使用GMT的时间格式。 <strong>E、Window-target(显示窗口的设定)</strong> 说明：强制页面在当前窗口以独立页面显示。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Window-target&quot;content=&quot;_top&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>注意：用来防止别人在框架里调用自己的页面。 <strong>F、content-Type(显示字符集的设定)</strong> 说明：设定页面使用的字符集。 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;content-Type&quot;content=&quot;text/html;charset=gb2312&quot;&gt; </span><br></pre></td></tr></table></figure>

<p><strong>具体如下：</strong> meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文； meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文； meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文； meta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文； meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文； meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码； <strong>G、content-Language（显示语言的设定）</strong> 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Language&quot;content=&quot;zh-cn&quot;/&gt; </span><br></pre></td></tr></table></figure>

<p><strong>H、Cache-Control指定请求和响应遵循的缓存机制。</strong> Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、on ly-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如下 Public指示响应可被任何缓存区缓存 Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效 no-cache指示请求或响应消息不能缓存 no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。 max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应 min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应 max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。 <strong>J、http-equiv=”imagetoolbar”</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;imagetoolbar&quot;content=&quot;false&quot;/&gt; </span><br></pre></td></tr></table></figure>

<p>指定是否显示图片工具栏，当为false代表不显示，当为true代表显示。 <strong>K、Content-Script-Type</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Meta http-equiv=&quot;Content-Script-Type&quot;Content=&quot;text/javascript&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>W3C网页规范，指明页面中脚本的类型。 <strong>HTML &lt; base &gt; 标签</strong> 为页面上所有链接指定默认打开方式： 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;base target=&quot;_self&quot;&gt;</span><br></pre></td></tr></table></figure>





<h4 id="html实现打电话-发短信-发邮件"><a href="#html实现打电话-发短信-发邮件" class="headerlink" title="html实现打电话,发短信,发邮件"></a>html实现打电话,发短信,发邮件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;tel:10086&quot;&gt;拨打电话&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;sms:18945086283?body=短信内容&quot;&gt;发送短信&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;mailto:mail@mail.com&quot;&gt;发送邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2021/02/19/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596">git基本操作，一篇文章就够了！</a></p>
<p>git的通用操作流程如下图（来源于网络）</p>
<h4 id="主要涉及到四个关键点："><a href="#主要涉及到四个关键点：" class="headerlink" title="主要涉及到四个关键点："></a>主要涉及到四个关键点：</h4><ol>
<li><p>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</p>
</li>
<li><p>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</p>
</li>
<li><p>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</p>
<p>在<code>Git/RybyDemo/grit/.git/refs/heads</code> 目录中修改master:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ebdec5ff037c7368b2b1827fadc66741d1ed14ed</span><br></pre></td></tr></table></figure>

<p>修改<code>HEAD</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ref:refs/heads/master</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</p>
</li>
</ol>
<p>更细节的来看：</p>
<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>
<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>
<ol>
<li><p>git管理配置的命令；</p>
<p><strong>几个核心存储区的交互命令：</strong></p>
</li>
<li><p>工作区与暂存区的交互；</p>
</li>
<li><p>暂存区与本地仓库（分支）上的交互；</p>
</li>
<li><p>本地仓库与远程仓库的交互。</p>
</li>
</ol>
<h4 id="2-git配置命令"><a href="#2-git配置命令" class="headerlink" title="2. git配置命令"></a>2. git配置命令</h4><p>查询配置信息</p>
<ol>
<li>列出当前配置：<code>gitconfig     --list</code>;</li>
<li>列出repository配置：<code>gitconfig --local     --list</code>;</li>
<li>列出全局配置：<code>gitconfig     --global --list</code>;</li>
<li>列出系统配置：<code>gitconfig     --system --list</code>;</li>
</ol>
<p>第一次使用git，配置用户信息</p>
<ol>
<li>配置用户名：<code>gitconfig     --global user.name &quot;your name&quot;</code>;</li>
<li>配置用户邮箱：<code>gitconfig     --global user.email &quot;youremail@github.com&quot;</code>;</li>
</ol>
<p>其他配置</p>
<ol>
<li>配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：<code>gitconfig --global     merge.toolvimdiff</code>;</li>
<li>配置git命令输出为彩色的：<code>gitconfig     --global color.ui auto</code>;</li>
<li>配置git使用的文本编辑器：<code>gitconfig     --global core.editor vi</code>;</li>
</ol>
<h4 id="3-工作区上的操作命令"><a href="#3-工作区上的操作命令" class="headerlink" title="3. 工作区上的操作命令"></a>3. 工作区上的操作命令</h4><p>新建仓库</p>
<ol>
<li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>gitinit</code>；</li>
<li>从远程git仓库复制项目：<code>git clone     &lt;url&gt;</code>，如：git clone git://github.com/wasd/example.git;克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone     git://github.com/wasd/example.git mygit</code>；</li>
</ol>
<p>提交</p>
<ol>
<li>提交工作区所有文件到暂存区：<code>git     add .</code></li>
<li>提交工作区中指定文件到暂存区：<code>git     add &lt;file1&gt;&lt;file2&gt; ...</code>;</li>
<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git     add [dir]</code>;</li>
</ol>
<p>撤销</p>
<ol>
<li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>gitrm&lt;file1&gt;&lt;file2&gt;</code>;</li>
<li>从暂存区中删除文件，但是工作区依然还有该文件:<code>gitrm --cached &lt;file&gt;</code>;</li>
<li>取消暂存区已经暂存的文件：<code>git     reset HEAD &lt;file&gt;...</code>;</li>
<li>撤销上一次对文件的操作：<code>git     checkout --&lt;file&gt;</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li>
<li>隐藏当前变更，以便能够切换分支：<code>git     stash</code>；</li>
<li>查看当前所有的储藏：<code>git     stash list</code>；</li>
<li>应用最新的储藏：<code>git     stash apply</code>，如果想应用更早的储藏：<code>git     stash apply stash@&#123;2&#125;</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply     --index</code>;</li>
<li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git     stash drop stash&#123;0&#125;</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git     stash pop</code>;</li>
<li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git     stash show -p stash@&#123;0&#125; | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p     | git apply -R</code>；</li>
</ol>
<p>更新文件</p>
<ol>
<li>重命名文件，并将已改名文件提交到暂存区：<code>git mv     [file-original] [file-renamed]</code>;</li>
</ol>
<p>查新信息</p>
<ol>
<li>查询当前工作区所有文件的状态：<code>git     status</code>;</li>
<li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git     diff &lt;file-name&gt;</code>;</li>
</ol>
<h4 id="4-暂存区上的操作命令"><a href="#4-暂存区上的操作命令" class="headerlink" title="4. 暂存区上的操作命令"></a>4. 暂存区上的操作命令</h4><p>提交文件到版本库</p>
<ol>
<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git     commit -m &quot;commit_info&quot;</code>;</li>
<li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git     commit -a -m &quot;commit_info&quot;</code>;</li>
<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git     commit --amend</code>;</li>
</ol>
<p>查看信息</p>
<ol>
<li>比较暂存区与上一版本的差异：<code>git     diff --cached</code>;</li>
<li>指定文件在暂存区和本地仓库的不同：<code>git     diff &lt;file-name&gt; --cached</code>;</li>
<li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git     log -p -2</code>;</li>
</ol>
<p>打标签</p>
<p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
<ol>
<li>列出现在所有的标签：<code>git     tag</code>;</li>
<li>使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：<code>git tag -l     &quot;v1.4.2.*&quot;</code>;</li>
<li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4     -m &quot;my version 1.4&quot;</code>;</li>
<li>使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git     show v1.4</code>;</li>
<li>如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5     -m &quot;my signed 1.5 tag&quot;</code>;</li>
<li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li>
<li>创建一个轻量级标签的话，就直接使用git tag命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git     tag v1.5</code>;</li>
<li>将标签推送到远程仓库中：git push origin ，如<code>git push origin     v1.5</code>；</li>
<li>将本地所有的标签全部推送到远程仓库中：<code>git     push origin --tags</code>;</li>
</ol>
<p>分支管理</p>
<ol>
<li>创建分支：<code>git     branch &lt;branch-name&gt;</code>，如<code>git     branch testing</code>；</li>
<li>从当前所处的分支切换到其他分支：<code>git     checkout &lt;branch-name&gt;</code>，如<code>git     checkout testing</code>；</li>
<li>新建并切换到新建分支上：<code>git     checkout -b &lt;branch-name&gt;</code>;</li>
<li>删除分支：<code>git     branch -d &lt;branch-name&gt;</code>；</li>
<li>将当前分支与指定分支进行合并：<code>git     merge &lt;branch-name&gt;</code>;</li>
<li>显示本地仓库的所有分支：<code>git     branch</code>;</li>
<li>查看各个分支最后一个提交对象的信息：<code>git     branch -v</code>;</li>
<li>查看哪些分支已经合并到当前分支：<code>git     branch --merged</code>;</li>
<li>查看当前哪些分支还没有合并到当前分支：<code>git     branch --no-merged</code>;</li>
<li>把远程分支合并到当前分支：<code>git     merge &lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git merge     origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>
<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b     &lt;branch-name&gt;&lt;remote-name&gt;/&lt;branch-name&gt;</code>，如<code>git checkout -b     serverfix origin/serverfix</code>;</li>
<li>从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git     push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git     pull</code>；</li>
<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git     rebase &lt;rebase-branch&gt;&lt;branch-name&gt;</code>，如<code>git rebase master     server</code>，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto     &lt;rebase-branch&gt;&lt;feature branch&gt;&lt;sub-feature-branch&gt;</code>，如<code>git rebase --onto     master server client</code>；使用rebase操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作</strong>；</li>
</ol>
<h4 id="5-本地仓库上的操作"><a href="#5-本地仓库上的操作" class="headerlink" title="5.本地仓库上的操作"></a>5.本地仓库上的操作</h4><ol>
<li>查看本地仓库关联的远程仓库：<code>git     remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</li>
<li>添加远程仓库，一般会取一个简短的别名：<code>git     remote add [remote-name] [url]</code>，比如：<code>git remote     add example git://github.com/example/example.git</code>;</li>
<li>从远程仓库中抓取本地仓库中没有的更新：<code>git     fetch [remote-name]</code>，如<code>git     fetch origin</code>;使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git     pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</li>
<li>将本地仓库某分支推送到远程仓库上：<code>git     push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git     push &lt;remote-name&gt;&lt;local-branch&gt;:&lt;remote-branch&gt;</code>，如<code>git push origin     serverfix:awesomebranch</code>;如果想删除远程分支：<code>git     push [romote-name] :&lt;remote-branch&gt;</code>，如<code>git push origin     :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</li>
<li>查看远程仓库的详细信息：<code>git     remote show origin</code>；</li>
<li>修改某个远程仓库在本地的简称：<code>git     remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</li>
<li>移除远程仓库：<code>git     remote rm [remote-name]</code>；</li>
</ol>
<h4 id="6-忽略文件-gitignore"><a href="#6-忽略文件-gitignore" class="headerlink" title="6. 忽略文件.gitignore"></a>6. 忽略文件.gitignore</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。如下例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略 build/ 目录下的所有文件</span><br><span class="line">build/</span><br><span class="line"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># 忽略 doc/ 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc/**/*.txt</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>参考资料</p>
<p><a href="">非常详细准确的git学习资料</a>；</p>
<p><a href="">git-cheat-sheet中文版</a></p>
<p><a href="">命令总结，资料一般，不够详细，作参考</a></p>
<p><a href="">常用命令很全</a></p>
<p> 作者：你听___<br> 链接：<a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a><br> 来源：掘金<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>阮一峰网络日志：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<h3 id="1-常用-Git-命令清单"><a href="#1-常用-Git-命令清单" class="headerlink" title="1.常用 Git 命令清单"></a>1.常用 Git 命令清单</h3><p>我每天使用 Git ，但是很多命令记不住。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="../images/clip_image005.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<p>§ Workspace：工作区</p>
<p>§ Index / Stage：暂存区</p>
<p>§ Repository：仓库区（或本地仓库）</p>
<p>§ Remote：远程仓库</p>
<h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ gitinit</span><br><span class="line"> </span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ gitinit[project-name]</span><br><span class="line"> </span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 显示当前的Git配置</span><br><span class="line">$ gitconfig--list</span><br><span class="line"> </span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ gitconfig-e [--global]</span><br><span class="line"> </span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ gitconfig[--global] user.name &quot;[name]&quot;</span><br><span class="line">$ gitconfig[--global]user.email&quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1][file2]...</span><br><span class="line"> </span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"> </span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"> </span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"> </span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ gitrm[file1][file2]...</span><br><span class="line"> </span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ gitrm--cached [file]</span><br><span class="line"> </span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original][file-renamed]</span><br></pre></td></tr></table></figure>

<h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"> </span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1][file2]...-m [message]</span><br><span class="line"> </span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"> </span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"> </span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"> </span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1][file2]...</span><br></pre></td></tr></table></figure>

<h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"> </span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"> </span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch][commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch][remote-branch]</span><br><span class="line"> </span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"> </span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"> </span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch][remote-branch]</span><br><span class="line"> </span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"> </span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"> </span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"> </span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr[remote/branch]</span><br></pre></td></tr></table></figure>

<h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"> </span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag][commit]</span><br><span class="line"> </span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"> </span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"> </span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"> </span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote][tag]</span><br><span class="line"> </span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote]--tags</span><br><span class="line"> </span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch][tag]</span><br></pre></td></tr></table></figure>

<h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"> </span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"> </span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"> </span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"> </span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ gitwhatchanged[file]</span><br><span class="line"> </span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"> </span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5--pretty --oneline</span><br><span class="line"> </span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ gitshortlog-sn</span><br><span class="line"> </span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"> </span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"> </span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"> </span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"> </span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat&quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"> </span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"> </span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"> </span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ gitreflog</span><br></pre></td></tr></table></figure>

<h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"> </span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"> </span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"> </span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname][url]</span><br><span class="line"> </span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote][branch]</span><br><span class="line"> </span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote][branch]</span><br><span class="line"> </span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote]--force</span><br><span class="line"> </span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote]--all</span><br></pre></td></tr></table></figure>

<h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"> </span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit][file]</span><br><span class="line"> </span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"> </span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"> </span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"> </span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"> </span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"> </span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>

<h3 id="Git-W3C"><a href="#Git-W3C" class="headerlink" title="Git-W3C"></a>Git-W3C</h3><p><a href="https://www.w3cschool.cn/git/git-tutorial.html">Git教程</a></p>
<p><strong>window平台下， 下载网址：</strong><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p>
<p>安装完之后，在电脑 开始，输入 git 找到 Git Bash</p>
<h3 id="查看git安装目录"><a href="#查看git安装目录" class="headerlink" title="查看git安装目录"></a>查看git安装目录</h3><p>有时候需要知道Git在电脑中的安装位置，这里简单介绍下:</p>
<ul>
<li><strong>Mac平台</strong>:在命令行中输入which git, 就会显示git的安装位置了;</li>
<li><strong>Windows平台</strong>:打开cmd,输入where git就会显示git的安装路径了.</li>
</ul>
<p>查看git的安装所在目录：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">where git</span><br></pre></td></tr></table></figure>

<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>配置个人的用户名称和电子邮件地址：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;w3c&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> w3c@w3cschool.<span class="property">cn</span> </span><br></pre></td></tr></table></figure>

<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p>
<p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config user.<span class="property">name</span> </span><br></pre></td></tr></table></figure>



<h3 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h3><p>一般工作流程如下：</p>
<ul>
<li>克隆 Git 资源作为工作目录。</li>
<li>在克隆的资源上添加或修改文件。</li>
<li>如果其他人修改了，你可以更新资源。</li>
<li>在提交前查看修改。</li>
<li>提交修改。</li>
<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1625735948386-2d856f3e-28c4-444f-b636-66e4a3f90d2b.png" alt="img"></p>
<hr>
<h3 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h3><ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1625735948884-5d823c71-5984-442e-97fe-ea336d058dc3.png" alt="img"></p>
<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>
<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>
<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>
<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>
<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>
<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>
<p>当执行 “git rm –cached “ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>
<p>当执行 “git checkout .” 或者 “git checkout – “ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>
<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD “ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<hr>
<h3 id="Git-创建仓库"><a href="#Git-创建仓库" class="headerlink" title="Git 创建仓库"></a>Git 创建仓库</h3><p>使用您当前目录作为Git仓库，我们只需使它初始化。</p>
<p>初始化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>使用我们指定的目录作为Git仓库：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init <span class="title function_">winneyGit</span>(指定的目录名称)</span><br></pre></td></tr></table></figure>

<p>执行完这命令，在目录下新建一个winneyGit文件夹</p>
<h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">git</span>:<span class="comment">//github.com/schacon/grit.git </span></span><br></pre></td></tr></table></figure>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone <span class="attr">git</span>:<span class="comment">//github.com/schacon/grit.git mygrit</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5-笔记</title>
    <url>/2021/09/02/HTML5-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h4><ul>
<li>拖放(Drag and drop ) API.</li>
<li>语义化更好的内容标签 (header、nav、 footer、aside、article、 section )。</li>
<li>音频、视频 (audio、 video) API</li>
<li>画布( Canvas ) API.</li>
<li>地理(Geolocation) API.</li>
<li>本地离线存储（localStorage），即长期存储数据，浏览器关闭后数据不丢失。</li>
<li>会会话存储(sessionStorage），即数据在浏览器关闲后自动删除。</li>
<li>表单控件包括 calendar、date、time 、 email、url、 search</li>
<li>新的技术包括 webworker、 websocket、Geolocation.</li>
</ul>
<h4 id="HTML5-新增的API"><a href="#HTML5-新增的API" class="headerlink" title="HTML5 新增的API"></a>HTML5 新增的API</h4><p>新增的功能 API 包括 Media API、Text Track API、 Application Cache API、 User Interaction、Data Transfer API、 Command API.、Constraint Validation API、History API.</p>
<h4 id="HTML5移除元素"><a href="#HTML5移除元素" class="headerlink" title="HTML5移除元素"></a>HTML5移除元素</h4><p>移除的元素如下：</p>
<ul>
<li>纯表现的元素，包括 basefont、big、center、 font、 s、 strike、tt、 u</li>
<li>对可用性产生负面影响的元素，包括 frame、frameset、 Noframes</li>
</ul>
<h4 id="新的HTML5-文档类型和字符集"><a href="#新的HTML5-文档类型和字符集" class="headerlink" title="新的HTML5 文档类型和字符集"></a>新的HTML5 文档类型和字符集</h4><p>HTML5文档类型是<code>&lt;!doctype html&gt;</code><br>HTML5 使用的宇符集<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
<h4 id="HTML5-的离线存储"><a href="#HTML5-的离线存储" class="headerlink" title="HTML5 的离线存储"></a>HTML5 的离线存储</h4><ul>
<li>localStorage，可长期存储数据，即浏览器关闭后数据不丢失。</li>
<li>sessionStorage，数据在浏览器关闭后自动删除。</li>
</ul>
<h4 id="HTML5-的form关闭自动补全功能"><a href="#HTML5-的form关闭自动补全功能" class="headerlink" title="HTML5 的form关闭自动补全功能"></a>HTML5 的form关闭自动补全功能</h4><p>将不想要提示的form 元素下的 input 元素的autocomplete 属性设置为off.</p>
<h4 id="HTML5-页面中嵌入音频"><a href="#HTML5-页面中嵌入音频" class="headerlink" title="HTML5 页面中嵌入音频"></a>HTML5 页面中嵌入音频</h4><blockquote>
<p>支持的格式包括 MP3、 Wav 和Ogg等</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  &lt;source sr=&quot;icketang.mp3&quot; type=&quot;audio/mpeg&quot;&gt;</span><br><span class="line">  Your browser does&#x27;nt support audio embedding feature</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<h4 id="HTML5-页面中嵌入视频"><a href="#HTML5-页面中嵌入视频" class="headerlink" title="HTML5 页面中嵌入视频"></a>HTML5 页面中嵌入视频</h4><blockquote>
<p>支持的格式包括MP4、 WebM和Ogg 等</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video width=&quot;450&quot; height=&quot;340&quot; controls&gt;</span><br><span class="line">  &lt;source src=&quot;icketang.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">  Your browser does&#x27;nt support video embedding feature.</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<h4 id="HTML5-引入新的表单属性"><a href="#HTML5-引入新的表单属性" class="headerlink" title="HTML5 引入新的表单属性"></a>HTML5 引入新的表单属性</h4><p>datalist、datetime、output、keygen、date、month、week、time、number、 range、 emailurl.</p>
<h4 id="HTML5-应用缓存和常规的-HTML-浏览器缓存的差别"><a href="#HTML5-应用缓存和常规的-HTML-浏览器缓存的差别" class="headerlink" title="HTML5 应用缓存和常规的 HTML 浏览器缓存的差别"></a>HTML5 应用缓存和常规的 HTML 浏览器缓存的差别</h4><p>HTML5应用缓存最关键的就是支持离线应用，可荻取少数或者全部网站内容包括 HTTML、CSS、图像和 JavaScript 脚本 并存在本地。该特性提升了网站的性能，可通过如下方式实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">  &lt;html manifest=&quot;example.appcache&quot;&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与传统的浏览器缓存比较，该特性并不强制要求用户访问网站</p>
</blockquote>
<blockquote>
<p>HTML5 没有使用 SGML 或者 XHTML，它是一个全新的类型，因此不需要参考DTD。对于HTML5，仅须放置下面的文档类型代码，让浏览器识别HTML5 文档。<br>如果不放入＜！doctype html&gt;标签，HITML5 不会工作。浏览器将不能识别出它是HTML文档，同时HTMLS 的标签将不能正常工作。</p>
</blockquote>
<h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>它是 Web 应用程序的传输协议，提供了双向的、按序到达的数据流。它是HTML5新增的协议，webSocket 的连接是持久的，它在客户端和服务器之间保特双工连接，服务器的更新可以及时推送到客户端，而不需要客户端以一定的时间间隔去轮询</p>
<h4 id="实现浏览器内多个标签页之间的通信"><a href="#实现浏览器内多个标签页之间的通信" class="headerlink" title="实现浏览器内多个标签页之间的通信"></a>实现浏览器内多个标签页之间的通信</h4><p>在标签页之间，调用 localstorge、cookies 等数据存储，可以实现标签页之问的通信</p>
<h4 id="localStorage-和cookie-的区别"><a href="#localStorage-和cookie-的区别" class="headerlink" title="localStorage 和cookie 的区别"></a>localStorage 和cookie 的区别</h4><p>​        localStorage 的概念和 cookie 相似，区别是 localStorage 是为了更大容量的存储设计的。cookie 的大小是受限的，并且每次请求一个新页面时，cookie 都会被发送过去，这样无形中浪费了带宽。另外，cookie 还需要指定作用域，不可以跨域调用。<br>​        除此之外，localStorage 拥有 setltem、getltem、removeltem、clear 等方法，cookie 则需要前端开发者自己封装 setCookie 和getcookie。但cookie 也是不可或缺的，因为 cookie的作用是与服务器进行交互，并且还是 HTTP 规范的一部分，而localStorage 仅因为是为了在本地“存储”数据而已，无法跨浏览器使用。</p>
<h4 id="cookie-的特点"><a href="#cookie-的特点" class="headerlink" title="cookie 的特点"></a>cookie 的特点</h4><p>cookie 虽然为持久保存客户湍数据提供了方便，分担了服务器存储的负担，但是有以下局限性。</p>
<ol>
<li>每个特定的域名下最多生成20个 cookie。</li>
<li>IE6 或更低版本最多有20个cookie。</li>
<li>I7和之后的版本最多可以有50个 cookie.</li>
<li> Firefox 最多可以有50个cookie。</li>
<li>Chrome 和 Safari 没有做硬性限制。</li>
</ol>
<p>IE和Opera 会清理近期最少使用的cookie， Firefox 会随机清理 cookie.<br>cookie 最大为 4096字节，为了兼容性，一般不能超过 4095 字节。<br>IE提供了一种存储方式，可以让用户数据持久化，叫作userdata，从IE5.0 就开始支持此功能。每块数据最多 128KB，每个域名下最多1MB。这个持久化数据放在缓存中，如果果缓存没有被清理，就会一直存在。<br>优点如下：</p>
<ol>
<li>通过良好的编程，控制保存在cookie 中的 session 对象的大小</li>
<li>通过加密和安全传输技术（SSL)，降低cookie被破解的可能性。</li>
<li>只在cookie 中存放不敏感数据，即使被盗也不会有重大损失。</li>
<li>控制cookie 的生命周期，使之不会永远有效。数据偷盗者很可能得到一个过期的cookie.</li>
</ol>
<p>缺点如下：</p>
<ol>
<li>scookie” 的数量和长度有限制。每个domain 最多只能有20条cookie，每个cookie 的长度不能超过 4KB，否则会被截掉。</li>
<li>安全性问题。如果cookie 被别人拦截了，就可以取得所有的session 信息。即使加密也于事无补，因为拦截者并不需要知道cookie 的意义，他只要原样转发 cookie就可以达到目的。</li>
<li>有些状态不可能保存在客产端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果把这个计数器保存在客户端，那么它起不到任何作用。</li>
</ol>
<h4 id="cookie-和session-的区别"><a href="#cookie-和session-的区别" class="headerlink" title="cookie 和session 的区别"></a>cookie 和session 的区别</h4><ol>
<li>cookie 数据存放在客户的浏览器上，session 数据存放在服务器上。</li>
<li>cookie 不是很安全，别人可以分析存放在本地的cookie 并进行 cookie 欺骗。考虑到安全问题应当使用 session。</li>
<li>session 会在一定时问内保存在服务器上。当访问增多时，会占用较多服务器的资源。为了减轻服务器的负担，应当使用 cookie。</li>
<li>单个cookie 保存的数据不能超过 4KB，很多浏览器都限制一个站,点最多保存20 个cookie.</li>
</ol>
<blockquote>
<p>建议可以将登录信息等重要信息存放在session 中，其他信息（如果需要保留）可以存放在cookie 中</p>
</blockquote>
<h4 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h4><p>SVG即可缩放矢量因形(Scalable Vector Graphics )。它是基于文本的图形语言，使用文本、线条、点等来绘制图像，这使得它轻便、显示迅速</p>
<h4 id="Canvas-和-SVG-的区别"><a href="#Canvas-和-SVG-的区别" class="headerlink" title="Canvas 和 SVG 的区别"></a>Canvas 和 SVG 的区别</h4><ol>
<li>一旦 Canvas 绘制完成将不能访问像素或操作它；任何使用SVG绘制的形状都能被记忆和操作，可以被浏览器再次显示。</li>
<li>Canvas 对绘制动画和游戏非常有利；SVG对创建图形（如CAD）非常有利</li>
<li>因为不需要记住以后事情，所以 Canvas 运行更快；因为为了之后的操作，SVG需要记录坐标，所以运行比较缓慢。</li>
<li>在Canvas 中不能为绘制对象邬定相关事件；在SVG 中可以为绘制对象绑定相关事件</li>
<li>Canvas绘制出的是位图，因此与分辨率有关；SVG绘制出的是矢量图，因此与分辨率无关。</li>
</ol>
<h4 id="HTML5-中实现应用缓存"><a href="#HTML5-中实现应用缓存" class="headerlink" title="HTML5 中实现应用缓存"></a>HTML5 中实现应用缓存</h4><p>首先，需要指定”manifest” 文件，“manifest”文件帮助你定义缓存如何工作。</p>
<p>“manifest”文件的结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"># version 1.0</span><br><span class="line">/demo.css</span><br><span class="line">/demo.js</span><br><span class="line">/demo.png</span><br><span class="line">所有manifest 文件都以&quot;CACHE MANIFEST&quot;语句开始。</span><br><span class="line">＃(散列标签）有助于提供缓存文件的版本。</span><br><span class="line">manifest 文件的内容类型应是&quot;text/cache-manifest&quot;</span><br></pre></td></tr></table></figure>

<p>创建一个缓存manifest 文件后，在HTML 页面中提供manifest 链接，代码如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html manifest=&quot;icketang.appcache&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>第一次运行以上文件时，它会添加到浏览器应用缓存中，在服务器宕机时，页面从应用缓存中获取数据</p>
<h4 id="刷新浏览器的应用缓存"><a href="#刷新浏览器的应用缓存" class="headerlink" title="刷新浏览器的应用缓存"></a>刷新浏览器的应用缓存</h4><p>应用缓存通过变更“#”标签后的版本号来刷新，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"># version 2.0</span><br><span class="line">/icketang.css</span><br><span class="line">/icketang. js</span><br><span class="line">/icketang.png</span><br><span class="line">NETWORK</span><br><span class="line">login.php</span><br></pre></td></tr></table></figure>

<h4 id="应用缓存中的回退"><a href="#应用缓存中的回退" class="headerlink" title="应用缓存中的回退"></a>应用缓存中的回退</h4><p>应用缓存中的回退会帮助你指定在服务器不可访问时，品示某文件。例如在下面的manifest 文件中，如果用户输入了“/home”，同时服务器不可到达，“404.html”文件应送达</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FAIIBACK:</span><br><span class="line">/home/ /404. html</span><br></pre></td></tr></table></figure>

<h4 id="应用缓存中网络命令的作用"><a href="#应用缓存中网络命令的作用" class="headerlink" title="应用缓存中网络命令的作用"></a>应用缓存中网络命令的作用</h4><p>网络命令描述不需要缓存的文件，例如以下代码中”login.php”始终都不应该缓存或者离线访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEIWORK:</span><br><span class="line">login.php</span><br></pre></td></tr></table></figure>

<h4 id="WebSql"><a href="#WebSql" class="headerlink" title="WebSql"></a>WebSql</h4><p>Websql 是一个在浏览器客户端的结构关系数据库，是浏览器内的本地 RDBMS（关系型数据库管理系统），可以使用SQL 查询。</p>
<blockquote>
<p>websql 不是HTML5 的一个规范，这个规范是基于 SOLite</p>
</blockquote>
<h4 id="HTML5-实现跨域"><a href="#HTML5-实现跨域" class="headerlink" title="HTML5 实现跨域"></a>HTML5 实现跨域</h4><p>在服务器端设置允许在其他域名下访问，例如允许所有域名访问以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;,</span><br><span class="line">response.setHeader(&quot;Access-Control-Allow-Methods&quot;,&quot;pOST&quot;)</span><br><span class="line">response. setHeader (&quot;Access-Control-Allow-Headers&quot; &quot;x-requested-with, content-type&quot;) ;</span><br></pre></td></tr></table></figure>





<h2 id="新增语义标签"><a href="#新增语义标签" class="headerlink" title="新增语义标签"></a>新增语义标签</h2><table>
<thead>
<tr>
<th>区块标签</th>
<th>内容分组标签</th>
<th>文本级别标签</th>
</tr>
</thead>
<tbody><tr>
<td>article</td>
<td>main</td>
<td>time</td>
</tr>
<tr>
<td>header</td>
<td>figure</td>
<td></td>
</tr>
<tr>
<td>footer</td>
<td>figcaption</td>
<td></td>
</tr>
<tr>
<td>nav</td>
<td></td>
<td></td>
</tr>
<tr>
<td>aside</td>
<td></td>
<td></td>
</tr>
<tr>
<td>section</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;figure&gt;</span><br><span class="line">	&lt;img src=&quot;images/caffe-2.jpg&quot; alt=&quot;卡布奇诺&quot;/&gt;&lt;figcaption&gt;卡布奇诺&lt;/figcaption&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML5-%E7%AC%94%E8%AE%B0/coffee.png" alt="img"></h3><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>header标签的使用:</p>
<ul>
<li>一个文档中可以包含多于一个的header标签</li>
<li>header标签不一定非要显示在页面的上方，它的内容决定这里需要使用header标签，位置并不重要</li>
</ul>
<p>—些使用aside的例子:</p>
<ul>
<li>页面侧边栏</li>
<li>广告</li>
<li>友情链接</li>
<li>引语(内容摘要)</li>
</ul>
<p>一个主题性的内容分组，通常包含一个头部( header ) ,可能还会有一个尾部( footer )。</p>
<h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><ul>
<li>应用更广泛，只要你想为一个区域定义一个样式，就可以使用div标签</li>
</ul>
<h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><ul>
<li>包含的内容是一个明确的主题，通常有标题区域</li>
</ul>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><ul>
<li>显示页面的主体内容。</li>
<li>每个页面只能包含一个main标签。</li>
<li>main标签中不包含网站标题、logo、主导航、版权声明等信息。</li>
</ul>
<p>HTML5中文本级别的语义标签</p>
<ul>
<li>time（表示一个日期，或者一个时间，或者同时表示一个日期和时间值）</li>
<li>i和b</li>
<li>em和strong</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;time datetime=&quot;2015-06-30&quot;&gt;2015年6月30日&lt;/time&gt;</span><br><span class="line"></span><br><span class="line">// datetime=&quot;2015-06-30&quot;：</span><br><span class="line">// 这里是一个固定格式的日期或时间值，可以被搜索引擎、屏幕阅读器等方便的识别。</span><br><span class="line"></span><br><span class="line">// 2015年6月30日：</span><br><span class="line">// 标签中间的文本只要人可以识别就可以，例如“今天”，“1小时前”，“结婚纪念日”，“情人节”等</span><br><span class="line">   如果没有定义datetime属性，则这里的文本需要是一个固定格式</span><br></pre></td></tr></table></figure>

<h4 id="time的格式"><a href="#time的格式" class="headerlink" title="time的格式"></a>time的格式</h4><ul>
<li>指定年月日：2015-06-30</li>
<li>指定年月：2015-06</li>
<li>年份可以是两位数字：15-06-30</li>
<li>指定时间（ 24小时制)：14:54:39</li>
<li>指定时间(24小时制）：14:54</li>
<li>指定日期和时间：2015-06-30 14:54:39</li>
<li>T表示时间，意义同上:2015-06-30T14:54:39</li>
<li>Z表示使用UTC标准时间：2015-06-30T14:54Z</li>
</ul>
<p>注：utc标准时间+8小时=北京时间</p>
<h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><p>HTML4：修饰文字样式的，将文字显示为<em>斜体</em>文本</p>
<p>HTML5：表示强调不同的情绪或声音，也可以表示技术术语、生物分类、来自另一种语言的成语或习语、一个想法等等</p>
<h3 id="b"><a href="#b" class="headerlink" title="b"></a>b</h3><p>HTML4：修饰文字样式的，将文字显示为粗体文本</p>
<p>HTML5：表示文档中的关键字、商品名称等</p>
<h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>标签中的内容是用来强调的重点内容</p>
<p>会被浏览器显示成<em>斜体</em>文本</p>
<h3 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h3><p>表示非常重要、严重性或内容的紧迫性</p>
<p>会被浏览器显示成<strong>粗体</strong>文本</p>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>如果你只是单纯的想要把文字的样式显示为斜体或粗体请不要使用这几个语义标签</p>
<p>w3C建议我们要在css样式表中定义文字样式</p>
<h3 id="small"><a href="#small" class="headerlink" title="small"></a>small</h3><p>small标签在HTML5中的语义：</p>
<p>注释或批注说明</p>
<h3 id="HTML5之前Web上的视频格式"><a href="#HTML5之前Web上的视频格式" class="headerlink" title="HTML5之前Web上的视频格式"></a>HTML5之前Web上的视频格式</h3><table>
<thead>
<tr>
<th>格式</th>
<th>文件</th>
</tr>
</thead>
<tbody><tr>
<td>AVI</td>
<td>.avi</td>
</tr>
<tr>
<td>WMV</td>
<td>.wmv</td>
</tr>
<tr>
<td>QuickTime</td>
<td>.mov</td>
</tr>
<tr>
<td>Realvideo</td>
<td>.rm</td>
</tr>
<tr>
<td>Mpeg-4</td>
<td></td>
</tr>
<tr>
<td>Flash</td>
<td></td>
</tr>
</tbody></table>
<p>浏览器要想播放视频，必须预先安装对应的浏览器插件</p>
<h4 id="embed标签"><a href="#embed标签" class="headerlink" title="embed标签"></a>embed标签</h4><p>在HTML4中不是web的标准</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;embed type=&quot;application/x-shockwave-flash&quot;</span><br><span class="line">src=&quot;zq.swf&quot; width=&quot;508&quot; height=&quot;430&quot;&gt;</span><br><span class="line">&lt;/embed&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器要想播放视频，必须预先安装对应的浏览器插件</p>
<h4 id="object标签"><a href="#object标签" class="headerlink" title="object标签"></a>object标签</h4><p>在低版本IE中无法工作(&lt;= IE8 )</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object type=&quot;application/x-shockwave-flash&quot;data=&quot;zq.swf&quot; width=&quot;500&quot; height=&quot;430&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<p>除了低版本的IE (&lt;= IE 10)，无法工作在任何其它的浏览器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-44455354000e&quot;</span><br><span class="line">width=&quot;500&quot; height=&quot;430&quot;&gt;</span><br><span class="line">  &lt;param name=&quot;src&quot; value=&quot;zq.swf”/&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<h3 id="为了兼容所有的浏览器"><a href="#为了兼容所有的浏览器" class="headerlink" title="为了兼容所有的浏览器"></a>为了兼容所有的浏览器</h3><p>使用object兼容所有的浏览器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object classid=&quot;clsid:D27CDB6E-AE6D-11cf-96B8-44455354000o&quot;&quot;</span><br><span class="line">width=&quot;5e0&quot; height=&quot;430&quot;&gt;&lt;!--兼容低版本IE--&gt;</span><br><span class="line">	&lt;param name=&quot;src&quot; value=&quot;zq.swf&quot;/&gt;</span><br><span class="line">  &lt;!--高版本IE和其他浏览器--&gt;</span><br><span class="line">	&lt;object type=&quot;application/x-shockwave-flash&quot;</span><br><span class="line">data=&quot;zq.swf&quot; width=&quot;50o&quot; height=&quot;430&quot;&gt;&lt;/object&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<h3 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h3><ul>
<li>src</li>
<li>controls</li>
<li>autoplay</li>
<li>preload</li>
<li>muted</li>
<li>loop</li>
<li>poster</li>
<li>width和height</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot;lesson-0.mp4&quot; controls autoplay&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p>controls和autoplay是布尔属性：只有属性名，没有属性值。例如∶</p>
<p>如果有autoplay属性，视频就会自动播放</p>
<p>如果没有autoplay属性，视频就不会自动播放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot;lesson-0.mp4&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot;&gt;x&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p>XHTML风格的代码语法更严格</p>
<p>属性必须由属性名和属性值两部分组成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio controls=&quot;controls&quot; src=&quot;1.mp3&quot; autoplay=&quot;autoplay&quot;&gt;</span><br><span class="line">  您的浏览器不支持播放此音频，请使用高级的浏览器</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>您的浏览器不支持这个视频的播放，想观看视频，请用高级的浏览器，chrome、Firefox、Opera、Safari等浏览器。</p>
<p>【这里插入的内容是供不支持video元素的浏览器显示的】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot;pian.mp4&quot; width=&quot;600px&quot; height=&quot;400px&quot; border=&quot;1px solid #ccc&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">&lt;video width=&quot;500&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;pian.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;pian.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">    &lt;!--video 元素允许多个 source 元素。source 元素可以链接不同的视频文件。</span><br><span class="line">    浏览器将使用第一个可识别的格式：--&gt;</span><br><span class="line">  Your browser does not support the video tag.</span><br><span class="line">&lt;/video&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- video的属性有autoplay,controls,height,loop,preload,src,width --&gt;</span><br><span class="line">&lt;!-- &lt;video src=&quot;pian.mp4&quot; width=&quot;500px&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt; --&gt;</span><br><span class="line"> &lt;div style=&quot;text-align:center;&quot;&gt;</span><br><span class="line">  &lt;button onclick=&quot;playPause()&quot;&gt;播放/暂停&lt;/button&gt; </span><br><span class="line">  &lt;button onclick=&quot;makeBig()&quot;&gt;大&lt;/button&gt;</span><br><span class="line">  &lt;button onclick=&quot;makeNormal()&quot;&gt;中&lt;/button&gt;</span><br><span class="line">  &lt;button onclick=&quot;makeSmall()&quot;&gt;小&lt;/button&gt;</span><br><span class="line">  &lt;br /&gt; </span><br><span class="line">  &lt;video id=&quot;video1&quot; width=&quot;420&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;pian.mp4&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class="line">    Your browser does not support HTML5 video.</span><br><span class="line">  &lt;/video&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var myVideo=document.getElementById(&quot;video1&quot;);</span><br><span class="line"></span><br><span class="line">function playPause()</span><br><span class="line">&#123; </span><br><span class="line">if (myVideo.paused) </span><br><span class="line">  myVideo.play(); </span><br><span class="line">else </span><br><span class="line">  myVideo.pause(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">function makeBig()</span><br><span class="line">&#123; </span><br><span class="line">myVideo.width=560; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">function makeSmall()</span><br><span class="line">&#123; </span><br><span class="line">myVideo.width=320; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">function makeNormal()</span><br><span class="line">&#123; </span><br><span class="line">myVideo.width=420; </span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>audio 元素允许多个 source 元素。source 元素可以链接不同的音频文件。浏览器将使用第一个可识别的格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio controls=&quot;controls&quot; autoplay=&quot;autoplay&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;1.mp3&quot; type=&quot;audio/mp3&quot; /&gt;</span><br><span class="line">  &lt;source src=&quot;1.ogg&quot; type=&quot;audio/ogg&quot; /&gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<p>preload属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>详细说明</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>视频播放前，浏览器不会预先下载视频资源，当用户不点击播放按钮时会节省带宽。</td>
</tr>
<tr>
<td>metadata</td>
<td>视频播放前，浏览器不会下载视频资源，但是会获取资源的元数据（视频大小、持续时间、视频格式、前几帧画面)</td>
</tr>
<tr>
<td>auto（默认值）</td>
<td>浏览器根据实际情况动态决定。例如∶在wifi、3G、4G数据漫游等情况下，动态采用不同的加载方案。</td>
</tr>
</tbody></table>
<p>muted：是否默认静音播放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot;lesson-0.mp4&quot; controls muted loop&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p>poster属性设置视频的封面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=&quot;let-it-go.mp4&quot; controls</span><br><span class="line">	poster=&quot;cover.jpg&quot;</span><br><span class="line">	width=&quot;854&quot; height=&quot;480&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HTML5-%E7%AC%94%E8%AE%B0/video.jpeg" alt="img"></p>
<h3 id="浏览器对视频格式的支持"><a href="#浏览器对视频格式的支持" class="headerlink" title="浏览器对视频格式的支持"></a>浏览器对视频格式的支持</h3><p>浏览器对视频格式的支持情况: <a href="http://caniuse.com/#search=video">http://caniuse.com/#search=video</a></p>
<p>浏览器从上到下查找source元素，直到找到它能播放的一种格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video controls&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.mp4&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.webm&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.ogv&quot;&gt;</span><br><span class="line">	&lt;p&gt;对不起，您的浏览器不支持video标签&lt;/p&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<p>对于这里的每个source元素，浏览器都会加载视频文件的元数据，查看能不能播放这个视频，这个过程可能很耗费时间。</p>
<h3 id="兼容所有的浏览器"><a href="#兼容所有的浏览器" class="headerlink" title="兼容所有的浏览器"></a>兼容所有的浏览器</h3><p>embed标签或object标签用在不支持video标签的旧版本额的浏览器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video controls&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.mp4&quot; type=&#x27;video/mp4; codecs=&quot;avc1.42E01E，mp4a.40.2&quot;&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.webm&quot; type=&#x27;video/ogg; codecs=&quot;vp8，vorbis&quot;&#x27;&gt;</span><br><span class="line">  &lt;source src=&quot;tweetsip.ogv&quot; type=&#x27;video/ogg; codecs=&quot;theora，vorbis&quot;&quot;&gt;</span><br><span class="line">  &lt;embed src=&quot;tweetsip.swf&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/embed&gt;</span><br><span class="line">&lt;/video&gt; </span><br></pre></td></tr></table></figure>

<h3 id="HTML5支持的音频格式"><a href="#HTML5支持的音频格式" class="headerlink" title="HTML5支持的音频格式"></a>HTML5支持的音频格式</h3><p>HTML5支持的音频格式: <a href="http://en.wikipedia.org/wiki/HTML5_Audio">http://en.wikipedia.org/wiki/HTML5_Audio</a></p>
<h3 id="兼容所有的音频格式和浏览器"><a href="#兼容所有的音频格式和浏览器" class="headerlink" title="兼容所有的音频格式和浏览器"></a>兼容所有的音频格式和浏览器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">  &lt;source src=&quot;YouAreMySunshine.mp3&quot; type=&#x27;audio/mpeg; codecs=&quot;mp3&quot;&#x27;&gt;</span><br><span class="line">  &lt;source src=&quot;YouAreMySunshine.ogg&quot; type=&#x27;audio/ogg; codecs=&quot;vorbis&quot;&#x27; &gt;</span><br><span class="line">  &lt;p&gt;对不起，您的浏览器不支持audio标签&lt;/p&gt;</span><br><span class="line">&lt;/ audio&gt;</span><br></pre></td></tr></table></figure>

<h3 id="新增input类型"><a href="#新增input类型" class="headerlink" title="新增input类型"></a>新增input类型</h3><p>input标签新增type属性值</p>
<ul>
<li>search(搜索框)</li>
<li>date(日期选择)</li>
<li>email (邮件地址输入框)</li>
<li>month(月份选择)</li>
<li>url ( url地址输入框)</li>
<li>week(周选择）</li>
<li>tel(电话号码输入框)</li>
<li>time (时间选择)</li>
<li>number (数字输入框)</li>
<li>datetime-local (日期时间)</li>
<li>range(滑动条)</li>
<li>datetime (包含时区)</li>
<li>color（颜色选择)</li>
</ul>
<p>它看起来是一个文本输入框，可以输入一个电子邮件地址在移动设备上有额外的特性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;email&quot;&gt;</span><br><span class="line">&lt;input type=&quot;url&quot;&gt;</span><br><span class="line">&lt;input type=&quot;tel&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>专门用来输入一个数值的输入框，右侧有一组上下箭头，用来控制文本框中数值的大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;number&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>通过滑动条选择一个数值范围</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;range&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>在弹出的的日历中选择一个具体的日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;date&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>选择一个具体的月份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;month&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>选择一个具体的星期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;week&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>在弹出的的日历中选择一个具体的时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;time&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>选择日期和时间(本地时间)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;datetime-local&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>选择日期和时间( UTC世界标准时间)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;datetime&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>在弹出的颜色面板中选择一个颜色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;color&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h3><p>为其它输入控件提供一个预定义的选项列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--为输入框指定一个list属性--&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; list=&quot;browsers&quot;&gt;</span><br><span class="line">&lt;!--和文本框中list属性的值一致--&gt;</span><br><span class="line">&lt;datalist id=&quot;browsers&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;Chrome&quot;&gt;&lt;option value=&quot;Firefox&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;Internet Explorer&quot;&gt;&lt;option value=&quot;opera&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;opera mini&quot;&gt;&lt;option value=&quot;Safari&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br></pre></td></tr></table></figure>

<h3 id="keygen"><a href="#keygen" class="headerlink" title="keygen"></a>keygen</h3><p>用于客户端访问服务器时的安全验证</p>
<p>当提交表单时，会生成两个键，一个是私钥，一个公钥私钥存储于客户端，公钥则被发送到服务器</p>
<p>公钥可用于之后验证用户的客户端证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;#&quot; method=&quot;get&quot;&gt;</span><br><span class="line">  用户名:&lt;input type=&quot;text&quot; name=&quot;usrname&quot;&gt;</span><br><span class="line">  加密:&lt;keygen name=&quot;security&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>结合JavaScript，主要用于显示脚本输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form oninput=&quot;x.value=a.value&quot;&gt;</span><br><span class="line">  选择一个数字:</span><br><span class="line">  &lt;input type=&quot;range&quot; name=&quot;a&quot; value=&quot;o&quot;&gt;</span><br><span class="line">  &lt;output name=&quot;x&quot;&gt;o&lt;/output&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>表单验证是指，在用户提交表单之前，确保用户输入的数据是合法的。</p>
<ul>
<li>输入类型</li>
<li>日期和时间范围</li>
<li>必填字段</li>
<li>步长</li>
<li>字符长度</li>
<li>正则表达式</li>
<li>数值范围</li>
<li>禁用表单验证</li>
</ul>
<h3 id="必填字段验证"><a href="#必填字段验证" class="headerlink" title="必填字段验证"></a>必填字段验证</h3><ul>
<li>required属性是boolean属性</li>
<li>表单提交时输入域不能为空</li>
</ul>
<h3 id="字符长度验证"><a href="#字符长度验证" class="headerlink" title="字符长度验证"></a>字符长度验证</h3><p>没有达到最少字符时浏览器提示位数不够达到最大字符数时浏览器禁止继续输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot;&gt;</span><br><span class="line">	&lt;div&gt;密码: &lt;input type=&quot;password&quot; minlength=&quot;6&quot; maxlength=&quot;10&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>它们是很多input元素的共有属性</p>
<p>如text、search、password、email、url、tel</p>
<h3 id="数值范围验证"><a href="#数值范围验证" class="headerlink" title="数值范围验证"></a>数值范围验证</h3><p>输入的数值不能小于min指定的值不能大于max指定的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot;&gt;</span><br><span class="line">	&lt;div&gt;订购数量: &lt;input type=&quot;number&quot; min=&quot;5&quot; max=&quot;10&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>用于number、range和日期时间类型</p>
<h3 id="日期和时间范围验证"><a href="#日期和时间范围验证" class="headerlink" title="日期和时间范围验证"></a>日期和时间范围验证</h3><ul>
<li>只能选择范围内的日期和时间</li>
<li>范围外的日期和时间无法选择</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot; &gt;</span><br><span class="line">	&lt;div&gt;送货日期:&lt;input type=&quot;date&quot; min=&quot;2020-01-01&quot; max=&quot;2020-01-10&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;送货时间:&lt;input type=&quot;time&quot; min=&quot;e8:0o&quot; max=&quot;17:00&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="步长验证"><a href="#步长验证" class="headerlink" title="步长验证"></a>步长验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.htm1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;div&gt;订购数量:&lt;input type=&quot;number&quot; min=&quot;10&quot; max=&quot;5o&quot; step=&quot;10&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>点击number输入框右侧的上下箭头，每次增加或减少一个步长的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot; oninput=&quot;&quot;out.value=count.value&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    订购数量: &lt;input name=&quot; count&quot; type=&quot;range&quot;</span><br><span class="line">    value=&quot;10&quot; min=&quot;1e&quot; max=&quot;5e&quot; step=&quot;10&quot;&gt;</span><br><span class="line">    &lt;output name=&quot;out&quot;&gt;10&lt;/output&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">	&lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>移动滑动条每次增加或减少—个步长的值</p>
<h3 id="正则表达式验证"><a href="#正则表达式验证" class="headerlink" title="正则表达式验证"></a>正则表达式验证</h3><p>[0-4]{3}</p>
<p>[0-4]表示0到4之间的任意一个数字{3}</p>
<p>表示必须出现3次例如∶103、341、222</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.htm1&quot; method=&quot;post&quot;&gt;</span><br><span class="line">	&lt;div&gt;编号: &lt;input type=&quot;text&quot; pattern=&quot;[e-4]&#123;[3&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>是所有的可输入的input元素共有的属性如text、search、password、email、url、tel</p>
<h3 id="禁用表单验证"><a href="#禁用表单验证" class="headerlink" title="禁用表单验证"></a>禁用表单验证</h3><p>如果你更想使用基于JavaScript的更强大和灵活的表单验证功能，那么首先需要禁用HTML5表单验证</p>
<ul>
<li>novalidate</li>
<li>formnovalidate</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot; novalidate&gt;</span><br><span class="line">  &lt;div&gt;数字: &lt;input type=&quot;number&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;邮箱: &lt;input type=&quot;email&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;网址: &lt;input type=&quot;ur1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot;&gt;</span><br><span class="line">	&lt;div&gt;数字: &lt;input type=&quot;number&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;邮箱:&lt;input type=&quot;email&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;网址: &lt;input type=&quot;ur1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;input type=&quot;submit&quot; formnovalidate&gt;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>在提交按钮中使用formnovalidate属性</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>输入类型验证: number、email、url必填字段验证:required</li>
<li>字符长度验证: minlength、maxlength设置数值范围: min、max</li>
<li>设置日期和时间范围:min、max设置步长: step</li>
<li>正则表达式验证:pattern</li>
<li>禁用表单验证: novalidate、formnovalidate</li>
</ul>
<h3 id="新增表单属性"><a href="#新增表单属性" class="headerlink" title="新增表单属性"></a>新增表单属性</h3><ul>
<li>list</li>
<li>placeholder</li>
<li>required</li>
<li>autofocus（—个页面只能有一个autofocus属性的定义。如果有多个，则应用第一个）</li>
<li>minlength和maxlength</li>
<li>autocomplete（当我们填写表单，并成功提交后，再回到表单中填写时，会出现提醒功能，可以根据提醒功能进行快速输入。）（填写完，成功提交后，再回到表单填写时，没有上次的输入记录了。）</li>
<li>multiple</li>
<li>min和max</li>
<li>form</li>
<li>step</li>
<li>formaction</li>
<li>pattern</li>
<li>formmethod</li>
<li>novalidate</li>
<li>formenctype</li>
<li>formnovalidate</li>
<li>formtarget</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.html&quot; method=&quot;post&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">  &lt;!--把autocomplete=&quot;on&quot;放在input标签中，它会覆盖form中的设置，</span><br><span class="line">  这个属性可以用在所有可输入的input标签。</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;input placeholder=&quot;姓名&quot; name=&quot;username&quot; autocomplete=&quot;on&quot;&gt;</span><br><span class="line">  &lt;input placeholder=&quot;账号&quot; name=&quot;cardid&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a>multiple</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select multiple&gt;</span><br><span class="line">  &lt;option&gt;美式咖啡&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;卡布奇诺&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;拿铁&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;摩卡&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>按住键盘上的ctrl键可以实现多选</p>
<p>选完一个之后，输入逗号，可以再输入一个地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input placeholder=&quot;请输入邮件地址&quot; type=&quot;email&quot; list=&quot;contacts&quot; multiple&gt;</span><br><span class="line">&lt;datalist id=&quot;contacts&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;helen@qq.com&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;cohen@baidu.com&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;yaohuan@sina.com&quot;&gt;</span><br><span class="line">  &lt;option value=&quot;annie@qq.com&quot;&gt;</span><br><span class="line">&lt;/datalist&gt;</span><br><span class="line">&lt;!--按住Ctrl键，可以选择多个文件--&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; multiple&gt;</span><br></pre></td></tr></table></figure>

<h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.htm1&quot;&gt;</span><br><span class="line">  &lt;input placeholder=&quot;姓名&quot; type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;input placeholder=&quot;账号&quot; type=&quot;text&quot; name=&quot;cardid&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>提交后,在URL地址中，只有username，即在form外面的input没有被提交</p>
<p>在默认情况下，表单外的控件不会被提交，因此在form中加一个id,在input中加form=”f”;然后就可以一起提交到服务器了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.htm1&quot; id=&quot;f&quot;&gt;</span><br><span class="line">  &lt;input placeholder=&quot;姓名&quot; type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;input placeholder=&quot;账号&quot; type=&quot;text&quot; name=&quot;cardid&quot; form=&quot;f&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="form相关属性"><a href="#form相关属性" class="headerlink" title="form相关属性"></a>form相关属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;success.htm1&quot; method=&quot;post&quot; target=&quot;_blank&quot; </span><br><span class="line">enctype=&quot;application/x-www-form-urlencoded&quot;&gt;</span><br><span class="line">&lt;! --其它表单控件--&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>enctype：页面提交时的编码方式(仅限于post方式提交的表单)</p>
<p>这些属性是表单提交按钮的属性，当表单中的属性和提交按钮中存在同名属性时，提交按钮中的属性会被应用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;! --其它表单控件--&gt;&lt;input type=&quot;submit&quot;</span><br><span class="line">  formaction=&quot;success.htm1&quot;formmethod=&quot;post&quot;</span><br><span class="line">  formtarget=&quot;_blank&quot;</span><br><span class="line">  formenctype=&quot;application/x-www-form-urlencoded&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="accesskey"><a href="#accesskey" class="headerlink" title="accesskey"></a>accesskey</h3><h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;This is an HTML paragraph&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg:svg width=&quot;300&quot; height=&quot;100&quot; version=&quot;1.1&quot; &gt;</span><br><span class="line">&lt;svg:circle cx=&quot;100&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot;</span><br><span class="line">stroke-width=&quot;2&quot; fill=&quot;red&quot; /&gt;</span><br><span class="line">&lt;/svg:svg&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; </span><br><span class="line">&quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg width=&quot;100%&quot; height=&quot;100%&quot; version=&quot;1.1&quot;</span><br><span class="line">xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;rect width=&quot;300&quot; height=&quot;100&quot;</span><br><span class="line">style=&quot;fill:rgb(0,0,255);stroke-width:1;</span><br><span class="line">stroke:rgb(0,0,0)&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#div1 &#123;width:488px;height:70px;padding:10px;border:1px solid #aaaaaa;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function allowDrop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drag(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">var data=ev.dataTransfer.getData(&quot;Text&quot;);</span><br><span class="line">ev.target.appendChild(document.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;请把 W3School 的图片拖放到矩形中：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;img id=&quot;drag1&quot; src=&quot;w3school_banner.gif&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> 	&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line"> 	&lt;title&gt;拖放&lt;/title&gt;</span><br><span class="line"> 	&lt;style&gt;</span><br><span class="line">		p&#123;</span><br><span class="line">			font-size: 16px;</span><br><span class="line">		&#125;</span><br><span class="line">		#div1&#123;</span><br><span class="line">			width: 390px;</span><br><span class="line">			height: 260px;</span><br><span class="line">			padding: 10px;</span><br><span class="line">			border: 1px solid #ccc;</span><br><span class="line">			background-color: yellowgreen;</span><br><span class="line">			border-radius: 10px;</span><br><span class="line">			display: inline-block;</span><br><span class="line">		&#125;</span><br><span class="line">		img&#123;</span><br><span class="line">			border-radius: 10px;</span><br><span class="line">		&#125;</span><br><span class="line"> 	&lt;/style&gt;</span><br><span class="line"> 	&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> 		function allowDrop(ev)&#123;</span><br><span class="line"> 			ev.preventDefault();</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		function drag(ev)&#123;</span><br><span class="line"> 			ev.dataTransfer.setData(&quot;text&quot;,ev.target.id);</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		function drop(ev)&#123;</span><br><span class="line"> 			ev.preventDefault();</span><br><span class="line"> 			var data = ev.dataTransfer.getData(&quot;text&quot;);</span><br><span class="line"> 			ev.target.appendChild(document.getElementById(data));</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> 	&lt;p&gt;请把单车的图片拖放到下面的矩形中：&lt;/p&gt;</span><br><span class="line"> 	&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line"> 	&lt;img id=&quot;img1&quot; src=&quot;bike.png&quot; height=&quot;260&quot; alt=&quot;单车&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot;&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;来回拖放&lt;/title&gt;</span><br><span class="line">	&lt;style&gt;</span><br><span class="line">		div&#123;</span><br><span class="line">			width: 300px;</span><br><span class="line">			height: 220px;</span><br><span class="line">			border: 1px solid #000;</span><br><span class="line">			border-radius: 10px;</span><br><span class="line">			background-color: pink;</span><br><span class="line">			display: inline-block;</span><br><span class="line">			margin-right: 20px;</span><br><span class="line">			overflow: hidden;</span><br><span class="line">			padding: 10px;</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/style&gt;</span><br><span class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">		function allowDrop(ev)&#123;</span><br><span class="line">			ev.preventDefault();</span><br><span class="line">		&#125;</span><br><span class="line">		function drag(ev)&#123;</span><br><span class="line">			ev.dataTransfer.setData(&quot;text&quot;,ev.target.id);</span><br><span class="line">		&#125;</span><br><span class="line">		function drop(ev)&#123;</span><br><span class="line">			ev.preventDefault();</span><br><span class="line">			var data = ev.dataTransfer.getData(&quot;text&quot;);</span><br><span class="line">			ev.target.appendChild(document.getElementById(data));</span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;</span><br><span class="line">		&lt;img id=&quot;img2&quot; src=&quot;bike.png&quot; alt=&quot;单车&quot; width=&quot;280px&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot;&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div id=&quot;div3&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#div1, #div2</span><br><span class="line">&#123;float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function allowDrop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drag(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function drop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.preventDefault();</span><br><span class="line">var data=ev.dataTransfer.getData(&quot;Text&quot;);</span><br><span class="line">ev.target.appendChild(document.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;</span><br><span class="line">  &lt;img width=&quot;100px&quot; src=&quot;bike.png&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; id=&quot;drag1&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event)&quot; ondragover=&quot;allowDrop(event)&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages  搭建个人博客</title>
    <url>/2018/08/01/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h4 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h4><p>(1) 下载Node.js：<a href="https://nodejs.org/en/download/" title="官网下载地址" target="">官网下载地址</a> （这里以Windows 为例）；<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/download.png" alt="下载Node.js"><br>(2) 双击下载好的.msi文件，按下一步下一步，安装好就可以；<br>(3) 在cmd命令窗口，输入下面的这个命令，如果能够显示Node.js的版本，说明安装成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node-v.png" alt="查看node版本"></p>
<h4 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h4><p>(1) 下载Git：<a href="https://gitforwindows.org/" title="官网下载地址" target="">下载地址</a> （这里以Windows 为例，我是在这里下载的） 你也可以到 <a href="https://git-scm.com/downloads" title="官网下载地址" target="">官网下载</a> ；<br>(2) 双击下载好的Git安装包，按下一步下一步，进行安装即可；<br>(3) 在cmd命令窗口，输入下面的这个命令，如果能够显示Git的版本，说明安装成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git -version</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-v.png" alt="查看git版本"><br>(4) 想对Git有更多的了解，可以从下面几个网站学习，若你有更好的网站，也可以推荐给我：<br>· 官网：<a href="https://git-scm.com/book/zh/v2" title="" target="">点这里前往</a><br>·W3Cschool:<a href="https://www.w3cschool.cn/git/" title="" target="">点这里前往</a><br>· 廖雪峰网站教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="" target="">点这里前往</a> </p>
<h2 id="二、Hexo搭建博客"><a href="#二、Hexo搭建博客" class="headerlink" title="二、Hexo搭建博客"></a>二、Hexo搭建博客</h2><h4 id="1、安装Hexo"><a href="#1、安装Hexo" class="headerlink" title="1、安装Hexo"></a>1、安装Hexo</h4><p>（1）在计算机中，新建一个winneyBlog文件夹，用于存放自己的博客内容。<br>（2）在winneyBlog文件夹内，鼠标右键，选择Git Bash,进入到命令窗口<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog-path.png" alt="博客目录-进入命令窗口"><br>（3）在命令窗口中，输入下面代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-cli.png" alt="安装hexo-cli"></p>
<h4 id="2、初始化Hexo"><a href="#2、初始化Hexo" class="headerlink" title="2、初始化Hexo"></a>2、初始化Hexo</h4><p>(1) 在命令窗口中，输入下面代码：(会在winneyBlog目录下，新建了一个hero文件夹)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-init.png" alt="初始化hexo"></p>
<h4 id="3、配置Hexo"><a href="#3、配置Hexo" class="headerlink" title="3、配置Hexo"></a>3、配置Hexo</h4><p>(1) 进入hexo文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo</span><br></pre></td></tr></table></figure>
<p>(2) 安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>(3) 部署形成的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-gen.png" alt="部署形成的文件"></p>
<h4 id="4、启动服务器"><a href="#4、启动服务器" class="headerlink" title="4、启动服务器"></a>4、启动服务器</h4><p>(1) 在命令窗口执行下面代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>如图所示：（想要进行别的命令操作，可以按Ctrl + C停止服务器）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-server.png" alt="启动服务器"><br>(2) 在浏览器地址栏中输入<a href="http://localhost:4000/">http://localhost:4000/</a>  （默认端口是4000），如果能够看到如图所示的效果，说明初始化的Hexo博客搭建成功了。<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-blog.png" alt="浏览器中查看博客"></p>
<h2 id="三、将本地的-Hexo-博客部署到-GitHub-Pages上"><a href="#三、将本地的-Hexo-博客部署到-GitHub-Pages上" class="headerlink" title="三、将本地的 Hexo 博客部署到 GitHub Pages上"></a>三、将本地的 Hexo 博客部署到 GitHub Pages上</h2><p>1、新建一个仓库，仓库名为winney07.github.io（这个仓库的名称必须严格按照 username.github.io 的格式来命名）【前提是你要有一个Github账号】<br>如图所示：（因为我已经创建过这个库了，所以会显示红色警告，只是后来为了截图，重新写一个同名的）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-git.png" alt="创建仓库"><br>2、进入已经创建好的仓库（点击自己的头像，选择Your profile，点击刚创建好的那个仓库进去仓库里面），点击settings，找到GitHub Pages 选项，点击 Choose a theme 选择一个主题（可以选择也可以不选择，根据自己的需求决定是否操作这一步）<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-pages.png" alt="配置Github Pages"><br>3、配置Git个人信息，在winneyBlog目录下，鼠标右键，选择Git Bash，进入命令窗口，输入下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Github用户名&quot;</span>       //自己Github的账号名</span><br><span class="line">git config --global user.email <span class="string">&quot;Github邮箱&quot;</span>        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>
<p>4、生成SSH KEY,意思是生成一个公钥和密钥，因为Github需要一个密钥才能与本地相连接。在命令窗口输入下面的命令，然后需要连续按3次回车生成密钥（每按一次回车你可以看到对应的信息） 【你也可以先查看是否已经有了ssh密钥：cd ~/.ssh   如果没有密钥则不会有此文件夹，有则备份删除】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C  <span class="string">&quot;Github邮箱&quot;</span>        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-key.png" alt="生成SSH KEY"><br>5、生成的SSH KEY会保存到 C:/Users/电脑名用户名/.ssh 目录中（根据你自己电脑用户名，打开对应的目录）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/win-user.png" alt="SSH KEY存放目录"><br>（1）打开.ssh 这个目录，打开 id_rsa.pub 文件，复制里面的全部内容（这些内容就是密钥）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/user-ssh.png" alt="打开 id_rsa.pub 文件"><br>6、在GitHub中添加SSH keys<br>（1）打开Github，点击头像，选择Settings；<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/set.png" alt="设置"><br>（2）选择SSH and GPG keys项,点击右上角New SSH key按钮，将刚刚复制到的密钥粘贴到key输入框中，title自己给它命一个名就好<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/add-key.png" alt="添加ssh key 到仓库"><br>（3）最后点击Add Key，如果显示这样的界面，说明SSH KEY 配置成功：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-keys.png" alt="SSH KEY 配置成功"><br>7、修改全局配置文件<br>（1）在hexo文件夹下，找到_config.yml文件；<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/config1.png" alt="_config.yml文件"><br>（2）复制仓库地址：<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git-href.png" alt="复制仓库地址"><br>（3）修改_config.yml文件里的deploy属性(目的是将本地hexo项目放到Github上)<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy.png" alt="修改_config.yml文件里的deploy属性"><br>注：【如果repository中填写的是https协议的，hexo d上传代码到Github时有下面类似错误，可以将repository改为ssh的链接】<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy-error.png" alt="报错信息"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ssh-link.png" alt="使用 SSH链接"></p>
<p>8、安装hexo-deployer-git 插件，目的是将代码快速托管到Github上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>9、将hexo项目托管到GitHub上（命令可以分开写也可以一起写）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>备注：<br>hexo clean ：清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>hexo generate ：部署之前预先生成静态文件，简写为hexo g<br>hexo deploy : 文件生成后立即部署网站，简写为hexo d<br>10、在浏览器地址栏输入 <a href="https://username.github.io/">https://username.github.io/</a> 即可访问，（username也就是你的Github账户名），如果能够正常访问，并且跟本地hexo项目显示的内容是一样的，那么说明你已经把本地hexo项目部署到Github上了。</p>
<h2 id="四、配置博客的个人信息"><a href="#四、配置博客的个人信息" class="headerlink" title="四、配置博客的个人信息"></a>四、配置博客的个人信息</h2><p>1、在hexo目录中，找到全局配置文件_config.yml<br>2、配置信息如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 站点信息配置</span></span><br><span class="line">title: winney     <span class="comment">#站点名</span></span><br><span class="line">subtitle: It is never too old to learn.  <span class="comment">#站点副标题</span></span><br><span class="line">description: Doing is better than saying.     <span class="comment">#站点信息简介</span></span><br><span class="line">keywords: winneyBlog   博客</span><br><span class="line">author: winney   <span class="comment">#站点作者</span></span><br><span class="line">language: zh-Hans     <span class="comment">#站点语言，default默认是英文，zh-Hans是中文</span></span><br><span class="line">timezone: Asia/Shanghai      <span class="comment">#时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL   博客地址</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line">url: https://AAAAAAAAAA.github.io/</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory  目录设置</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章布局</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting  主页设置</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  per_page: 3  <span class="comment">#每页文章数量</span></span><br><span class="line">  order_by: -<span class="built_in">date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag   分类和标签</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format  日期 / 时间格式</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination    归档显示</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions  扩展</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git    <span class="comment">#部署的类型</span></span><br><span class="line">  repository: https://github.com/AAAAAAA/AAAAAAA.github.io.git    <span class="comment">#仓库地址</span></span><br><span class="line">  branch: master    <span class="comment">#分支名称</span></span><br><span class="line">  message: hexo deploy  <span class="comment">#提交信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Search</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>注意：.yml 文件有严格的格式要求，文件里所有的配置都是：冒号 空格 值，并且冒号是英文状态下的输入。想了解更多的可以前往 官网 。<br>3、在博客目录下，右键点击Git Bash，进去命令窗口，输入下面的命令，即可在浏览器中看到刚刚设置的内容显示在页面中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server    //简写为hexo s</span><br></pre></td></tr></table></figure>

<h4 id="提交到远程仓库报错"><a href="#提交到远程仓库报错" class="headerlink" title="提交到远程仓库报错"></a>提交到远程仓库报错</h4><p>报403或者每次提交都要输入账号密码</p>
<p>可以将_config.yml里的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repository: https://github.com/winney07/winney07.github.io.git   #仓库地址</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repository: git@github.com:winney07/winney07.github.io.git   #仓库地址</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Gitee-Pages搭建个人博客</title>
    <url>/2020/07/07/Hexo-Gitee-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><p>node.js  <a href="https://nodejs.org/zh-cn/" title="" target="">官网</a><br>Git   <a href="https://git-scm.com/" title="" target="">官网</a></p>
<h3 id="二、Hexo的安装与基本命令"><a href="#二、Hexo的安装与基本命令" class="headerlink" title="二、Hexo的安装与基本命令"></a>二、Hexo的安装与基本命令</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>如果没有安装hexo的，只需要在目录中单击右键启动Git Bash Here，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo </span><br></pre></td></tr></table></figure>
<h4 id="初始化在本地生成Hexo相关目录"><a href="#初始化在本地生成Hexo相关目录" class="headerlink" title="初始化在本地生成Hexo相关目录"></a>初始化在本地生成Hexo相关目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init Note  # 初始化创建，会再桌面创建Note文件夹</span><br><span class="line">cd Note         # 进入Note目录</span><br><span class="line">npm install     # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure>
<h4 id="Hexo三连"><a href="#Hexo三连" class="headerlink" title="Hexo三连"></a>Hexo三连</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean(or c)          # 清空已有hexo网站文件</span><br><span class="line">hexo generate(or g)   # 依据网页文本与新的CSS样式生成新网站文件</span><br><span class="line">hexo server(or s)     # 启动本地服务器，可以在localhost:4000查看网站修改效果</span><br></pre></td></tr></table></figure>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><p>Git 全局设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Github用户名&quot;       //自己Github的账号名</span><br><span class="line">git config --global user.email &quot;Github邮箱&quot;        //自己注册Github的邮箱地址</span><br></pre></td></tr></table></figure>
<p>创建 git 仓库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd test</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@gitee.com:AAAA/AAAA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>已有仓库?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd existing_git_repo</span><br><span class="line">git remote add origin git@gitee.com:AAAA/AAAA.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="三、主题下载与安装"><a href="#三、主题下载与安装" class="headerlink" title="三、主题下载与安装"></a>三、主题下载与安装</h3><p>Hexo官网上提供了丰富的主题可选，你只需要打开对应的界面（<a href="https://hexo.io/themes/" rel="nofollow noreferrer" target="_blank">https://hexo.io/themes/</a>）选择喜欢的，然后点击<strong>名称</strong>跳转到<strong>GitHub</strong>仓库选择<em>下载或者克隆</em>对应的<strong>zip</strong>文件到本地，并且解压到网站目录下的<strong>themes</strong>目录即可。</p>
<p>然后接下来，你需要修改两个配置文件：</p>
<li>你的网站根目录下的<strong>_config.yml</strong>文件，即网站配置文件；</li>
<li>你选择的主题的自带配置文件<strong>_config.yml</strong>，即主题样式配置文件；</li>

<h4 id="生成-添加-SSH-公钥之后，测试是否连接成功"><a href="#生成-添加-SSH-公钥之后，测试是否连接成功" class="headerlink" title="生成/添加 SSH 公钥之后，测试是否连接成功:"></a>生成/添加 SSH 公钥之后，测试是否连接成功:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line"></span><br><span class="line">如果成功，会显示：</span><br><span class="line">Hi xxx! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="图片路径设置"><a href="#图片路径设置" class="headerlink" title="图片路径设置"></a>图片路径设置</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-Gitee-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/images-set.png" alt="图片路径设置"></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博文置顶（自定义排序）</title>
    <url>/2021/01/14/Hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
    <content><![CDATA[<h4 id="Hexo博文置顶（自定义排序）"><a href="#Hexo博文置顶（自定义排序）" class="headerlink" title="Hexo博文置顶（自定义排序）"></a>Hexo博文置顶（自定义排序）</h4><blockquote>
<p>使用的是<code>top</code>属性，<code>top</code>值越高，排序越在前，不设置<code>top</code>值得博文按照时间顺序排序。<br>修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js</p>
</blockquote>
<p>原来代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const config = this.config;</span><br><span class="line">const posts = locals.posts.sort(config.index_ generator.order by);</span><br><span class="line"></span><br><span class="line">sort(posts.data, (a， b) =&gt; (b.sticky || 0) - (a.sticky || 0));</span><br><span class="line"></span><br><span class="line">const paginationDir.config.pagination_ dir || &#x27;page&#x27;;</span><br><span class="line">const path.config.index_ generator.path || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">return pagination(path, posts, &#123;</span><br><span class="line">	perPage: config.index_ generator.per_page,</span><br><span class="line">	layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">	format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">	data: &#123;</span><br><span class="line">    	_index: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = this.config;</span><br><span class="line">var posts = locals.posts.sort(config.index_ generator.order by);</span><br><span class="line"></span><br><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">  if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">      if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">      else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">  &#125;</span><br><span class="line">  else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">      return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var paginationDir.config.pagination_ dir || &#x27;page&#x27;;</span><br><span class="line">var path.config.index_ generator.path || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">return pagination(path, posts, &#123;</span><br><span class="line">	perPage: config.index_ generator.per_page,</span><br><span class="line">	layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">	format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">	data: &#123;</span><br><span class="line">    	_index: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>1、添加如下<code>javascript</code>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">      if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">          if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">          else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">      &#125;</span><br><span class="line">      else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">          return -1;</span><br><span class="line">      &#125;</span><br><span class="line">      else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          return 1;</span><br><span class="line">      &#125;</span><br><span class="line">      else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>2、在对应的md文件中添加top属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 网站素材</span><br><span class="line">date: 2021-01-08 11:23:25</span><br><span class="line">tags:</span><br><span class="line">- 网站素材</span><br><span class="line">categories: </span><br><span class="line">- 工作笔记</span><br><span class="line">- 网站素材</span><br><span class="line">top: 102</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_32454537/article/details/79482920">参考文献</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + NexT主题博客相关设置</title>
    <url>/2018/08/02/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一、添加文章版权声明功能"><a href="#一、添加文章版权声明功能" class="headerlink" title="一、添加文章版权声明功能"></a>一、添加文章版权声明功能</h2><p>打开博客目录下的主题配置文件（/themes/next/_config.yml），找到Declare license on posts 标签，进行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line">post_copyright:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>    <span class="comment">#激活版权声明模块</span></span><br><span class="line">  license: CC BY-NC-SA 3.0     <span class="comment">#版权许可协议</span></span><br><span class="line">  license_url: https://winney07.github.io/      <span class="comment">#声明的文章的可点击链接（域名）</span></span><br></pre></td></tr></table></figure>
<p>配置完后，执行以下命令，在浏览器中访问，效果如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/next-set1.png" alt="版本声明设置"></p>
<span id="more"></span>
<h2 id="二、设置favicon图标"><a href="#二、设置favicon图标" class="headerlink" title="二、设置favicon图标"></a>二、设置favicon图标</h2><p>1、选择一个favicon制作网站完成制作，例如：<a href="http://www.bitbug.net/" title="" target="">比特虫</a> ，制作一个16<em>16，一个32</em>32的；<br>2、两个不同尺寸大小的文件，重名为favicon-16x16-next.png和favicon-32x32-next.png；<br>2、将重命名的两个图片文件放到博客目录下的themes/next/source/images中（覆盖原来的两个默认的）<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/favicon.png" alt="设置favicon图标"></p>
<h2 id="三、添加头像"><a href="#三、添加头像" class="headerlink" title="三、添加头像"></a>三、添加头像</h2><p>1、把想要设置的头像图片放到hexo/themes/next/source/images目录下;<br>2、在hexo/themes/next/layout/_macro目录中找到sidebar.swig文件;<br>3、在sidebar.swig文件中找到类名为：site-overview-wrap sidebar-panel sidebar-panel-active的section标签，进行如图所示的修改：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/user-head.png" alt="添加头像"><br>效果如图所示：(若想去掉边框，可以根据头像标签的类名，全局搜索，找到对应的样式进行修改)<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/user-header.png" alt="修改头像样式"></p>
<h2 id="四、添加友情链接"><a href="#四、添加友情链接" class="headerlink" title="四、添加友情链接"></a>四、添加友情链接</h2><p>打开主题配置文件（/themes/next/_config.yml），找到以下内容进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line">links_icon: <span class="built_in">link</span></span><br><span class="line">links_title: 友情链接 </span><br><span class="line"><span class="comment"># links_layout: block   //块状显示（选择了行内显示，这个要注释掉，不然会报错）</span></span><br><span class="line">links_layout: inline    //行内显示</span><br><span class="line">links:</span><br><span class="line">  小超: https://www.xiaochao.me/</span><br><span class="line">  Github: https://www.github.com</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Hexo-NexT%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/friend-link.png" alt="添加友情链接"></p>
<h2 id="五、调整hexo页面宽度"><a href="#五、调整hexo页面宽度" class="headerlink" title="五、调整hexo页面宽度"></a>五、调整hexo页面宽度</h2><p>博客在浏览器上的留白太多，因此想增加文章的宽度。</p>
<p>打开/Hexo/themes/hexo-theme-next/source//css/_variables/custom.styl 添加两行代码即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$main-desktop = 1400px </span><br><span class="line">$content-desktop = 1100px</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML中的特殊符号</title>
    <url>/2020/07/09/HTML%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<h4 id="HTML-特殊符号编码对照表"><a href="#HTML-特殊符号编码对照表" class="headerlink" title="HTML 特殊符号编码对照表"></a><a href="https://tool.chinaz.com/tools/htmlchar.aspx">HTML 特殊符号编码对照表</a></h4><h4 id="infin"><a href="#infin" class="headerlink" title="&infin;"></a>&infin;</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无穷的符号 ： &amp;infin;</span><br></pre></td></tr></table></figure>
<table cellpadding="0" border="1" width="708" style="border:1pt solid;"><tbody><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">说明</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">编码</span></strong></span></p>
</td>
<td rowspan="25" width="17" style="border:1pt solid #000000;width:12.75pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&nbsp;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">说明</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">编码</span></strong></span></p>
</td>
<td rowspan="25" width="17" style="border:1pt solid #000000;width:12.75pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&nbsp;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">说明</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="center" style="text-align:center;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">编码</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">"</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双引号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;quot;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">×</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">乘号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;times;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">←</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">向左箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;larr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">AND</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;amp;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">÷</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">除号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;divide;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">↑</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">向上箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;uarr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&lt;&nbsp;</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">小于符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;lt;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">±</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">正负符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;plusmn;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">→</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">向右箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;rarr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&gt;&nbsp;</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">大于符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;gt;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:14px;">ƒ</span><br></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">function</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;fnof;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">↓</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">向下箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;darr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&nbsp;</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">空格</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;nbsp;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">√</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">根号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;radic;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">↑</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双向箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;harr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">?</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">倒问号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;iquest;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">∞</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">无限大符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;infin;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us"><span style="font-size:18px;">⇐</span></span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双线向左箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;lArr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">?</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双左箭头</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;laquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">∠</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">角度符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;ang;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us"><span style="font-size:18px;">⇑</span></span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双线向上箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;uArr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">?</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双右箭头</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;raquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">∫</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">微积分符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;int;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">⇒</span><br></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双线向右箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;rArr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">‘</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">左单引号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;lsquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">°</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">度数符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;deg;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">⇓</span><br></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双线向下箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;dArr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">’</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">右单引号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;rsquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">≠</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">不等于符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;ne;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">⇔</span><br></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">双线双向箭头</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;hArr;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">“</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">左双引号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;ldquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">≡</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">相等符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;equiv;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">♠</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">黑桃符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;spades;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">”</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">右双引号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;rdquo;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">≤</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">小于等于符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;le;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">♣</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">梅花符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;clubs;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="font-size:14px;">¶</span><br></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">段落符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;para;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">≥</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">大于等于符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;ge;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">♥</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">红心符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;hearts;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">§</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">章节符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;sect;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">⊥</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">垂直符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;perp;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">♦</span><br></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">方块符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;diams;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us"><span style="font-size:18px;">©</span></span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">版权所有符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;copy;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;">&nbsp;<span style="font-size:14px;">½</span><br></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">二分之一符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;frac12;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">α</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Alpha</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;alpha;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">®</span><br></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">注册商标符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;reg;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:14px;">¼</span><br></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">四分之一符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;frac14;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">β</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Bata</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;beta;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">™</span><br></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">商标符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;trade;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="font-size:14px;">¾</span><br></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">四分之三符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;frac34;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">γ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Gamma</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;gamma;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="font-size:18px;">€</span><br></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">欧元符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;euro;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">‰</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">百分符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;permil;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">Δ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Delta</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;Delta;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">￠</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">美分符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;cent;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">∴</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">所以符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;there4;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">θ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Theta</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;theta;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">￡</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">英镑符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;pound;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">π</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">圆周率符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;pi;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">λ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Lambda</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;lambda;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">￥</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">日圆符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;yen;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">1</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">批注<span lang="en-us" xml:lang="en-us">1</span>符号</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;sup1;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">Σ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Sigma</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;Sigma;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">…</span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">...</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;hellip;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">2</span></strong></span></p>
</td>
<td width="94" style="border:1pt solid #000000;width:70.5pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">批注<span lang="en-us" xml:lang="en-us">2</span>符号、平方</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;sup2;</span></strong></span></p>
</td>
<td width="36" style="border:1pt solid #000000;width:27pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;">τ</span></strong></span></p>
</td>
<td width="96" style="border:1pt solid #000000;width:72pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">Tau</span><span style="font-family:'宋体';font-size:10pt;">符号</span></strong></span></p>
</td>
<td width="73" style="border:1pt solid #000000;width:54.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;tau;</span></strong></span></p>
</td>
</tr><tr><td width="29" style="border:1pt solid #000000;width:21.75pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span style="font-family:'宋体';font-size:10pt;"><span style="font-size:18px;">⊕</span></span></strong></span></p>
</td>
<td width="63" style="border:1pt solid #000000;width:47.25pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&nbsp;</span></strong></span></p>
</td>
<td width="72" style="border:1pt solid #000000;width:54pt;">
<p align="left" style="text-align:left;"><span style="color:#666666;"><strong><span lang="en-us" style="font-family:'宋体';font-size:10pt;" xml:lang="en-us">&amp;oplus;</span></strong></span></p>
</td>
<td><span style="color:#666666;"><strong><br></strong></span></td>
</tr></tbody></table>
#### HTML 特殊符号编码对照表

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>HTML中的特殊符号</category>
      </categories>
      <tags>
        <tag>HTML中的特殊符号</tag>
      </tags>
  </entry>
  <entry>
    <title>HighChart相关笔记</title>
    <url>/2021/01/15/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="修改导出excel表表头的表名"><a href="#修改导出excel表表头的表名" class="headerlink" title="修改导出excel表表头的表名"></a>修改导出excel表表头的表名</h4><ol>
<li><p>默认情况下，标题显示为Chart</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table1.png" alt="标题显示为Chart"></p>
</li>
<li><p>加上title属性之后，标题显示为title属性的值</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table2.png" alt="标题显示为title属性的值"></p>
</li>
<li><p>如果不想标题显示在页面中，就加样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.highcharts-title&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="修改下载的excel表名"><a href="#修改下载的excel表名" class="headerlink" title="修改下载的excel表名"></a>修改下载的excel表名</h4><p>设置title对象的text属性为图表的名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">    text: filename</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>若不想表名显示在页面的图表中，可以用样式将它隐藏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display：none</span><br></pre></td></tr></table></figure>

<h4 id="修改导出后的excel表的第一列的标题Category"><a href="#修改导出后的excel表的第一列的标题Category" class="headerlink" title="修改导出后的excel表的第一列的标题Category"></a>修改导出后的excel表的第一列的标题Category</h4><ol>
<li><p>第一列的标题默认是Category</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table3.png" alt=" 第一列的标题默认是Category"></p>
</li>
<li><p>修改modules 中的export-data.src.js（导出excel表功能的js，未压缩版）</p>
<blockquote>
<p>调试可知，dataRows的值决定了标题的显示；而dataRows的值由topHeaders和subHeaders决定，所以动态将它的值修改。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table4.png" alt="修改modules 中的export-data.src.js"></p>
</li>
<li><p>给options添加一个excelTitle0属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">topHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">subHeaders[0] = this.options.exporting.excelTitle0;    </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Find longest row</span><br><span class="line">for (var i = 0, len = rows.length; i &lt; len; ++i) &#123;</span><br><span class="line">	if (rows[i].length &gt; rowLength) &#123;</span><br><span class="line">		rowLength = rows[i].length;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">topHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">subHeaders[0] = this.options.exporting.excelTitle0;</span><br><span class="line">// Add header</span><br><span class="line">html += getTableHeaderHTML(</span><br><span class="line">	topHeaders ,</span><br><span class="line">	subHeaders ,</span><br><span class="line">	Math.max(rowLength, subHeaders.length)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在下载excel表格之前，动态设置excelTitle0属性</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getCategory() &#123;</span><br><span class="line">	var category = $(this).data(&quot;category&quot;);</span><br><span class="line">	if(category == &quot;&quot; || category == undefined)&#123;</span><br><span class="line">		var val = $(&quot;#dateRange&quot;).val();</span><br><span class="line">		var start = val.substring(0, 10);</span><br><span class="line">		var end = val.substring(13, 24);</span><br><span class="line">        // 算两个日期之间的间隔</span><br><span class="line">        var inter = getDays(start, end);</span><br><span class="line"></span><br><span class="line">        if(inter = 0) &#123;</span><br><span class="line">            category = &quot;小时&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            category = &quot;日期&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Highcharts.charts[chartId].options.exporting.excelTitle0 = getCategory.call(this);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="修改数据表格category值"><a href="#修改数据表格category值" class="headerlink" title="修改数据表格category值"></a>修改数据表格category值</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table7.png" alt="修改数据表格category值"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table8.png" alt="修改数据表格category值"></p>
<p>1、给点击按钮加上data-category属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;eptWrap rc&quot; data-chart=&quot;Ø&quot; data-category=&quot;渠道&quot;&gt;</span><br><span class="line">    &lt;span class= &quot;eptList&quot; &gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class&quot;eptwrap ml10 down-file&quot; data-chart=&quot;0&quot; data-category=&quot;渠道&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;eptout&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>2、重新调用hightcharts修改category属性的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getCategory() &#123;</span><br><span class="line">	var category = $(this).data(&quot;category&quot;);</span><br><span class="line">	if(category == &quot;&quot; || category == undefined)&#123;</span><br><span class="line">		var val = $(&quot;#dateRange&quot;).val();</span><br><span class="line">		var start = val.substring(0, 10);</span><br><span class="line">		var end = val.substring(13, 24);</span><br><span class="line">        // 算两个日期之间的间隔</span><br><span class="line">        var inter = getDays(start, end);</span><br><span class="line"></span><br><span class="line">        if(inter = 0) &#123;</span><br><span class="line">            category = &quot;小时&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            category = &quot;日期&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    return category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Highcharts.charts[chartId].options.exporting.excelTitle0 = getCategory.call(this);</span><br></pre></td></tr></table></figure>

<h4 id="修改条形图柱子的宽度"><a href="#修改条形图柱子的宽度" class="headerlink" title="修改条形图柱子的宽度"></a>修改条形图柱子的宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plotOptions: &#123;</span><br><span class="line">  bar: &#123;</span><br><span class="line">     maxPointWidth: 20</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table11.png" alt="修改条形图柱子的宽度"></p>
<h4 id="在条形图柱子后面加上数值"><a href="#在条形图柱子后面加上数值" class="headerlink" title="在条形图柱子后面加上数值"></a>在条形图柱子后面加上数值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plotOptions: &#123;</span><br><span class="line">  bar: &#123;</span><br><span class="line">     dataLabels: &#123;</span><br><span class="line">     	enabled: true,</span><br><span class="line">     	allowOverlap: true   // 允许数据标签重叠</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/HighChart%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/table12.png" alt="在条形图柱子后面加上数值"></p>
<p><a href="https://blog.csdn.net/wade01274536/article/details/50419114">将Highcharts图表数据生成Table表格</a></p>
<p><a href="https://blog.csdn.net/eengel/article/details/73497208">重绘</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>HighChart</category>
      </categories>
      <tags>
        <tag>HighChart</tag>
      </tags>
  </entry>
  <entry>
    <title>IE兼容性处理</title>
    <url>/2021/01/15/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h4 id="js判断浏览器是否为IE浏览器"><a href="#js判断浏览器是否为IE浏览器" class="headerlink" title="js判断浏览器是否为IE浏览器"></a>js判断浏览器是否为IE浏览器</h4><p>IE6-8和IE11都适用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isIE() &#123; //ie?</span><br><span class="line">     if (!!window.ActiveXObject || &quot;ActiveXObject&quot; in window)</span><br><span class="line">            &#123; return true; &#125;</span><br><span class="line">     else</span><br><span class="line">            &#123; return false; &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>window.ActiveXObject：判断浏览器是否支持ActiveX控件，只有IE浏览器里面支持ActiveX控件<br>如果浏览器支持ActiveX控件，可以利用 var xml = new ActiveXObject(“Microsoft.XMLHTTP”); 创建XMLHttpRequest 对象（这是在IE7以前的版本中）；</p>
<p>在较新的IE版本中可以利用 var xml = new ActiveXObject(“Msxml2.XMLHTTP”)的形式创建XMLHttpRequest对象;</p>
<p>而在IE7及非IE浏览器中可以利用v ar xml=new XMLHttpRequest()创建XMLHttpRequest对象。</p>
</blockquote>
<h4 id="IE浏览器固定定位（fixed）的弹窗"><a href="#IE浏览器固定定位（fixed）的弹窗" class="headerlink" title="IE浏览器固定定位（fixed）的弹窗"></a>IE浏览器固定定位（fixed）的弹窗</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/ie-fixed.png" alt="IE浏览器固定定位（fixed）的弹窗"></p>
<p>解决：</p>
<ol>
<li>使用相对定位（absolute），弹出蒙层</li>
<li>body使用overflow:hidden样式，让body溢出隐藏，控制页面不滚动。</li>
</ol>
<h4 id="去除IE10中输入框和密码框的X按钮和小眼睛"><a href="#去除IE10中输入框和密码框的X按钮和小眼睛" class="headerlink" title="去除IE10中输入框和密码框的X按钮和小眼睛"></a>去除IE10中输入框和密码框的X按钮和小眼睛</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/ie10-input.png" alt="去除IE10中输入框和密码框的X按钮和小眼睛"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法：</span><br><span class="line">/*去除IE输入框的X标记*/</span><br><span class="line">input[type=text]::-ms-clear &#123;display: none;&#125;</span><br><span class="line"></span><br><span class="line">/*去除IE输入框的小眼睛标记*/</span><br><span class="line">input[type=password]::-ms-reveal &#123;display: none;&#125;</span><br><span class="line"></span><br><span class="line">如果想要单独去除某个输入框的话，可以把input[type=text]改为.target-class即可。</span><br></pre></td></tr></table></figure>

<h4 id="去掉a标签点击-active-状态的背景色"><a href="#去掉a标签点击-active-状态的背景色" class="headerlink" title="去掉a标签点击(active)状态的背景色"></a>去掉a标签点击(active)状态的背景色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ie浏览器，点击a标签时，点击状态，有个背景色</span><br><span class="line">想去掉这个样式：</span><br><span class="line">设置：</span><br><span class="line">a:active&#123;</span><br><span class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0);</span><br><span class="line">    -webkit-tap-highlight-color: transparent;</span><br><span class="line">    outline: none;</span><br><span class="line">    background: none;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复选框-input-type-”check”"><a href="#复选框-input-type-”check”" class="headerlink" title="复选框 input type=”check”"></a>复选框 input type=”check”</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">普通浏览器：</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;&quot; /&gt;</span><br><span class="line">在IE浏览器中checked属性的写法是大写的:</span><br><span class="line">&lt;input type=&quot;checkbox&quot; CHECKED=&quot;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">所以js获取checked时，要考虑ie的情况。</span><br></pre></td></tr></table></figure>

<h4 id="ie-下input输入框readonly失效-光标仍可聚焦"><a href="#ie-下input输入框readonly失效-光标仍可聚焦" class="headerlink" title="ie 下input输入框readonly失效,光标仍可聚焦"></a>ie 下input输入框readonly失效,光标仍可聚焦</h4><blockquote>
<p>ie下input输入框设置了readonly属性,但是鼠标还可以点击光标聚焦,</p>
<p>改为bootstrap的disable属性后,无法聚焦但是表单提交又失效,无法传递参数,</p>
<p>而且聚焦后,backspace按键默认触发浏览器的返回功能,</p>
<p>后改为增加屈性unselectable=’on’,可以解决.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#config_name&#x27;+index).attr(&quot;readonly&quot;, &quot;readonly&quot;);</span><br><span class="line">$(&quot;#config_name&#x27;+index ).attr(&quot;unselectable&quot;, &quot;on&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre name=&quot;code&quot; class=&quot;javascript&quot;&gt;$(&#x27;#config_name&#x27;+index) .removeAttr(&quot;unselectable&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="文件上传按钮（input-type-“file”）"><a href="#文件上传按钮（input-type-“file”）" class="headerlink" title="文件上传按钮（input type= “file”）"></a>文件上传按钮（input type= “file”）</h4><p>美化后的按钮，在在ie浏览器下要双击才能打开</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/input-file.png" alt="文件上传按钮-兼容性"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/input-file2.png" alt="文件上传按钮-兼容性"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86/input-file3.png" alt="文件上传按钮-兼容性"></p>
<blockquote>
<p>目的是让选择文件的文字铺满该按钮，可以点击</p>
</blockquote>
<h4 id="a标签添加事件的注意事项"><a href="#a标签添加事件的注意事项" class="headerlink" title="a标签添加事件的注意事项"></a>a标签添加事件的注意事项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:void(0);&quot; class=&quot;refresh-icon&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当不添加链接的时候，只是为了触发事件的时候，要加上void(0);不然在IE浏览器会报错</p>
</blockquote>
<h4 id="解决IE下a标签点击有虚线边框的问题"><a href="#解决IE下a标签点击有虚线边框的问题" class="headerlink" title="解决IE下a标签点击有虚线边框的问题"></a>解决IE下a标签点击有虚线边框的问题</h4><p>参考：<a href="https://blog.csdn.net/zhangxianya1/article/details/47128007">解决IE下a标签点击有虚线边框的问题</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:focus&#123;outline:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IE上设置input-type-file文件上传区域的光标不闪烁"><a href="#IE上设置input-type-file文件上传区域的光标不闪烁" class="headerlink" title="IE上设置input type = file文件上传区域的光标不闪烁"></a>IE上设置input type = file文件上传区域的光标不闪烁</h4><p>我们使用文件上传时,时常自定义图标,这时候通常会把input的透明度设置为0,然后覆盖在一个按钮上实现自定义图标，但是在IE上使用时会出现光标闪烁问题</p>
<p>解决办法: css设置font-size为0</p>
<h4 id="js判断浏览器是否为IE浏览器-1"><a href="#js判断浏览器是否为IE浏览器-1" class="headerlink" title="js判断浏览器是否为IE浏览器"></a>js判断浏览器是否为IE浏览器</h4><p>IE6-8和IE11都适用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isIE() &#123;</span><br><span class="line">	if (!!window.Activexobject || &quot;Activexobject&quot; in window)</span><br><span class="line"> 		return true;</span><br><span class="line"> 	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line"> 		return false;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>window.ActiveXObject：判断浏览器是否支持ActiveX控件，只有IE浏览器里面支持ActiveX控件 如果浏览器支持ActiveX控件，可以利用 var xml = new ActiveXObject(“Microsoft.XMLHTTP”); 创建XMLHttpRequest 对象（这是在IE7以前的版本中）；</p>
<p>在较新的IE版本中可以利用 var xml = new ActiveXObject(“Msxml2.XMLHTTP”)的形式创建XMLHttpRequest对象;</p>
<p>而在IE7及非IE浏览器中可以利用v ar xml=new XMLHttpRequest()创建XMLHttpRequest对象。</p>
</blockquote>
<h4 id="IE不支持remove-方法。"><a href="#IE不支持remove-方法。" class="headerlink" title="IE不支持remove()方法。"></a>IE不支持remove()方法。</h4><p><a href="https://blog.csdn.net/mengtianqq/article/details/79744394">ie浏览器的不能使用remove()方法去删除</a></p>
<blockquote>
<p>1.因为ie浏览器没有remove()方法，可以使用 removeChild()方法去删除;</p>
<p>注意removeChild()的使用者是当前节点上一级，比如像删除节点node，使用的方法是：node.parentNode.removeChild(）；</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function deleteRow(node)&#123;</span><br><span class="line">	 node.parentNode.removeChild(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IE对于域名带下划线访问问题"><a href="#IE对于域名带下划线访问问题" class="headerlink" title="IE对于域名带下划线访问问题"></a><a href="http://www.360doc.com/content/14/0826/17/432969_404801617.shtml">IE对于域名带下划线访问问题</a></h4><p><a href="https://blog.csdn.net/qidizi/article/details/44494169">ie 浏览器无法保存cookie,且与域名包含了下划线(_)有关系的问题</a></p>
<p><a href="https://datatracker.ietf.org/doc/html/rfc3696#section-2">https://datatracker.ietf.org/doc/html/rfc3696#section-2</a></p>
<blockquote>
<p>项目中用到cookie传递参数到服务器端，用ip localhost等访问均正常，由于项目以后要用域名访问，果断修改hosts文件，添加k_test.com进行域名映射测试，当再次通过IE浏览器打开项目后，悲剧的事情发生了，居然无法登陆，再次用ip 、 localhost访问，都正常，百思不得其解，这个问题正正纠结了一下午，试了各种测试，都没有结果，第二天一大早，灵机—动，换了个google浏览器，奇迹发生了，居然可以登陆了，然后再试IE，问题依旧，盯着域名看了半天，想起应该换个域名了，果断去掉下划线，IE能正常访问了，纠结差不多一天的问题终于得到了解决，百度了一下域名下划线，果然IE浏览器确实存在这方面的问题，虽然是一个小小的问题，但纠结了一天，确实很郁闷，谨以此告诫自己以后的人生中多注重细节。</p>
</blockquote>
<h4 id="IE7局部滚动区域下绝对定位或相对定位元素不随滚动条滚动的bug"><a href="#IE7局部滚动区域下绝对定位或相对定位元素不随滚动条滚动的bug" class="headerlink" title="IE7局部滚动区域下绝对定位或相对定位元素不随滚动条滚动的bug"></a>IE7局部滚动区域下绝对定位或相对定位元素不随滚动条滚动的bug</h4><p>解决方法： </p>
<p>如果.scrollArea{}是滚动区域，那么在样式里面加上ie7的hack：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.scrollArea&#123;*position:relative;*left:0;*top:0;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传按钮的美化"><a href="#文件上传按钮的美化" class="headerlink" title="文件上传按钮的美化"></a>文件上传按钮的美化</h4><blockquote>
<p>input框，type为file  </p>
<p>（兼容性）页面中的上传，在ie浏览器下要双击才能打开</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E7%BE%8E%E5%8C%96%E6%A0%B7%E5%BC%8F.png" alt="文件上传按钮的美化"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E7%BE%8E%E5%8C%96-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.png" alt="解决方法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE-IE%E6%94%BE%E5%A4%A7.png" alt="按钮放大"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE-IE%E5%A4%A7%E5%B0%8F%E9%97%AE%E9%A2%98.png" alt="大小问题"></p>
<p>目的是让选择文件的文字铺满该按钮，可以点击：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE-IE%E4%B8%8D%E9%93%BA%E6%BB%A1.png" alt="不铺满"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE-IE-font-size%E5%AF%BC%E8%87%B4.png" alt="font-size导致"></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>IE兼容</category>
      </categories>
      <tags>
        <tag>IE兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>IE浏览器table中的TD无数据边框不显示问题</title>
    <url>/2019/07/19/IE%E6%B5%8F%E8%A7%88%E5%99%A8table%E4%B8%AD%E7%9A%84TD%E6%97%A0%E6%95%B0%E6%8D%AE%E8%BE%B9%E6%A1%86%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在IE(目前发现是ie9,ie10)浏览器下，无数据的时候：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/IE%E6%B5%8F%E8%A7%88%E5%99%A8table%E4%B8%AD%E7%9A%84TD%E6%97%A0%E6%95%B0%E6%8D%AE%E8%BE%B9%E6%A1%86%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/1.png" alt="在IE(目前发现是ie9,ie10)浏览器下，无数据的时候"></p>
<p>原先代码：<br>合并单元格：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">tr</span>&gt;&lt;td colspan=<span class="string">&quot;4&quot;</span>&gt;暂无数据&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>结构代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;layui-clear&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-table-body&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;table-body&quot;</span>&gt;</span><br><span class="line">    //表格模板</span><br><span class="line">    &lt;include file=<span class="string">&quot;GlobalConfig/lib_table_platform_sdk&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>解决方案：<br>将合并单元格的代码改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">    &lt;td style=<span class="string">&quot;border:0;&quot;</span>&gt;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">    &lt;td style=<span class="string">&quot;border:0;&quot;</span>&gt;&lt;p class=<span class="string">&quot;no-table-data&quot;</span>&gt;暂无数据&lt;/p&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td style=<span class="string">&quot;border:0;&quot;</span>&gt;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">    &lt;td style=<span class="string">&quot;border:0;&quot;</span>&gt;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>
<p>由于无数据的情况下，“暂无数据”的显示都是相对于表头相同的位置，所以可以考虑使用定位来做。<br>同时要保证每个td里面都要有内容，所以使用空格符来代替。<br>添加样式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.layui-clear&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.no-table-data&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left:50%; </span><br><span class="line">  margin-left:-24px;</span><br><span class="line">  top:73px; </span><br><span class="line">  color: <span class="comment">#263248;</span></span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="第二种解决方案"><a href="#第二种解决方案" class="headerlink" title="第二种解决方案"></a>第二种解决方案</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">table&#123;border-collapse: separate;&#125;</span><br><span class="line"></span><br><span class="line">这种方法，表格的边框会比较粗。还是不太能解决。</span><br></pre></td></tr></table></figure>
<p>思路参考：<a href="https://blog.csdn.net/da_zhuang/article/details/8736662" title="" target="">IE浏览器table中的TD无数据边框不显示问题</a></p>
<p>（使用表格的样式设置，解决不了，所以才用了定位的方法。若有更好的方法，可以给我留言。）</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>兼容</category>
      </categories>
      <tags>
        <tag>兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>JS模块化</title>
    <url>/2021/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-课程目标"><a href="#1-课程目标" class="headerlink" title="1. 课程目标"></a>1. 课程目标</h1><pre><code>1. 理解模块与模块化
2. 了解各种模块化规范及其实现
3. 区别各个模块化规范之间的区别
4. 掌握基于CommonJS和ES6模块化规范的编码
</code></pre>
<h1 id="2-模块化的理解"><a href="#2-模块化的理解" class="headerlink" title="2. 模块化的理解"></a>2. 模块化的理解</h1><h2 id="1-什么是模块"><a href="#1-什么是模块" class="headerlink" title="1). 什么是模块?"></a>1). 什么是模块?</h2><pre><code>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起
块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信
</code></pre>
<h2 id="2-一个模块的组成"><a href="#2-一个模块的组成" class="headerlink" title="2). 一个模块的组成"></a>2). 一个模块的组成</h2><pre><code>私有的数据---&gt;内部的变量
私有的行为(操作数据)---&gt;内部的函数
向外暴露n个行为
</code></pre>
<h2 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3). 模块化"></a>3). 模块化</h2><pre><code>描述一种特别的编码项目JS的方式: 以模块为单元一个一个编写的
模块化的项目: JS编码时是按照模块一个一个编码的
</code></pre>
<h2 id="4-模块化的进化过程"><a href="#4-模块化的进化过程" class="headerlink" title="4). 模块化的进化过程"></a>4). 模块化的进化过程</h2><pre><code>1. 全局function模式: 
    编码: 全局变量/函数
    问题: 污染全局命名空间, 容易引起命名冲突/数据不安全
2. namespace模式: 
    编码: 将数据/行为封装到对象中
    解决: 命名冲突(减少了全局变量)
    问题: 数据不安全(外部可以直接修改模块内部的数据)
3. IIFE模式/增强
    IIFE: 立即调用函数表达式---&gt;匿名函数自调用
    编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口
    引入依赖: 通过函数形参来引入依赖模块
        (function(window, module2)&#123;
            var data = &#39;atguigu&#39;
            function foo() &#123;
               module2.xxx()
               console.log(&#39;foo()&#39;+data)
            &#125;
            function bar() &#123;
               console.log(&#39;bar()&#39;+data)
            &#125;
            
            window.module = &#123;foo&#125;
        &#125;)(window, module2)
</code></pre>
<h1 id="3-模块化规范"><a href="#3-模块化规范" class="headerlink" title="3. 模块化规范"></a>3. 模块化规范</h1><h2 id="1-常见的模块化规范"><a href="#1-常见的模块化规范" class="headerlink" title="1). 常见的模块化规范"></a>1). 常见的模块化规范</h2><pre><code>1. CommonJS
2. AMD
3. CMD
4. ES6
</code></pre>
<h2 id="2-CommonJS-掌握"><a href="#2-CommonJS-掌握" class="headerlink" title="2). CommonJS(掌握)"></a>2). CommonJS(掌握)</h2><pre><code>1. 实现
    服务器端: Node.js
    浏览器端: Browserify
2. 基本语法:
    定义暴露模块: exports
        exports.xxx = value
        module.exports = value
      引入模块: require
        var module = require(&#39;模块名/模块相对路径&#39;)
3. 引入模块发生在什么时候?
    Node: 运行时, 动态同步引入
    Browserify: 在运行前对模块进行编译打包的处理(已经将依赖的模块包含进来了), 
              运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块
</code></pre>
<h2 id="3-AMD-了解"><a href="#3-AMD-了解" class="headerlink" title="3). AMD(了解)"></a>3). AMD(了解)</h2><pre><code>1. 实现
    浏览器端: require.js(常称:requireJS)
2. 基本语法
    定义暴露模块: 
        define([依赖模块名], function()&#123;
          return 模块
        &#125;)
    引入模块: 
        require([&#39;模块1&#39;, &#39;模块2&#39;], function(m1, m2)&#123;
          //使用m1与m2
        &#125;)
    配置: 
        //配置
        require.config(&#123;
          //基本路径
          baseUrl: &#39;src/&#39;,
          //映射: 模块标识名: 路径
          paths: &#123;
            //自定义模块
            &#39;a&#39;: &#39;modules/a&#39;,  // 不能加后缀
            &#39;b&#39;: &#39;modules/b&#39;,
            //第三方库
            &#39;jquery&#39;: &#39;libs/jquery-1.10.1&#39;,
          &#125;
        &#125;)
</code></pre>
<h2 id="4-CMD-了解"><a href="#4-CMD-了解" class="headerlink" title="4). CMD(了解)"></a>4). CMD(了解)</h2><pre><code>1. 实现
    浏览器端: sea.js(常称:seaJS)
2.基本语法
    定义暴露模块: 
        define(function(require, module, exports)&#123;
          通过require()引入依赖模块
          通过module/exports来暴露模块
          exports.xxx = value
        &#125;)
    使用模块:
        seajs.use([&#39;模块1&#39;, &#39;模块2&#39;])
</code></pre>
<h2 id="5-ES6-掌握"><a href="#5-ES6-掌握" class="headerlink" title="5). ES6(掌握)"></a>5). ES6(掌握)</h2><pre><code>1. ES6内置了模块化的实现
2. 基本语法
    * 定义暴露模块: export
        默认暴露(暴露一个数据): 
            export default 对象
        一般暴露(暴露多个数据): 
            export const a = value1
            export let b = value2
            
            const c = value1
            let d = value2
            export &#123;c, d&#125;
          
    * 引入使用模块: import
        引入default模块:
              import xxx  from &#39;模块路径/模块名&#39;
        引入一般模块
              import &#123;a, b&#125; from &#39;模块路径/模块名&#39;
              import * as module1 from &#39;模块路径/模块名&#39;
3. 问题: 
    所有浏览器还不能直接识别ES6模块化的语法  
4. 解决:
    使用webpack编译打包
</code></pre>
<h1 id="4-详细教程"><a href="#4-详细教程" class="headerlink" title="4. 详细教程"></a>4. 详细教程</h1><ul>
<li><a href="%E6%95%99%E7%A8%8B/01_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2.md">01_模块化进化史</a></li>
<li><a href="%E6%95%99%E7%A8%8B/02_CommonJS%E8%A7%84%E8%8C%83_Node.md">02_CommonJS规范_Node</a></li>
<li><a href="%E6%95%99%E7%A8%8B/03_CommonJS%E8%A7%84%E8%8C%83_Browserify.md">03_CommonJS规范_Browserify</a></li>
<li><a href="%E6%95%99%E7%A8%8B/04_AMD%E8%A7%84%E8%8C%83_RequireJS.md">04_AMD规范_RequireJS</a></li>
<li><a href="%E6%95%99%E7%A8%8B/05_CMD%E8%A7%84%E8%8C%83_SeaJS.md">05_CMD规范_SeaJS</a></li>
<li><a href="%E6%95%99%E7%A8%8B/06_ES6%E6%A8%A1%E5%9D%97%E5%8C%96_Webpack.md">06_ES6模块化_Webpack</a></li>
</ul>
<h2 id="JS模块化"><a href="#JS模块化" class="headerlink" title="JS模块化"></a>JS模块化</h2><ul>
<li><p>模块化的理解</p>
<blockquote>
<p>当项目功能越来越多，代码量便也会越来越多，后期的维护难度会增大，此时在JS方面就会考虑使用模块化规范去管理。<br>最流行的commonjs, AMD, ES6、CMD规范。</p>
</blockquote>
</li>
<li><p>什么是模块?</p>
<ul>
<li>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起</li>
<li>块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信</li>
</ul>
</li>
<li><p>一个模块的组成</p>
<ul>
<li>数据—&gt;内部的属性</li>
<li>操作数据的行为—&gt;内部的函数</li>
</ul>
</li>
<li><p>模块化</p>
<ul>
<li>编码时是按照模块一个一个编码的, 整个项目就是一个模块化的项目</li>
</ul>
</li>
<li><p>模块化的进化过程</p>
<ul>
<li><p>全局function模式 : </p>
<ul>
<li>编码: 全局变量/函数</li>
<li>问题: 污染全局命名空间, 容易引起命名冲突/数据不安全</li>
</ul>
</li>
<li><p>namespace模式 : </p>
<ul>
<li>编码: 将数据/行为封装到对象中</li>
<li>解决: 命名冲突(减少了全局变量)</li>
<li>问题: 数据不安全(外部可以直接修改模块内部的数据)</li>
</ul>
</li>
<li><p>IIFE模式/增强</p>
<ul>
<li><p>IIFE : 立即调用函数表达式—&gt;匿名函数自调用</p>
</li>
<li><p>编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口</p>
</li>
<li><p>引入依赖: 通过函数形参来引入依赖模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function(window, module2)&#123;</span><br><span class="line">  var data = &#x27;atguigu.com&#x27;</span><br><span class="line">  function foo() &#123;</span><br><span class="line">     module2.xxx()</span><br><span class="line">     console.log(&#x27;foo()&#x27;+data)</span><br><span class="line">  &#125;</span><br><span class="line">  function bar() &#123;</span><br><span class="line">     console.log(&#x27;bar()&#x27;+data)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  window.module = &#123;foo&#125;</span><br><span class="line">&#125;)(window, module2)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>模块化规范</p>
<ul>
<li><p>CommonJS</p>
<ul>
<li><p>Node.js : 服务器端</p>
</li>
<li><p>Browserify : 浏览器端    也称为js的打包工具</p>
</li>
<li><p>基本语法:</p>
<ul>
<li><p>定义暴露模块 : exports</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.xxx = value</span><br><span class="line">module.exports = value</span><br></pre></td></tr></table></figure>

<p>引入模块 : require</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var module = require(&#x27;模块名/模块相对路径&#x27;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>引入模块发生在什么时候?</p>
<ul>
<li>Node : 运行时, 动态同步引入</li>
<li>Browserify : 在运行前对模块进行编译/转译/打包的处理(已经将依赖的模块包含进来了), <pre><code>运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>AMD : 浏览器端</p>
<ul>
<li><p>require.js</p>
</li>
<li><p>基本语法</p>
<ul>
<li><p>定义暴露模块: define([依赖模块名], function(){return 模块对象})</p>
</li>
<li><p>引入模块: require([‘模块1’, ‘模块2’, ‘模块3’], function(m1, m2){//使用模块对象})</p>
</li>
<li><p>配置: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">  //基本路径</span><br><span class="line">  baseUrl : &#x27;js/&#x27;,</span><br><span class="line">  //标识名称与路径的映射</span><br><span class="line">  paths : &#123;</span><br><span class="line">    &#x27;模块1&#x27; : &#x27;modules/模块1&#x27;,</span><br><span class="line">    &#x27;模块2&#x27; : &#x27;modules/模块2&#x27;,</span><br><span class="line">    &#x27;angular&#x27; : &#x27;libs/angular&#x27;,</span><br><span class="line">    &#x27;angular-messages&#x27; : &#x27;libs/angular-messages&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  //非AMD的模块</span><br><span class="line">  shim : &#123;</span><br><span class="line">    &#x27;angular&#x27; : &#123;</span><br><span class="line">        exports : &#x27;angular&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;angular-messages&#x27; : &#123;</span><br><span class="line">        exports : &#x27;angular-messages&#x27;,</span><br><span class="line">        deps : [&#x27;angular&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>CMD : 浏览器端</p>
<ul>
<li><p>sea.js</p>
</li>
<li><p>基本语法</p>
<ul>
<li><p>定义暴露模块: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, module, exports)&#123;</span><br><span class="line">  通过require引入依赖模块</span><br><span class="line">  通过module/exports来暴露模块</span><br><span class="line">  exports.xxx = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用模块seajs.use([‘模块1’, ‘模块2’])</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>ES6</p>
<ul>
<li><p>ES6内置了模块化的实现</p>
</li>
<li><p>基本语法</p>
<ul>
<li><p>定义暴露模块 : export</p>
<ul>
<li><p>暴露一个对象: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default 对象</span><br></pre></td></tr></table></figure>
</li>
<li><p>暴露多个: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export var xxx = value1</span><br><span class="line">export let yyy = value2</span><br><span class="line"></span><br><span class="line">var xxx = value1</span><br><span class="line">let yyy = value2</span><br><span class="line">export &#123;xxx, yyy&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>引入使用模块 : import</p>
<ul>
<li><p>default模块:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import xxx  from &#x27;模块路径/模块名&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其它模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;xxx, yyy&#125; from &#x27;模块路径/模块名&#x27;</span><br><span class="line">import * as module1 from &#x27;模块路径/模块名&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>问题: 所有浏览器还不能直接识别ES6模块化的语法  </p>
</li>
<li><p>解决:</p>
<ul>
<li>使用Babel将ES6—&gt;ES5(使用了CommonJS) —-浏览器还不能直接支行</li>
<li>使用Browserify—&gt;打包处理—-浏览器可以运行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模块化进化史教程"><a href="#模块化进化史教程" class="headerlink" title="模块化进化史教程"></a>模块化进化史教程</h2><ol>
<li>全局function模式</li>
</ol>
<ul>
<li><p>module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//数据</span><br><span class="line">let data = &#x27;atguigu.com&#x27;</span><br><span class="line"></span><br><span class="line">//操作数据的函数</span><br><span class="line">function foo() &#123;</span><br><span class="line">  console.log(`foo() $&#123;data&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  console.log(`bar() $&#123;data&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let data2 = &#x27;other data&#x27;</span><br><span class="line"></span><br><span class="line">function foo() &#123;  //与另一个模块中的函数冲突了</span><br><span class="line">  console.log(`foo() $&#123;data2&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>test1.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">  let data = &quot;修改后的数据&quot;</span><br><span class="line">  foo()</span><br><span class="line">  bar()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明:</p>
<ul>
<li>全局函数模式: 将不同的功能封装成不同的全局函数</li>
<li>问题: Global被污染了, 很容易引起命名冲突</li>
</ul>
</li>
</ul>
<ol start="2">
<li>namespace模式</li>
</ol>
<ul>
<li><p>module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let myModule = &#123;</span><br><span class="line">  data: &#x27;atguigu.com&#x27;,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    console.log(`foo() $&#123;this.data&#125;`)</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">    console.log(`bar() $&#123;this.data&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let myModule2 = &#123;</span><br><span class="line">  data: &#x27;atguigu.com2222&#x27;,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    console.log(`foo() $&#123;this.data&#125;`)</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">    console.log(`bar() $&#123;this.data&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>test2.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module22.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  myModule.foo()</span><br><span class="line">  myModule.bar()</span><br><span class="line"></span><br><span class="line">  myModule2.foo()</span><br><span class="line">  myModule2.bar()</span><br><span class="line"></span><br><span class="line">  myModule.data = &#x27;other data&#x27; //能直接修改模块内部的数据</span><br><span class="line">  myModule.foo()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<ul>
<li>namespace模式: 简单对象封装</li>
<li>作用: 减少了全局变量</li>
<li>问题: 不安全</li>
</ul>
</li>
</ul>
<ol start="3">
<li>IIFE模式</li>
</ol>
<ul>
<li><p>module3.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (window) &#123;</span><br><span class="line">  //数据</span><br><span class="line">  let data = &#x27;atguigu.com&#x27;</span><br><span class="line"></span><br><span class="line">  //操作数据的函数</span><br><span class="line">  function foo() &#123; //用于暴露有函数</span><br><span class="line">    console.log(`foo() $&#123;data&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function bar() &#123;//用于暴露有函数</span><br><span class="line">    console.log(`bar() $&#123;data&#125;`)</span><br><span class="line">    otherFun() //内部调用</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function otherFun() &#123; //内部私有的函数</span><br><span class="line">    console.log(&#x27;otherFun()&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //暴露行为</span><br><span class="line">  window.myModule = &#123;foo, bar&#125;</span><br><span class="line">&#125;)(window)</span><br></pre></td></tr></table></figure>
</li>
<li><p>test3.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  myModule.foo()</span><br><span class="line">  myModule.bar()</span><br><span class="line">  //myModule.otherFun()  //myModule.otherFun is not a function</span><br><span class="line">  console.log(myModule.data) //undefined 不能访问模块内部数据</span><br><span class="line">  myModule.data = &#x27;xxxx&#x27; //不是修改的模块内部的data</span><br><span class="line">  myModule.foo() //没有改变</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明:</p>
<ul>
<li>IIFE模式: 匿名函数自调用(闭包)</li>
<li>IIFE : immediately-invoked function expression(立即调用函数表达式)</li>
<li>作用: 数据是私有的, 外部只能通过暴露的方法操作</li>
<li>问题: 如果当前这个模块依赖另一个模块怎么办?</li>
</ul>
</li>
</ul>
<ol start="4">
<li>IIFE模式增强</li>
</ol>
<ul>
<li><p>引入jquery到项目中</p>
</li>
<li><p>module4.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (window, $) &#123;</span><br><span class="line">  //数据</span><br><span class="line">  let data = &#x27;atguigu.com&#x27;</span><br><span class="line"></span><br><span class="line">  //操作数据的函数</span><br><span class="line">  function foo() &#123; //用于暴露有函数</span><br><span class="line">    console.log(`foo() $&#123;data&#125;`)</span><br><span class="line">    $(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function bar() &#123;//用于暴露有函数</span><br><span class="line">    console.log(`bar() $&#123;data&#125;`)</span><br><span class="line">    otherFun() //内部调用</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function otherFun() &#123; //内部私有的函数</span><br><span class="line">    console.log(&#x27;otherFun()&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //暴露行为</span><br><span class="line">  window.myModule = &#123;foo, bar&#125;</span><br><span class="line">&#125;)(window, jQuery)</span><br></pre></td></tr></table></figure>
</li>
<li><p>test4.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.10.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  myModule.foo()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<ul>
<li>IIFE模式增强 : 引入依赖</li>
<li>这就是现代模块实现的基石</li>
</ul>
</li>
</ul>
<ol start="5">
<li>页面加载多个js的问题</li>
</ol>
<ul>
<li><p>页面:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<ul>
<li>一个页面需要引入多个js文件</li>
<li>问题:<ul>
<li>请求过多</li>
<li>依赖模糊</li>
<li>难以维护</li>
</ul>
</li>
<li>这些问题可以通过现代模块化编码和项目构建来解决</li>
</ul>
</li>
</ul>
<h2 id="Node-js模块化教程"><a href="#Node-js模块化教程" class="headerlink" title="Node.js模块化教程"></a>Node.js模块化教程</h2><ol>
<li><p>下载安装node.js</p>
</li>
<li><p>创建项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-modules</span><br><span class="line">  |-module1.js</span><br><span class="line">  |-module2.js</span><br><span class="line">  |-module3.js</span><br><span class="line">|-app.js</span><br><span class="line">|-package.json</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;commonJS-node&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载第三方模块</p>
</li>
</ol>
<ul>
<li>npm install uniq –save</li>
</ul>
<ol start="4">
<li>模块化编码</li>
</ol>
<ul>
<li><p>module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    console.log(&#x27;moudle1 foo()&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = function () &#123;</span><br><span class="line">  console.log(&#x27;module2()&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module3.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.foo = function () &#123;</span><br><span class="line">  console.log(&#x27;module3 foo()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.bar = function () &#123;</span><br><span class="line">  console.log(&#x27;module3 bar()&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>app.js </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  1. 定义暴露模块:</span><br><span class="line">    module.exports = value;</span><br><span class="line">    exports.xxx = value;</span><br><span class="line">  2. 引入模块:</span><br><span class="line">    var module = require(模块名或模块路径);</span><br><span class="line"> */</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">//引用模块</span><br><span class="line">let module1 = require(&#x27;./modules/module1&#x27;)</span><br><span class="line">let module2 = require(&#x27;./modules/module2&#x27;)</span><br><span class="line">let module3 = require(&#x27;./modules/module3&#x27;)</span><br><span class="line"></span><br><span class="line">let uniq = require(&#x27;uniq&#x27;)</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">//使用模块</span><br><span class="line">module1.foo()</span><br><span class="line">module2()</span><br><span class="line">module3.foo()</span><br><span class="line">module3.bar()</span><br><span class="line"></span><br><span class="line">console.log(uniq([1, 3, 1, 4, 3]))</span><br><span class="line"></span><br><span class="line">fs.readFile(&#x27;app.js&#x27;, function (error, data) &#123;</span><br><span class="line">  console.log(data.toString())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="5">
<li>通过node运行app.js</li>
</ol>
<ul>
<li>命令: node app.js</li>
<li>工具: 右键–&gt;运行</li>
</ul>
<h2 id="Browserify模块化使用教程"><a href="#Browserify模块化使用教程" class="headerlink" title="Browserify模块化使用教程"></a>Browserify模块化使用教程</h2><ol>
<li><p>创建项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-js</span><br><span class="line">  |-dist //打包生成文件的目录</span><br><span class="line">  |-src //源码所在的目录</span><br><span class="line">    |-module1.js</span><br><span class="line">    |-module2.js</span><br><span class="line">    |-module3.js</span><br><span class="line">    |-app.js //应用主源文件</span><br><span class="line">|-index.html</span><br><span class="line">|-package.json</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;browserify-test&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载browserify</p>
</li>
</ol>
<ul>
<li>全局: npm install browserify -g</li>
<li>局部: npm install browserify –save-dev</li>
</ul>
<ol start="3">
<li>定义模块代码</li>
</ol>
<ul>
<li><p>module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    console.log(&#x27;moudle1 foo()&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = function () &#123;</span><br><span class="line">  console.log(&#x27;module2()&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>module3.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.foo = function () &#123;</span><br><span class="line">  console.log(&#x27;module3 foo()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.bar = function () &#123;</span><br><span class="line">  console.log(&#x27;module3 bar()&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>app.js (应用的主js)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引用模块</span><br><span class="line">let module1 = require(&#x27;./module1&#x27;)</span><br><span class="line">let module2 = require(&#x27;./module2&#x27;)</span><br><span class="line">let module3 = require(&#x27;./module3&#x27;)</span><br><span class="line"></span><br><span class="line">let uniq = require(&#x27;uniq&#x27;)</span><br><span class="line"></span><br><span class="line">//使用模块</span><br><span class="line">module1.foo()</span><br><span class="line">module2()</span><br><span class="line">module3.foo()</span><br><span class="line">module3.bar()</span><br><span class="line"></span><br><span class="line">console.log(uniq([1, 3, 1, 4, 3]))</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包处理js:</p>
<ul>
<li>browserify js/src/app.js -o js/dist/bundle.js</li>
</ul>
</li>
<li><p>页面使用引入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="require-js使用教程"><a href="#require-js使用教程" class="headerlink" title="require.js使用教程"></a>require.js使用教程</h2><ol>
<li>下载require.js, 并引入</li>
</ol>
<ul>
<li>官网: <a href="http://www.requirejs.cn/">http://www.requirejs.cn/</a></li>
<li>github : <a href="https://github.com/requirejs/requirejs">https://github.com/requirejs/requirejs</a></li>
<li>将require.js导入项目: js/libs/require.js </li>
</ul>
<ol start="2">
<li><p>创建项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-js</span><br><span class="line">  |-libs</span><br><span class="line">    |-require.js</span><br><span class="line">  |-modules</span><br><span class="line">    |-alerter.js</span><br><span class="line">    |-dataService.js</span><br><span class="line">  |-main.js</span><br><span class="line">|-index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义require.js的模块代码</p>
</li>
</ol>
<ul>
<li><p>dataService.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function () &#123;</span><br><span class="line">  let msg = &#x27;atguigu.com&#x27;</span><br><span class="line"></span><br><span class="line">  function getMsg() &#123;</span><br><span class="line">    return msg.toUpperCase()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;getMsg&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>alerter.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;dataService&#x27;, &#x27;jquery&#x27;], function (dataService, $) &#123;</span><br><span class="line">  let name = &#x27;Tom2&#x27;</span><br><span class="line"></span><br><span class="line">  function showMsg() &#123;</span><br><span class="line">    $(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;gray&#x27;)</span><br><span class="line">    alert(dataService.getMsg() + &#x27;, &#x27; + name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123;showMsg&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li><p>应用主(入口)js: main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  //配置</span><br><span class="line">  require.config(&#123;</span><br><span class="line">    //基本路径</span><br><span class="line">    baseUrl: &quot;js/&quot;,</span><br><span class="line">    //模块标识名与模块路径映射</span><br><span class="line">    paths: &#123;</span><br><span class="line">      &quot;alerter&quot;: &quot;modules/alerter&quot;,</span><br><span class="line">      &quot;dataService&quot;: &quot;modules/dataService&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  //引入使用模块</span><br><span class="line">  require( [&#x27;alerter&#x27;], function(alerter) &#123;</span><br><span class="line">    alerter.showMsg()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面使用模块:</p>
<script data-main="js/main" src="js/libs/require.js"></script>

</li>
</ol>
<hr>
<ol start="6">
<li>使用第三方基于require.js的框架(jquery)</li>
</ol>
<ul>
<li><p>将jquery的库文件导入到项目: </p>
<ul>
<li>js/libs/jquery-1.10.1.js</li>
</ul>
</li>
<li><p>在main.js中配置jquery路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paths: &#123;</span><br><span class="line">          &#x27;jquery&#x27;: &#x27;libs/jquery-1.10.1&#x27;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在alerter.js中使用jquery</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;dataService&#x27;, &#x27;jquery&#x27;], function (dataService, $) &#123;</span><br><span class="line">    var name = &#x27;xfzhang&#x27;</span><br><span class="line">    function showMsg() &#123;</span><br><span class="line">        $(&#x27;body&#x27;).css(&#123;background : &#x27;red&#x27;&#125;)</span><br><span class="line">        alert(name + &#x27; &#x27;+dataService.getMsg())</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;showMsg&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ol start="7">
<li>使用第三方不基于require.js的框架(angular/angular-messages)</li>
</ol>
<ul>
<li><p>将angular.js和angular-messages.js导入项目</p>
<ul>
<li>js/libs/angular.js</li>
<li>js/libs/angular-messages.js</li>
</ul>
</li>
<li><p>在main.js中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  require.config(&#123;</span><br><span class="line">    //基本路径</span><br><span class="line">    baseUrl: &quot;js/&quot;,</span><br><span class="line">    //模块标识名与模块路径映射</span><br><span class="line">    paths: &#123;</span><br><span class="line">      //第三方库</span><br><span class="line">      &#x27;jquery&#x27; : &#x27;libs/jquery-1.10.1&#x27;,</span><br><span class="line">      &#x27;angular&#x27; : &#x27;libs/angular&#x27;,</span><br><span class="line">      &#x27;angular-messages&#x27; : &#x27;libs/angular-messages&#x27;,</span><br><span class="line">      //自定义模块</span><br><span class="line">      &quot;alerter&quot;: &quot;modules/alerter&quot;,</span><br><span class="line">      &quot;dataService&quot;: &quot;modules/dataService&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*</span><br><span class="line">     配置不兼容AMD的模块</span><br><span class="line">     exports : 指定导出的模块名</span><br><span class="line">     deps  : 指定所有依赖的模块的数组</span><br><span class="line">     */</span><br><span class="line">    shim: &#123;</span><br><span class="line">      &#x27;angular&#x27; : &#123;</span><br><span class="line">        exports : &#x27;angular&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;angular-messages&#x27; : &#123;</span><br><span class="line">        exports : &#x27;angular-messages&#x27;,</span><br><span class="line">        deps : [&#x27;angular&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  //引入使用模块</span><br><span class="line">  require( [&#x27;alerter&#x27;, &#x27;angular&#x27;, &#x27;angular-messages&#x27;], function(alerter, angular) &#123;</span><br><span class="line">    alerter.showMsg()</span><br><span class="line">    angular.module(&#x27;myApp&#x27;, [&#x27;ngMessages&#x27;])</span><br><span class="line">    angular.bootstrap(document,[&quot;myApp&quot;])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form name=&quot;myForm&quot;&gt;</span><br><span class="line">  用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot; ng-model=&quot;username&quot; ng-required=&quot;true&quot;&gt;</span><br><span class="line">  &lt;div style=&quot;color: red;&quot; ng-show=&quot;myForm.username.$dirty&amp;&amp;myForm.username.$invalid&quot;&gt;用户名是必须的&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="sea-js简单使用教程"><a href="#sea-js简单使用教程" class="headerlink" title="sea.js简单使用教程"></a>sea.js简单使用教程</h2><ol>
<li>下载sea.js, 并引入</li>
</ol>
<ul>
<li>官网: <a href="http://seajs.org/">http://seajs.org/</a></li>
<li>github : <a href="https://github.com/seajs/seajs">https://github.com/seajs/seajs</a></li>
<li>将sea.js导入项目: js/libs/sea.js </li>
</ul>
<ol start="2">
<li><p>创建项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-js</span><br><span class="line">  |-libs</span><br><span class="line">    |-sea.js</span><br><span class="line">  |-modules</span><br><span class="line">    |-module1.js</span><br><span class="line">    |-module2.js</span><br><span class="line">    |-module3.js</span><br><span class="line">    |-module4.js</span><br><span class="line">    |-main.js</span><br><span class="line">|-index.html</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义sea.js的模块代码</p>
</li>
</ol>
<ul>
<li><p>module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function (require, exports, module) &#123;</span><br><span class="line">  //内部变量数据</span><br><span class="line">  var data = &#x27;atguigu.com&#x27;</span><br><span class="line">  //内部函数</span><br><span class="line">  function show() &#123;</span><br><span class="line">    console.log(&#x27;module1 show() &#x27; + data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //向外暴露</span><br><span class="line">  exports.show = show</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function (require, exports, module) &#123;</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    msg: &#x27;I Will Back&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>module3.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function (require, exports, module) &#123;</span><br><span class="line">  const API_KEY = &#x27;abc123&#x27;</span><br><span class="line">  exports.API_KEY = API_KEY</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>module4.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function (require, exports, module) &#123;</span><br><span class="line">  //引入依赖模块(同步)</span><br><span class="line">  var module2 = require(&#x27;./module2&#x27;)</span><br><span class="line"></span><br><span class="line">  function show() &#123;</span><br><span class="line">    console.log(&#x27;module4 show() &#x27; + module2.msg)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  exports.show = show</span><br><span class="line">  //引入依赖模块(异步)</span><br><span class="line">  require.async(&#x27;./module3&#x27;, function (m3) &#123;</span><br><span class="line">    console.log(&#x27;异步引入依赖模块3  &#x27; + m3.API_KEY)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>main.js : 主(入口)模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function (require) &#123;</span><br><span class="line">  var m1 = require(&#x27;./module1&#x27;)</span><br><span class="line">  var m4 = require(&#x27;./module4&#x27;)</span><br><span class="line">  m1.show()</span><br><span class="line">  m4.show()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li><p>index.html:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">使用seajs:</span><br><span class="line">  1. 引入sea.js库</span><br><span class="line">  2. 如何定义导出模块 :</span><br><span class="line">    define()</span><br><span class="line">    exports</span><br><span class="line">    module.exports</span><br><span class="line">  3. 如何依赖模块:</span><br><span class="line">    require()</span><br><span class="line">  4. 如何使用模块:</span><br><span class="line">    seajs.use()</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/libs/sea.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  seajs.use(&#x27;./js/modules/main&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="ES6-Babel-Browserify使用教程"><a href="#ES6-Babel-Browserify使用教程" class="headerlink" title="ES6-Babel-Browserify使用教程"></a>ES6-Babel-Browserify使用教程</h2><ol>
<li><p>定义package.json文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;es6-babel-browserify&quot;,</span><br><span class="line">  &quot;version&quot; : &quot;1.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装babel-cli, babel-preset-es2015和browserify</p>
</li>
</ol>
<ul>
<li>npm install babel-cli browserify -g<ul>
<li>npm install babel-preset-es2015 –save-dev </li>
</ul>
</li>
</ul>
<ol start="3">
<li><p>定义.babelrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编码</p>
</li>
</ol>
<ul>
<li><p>js/src/module1.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export function foo() &#123;</span><br><span class="line">  console.log(&#x27;module1 foo()&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">export let bar = function () &#123;</span><br><span class="line">  console.log(&#x27;module1 bar()&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">export const DATA_ARR = [1, 3, 5, 1]</span><br></pre></td></tr></table></figure>
</li>
<li><p>js/src/module2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let data = &#x27;module2 data&#x27;</span><br><span class="line"></span><br><span class="line">function fun1() &#123;</span><br><span class="line">  console.log(&#x27;module2 fun1() &#x27; + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fun2() &#123;</span><br><span class="line">  console.log(&#x27;module2 fun2() &#x27; + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;fun1, fun2&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>js/src/module3.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Tom&#x27;,</span><br><span class="line">  setName: function (name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>js/src/app.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;foo, bar&#125; from &#x27;./module1&#x27;</span><br><span class="line">import &#123;DATA_ARR&#125; from &#x27;./module1&#x27;</span><br><span class="line">import &#123;fun1, fun2&#125; from &#x27;./module2&#x27;</span><br><span class="line">import person from &#x27;./module3&#x27;</span><br><span class="line"></span><br><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line"></span><br><span class="line">$(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">bar()</span><br><span class="line">console.log(DATA_ARR);</span><br><span class="line">fun1()</span><br><span class="line">fun2()</span><br><span class="line"></span><br><span class="line">person.setName(&#x27;JACK&#x27;)</span><br><span class="line">console.log(person.name);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="5">
<li>编译</li>
</ol>
<ul>
<li>使用Babel将ES6编译为ES5代码(但包含CommonJS语法) : babel js/src -d js/lib</li>
<li>使用Browserify编译js : browserify js/lib/app.js -o js/lib/bundle.js</li>
</ul>
<ol start="6">
<li><p>页面中引入测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入第三方模块(jQuery)<br>1). 下载jQuery模块: </p>
<ul>
<li>npm install jquery@1 –save<br>2). 在app.js中引入并使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line">$(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​       </p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-笔记</title>
    <url>/2019/10/28/JavaScript-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="underscorejs中文网"><a href="#underscorejs中文网" class="headerlink" title="underscorejs中文网"></a><a href="https://www.underscore-js.com/">underscorejs中文网</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。</span><br><span class="line">var HTML_ENTITY = &#123;&#125;;</span><br><span class="line">// 类 使用 Pascal命名法。 类名 使用 名词。</span><br><span class="line">function TextNode(options) &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br><span class="line">// 函数名 使用 动宾短语。</span><br><span class="line">function getStyle(element) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1</span><br><span class="line">function foo () &#123;</span><br><span class="line">    var n = &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// console.log(n);</span><br><span class="line">//2</span><br><span class="line">var m = 0;</span><br><span class="line">function mFun () &#123;</span><br><span class="line">    console.log(m);</span><br><span class="line">&#125;</span><br><span class="line">mFun();</span><br><span class="line">//3</span><br><span class="line">function foo () &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function bar () &#123;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">// 第一题</span><br><span class="line">var a = 1;</span><br><span class="line">function fn() &#123;</span><br><span class="line">  console.log(&#x27;1:&#x27; + a);</span><br><span class="line"></span><br><span class="line">  var a = 2;</span><br><span class="line">  bar()</span><br><span class="line">  console.log(&#x27;2:&#x27; + a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">  console.log(&#x27;3:&#x27; + a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">// 第二题</span><br><span class="line">var a = 1;</span><br><span class="line">function fn() &#123;</span><br><span class="line">  console.log(&#x27;1:&#x27; + a);</span><br><span class="line">  a = 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = 3;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  console.log(&#x27;2:&#x27; + a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line">// 第一题</span><br><span class="line">var a = 1;</span><br><span class="line">function fn(f) &#123;</span><br><span class="line">  var a = 2;</span><br><span class="line">  return f;</span><br><span class="line">&#125;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">var f1 = fn(bar);</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line">// 第二题</span><br><span class="line">var a = 1;</span><br><span class="line">function fn(f) &#123;</span><br><span class="line">  var a = 2;</span><br><span class="line">  return function () &#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f1 = fn();</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jsonObj = &#123;</span><br><span class="line">    &quot;title&quot;:&quot;javascript&quot;,</span><br><span class="line">    &quot;group&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&quot;jia&quot;,</span><br><span class="line">        &quot;tel&quot;:12345</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var json = JSON.stringify(jsonObj);</span><br><span class="line">console.log(json);</span><br><span class="line">console.log(typeof jsonObj);</span><br><span class="line">console.log(typeof json);</span><br><span class="line"></span><br><span class="line">var jsonParse = JSON.parse(json);</span><br><span class="line">console.log(&#x27;jsonParse&#x27;);</span><br><span class="line">console.log(jsonParse);</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(Math));</span><br><span class="line"></span><br><span class="line">var json2 = JSON.stringify(&#123;a:1,b:2&#125;, function(key, value) &#123;</span><br><span class="line">    if(typeof value === &quot;number&quot;)&#123;</span><br><span class="line">        value = 2*value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return value;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;json2&#x27;);</span><br><span class="line">console.log(json2);</span><br><span class="line"></span><br><span class="line">var json3 = JSON.stringify(&#123;a: &#123;b: 1&#125;&#125;,function (key, value)&#123;</span><br><span class="line">    console.log(key + value);</span><br><span class="line"></span><br><span class="line">    return value;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;json3&#x27;);</span><br><span class="line">console.log(json3);</span><br><span class="line"></span><br><span class="line">var o = &#123;</span><br><span class="line">    foo: &#x27;foo&#x27;,</span><br><span class="line">    toJSON: function()&#123;</span><br><span class="line">        return &#x27;bar&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(&#123;x: o&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var objectFoo = &#123;same:&#x27;same&#x27;&#125;;</span><br><span class="line">var objectBar = &#123;same:&#x27;same&#x27;&#125;;</span><br><span class="line">console.log(objectFoo == objectBar);//false</span><br><span class="line"></span><br><span class="line">var objectA = &#123;foo: &#x27;bar&#x27;&#125;;</span><br><span class="line">var objectB = objectA;</span><br><span class="line"></span><br><span class="line">console.log(objectA == objectB);//true</span><br><span class="line"></span><br><span class="line">console.log(a);</span><br><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">// console.log(b);</span><br><span class="line">// b = 2;</span><br><span class="line"></span><br><span class="line">switch(a)&#123;</span><br><span class="line">case  1 :</span><br><span class="line">    console.log(&quot;正确的&quot;);</span><br><span class="line">    break;</span><br><span class="line">case  2 :</span><br><span class="line">    console.log(&#x27;错误的&#x27;);</span><br><span class="line">    break;</span><br><span class="line">default :</span><br><span class="line">    console.log(&quot;没关系&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// var even = (n % 2 === 0) ? true : false;</span><br><span class="line"></span><br><span class="line">var x = 3;</span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; while(i &lt; x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(typeof window);</span><br><span class="line">console.log(typeof &#123;&#125;);</span><br><span class="line">console.log(typeof []);</span><br><span class="line">console.log(typeof null);</span><br><span class="line">console.log(typeof undefined);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log( Number(null));  //null相当于0</span><br><span class="line">console.log( Number(undefined)); //undefined相当于NaN</span><br><span class="line"></span><br><span class="line">console.log(0.1 + 0.2 === 0.3);</span><br><span class="line">console.log(0.3 / 0.1);</span><br><span class="line"></span><br><span class="line">console.log(&quot;Did you greet \&#x27;hello\&#x27; yesterday?&quot;);</span><br><span class="line"></span><br><span class="line">var s = &#x27;\uD834\uDF06&#x27;;</span><br><span class="line">console.log(s);</span><br><span class="line"></span><br><span class="line">function b64Encode(str) &#123;</span><br><span class="line">    return btoa(encodeURIComponent(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b64Decode(str) &#123;</span><br><span class="line">    return decodeURIComponent(atob(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b64Encode(&quot;感恩节快乐！&quot;));</span><br><span class="line">console.log(b64Decode(&quot;&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var o = &#123;</span><br><span class="line">    name : &#x27;Alice&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var p = [];</span><br><span class="line"></span><br><span class="line">with (o) &#123;</span><br><span class="line">    p.push(&#x27;Hello&#x27;, name, &#x27;!&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// p.join(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(p.join(&#x27; &#x27;));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function employee(name,job,born)</span><br><span class="line">&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.job=job;</span><br><span class="line">    this.born=born;</span><br><span class="line">&#125;</span><br><span class="line">if(!window.console)&#123;  </span><br><span class="line">    window.console = &#123;&#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">if(!window.console.log)&#123;  </span><br><span class="line">    window.console.log = function(msg)&#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line">var bill=new employee(&quot;Bill Gates&quot;,&quot;Engineer&quot;,1985);</span><br><span class="line">var yang=new employee(&quot;Bill Gates&quot;,&quot;Engineer&quot;,1985);</span><br><span class="line"></span><br><span class="line">employee.prototype.salary=3000;</span><br><span class="line">bill.salary=20000;</span><br><span class="line"></span><br><span class="line">document.write(&quot;bill的薪资：&quot; + bill.salary + &quot;&lt;br/&gt;&quot;);</span><br><span class="line">document.write(&quot;yang的薪资：&quot; + yang.salary);</span><br><span class="line">console.log(&quot;yang&quot;);</span><br><span class="line">console.log(yang);</span><br><span class="line">console.log(&quot;bill&quot;);</span><br><span class="line">console.log(bill);</span><br><span class="line"></span><br><span class="line">console.log(employee.prototype);</span><br><span class="line">console.log(bill.__proto__);</span><br><span class="line"></span><br><span class="line">var date = new Date();</span><br><span class="line">console.log(date);</span><br><span class="line">console.log(date.constructor);</span><br><span class="line">console.log(date.prototype);</span><br><span class="line">console.log(date.__proto__);</span><br><span class="line">console.log(Date.prototype);</span><br><span class="line">console.log(date.__proto__ === Date.prototype);</span><br><span class="line"></span><br><span class="line">function extendFun()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var p = new Date();</span><br><span class="line">extendFun.prototype = p;</span><br><span class="line"></span><br><span class="line">console.log(extendFun.__proto__);</span><br><span class="line">console.log(extendFun.prototype);</span><br><span class="line">console.log(Date.prototype);</span><br><span class="line"></span><br><span class="line">p.setMonth(0);</span><br><span class="line">console.log(p);</span><br><span class="line"></span><br><span class="line">console.log(Math.max(2,10));  </span><br><span class="line">console.log(Math.min(2,10));  </span><br><span class="line">console.log(Math.abs(-100));  </span><br><span class="line">console.log(Math.random().toFixed(1));  </span><br><span class="line">console.log(Math.round(2.90833));  </span><br><span class="line">console.log(Math.round(2.0210));</span><br><span class="line"></span><br><span class="line">var num = new Number();</span><br><span class="line">console.log(num.constructor);//Number()</span><br><span class="line">console.log(num.__proto__);</span><br><span class="line">console.log(Number.constructor);//Function()</span><br><span class="line">console.log(Number.prototype);</span><br><span class="line"></span><br><span class="line">var num1 = new Number(&quot;2990909&quot;);</span><br><span class="line">var num2 = new Number(&quot;dsdfdfd&quot;);</span><br><span class="line">num1.len = 7;</span><br><span class="line">console.log(num1);</span><br><span class="line">console.log(num1.len);</span><br><span class="line">console.log(num2);</span><br><span class="line">console.log(typeof(num1));</span><br><span class="line">//num1 和 num2是对象(object)，num3 和 num4是变量（number类型）</span><br><span class="line">var num3 = Number(&quot;2990909&quot;);</span><br><span class="line">var num4 = Number(&quot;dsdfdfd&quot;);</span><br><span class="line">console.log(num3);</span><br><span class="line">console.log(num4);</span><br><span class="line">console.log(typeof(num3));</span><br><span class="line">//判断一个值是不是数字，使用isNaN()</span><br><span class="line">if(isNaN(num4))&#123;</span><br><span class="line">    console.log(&quot;这个值不是数字&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Number.NaN);</span><br><span class="line"></span><br><span class="line">console.log(num5.toString(2));</span><br><span class="line">console.log(num5.toString(3));</span><br><span class="line">console.log(num5.toString(4));</span><br><span class="line">console.log(num5.toString(5));</span><br><span class="line">console.log(num5.toString(6));</span><br><span class="line">console.log(num5.toString(7));</span><br><span class="line">console.log(num5.toString(8));</span><br><span class="line">console.log(num5.toString(9));</span><br><span class="line">console.log(num5.toString(11));</span><br><span class="line"></span><br><span class="line">var num5 = new Number(&quot;520&quot;);</span><br><span class="line">console.log(num5.toString(13));</span><br><span class="line">console.log(num5.toString(14));</span><br><span class="line">console.log(num5.toLocaleString());</span><br><span class="line">console.log(num5.toFixed());</span><br><span class="line">console.log(num5.toExponential(20));</span><br><span class="line">console.log(num5.toPrecision(20));</span><br><span class="line"></span><br><span class="line">var str = new String();</span><br><span class="line">var str1 = String(&quot;90909090&quot;);</span><br><span class="line">var str2 = Number(&quot;90909090&quot;);</span><br><span class="line">console.log(str.__proto__);</span><br><span class="line">console.log(String.prototype);</span><br><span class="line">console.log(str1.length);//字符串有长度。输出8</span><br><span class="line">console.log(str2.length);//number没有长度，输出值为undefined</span><br><span class="line">var txt=&quot;Hello world!&quot;</span><br><span class="line"></span><br><span class="line">// document.write(txt.anchor(&quot;myanchor&quot;));</span><br><span class="line">// document.write(txt.big());</span><br><span class="line">document.write(&quot;&lt;br/&gt;&quot; + txt.charCodeAt(8));</span><br><span class="line">var txt1 = &quot;hhjhkhkhjkhssdkhs&quot;;</span><br><span class="line">var txt2 = &quot;jkdkdksd&quot;;</span><br><span class="line">var txt3 = &quot;hjkhksdhsksh&quot;;</span><br><span class="line">console.log(txt1.concat(txt2,txt3));</span><br><span class="line"></span><br><span class="line">var str = new String(&quot;yangyanyi&quot;);</span><br><span class="line">var str2 = String(&quot;yangyanyi&quot;);</span><br><span class="line">console.log(str);</span><br><span class="line">console.log(str.__proto__);</span><br><span class="line">document.write(str2.big());</span><br><span class="line">console.log(str2);</span><br><span class="line"></span><br><span class="line">document.write(str.fontcolor(&quot;pink&quot;));</span><br><span class="line">document.write(str.fontsize(&quot;16&quot;));</span><br><span class="line">document.write(str.italics());</span><br><span class="line"></span><br><span class="line">console.log(str.lastIndexOf(&quot;i&quot;));</span><br><span class="line">console.log(str.match(&quot;yi&quot;));</span><br><span class="line">var index = str.match(&quot;yi&quot;).index;//字符串出现的位置</span><br><span class="line">console.log(index);</span><br><span class="line">var str3=&quot;1 plus 2 equal 3&quot;;</span><br><span class="line">console.log(str3.match(/\d+/g));</span><br><span class="line"></span><br><span class="line">var str4 = &quot;w3c学习&quot;;</span><br><span class="line">document.write(str4.link(&quot;http://www.w3school.com.cn&quot;));</span><br><span class="line">var str5 = &quot;2017-09-11&quot;;</span><br><span class="line">console.log(str5.replace(/-/g,&quot;/&quot;));</span><br><span class="line">console.log(str5.replace(/-/g,&quot; &quot;));</span><br><span class="line"></span><br><span class="line">var arr1 = [&quot;yi&quot;, 7,&quot;yangyanyi&quot;];</span><br><span class="line">var arr2 = &#123;</span><br><span class="line">    name:&quot;yangyanyi&quot;,</span><br><span class="line">    age:25,</span><br><span class="line">    hobby:[&quot;read&quot;,&quot;play&quot;,&quot;liste&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">console.log($.isArray(arr1));</span><br><span class="line">console.log($.isArray(arr2));</span><br><span class="line">console.log($.isArray(arr2.hobby));</span><br><span class="line"></span><br><span class="line">var str6 = &quot;yangYanyi&quot;;</span><br><span class="line">console.log(str6.search(/yany/));</span><br><span class="line">console.log(str6.search(/yany/i));</span><br><span class="line">console.log(str6.slice(0,5));</span><br><span class="line">console.log(str6.slice(-1));</span><br><span class="line"></span><br><span class="line">var str7 = &quot;How are you doing today?&quot;;</span><br><span class="line">console.log(str7.split(&quot; &quot;));</span><br><span class="line">console.log(str7.split(&quot;&quot;));</span><br><span class="line">console.log(str7.split(&quot; &quot;,3));</span><br><span class="line"></span><br><span class="line">var arr = new Array(3);</span><br><span class="line">arr[0] = &quot;How&quot;;</span><br><span class="line">arr[1] = &quot;are&quot;;</span><br><span class="line">arr[2] = &quot;you&quot;;</span><br><span class="line">var strJoin =  arr.join(&quot; &quot;);</span><br><span class="line">console.log(strJoin + &quot;!&quot;);</span><br><span class="line">document.write(strJoin.strike());</span><br><span class="line">console.log(strJoin.substr(0,10));</span><br><span class="line"></span><br><span class="line">var reg = new RegExp();</span><br><span class="line">console.log(reg.__proto__);</span><br><span class="line">console.log(isFinite(&quot;2558558&quot;));</span><br><span class="line">console.log(isFinite(&quot;hello&quot;));</span><br><span class="line">console.log(isFinite(&quot;2017/09/13&quot;));</span><br><span class="line">console.log(window);</span><br><span class="line">console.log(window.prototype);</span><br><span class="line">console.log(window.__proto__);</span><br><span class="line">console.log(window.constructor);</span><br><span class="line">console.log(window.innerHeight);</span><br><span class="line">console.log(window.innerWidth);</span><br><span class="line">console.log(window.navigator);</span><br><span class="line">console.log(window.outerHeight);</span><br><span class="line">console.log(window.outerWidth);</span><br><span class="line">console.log(window.pageXOffset);</span><br><span class="line">console.log(window.pageYOffset);</span><br><span class="line">console.log(window.screenX);</span><br><span class="line">console.log(window.screenY);</span><br><span class="line">console.log(window.screenLeft);</span><br><span class="line">console.log(window.screenTop);</span><br><span class="line"></span><br><span class="line">//  随机生成6个数</span><br><span class="line">function sixNum(e)&#123;</span><br><span class="line">  var str =&#x27;&#x27;;</span><br><span class="line">  for(var i=0;i&lt;e;i++)&#123;</span><br><span class="line"></span><br><span class="line">      str += Math.floor(Math.random()*10);</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line">console.log(sixNum(4));</span><br><span class="line">console.log(Math.random()*10);</span><br><span class="line"></span><br><span class="line">var  aa = 123;(function()&#123;console.log(aa)&#125;)();</span><br><span class="line">var  bb = 123;(function()&#123;console.log(bb);var  bb  =  456;&#125;)();</span><br><span class="line">var  cc = 123;(function()&#123;var cc;console.log(cc);cc = 456;&#125;)();</span><br><span class="line">var str1 = &#x27;&#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;&#x27;;//JSON字符串</span><br><span class="line">var str2 = &#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;//JSON对象</span><br><span class="line">var str3 = eval(&#x27;(&#x27; + str1 + &#x27;)&#x27;);//JSON字符串转换为JSON对象</span><br><span class="line">console.log(str3);</span><br><span class="line">console.log(str1.parseJSON);</span><br><span class="line">console.log(JSON.parse(str1));//JSON字符串转换为JSON对象</span><br><span class="line">console.log(JSON.stringify(str2));//JSON对象转换为JSON字符串</span><br><span class="line"></span><br><span class="line">function user(n, a)</span><br><span class="line">&#123;</span><br><span class="line">  this.name = n;</span><br><span class="line">  this.age = a;</span><br><span class="line">  this.toString = function() &#123;</span><br><span class="line">      return &quot;Name:&quot; + this.name + &quot;, Age:&quot; + this.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var u = new user(&quot;tom&quot;, 18);</span><br><span class="line">for (var k in u) &#123;</span><br><span class="line">    alert(&#x27;key: &#x27; + k + &#x27;, value:&#x27; + u[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(this);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Person()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = &#x27;杨伊冰&#x27;;</span><br><span class="line">Person.prototype.age = 25 ;</span><br><span class="line">Person.prototype.say = function()&#123;</span><br><span class="line">    console.log(&quot;name:&quot; + this.name + &quot;age:&quot; + this.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过prototype创建的属性和方法，会存放在该函数对象中的__proto__属性中   __proto__是一个对象</span><br><span class="line">//</span><br><span class="line">//通过prototype创建的属性和方法，也会存放在该函数对象的__proto__属性中的constructor（构造函数是Person)  中的prototype中</span><br><span class="line">var person2 = new Person();</span><br><span class="line"></span><br><span class="line">console.log(person2);</span><br><span class="line">person2.say();</span><br><span class="line"></span><br><span class="line">person2.name = &quot;yangyanyi&quot;;</span><br><span class="line">person2.say();</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : &#x27;yangyanyi&#x27;,</span><br><span class="line">    age : 26,</span><br><span class="line">    say : function()&#123;</span><br><span class="line">        console.log(name + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//修改后的prototype会放置在新建的对象中的__proto__原型对象中，但不会放到它的构造函数中的prototype中</span><br><span class="line">var person3 = new Person();</span><br><span class="line">console.log(person3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var obj = new Object();</span><br><span class="line">console.log(obj);</span><br><span class="line">obj.prototype.name = &quot;杨演绎&quot;;</span><br><span class="line"></span><br><span class="line">console.log(window);</span><br><span class="line"></span><br><span class="line">var data = function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(typeof data);</span><br><span class="line"></span><br><span class="line">var obj = []</span><br><span class="line"></span><br><span class="line">console.log(typeof obj);</span><br><span class="line"></span><br><span class="line">var aa;</span><br><span class="line">var bb = null;</span><br><span class="line"></span><br><span class="line">console.log(aa);</span><br><span class="line">console.log(bb);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var cat = new Object();</span><br><span class="line">console.log(cat);</span><br><span class="line"></span><br><span class="line">console.log(window);</span><br></pre></td></tr></table></figure>

<h4 id="基本数据类型-值类型"><a href="#基本数据类型-值类型" class="headerlink" title="基本数据类型(值类型)"></a>基本数据类型(值类型)</h4><ul>
<li><p>number</p>
</li>
<li><p>string</p>
</li>
<li><p>boolean</p>
</li>
<li><p>null</p>
</li>
<li><p>undefined</p>
</li>
</ul>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul>
<li><p>对象</p>
<ul>
<li>普通对象</li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li>/^$/正则</li>
</ul>
</li>
<li><p>Math对象数据类型的</p>
<ul>
<li>….</li>
</ul>
</li>
<li><p>函数</p>
<ul>
<li>function普通函数</li>
<li>类</li>
<li>…..</li>
</ul>
</li>
</ul>
<h4 id="变量提升（预解释）"><a href="#变量提升（预解释）" class="headerlink" title="变量提升（预解释）"></a>变量提升（预解释）</h4><ul>
<li>基础概念（变量提升和作用域链)</li>
<li>定义变量带var和不带var的区别</li>
<li>只对等号左边的进行变量提升</li>
<li>不管条件是否成立都要进行预解释</li>
<li>重名的处理</li>
</ul>
<h4 id="打印当前时间"><a href="#打印当前时间" class="headerlink" title="打印当前时间"></a>打印当前时间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:new Date().toLocaleTimeString();&quot;&gt;</span><br><span class="line">  What time is it?</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><p>变量提升</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num;</span><br><span class="line">fn = aaafff111</span><br><span class="line"></span><br><span class="line">function aaafff111() &#123;</span><br><span class="line">	console.log(a);</span><br><span class="line">    var a = 10;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num =&gt; undefined</span><br><span class="line">fn =&gt; 函数本身</span><br><span class="line"></span><br><span class="line">num= 13: //-&gt;提升阶段已经完成声明了，此处不需要再var，但是没有定义过，所以此处还需要重新的赋值</span><br><span class="line">//-&gt;遇到创建fn的代码直接跳过∶在提升阶段声明和定义都做过了</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line">num =&gt; 13</span><br></pre></td></tr></table></figure>

<h4 id="fn"><a href="#fn" class="headerlink" title="fn()"></a>fn()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量提升: var a; //-&gt;在私有作用域中声明的变量都是私有变量代码执行</span><br><span class="line">a =&gt; undefined</span><br><span class="line">a = 10;</span><br><span class="line">a =&gt; 10;</span><br></pre></td></tr></table></figure>

<h4 id="window全局作用域"><a href="#window全局作用域" class="headerlink" title="window全局作用域"></a>window全局作用域</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 12;</span><br><span class="line">var b = a; -&gt;b = 12</span><br><span class="line">b = 13;</span><br><span class="line">a=&gt;12</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var o = xxxfff000</span><br><span class="line">var p = o; -&gt;p = xxxfff000 </span><br><span class="line">p.name =&quot;周啸天&quot;</span><br><span class="line"></span><br><span class="line">xxxfff000是地址</span><br></pre></td></tr></table></figure>

<p>xxxfff000</p>
<blockquote>
<p>name :“<del>珠峰培训</del>“<br>                “周啸天”</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var m = aaafff111</span><br><span class="line">var n =m; -&gt;n = aaafff111</span><br><span class="line">n = aaafff222</span><br><span class="line">fn = aaafff333</span><br></pre></td></tr></table></figure>

<p>aaafff111</p>
<blockquote>
<p>name :“珠峰培训“</p>
</blockquote>
<p>aaafff222</p>
<blockquote>
<p>name :“中国最权威…“</p>
</blockquote>
<p>aaafff333</p>
<blockquote>
<p>“var<br>ary=Array.prototype.slice.call(arguments);<br>return<br>evalary.join(“ + ):”</p>
</blockquote>
<p>fn(..)私有的（作用域）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ary =</span><br><span class="line">Array.prototype...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="jq里面用this和用-this-有什么区别"><a href="#jq里面用this和用-this-有什么区别" class="headerlink" title="jq里面用this和用$(this)有什么区别"></a>jq里面用this和用$(this)有什么区别</h4><p>this表示的是javascript提供的当前对象<br>$(this)表示的是用jquery封装候的当前对象<br>this对象可以直接用this.style修改样式<br>$(this)可以使用jquery提供的方法访问样式</p>
<h4 id="Ajax及封装Ajax详解"><a href="#Ajax及封装Ajax详解" class="headerlink" title="Ajax及封装Ajax详解"></a><a href="https://blog.csdn.net/c__dreamer/article/details/80456565">Ajax及封装Ajax详解</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">    url : &quot;a.php&quot;,  // url----&gt;地址</span><br><span class="line">    type : &quot;POST&quot;,   // type ---&gt; 请求方式</span><br><span class="line">    async : true,   // async----&gt; 同步：false，异步：true </span><br><span class="line">    data : &#123;        //传入信息</span><br><span class="line">        name : &quot;张三&quot;,</span><br><span class="line">        age : 18</span><br><span class="line">    &#125;,</span><br><span class="line">    success : function(data)&#123;   //返回接受信息</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><a href="http://blog.csdn.net/xiaozhuxmen/article/details/52074211">HTTP缓存机制</a></p>
<h4 id="jQuery源码分析"><a href="#jQuery源码分析" class="headerlink" title="jQuery源码分析"></a>jQuery源码分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;ul li:last&quot;).addClass(function(index) &#123;</span><br><span class="line">   return&quot;item-&quot; + index;</span><br><span class="line">&#125;);</span><br><span class="line">$(&#x27;.container&#x27;).append($(&#x27;h2&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="text-与html-方法的区别"><a href="#text-与html-方法的区别" class="headerlink" title="text()与html()方法的区别"></a>text()与html()方法的区别</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function showDialog(txt) &#123;</span><br><span class="line">	$(&quot;.dialog-box&quot;).show();</span><br><span class="line">	$(&quot;.mask&quot;).show();</span><br><span class="line">	// $(&quot;.dialog-box .tiptxt&quot;).text(tiptxt);</span><br><span class="line">	$(&quot;.dialog-box .tiptxt&quot;).html(tiptxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">showDialog(result.msg + &quot;&lt;br/&gt;测试测试测试测试测试&quot;);</span><br><span class="line">加了&lt;br/&gt;不换行，原因可能是写入的时候用的是text()；改为html()；就可以，</span><br><span class="line">因为&lt;br/&gt;在text()里面不会把它当一个标签，而是把它当作字符.</span><br></pre></td></tr></table></figure>

<h4 id="数组里的字符串转换成数字或者把数字转换成字符串"><a href="#数组里的字符串转换成数字或者把数字转换成字符串" class="headerlink" title="数组里的字符串转换成数字或者把数字转换成字符串"></a>数组里的字符串转换成数字或者把数字转换成字符串</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9];</span><br><span class="line">arr.map(String);   //结果： [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;];</span><br><span class="line"></span><br><span class="line">var a = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;];</span><br><span class="line">a.map(Number);   //结果：[1,2,3,4,5,6,7,8,9];</span><br></pre></td></tr></table></figure>

<p>ES6，Array.fill()函数的用法</p>
<h4 id="onload-和-onunload-事件"><a href="#onload-和-onunload-事件" class="headerlink" title="onload 和 onunload 事件"></a><strong>onload 和 onunload 事件</strong></h4><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。</p>
<p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p>
<p>onload 和 onunload 事件可用于处理 cookie。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript-%E7%AC%94%E8%AE%B0/image-20220705154829046.png" alt="image-20220705154829046"></p>
<h4 id="滑动时报错Intervention-Unable-to-preventDefault-inside-passive-event-listener-due-to-target-being-treated-as-passive-See"><a href="#滑动时报错Intervention-Unable-to-preventDefault-inside-passive-event-listener-due-to-target-being-treated-as-passive-See" class="headerlink" title="[滑动时报错Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See "></a>[滑动时报错<a href="https://www.cnblogs.com/emma-zhao/p/10699330.html">Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See </a></h4><p>搜索<code>mousewheel</code>件，在后面加上<code>&#123;passive: false&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEvent(&quot;mousewheel&quot;, wheel, &#123;passive: false&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><h6 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a><a href="https://www.jianshu.com/p/4616adf56ed8">防抖与节流</a></h6><p>防抖、节流、去重、深浅拷贝、数组扁平化、乱序、柯里化</p>
<blockquote>
<p>我们在平时开发的时候，会有很多场景会频繁触发事件，比如说搜索框实时发请求onmousemove,resize,onscroll等等，有些时候，我们并不能或者不想频繁触发事件</p>
</blockquote>
<h4 id="JavaScript兼容"><a href="#JavaScript兼容" class="headerlink" title="JavaScript兼容"></a>JavaScript兼容</h4><p><code>IE浏览器没有console方法 </code></p>
<p>如果代码中写了console.log()，在IE浏览器会报错。所以测试完之后，<code>要把console.log的代码注释掉</code>。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/yuque_mind2.jpeg" alt="img"></p>
<p>一个函数可以访问到它外部的成员，这个函数就可以称为闭包函数。</p>
<p>一个函数在另外一个函数里面定义，那这个函数就可以访问父函数里面的成员。那么这个函数（内部那个函数）就称为闭包函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure>

<p>f2引用了自由变量的函数，它引用了父函数的自由变量。f2是闭包函数</p>
<p>不同的浏览器有不同的处理法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Closure</span> <span class="title class_">Variables</span></span><br><span class="line"><span class="attr">a</span>:<span class="number">10</span></span><br><span class="line"><span class="attr">b</span>:<span class="number">20</span></span><br><span class="line"><span class="attr">f2</span>: <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">closure</span><br><span class="line"><span class="attr">a</span>:<span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// result相当于f2，它已经离开了创造它的环境了</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/yuque_mind3.jpeg" alt="img"></p>
<p>f2跳出了f1，但是f2的作用域还是f1的词法环境</p>
<p><strong>没有调用，不出现闭包：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> m = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;asdf&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure>

<p><strong>调用父级的父级的变量，会出现闭包：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> m= <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> n = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title function_">f3</span>();</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="title function_">f2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure>

<p><strong>闭包创建的时机：</strong></p>
<p>在f2被执行的时候，在预处理阶段，已经把f3放到它的词法环境。即在读取f3里面的代码，扫描里面的代码的过程（这个过程叫词法分析阶段），已经创建了闭包。（因为识别到它调用了父级的父级的变量） 因为这个过程是对字符串代码分析的阶段，所以它是静态的，所以称为静态的作用域。</p>
<p><strong>闭包的本质是它形成了一个作用域链</strong></p>
<p><strong>变量自加：（使用闭包减少全局变量）</strong></p>
<ol>
<li>全局变量的做法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">	a++;</span><br><span class="line">  <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br></pre></td></tr></table></figure>

<ol>
<li>闭包的做法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	a++;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">result</span>();</span><br><span class="line"><span class="title function_">result</span>();</span><br></pre></td></tr></table></figure>

<p>做一个基数加上1到max所有值的和，例如max=4，即基数+（1+2+3+4）这个功能，</p>
<p>一般的方法：传两个参数，add(base，max)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (base,max)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="title function_">alert</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  num++;</span><br><span class="line">  <span class="title function_">g</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>g的scope等于f的词法环境，闭包生成的时候，num是1，但是g没有执行，后面num++，num是2，当g执行时，num是2了。所以说引用，不是复制。</p>
<p><strong>每调用一个函数时，会创建一个新的词法环境：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    num++;</span><br><span class="line">  	<span class="title function_">alert</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = <span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">result1</span>();    <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">result1</span>();		<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">result2</span>();		<span class="comment">// 2</span></span><br><span class="line"><span class="title function_">result2</span>();		<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><strong>全局变量</strong></p>
<p>每次输出都是4，因为i是全局的，当点击执行的时候，i己经是4了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;1&quot;</span>&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(i);</span><br><span class="line">  ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="title function_">alert</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>i是全局变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;1&quot;</span>&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(i);</span><br><span class="line">  ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="title function_">alert</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当i等于1的时候，匿名函数立即执行，就把i传到id中，每次调用生成一个闭包·所以每点一个会弹出对应的i：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;1&quot;</span>&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(i);</span><br><span class="line">  ele.<span class="property">onclick</span> = (<span class="keyword">function</span>(<span class="params">id</span>)&#123;   <span class="comment">// id为形参</span></span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="title function_">alert</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i);		<span class="comment">// i为实参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/yuque_mind4.jpeg" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(a);				<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(b);				<span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">alert</span>(c);				<span class="comment">// c is not definded</span></span><br><span class="line"><span class="title function_">alert</span>(d)				<span class="comment">// d也没有定义，因为它的作用域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> b= <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> d =<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>块作用域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(i);    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>函数作用域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>js没有动态作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">6</span>;</span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();     <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>

<p>静态作用域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">alert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="title function_">f</span>();   <span class="comment">// 当f被执行的时候，它会在它自己的词法环境里找x，因为在预处理阶段，有x= 100，所以会弹出100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">6</span>;</span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="comment">// 声明f时，预处理阶段，词法环境</span></span><br><span class="line">f  [[scope]]  ==  lexicalEnv   == <span class="variable language_">window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">alert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">  <span class="title function_">f</span>();   <span class="comment">// 真正执行的时候le   -&gt; f.[[scope]]   == window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">6</span>;</span><br><span class="line">  <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当f被执行时，先进去里面找有没有x，如果没有就找它自己本身的词法环境（即window），如果还是找不到x，</span></span><br><span class="line">那就报错。因为在f1和f2里面定义的变量没有在它的词法环境中。</span><br></pre></td></tr></table></figure>

<p>词法环境（le）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;   	<span class="comment">// scope == window</span></span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">100</span>;		<span class="comment">// le&#123;x = 100&#125;  ——&gt; f.[[scope]]</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>)&#123;		<span class="comment">// g.[[scope]] == f.le</span></span><br><span class="line">  	<span class="comment">// le -&gt; g.[[scope]]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">g</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g.le -&gt; g.[[scope]] -&gt; f.le  -&gt; f.[[scope]] == window</span></span><br></pre></td></tr></table></figure>

<p>创建函数的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">argument</span>)&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;alert(x)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// var f = new Function(函数参数, 函数体)</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="title function_">alert</span>(x);     <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">g</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>每次创建一个函数，它会形成一个新的作用域，会跟它的父形成一个链条。用new Function创建的函数的作用域永远指向的是全局，而不是他的父。</p>
<p><strong>g的作用域等于f的词法环境：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;    <span class="comment">//scope = window</span></span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="keyword">function</span>(<span class="params"></span>) &#123;   <span class="comment">// g.scope = f.le</span></span><br><span class="line">  	<span class="title function_">alert</span>(x);     <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">g</span>(); </span><br><span class="line"> <span class="comment">// 预处理阶段，x和g放到window的词法环境，当运行g的时候，它在它自己的词法环境找不到x，</span></span><br><span class="line">  	然后就往父级找，找到x为<span class="number">100.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>g的作用域是window：</p>
<p>用这种方法创建的g函数，g的作用域就是window，而window中没有x，所以是not defined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> x= <span class="number">100</span>;</span><br><span class="line">	<span class="comment">// g.[[scope]] = window</span></span><br><span class="line">	<span class="keyword">var</span> g = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;alert(x)&quot;</span>);</span><br><span class="line">  <span class="title function_">g</span>();   <span class="comment">//  Uncaught ReferenceError: x is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>g的作用域指向window：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> x= <span class="number">100</span>;</span><br><span class="line">	<span class="comment">// g.[[scope]] = window</span></span><br><span class="line">	<span class="keyword">var</span> g = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;alert(x)&quot;</span>);</span><br><span class="line">  <span class="title function_">g</span>();   <span class="comment">// 12   因为g的作用域指向window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>大量使用全局变量，有可能导致冲突，很难调试，很难把问题找出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="title function_">f1</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">f2</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果f1和f2想用同一个变量，应该不能在它们单独的函数里定义。一般我会想到用全局变量，但是用全局变量有一个弊端就是，如果引用的js文件比较多，命名一样的话，出了间题，难调试，不容易找出问题等等</p>
<p><strong>把变量放在一个匿名函数里面，那样外部就访问不了这些变量，起到一个信息隐藏的作用，把a，b，f都隐藏起来了。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="title function_">alert</span>(a);    <span class="comment">// 在f的作用域可以访问到a</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a;   <span class="comment">// 访问不了a</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;   <span class="comment">// 写在一个匿名函数里面</span></span><br><span class="line">  	<span class="title function_">alert</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">f</span> = f;    <span class="comment">// 因为在外部是不能访问到a,b的，要想访问到，要加这句代码</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/u012468376/article/details/53121081">JavaScript中原型对象的彻底理解</a></p>
<p><a href="https://www.cnblogs.com/xiaohuochai/p/5721552.html">一张图理解prototype、proto和constructor的三角关系</a></p>
<p><a href="https://www.cnblogs.com/shuiyi/p/5305435.html">三张图搞懂JavaScript的原型对象与原型链</a></p>
<p><a href="https://blog.csdn.net/kkkkkxiaofei/article/details/46474303">一个例子让你明白原型对象和原型链</a></p>
<p><a href="https://www.jb51.net/article/79238.htm">浅析Javascript匿名函数与自执行函数</a></p>
<p><a href="https://www.jb51.net/article/70836.htm">jQuery中$(function() {});问题详解</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage">Window.sessionStorage</a></p>
<p><a href="http://blog.csdn.net/bao19901210/article/details/21614761">深入学习JavaScript: apply call方法 详解(转)</a></p>
<p> <a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/201512132900.html">使用工厂方法创建JavaScript对象</a></p>
<p><a href="https://www.geekjc.com/post/5a0a8c9a592e38541f7703c8">javascript简写技巧</a></p>
<p><a href="https://juejin.cn/post/6844903540264009736">题解JavaScript作用域</a></p>
<p><a href="https://segmentfault.com/a/1190000011151972">学习Javascript的8张思维导图</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/31030352">从一个 JSON.parse 错误深入研究 JavaScript 的转义字符</a></p>
<p> <a href="https://github.com/mqyqingfeng/Blog/issues/4">JavaScript深入之执行上下文栈</a></p>
<p> <a href="https://coffee.pmcaff.com/article/764896867122304/pmcaff?utm_source=forum&from=related">『多级目录结构』在移动端的交互设计</a></p>
<p> <a href="http://www.jianshu.com/p/6e9e4156ece3">一篇文章带你详解 HTTP 协议（网络协议篇一）</a></p>
<p> <a href="https://juejin.im/post/5a069b6d51882509e5432656">一篇文章带你熟悉 TCP/IP 协议（网络协议篇二）</a></p>
<p> <a href="http://www.zhangxinxu.com/wordpress/2017/11/css-css3-mask-masks/">客栈说书：CSS遮罩CSS3 mask/masks详细介绍</a></p>
<p> <a href="http://jartto.wang/2017/11/12/f2e-tips/">CSS 实用 Tips</a></p>
<p> <a href="http://www.jianshu.com/p/4876a4fe7731">懒加载和预加载</a></p>
<p><a href="https://webdesign.tutsplus.com/tutorials/how-to-create-a-split-screen-slider-with-javascript--cms-28844">使用 JavaScript 实现分屏视觉效果</a></p>
<p><a href="https://juejin.im/post/5a091afe6fb9a044ff30f402">打造自己的JavaScript武器库</a></p>
<p><a href="https://segmentfault.com/a/1190000011927868">Git分支管理</a></p>
<p><a href="http://louiszhai.github.io/2016/03/12/css-center/">16种方法实现水平居中垂直居中</a></p>
<p><a href="https://juejin.im/post/5a044fd5f265da43333ddabd">手机/移动前端开发需要注意的20个要点</a></p>
<p> <a href="https://juejin.im/post/59f678d7f265da43333dabb7">移动端字体放大问题的研究</a></p>
<p><a href="https://juejin.im/entry/59feae9df265da43094488f6">跨域，你需要知道的全在这里</a></p>
<p><a href="https://juejin.im/entry/59ffb92bf265da43040600f9">10 个独特的 CSS 背景视觉效果</a></p>
<p><a href="https://raygun.com/javascript-debugging-tips">你不知道的14个jsvascript调试技巧</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript思维导图-笔记</title>
    <url>/2021/02/03/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>注：只做笔记查阅，侵权必删。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/yunsuanfu.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/shuzu.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/bianliang.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/yuju.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/zhengze.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/DOM.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/hanshu.gif" alt="JavaScript思维导图"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/JavaScript%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-%E7%AC%94%E8%AE%B0/zifuchuanhanshu.gif" alt="JavaScript思维导图"></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript高级面向对象</title>
    <url>/2021/01/21/JavaScript%E9%AB%98%E7%BA%A7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="1-面向对象编程介绍"><a href="#1-面向对象编程介绍" class="headerlink" title="1.面向对象编程介绍"></a>1.面向对象编程介绍</h3><h4 id="1-2面向过程编程POP-Process-oriented-programming"><a href="#1-2面向过程编程POP-Process-oriented-programming" class="headerlink" title="1.2面向过程编程POP(Process-oriented programming)"></a>1.2面向过程编程POP(Process-oriented programming)</h4><p><strong>面向过程</strong>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</p>
<p>举个粟子∶将大象装进冰箱，面向过程做法。</p>
<ol>
<li>打开冰箱门</li>
<li>大象装进去</li>
<li>关上冰箱门</li>
</ol>
<blockquote>
<p>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。</p>
</blockquote>
<h4 id="1-3面向对象编程OOP-Object-Oriented-Programming"><a href="#1-3面向对象编程OOP-Object-Oriented-Programming" class="headerlink" title="1.3面向对象编程OOP(Object Oriented Programming)"></a>1.3面向对象编程OOP(Object Oriented Programming)</h4><p><strong>面向对象</strong>是把事务分解成为一个个对象，然后由对象之间分工与合作。</p>
<p>举个粟子：将大象装进冰箱，面向对象做法。<br>先找出对象，并写出这些对象的功能:</p>
<ol>
<li><p>大象对象</p>
<p>-进去</p>
</li>
<li><p>冰箱对象</p>
<p>-打开</p>
<p>-关闭</p>
</li>
<li><p>使用大象和冰箱的功能</p>
</li>
</ol>
<blockquote>
<p>面向对象是以对象功能来划分问题，而不是步骤。</p>
</blockquote>
<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。</p>
<p>面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。</p>
<h5 id="面向对象的特性"><a href="#面向对象的特性" class="headerlink" title="面向对象的特性:"></a>面向对象的特性:</h5><ul>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
</ul>
<h4 id="1-4面向过程和面向对象的对比"><a href="#1-4面向过程和面向对象的对比" class="headerlink" title="1.4面向过程和面向对象的对比"></a>1.4面向过程和面向对象的对比</h4><h5 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h5><ul>
<li><p>优点︰性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程</p>
</li>
<li><p>缺点：没有面向对象易维护、易复用、易扩展</p>
</li>
</ul>
<h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><ul>
<li><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护心</p>
</li>
<li><p>缺点：性能比面向过程低</p>
</li>
</ul>
<p>用面向过程的方法写出来的程序是一份蛋炒饭，而用面向对象写出来的程序是一份盖浇饭。</p>
<h3 id="2-ES6中的类和对象"><a href="#2-ES6中的类和对象" class="headerlink" title="2.ES6中的类和对象"></a>2.ES6中的类和对象</h3><h4 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h4><p>面向对象更贴近我们的实际生活,可以使用面向对象描述现实世界事物。但是事物分为具体的事物和抽象的事物</p>
<p>手机   抽象的(泛指的)<br>           具体的(特指的)</p>
<p>面向对象的思维特点:<br>1．抽取(抽象)对象共用的属性和行为组织(封装)成一个类（模板）</p>
<p>2．对类进行实例化,获取类的对象</p>
<p>面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点不断的创建对象,使用对象,指挥对象做事情.</p>
<h4 id="2-1对象"><a href="#2-1对象" class="headerlink" title="2.1对象"></a>2.1对象</h4><p>现实生活中∶万物皆对象，对象是<code>一个具体的事物</code>，看得见摸得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。<br><code>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象</code>，例如字符串、数值、数组、函数等。</p>
<p>对象是由<code>属性</code>和<code>方法</code>组成的:</p>
<ul>
<li>属性：事物的<code>特征</code>，在对象中用<code>属性</code>来表示(常用名词)</li>
<li>方法：事物的<code>行为</code>，在对象中用<code>方法</code>来表示(常用动词)</li>
</ul>
<h4 id="2-2类class"><a href="#2-2类class" class="headerlink" title="2.2类class"></a>2.2类class</h4><p>在ES6中新增加了类的概念，可以使用<code>class</code>关键字声明一个类，之后以这个类来实例化对象。</p>
<p><code>类</code>抽象了对象的公共部分，它<code>泛指</code>某一大类( class )</p>
<p><code>对</code>象<code>特指</code>某一个，通过类实例化一个具体的对象</p>
<p>面向对象的思维特点:</p>
<ol>
<li><p>抽取（抽象）对象共用的属性和行为组织(封装)成一个<code>类</code>(模板)</p>
</li>
<li><p>对类进行实例化,获取类的<code>对象</code></p>
</li>
</ol>
<h4 id="2-3创建类"><a href="#2-3创建类" class="headerlink" title="2.3创建类"></a>2.3创建类</h4><p>语法︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class name &#123;</span><br><span class="line">  class body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var XX = new name();</span><br></pre></td></tr></table></figure>

<p><code>注意：类必须使用new实例化对象</code></p>
<p>1．创建类class创建一个明星类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Star &#123;</span><br><span class="line">    constructor(uname, age) &#123;</span><br><span class="line">    	this.uname = uname;</span><br><span class="line">    	this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2．利用类创建对象 new</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br><span class="line">var zxy = new star(张学友&quot;，20);</span><br><span class="line">console.log(ldh);</span><br><span class="line">console.log(zxy);</span><br></pre></td></tr></table></figure>

<ul>
<li>(1）通过class关键字创建类，类名我们还是习惯性定义首字母大写</li>
<li>(2)   类里面有个constructor函数,可以接受传递过来的参数,同时返回实例对象</li>
<li>(3)   constructor函数只要new生成实例时,就会自动调用这个函数，如果我们不写这个函数,类也会自动生成这个函数</li>
<li>(4)   生成实例new不能省略</li>
<li>(5）最后注意语法规范，创建类类名后面不要加小括号,生成实例类名后面加小括号，构造函数不需要加function</li>
</ul>
<h4 id="2-5类添加方法"><a href="#2-5类添加方法" class="headerlink" title="2.5类添加方法"></a>2.5类添加方法</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">	constructor (name, age)&#123;     // constructor构造器或者构造函数</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	say()&#123;</span><br><span class="line">		console.log (this.name + &quot;你好&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	sing(song)&#123;</span><br><span class="line">		console.log (&quot;我唱歌&quot;);</span><br><span class="line">		console.log (this.name + song);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var ldh = new Star(&#x27;刘德华&#x27;, 18);</span><br><span class="line">var zxy = new star(张学友&quot;，20);</span><br><span class="line">// 1)我们类里面所有的函数不需要写function</span><br><span class="line">// 2)多个函数方法之间不需要添加逗号分隔</span><br><span class="line">ldh.sing(&quot;冰雨&quot;);</span><br><span class="line">zxy.sing(&quot;李香兰&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="3-类的继承"><a href="#3-类的继承" class="headerlink" title="3.类的继承"></a>3.类的继承</h3><h4 id="3-1继承"><a href="#3-1继承" class="headerlink" title="3.1继承"></a>3.1继承</h4><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。</p>
<p>程序中的继承：子类可以继承父类的一些属性和方法。</p>
<p>语法︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Father&#123;</span><br><span class="line">	money() &#123;</span><br><span class="line">		console.log(100);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子类继承父类</span><br><span class="line">class Son extends Father&#123; </span><br><span class="line">&#125;</span><br><span class="line">var son = new Son();</span><br><span class="line">son.money();</span><br></pre></td></tr></table></figure>

<p>这样写，会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Father&#123;</span><br><span class="line">	constructor(x, y)&#123;</span><br><span class="line">		this.x = x;</span><br><span class="line">		this.y = y;</span><br><span class="line">	&#125;</span><br><span class="line">	sum() &#123;</span><br><span class="line">		console.log(this.x + this.y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 子类继承父类</span><br><span class="line">class Son extends Father&#123; </span><br><span class="line">	constructor(x, y)&#123;</span><br><span class="line">		this.x = x;</span><br><span class="line">		this.y = y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var son2 = new Son(1, 2);</span><br><span class="line">son2.sum();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught ReferenceError:Must call super constructor in derived class before accessing &#x27;this &#x27; or returningfrom derived constructor</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 子类继承父类</span><br><span class="line">class Son extends Father&#123; </span><br><span class="line">	constructor(x, y)&#123;</span><br><span class="line">		super(x, y);   // 调用了父类中的构造函数</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-super关键字"><a href="#3-2-super关键字" class="headerlink" title="3.2 super关键字"></a>3.2 super关键字</h4><p><code>super关键字</code>用于访问和调用对象父类上的函数。<code>可以调用父类的构造函数</code>，也可以调用父类的普通函数</p>
<hr>
<h4 id="prototype-深入浅出原型"><a href="#prototype-深入浅出原型" class="headerlink" title="prototype-深入浅出原型"></a>prototype-深入浅出原型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dogs() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Dogs.prototype.name = &#x27;collie&#x27;;</span><br><span class="line">Dogs.prototype.age = 24;</span><br><span class="line">Dogs.prototype.DogsName = function() &#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//JS在创建对象（不论是普通对象还是函数对象）的时候，都有一个叫做__proto__的内置属性，用于指向创建它的函数对象的原型对象prototype</span><br><span class="line">var DogsA = new Dogs();</span><br><span class="line">// console.log(DogsA.DogsName());</span><br><span class="line"></span><br><span class="line">// DogsA 的construtor（构造函数）是Dogs()</span><br><span class="line">console.log(Dogs.prototype);</span><br><span class="line">console.log(DogsA.constructor);</span><br><span class="line">console.log(DogsA);</span><br><span class="line"></span><br><span class="line">// DogsA的__proto__属性等于Dogs的prototype属性</span><br><span class="line">console.log(Dogs.prototype === DogsA.__proto__);   //true</span><br><span class="line"></span><br><span class="line">//Dogs.prototype对象也有 _proto _ 属性，它指向创建它的函数对象（Object）的 prototype。</span><br><span class="line">//Dogs.prototype的__proto__属性等于Object的prototype属性</span><br><span class="line">console.log(Dogs.prototype.__proto__ === Object.prototype);  //true</span><br><span class="line"></span><br><span class="line">//判断是不是某实例化对象的原型</span><br><span class="line">console.log(Dogs.prototype.isPrototypeOf(DogsA));</span><br></pre></td></tr></table></figure>

<p><a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/201512142905.html">JavaScript面向对象-原型的内存模型</a></p>
<blockquote>
<p>通过prototype创建的属性和方法，会存放在函数对象中的<code>__pro__</code>属性中，<code>__pro__</code>是一个对象</p>
<p>通过prototype创建的属性和方法，也会存放在该函数对象的<code>__pro__</code>属性中的constructor（例如：构造函数是Person)中的prototype中 </p>
</blockquote>
<p>创建一个对象是会给它分配内存空间的。</p>
<p>通过构造函数的方法，创建一个对象出来，在新对象的内存空间中会有一个<code>_proto_</code>内部属性，这个内部属性是不能被访问的，它也指向构造函数（例如：<code>Person</code>）的原型。<code>_proto_</code>内部属性是隐藏的</p>
<blockquote>
<p>需要特别注意的是：原型中的值是不会被替换的，仅仅只是在属性查找时被对象自己空间中的同名属性所覆盖。</p>
</blockquote>
<p><a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/201512162910.html">JavaScript面向对象-原型的重写</a></p>
<h4 id="对象的创建方式不一样，存储位置不一样"><a href="#对象的创建方式不一样，存储位置不一样" class="headerlink" title="对象的创建方式不一样，存储位置不一样"></a>对象的创建方式不一样，存储位置不一样</h4><p>这里定义了两个对象，即使内容一样，但是存储位置不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var objectFoo = &#123;same : &#x27;same&#x27; &#125;;</span><br><span class="line">var objectBar = &#123;same : &#x27;same&#x27; &#125;;</span><br><span class="line">console.log(objectFoo == objectBar); // false</span><br></pre></td></tr></table></figure>

<p>这里也是定义两个对象，但是它们的存储位置一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var objectA = &#123; foo: &#x27;bar&#x27; &#125;;</span><br><span class="line">var objectB = objectA;</span><br><span class="line">console.log(objectA == objectB);  // true</span><br></pre></td></tr></table></figure>

<p><a href="http://cnodejs.org/topic/5231a630101e574521e45ef8">exports 和 module.exports 的区别</a></p>
<ol>
<li><p>module.exports 初始值为一个空对象 {}</p>
</li>
<li><p>exports 是指向的 module.exports 的引用</p>
</li>
<li><p>require() 返回的是 module.exports 而不是 exports</p>
</li>
</ol>
<p><a href="https://blog.csdn.net/weixin_30791095/article/details/97718955">Javascript 面向对象(共有方法，私有方法，特权方法，静态属性和方法，静态类)示例讲解…</a></p>
<p><a href="https://www.cnblogs.com/xiongzaiqiren/p/6733985.html">Javascript 面向对象(共有方法，私有方法，特权方法，静态属性和方法，静态类)示例讲解</a></p>
<h4 id="一，私有属性和方法"><a href="#一，私有属性和方法" class="headerlink" title="一，私有属性和方法"></a>一，私有属性和方法</h4><p>私有方法：私有方法本身是可以访问类内部的所有属性(即私有属性和公有属性)，但是私有方法是不可以在类的外部被调用。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 &lt;script&gt;</span><br><span class="line"> 2     /*</span><br><span class="line"> 3     * 私有方法：私有方法本身是可以访问类内部的所有属性(即私有属性和公有属性)，但是私有方法是不可以在类的外部被调用。 </span><br><span class="line"> 4     */</span><br><span class="line"> 5     //JavaScript对象私有属性，私有方法示例</span><br><span class="line"> 6     function JSClass() &#123;</span><br><span class="line"> 7         //私有变量只有在函数或者对象作用域范围内能访问</span><br><span class="line"> 8         var privateAttribute = &quot;私有属性&quot;;</span><br><span class="line"> 9 </span><br><span class="line">10         function privateMethod_A() &#123;</span><br><span class="line">11             console.log(&quot;私有方法A，&quot; + privateAttribute);</span><br><span class="line">12         &#125;;</span><br><span class="line">13 </span><br><span class="line">14         var privateMethod_B = function () &#123;</span><br><span class="line">15             console.log(&quot;私有方法B，&quot; + privateAttribute);</span><br><span class="line">16         &#125;;</span><br><span class="line">17 </span><br><span class="line">18         //私有方法可以在函数作用域范围内使用。</span><br><span class="line">19         privateMethod_A();</span><br><span class="line">20         privateMethod_B();</span><br><span class="line">21         </span><br><span class="line">22         /*</span><br><span class="line">23         私有属性和方法还有个特点：都不能用this访问。</span><br><span class="line">24         下面几种是不行的：</span><br><span class="line">25         this.privateAttribute;</span><br><span class="line">26         this.privateMethod_A();</span><br><span class="line">27         this.privateMethod_B();</span><br><span class="line">28         */</span><br><span class="line">29     &#125;;</span><br><span class="line">30 </span><br><span class="line">31     /*new一个实例*/</span><br><span class="line">32     var instance = new JSClass();</span><br><span class="line">33     console.dir(instance); //instance实例访问不到私有属性及私有方法</span><br><span class="line">34 &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>说明：类的构造函数里定义的function，即为私有方法；而在构造函数里用var声明的变量，也相当于是私有变量。(不过类比于c#这类强类型语言中的私有成员概念还是有区别的，比如无法在非构造函数以外的其它方法中调用) 。</p>
<p>私有方法<br>对象的私有方法和属性,外部是不可以访问的,在方法的内部不是能this调用对象的公有方法、公有属性、特权方法的。</p>
<h4 id="二，公有属性和方法"><a href="#二，公有属性和方法" class="headerlink" title="二，公有属性和方法"></a>二，公有属性和方法</h4><p>公有方法：</p>
<p>1.公有方法是可以在类的外部被调用的，</p>
<p>2.但是它不可以访问类的私有属性。</p>
<p>3.公有方法必须在类的内部或者外部通过类的prototype属性添加。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 &lt;script&gt;</span><br><span class="line"> 2     /*</span><br><span class="line"> 3     * 公有方法： </span><br><span class="line"> 4 　　* 1.公有方法是可以在类的外部被调用的； </span><br><span class="line"> 5 　　* 2.但是它不可以访问类的私有属性；</span><br><span class="line"> 6 　　* 3.公有方法必须在类的内部或者外部通过类的prototype属性添加。 </span><br><span class="line"> 7     */</span><br><span class="line"> 8     //JavaScript对象公有属性，公有方法示例</span><br><span class="line"> 9     function JSClass() &#123;</span><br><span class="line">10         //公有变量在函数内或者实例都能访问</span><br><span class="line">11         this.publicAttribute = &quot;公有属性&quot;;</span><br><span class="line">12 </span><br><span class="line">13         this.publicMethod_A = function () &#123;</span><br><span class="line">14             console.log(&quot;公有方法A，&quot; + this.publicAttribute);</span><br><span class="line">15         &#125;;</span><br><span class="line">16 </span><br><span class="line">17         //公有方法可以在类的内部添加</span><br><span class="line">18         JSClass.prototype.publicMethod_B = function () &#123;</span><br><span class="line">19             console.log(&quot;公有方法B，&quot; + this.publicAttribute);</span><br><span class="line">20         &#125;;</span><br><span class="line">21 </span><br><span class="line">22         //公有方法可以在函数作用域范围内使用，也可以在函索作用域范围外使用，可以被实例调用和继承</span><br><span class="line">23         this.publicMethod_A();</span><br><span class="line">24         this.publicMethod_B();</span><br><span class="line">25 </span><br><span class="line">26         /*</span><br><span class="line">27         公有属性和方法有个特点：在内部访问都必须用this访问</span><br><span class="line">28         下面几种是不行的：</span><br><span class="line">29         publicAttribute;</span><br><span class="line">30         publicMethod_A();</span><br><span class="line">31         publicMethod_B();</span><br><span class="line">32         */</span><br><span class="line">33     &#125;;</span><br><span class="line">34 </span><br><span class="line">35     //公有方法也可以在类的外部通过类的prototype属性添加</span><br><span class="line">36     JSClass.prototype.publicMethod_C = function () &#123;</span><br><span class="line">37         console.log(&quot;公有方法C，&quot; + this.publicAttribute);</span><br><span class="line">38     &#125;;</span><br><span class="line">39     </span><br><span class="line">40     /*new一个实例*/</span><br><span class="line">41     var instance = new JSClass();</span><br><span class="line">42     console.log(&quot;实例调用公有属性：&quot; + instance.publicAttribute);</span><br><span class="line">43     console.log(&quot;实例调用公有方法：&quot; + instance.publicMethod_A());</span><br><span class="line">44     console.log(&quot;实例调用公有方法：&quot; + instance.publicMethod_B());</span><br><span class="line">45     console.dir(instance); //instance实例可以访问公有属性及方法</span><br><span class="line">46 </span><br><span class="line">47     //但是,通过实例添加公有属性是不行的</span><br><span class="line">48     //instance.prototype.publicMethod_D = function () &#123;</span><br><span class="line">49     //    console.log(&quot;公有方法D，&quot; + this.publicAttribute);</span><br><span class="line">50     //&#125;;</span><br><span class="line">51 </span><br><span class="line">52 &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>公有方法的调用规则<br>调用公有方法，我们必需先实例化对象<br>公有方法中通过不this调用公有属性和特权方法，不能使用this调用静态方法和属性，必需裁通过对象本身调用，即对象名。公有方法也不能调用私有方法。</p>
<h4 id="三，特权方法"><a href="#三，特权方法" class="headerlink" title="三，特权方法"></a>三，特权方法</h4><p>特权方法：</p>
<p>1.特权方法是可以在类的外部被调用的，</p>
<p>2.但是它可以访问类的私有属性，并且也是可以访问类的公有属性，可以勉强的认为它是一种特殊的公有方法。</p>
<p>3.但是它与上面的公有方法的声明与定义方式不同。特权方法必须在类的内部声明定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 &lt;script&gt;</span><br><span class="line"> 2     /*</span><br><span class="line"> 3     * 特权方法： </span><br><span class="line"> 4 　　* 1.特权方法是可以在类的外部被调用的；</span><br><span class="line"> 5 　　* 2.但是它可以访问类的私有属性，并且也是可以访问类的公有属性，可以勉强的认为它是一种特殊的公有方法；</span><br><span class="line"> 6 　　* 3.但是它与上面的公有方法的声明与定义方式不同。特权方法必须在类的内部声明定义。 </span><br><span class="line"> 7     */</span><br><span class="line"> 8     //JavaScript对象特权方法示例</span><br><span class="line"> 9     function JSClass() &#123;</span><br><span class="line">10         //私有变量只有在函数或者对象作用域范围内能访问</span><br><span class="line">11         var privateAttribute = &quot;私有属性&quot;;</span><br><span class="line">12         //私有方法</span><br><span class="line">13         function privateMethod() &#123;</span><br><span class="line">14             console.log(&quot;私有方法&quot;);</span><br><span class="line">15         &#125;</span><br><span class="line">16 </span><br><span class="line">17         //通过使用this关键字定义一个特权方法</span><br><span class="line">18         this.privilegeMethod = function () &#123;</span><br><span class="line">19             //在特权方法中可以访问私有属性和私有方法</span><br><span class="line">20             console.log(&quot;特权方法，&quot; + privateAttribute + &quot;,&quot; + privateMethod());</span><br><span class="line">21         &#125;;</span><br><span class="line">22     &#125;;</span><br><span class="line">23     /*new一个实例*/</span><br><span class="line">24     var instance = new JSClass();</span><br><span class="line">25     console.log(&quot;实例调用特权方法：&quot; + instance.privilegeMethod());</span><br><span class="line">26     console.dir(instance); //instance实例可以访问公有属性及方法</span><br><span class="line">27 </span><br><span class="line">28     /*</span><br><span class="line">29     * 特权方法浏览器兼容支持性很差，避免使用！</span><br><span class="line">30     */</span><br><span class="line">31 &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>特权方法的调用规则<br>特权方法通过this调用公有方法、公有属性，通过对象本身调用静态方法和属性，在方法体内直接调用私有属性和私有方法。</p>
<p>公有方法：就是所有通过该类实例化出来的对象，共同都拥有或者说都可以使用的方法。一般把共用的方法，都放在“原型对象“当中，如果放在构造函数中，会重复创建共同的方法。</p>
<p>私有方法：不能在外部调用。<br>特权方法：利用的闭包原理，即通过作用域链，让内部函数能够访问外部函数的变量对象(即该类的私有变量、私有方法)。</p>
<h4 id="四，静态属性和方法"><a href="#四，静态属性和方法" class="headerlink" title="四，静态属性和方法"></a>四，静态属性和方法</h4><p>静态属性和方法：<br>无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 &lt;script&gt;</span><br><span class="line"> 2     /*</span><br><span class="line"> 3     * 静态属性和方法： </span><br><span class="line"> 4 　　* 无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法。</span><br><span class="line"> 5     */</span><br><span class="line"> 6     //JavaScript对象静态属性和方法示例</span><br><span class="line"> 7     function JSClass() &#123; &#125;;</span><br><span class="line"> 8 </span><br><span class="line"> 9     JSClass.staticAttribute = &quot;静态属性&quot;;</span><br><span class="line">10     JSClass.staticMethod = function () &#123;</span><br><span class="line">11         return &quot;静态方法，&quot; + JSClass.staticAttribute;</span><br><span class="line">12     &#125;;</span><br><span class="line">13 </span><br><span class="line">14     //无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法。</span><br><span class="line">15     console.log(JSClass.staticAttribute);</span><br><span class="line">16     console.log(JSClass.staticMethod());</span><br><span class="line">17 </span><br><span class="line">18     /*new一个实例*/</span><br><span class="line">19     var instance = new JSClass();</span><br><span class="line">20     //instance.staticAttribute; //错误！</span><br><span class="line">21     //instance.staticMethod(); //错误！</span><br><span class="line">22     console.dir(instance); //instance实例不可以访问静态属性及方法</span><br><span class="line">23 &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>静态方法的调用规则<br>使用静态方法时，无需实例化对象，便可以调用，对象实例不能调用对象的静态方法，只能调用实例自身的静态属性和方法。</p>
<h4 id="五，静态类"><a href="#五，静态类" class="headerlink" title="五，静态类"></a>五，静态类</h4><p>静态类：<br>无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法，<br>只包含静态属性和静态方法的类叫静态类，不能被实例化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 &lt;script&gt;</span><br><span class="line"> 2     /*</span><br><span class="line"> 3     * 静态类： </span><br><span class="line"> 4 　　* 无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法，</span><br><span class="line"> 5     * 只包含静态属性和静态方法的类叫静态类，不能被实例化。</span><br><span class="line"> 6     */</span><br><span class="line"> 7     //JavaScript对象静态类示例</span><br><span class="line"> 8     var jsStaticClass = &#123;</span><br><span class="line"> 9         staticAttribute_A: &quot;静态属性A&quot;,</span><br><span class="line">10         staticMethod_A: function () &#123;</span><br><span class="line">11             //静态方法内部可以访问静态属性</span><br><span class="line">12             return &quot;静态方法A，&quot; + this.staticAttribute_A + &quot;,&quot; + jsStaticClass.staticAttribute_A;</span><br><span class="line">13         &#125;</span><br><span class="line">14     &#125;;</span><br><span class="line">15 </span><br><span class="line">16     //静态属性和方法也可以在外部定义和访问</span><br><span class="line">17     jsStaticClass.staticAttribute_B = &quot;静态属性B&quot;;</span><br><span class="line">18     jsStaticClass.staticMethod_B = function () &#123;</span><br><span class="line">19         //静态方法内部可以访问静态属性</span><br><span class="line">20         return &quot;静态方法B，&quot; + this.staticAttribute_A + &quot;,&quot; + jsStaticClass.staticAttribute_B;</span><br><span class="line">21     &#125;;</span><br><span class="line">22 </span><br><span class="line">23 </span><br><span class="line">24     //无需实例化(即无需用new操作符实化对象)就可以调用的方法就叫静态方法。</span><br><span class="line">25     console.log(jsStaticClass.staticAttribute_A);</span><br><span class="line">26     console.log(jsStaticClass.staticAttribute_B);</span><br><span class="line">27     console.log(jsStaticClass.staticMethod_A());</span><br><span class="line">28     console.log(jsStaticClass.staticMethod_B());</span><br><span class="line">29 </span><br><span class="line">30     //var instance = new jsStaticClass(); //静态类不能被实例化！</span><br><span class="line">31 &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Javascript设计模式详解"><a href="#Javascript设计模式详解" class="headerlink" title="Javascript设计模式详解"></a><a href="https://www.cnblogs.com/tugenhua0707/p/5198407.html">Javascript设计模式详解</a></h4><h4 id="【原】常用的javascript设计模式"><a href="#【原】常用的javascript设计模式" class="headerlink" title="【原】常用的javascript设计模式"></a><a href="https://www.cnblogs.com/xianyulaodi/p/5827821.html">【原】常用的javascript设计模式</a></h4><h4 id="深入理解JavaScript系列（31）：设计模式之代理模式"><a href="#深入理解JavaScript系列（31）：设计模式之代理模式" class="headerlink" title="深入理解JavaScript系列（31）：设计模式之代理模式"></a><a href="https://www.cnblogs.com/TomXu/archive/2012/02/29/2354979.html">深入理解JavaScript系列（31）：设计模式之代理模式</a></h4><h4 id="javascript设计模式——策略模式"><a href="#javascript设计模式——策略模式" class="headerlink" title="javascript设计模式——策略模式"></a><a href="https://www.cnblogs.com/xiaohuochai/p/8029651.html">javascript设计模式——策略模式</a></h4><h4 id="JavaScript-原型式继承"><a href="#JavaScript-原型式继承" class="headerlink" title="JavaScript-原型式继承"></a><a href="https://www.cnblogs.com/gehaoyu/p/11804836.html">JavaScript-原型式继承</a></h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/yuque_mind.jpeg" alt="img"></p>
<ol>
<li>对象字面量形式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p= &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;cj&quot;</span>,</span><br><span class="line">  <span class="attr">work</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="property">log</span> ( <span class="string">&quot;working. . .&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>键值的方式，之间用逗号隔开，对象有属性和方法</p>
<ol>
<li>get set 型属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p= &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;cj&quot;</span>,</span><br><span class="line">  <span class="attr">work</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  	<span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;working. . .&quot;</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">18</span>,   <span class="comment">// 这个初始值有可能是负数</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; <span class="number">0</span> || val &gt;<span class="number">150</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>( <span class="string">&quot; invalid value&quot;</span> );</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_age</span> = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">address</span>:&#123;</span><br><span class="line">  	<span class="attr">home</span>: <span class="string">&quot;jiating&quot;</span>,</span><br><span class="line">    <span class="attr">office</span>: <span class="string">&quot;office&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>创建可写的属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">p.<span class="property">yy</span> = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>当writable没有写上去的时候，默认是false，这种方式创建的属性不可写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get, set, writable, enuerable, configurable, value</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(p,&#123;</span><br><span class="line">  <span class="attr">salary</span>:&#123;</span><br><span class="line">  	<span class="attr">value</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>    <span class="comment">// 默认是不可写</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gender</span>:&#123;</span><br><span class="line">  	<span class="attr">value</span>:<span class="literal">true</span></span><br><span class="line">  	<span class="attr">height</span>:&#123;</span><br><span class="line">  		<span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  			<span class="keyword">return</span> <span class="number">180</span>&#125;,</span><br><span class="line">  		<span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">  			<span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>将对象的全部属性列出来</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(p,&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;cj&#x27;</span>,</span><br><span class="line">  <span class="attr">work</span>: <span class="string">&#x27;工作&#x27;</span>,</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">salary</span>:&#123;</span><br><span class="line">  	<span class="attr">value</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>    <span class="comment">// 默认是不可写</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gender</span>:&#123;</span><br><span class="line">  	<span class="attr">value</span>:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">height</span>:&#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">180</span>&#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(p)</span><br><span class="line"></span><br><span class="line">输出结果：[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;work&quot;</span>, <span class="string">&quot;_age&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br></pre></td></tr></table></figure>

<ol>
<li>判断对象是否有某个属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;name&quot;</span> <span class="keyword">in</span> p;    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ol>
<li>删除属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p.<span class="property">name</span>   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>构造器：constructor （对象默认属性）</strong></p>
<p>把构造器理解成一个模具，就是一个东西做出来，是在模具的基础上做的</p>
<p>两种方法创建的对象是一样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<p>是对象才会有constructor</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="property">constructor</span></span><br></pre></td></tr></table></figure>

<p><strong>typeof</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>;      <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>;	 <span class="comment">// boolean&quot;</span></span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">typeof</span> f;				<span class="comment">// function</span></span><br></pre></td></tr></table></figure>

<p><strong>是不是某个构造器的实例：instance of</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Object</span>;   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> o.<span class="property">constructor</span>;   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">o.<span class="property">name</span> = <span class="string">&quot;函数&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>构造器是一个函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = o.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">o1.<span class="property">name</span>     <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>因为o的构造是object，所以是相当于，new Object创建一个对象o1，而不是把o赋给o1，所以o1里面是没有name这个属性的</p>
<p>判断对象是否相等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">o1 = o; </span><br><span class="line">o1 === o;   <span class="comment">// true  把o赋给o1，所以相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = o.<span class="title function_">constructor</span>(<span class="params"></span>);</span><br><span class="line">o2 == o;    <span class="comment">// false  o是一个对象，o2是另外一个对象。是创建两个不同的对象，不是把O赋给O2</span></span><br></pre></td></tr></table></figure>

<p><strong>对象工厂创建对象：</strong></p>
<p>这种方法创建会有一个缺点就是，如果有比较多相同的属性的时候，就会浪费内存</p>
<p>创建两个不一样的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PersonFactory</span>(<span class="params">pname, page</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  	<span class="attr">name</span>: pname,</span><br><span class="line">    <span class="attr">age</span>: page</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="title class_">PersonFactory</span>(<span class="string">&quot;cj&quot;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">PersonFactory</span>(<span class="string">&quot;david&quot;</span>,<span class="number">33</span>);</span><br></pre></td></tr></table></figure>

<p>把一个函数当做一个类来使用时候，它的首字母是大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<p><strong>构造器函数创建对象（伪类创建对象） 构造器函数，添加成员的时候，要用this</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> age1 = <span class="number">30</span>;		 <span class="comment">// 这样添加属性，是添加不了的</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">22</span>;     <span class="comment">// 给该对象添加属性的时候，需要用this</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;aa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有共同东西的，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">headCount</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<p>p的构造器是Person，而Person的prototype是一个对象，这个对象的headCount属性</p>
<p>只有函数才有prototype属性，prototype指向的是一个对象</p>
<p>共同的属性放在prototype指向的对象里面，例如：headCount</p>
<p>对象都有constructor</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>听课笔记</category>
      </categories>
      <tags>
        <tag>听课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用代码</title>
    <url>/2018/03/20/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>在谷歌浏览器控制台（console）中，编写多行代码时，实现换行的快捷键：<code>shift + 回车</code></p>
<p>谷歌浏览器全局搜索关键字：<code>alt + shift + f</code></p>
<h4 id="日期时间Date的处理"><a href="#日期时间Date的处理" class="headerlink" title="日期时间Date的处理"></a>日期时间Date的处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date();</span><br><span class="line">var n = d.toLocaleDateString();    // 2020/10/11</span><br><span class="line">var n = d.toLocaleString(); 	  	  // 2020/10/11 15:53:22</span><br><span class="line">var n = d.toLocaleTimeString(); 	  // 15:53:22</span><br></pre></td></tr></table></figure>

<h4 id="jQuery获取动态生成的元素"><a href="#jQuery获取动态生成的元素" class="headerlink" title="jQuery获取动态生成的元素"></a>jQuery获取动态生成的元素</h4><p><a href="https://www.jb51.net/article/51085.htm">jQuery获取动态生成的元素示例</a></p>
<p><a href="https://blog.csdn.net/h_025/article/details/51821766">jquery获取动态生成的元素</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.button&quot;).live(&quot;click&quot;,function()&#123; </span><br><span class="line">     console.info($(&quot;#mytd&quot;).html()); </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;td&quot;).on(&quot;focus&quot;,&quot;input&quot;,function()&#123;</span><br><span class="line">    alert(&quot;niha&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="返回上一页"><a href="#返回上一页" class="headerlink" title="返回上一页"></a>返回上一页</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">href=&quot;javascript:window.history.back(-1);&quot;</span><br></pre></td></tr></table></figure>

<h4 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h4><p>当需要获取页面中的元素时，如果这script放在元素的前面，那么需要加window.onload；如果script放在元素后面，就不需要加window.onload。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 回到顶部</span><br><span class="line">window.onscroll = function()&#123;</span><br><span class="line">    if (document.documentElement.scrollTop || document.body.scrollTop &gt; 0) &#123;</span><br><span class="line">        document.getElementById(&quot;toTop&quot;).style.display=&#x27;block&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        document.getElementById(&quot;toTop&quot;).style.display=&#x27;none&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;toTop&quot;).onclick = function()&#123;</span><br><span class="line">    document.body.scrollTop = document.documentElement.scrollTop = 0;</span><br><span class="line">    document.getElementById(&quot;toTop&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原生ajax请求"><a href="#原生ajax请求" class="headerlink" title="原生ajax请求"></a>原生ajax请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &#x27;POST&#x27;,</span><br><span class="line">    async:false,</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    url: &quot;http://api.qmgjs.weiduanxian.com:7000/account/registerVerifyCode.json?telMobile=&quot;+mobile+&quot;&amp;token=&quot;+tokenValue+&quot;&amp;resultCode=&quot;+postResultCode,</span><br><span class="line">    success: function(data)&#123;</span><br><span class="line">      if(data.code == &#x27;0&#x27;)&#123;</span><br><span class="line">           //做处理，如果正确</span><br><span class="line">          toastShow();</span><br><span class="line">          $(&quot;.toast_content&quot;).text(&quot;验证码已发送，请查收！&quot;);</span><br><span class="line"></span><br><span class="line">      &#125;else&#123;</span><br><span class="line">           errorShow();</span><br><span class="line">           $(&quot;#error&quot;).text(data.errMsg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(data) &#123;</span><br><span class="line">       errorShow();</span><br><span class="line">       $(&quot;#error&quot;).text(data.errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="自动执行的函数"><a href="#自动执行的函数" class="headerlink" title="自动执行的函数"></a>自动执行的函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line">  var a;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="追加列表"><a href="#追加列表" class="headerlink" title="追加列表"></a>追加列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var template=&quot;&quot;,wqListLen,strHtml=&quot;&quot;;//整个列表的html内容，单个li的内容</span><br><span class="line">var area = document.getElementById(&#x27;ssq_list&#x27;);//往期列表的盒子</span><br><span class="line">for(var i=0;i &lt; wqListLen;i++)&#123;</span><br><span class="line">    strHtml+= &#x27;&lt;li&gt;&lt;span&gt;第&#x27;+wqList[i].issue+&#x27;期&lt;/span&gt;&lt;span&gt;&#x27;+wqList[i].time+&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">template = template + strHtml; </span><br><span class="line">area.innerHTML = template;</span><br></pre></td></tr></table></figure>

<h4 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.reload(); //刷新页面</span><br></pre></td></tr></table></figure>

<h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href=&quot;cashCoupon.html&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="是否允许页面滑动"><a href="#是否允许页面滑动" class="headerlink" title="是否允许页面滑动"></a>是否允许页面滑动</h4><p>例如：在弹出弹窗和蒙层的情况下，是否允许蒙层底下的页面滑动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mo=function(e)&#123;e.preventDefault();&#125;; //默认事件</span><br></pre></td></tr></table></figure>

<h5 id="1-允许滑动"><a href="#1-允许滑动" class="headerlink" title="(1)允许滑动"></a>(1)允许滑动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.style.overflow=&#x27;&#x27;;//出现滚动条</span><br><span class="line">document.removeEventListener(&quot;touchmove&quot;,mo,false);  </span><br></pre></td></tr></table></figure>

<h5 id="2-禁止滑动"><a href="#2-禁止滑动" class="headerlink" title="(2)禁止滑动"></a>(2)禁止滑动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.style.overflow=&#x27;hidden&#x27;;        </span><br><span class="line">document.addEventListener(&quot;touchmove&quot;,mo,false);//禁止页面滑动</span><br></pre></td></tr></table></figure>

<h4 id="控制移动端显示倍数"><a href="#控制移动端显示倍数" class="headerlink" title="控制移动端显示倍数"></a>控制移动端显示倍数</h4><p>可行：直接把maximum-scale改为一个放大倍数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;target-densitydpi=device-dpi, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.5, user-scalable=yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="https://www.jb51.net/article/67670.htm">JS制作手机端自适应缩放显示</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _width = parseInt(window.screen.width);</span><br><span class="line">var dpr =  parseInt(window.devicePixelRatio);</span><br><span class="line">var scale = (_width/640)*dpr;</span><br><span class="line">var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">var result = /android (\d+\.\d+)/.exec(ua);</span><br><span class="line">if (result)&#123;</span><br><span class="line">var version = parseFloat(result[1]);</span><br><span class="line">if(version&gt;2.3)&#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale = &#x27;+scale+&#x27;,minimum-scale = 1.0, maximum-scale = 3,user-scalable=yes, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=640, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">document.write(&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=640, user-scalable=no, target-densitydpi=device-dpi&quot;&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">alert(dpr);</span><br><span class="line">alert(scale);</span><br></pre></td></tr></table></figure>

<h4 id="监听输入框是否有值，改变按钮的可用性和背景颜色"><a href="#监听输入框是否有值，改变按钮的可用性和背景颜色" class="headerlink" title="监听输入框是否有值，改变按钮的可用性和背景颜色"></a>监听输入框是否有值，改变按钮的可用性和背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#tel&#x27;).keyup(function () &#123;</span><br><span class="line">	var v = $(&#x27;#tel&#x27;).val();</span><br><span class="line">	if (!v) &#123;</span><br><span class="line">		$(&#x27;.telBtn&#x27;).attr(&#x27;disabled&#x27;, true)</span><br><span class="line">		$(&#x27;.telBtn&#x27;).css(&quot;background&quot;, &quot;#abb2c1&quot;)</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		$(&#x27;.telBtn&#x27;).attr(&#x27;disabled&#x27;, false);</span><br><span class="line">		$(&#x27;.telBtn&#x27;).css(&quot;background&quot;, &quot;#0087e2&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="输入框获取焦点，页面放大，解决方法："><a href="#输入框获取焦点，页面放大，解决方法：" class="headerlink" title="输入框获取焦点，页面放大，解决方法："></a>输入框获取焦点，页面放大，解决方法：</h4><p><a href="http://www.qdfuns.com/notes/16438/5e38b8c6cf888c6f69adc98048d7836f.html">参考博客</a></p>
<h4 id="监听点击事件"><a href="#监听点击事件" class="headerlink" title="监听点击事件"></a>监听点击事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;text&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       document.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, function(event)&#123;alert(&quot;请输入内容&quot;)&#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="设备判断："><a href="#设备判断：" class="headerlink" title="设备判断："></a>设备判断：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent.toLowerCase(); </span><br><span class="line">var browser = &#123;</span><br><span class="line">versions: function () &#123;</span><br><span class="line">   var u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">   return &#123;//移动终端浏览器版本信息</span><br><span class="line">       trident: u.indexOf(&#x27;Trident&#x27;) &gt; -1, //IE内核</span><br><span class="line">       presto: u.indexOf(&#x27;Presto&#x27;) &gt; -1, //opera内核</span><br><span class="line">       webKit: u.indexOf(&#x27;AppleWebKit&#x27;) &gt; -1, //苹果、谷歌内核</span><br><span class="line">       gecko: u.indexOf(&#x27;Gecko&#x27;) &gt; -1 &amp;&amp; u.indexOf(&#x27;KHTML&#x27;) == -1, //火狐内核</span><br><span class="line">       mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</span><br><span class="line">       ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</span><br><span class="line">       android: u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Linux&#x27;) &gt; -1, //android终端或uc浏览器</span><br><span class="line">       iPhone: u.indexOf(&#x27;iPhone&#x27;) &gt; -1, //是否为iPhone或者QQHD浏览器</span><br><span class="line">       iPad: u.indexOf(&#x27;iPad&#x27;) &gt; -1, //是否iPad</span><br><span class="line">       webApp: u.indexOf(&#x27;Safari&#x27;) == -1 //是否web应该程序，没有头部与底部</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;(),</span><br><span class="line">language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为移动端"><a href="#判断是否为移动端" class="headerlink" title="判断是否为移动端"></a>判断是否为移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent;</span><br><span class="line">var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">isIphone = !ipad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">isAndroid = ua.match(/(Android)\s+([\d.]+)/),</span><br><span class="line">isMobile = isIphone || isAndroid;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否为微信"><a href="#判断是否为微信" class="headerlink" title="判断是否为微信"></a>判断是否为微信</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isWeiXin() &#123;   </span><br><span class="line">  var ua = window.navigator.userAgent.toLowerCase();</span><br><span class="line">  // alert(ua);</span><br><span class="line">  if (ua.match(/MicroMessenger/i) == &#x27;micromessenger&#x27;) &#123;</span><br><span class="line">      return true;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否为PC端"><a href="#判断是否为PC端" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function IsPC()&#123;  </span><br><span class="line">  var userAgentInfo = navigator.userAgent;  </span><br><span class="line">  var Agents = new Array(&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;);  </span><br><span class="line">  var flag = true;  </span><br><span class="line">  for (var v = 0; v &lt; Agents.length; v++) &#123;  </span><br><span class="line">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123; flag = false; break; &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   return flag;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="是不是手机端"><a href="#是不是手机端" class="headerlink" title="是不是手机端"></a>是不是手机端</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isMobile)&#123;</span><br><span class="line">  if(isIphone)&#123;</span><br><span class="line">          location.href = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">  &#125;else if(isAndroid)&#123;</span><br><span class="line">          location.href = &#x27;http://dl.fa.weiduanxian.com/downloads/guijsh-wd.apk&#x27;;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&quot;computer&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="是不是微信"><a href="#是不是微信" class="headerlink" title="是不是微信"></a>是不是微信</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isWeiXin()) &#123;</span><br><span class="line">  //跳转到中转页</span><br><span class="line">  window.location=&quot;slide.html&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   // &#x27;不是微信</span><br><span class="line">   if(isMobile)&#123;</span><br><span class="line">        if(isIphone)&#123;</span><br><span class="line">                location.href = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">        &#125;else if(isAndroid)&#123;</span><br><span class="line">                 location.href = &#x27;http://dl.fa.weiduanxian.com/downloads/guijsh-wd.apk&#x27;;</span><br><span class="line">        &#125; </span><br><span class="line">   &#125;else&#123;</span><br><span class="line">        console.log(&quot;computer&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   // window.location = &#x27;http://um0.cn/XbXW0&#x27;;</span><br><span class="line">   // window.location=&quot;http://weiduanxian.com/downloads/guijsh-wd.apk&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="截取url参数"><a href="#截取url参数" class="headerlink" title="截取url参数"></a>截取url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r != null) return unescape(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="截取url参数-1"><a href="#截取url参数-1" class="headerlink" title="截取url参数"></a>截取url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r != null) return decodeURIComponent(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var platform=GetQueryString(&#x27;platform&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="修改页面Title"><a href="#修改页面Title" class="headerlink" title="修改页面Title"></a>修改页面Title</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.title = &quot;第&quot; + data.data.imgData.issue + &quot;期图库&quot; ;</span><br></pre></td></tr></table></figure>

<h4 id="设置定时器"><a href="#设置定时器" class="headerlink" title="设置定时器"></a>设置定时器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(&quot;show()&quot;,1900);//1000为1秒钟,设置为1分钟。</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;location.reload();&#125;,1000);</span><br></pre></td></tr></table></figure>

<h4 id="动态生成的节点，触发点击事件"><a href="#动态生成的节点，触发点击事件" class="headerlink" title="动态生成的节点，触发点击事件"></a>动态生成的节点，触发点击事件</h4><h5 id="移动端触屏点击要用：touchend"><a href="#移动端触屏点击要用：touchend" class="headerlink" title="移动端触屏点击要用：touchend"></a>移动端触屏点击要用：touchend</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).on(&#x27;touchend&#x27;,&#x27;#rechargeList li&#x27;,function()&#123;</span><br><span class="line">  $(this).addClass(&quot;cur&quot;).siblings().removeClass(&quot;cur&quot;);</span><br><span class="line">  rechargeValue = $(this).data(&quot;money&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="设置电脑定时关机"><a href="#设置电脑定时关机" class="headerlink" title="设置电脑定时关机"></a>设置电脑定时关机</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -s -t 7200   // （两个小时后自动关机）</span><br></pre></td></tr></table></figure>

<p><strong>Math.PI</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.141592653589793</span><br></pre></td></tr></table></figure>

<h4 id="微信返回按钮监听函数"><a href="#微信返回按钮监听函数" class="headerlink" title="微信返回按钮监听函数"></a>微信返回按钮监听函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function pushHistory() &#123; </span><br><span class="line">  var state = &#123; </span><br><span class="line">      title: &quot;title&quot;, </span><br><span class="line">      url: &quot;#&quot;</span><br><span class="line">  &#125;; </span><br><span class="line">  window.history.pushState(state, &quot;title&quot;, &quot;#&quot;); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="微信处理返回按钮"><a href="#微信处理返回按钮" class="headerlink" title="微信处理返回按钮"></a>微信处理返回按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pushHistory(); </span><br><span class="line">window.addEventListener(&quot;popstate&quot;, function(e) &#123; </span><br><span class="line">    （这里写按了返回按钮之后，执行的事件）</span><br><span class="line">例如：</span><br><span class="line">     $(&quot;#couponNoUse&quot;).show();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure>

<h4 id="捕捉页面错误信息"><a href="#捕捉页面错误信息" class="headerlink" title="捕捉页面错误信息"></a>捕捉页面错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; onclick=&quot;adlert(&#x27;函数函数&#x27;)&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">  var errorTxt = &quot;&quot;;</span><br><span class="line">  window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h4 id="监听手机输入框值变化的事件"><a href="#监听手机输入框值变化的事件" class="headerlink" title="监听手机输入框值变化的事件"></a>监听手机输入框值变化的事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#username&#x27;).bind(&#x27;input propertychange&#x27;, function() &#123;  </span><br><span class="line">   $(&#x27;#result&#x27;).html($(this).val().length + &#x27; characters&#x27;);  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<h4 id="判断对象是否为空对象"><a href="#判断对象是否为空对象" class="headerlink" title="判断对象是否为空对象"></a>判断对象是否为空对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isEmptyObject(obj) &#123;</span><br><span class="line">    if (obj.length != null &amp;&amp; obj.length == 0) return false;</span><br><span class="line">    if (Object.prototype.toString.apply(obj) !== &#x27;[object Object]&#x27;) return false;</span><br><span class="line">    for (var p in obj) if (obj.hasOwnProperty(p)) return false;</span><br><span class="line">    return true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="console-log-在IE浏览器的兼容模式下不可用"><a href="#console-log-在IE浏览器的兼容模式下不可用" class="headerlink" title="console.log()在IE浏览器的兼容模式下不可用"></a>console.log()在IE浏览器的兼容模式下不可用</h4><p><a href="https://blog.csdn.net/escapeplan/article/details/55210495">关于console.log()在IE浏览器的兼容模式下不可用的问题</a></p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    if(!window.console)&#123;</span><br><span class="line">        window.console = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!window.console.log)&#123;</span><br><span class="line">        window.console.log = function(msg)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSON字符串与JSON对象之间的转换"><a href="#JSON字符串与JSON对象之间的转换" class="headerlink" title="JSON字符串与JSON对象之间的转换"></a>JSON字符串与JSON对象之间的转换</h4><p><a href="https://blog.csdn.net/chenxiaodan_danny/article/details/40656559">JS 处理JSON数据及javascript处理对象、JSON对象、hash对象、数组对象的方法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str1 = &#x27;&#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;&#x27;;//JSON字符串</span><br><span class="line">var str2 = &#123;&quot;name&quot;:&quot;yangyanyi&quot;,&quot;age&quot;:&quot;25&quot;&#125;//JSON对象</span><br><span class="line">var str3 = eval(&#x27;(&#x27; + str1 + &#x27;)&#x27;);//JSON字符串转换为JSON对象</span><br><span class="line">console.log(JSON.parse(str1));//JSON字符串转换为JSON对象</span><br><span class="line">console.log(JSON.stringify(str2));//JSON对象转换为JSON字符串</span><br></pre></td></tr></table></figure>

<h4 id="获取对象的长度"><a href="#获取对象的长度" class="headerlink" title="获取对象的长度"></a>获取对象的长度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function countProperties (obj) &#123;</span><br><span class="line">    var count = 0;</span><br><span class="line">    for (var property in obj) &#123;</span><br><span class="line">        if (Object.prototype.hasOwnProperty.call(obj, property)) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for-in"><a href="#for-in" class="headerlink" title="for  in"></a>for  in</h4><p><a href="http://caibaojian.com/js-loop-for-in.html">javascript中的for in循环和for循环的使用</a></p>
<h4 id="将字符串反向排序"><a href="#将字符串反向排序" class="headerlink" title="将字符串反向排序"></a>将字符串反向排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var message = &quot;yangyanyi&quot;;</span><br><span class="line">message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);    //iynaygnay</span><br></pre></td></tr></table></figure>

<h4 id="JavaScript获取页面宽度高度大全"><a href="#JavaScript获取页面宽度高度大全" class="headerlink" title="JavaScript获取页面宽度高度大全"></a><a href="https://www.cnblogs.com/wcg249165510/archive/2009/02/20/1394749.html">JavaScript获取页面宽度高度大全</a></h4><p>网页可见区域宽：document.body.clientWidth</p>
<p>网页可见区域高：document.body.clientHeight</p>
<p>网页可见区域宽：document.body.offsetWidth(包括边线的宽)</p>
<p>网页可见区域高：document.body.offsetHeight(包括边线的宽)</p>
<p>网页正文全文宽：document.body.scrollWidth</p>
<p>网页正文全文高：document.body.scrollHeight</p>
<p>网页被卷去的高：document.body.scrollTop(IE7无效)</p>
<p>网页被卷去的左：document.body.scrollLeft(IE7无效)</p>
<p>网页被卷去的高：document.documentElement.scrollTop(IE7有效)</p>
<p>网页被卷去的左：document.documentElement.scrollLeft(IE7有效)</p>
<p>网页正文部分上：window.screenTop</p>
<p>网页正文部分左：window.screenLeft</p>
<p>屏幕分辨率的高：window.screen.height</p>
<p>屏幕分辨率的宽：window.screen.width</p>
<p>屏幕可用工作区高度：window.screen.availHeight</p>
<p>屏幕可用工作区宽度：window.screen.availWidth</p>
<p>相对于窗口左上角的X：window.event.clientX</p>
<p>相对于窗口左上角的Y：window.event.clientY</p>
<p>相对于整个页面的X：window.event.X</p>
<p>相对于整个页面的Y：window.event.Y</p>
<h4 id="iOS移动端-H5-alert-confirm提示信息去除网址-URL"><a href="#iOS移动端-H5-alert-confirm提示信息去除网址-URL" class="headerlink" title="iOS移动端(H5)alert/confirm提示信息去除网址(URL)"></a>iOS移动端(H5)alert/confirm提示信息去除网址(URL)</h4><p><a href="https://www.jb51.net/article/97633.htm">iOS移动端(H5)alert/confirm提示信息去除网址(URL)</a></p>
<p>重写alert方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.alert = function(name)&#123;</span><br><span class="line">  var iframe = document.createElement(&quot;IFRAME&quot;);</span><br><span class="line">  iframe.style.display=&quot;none&quot;;</span><br><span class="line">  iframe.setAttribute(&quot;src&quot;, &#x27;data:text/plain,&#x27;);</span><br><span class="line">  document.documentElement.appendChild(iframe);</span><br><span class="line">  window.frames[0].window.alert(name);</span><br><span class="line">  iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="js获取网页屏幕可见区域高度"><a href="#js获取网页屏幕可见区域高度" class="headerlink" title="js获取网页屏幕可见区域高度"></a><a href="http://qiaolevip.iteye.com/blog/2076034">js获取网页屏幕可见区域高度</a></h4><p>获取页面高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var windowHeight =  document.documentElement.clientHeight;</span><br><span class="line">console.log(windowHeight);</span><br><span class="line">$(&#x27;.content&#x27;).css(&#x27;height&#x27;, (windowHeight- 80)+&#x27;px&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取当前页面可视高度(注意，此处行到的是当前页面的可视高度，而不是浏览器的可视高度</span><br><span class="line">function getClientHeight()&#123;</span><br><span class="line">    var clientEeight = 0 ;</span><br><span class="line">    if(document.body.clientHeight &amp;&amp; document.documentElement.clientHeight)&#123;</span><br><span class="line">        clientHeight = Math.min(document.body.clientHeight, document.documentElement.clientHeight);</span><br><span class="line">    &#125;else&#123; </span><br><span class="line">        clientHeight = Math.max(document.body.clientHeight, document.documentElement.clientHeight) ;</span><br><span class="line">    return clientHeight ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上这个就可以直接使用document.body.clientHeight</span><br><span class="line"></span><br><span class="line">html, body&#123;</span><br><span class="line">	height:100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><ol>
<li>localStorage是一个普通对象，任何对象的操作都适用。</li>
<li>localStorage对象的属性值只能是字符串。</li>
</ol>
<p>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.getItem(key):获取指定key本地存储的值</span><br><span class="line">localStorage.setItem(key,value)：将value存储到key字段</span><br><span class="line">localStorage.removeItem(key):删除指定key本地存储的值</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加键值对：localStorage.setItem(key,value)</span><br><span class="line">获取键值：localStorage.getItem(key)</span><br><span class="line">删除键值对：localStorage.removeItem(key)。</span><br><span class="line">清除所有键值对：localStorage.clear()。</span><br><span class="line">获取localStorage的属性名称（键名称）：localStorage.key(index)。</span><br><span class="line">还有一个和普通对象不一样的属性length:</span><br><span class="line">获取localStorage中保存的键值对的数量：localStorage.length。</span><br></pre></td></tr></table></figure>

<h4 id="删除对象属性"><a href="#删除对象属性" class="headerlink" title="删除对象属性"></a>删除对象属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete localObj.username;//删除属性</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/goweb/p/5357640.html">关于给javascript对象添加、删除、修改对象的属性</a></p>
<h4 id="IE浏览器-点击事件不生效"><a href="#IE浏览器-点击事件不生效" class="headerlink" title="IE浏览器  点击事件不生效"></a>IE浏览器  点击事件不生效</h4><p>当按F12有点击有反应的时候，查一下代码中有没有console.log()的代码，因为ie没有这个方法。</p>
<h4 id="点击动态生成的元素"><a href="#点击动态生成的元素" class="headerlink" title="点击动态生成的元素"></a>点击动态生成的元素</h4><h5 id="使用on-要阻止冒泡事件"><a href="#使用on-要阻止冒泡事件" class="headerlink" title="使用on.()   要阻止冒泡事件"></a>使用on.()   要阻止冒泡事件</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E7%82%B9%E5%87%BB%E5%90%8E%E6%9C%9F%E7%94%9F%E6%88%90%E5%85%83%E7%B4%A0.png" alt="动态生成元素"></p>
<h4 id="浏览器的重绘与重排"><a href="#浏览器的重绘与重排" class="headerlink" title="浏览器的重绘与重排"></a><a href="https://www.cnblogs.com/gyjWEB/p/4547140.html">浏览器的重绘与重排</a></h4><p>将需要多次重排的元素，position属性设为absolute或fixed</p>
<h4 id="ajax请求"><a href="#ajax请求" class="headerlink" title="ajax请求"></a>ajax请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HTTP请求</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param type</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_request(url, data, type, async, dataType) &#123;</span><br><span class="line">    // 默认能数</span><br><span class="line">    async = (async ? async : false);</span><br><span class="line">    data = (data ? data : &#x27;&#x27;);</span><br><span class="line">    type = (type ? type : &#x27;POST&#x27;);</span><br><span class="line">    dataType = (dataType ? dataType : &#x27;JSON&#x27;);</span><br><span class="line"></span><br><span class="line">    var result;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        &#x27;url&#x27; : url,</span><br><span class="line">        &#x27;type&#x27; : type,</span><br><span class="line">        &#x27;data&#x27; : data,</span><br><span class="line">        &#x27;async&#x27; : async,</span><br><span class="line">        &#x27;dataType&#x27; : dataType,</span><br><span class="line">        &#x27;success&#x27; : function(res) &#123;</span><br><span class="line">            result = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HTTP_GET</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_get(url, data, async) &#123;</span><br><span class="line">    return http_request(url, data, &#x27;GET&#x27;, async, &#x27;JSON&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HTTP_POST</span><br><span class="line"> * </span><br><span class="line"> * @param url</span><br><span class="line"> * @param data</span><br><span class="line"> * @param async</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function http_post(url, data, async) &#123;</span><br><span class="line">    return http_request(url, data, &#x27;POST&#x27;, async, &#x27;JSON&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取字符串的首字母"><a href="#获取字符串的首字母" class="headerlink" title="获取字符串的首字母"></a>获取字符串的首字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.charAt(0)</span><br><span class="line">str.substr(0, 1)</span><br></pre></td></tr></table></figure>

<h4 id="获取字符串的末字母"><a href="#获取字符串的末字母" class="headerlink" title="获取字符串的末字母"></a>获取字符串的末字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.charAt(str.length - 1)</span><br></pre></td></tr></table></figure>

<h4 id="获取汉字首字母"><a href="#获取汉字首字母" class="headerlink" title="获取汉字首字母"></a>获取汉字首字母</h4><p><a href="https://blog.csdn.net/testcs_dn/article/details/25116655">JS获取中文拼音首字母，并通过拼音首字母快速查找页面内的中文内容</a></p>
<h4 id="F12审核元素，搜索全部文件有没有某字符"><a href="#F12审核元素，搜索全部文件有没有某字符" class="headerlink" title="F12审核元素，搜索全部文件有没有某字符"></a>F12审核元素，搜索全部文件有没有某字符</h4><p> 快捷键 ：<code>ctrl +shift +F</code></p>
<h4 id="用QQ登录"><a href="#用QQ登录" class="headerlink" title="用QQ登录"></a>用<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta property=&quot;qc:admins&quot; content=&quot;2432050734660161756375&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个是让网站加入<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录接口，这段代码可放在之间。</p>
<p>申请腾讯接口后，会得到这样的代码，加入接口之后，你的网站上面的注册登录功能，别人可以直接用<a href="https://www.baidu.com/s?wd=QQ&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dWuhRLryn3ny7-ujNbPH010ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6K1TL0qnfK1TL0z5HD0IgF_5y9YIZ0lQzqlpA-bmyt8mh7GuZR8mvqVQL7dugPYpyq8Q1RzP1TLPjT1n6">QQ</a>登录，省去注册的麻烦。</p>
</blockquote>
<h4 id="去除字符串两端的空白字符"><a href="#去除字符串两端的空白字符" class="headerlink" title="去除字符串两端的空白字符"></a>去除字符串两端的空白字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.trim( str )</span><br></pre></td></tr></table></figure>

<h4 id="previousSibling、previousElementSibling的区别"><a href="#previousSibling、previousElementSibling的区别" class="headerlink" title="previousSibling、previousElementSibling的区别"></a><a href="https://blog.csdn.net/sunlizhen/article/details/73437102">previousSibling、previousElementSibling的区别</a></h4><p>previousSibling：获取元素的上一个兄弟节点；（既包含元素节点、文本节点、注释节点）；</p>
<p>previousElementSibling：获取上一个兄弟元素节点；（只包含元素节点）；</p>
<h4 id="解决ios软键盘弹起遮盖住底部输入框的问题"><a href="#解决ios软键盘弹起遮盖住底部输入框的问题" class="headerlink" title="解决ios软键盘弹起遮盖住底部输入框的问题"></a>解决ios软键盘弹起遮盖住底部输入框的问题</h4><p>解决ios软键盘弹起遮盖住底部输入框的问题（终极解决方案！！！绝对好用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;layout_flex&quot;&gt;</span><br><span class="line">    &lt;!-- 头部 --&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;</span><br><span class="line">    &lt;!-- 中间内容区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot; id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;dataList&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;数据趋势图/数据列表均调用此接口&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 底部输入框部 --&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;foter&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;&quot;/&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;fcont&quot;&gt;使用定时器是为了让输入框上滑时更加自然&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">css样式</span><br><span class="line"></span><br><span class="line">/*flex布局*/</span><br><span class="line">html, body&#123;height:100%;&#125;</span><br><span class="line">.layout_flex&#123;display:-webkit-box;-webkit-box-orient:vertical;height:100%;&#125;</span><br><span class="line">.layout_flex .content&#123;-webkit-box-flex:1;overflow:auto;-webkit-overflow-scrolling:touch;position:relative;height:100%;&#125;</span><br><span class="line"></span><br><span class="line">/*头部*/</span><br><span class="line">.header&#123;height: 5rem;background-color: red;font-size: 2rem;line-height: 5rem;color: #fff;&#125;</span><br><span class="line"></span><br><span class="line">/*底部评论框*/</span><br><span class="line">.footer&#123;background-color: green;font-size: 2rem;color: #fff;padding: 0 1rem;&#125;</span><br><span class="line">.foter&#123;padding: 1rem 0;&#125;</span><br><span class="line">.foter input&#123;width: 100%;height: 3rem;line-height: 3rem;text-indent: 1rem;&#125;</span><br><span class="line">.content&#123;background-color: yellow;&#125;</span><br><span class="line">.fcont&#123;height: 2rem;line-height: 2rem;color: #fff;font-size: 1rem;&#125;</span><br><span class="line"></span><br><span class="line">js代码(可以不使用js)</span><br><span class="line"></span><br><span class="line">var bfscrolltop = document.body.scrollTop;</span><br><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    interval = setInterval(function()&#123;</span><br><span class="line">    document.body.scrollTop = document.body.scrollHeight;</span><br><span class="line">    &#125;,100)</span><br><span class="line">&#125;).blur(function()&#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">    document.body.scrollTop = bfscrolltop;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态改变和获取input的checked属性值"><a href="#动态改变和获取input的checked属性值" class="headerlink" title="动态改变和获取input的checked属性值"></a>动态改变和获取input的checked属性值</h4><p>pop()方法</p>
<h4 id="搜索匹配，keyup事件"><a href="#搜索匹配，keyup事件" class="headerlink" title="搜索匹配，keyup事件"></a>搜索匹配，keyup事件</h4><h5 id="中文输入时，要等输入法按确定之后才匹配"><a href="#中文输入时，要等输入法按确定之后才匹配" class="headerlink" title="中文输入时，要等输入法按确定之后才匹配"></a>中文输入时，要等输入法按确定之后才匹配</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/compositionstart"><strong>compositionstart</strong> </a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/compositionend"><strong>compositionend</strong></a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/keyup.png" alt="keyup"></p>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript方法</title>
    <url>/2020/04/07/Javascript%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="关于-lt-input-type-“number”-gt-可以输入字母e"><a href="#关于-lt-input-type-“number”-gt-可以输入字母e" class="headerlink" title="关于&lt; input type=“number” /&gt;可以输入字母e"></a><a href="https://www.cnblogs.com/ysx215/p/14654648.html">关于&lt; input type=“number” /&gt;可以输入字母e</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onKeypress=&quot;return(/[\d\.]/.test(String.fromCharCode(event.keyCode)))&quot;</span><br></pre></td></tr></table></figure>

<p><strong>主要原因是：e在数学上代表的是无理数，是一个无限不循环的小数，其值约为2.7182818284，所以在输入e的时候，输入框会把e当成一个数字看待。</strong></p>
<p>可以采用下面的方式来避免这个BUG，在input标签中添加如下属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;number&quot; class=&quot;form-control&quot; onKeypress=&quot;return(/[\d\.]/.test(String.fromCharCode(event.keyCode)))&quot;  placeholder=&quot;number&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除对象某个属性"><a href="#删除对象某个属性" class="headerlink" title="删除对象某个属性"></a>删除对象某个属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    name: &#x27;zhagnsan&#x27;,</span><br><span class="line">    age: 19 </span><br><span class="line">&#125;</span><br><span class="line">delete obj.name //true</span><br></pre></td></tr></table></figure>

<h4 id="数组对象按照某个属性排序"><a href="#数组对象按照某个属性排序" class="headerlink" title="数组对象按照某个属性排序"></a>数组对象按照某个属性排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group.sort(function(a, b)&#123;return Number(a.year) - Number(b.year)&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="js获取当前时间-昨天、今天、明天"><a href="#js获取当前时间-昨天、今天、明天" class="headerlink" title="js获取当前时间(昨天、今天、明天)"></a><a href="https://www.cnblogs.com/menxiaojin/p/13753525.html">js获取当前时间(昨天、今天、明天)</a></h4><h4 id="获取时间戳-valueOf"><a href="#获取时间戳-valueOf" class="headerlink" title="获取时间戳-valueOf()"></a>获取时间戳-valueOf()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d = new Date().valueOf();</span><br></pre></td></tr></table></figure>

<h4 id="new-Date-方法"><a href="#new-Date-方法" class="headerlink" title="new Date()方法"></a>new Date()方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toDateString()</span><br><span class="line">Wed Mar 02 2020</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleDateString()</span><br><span class="line">2020/3/2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleTimeString()</span><br><span class="line">17:50:21</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toLocaleString();</span><br><span class="line">2020/3/2 17:46:52</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toTimeString()</span><br><span class="line">17:50:59 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().toUTCString()</span><br><span class="line">Wed, 02 Mar 2020 09:51:30 GMT</span><br></pre></td></tr></table></figure>

<h4 id="获取明天的日期并格式化"><a href="#获取明天的日期并格式化" class="headerlink" title="获取明天的日期并格式化"></a>获取明天的日期并格式化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 格式化日期</span><br><span class="line">function format(t, symbol)&#123;</span><br><span class="line">    var year = t.getFullYear()       // 年份</span><br><span class="line">        , month = t.getMonth() + 1   // 月份</span><br><span class="line">        , date = t.getDate()         // 日</span><br><span class="line">        , symbol = symbol || &#x27;-&#x27;;    // 分隔符，默认为-</span><br><span class="line">    month = month &lt; 10 ? &#x27;0&#x27; + month : month;</span><br><span class="line">    date = date &lt; 10 ? &#x27;0&#x27; + date : date;</span><br><span class="line">    return year + symbol + month + symbol + date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var now = new Date()               // 获取当前时间</span><br><span class="line">    , time_stamp = now.setDate(now.getDate() +  1)</span><br><span class="line">    , tomorrow = format(new Date(time_stamp));  // 明天</span><br></pre></td></tr></table></figure>

<h4 id="获取前后相隔n天的日期"><a href="#获取前后相隔n天的日期" class="headerlink" title="获取前后相隔n天的日期"></a>获取前后相隔n天的日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据间隔天数获取日期</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function getDate(interval, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date()               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据某天的前后几天获取日期"><a href="#根据某天的前后几天获取日期" class="headerlink" title="根据某天的前后几天获取日期"></a>根据某天的前后几天获取日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 根据某天的前/后几天</span><br><span class="line">* @param interval：间隔天数</span><br><span class="line">* @param value：某天的日期</span><br><span class="line">* @param symbol：日期格式分隔符（默认：-）</span><br><span class="line">* interval为-1：昨天</span><br><span class="line">* interval为0：今天</span><br><span class="line">* interval为1：明天</span><br><span class="line">*/</span><br><span class="line">function getPreDate(interval, value, symbol) &#123;</span><br><span class="line">    // getDate: 返回月份的某一天</span><br><span class="line">    // setDate：设置为月份的某一天</span><br><span class="line">    var now = new Date(value)               // 获取当前时间</span><br><span class="line">        , time_stamp = now.setDate(now.getDate() +  parseInt(interval))</span><br><span class="line">        , date = new Date(time_stamp);  // 根据间隔天数获取的日期</span><br><span class="line">    // 返回格式化后日期</span><br><span class="line">    return format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="实现倒计时功能"><a href="#实现倒计时功能" class="headerlink" title="实现倒计时功能"></a>实现倒计时功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 倒计时功能</span><br><span class="line">var div = document.getElementById(&quot;showtime&quot;);</span><br><span class="line">setInterval (function () &#123;</span><br><span class="line">    div.innerHTML = showtime();</span><br><span class="line">&#125;, 1000); </span><br><span class="line"></span><br><span class="line">var showtime = function () &#123;</span><br><span class="line">    var nowTime = new Date(),  // 获取当前时间</span><br><span class="line">        // endTime = new Date(&quot;2022/8/20&quot;);  // 定义结束时间  </span><br><span class="line">        endTime = new Date(&quot;2022/8/20 23:59:59&quot;);  // 定义结束具体时间——即8月21凌晨结束</span><br><span class="line">    var time = endTime.getTime() - nowTime.getTime(),  // 距离结束时间的毫秒数</span><br><span class="line">        d = Math.floor(time/(1000*60*60*24)),  // 计算天数</span><br><span class="line">        h = Math.floor(time/(1000*60*60)%24),  // 计算小时数</span><br><span class="line">        m = Math.floor(time/(1000*60)%60),  // 计算分钟数</span><br><span class="line">        s = Math.floor(time/1000%60);  // 计算秒数</span><br><span class="line"></span><br><span class="line">    h = h &lt; 10 ? &quot;0&quot; + h : h;</span><br><span class="line">    m = m &lt; 10 ? &quot;0&quot; + m : m;</span><br><span class="line">    s = s &lt; 10 ? &quot;0&quot; + s : s;</span><br><span class="line">    return d + &quot;天&quot; + h + &quot;:&quot; + m + &quot;:&quot; + s;  //返回倒计时的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach()</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">arr.forEach(function (item) &#123;</span><br><span class="line">    if (item === 3) &#123;</span><br><span class="line">        return;		// ----&gt;3的元素跳过</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">// 输出结果：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>



<h4 id="js中数组常用方法总结"><a href="#js中数组常用方法总结" class="headerlink" title="js中数组常用方法总结"></a><a href="https://www.cnblogs.com/jinzhou/p/9072614.html">js中数组常用方法总结</a></h4><h4 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h4><p>1、当看到script标签的时候就会进入到js作用</p>
<p>2、调用一个function的时候</p>
<h4 id="二、进入到作用域之后，发生了什么事情"><a href="#二、进入到作用域之后，发生了什么事情" class="headerlink" title="二、进入到作用域之后，发生了什么事情??"></a>二、进入到作用域之后，发生了什么事情??</h4><p>1、js预解析</p>
<p>​        开辟一个空间，找有没有var，有没有方法参数，有没有function，如果有var，有方法参数，就把var和方法参数定义的变量设置成undefined，如果有function，那么就储存function里面的所有内容。</p>
<p>2、js逐行执行</p>
<p>​     从上往下执行，找有没有表达式，+  - * 、==   ++   – ，如果有表达式，就修改js作用域里面的变量的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">	console.log(a);</span><br><span class="line">	var a = 1;</span><br><span class="line">	console.log(a);</span><br><span class="line">    function a() &#123;</span><br><span class="line">        console.log(2); </span><br><span class="line">    &#125;</span><br><span class="line">	console.log(a);</span><br><span class="line">    var a = 3;</span><br><span class="line">    console.log(a);</span><br><span class="line">    function a() &#123; </span><br><span class="line">        console.log(4);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a);</span><br><span class="line">	a();</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="判断对象是否为空"><a href="#判断对象是否为空" class="headerlink" title="判断对象是否为空"></a>判断对象是否为空</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断对象是否为空</span><br><span class="line">var obj = JSON.stringify(data);</span><br><span class="line">if(obj === &#x27;&#123;&#125;&#x27;) &#123;</span><br><span class="line">    console.log(&quot;对象为空&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    console.log(&quot;对象不为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者直接判断是否具有某属性</span><br><span class="line"></span><br><span class="line">var title = data.id ? &quot;编辑&quot; : &quot;新增&quot;;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/jpfss/p/9105119.html">js判断对象是否为空对象的几种方法</a></p>
<p><a href="https://m.html.cn/qa/javascript/11178.html">javascript怎么判断对象是否为空？</a></p>
<h4 id="判断某变量的值是否等于某数组中的一个元素"><a href="#判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="判断某变量的值是否等于某数组中的一个元素"></a>判断某变量的值是否等于某数组中的一个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">var testStr=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">return testStr.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">var test=[&#x27;a&#x27;,23,-1];</span><br><span class="line">alert(IsInArray(test,&#x27;a&#x27;));//true</span><br><span class="line">alert(IsInArray(test,2));//false</span><br><span class="line">alert(IsInArray(test,-1));//true</span><br></pre></td></tr></table></figure>
<p>需求：</p>
<p>在后台的某些模块中，不显示表头的游戏下拉筛选框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当前页URL</span><br><span class="line">var page = window.location.hash.split(&quot;?&quot;)[0];</span><br><span class="line">// 当前模块值</span><br><span class="line">var this_module = page.split(&quot;/&quot;)[2];</span><br><span class="line">（判断连接中是否是这几个模块下的链接）</span><br><span class="line">// 需要去掉游戏选择下拉框的模块</span><br><span class="line">var moduleArr = [&quot;app&quot;,&quot;channel&quot;,&quot;agent&quot;,&quot;config&quot;,&quot;white_list&quot;,&quot;account&quot;];</span><br><span class="line"></span><br><span class="line">// 判断模块值是否等于数组中的其中一个</span><br><span class="line">function IsInArray(arr,val)&#123;</span><br><span class="line">    var str=&#x27;,&#x27;+arr.join(&quot;,&quot;)+&quot;,&quot;;</span><br><span class="line">    return str.indexOf(&quot;,&quot;+val+&quot;,&quot;)!=-1;</span><br><span class="line">&#125;</span><br><span class="line">//是否在模块组中</span><br><span class="line">var flag = IsInArray(moduleArr, this_module);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">    $(&quot;.product-select&quot;).hide();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $(&quot;.product-select&quot;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js-判断某变量的值是否等于某数组中的一个元素"><a href="#【参考】：-js-判断某变量的值是否等于某数组中的一个元素" class="headerlink" title="【参考】： js:判断某变量的值是否等于某数组中的一个元素"></a>【参考】： <a href="http://www.imooc.com/wenda/detail/476679">js:判断某变量的值是否等于某数组中的一个元素</a></h6><h4 id="js高效修改对象数组里的对象属性名"><a href="#js高效修改对象数组里的对象属性名" class="headerlink" title="js高效修改对象数组里的对象属性名"></a>js高效修改对象数组里的对象属性名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appList: [</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试1&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试11&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试111&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        list:[</span><br><span class="line">            &#123;id: 118, name: &quot;测试2&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 120, name: &quot;测试22&quot;, group_id: 4, os: 2&#125;</span><br><span class="line">            &#123;id: 123, name: &quot;测试222&quot;, group_id: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（因为插件的要求）改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">productArr: [</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试1&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试11&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试111&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试1111&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        children:[</span><br><span class="line">            &#123;value: 118, name: &quot;测试2&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 120, name: &quot;测试22&quot;, group_value: 4, os: 2&#125;</span><br><span class="line">            &#123;value: 123, name: &quot;测试222&quot;, group_value: 4, os: 1&#125;</span><br><span class="line">        ]</span><br><span class="line">        name: &quot;测试2222&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var productArr = JSON.parse(JSON.stringify(appList).replace(/list/g, &#x27;children&#x27;));</span><br><span class="line">productArr = JSON.parse(JSON.stringify(productArr).replace(/id/g, &#x27;value&#x27;));</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-js高效修改对象数组里的对象属性名"><a href="#【参考】：-js高效修改对象数组里的对象属性名" class="headerlink" title="【参考】： js高效修改对象数组里的对象属性名"></a>【参考】： <a href="https://blog.csdn.net/Mr_JavaScript/article/details/85236957">js高效修改对象数组里的对象属性名</a></h6><h4 id="数组相减"><a href="#数组相减" class="headerlink" title="数组相减"></a>数组相减</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//数组相减函数</span><br><span class="line">function array_diff(a, b) &#123;</span><br><span class="line">    //拷贝数组</span><br><span class="line">    var arr = [].concat(a);</span><br><span class="line"></span><br><span class="line">    // 数组相减</span><br><span class="line">    for (var i = 0; i &lt; b.length; i++) &#123;</span><br><span class="line">        for (var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            if (arr[j][&quot;id&quot;] == b[i][&quot;id&quot;]) &#123;</span><br><span class="line">                arr.splice(j, 1);</span><br><span class="line">                j = j - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="js拷贝对象，不改变原来对象"><a href="#js拷贝对象，不改变原来对象" class="headerlink" title="js拷贝对象，不改变原来对象"></a>js拷贝对象，不改变原来对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a:1,b:2&#125;  </span><br><span class="line">var newObj = JSON.parse(JSON.stringify(obj)); </span><br></pre></td></tr></table></figure>

<h4 id="JS-模拟浏览器-F5-自动刷新页面效果"><a href="#JS-模拟浏览器-F5-自动刷新页面效果" class="headerlink" title="JS 模拟浏览器 F5 自动刷新页面效果"></a>JS 模拟浏览器 F5 自动刷新页面效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. window.location.replace(window.location.href);</span><br><span class="line"></span><br><span class="line">2. window.location.href = window.location.href;</span><br><span class="line"></span><br><span class="line">3. window.document.location.reload();</span><br><span class="line"> </span><br><span class="line">有iframe的使用这个：</span><br><span class="line">4. window.top.document.location.reload();</span><br><span class="line"> </span><br><span class="line">5.window.top.document.location = “url”</span><br><span class="line"></span><br><span class="line">6.window.document.location. = “url”</span><br></pre></td></tr></table></figure>

<h4 id="对象格式转换"><a href="#对象格式转换" class="headerlink" title="对象格式转换"></a>对象格式转换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;aaaaaa&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;0&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:&#x27;bbbb&#x27;,</span><br><span class="line">        title: &#x27;技术团队&#x27;,</span><br><span class="line">        description: &#x27;这就是技术&#x27;,</span><br><span class="line">        keywords: &#x27;技术团队&#x27;,</span><br><span class="line">        pid: &quot;1&quot;,</span><br><span class="line">        add_time: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">转为这样的格式：</span><br><span class="line">var idPidArr = &#123;</span><br><span class="line">    aaaaaa: &quot;0&quot;,</span><br><span class="line">    bbbb: &quot;1&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">var idPidArr = &#123;&#125;;</span><br><span class="line">for(var i = 0; i&lt; data.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">    idPidArr[data[i].id] = data[i].pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(idPidArr);</span><br></pre></td></tr></table></figure>

<h4 id="控制滚动条滚动到某个位置"><a href="#控制滚动条滚动到某个位置" class="headerlink" title="控制滚动条滚动到某个位置"></a>控制滚动条滚动到某个位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;scrollBox&#x27;).scrollTop = $(el).offset().top;</span><br><span class="line"></span><br><span class="line">scrollBox：滚动的盒子的id</span><br><span class="line">$(el).offset().top: 元素的位置</span><br></pre></td></tr></table></figure>

<h4 id="js字符串连接换行符没有效果解决办法"><a href="#js字符串连接换行符没有效果解决办法" class="headerlink" title="js字符串连接换行符没有效果解决办法"></a>js字符串连接换行符没有效果解决办法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#x27;aaaaa&#x27;, b = &#x27;bbbbb&#x27;, c = &#x27;ccccc&#x27;;</span><br><span class="line">var arr = [a,b,c];</span><br><span class="line">var str = arr.join(&quot;\n&quot;);</span><br><span class="line">console.log(str);  </span><br></pre></td></tr></table></figure>

<h4 id="js-去掉字符串前后空格"><a href="#js-去掉字符串前后空格" class="headerlink" title="js 去掉字符串前后空格"></a>js 去掉字符串前后空格</h4><h6 id="js去掉字符串前后空格的五种方法"><a href="#js去掉字符串前后空格的五种方法" class="headerlink" title="js去掉字符串前后空格的五种方法"></a><a href="https://www.cnblogs.com/yingjie13/p/3534615.html">js去掉字符串前后空格的五种方法</a></h6><h6 id="js-去掉字符串前后空格-1"><a href="#js-去掉字符串前后空格-1" class="headerlink" title="js 去掉字符串前后空格"></a><a href="https://www.cnblogs.com/mingforyou/p/3930638.html">js 去掉字符串前后空格</a></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用jquery</span><br><span class="line"></span><br><span class="line">$.trim(str) </span><br><span class="line"></span><br><span class="line">jquery内部实现为：</span><br><span class="line"></span><br><span class="line">function trim(str)&#123;   </span><br><span class="line">    return str.replace(/^(\s|\u00A0)+/,&#x27;&#x27;).replace(/(\s|\u00A0)+$/,&#x27;&#x27;);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">　　 function trim(str)&#123; //删除左右两端的空格</span><br><span class="line">　　   return str.replace(/(^s*)|(s*$)/g, &quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function ltrim(str)&#123; //删除左边的空格</span><br><span class="line">　　   return str.replace(/(^s*)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">　　 function rtrim(str)&#123; //删除右边的空格</span><br><span class="line">　　   return str.replace(/(s*$)/g,&quot;&quot;);</span><br><span class="line">　　 &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JS 去字符串空格 总结</span><br><span class="line"></span><br><span class="line">str为要去除空格的字符串:</span><br><span class="line">去除所有空格: </span><br><span class="line">str = str.replace(/\s+/g,&quot;&quot;); </span><br><span class="line">去除两头空格: </span><br><span class="line">str = str.replace(/^\s+|\s+$/g,&quot;&quot;);</span><br><span class="line">去除左空格：</span><br><span class="line">str=str.replace( /^\s*/, &#x27;&#x27;);</span><br><span class="line">去除右空格：</span><br><span class="line">str=str.replace(/(\s*$)/g, &quot;&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="如果动态设置json对象的key"><a href="#如果动态设置json对象的key" class="headerlink" title="如果动态设置json对象的key"></a><a href="https://www.cnblogs.com/strangerqt/p/4465114.html">如果动态设置json对象的key</a></h4><p>项目中要求动态设置json的key属性，如果按照一般的json设置方法是不行的。假如你把一个key设置为一个变量的话，那么最后js解析出来的就是key为这个变量名而不是这个变量的值。</p>
<p>解决：通过使用</p>
<p>var o = {};</p>
<p>o[变量名] = 变量值</p>
<p>再把这个变量赋值给json即可</p>
<h4 id="用js实现模糊查询的几种方法"><a href="#用js实现模糊查询的几种方法" class="headerlink" title="用js实现模糊查询的几种方法"></a><a href="https://www.jianshu.com/p/4cd4f74a0b20">用js实现模糊查询的几种方法</a></h4><h5 id="1-indexof-方法"><a href="#1-indexof-方法" class="headerlink" title="1. indexof 方法"></a>1. indexof 方法</h5><blockquote>
<p>语法：stringObject.indexOf(searchvalue, fromindex)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定需检索的字符串值。 fromindex<br>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>
</blockquote>
<blockquote>
<p>说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用indexof方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].indexOf(keyWord) &gt;= 0) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-split-方法"><a href="#2-split-方法" class="headerlink" title="2. split 方法"></a>2. split 方法</h5><blockquote>
<p>语法：stringObject.split(separator, howmany)</p>
</blockquote>
<blockquote>
<p>参数：separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
</blockquote>
<blockquote>
<p>说明：该方法通过在 separator 指定的边界处将字符串 stringObject 分割成子串并返回子串数组。返回的数组中的字串不包括 separator 自身。如果 stringObject 中不存在 separator，将返回一个只包含stringObject的数组。故可以根据返回数组的长度来判断是否存在子字符串 separator 。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用spilt方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].split(keyWord).length &gt; 1) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-match-方法"><a href="#3-match-方法" class="headerlink" title="3. match 方法"></a>3. match 方法</h5><blockquote>
<p>语法：stringObject.match(searchvalue) 或 stringObject.match(regexp)</p>
</blockquote>
<blockquote>
<p>参数：searchvalue 必需。规定要检索的字符串值。regexp 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>
</blockquote>
<blockquote>
<p>说明：该方法将在字符串 stringObject 内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本，将返回 null 。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用match方法实现模糊查询</span><br><span class="line"> * @param  &#123;Array&#125;  list     进行查询的数组</span><br><span class="line"> * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line"> * @return &#123;Array&#125;           查询的结果</span><br><span class="line"> */</span><br><span class="line">function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">  var arr = [];</span><br><span class="line">  for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">    if (list[i].match(keyWord) != null) &#123;</span><br><span class="line">      arr.push(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-test方法（正则匹配）"><a href="#4-test方法（正则匹配）" class="headerlink" title="4. test方法（正则匹配）"></a>4. test方法（正则匹配）</h5><blockquote>
<p>语法：RegExpObject.test(string)</p>
</blockquote>
<blockquote>
<p>参数：string 必需。要检测的字符串。</p>
</blockquote>
<blockquote>
<p>说明：该方法用于检测一个字符串是否匹配某个模式。如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 使用test方法实现模糊查询</span><br><span class="line">   * @param  &#123;Array&#125;  list     原数组</span><br><span class="line">   * @param  &#123;String&#125; keyWord  查询的关键词</span><br><span class="line">   * @return &#123;Array&#125;           查询的结果</span><br><span class="line">   */</span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var reg =  new RegExp(keyWord);</span><br><span class="line">    var arr = [];</span><br><span class="line">    for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">      if (reg.test(list[i])) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><blockquote>
<p>测试条件：一个长度为100的数组，每个方法测试50次，取平均值。<br>indexof 方法耗费时间： 0.048ms<br>split 方法耗费时间： 0.037ms<br>match 方法耗费时间： 0.178ms<br>test 方法耗费时间： 0.039ms</p>
</blockquote>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li><p>从上面测试结果可以看出在几百几千甚至几万条数据量的情况下，前端去处理都是没问题的，相比发送一个 ajax 请求去后台来说，前端还是具有很大优势的，能节省不少时间。</p>
</li>
<li><p>相比其他方法，match 方法性能最差，消耗的时间差不多是其他方法的3-4倍，虽说这一点点时间相比发送ajax来说，也算提高了很多既然我们在一开始就是为了提高用户体验，那么我们也应该追求极致啦，所以 match 选手落败。</p>
</li>
<li><p>除了 match 方法，其他三个方法在性能上差不多。不过在这里有一点需要提出的就是， test 方法因为使用到了正则表达式，所以能够实现的功能会比较强大，写出来的代码也更加简洁。打个比方，在不区分大小写的模糊搜索条件下， test 方法只需在正则表达式中添加修饰符 i 即可实现不区分大小写，而 indexof 方法和 split 方法则要通过多次的方法调用和逻辑运算符才能实现效果。</p>
</li>
</ol>
<h4 id="屏蔽Backspace键返回上个页面"><a href="#屏蔽Backspace键返回上个页面" class="headerlink" title="屏蔽Backspace键返回上个页面"></a>屏蔽Backspace键返回上个页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//屏蔽Backspace键返回上个页面</span><br><span class="line">function banBackSpace(e) &#123;</span><br><span class="line">    var ev = e || window.event;//获取event对象  </span><br><span class="line">    var flag=(ev.keyCode == 8) ? true:false;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.onload=function()&#123;</span><br><span class="line">     //禁止后退键 作用于Firefox、Opera</span><br><span class="line">     document.onkeypress=banBackSpace;</span><br><span class="line">     //禁止后退键  作用于IE、Chrome</span><br><span class="line">     document.onkeydown=banBackSpace;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止浏览器默认行为触发的通用方法"><a href="#阻止浏览器默认行为触发的通用方法" class="headerlink" title="阻止浏览器默认行为触发的通用方法"></a>阻止浏览器默认行为触发的通用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //阻止浏览器默认行为触发的通用方法 </span><br><span class="line"> function stopDefault(e) &#123;</span><br><span class="line">    if (e &amp;&amp; e.preventDefault) &#123;</span><br><span class="line">        e.preventDefault();//防止浏览器默认行为(W3C) </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       window.event.returnValue = false;//IE中阻止浏览器行为 </span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="H5本地缓存"><a href="#H5本地缓存" class="headerlink" title="H5本地缓存"></a>H5本地缓存</h4><h4 id="jquery实时监听input输入框值的变化事件"><a href="#jquery实时监听input输入框值的变化事件" class="headerlink" title="jquery实时监听input输入框值的变化事件"></a>jquery实时监听input输入框值的变化事件</h4><p><a href="https://blog.csdn.net/qq_41756580/article/details/81287095">参考</a></p>
<p>1.只需要同时绑定 oninput 和 onpropertychange 两个事件，获取input元素,并实时监听用户输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input&#x27;).bind(&#x27;input propertychange&#x27;, function()&#123;</span><br><span class="line">	if($(this).val())&#123;</span><br><span class="line">		console.log(&quot;hhhhhhhh&quot;);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		console.log(&quot;xxxxxxxx&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但这并不完美，因为用的bind，所以当遇到追加的新input标签时，则不能监听了。</p>
<p>2.为了解决上面的问题，可以使用live替代</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input&#x27;).live(&#x27;input propertychange&#x27;, function()</span><br><span class="line">&#123;</span><br><span class="line">  //获取input 元素,并实时监听用户输入</span><br><span class="line">  //逻辑</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后期生成的元素，用:</span><br><span class="line">$(本来存在的父元素).on(&quot;input propertychange&quot;,&quot;监听的元素&quot;, function() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="表单input中disabled提交后得不到值的解决办法"><a href="#表单input中disabled提交后得不到值的解决办法" class="headerlink" title="表单input中disabled提交后得不到值的解决办法"></a>表单input中disabled提交后得不到值的解决办法</h4><p><a href="https://www.cnblogs.com/yuanwenha/p/7390326.html">参考</a></p>
<p>使用readonly</p>
<p>模拟下拉框获取不了角度，可以让它附近的文字获取焦点。   【文字是可以获取焦点的，不是文字，一般的元素获取不了焦点】</p>
<h4 id="javascript禁止页面滚动（但是ie8及以下不支持）"><a href="#javascript禁止页面滚动（但是ie8及以下不支持）" class="headerlink" title="javascript禁止页面滚动（但是ie8及以下不支持）"></a>javascript禁止页面滚动（但是ie8及以下不支持）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var scrollFunc=function(e)&#123;</span><br><span class="line">	e=e||window.event;</span><br><span class="line">    if (e&amp;&amp;e.preventDefault)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.returnvalue=false;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(window.addEventListener)&#123;</span><br><span class="line">    window.addEventListener(&#x27;DOMMouseScroll&#x27;,scrollFunc,false);</span><br><span class="line">    window.addEventListener(&#x27;mousewheel&#x27;,scrollFunc,false);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    window.onmousewheel=scrollFunc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js数组与字符串的相互转换"><a href="#js数组与字符串的相互转换" class="headerlink" title="js数组与字符串的相互转换"></a>js数组与字符串的相互转换</h4><h6 id="一、数组转字符串"><a href="#一、数组转字符串" class="headerlink" title="一、数组转字符串"></a>一、数组转字符串</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要将数组元素用某个字符连接成字符串，示例代码如下：</span><br><span class="line">var a, b,c; </span><br><span class="line">a = new Array(a,b,c,d,e); </span><br><span class="line">b = a.join(&#x27;-&#x27;); //a-b-c-d-e  使用-拼接数组元素</span><br><span class="line">c = a.join(&#x27;&#x27;); //abcde</span><br></pre></td></tr></table></figure>

<h6 id="二、字符串转数组"><a href="#二、字符串转数组" class="headerlink" title="二、字符串转数组"></a>二、字符串转数组</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：</span><br><span class="line">var str = &#x27;ab+c+de&#x27;;</span><br><span class="line">var a = str.split(&#x27;+&#x27;); // [ab, c, de]</span><br><span class="line">var b = str.split(&#x27;&#x27;); //[a, b, +, c, +, d, e]</span><br></pre></td></tr></table></figure>

<h4 id="防止事件冒泡"><a href="#防止事件冒泡" class="headerlink" title="防止事件冒泡"></a>防止事件冒泡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.event? window.event.cancelBubble = true : e.stopPropagation();</span><br></pre></td></tr></table></figure>

<h4 id="返回上一页"><a href="#返回上一页" class="headerlink" title="返回上一页"></a>返回上一页</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript:window.history.go(-1);</span><br></pre></td></tr></table></figure>

<h4 id="刷新页面"><a href="#刷新页面" class="headerlink" title="刷新页面"></a>刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.reload(); </span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/124389.htm">参考教程</a></p>
<h4 id="设置复选框选中"><a href="#设置复选框选中" class="headerlink" title="设置复选框选中"></a>设置复选框选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, true);</span><br><span class="line">或</span><br><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="判断复选框是否被选中"><a href="#判断复选框是否被选中" class="headerlink" title="判断复选框是否被选中"></a>判断复选框是否被选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isChecked = $(&quot;input&quot;).is(&quot;:checked&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="设置复选框不选中"><a href="#设置复选框不选中" class="headerlink" title="设置复选框不选中"></a>设置复选框不选中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).attr(&quot;checked&quot;, false); </span><br><span class="line">或</span><br><span class="line">$(&quot;input&quot;).prop(&quot;checked&quot;, false); </span><br></pre></td></tr></table></figure>

<h4 id="全选-全不选复选框"><a href="#全选-全不选复选框" class="headerlink" title="全选/全不选复选框"></a>全选/全不选复选框</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#selectAll&#x27;).bind(&#x27;change&#x27;,function(event) &#123;</span><br><span class="line">    var isCheck=$(&quot;#selectAll&quot;).is(&#x27;:checked&#x27;);  //获得全选复选框是否选中</span><br><span class="line">    $(&quot;input[name=&#x27;platform&#x27;]&quot;).each(function() &#123;  </span><br><span class="line">        this.checked = isCheck;       //循环赋值给每个复选框是否选中</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var selectArr = [], checkbox;  </span><br><span class="line">    checkbox = $(&#x27;input[name =&quot;platform&quot;]&#x27;);</span><br><span class="line"></span><br><span class="line">    for(var i = 0; i &lt; checkbox.length;i++)&#123;</span><br><span class="line">        if(checkbox[i].checked == true)&#123;</span><br><span class="line">            selectArr.push(checkbox[i].value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(selectArr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="全选复选框和普通复选框联合"><a href="#全选复选框和普通复选框联合" class="headerlink" title="全选复选框和普通复选框联合"></a>全选复选框和普通复选框联合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var $all_check = $(&#x27;#all_check&#x27;);</span><br><span class="line">var $check = $(&#x27;.check&#x27;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全选按钮点击事件</span><br><span class="line"> */</span><br><span class="line">$all_check.bind(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    if ($(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">        $check.prop(&#x27;checked&#x27;, true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $check.prop(&#x27;checked&#x27;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 普通按钮点击事件</span><br><span class="line"> */</span><br><span class="line">$check.bind(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    if ($(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">        var isAllCheck = true;</span><br><span class="line">        $check.each(function () &#123;</span><br><span class="line">            if (!$(this).is(&#x27;:checked&#x27;)) &#123;</span><br><span class="line">                isAllCheck = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if(isAllCheck)&#123;</span><br><span class="line">            $all_check.prop(&#x27;checked&#x27;, true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $all_check.prop(&#x27;checked&#x27;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="获取单选框选中的值"><a href="#获取单选框选中的值" class="headerlink" title="获取单选框选中的值"></a>获取单选框选中的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[name=&quot;plan&quot;]:checked&#x27;).val();</span><br></pre></td></tr></table></figure>

<h4 id="监听单选按钮事件改变"><a href="#监听单选按钮事件改变" class="headerlink" title="监听单选按钮事件改变"></a>监听单选按钮事件改变</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[type=radio][name=type]&#x27;).change(function() &#123;</span><br><span class="line">    if (this.value == 3) &#123;</span><br><span class="line">        $(&quot;.license_tr&quot;).hide();</span><br><span class="line">        $(&quot;.license_code_tr&quot;).hide();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        $(&quot;.license_tr&quot;).show();</span><br><span class="line">        $(&quot;.license_code_tr&quot;).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值"><a href="#JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值" class="headerlink" title="JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值"></a>JS中对象赋值只传值不传对象（地址）的方法，改变新值不影响旧值</h4><p><a href="https://blog.csdn.net/tg928600774/article/details/83651608">参考教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var newModel = $.extend(true,&#123;&#125;,oldModel)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var newModel = $.extend(true,[],oldModel)</span><br></pre></td></tr></table></figure>

<h4 id="只赋值不改变原来对象"><a href="#只赋值不改变原来对象" class="headerlink" title="只赋值不改变原来对象"></a>只赋值不改变原来对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data=&#123;a:1,b:2,c:3,d:4&#125;;</span><br><span class="line">var newData= $.extend(true,&#123;&#125;,data);;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为移动端"><a href="#判断是否为移动端" class="headerlink" title="判断是否为移动端"></a>判断是否为移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isMobile = /Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var o=navigator.userAgent;</span><br><span class="line">    if(o.indexOf(&quot;iPhone&quot;)!=-1 || o.indexOf(&quot;iPad&quot;)!=-1 || o.indexOf(&quot;iPod&quot;)!=-1 || o.indexOf(&quot;Android&quot;)!=-1)&#123;</span><br><span class="line">        self.location=&#x27;/mobile/&#x27;;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>



<h4 id="判断输入框是否获取焦点"><a href="#判断输入框是否获取焦点" class="headerlink" title="判断输入框是否获取焦点"></a>判断输入框是否获取焦点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var isFocus=$(&quot;#tRow&quot;).is(&quot;:focus&quot;);  </span><br></pre></td></tr></table></figure>

<h4 id="单页面应用判断页面是不是刷新（谷歌浏览器）"><a href="#单页面应用判断页面是不是刷新（谷歌浏览器）" class="headerlink" title="单页面应用判断页面是不是刷新（谷歌浏览器）"></a>单页面应用判断页面是不是刷新（谷歌浏览器）</h4><p>在刷新页面的时候使用window.onbeforeunload向sessionstorage或localstorage存入一个标记譬如reloadFlag作为判断是否是刷新的依据，页面刷新后从sessionstorage或localstorage中获取存储的标记，然后执行相应的回调向后端发起请求，完成之后将sessionstorage或localstorage中获取存储的标记删除即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// reLoadFlag.js</span><br><span class="line">;(function()&#123;</span><br><span class="line">   	window.onbeforeunload = function()&#123;</span><br><span class="line">   		sessionStorage.setItem(&#x27;reLoadFlag&#x27;, &#x27;true&#x27;);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 需要判断的地方进行判断操作</span><br><span class="line">if (sessionStorage.getItem(&#x27;reLoadFlag&#x27;) === &#x27;true&#x27;) &#123;</span><br><span class="line">   // 执行其他的逻辑</span><br><span class="line">   // ...............</span><br><span class="line">   sessionStorage.removeItem(&#x27;reLoadFlag&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次向后端发起请求得到数据后存储到sessionstorage或localstorage之中，之后的逻辑是每次需要数据时从sessionstorage或localstorage中去取，取不到的时候（比如关闭页面重新打开或者手动清除缓存）再重新向后端发起请求获取数据。但是这样会存在一个问题，即希望通过刷新页面向后端重新发起请求的时候因为sessionstorage或localstorage的数据仍然存在，所以不会向后端发起请求。</p>
</blockquote>
<h4 id="filter函数做数据匹配"><a href="#filter函数做数据匹配" class="headerlink" title="filter函数做数据匹配"></a>filter函数做数据匹配</h4><p>只有一个筛选条件的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var res = datas.filter(function (data) &#123;</span><br><span class="line">     return data[type] === val;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多个筛选条件的时候（注意：要加上  &gt; -1，不然返回有问题）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var searchList = [];</span><br><span class="line">searchList = list.filter(function(item) &#123;</span><br><span class="line">  var flag = (item.name.indexOf(txt) &gt; -1) || (item.key.indexOf(txt)  &gt;-1) || (item.account_id.indexOf(txt)  &gt;-1) || (item.user_name.indexOf(txt)  &gt;-1) || (item.user_id.indexOf(txt)  &gt;-1);					</span><br><span class="line">   return flag;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="处理textarea换行数据"><a href="#处理textarea换行数据" class="headerlink" title="处理textarea换行数据"></a>处理textarea换行数据</h4><p>先使用换行符“\n”截取，然后用”~”获取</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Javascript%E6%96%B9%E6%B3%95/br.png" alt="处理textarea换行数据"></p>
<h4 id="火狐浏览器，报ev-is-undefined"><a href="#火狐浏览器，报ev-is-undefined" class="headerlink" title="火狐浏览器，报ev is undefined"></a>火狐浏览器，报ev is undefined</h4><ul>
<li><p>获取当前操作对象时，要记得传参</p>
</li>
<li><p>封装函数加上事件参数e</p>
</li>
<li><p>调用时加上事件参数e</p>
</li>
</ul>
<h4 id="搜索框——实时匹配"><a href="#搜索框——实时匹配" class="headerlink" title="搜索框——实时匹配"></a>搜索框——实时匹配</h4><p>（输入完文字就直接匹配，包括中文输入）实现中文输入法下，仅在选词后触发input事件。<a href="https://www.jianshu.com/p/e9c837eba083">参考教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述</span><br><span class="line">在使用oninput监控输入框内容变化时，我们期望仅在value值变化时，才触发oninput事件，而在中文输入下，未选词时的按键也会触发oninput事件。</span><br><span class="line">input事件触发效果</span><br><span class="line"></span><br><span class="line">关键</span><br><span class="line">compositionstart事件</span><br><span class="line">compositionend事件</span><br><span class="line"></span><br><span class="line">方法</span><br><span class="line">使用一个变量表示拼写状态，在oninput事件中判断是否在拼写状态，当拼写状态结束，继续执行下一步操作。</span><br><span class="line">var typing = false;</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;compositionstart&#x27;,function()&#123;</span><br><span class="line">    typing = true;</span><br><span class="line">&#125;)</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;compositionend&#x27;,function()&#123;</span><br><span class="line">    typing = false;</span><br><span class="line">&#125;)</span><br><span class="line">//oninput在oncompositionend之前执行，需加定时器</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;input&#x27;,function()&#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        if(!typing) &#123;</span><br><span class="line">            //To do something...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,0);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//或用keyup代替input</span><br><span class="line">$(&#x27;#ipt&#x27;).on(&#x27;input&#x27;,function()&#123;</span><br><span class="line">    if(!typing) &#123;</span><br><span class="line">        //To do something...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="获取横向滚动条位置"><a href="#获取横向滚动条位置" class="headerlink" title="获取横向滚动条位置"></a>获取横向滚动条位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var left = $(&quot;.layui-table-body&quot;).scrollLeft();</span><br></pre></td></tr></table></figure>

<h4 id="设置横向滚动条位置"><a href="#设置横向滚动条位置" class="headerlink" title="设置横向滚动条位置"></a>设置横向滚动条位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.layui-table-body&quot;).scrollLeft(left);</span><br></pre></td></tr></table></figure>

<h4 id="利用js打开新页面（在另外新建窗口中打开窗口）"><a href="#利用js打开新页面（在另外新建窗口中打开窗口）" class="headerlink" title="利用js打开新页面（在另外新建窗口中打开窗口）"></a>利用js打开新页面（在另外新建窗口中打开窗口）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.open(&quot;http://doc.trackingio.com/qu-dao-pei-zhi-shuo-ming/guang-dian-tong.html&quot;,&quot;_blank&quot;);  </span><br></pre></td></tr></table></figure>

<h4 id="jQuery–复制克隆（复制节点）"><a href="#jQuery–复制克隆（复制节点）" class="headerlink" title="jQuery–复制克隆（复制节点）"></a>jQuery–复制克隆（复制节点）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //文档准备就绪函数</span><br><span class="line">$(function () &#123;</span><br><span class="line">    //获取li标签及点击事件</span><br><span class="line">    $(&quot;ul li&quot;).click(function () &#123;</span><br><span class="line">        //对这个li标签使用clone克隆（clone(true)添加true使复制过的还能继续复制）</span><br><span class="line">        //，然后添加到ul标签里面</span><br><span class="line">        $(this).clone(true).appendTo(&quot;ul&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="js获取日期（例如：昨天、今天和明天）"><a href="#js获取日期（例如：昨天、今天和明天）" class="headerlink" title="js获取日期（例如：昨天、今天和明天）"></a>js获取日期（例如：昨天、今天和明天）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetDateStr(AddDayCount, nowDay) &#123; </span><br><span class="line">var dd = new Date(nowDay); </span><br><span class="line"></span><br><span class="line">console.log(&quot;dd&quot;);</span><br><span class="line">console.log(dd);</span><br><span class="line">dd.setDate(dd.getDate()+AddDayCount);//获取AddDayCount天后的日期 </span><br><span class="line">var y = dd.getFullYear(); </span><br><span class="line">var m = dd.getMonth()+1;//获取当前月份的日期 </span><br><span class="line">var d = dd.getDate(); </span><br><span class="line"></span><br><span class="line">if(m &lt; 10) &#123;</span><br><span class="line">	m = &quot;0&quot; + m;</span><br><span class="line">&#125;</span><br><span class="line">				</span><br><span class="line">if(d &lt; 10) &#123;</span><br><span class="line">	d = &quot;0&quot; + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return y+&quot;-&quot;+m+&quot;-&quot;+d; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetDateStr(-1, 2019-04-02);</span><br><span class="line"></span><br><span class="line">new Date(curDate);</span><br><span class="line">var preDate = new Date(curDate.getTime() - 24*60*60*1000); //前一天</span><br></pre></td></tr></table></figure>

<h4 id="给对象添加变量属性（空数组）"><a href="#给对象添加变量属性（空数组）" class="headerlink" title="给对象添加变量属性（空数组）"></a>给对象添加变量属性（空数组）</h4><p>使用[]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selectChannel[selectList[i]] = [];</span><br><span class="line">使用selectChannel.push(&#123;selectList[i]]:[]&#125;)是错的。</span><br></pre></td></tr></table></figure>

<h4 id="改变checkbox选中状态"><a href="#改变checkbox选中状态" class="headerlink" title="改变checkbox选中状态"></a>改变checkbox选中状态</h4><p><a href="https://blog.csdn.net/brucecheng22/article/details/50408199">参考教程</a></p>
<p>使用prop方法    <a href="https://www.jianshu.com/p/d544167bd715">动态改变checkbox的选中状态</a></p>
<blockquote>
<p>使用1.6.1 以上版本（测试使用1.10.1版本可以）</p>
</blockquote>
<h4 id="按回车触发的事件"><a href="#按回车触发的事件" class="headerlink" title="按回车触发的事件"></a>按回车触发的事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.onkeydown = function(e)&#123; </span><br><span class="line">    var ev = document.all ? window.event : e;</span><br><span class="line">    if(ev.keyCode==13) &#123;</span><br><span class="line">        $(&quot;.login-btn&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="捕获错误信息"><a href="#捕获错误信息" class="headerlink" title="捕获错误信息"></a>捕获错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取页面错误信息&quot; onclick=&quot;adlert(&#x27;函数函数&#x27;)&quot; /&gt;</span><br><span class="line">&lt;/body&gt; </span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line"> var errorTxt = &quot;&quot;;</span><br><span class="line"> window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h4 id="返回文档的根节点（html）"><a href="#返回文档的根节点（html）" class="headerlink" title="返回文档的根节点（html）"></a>返回文档的根节点（html）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.documentElement</span><br></pre></td></tr></table></figure>

<h4 id="返回DOM对象中的body节点"><a href="#返回DOM对象中的body节点" class="headerlink" title="返回DOM对象中的body节点"></a>返回DOM对象中的body节点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在标准模式下，document.body.scrollTop恒为0；</p>
<p>但在怪异模式下，document.documentElement.scrollTop；</p>
<p>但是document.documentElement.scrollTop和document.body.scrollTop在标准模式或者是奇怪模式下都只有一个会返回有效的值，所以获取scrollTop时两个都加上</p>
</blockquote>
<h4 id="获取滚动条当前位置高度"><a href="#获取滚动条当前位置高度" class="headerlink" title="获取滚动条当前位置高度"></a>获取滚动条当前位置高度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getScrollTop()&#123;</span><br><span class="line">	var scrollTop = 0;</span><br><span class="line">	if(document.documentElement &amp;&amp; document.documentElement.scrollTop)&#123;</span><br><span class="line"></span><br><span class="line">		scrollTop = document.documentElement.scrollTop;</span><br><span class="line"></span><br><span class="line">	&#125;else if(document.body)&#123;</span><br><span class="line"></span><br><span class="line">		scrollTop = document.body.scrollTop;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	return scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取当前页面可视高度-注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度"><a href="#获取当前页面可视高度-注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度" class="headerlink" title="获取当前页面可视高度(注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度)"></a>获取当前页面可视高度(注意，此处得到的是当前页面的可视高度，而不是浏览器的可视高度)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getClientHeight()&#123;</span><br><span class="line"></span><br><span class="line">	var clientHeight = 0;</span><br><span class="line">	if(document.body.clientHeight &amp;&amp; document.documentElement.clientHeight)&#123;</span><br><span class="line"></span><br><span class="line">		clientHeight = Math.min(document.body.clientHeight,document.documentElement.clientHeight);</span><br><span class="line"></span><br><span class="line">	&#125;else&#123;</span><br><span class="line"></span><br><span class="line">		clientHeight = Math.max(document.body.clientHeight,document.documentElement.clientHeight);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取文档完整高度"><a href="#获取文档完整高度" class="headerlink" title="获取文档完整高度"></a>获取文档完整高度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getScrollHeight()&#123;</span><br><span class="line"></span><br><span class="line">	return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否到达页面底部"><a href="#判断是否到达页面底部" class="headerlink" title="判断是否到达页面底部"></a>判断是否到达页面底部</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当滚动条高度加上页面可视高度等于整个文档完整高度，则页面已达到底部</span><br><span class="line">getScrollTop() + getClientHeight() == getScrollHeight() </span><br></pre></td></tr></table></figure>

<h4 id="清空尚未执行完的动画队列"><a href="#清空尚未执行完的动画队列" class="headerlink" title="清空尚未执行完的动画队列"></a>清空尚未执行完的动画队列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.mobie_show&quot;).stop().animate(&#123;&quot;top&quot;:&quot;70px&quot;,&quot;opacity&quot;:&quot;1&quot;&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把当前元素接下来尚未执行完的动画队列清空    （例如：当用户鼠标经过某元素的时候，执行某个动画，用户不断地让鼠标经过元素，但上一个动画还没有执行完毕。  加上stop是为了避免用户不停地操作）</p>
</blockquote>
<h4 id="swobject的使用"><a href="#swobject的使用" class="headerlink" title="swobject的使用"></a>swobject的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var params = &#123;wmode:&quot;transparent&quot;&#125;;</span><br><span class="line">swfobject.embedSWF(&quot;http://images.vxinyou.com/gd/images1510/hh.swf&quot;, &quot;hh&quot;, &quot;1920&quot;, &quot;450&quot;, &quot;9.0.0&quot;,&quot;http://images.vxinyou.com/jsCommon/expressinstall.swf&quot;, &#123;&#125;, params);  </span><br></pre></td></tr></table></figure>

<h4 id="JS禁止查看网页源代码的实现方法"><a href="#JS禁止查看网页源代码的实现方法" class="headerlink" title="JS禁止查看网页源代码的实现方法"></a>JS禁止查看网页源代码的实现方法</h4><p>查看源代码的方法：</p>
<p>1、直接按F12</p>
<p>2、Ctrl+Shift+I查看</p>
<p>3、鼠标点击右键查看</p>
<blockquote>
<p>把以上三种状态都屏蔽掉就可以了，document有onkeydown(键盘按键事件)，该事件里面找到对应的keycode并处理就可以，document也有oncontextmenu鼠标右键事件，屏蔽即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    document.onkeydown = function()&#123;</span><br><span class="line">        var e = window.event || arguments[0];</span><br><span class="line">        console.log(e);</span><br><span class="line">        if(e.keyCode == 123)&#123;</span><br><span class="line">            // alert(&quot;小样你想干嘛？&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else if((e.ctrlKey)&amp;&amp;(e.shiftKey)&amp;&amp;(e.keyCode == 73))&#123;</span><br><span class="line">            // alert(&quot;还是不给你看。。&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    document.oncontextmenu = function()&#123;</span><br><span class="line">        // alert(&quot;小样不给你看&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网站个性化设置-换肤"><a href="#网站个性化设置-换肤" class="headerlink" title="网站个性化设置-换肤"></a>网站个性化设置-换肤</h4><p>结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body class=&quot;green&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;theme&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default&quot;&gt;默认&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-green”&gt;绿色&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-blue&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-orange&quot;&gt;橙色&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main-nav&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#”&gt;首页&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;公司概况&lt;span&gt;Company&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;新闻中心&lt;span&gt;News&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p&gt;网站个性化设置-换肤!&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#content p &#123;</span><br><span class="line">	padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">/*默认主题*/</span><br><span class="line">body.default &#123;</span><br><span class="line">	background:url(../images/bg1.jpg) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">.default .main-nav &#123;</span><br><span class="line">	background: #c5000;</span><br><span class="line">&#125;</span><br><span class="line">.default #content &#123;</span><br><span class="line">	background: #c5000;</span><br><span class="line">&#125;</span><br><span class="line">/*绿色主题*/</span><br><span class="line">body.green &#123;</span><br><span class="line">	background:ur1(../images/bg2-jpg) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line">.green .main-nav &#123;</span><br><span class="line">	background: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">.green #content &#123;</span><br><span class="line">	background: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">/*蓝色主题*/</span><br><span class="line">body.blue &#123;</span><br><span class="line">	background:url(../images/bg3.jpg) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<ul>
<li><p>方法一：点击按钮改变body的样式</p>
<p>用replace替换，拿到后面的值（default、green）用replace把（btn btn-）替换为空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line">	// 单击不同的按纽,加载不同的样式</span><br><span class="line">	$(&quot;.theme button&quot;).click(function()&#123;</span><br><span class="line">	// replace()用于替换字符串</span><br><span class="line">	// attr()获取属性</span><br><span class="line">	var theme = $(this).attr(&#x27;class&#x27;).replace(&#x27;btn btn-&#x27;,&#x27;&#x27;);</span><br><span class="line">	alert(theme);</span><br><span class="line">	$(&quot;body&quot;).attr(&#x27;class&#x27;, theme);  // body添加属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>弊端（如果button 后面还有别的类名，就不好使了）</p>
</blockquote>
</li>
<li><p>方法二：自定义属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-default&quot; btn-name=&quot;default&quot;&gt;默认&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-green” btn-name=&quot;green&quot;&gt;绿色&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-blue&quot; btn-name=&quot;blue&quot;&gt;蓝色&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-orange&quot; btn-name=&quot;orange&quot;&gt;橙色&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line">	// 单击不同的按纽,加载不同的样式</span><br><span class="line">	$(&quot;.theme button&quot;).click(function()&#123;</span><br><span class="line">	// replace()用于替换字符串</span><br><span class="line">	// attr()获取属性</span><br><span class="line">	var theme = $(this).attr(&#x27;btn-name&#x27;);</span><br><span class="line">	alert(theme);</span><br><span class="line">	$(&quot;body&quot;).attr(&#x27;class&#x27;, theme);  // body添加属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="获取form表单全部value值"><a href="#获取form表单全部value值" class="headerlink" title="获取form表单全部value值"></a>获取form表单全部value值</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(&quot;#form&quot;).serializeArray();</span><br></pre></td></tr></table></figure>

<h4 id="鼠标在图片上，滚动滚轮，可放大缩小图片"><a href="#鼠标在图片上，滚动滚轮，可放大缩小图片" class="headerlink" title="鼠标在图片上，滚动滚轮，可放大缩小图片"></a>鼠标在图片上，滚动滚轮，可放大缩小图片</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;./blog-head-img.jpg&quot; onmousewheel=&quot;return bbimg(this)&quot; </span><br><span class="line">onload=&quot;if(this.width &gt; screen.width - 500) this.style.width = screen.width - 500;&quot;&gt;</span><br><span class="line"></span><br><span class="line">function bbimg(obj)&#123;</span><br><span class="line">    var zoom = parseInt(obj.style.zoom, 10) || 100;</span><br><span class="line">    zoom += event.wheelDelta/12;</span><br><span class="line">    if (zoom&gt;0) &#123;</span><br><span class="line">        obj.style.zoom = zoom + &#x27;%&#x27;;</span><br><span class="line">    &#125; </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="delegate-方法"><a href="#delegate-方法" class="headerlink" title="delegate() 方法"></a>delegate() 方法</h4><blockquote>
<p><a href="https://www.w3school.com.cn/jquery/event_delegate.asp">delegate() 方法</a>为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。</p>
<p>使用 delegate() 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;div&quot;).delegate(&quot;button&quot;,&quot;click&quot;,function()&#123;</span><br><span class="line">  $(&quot;p&quot;).slideToggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(selector).delegate(childSelector,event,data,function)</span><br></pre></td></tr></table></figure>

<h4 id="记录及清空搜索历史记录"><a href="#记录及清空搜索历史记录" class="headerlink" title="记录及清空搜索历史记录"></a>记录及清空搜索历史记录</h4><h4 id="回到页面顶部"><a href="#回到页面顶部" class="headerlink" title="回到页面顶部"></a>回到页面顶部</h4><p><a href="https://www.jb51.net/article/91824.htm">基于JS实现回到页面顶部的五种写法(从实现到增强)</a></p>
<h4 id="移动端设备判断"><a href="#移动端设备判断" class="headerlink" title="移动端设备判断"></a>移动端设备判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua=navigator.userAgent, 			     wxv=parseInt(ua.substring(ua.toLowerCase().indexOf(&quot;micromessenger/&quot;)+15));</span><br><span class="line">var uClient = &quot;mq&quot;;</span><br><span class="line">if(wxv &gt;= 5)&#123;</span><br><span class="line">    uClient = &quot;wx&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    isQzone = ua.match(&quot;Qzone&quot;);</span><br><span class="line">    if(isQzone)&#123;</span><br><span class="line">        uClient = &#x27;qzone&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var iPad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">    iPhone = !iPad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">    iPod = ua.match(/(iPod).*OS\s([\d_]+)/),</span><br><span class="line">    android = ua.match(/(Android)\s+([\d.]+)/)||ua.match(/Android/),</span><br><span class="line">    wp = ua.match(/Windows Phone ([\d.]+)/),</span><br><span class="line">    isMobile = iPad || iPhone || iPad || wp || android;</span><br></pre></td></tr></table></figure>

<h4 id="回调函数："><a href="#回调函数：" class="headerlink" title="回调函数："></a>回调函数：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = 1;</span><br><span class="line">function bar(callback) &#123;</span><br><span class="line">    foo = 10;</span><br><span class="line">    console.log(foo);</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(this.foo);</span><br><span class="line">    return;</span><br><span class="line">    function foo() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">bar(function()&#123;</span><br><span class="line">    console.log(&#x27;回调&#x27;);</span><br><span class="line">    console.log(foo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(this);</span><br><span class="line">console.log(this.foo);</span><br><span class="line"></span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> var func = (function(a) &#123;</span><br><span class="line">    this.a = a;</span><br><span class="line">    return function(a) &#123;</span><br><span class="line">        a += this.a;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">(function(a, b) &#123;</span><br><span class="line">    return a;</span><br><span class="line">&#125;(1, 2));</span><br><span class="line"></span><br><span class="line">console.log(func(4));</span><br></pre></td></tr></table></figure>

<h4 id="数组按一定原则排序"><a href="#数组按一定原则排序" class="headerlink" title="数组按一定原则排序"></a>数组按一定原则排序</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr5 = [&#123;id:10&#125;,&#123;id:5&#125;,&#123;id:6&#125;,&#123;id:9&#125;,&#123;id:2&#125;,&#123;id:3&#125;];</span><br><span class="line">arr5.sort(function(a,b)&#123;</span><br><span class="line">    return a.id - b.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="对返回的数据进行处理-专为数组或对象格式"><a href="#对返回的数据进行处理-专为数组或对象格式" class="headerlink" title="对返回的数据进行处理-专为数组或对象格式"></a>对返回的数据进行处理-专为数组或对象格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data =&#123;</span><br><span class="line">    &#x27;yangyibing&#x27;:&#123;</span><br><span class="line">        name: &#x27;杨伊冰&#x27;,</span><br><span class="line">        age: &#x27;25&#x27;,</span><br><span class="line">        job: &#x27;web&#x27;,</span><br><span class="line">        city: &#x27;guangzhou&#x27; </span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;liyishun&#x27;:&#123;</span><br><span class="line">        name: &#x27;李一瞬&#x27;,</span><br><span class="line">        age: &#x27;25&#x27;,</span><br><span class="line">        job: &#x27;web&#x27;,</span><br><span class="line">        city: &#x27;guangzhou&#x27; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getList(data)&#123;</span><br><span class="line">    var obj = &#123;&#125;, list = [], returnData = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    for(var key in data)&#123;</span><br><span class="line">        var item = &#123;</span><br><span class="line">            k: key,</span><br><span class="line">            v: data[key]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj[key] = data[key];</span><br><span class="line"></span><br><span class="line">        list.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    returnData[&#x27;list&#x27;] = list;</span><br><span class="line">    returnData[&#x27;obj&#x27;] = obj;</span><br><span class="line"></span><br><span class="line">    return returnData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = getList(data)[&#x27;obj&#x27;];</span><br><span class="line">var list = getList(data)[&#x27;list&#x27;];</span><br><span class="line">console.log(obj);</span><br><span class="line">console.log(list);</span><br></pre></td></tr></table></figure>

<h4 id="输入框获取焦点-放大-缩小页面（scale）"><a href="#输入框获取焦点-放大-缩小页面（scale）" class="headerlink" title="输入框获取焦点-放大/缩小页面（scale）"></a>输入框获取焦点-放大/缩小页面（scale）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;login-box&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;login-input&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var clientH = document.documentElement.clientHeight;</span><br><span class="line">// var clientW = document.documentElement.clientWidth;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    // $(&quot;.login-box&quot;).css(&#123;&quot;width&quot;:clientW + &quot;px&quot;,&quot;height&quot;:clientH + &quot;px&quot;&#125;);</span><br><span class="line">    $(&quot;#login-input&quot;).focus(function()&#123;</span><br><span class="line">        zoomout();</span><br><span class="line">    &#125;)</span><br><span class="line">    $(&quot;#login-input&quot;).blur(function()&#123;</span><br><span class="line">        zoomin();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">var size = 1.0;</span><br><span class="line"></span><br><span class="line">function zoomout() &#123;</span><br><span class="line">   size = size + 0.5;</span><br><span class="line"></span><br><span class="line">   set();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">function zoomin() &#123;</span><br><span class="line">    size = size - 0.5;</span><br><span class="line">    set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function set() &#123;</span><br><span class="line">    document.body.style.cssText = document.body.style.cssText + &#x27;; -webkit-transform: scale(&#x27; + size + &#x27;);-webkit-transform-origin: 0 0;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开页面，直接跳转到百度"><a href="#打开页面，直接跳转到百度" class="headerlink" title="打开页面，直接跳转到百度"></a>打开页面，直接跳转到百度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    // window.location.href = &quot;http://baidu.com&quot;;</span><br><span class="line">    location.href = &quot;http://baidu.com&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态追加script脚本或js文件"><a href="#动态追加script脚本或js文件" class="headerlink" title="动态追加script脚本或js文件"></a>动态追加script脚本或js文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function loadScript (url) &#123;</span><br><span class="line">    loadScript.mark = &#x27;load&#x27;;</span><br><span class="line">    var script = document.createElement(&quot;script&quot;);</span><br><span class="line">    script.type = &quot;type/javascript&quot;;</span><br><span class="line">    script.src = url;</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// loadScript (&quot;js/jquery.min.js&quot;);</span><br><span class="line">// console.log(loadScript.mark);</span><br><span class="line"></span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">    if(loadScript.mark != &#x27;load&#x27;) &#123;</span><br><span class="line">        loadScript(&quot;js/script.js&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打开一个新的浏览器窗口"><a href="#打开一个新的浏览器窗口" class="headerlink" title="打开一个新的浏览器窗口"></a>打开一个新的浏览器窗口</h4><p><a href="https://www.runoob.com/jsref/met-win-open.html">菜鸟教程</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;openwindow()&quot;&gt;创建窗口&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var w = window;</span><br><span class="line">function openwindow()&#123;</span><br><span class="line">    w.open(&#x27;http://www.runoob.com&#x27;,&#x27;菜鸟教程&#x27;, &#x27;width=800,height=800&#x27;);</span><br><span class="line">    w.focus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="捕获错误信息-1"><a href="#捕获错误信息-1" class="headerlink" title="捕获错误信息"></a>捕获错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var errorTxt = &quot;&quot;;</span><br><span class="line">window.onerror = function(errorMessage, scriptURI, lineNumber,columnNumber,errorObj) &#123; </span><br><span class="line">    errorTxt = &quot;接收到的错误信息如下：\n\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误信息：&quot; + errorMessage + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错文件：&quot; + scriptURI + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错行号：&quot; + lineNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;出错列号：&quot; + columnNumber + &quot;\n&quot;;</span><br><span class="line">    errorTxt += &quot;错误详情：&quot; + errorObj + &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">    alert(errorTxt);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oSpan.onclick = function(e)&#123;</span><br><span class="line">    // 阻止冒泡</span><br><span class="line">    e = e || event;</span><br><span class="line">    if(e.stopPropagation)&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.cancelBubble = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用定时器是为了让输入框上滑时更加自然-移动端"><a href="#使用定时器是为了让输入框上滑时更加自然-移动端" class="headerlink" title="使用定时器是为了让输入框上滑时更加自然-移动端"></a>使用定时器是为了让输入框上滑时更加自然-移动端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var bfscrolltop = document.body.scrollTop;</span><br><span class="line">var interval;</span><br><span class="line">$(&quot;input&quot;).focus(function()&#123;</span><br><span class="line">    interval = setInterval(function()&#123;</span><br><span class="line">    document.body.scrollTop = document.body.scrollHeight;</span><br><span class="line">    &#125;,100)</span><br><span class="line">&#125;).blur(function()&#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">    document.body.scrollTop = bfscrolltop;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jQuery插件扩展"><a href="#jQuery插件扩展" class="headerlink" title="jQuery插件扩展"></a>jQuery插件扩展</h4><h4 id="数组里的字符串转换成数字或者把数字转换成字符串"><a href="#数组里的字符串转换成数字或者把数字转换成字符串" class="headerlink" title="数组里的字符串转换成数字或者把数字转换成字符串"></a>数组里的字符串转换成数字或者把数字转换成字符串</h4><p>数字转字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9];</span><br><span class="line">arr.map(String);   // 结果: [&#x27;1&#x27;,&#x27;2&#x27;，&#x27;3&#x27;,&#x27;4&#x27;，&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;]</span><br></pre></td></tr></table></figure>

<p>字符串转数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [&#x27;1&#x27;,&#x27;2&#x27;，&#x27;3&#x27;,&#x27;4&#x27;，&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;];</span><br><span class="line">a.map(Number);  // 结果:[1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>

<h4 id="jquery获取第一个子节点元素"><a href="#jquery获取第一个子节点元素" class="headerlink" title="jquery获取第一个子节点元素"></a>jquery获取第一个子节点元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#body&quot;).children(&quot;:first&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="JS数组添加元素的三种方式"><a href="#JS数组添加元素的三种方式" class="headerlink" title="JS数组添加元素的三种方式"></a><a href="https://www.cnblogs.com/meng-ma-blogs/p/8352787.html">JS数组添加元素的三种方式</a></h4><p>1、push() 结尾添加</p>
<p>　　数组.push(元素)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>newelement1</td>
<td>必需。要添加到数组的第一个元素。</td>
</tr>
<tr>
<td>newelement2</td>
<td>可选。要添加到数组的第二个元素。</td>
</tr>
<tr>
<td>newelementX</td>
<td>可选。可添加多个元素。</td>
</tr>
</tbody></table>
<p>2、unshift() 头部添加</p>
<p>　　数组.unshift(元素)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>newelement1</td>
<td>必需。向数组添加的第一个元素。</td>
</tr>
<tr>
<td>newelement2</td>
<td>可选。向数组添加的第二个元素。</td>
</tr>
<tr>
<td>newelementX</td>
<td>可选。可添加若干个元素。</td>
</tr>
</tbody></table>
<p>3、splice() 方法向/从数组指定位置添加/删除项目，然后返回被删除的项目。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td>
</tr>
<tr>
<td>howmany</td>
<td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td>
</tr>
<tr>
<td>item1, …, itemX</td>
<td>可选。向数组添加的新项目。</td>
</tr>
</tbody></table>
<p>获取URL指定参数值（js/vue)</p>
<p><a href="https://www.cnblogs.com/linjiangxian/p/11466087.html">参考博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getParam(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if (r != null) return unescape(r[2]);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="each"><a href="#each" class="headerlink" title="$.each"></a>$.each</h4><p><a href="https://blog.csdn.net/u010786902/article/details/50954002">jQuery中$.each的用法详解！</a></p>
<p><a href="https://www.jb51.net/article/65215.htm">jquery中$each()方法的使用指南</a></p>
<p><strong>Vue中</strong></p>
<p>方法一:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$route.query.xxx  //只要是在url里用?拼接的都可以</span><br></pre></td></tr></table></figure>

<p>方法二:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getParam function(paramName) &#123; </span><br><span class="line">    return decodeURIComponent((new RegExp(&#x27;[?|&amp;]&#x27; +</span><br><span class="line">      paramName + &#x27;=&#x27; + &#x27;([^&amp;;]+?)(&amp;|#|;|$)&#x27;).exec(location.href) || [, &quot;&quot;])[1].replace(/\+/g, &#x27;%20&#x27;)) || null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Stevenzwzhai/plugs">模糊搜索</a></p>
<h4 id="处理移动端点击延迟"><a href="#处理移动端点击延迟" class="headerlink" title="处理移动端点击延迟"></a>处理移动端点击延迟</h4><p><a href="https://blog.csdn.net/sly94/article/details/51701188">移动端web开发，click touch tap区别</a></p>
<p><a href="https://www.xuebuyuan.com/2174858.html">移动端WEB开发，click,touch,tap事件浅析</a></p>
<p><a href="http://www.bubuko.com/infodetail-1015581.html">JS 插件 fastclick.js 解决手机端click点击延迟</a></p>
<p>对于非移动浏览器不启作用，禁用缩放标签。</p>
<h4 id="call和-apply"><a href="#call和-apply" class="headerlink" title="call和 apply"></a>call和 apply</h4><p><a href="https://blog.csdn.net/u010670689/article/details/9065903">web开发JS调用打印机打印Web页面</a></p>
<p><a href="https://www.jb51.net/article/106915.htm">JS实现浏览器打印、打印预览示例</a></p>
<h4 id="原生JS获取元素焦点"><a href="#原生JS获取元素焦点" class="headerlink" title="原生JS获取元素焦点"></a>原生JS获取元素焦点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(id).focus();</span><br></pre></td></tr></table></figure>

<h4 id="获取今天，昨天，明天日期"><a href="#获取今天，昨天，明天日期" class="headerlink" title="获取今天，昨天，明天日期"></a>获取今天，昨天，明天日期</h4><p>自己写的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">// 获取日期函数</span><br><span class="line">@param days 时间间隔天数</span><br><span class="line">       -1：昨天</span><br><span class="line">        0: 今天</span><br><span class="line">        1：明天</span><br><span class="line">@param symbol 年月日之间的分隔符</span><br><span class="line">*/</span><br><span class="line">function getDateFun(days, symbol)&#123;</span><br><span class="line">    // 当前时间</span><br><span class="line">    var now = new Date();</span><br><span class="line">    var date = now.setDate(now.getDate() + days);</span><br><span class="line">    </span><br><span class="line">    // 格式化日期</span><br><span class="line">    function format(t) &#123;</span><br><span class="line">        var year = t.getFullYear();     // 年份</span><br><span class="line">        var month = t.getMonth() + 1;   // 月份</span><br><span class="line">        month = month &lt; 10 ? &quot;0&quot; + month : month;</span><br><span class="line">        var date = t.getDate();         // 日</span><br><span class="line">        date = date &lt; 10 ? &quot;0&quot; + date : date;</span><br><span class="line"></span><br><span class="line">        return year + symbol + month + symbol + date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回格式化后的日期</span><br><span class="line">    return format(new Date(date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断数组中是否存在某值"><a href="#判断数组中是否存在某值" class="headerlink" title="判断数组中是否存在某值"></a>判断数组中是否存在某值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  arr数组   value需判断的元素</span><br><span class="line">function isInArray(arr, value) &#123;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (value === arr[i]) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组对象减去某值"><a href="#数组对象减去某值" class="headerlink" title="数组对象减去某值"></a>数组对象减去某值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function removeValue(arr, val) &#123;</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        if (arr[i] == val) &#123;</span><br><span class="line">            arr.splice(i, 1);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LayUI-js实现全选、多选、翻页勾选（LayUI数据表格-方法渲染-模式）"><a href="#LayUI-js实现全选、多选、翻页勾选（LayUI数据表格-方法渲染-模式）" class="headerlink" title="LayUI + js实现全选、多选、翻页勾选（LayUI数据表格 方法渲染 模式）"></a><a href="https://www.cnblogs.com/java-hui/p/12170230.html">LayUI + js实现全选、多选、翻页勾选（LayUI数据表格 方法渲染 模式）</a></h4><p><a href="https://zhuanlan.zhihu.com/p/113456049">JavaScript单例模式</a></p>
<p><a href="https://www.cnblogs.com/imwtr/p/9451129.html">JavaScript中常见的十五种设计模式</a></p>
<p><a href="https://www.w3school.com.cn/js/js_function_apply.asp">JavaScript 函数 Apply</a></p>
<p><a href="https://www.w3school.com.cn/jsref/jsref_constructor_array.asp">JavaScript constructor 属性</a></p>
<h5 id="判断元素显示-隐藏，然后显示隐藏元素"><a href="#判断元素显示-隐藏，然后显示隐藏元素" class="headerlink" title="判断元素显示/隐藏，然后显示隐藏元素"></a>判断元素显示/隐藏，然后显示隐藏元素</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function toggleMask() &#123;</span><br><span class="line">    var mask = $(&quot;.main-mask&quot;);</span><br><span class="line">    if(mask.is(&quot;:hidden&quot;)) &#123;</span><br><span class="line">        mask.show();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        mask.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ivuu/p/7136408.html">js的内联和外部调用</a></p>
<h4 id="监听手动刷新事件"><a href="#监听手动刷新事件" class="headerlink" title="监听手动刷新事件"></a>监听手动刷新事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听刷新页面事件方法</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="JS如何在数组指定位置插入元素"><a href="#JS如何在数组指定位置插入元素" class="headerlink" title="JS如何在数组指定位置插入元素"></a><a href="https://www.jb51.net/article/182300.htm">JS如何在数组指定位置插入元素</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在数组指定位置插入</span><br><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">fruits.splice(2, 0, &quot;Lemon&quot;, &quot;Kiwi&quot;);</span><br><span class="line">// 输出结果</span><br><span class="line">// Banana, Orange, Lemon, Kiwi, Apple, Mango</span><br></pre></td></tr></table></figure>

<h5 id="阻止事件冒泡-1"><a href="#阻止事件冒泡-1" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.event? window.event.cancelBubble = true : e.stopPropagation();</span><br></pre></td></tr></table></figure>

<p><a href="http://caibaojian.com/javascript-stoppropagation-preventdefault.html">JS阻止冒泡和取消默认事件(默认行为)</a></p>
<p>当需要停止冒泡行为时，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function stopBubble(e) &#123; </span><br><span class="line">//如果提供了事件对象，则这是一个非IE浏览器 </span><br><span class="line">if ( e &amp;&amp; e.stopPropagation ) </span><br><span class="line">    //因此它支持W3C的stopPropagation()方法 </span><br><span class="line">    e.stopPropagation(); </span><br><span class="line">else </span><br><span class="line">    //否则，我们需要使用IE的方式来取消事件冒泡 </span><br><span class="line">    window.event.cancelBubble = true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当需要阻止默认行为时，可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//阻止浏览器的默认行为 </span><br><span class="line">function stopDefault( e ) &#123; </span><br><span class="line">    //阻止默认浏览器动作(W3C) </span><br><span class="line">    if ( e &amp;&amp; e.preventDefault ) </span><br><span class="line">        e.preventDefault(); </span><br><span class="line">    //IE中阻止函数器默认动作的方式 </span><br><span class="line">    else </span><br><span class="line">        window.event.returnValue = false; </span><br><span class="line">    return false; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JS-删除数组中某个元素的几种方式"><a href="#JS-删除数组中某个元素的几种方式" class="headerlink" title="JS 删除数组中某个元素的几种方式"></a><a href="https://blog.csdn.net/Li_dengke/article/details/105249837">JS 删除数组中某个元素的几种方式</a></h4><h4 id="删除数组最后两个元素"><a href="#删除数组最后两个元素" class="headerlink" title="删除数组最后两个元素"></a>删除数组最后两个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.slice(0, -2)</span><br></pre></td></tr></table></figure>

<h4 id="删除数组最后一个元素"><a href="#删除数组最后一个元素" class="headerlink" title="删除数组最后一个元素"></a>删除数组最后一个元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.slice(0, -1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure>



<h4 id="瀑布流的实现"><a href="#瀑布流的实现" class="headerlink" title="瀑布流的实现"></a>瀑布流的实现</h4><p><a href="https://www.pinterest.com/">pinterest</a></p>
<h4 id="JQuery动态添加元素方法"><a href="#JQuery动态添加元素方法" class="headerlink" title="JQuery动态添加元素方法"></a>JQuery动态添加元素方法</h4><table>
<thead>
<tr>
<th>append()</th>
<th>在父级最后追加一个子元素</th>
</tr>
</thead>
<tbody><tr>
<td>appendTo()</td>
<td>在父级最后追加一个子元素</td>
</tr>
<tr>
<td>prepend()</td>
<td>在父级最前面追加一个子元素</td>
</tr>
<tr>
<td>prependTo()</td>
<td>在父级最前面追加一个子元素</td>
</tr>
<tr>
<td>after()</td>
<td>在当前元素之后追加（是同级关系）</td>
</tr>
<tr>
<td>before()</td>
<td>在当前元素之前追加（是同级关系）</td>
</tr>
<tr>
<td>insertAfter()</td>
<td>将元素追加到指定对象的后面（是同级关系</td>
</tr>
<tr>
<td>insertBefore()</td>
<td>将元素追加到指定对象的前面（是同级关系）</td>
</tr>
<tr>
<td>appendChild()</td>
<td>在节点的最后追加子元素</td>
</tr>
</tbody></table>
<h4 id="监听动态生成的元素"><a href="#监听动态生成的元素" class="headerlink" title="监听动态生成的元素"></a>监听动态生成的元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听下拉框改变事件</span><br><span class="line">$(&quot;.singleGame&quot;).on(&quot;change&quot;, &quot;select.game-select&quot;, function () &#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="JS高级进阶（作用域，闭包，递归，this关键字）"><a href="#JS高级进阶（作用域，闭包，递归，this关键字）" class="headerlink" title="JS高级进阶（作用域，闭包，递归，this关键字）"></a>JS高级进阶（作用域，闭包，递归，this关键字）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//理解闭包</span><br><span class="line">function setup(x) &#123;</span><br><span class="line">    var i =0 ;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">        return x[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var next = setup([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]);</span><br><span class="line">console.log(next());    //i 输出 0  返回 a</span><br><span class="line">console.log(next());    //i 输出 1  返回 b</span><br><span class="line">console.log(next());    //i 输出 2  返回 c</span><br><span class="line"></span><br><span class="line">//自调用</span><br><span class="line">var fun = (function setup(x) &#123;</span><br><span class="line">    var i =0 ;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">        return x[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]));   //传参</span><br><span class="line"></span><br><span class="line">console.log(fun);   //输出返回的函数体</span><br><span class="line">console.log(fun()); //i 输出 0  返回 a</span><br><span class="line"></span><br><span class="line">//递归  自己调自己   (用递归很容易写成死循环)</span><br><span class="line">function fact(num) &#123;</span><br><span class="line">    if(num &lt;= 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return num * fact(num - 1);</span><br><span class="line">        // 执行过程：</span><br><span class="line">        // 4*f(3);</span><br><span class="line">        // 4*3*f(2);</span><br><span class="line">        // 4*3*2*f(1);</span><br><span class="line">        // 4*3*2*1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(fact(4));   //24</span><br></pre></td></tr></table></figure>

<h4 id="js如何验证type为file的input是否为空"><a href="#js如何验证type为file的input是否为空" class="headerlink" title="js如何验证type为file的input是否为空"></a><a href="https://zhidao.baidu.com/question/195410818.html">js如何验证type为file的input是否为空</a></h4><p>1：js判断的话，直接判断input的value，如果value的长度为0，那么就空如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;看看file是不是空&quot; onclick=&quot;alert(file.value.length);&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>，如果值大于0，则不为空。<br>2：使用Jquery的话(前提：你要导入Jquery)，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;alert($(&#x27;#file&#x27;).val().length)&quot; value=&quot;click&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="5-2-3-1数据类型数据判断"><a href="#5-2-3-1数据类型数据判断" class="headerlink" title="5:2,3:1数据类型数据判断"></a>5:2,3:1数据类型数据判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(var i = 0; i&lt; arr.length; i++) &#123;</span><br><span class="line">    console.log(&#x27;arr[i]&#x27;);</span><br><span class="line">    console.log(arr[i]);</span><br><span class="line">    console.log(arr[i].indexOf(&#x27;:&#x27;));</span><br><span class="line">    // ,前后数据不为空的情况下，为空，不做判断，</span><br><span class="line">    if(arr[i] !== &#x27;&#x27;) &#123;</span><br><span class="line">        // 没有：---格式不对</span><br><span class="line">        if(arr[i].indexOf(&#x27;:&#x27;) === -1) &#123;</span><br><span class="line">            console.log(&#x27;第1个判断&#x27;)</span><br><span class="line">            return &#x27;请填写数字及英文字符&lt;strong&gt;【&#x27; + txt + &#x27;】&lt;/strong&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        var arr2 = arr[i].split(&quot;:&quot;);</span><br><span class="line">        for(var j = 0; j &lt; arr2.length; j++) &#123;</span><br><span class="line">            console.log(&#x27;第2个判断&#x27;)</span><br><span class="line">            console.log(&#x27;arr2[j]&#x27;)</span><br><span class="line">            console.log(arr2[j])</span><br><span class="line">            // 判断是否为数字或其一为空</span><br><span class="line">            if(isNaN(arr2[j]) || arr2[j] === &#x27;&#x27;) &#123;</span><br><span class="line">                return &#x27;请填写数字及英文字符&lt;strong&gt;【&#x27; + txt + &#x27;】&lt;/strong&gt;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="js控制当滚动条到最底部时隐藏某个div"><a href="#js控制当滚动条到最底部时隐藏某个div" class="headerlink" title="js控制当滚动条到最底部时隐藏某个div"></a><a href="https://zhidao.baidu.com/question/454586791163562165.html">js控制当滚动条到最底部时隐藏某个div</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt; &lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123;margin:0;height:2000px;&#125;</span><br><span class="line">div&#123;height:500px;width:500px;background:#f00;margin:0 auto;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.onscroll=function()&#123;</span><br><span class="line">    var scrollTop = document.documentElement.scrollTop||document.body.scrollTop;</span><br><span class="line">    if(scrollTop&gt;=document.body.offsetHeight-document.documentElement.clientHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        document.getElementById(&quot;div1&quot;).style.display=&quot;none&quot;;  </span><br><span class="line">        alert(&quot;去看看是不是DIV不见了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">    this is a div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript相关笔记</title>
    <url>/2019/09/04/Javascript%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="javascript类型系统——undefined和null"><a href="#javascript类型系统——undefined和null" class="headerlink" title="javascript类型系统——undefined和null"></a><a href="https://www.cnblogs.com/xiaohuochai/p/5665637.html">javascript类型系统——undefined和null</a></h5><h5 id="ECMAScript-原始类型"><a href="#ECMAScript-原始类型" class="headerlink" title="ECMAScript 原始类型"></a><a href="https://www.w3school.com.cn/js/pro_js_primitivetypes.asp">ECMAScript 原始类型</a></h5><h5 id="javascript中的原始值和复杂值"><a href="#javascript中的原始值和复杂值" class="headerlink" title="javascript中的原始值和复杂值"></a><a href="https://www.cnblogs.com/xiaohuochai/p/5108837.html">javascript中的原始值和复杂值</a></h5><p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN</p>
<p><strong>undefined</strong> 【出现场景】**:**</p>
<p>【1】已声明未赋值的变量</p>
<p>【2】获取对象不存在的属性</p>
<p>【3】无返回值的函数的执行结果</p>
<p>【4】函数的参数没有传入</p>
<p>【5】void(expression)</p>
<p><strong>null被认为是空对象指针</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myObject = &#123;&#125;;</span><br><span class="line">var copyOfMyObject = myObject;//没有复制值，而是复制了引用</span><br><span class="line">myObject.foo = &#x27;bar&#x27;;//操作myObject中的值</span><br><span class="line">//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象</span><br><span class="line">console.log(myObject,copyOfMyObject);//Object&#123;foo=&quot;bar&quot;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ESLint-简介"><a href="#ESLint-简介" class="headerlink" title="ESLint - 简介"></a><a href="https://www.jianshu.com/p/2bcdce1dc8d4">ESLint - 简介</a></h5><h4 id="URI、URL和URN的关系"><a href="#URI、URL和URN的关系" class="headerlink" title="URI、URL和URN的关系"></a><a href="https://blog.csdn.net/qq_46331050/article/details/118071887">URI、URL和URN的关系</a></h4><p><strong>1、URI: Uniform Resource Identifier 统一资源标志符</strong></p>
<p><strong>2、URL: Uniform Resource Locator 统一资源定位符</strong></p>
<p><strong>3、URN: Uniform Resource Name 统一资源名称</strong></p>
<h4 id="JavaScript-全局参考手册"><a href="#JavaScript-全局参考手册" class="headerlink" title="JavaScript 全局参考手册"></a><a href="https://www.w3school.com.cn/jsref/jsref_obj_global.asp">JavaScript 全局参考手册</a></h4><p>全局对象只是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量是对“值”的引用，使用变量等同于引用一个值。每一个变量都有一个变量名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var x;</span><br><span class="line">x  // 1</span><br><span class="line"></span><br><span class="line">// 上面代码中,变量x声明了两次，第二次声明是无效的。</span><br><span class="line">// 但是,如果第二次声明的同时还赋值了，则会覆盖掉前面的值。</span><br><span class="line"></span><br><span class="line">var x = 1;</span><br><span class="line">var x = 2;</span><br><span class="line">// 等同于</span><br><span class="line">var x = 1;</span><br><span class="line">var x；</span><br><span class="line">x = 2； </span><br></pre></td></tr></table></figure>

<h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>JavaScript引擎的工作方式是,先解析代码,获取所有被声明的变量,然后再一行一 行地运行。这造成的<br>结果,就是所有的变量的声明语句,都会被提升到代码的头部,这就叫做变量提升( hoisting )。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure>

<p>上面代码首先使用console. log方法,在控制台( console )显示变量a的值。这时变量a还没有声明和<br>赋值,所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升,真正运行的是下面的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a;</span><br><span class="line">console.log(a);</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure>

<p>最后的结果是显示undefined ,表示变量a已声明,但还未赋值。<br>请注意,变量提升只对var命令声明的变量有效,如果一个变量不是用 var命令声明的,就不会发生变量<br>提升。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(b);</span><br><span class="line">b = 1;</span><br></pre></td></tr></table></figure>

<p>上面的语句将会报错,提示”ReferenceError: b is not defined” ,即变量b未声明,这是因为b不是用var<br>命令声明的, JavaScrip引擎不会将其提升,而只是视为对顶层对象的b属性的赋值。</p>
<p>需要注意的是，<code>switch</code>语句后面的表达式与<code>case</code>语句后面的表示式,在比较运行结果时,采用的是严<br>格相等运算符( <code>===</code> ) ,而不是相等运算符(<code>== </code>) ,这意味着比较时不会发生类型转换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x =1;</span><br><span class="line">switch (x) &#123;</span><br><span class="line">	case true :</span><br><span class="line">		console.log(&#x27;x发生类型转换&#x27;);</span><br><span class="line">	default :</span><br><span class="line">		console.log(&#x27;x没有发生类型转换&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">// x没有发生类型转换</span><br></pre></td></tr></table></figure>

<h4 id="标签（label）"><a href="#标签（label）" class="headerlink" title="标签（label）"></a>标签（label）</h4><p>JavaScript语言允许,语句的前面有标签( label) ,相当于定位符,用于跳转到程序的任意位置,标签的<br>格式如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">label:</span><br><span class="line">	statement</span><br></pre></td></tr></table></figure>

<p>标签可以是任意的标识符,但是不能是保留字,语句部分可以是任意语句。<br>标签通常与break语句和continue语句配合使用，跳出特定的循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top:</span><br><span class="line">	for(var i =0;i&lt;3;i++)&#123;</span><br><span class="line">    for(var j=0;j&lt;3;j++)&#123;</span><br><span class="line">    if(i===1 &amp;&amp; j===1) break top;</span><br><span class="line">      console.log(&#x27;i=&#x27;+ i + &#x27;, j=&#x27;+ j);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">// i=0,j=0</span><br><span class="line">// i=0,j=1</span><br><span class="line">// i=0,j=2</span><br><span class="line">// i=1,j=0</span><br></pre></td></tr></table></figure>

<p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签(注意，<code>top</code>不用加引号) ,满足条件<br>时,直接跳出双层循环。如果<code>break</code>语句后面不使用标签,则只能跳出内层循环,进入下一次的外层循<br>环。</p>
<p><code>continue</code>语句也可以与标签配合使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top:</span><br><span class="line">	for(var i =0;i&lt;3;i++)&#123;</span><br><span class="line">    for(var j=0;j&lt;3;j++)&#123;</span><br><span class="line">    if(i===1 &amp;&amp; j===1) continue top;</span><br><span class="line">      console.log(&#x27;i=&#x27;+ i + &#x27;, j=&#x27;+ j);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">// i=0,j=0</span><br><span class="line">// i=0,j=1</span><br><span class="line">// i=0,j=2</span><br><span class="line">// i=1,j=0</span><br><span class="line">// i=2,j=0</span><br><span class="line">// i=2,j=1</span><br><span class="line">// i=2,j=2</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>continue</code>命令后面有一 个标签名,满足条件时,会跳过当前循环，直接进入下一轮外层循<br>环。如果<code>continue</code>语句后面不使用标签,则只能进入下一轮的内层循环。</p>
<p>JavaScript语言的每一个值,都属于某-种数据类型。 JavaScript 的数据类型,共有六种。( ES6又新增<br>了第七种Symbol类型的值,本教程不涉及。)</p>
<ul>
<li>数值( number ) : 整数和小数(比如1和3.14 )</li>
<li>字符串( string) : 字符组成的文本(比如”Hello World” )</li>
<li>布尔值( boolean) : true ( 真)和false (假)两个特定值</li>
<li>undefined : 表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>
<li>null :表示无值，即此处的值就是“无”的状态。</li>
<li>对象( object ) :各种值组成的集合</li>
</ul>
<p>通常,我们将数值、字符串、布尔值称为原始类型( primitive type )的值，即它们是最基本的数据类型,<br>不能再细分了。而将对象称为合成类型( complex type )的值,因为一个对象往往 是多个原始类型的值的<br>合成，可以看作是一个存放各种值的容器。至于<code>undefined</code>和<code>null</code> ,一般将它们看成两个特殊值。</p>
<p>对象又可以分成三个子类型。</p>
<ul>
<li>狭义的对星星( object )</li>
<li>数组( array )</li>
<li>函数( function )</li>
</ul>
<p>狭义的对象和数组是两种不同的数据组合方式,而函数其实是处理数据的方法。JavaScript把函数当成一<br>种数据类型,可以像其他类型的数据一样,进行赋值和传递,这为编程带来了很大的灵活性,体现了期<br>JavaScript作为“函数式语言”的本质。<br>这里需要明确的是, JavaScript的所有数据,都可以视为广义的对象。不仅数组和函数属于对象,就连原<br>始类型的数据(数值、字符串、布尔值)也可以用对象方式调用。为了避兔混淆,此后除非特别声明,本<br>教程的”对象“都特指狭义的对象。<br>本教程将详细绍所有的数据类型。<code>undefined</code> 和<code>null</code>两个特殊值和布尔类型Boolean比较简单,将在<br>本节介绍,其他类型将各自有单独的一节。</p>
<p>除此以外,其他情况都返回object。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof window  // &quot;object&quot;</span><br><span class="line">typeof &#123;&#125; // &quot;object&quot;</span><br><span class="line">typeof [] // &quot;object&quot; </span><br><span class="line">typeof null // &quot;object&quot;</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看到，空数组( [] )的类型也是<code>object</code> , 这表示在JavaScript内部,数组本质上只是一<br>种特殊的对象。<br>另外，<code>null</code>的类型也是<code>object </code>,这是由于历史原因造成的。1995年JavaScript语言的第一 版,所有值都<br>设计成32位,其中最低的3位用来表述数据类型，<code>object </code>对应的值是<code>000</code>。当时,只设计了五种数据类<br>型(对象、整数、浮点数、字符串和布尔值)，完全没考虑 <code>null</code> ,只把它当作<code>object</code>的一种特殊值,<br>32位全部为0。这是<code>typeof null</code>返回<code>object</code>的根本原因。<br>为了兼容以前的代码，后来就没法修改了。这并不是说null就属于对象，本质上null是个类似于<br>undefined的特殊值。<br>既然<code>typeof</code>对数组( array )和对象( object )的显示结果都是<code>object</code> , 那么怎么区分它们呢?<br><code>instanceof</code>运算符可以做到。</p>
<p>1995年JavaScript 诞生时,最初像Java一样,只设置了<code>null</code>作为表示’无”的值。根据C语言的传统,<br><code>null</code>被设计成可以自动转为0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number(null)  //0</span><br><span class="line">5 + null //5</span><br></pre></td></tr></table></figure>

<p>但是, JavaScript的设计者Brendan Eich ,觉得这样做还不够,有两个原因。首先，<code>null</code>像在Java里一<br>样，被当成一个对象。 但是, JavaScript的值分成原始类型和合成类型两大类, Brendan Eich觉得表<br>示”无”的值最好不是对象。其欺, JavaScript的最初版本没有包括错误处理机制,发生数据类型不匹配时，<br>往往是自动转换类型或者默默地失败。Brendan Eich觉得,如果<code>null</code>自动转为0 ,很不容易发现错误。<br>因此, Brendan Eich又设计了一个<code>undefined</code>。他是这样区分的: <code>null </code>是一个表示” 无”的对象,转为数<br>值时为<code>0</code>; <code>undefined</code> 是一个表示”无”的原始值 ,转为数值时为<code>NaN</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number(undefined)  //NaN</span><br><span class="line">5 + undefined //NaN</span><br></pre></td></tr></table></figure>

<p>用下列运算符会返回布尔值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两元逻辑运算符: &amp;&amp; (And)， || (Or)</span><br><span class="line">前置逻辑运算符: ! (Not)</span><br><span class="line">相等运算符: ===，!== ，==，!=</span><br><span class="line">比较运算符: &gt;，&gt;=，&lt;，&lt;=</span><br></pre></td></tr></table></figure>

<p>如果JavaScript预期某个位置应该是布尔值,会将该位置上现有的值自动转为布尔值。转换规则是除了下<br>面六个值被转为<code>false</code> , 其他值都视为<code>true</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">undefined</span><br><span class="line">null</span><br><span class="line">false</span><br><span class="line">0</span><br><span class="line">NaN</span><br><span class="line">&quot;&quot;或&#x27;&#x27;(空字符串)</span><br></pre></td></tr></table></figure>

<p>布尔值往往用于程序流程的控制，请看 一个 例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(&#x27;&#x27;) &#123;</span><br><span class="line">	console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">// 没有任何输出</span><br></pre></td></tr></table></figure>

<p>上面代码的<code>if</code>命令后面的判断条件预期应该是一 个布尔值,所以JavaScript自动将空字符串 ,转为布尔<br>值<code>false</code> ,导致程序不会进入代码块,所以没有任何输出。<br>需要特别注意的是，空数组 (<code> []</code> )和空对象( <code>&#123;&#125;</code> )对应的布尔值,都是<code>true</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if([]) &#123;</span><br><span class="line">	console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">// true</span><br><span class="line">if(&#123;&#125;) &#123;</span><br><span class="line">	console.log(true);</span><br><span class="line">&#125;</span><br><span class="line">// true</span><br></pre></td></tr></table></figure>

<p>在JavaScript内部,实际上存在2个<code>0</code>：一个是<code>+0</code> ,一个是<code>-0</code>。它们是等价的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">-0 === +0 // true</span><br><span class="line"> 0 === -0 // true</span><br><span class="line"> 0 === +0 // true</span><br></pre></td></tr></table></figure>

<p>几乎所有场合 ，正零和负零都会被当作正常的<code>0</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+0 // 0</span><br><span class="line">-0 // 0</span><br><span class="line">(-0).tostring() // &#x27;0&#x27;</span><br><span class="line">(+0).tostring() // &#x27;0&#x27;</span><br></pre></td></tr></table></figure>

<p>唯一有区别的场合是，<code>+0</code>或<code>-0</code>当作分母，返回的值是不相等的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1 / +0) === (1 / -0) // false</span><br></pre></td></tr></table></figure>

<p>上面代码之所以出现这样结果，是因为除!以正零得到<code>+Infinity</code>，除以负零得到<code> -Infinity</code>，这两者是<br>不相等的（关于<code> Infinity</code> 详见后文）。</p>
<p><code>NaN</code> 是 Javascript 的特殊值，表示“非数字”(Not a Number），主要出现在将字符串解析成数字出错的场<br>合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 - &quot;x&#x27; // NaN</span><br></pre></td></tr></table></figure>

<p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于 <code>×</code>不是数值，所以最后得到结果为 <code>NaN</code> ，表示它<br>是“非数字”( <code>NaN </code>)。<br>另外，一些数学函数的运算结果会出现 <code>NaN </code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.acos(2) // NaN</span><br><span class="line">Math.1og(-1) // NaN</span><br><span class="line">Math.sqrt(-1) // NaN</span><br></pre></td></tr></table></figure>

<p><code>0</code>除以<code>0</code>也会得到 <code>NaN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 / 0  // NaN</span><br></pre></td></tr></table></figure>

<p>需要注意的是，<code>NaN</code> 不是一种独立的数据类型而是一种特殊数值，它的数据类型依然厲于 <code>Number</code><br>使用<code>typeof</code> 运算符可以看得很清楚。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof NaN   // &#x27;number&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="判断NaN的方法"><a href="#判断NaN的方法" class="headerlink" title="判断NaN的方法"></a>判断NaN的方法</h4><p><code>isNaN</code> 方法可以用来判断一个值是否为<code> NaN</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(NaN) // true</span><br><span class="line">isNaN(123) // false</span><br></pre></td></tr></table></figure>

<p>但是，<code>isNaN</code> 只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被<br>先转成<code>NaN</code>，所以最后返回 <code>true</code>，这一点要特别引起注意。也就是说，<code>isNaN </code>为<code>true</code> 的值，有可能不<br>是<code>NaN</code>，而是一个字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(&#x27;Hello&quot;) // true</span><br><span class="line">// 相当于</span><br><span class="line">isNaN(Number(&#x27;Hello&#x27;)) // true</span><br></pre></td></tr></table></figure>

<p>出于同样的原因，对于对象和数组，<code>isNaN </code>也返回<code> true</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(&#123;&#125;) // true</span><br><span class="line">//等同于</span><br><span class="line">isNaN(Number(&#123;&#125;)) // true</span><br><span class="line">isNaN([&#x27;xzy&#x27;]) // true</span><br><span class="line">//等同于</span><br><span class="line">isNaN(Number([&#x27;xzy&#x27;])) // true</span><br></pre></td></tr></table></figure>

<p>但是，对于空数组和只有一个数值成员的数组， <code>isNaN</code> 返回 <code>false</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN([]) // false</span><br><span class="line">isNaN([123]) // false</span><br><span class="line">isNaN([&#x27;123&#x27;]) // false</span><br></pre></td></tr></table></figure>

<p>上面代码之所以返回 <code>false</code>，原因是这些数组能被<code>Number</code> 函数转成数值，请参见《数据类型转换》<br>节。<br>因此，使用 <code>isNaN</code> 之前，最好判断一下数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function myIsNaN (value) &#123;</span><br><span class="line">	return typeof value	===	&#x27;number&#x27; &amp;&amp; isNaN (value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断<code>NaN</code> 更可靠的方法是，利用<code>NaN</code> 是JavaScript之中唯一不等于自身的值这个特点，进行判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function myIsNaN (value) &#123;</span><br><span class="line">  return value !== value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串与数组"><a href="#字符串与数组" class="headerlink" title="字符串与数组"></a>字符串与数组</h4><p>字符串可以被视为字符数组 ，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从<br>0开始）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s=&#x27;hello&#x27;;</span><br><span class="line">s[0] // &quot;h&quot;</span><br><span class="line">s[1] // &quot;e&quot;</span><br><span class="line">s[4] // &quot;o&quot;</span><br><span class="line">// 直接对字符串使用方括号运算符</span><br><span class="line">&quot;hello&#x27;[1] //&quot;e&quot;</span><br></pre></td></tr></table></figure>

<p>如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 <code>undefined</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;abc&#x27;[3] // undefined</span><br><span class="line">&quot;abc&#x27;[-1] // undefined</span><br><span class="line">&#x27;abc&#x27;[&#x27;x&#x27;] // undefined</span><br></pre></td></tr></table></figure>

<p>但是，字符串与数组的相似性仅此而已。实际上，无法改变字符申之中的单个字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = &#x27;hello&#x27;;</span><br><span class="line"></span><br><span class="line">delete s[0];</span><br><span class="line">s // &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">s[1] = &#x27;a&#x27;;</span><br><span class="line">s //&quot;hello&quot;</span><br><span class="line"></span><br><span class="line">s[5] =&quot;!&quot;;</span><br><span class="line">s //&quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码表示，宁符串内部的单个字符无法改变和增删，这此操作会默默地失败。<br>字符串也无法直接使用数组的方法，必须通过<code> call</code>方法间接使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s = &#x27;hello&#x27;:</span><br><span class="line">s.join(&#x27;&#x27;) // TypeError: s.join is not a function</span><br><span class="line">Array.prototype.join.call(s,&#x27;&#x27;)  //&quot;h e l l o&quot;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果直接对字符串使用数组的<code>join</code>方法，会报错不存在该方法。但是，可以通过<code> call</code> 方<br>法，间接对字符串使用 <code>join </code>方法。<br>不过，由于字符串是只读的，那些会改变原数组的方法，比如<code>push()</code>、<code>sortr()</code>、<code>reverse()</code>、<code>splice()</code>都对字符串无效，只有将字符串显式转为数组后才能使用，参见《标准库》一章的数组部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var o1	= &#123;&#125;;</span><br><span class="line">var o2 = o1:</span><br><span class="line">o1 = 1;</span><br><span class="line">o2 // &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，    <code>o1</code>和<code>o2</code>指向同一个对象，然后<code>o1 </code>的值变为1，这时不会对<code>o2</code>产生影响，<code>o2</code>还是指向原<br>来的那个对象。<br>但是，这种引用只局限于对象，对于原始类型的数据则是传值引用，也就是说，都是值的拷贝。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 1:</span><br><span class="line">var y = x;</span><br><span class="line">x = 2;</span><br><span class="line">y //1</span><br></pre></td></tr></table></figure>

<p>上面的代码中，当x的值发生变化后，y 的值并不变，这就表示y和x并不是指向同-—个内存地址。</p>
<h4 id="表达式还是语句？"><a href="#表达式还是语句？" class="headerlink" title="表达式还是语句？"></a>表达式还是语句？</h4><p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; foo: 123 &#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含 <code>foo </code>属性的对象；第二种可能是 ，这是一个语句 ，表示一个代码区块，里面有一个标签<code>foo</code>，指向表<br>达式 <code>123</code>。<br>为了避免这种歧义 ，JavaScript规定，如果行首是大括号，一律解释为语句（即代码块）。如果要解释为<br>表达式（即对象），心须在大括号前加上圆括号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#123; foo: 123&#125;)</span><br></pre></td></tr></table></figure>

<p>这种差异在<code> eval</code> 语句中反映得最明显</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(&#x27;&#123;foo: 123&#125;&#x27;) 	// 123</span><br><span class="line">eval(&#x27;(&#123;foo: 123&#125;)&#x27;) 	// &#123;foo: 123&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果没有圆括号，<code>eval </code>将其理解为一个代码块；加上圆括号以后，就理解成一个对象</p>
<h4 id="查看所有属性"><a href="#查看所有属性" class="headerlink" title="查看所有属性"></a>查看所有属性</h4><p>查看一个对象本身的所有厲性，可以使用<code> object.keys</code> 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var o = &#123;</span><br><span class="line">  key1: 1,</span><br><span class="line">  key2: 2</span><br><span class="line">&#125;;</span><br><span class="line">Object.keys (o);</span><br><span class="line">// [&#x27;key1&#x27;, &#x27;key2&#x27;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 假设变量x未定义</span><br><span class="line">// 写法一:报错</span><br><span class="line">if (x) &#123; return 1; &#125;</span><br><span class="line">// 写法二:不正确</span><br><span class="line">if (window.x) &#123; return 1; &#125;</span><br><span class="line">// 写法三:正确</span><br><span class="line">if (&#x27;x&#x27; in window) &#123; return 1; &#125;</span><br></pre></td></tr></table></figure>

<p>上面三种写法之中,如果<code>x</code>不存在,第一种写法会报错;如果<code>x</code>的值对应布尔值<code>false </code>(比如<code>x</code>等于空字符串) ,第二种写法无法得到正确结果;只有第三种写法,才能正确判断变量<code>x</code>是否存在。</p>
<p><code>in</code>运算符的一个问题是,它不能识别对象继承的属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var o = new object();</span><br><span class="line">o.hasOwnProperty(&#x27;toString&#x27;)   // false</span><br><span class="line">&#x27;toString&#x27; in o   // true</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>tostring</code>方法不是对象<code>o</code>自身的属性,而是继承的属性，<code>hasOwnProperty </code>方法可以说明这一点。但是，<code>in</code>运算符不能识别,对继承的属性也返回<code>true</code>。</p>
<p>任何类型的数据，都可以放入数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [</span><br><span class="line">  &#123;a: 1&#125;,</span><br><span class="line">  [1, 2, 3],</span><br><span class="line">  function() &#123;return true;&#125;</span><br><span class="line">]:</span><br><span class="line">arr[0] // Object &#123;a: 1&#125;</span><br><span class="line">arr[1] // [1,2,3]</span><br><span class="line">arr[2] // function ()&#123;return true;&#125;</span><br></pre></td></tr></table></figure>

<p>上面数组<code>arr</code>的3个成员依次是对象、数组、函数。<br>如果数组的元素还是数组，就形成了多维数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = [[1, 2], [3, 4]];</span><br><span class="line">a[0][1] // 2</span><br><span class="line">a[1][1] // 4</span><br></pre></td></tr></table></figure>

<h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p>浏览器加载JavaScript脚本，主要通过<code>&lt;script&gt;</code>标签完成。正常的网页加载流程是这样的</p>
<ol>
<li>浏览器一边下载HTML网页，一 边开始解析</li>
<li>解析过程中，发现<code>&lt;script&gt;</code>标签</li>
<li>暂停解析，网页渲染的控制权转交给JavaScrip引擎</li>
<li>如果<code>&lt;script＞</code>标签引用了外部脚本，就下载该脚本，否则就直接执行</li>
<li>执行完毕，控制权交还道染 引擎，恢复往下解析HTML网页</li>
</ol>
<blockquote>
<p>加载外部脚本时，浏览器会暂停页面渲染，等待脚本下载并执行完成后，再继续渲染。原因是Javascript<br>可以修改DOM（比如使用<code>document.write</code> 方法），所以必须把控制权让给它，否则会导致复杂的线程<br>竞赛的门题。<br>如果外部脚本加载时间很长（比如一直无法完成下载），就会造成网页长时间失去响应，浏览器就会呈<br>现“假死’状态，这被称为“阻塞效应”。<br>为了避免这种情况，较好的做法是将<code>&lt;script&gt;</code>标签都放在页面底部，而不是头部。这样即使遇到脚本失<br>去响应 ，网页主体的渲染也已经完成了 ，用户至少可以看到内容，而不是面对一张空白的页面。<br>如果某些脚本代码非常重要，一定要放在页面头部的话，最好直接将代码嵌入页面，而不是连接外部脚本<br>文件，这样自縮短加载时间。<br>将脚本文件都放在网页尾部力载，还有一个好处。在DOM结构生成之前就调用DOM , JavaScript会报错，如果脚本都在网页尾部加载，就不存在这个问题，因为这时DOM肯定已经生成了。</p>
</blockquote>
<h4 id="base-64-编码"><a href="#base-64-编码" class="headerlink" title="base-64 编码"></a>base-64 编码</h4><p><a href="https://www.runoob.com/jsref/met-win-btoa.html">btoa()</a> 方法用于创建一个 base-64 编码的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.btoa(str)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/jsref/met-win-atob.html">atob()</a>方法用于解码使用 base-64 编码的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.atob(encodedStr)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str = &quot;RUNOOB&quot;;</span><br><span class="line">var enc = window.btoa(str);</span><br><span class="line">var dec = window.atob(enc);</span><br><span class="line"> </span><br><span class="line">var res = &quot;编码字符串为: &quot; + enc + &quot;&lt;br&gt;&quot; + &quot;解码后字符串为: &quot; + dec;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function b64Encode(str) &#123;</span><br><span class="line">    return btoa(encodeURIComponent(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function b64Decode(str) &#123;</span><br><span class="line">    return decodeURIComponent(atob(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JavaScript的垃圾回收机制"><a href="#JavaScript的垃圾回收机制" class="headerlink" title="JavaScript的垃圾回收机制"></a>JavaScript的垃圾回收机制</h4><ul>
<li>标记清除(mark and sweep )</li>
</ul>
<p>​    这是JavaSoript 最常见的拉圾回收方式。当变量进入执行环境的时候，比如在函数中声明一个变量，垃圾回收器将其标记为“进入环境”。当变量离开环境的时候（函数执行结束），将其标记为 “离开环境”。<br>​    垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量，以及被环境中变量所引用的变量(闭包）的标记。在完成这些之后仍然存在的标记就是要删除的变量。</p>
<ul>
<li>引用计数 (reference counting )</li>
</ul>
<p>​        在低版本的IE中经常会发生内存泄漏，很多时候就是因为它采用引用计数的方式进行垃圾回收。引用计数的第略是跟踪记录每个值被使用的次数。当声明了一个变量并将一个引用类型赋值给该变量的时候，这个值的引用次数就加 1。如果该变量的值变成了另外一个，则这个值的引用次数減1。当这个值的引用次数变为 0的时候，说明没有变量在使用，这个值没法被访问。因此，可以将它占用的空间回收，这样垃圾回收器会在运行的时候清理引用次数为0的值占用的空间。<br>​        在IE 中虽然Javascript 对象通过标记清除的方式进行垃圾回收，但是BOM 与 DOM对象是用引用计数的方式回收垃圾的。也就是说，只要涉及 BOM 和DOM，就会出现循环引用问题。</p>
<h4 id="DOM-节点的类型"><a href="#DOM-节点的类型" class="headerlink" title="DOM 节点的类型"></a>DOM 节点的类型</h4><ul>
<li>整个文档是一个文档(Document）节点。</li>
<li>每个 HTML 标签是一个元素（ Element）节点。</li>
<li>每一个HTML 属性是一个属性（Attribute）节点。</li>
<li>包含在HTML元素中的文本是文本（Text）节点。</li>
</ul>
<h4 id="script-标签中-defer-和async-属性的区别"><a href="#script-标签中-defer-和async-属性的区别" class="headerlink" title="script 标签中 defer 和async 属性的区别"></a>script 标签中 defer 和async 属性的区别</h4><ol>
<li>defer 属性规定是否延迟执行脚本，直到页面加载为止。async 属性规定脚本一旦可用，就异步执行</li>
<li>defer 并行加载Javaseript 文件，会按照页面上script 标签的顺序执行。async 并行加加载JavaScript 文件，下载完成立即执行，不会按照页面上script 标签的顺序执行。</li>
</ol>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在Javascript 中，函数即闭包，只有函数才会产生作用域</p>
<p>闭包有3个特性：</p>
<ol>
<li>函数嵌套函数</li>
<li>在函数内部可以引用外部的参数和变量</li>
<li>参数和变量不会以垃圾回收机制回收</li>
</ol>
<h4 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift()方法"></a>unshift()方法</h4><p>该方法在数组启动时起作用，与push()不同。它将参数成员添加到数组的顶部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name=[&quot;Miohn&quot;]</span><br><span class="line">name.unshift(&quot;charlie&quot;);</span><br><span class="line">name.unshift(&quot;joseph&quot;, &quot;Jane&quot;);</span><br><span class="line">console.log(name);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&quot;joseph&quot;, &quot;Jane&quot;, &quot;charlie&quot;, &quot;john&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="encodeURI-和-decodeURI-的作用"><a href="#encodeURI-和-decodeURI-的作用" class="headerlink" title="encodeURI()和 decodeURI()的作用"></a>encodeURI()和 decodeURI()的作用</h4><p>encodeURI()用于将 URL 转换为十六进制编码。而 decodeURI()用于将编码的 URL转换回正常 URL</p>
<h4 id="不建议在-JavaScript-中使用-innerHTML"><a href="#不建议在-JavaScript-中使用-innerHTML" class="headerlink" title="不建议在 JavaScript 中使用 innerHTML"></a>不建议在 JavaScript 中使用 innerHTML</h4><p>通过 innerHTML 修改内容，每次都会刷新，因此很慢。在ianerHTML 中没有验证的机会，因此更容易在文档中插入错误代码，使网页不稳定。</p>
<h4 id="在不支持-Javascript-的旧浏览器中隐藏-JavaScript-代码"><a href="#在不支持-Javascript-的旧浏览器中隐藏-JavaScript-代码" class="headerlink" title="在不支持 Javascript 的旧浏览器中隐藏 JavaScript 代码"></a>在不支持 Javascript 的旧浏览器中隐藏 JavaScript 代码</h4><p>在<code>&lt;script&gt;</code>标签之后的代码中添加<code>“&lt;!--”</code>，不带引号。<br>在<code>&lt;/script&gt;</code>标签之前添加<code>“// --&gt;”</code>，代码中没有引号。<br>旧浏览器现在将 JavaScript 代码视为一个长的HTML 注释，而支持 JavaSoript 的浏览器则将<code>“&lt;!--”</code> 和<code>“// --&gt;”</code>作为一行注释</p>
<h4 id="在DOM-操作中创建、添加、移除、替换、插入和查找节点"><a href="#在DOM-操作中创建、添加、移除、替换、插入和查找节点" class="headerlink" title="在DOM 操作中创建、添加、移除、替换、插入和查找节点"></a>在DOM 操作中创建、添加、移除、替换、插入和查找节点</h4><h5 id="创建新节点"><a href="#创建新节点" class="headerlink" title="创建新节点"></a>创建新节点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">createDocumentFragment()		// 创建一个 DOM 片段</span><br><span class="line">createElement)							// 创建一个具体的元素</span><br><span class="line">createlextNode()						// 创建一个文本节点</span><br></pre></td></tr></table></figure>

<h5 id="添加、移除、替换、插入节点"><a href="#添加、移除、替换、插入节点" class="headerlink" title="添加、移除、替换、插入节点"></a>添加、移除、替换、插入节点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendchild()</span><br><span class="line">removeChild()</span><br><span class="line">replaceChild()</span><br><span class="line">insertBefore()		// 并没有insertAfter()</span><br></pre></td></tr></table></figure>

<h5 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getElementsByTagName()	// 通过标签名称查找节点</span><br><span class="line">getElementsByName()			// 通过元素的 name 属性的值查找节点(IE容错能力较强，会得到一个数组，其中包括 id 等于name 值的节点)</span><br><span class="line">getElementById()				// 通过元素id 查找节点，具有唯一性</span><br></pre></td></tr></table></figure>

<h4 id="实现浏览器内多个标签页之间的通信"><a href="#实现浏览器内多个标签页之间的通信" class="headerlink" title="实现浏览器内多个标签页之间的通信"></a>实现浏览器内多个标签页之间的通信</h4><p>调用localstorge、cookie 等数据存储通信方式</p>
<h4 id="null-和undefined-的区别"><a href="#null-和undefined-的区别" class="headerlink" title="null 和undefined 的区别"></a>null 和undefined 的区别</h4><p>null 是一个表示“无”的对象，转为数值时为 0; undefined 是一个表示“无”的原始值，转为数值时为 NaN。</p>
<p>当声明的变量还未初始化时，变量的默认值为 undefined.</p>
<p>null 用来表示尚未存在的对象，常用来表示西数企图返回一个不存在的对象。</p>
<p>undefined 表示“缺少值”，即此处应该有一个值，但是还没有定义，典型用法是如下：</p>
<ol>
<li>如果变量声明了，但没有赋值，它就等于 undefined.</li>
<li>当调用函数时，如果没有提供应该提供的参数，该参数就等于 undefined.</li>
<li>如果对象没有赋值，该属性的值为 undefined.</li>
<li>当函数没有返回值时，默认返回 undefined.</li>
</ol>
<p>null 表示“没有对象”，即此处不应该有值，典型用法是如下：</p>
<ol>
<li>作为函数的参数，表示该函数的参数不是对象</li>
<li>作为对象原型链的终点</li>
</ol>
<h4 id="new-操作符的作用"><a href="#new-操作符的作用" class="headerlink" title="new 操作符的作用"></a>new 操作符的作用</h4><p>（1）创建一个空对象。</p>
<p>（2）由this 变量引用该对象。</p>
<p>（3）该对象继承该函数的原型（更改原型链的指向）。</p>
<p>（4）把属性和方法加入到this 引用的对象中</p>
<p>（5）新创建的对象由this 引用，最后隐式地返回this，过程如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = Base.prototype;</span><br><span class="line">Base.call(obj);</span><br></pre></td></tr></table></figure>

<h4 id="Javascript-延迟加载的方式"><a href="#Javascript-延迟加载的方式" class="headerlink" title="Javascript 延迟加载的方式"></a>Javascript 延迟加载的方式</h4><p>包括 defer 和async、动态创建DOM（创建script，插入DOM 中，加裁完毕后回调、按需异步载入 JavaScript.</p>
<h4 id="call-和apply-的区别和作用"><a href="#call-和apply-的区别和作用" class="headerlink" title="call()和apply()的区别和作用"></a>call()和apply()的区别和作用</h4><p>作用都是在函数执行的时候，动态改变函数的运行环境（执行上下文)。</p>
<p>call 和apply的第一个参数都是改变运行环境的对象</p>
<p>区别如下：<br>call从第二个参数开始，每一个参数会依次传递给调用函数；apply 的第二个参数是数组，数组的每一个成员会依次传递给调用函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func.call(funcl, varl, var2, var3)</span><br></pre></td></tr></table></figure>

<p>对应的 apply 写法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func.apply(funcl, [varl, var2, var3])</span><br></pre></td></tr></table></figure>

<h4 id="造成内存泄漏的操作"><a href="#造成内存泄漏的操作" class="headerlink" title="造成内存泄漏的操作"></a>造成内存泄漏的操作</h4><p>内存泄漏指不再拥有或需要任何对象（数据）之后，它们仍然存在于内存中</p>
<blockquote>
<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为0（没有其他对象引用过该对象），或对该对象的唯一引用是循环的，那么该对象占用的内存立即被回收。</p>
</blockquote>
<p>如果 setTimeout 的第一个参数使用字符串而非函数，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用旦彼此保留时，就会产生一个循环）等会造内存泄漏。</p>
<h4 id="IE与Firefox-的不同之处"><a href="#IE与Firefox-的不同之处" class="headerlink" title="IE与Firefox 的不同之处"></a>IE与Firefox 的不同之处</h4><p>(1）IE支持 currentStyle; Firefox 使用getComputStyle。<br>(2）IE使用innerText; Firefox 使用 textContent。<br>(3）在透明度滤镜方面，IE 使用 filter:alpha(opacity= num); Firefox 使用-moz-opacity: num<br>(4）在事件方面，IE使用attachEvent；Firefox 使用 addEventListener。<br>(5）对于鼠标位置：IE 使用event.clientX； Firefox 使用 event.pagex。<br>(6）IE使用event.stcElement; Firefox 使用event.target。<br>(7）要消除list 的原点，IE 中仅须使margin: 0即可达到最终效果；Firetox 中需要设置margin:0, padding:0 和 list-style:none.<br>(8）CSS 圆角：IE7以下不支持圆角。</p>
<h4 id="JavaScript-对象的几种创建方式"><a href="#JavaScript-对象的几种创建方式" class="headerlink" title="JavaScript 对象的几种创建方式"></a>JavaScript 对象的几种创建方式</h4><p>(1) 0bject 构造函数式。<br>(2）对象字面量式。<br>(3）工厂模式。<br>(4） 安全工厂模式。<br>(5）构造函数模式。<br>(6）原型模式。<br>(7）混合构造函数和原型模式。<br>(8）动态原型模式。<br>(9）寄生构造函数模式。<br>(10）稳妥构造函数模式。</p>
<h4 id="实现异步编程"><a href="#实现异步编程" class="headerlink" title="实现异步编程"></a>实现异步编程</h4><p>​        方法 1，通过回调函数。优点是简单、容易理解和部署；缺点是不利于代码的阅读和维护，各个部分之间高度耦合度（ Coupling )，流程混乱，而且每个任务只能指定一个回调函数。</p>
<p>​        方法 2，通过事件监听。可以绑定多个事件，每个事件可以指定多个回调函数，且可以“去耦合”（Decoupling )，有利于实现模块化；缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>
<p>​        方法3，采用发布/订阅方式。性质与“事件监听”类似，但是明显优于后者。</p>
<p>​        方法4，通过Promise 对象实现。Promise 对象是CommonJS工作组提出的一种规范，旨在为异步编程提供统一接口。它的思想是，每一个异步任务返回一个 Promise对象，该对象有一个then 方法，允许指定回调函数。</p>
<h4 id="Javascript-的同源策略"><a href="#Javascript-的同源策略" class="headerlink" title="Javascript 的同源策略"></a>Javascript 的同源策略</h4><p>​        同源策略是容户端脚本（尤其是Javascript）的重要安全度量标准。它最早出自Netscape Navigator 2.0，目的是防止某个文档或脚本从多个不同源装载</p>
<p>​        这里的同源策略指的是协议、域名、端口相同。同源策咯是一种安全协议。指一段脚本只能读取来自同一来源的窗口和文档的属性</p>
<h4 id="同源限制的原因"><a href="#同源限制的原因" class="headerlink" title="同源限制的原因"></a>同源限制的原因</h4><p>我们举例说明。比如一个黑客，他利用Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名、密码登录时，他的页面就可以通过 JavaScript 读取到你表单上input 中的内容，这样黑客就会轻松得到你的用户名和密码</p>
<h4 id="在Javascript-中，函数是第一类对象"><a href="#在Javascript-中，函数是第一类对象" class="headerlink" title="在Javascript 中，函数是第一类对象"></a>在Javascript 中，函数是第一类对象</h4><p>第一类函数即JavaSaript 中的函数。这通常意味着这些函数可以作为参数传递给其他函数，作为其他函数的值返回，分配给变量，也可以存储在数据结构中</p>
<h4 id="事件-IE-与Firefox-的事件机制的区别-阻止冒泡"><a href="#事件-IE-与Firefox-的事件机制的区别-阻止冒泡" class="headerlink" title="事件/IE 与Firefox 的事件机制的区别/阻止冒泡"></a>事件/IE 与Firefox 的事件机制的区别/阻止冒泡</h4><p>​        事件是在网页中的某个操作（有的操作对应多个事件）。例如，当单击一个按钮时，就会产生一个事件，它可以被JavaSeript 侦测到。</p>
<p>​        在事件处理机制上，IE支持事件冒泡;Firefox 同时支持两种事件模型，也就是捕获型事件和冒泡型事件。</p>
<p>​        阻止方法是 ev.stopPropagation()。注意旧版IE 中的方法 ev.cancelBubble =true。</p>
<h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><p>在 JavaScript 中，在向执行环境中加載数据时，解析器对函数声明和函数表达式并非是一视同仁的。解析器会首先读取函数声明，并使它在执行任何代码之前可用（可以访问）。至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正解析和执行它。</p>
<h4 id="删除一个-cookie"><a href="#删除一个-cookie" class="headerlink" title="删除一个 cookie"></a>删除一个 cookie</h4><p>为了删除 cookie，要修改expires</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.cookie = &#x27;user=icketang;expires = &#x27; + new Date(0)</span><br></pre></td></tr></table></figure>

<h4 id="求一个字符串的长度（单位是字节"><a href="#求一个字符串的长度（单位是字节" class="headerlink" title="求一个字符串的长度（单位是字节)"></a>求一个字符串的长度（单位是字节)</h4><p>假设一个英文字符占用一字节，一个中文字符占用两字节：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function GetBytes (str)&#123;</span><br><span class="line">	var len = str.length;</span><br><span class="line">	var bytes = len;</span><br><span class="line">	for(var i =0; i&lt;len; i++) &#123;</span><br><span class="line">		if (str.charcodeAt(i) ＞255 ) bxtes ++;</span><br><span class="line">	&#125;</span><br><span class="line">  return bytes;</span><br><span class="line">&#125;</span><br><span class="line">alert (GetBvtes (&quot;he11o, 您好！&quot;）;</span><br></pre></td></tr></table></figure>

<h4 id="对于元素，atribute-和-property-的区别"><a href="#对于元素，atribute-和-property-的区别" class="headerlink" title="对于元素，atribute 和 property 的区别"></a>对于元素，atribute 和 property 的区别</h4><p>​        attibute 是DOM 元素在文档中作为HTML标签拥有的属性；property 就是 DOM元素在 JavaScript 中作为对象拥有的属性</p>
<p>​        对于HTML 的标准属性来说，attribute 和 property 是同步的，会自动更新，但是对于自定义的属性来说，它们是不同步的</p>
<h4 id="延迟脚本在-JavaScript-中的作用"><a href="#延迟脚本在-JavaScript-中的作用" class="headerlink" title="延迟脚本在 JavaScript 中的作用"></a>延迟脚本在 JavaScript 中的作用</h4><p>默认情况下，在页面加载期间，HITML代码的解析将暂停；直到脚本停止执行。这意味着，如果服务器速度较慢或者脚本特别 “沉重”，则会导致网页延迟。在使用Deferred 时，脚本会延迟执行，直到HTML 解析器运行。这缩短了网页的加载时间，并且它们的显示速度更快。</p>
<h4 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure )"></a>闭包(closure )</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function hello()&#123;</span><br><span class="line">  // 函数执行完毕，变量仍然存在</span><br><span class="line">  var num = 100:</span><br><span class="line">  var showResult= function () &#123; alert (num); &#125;</span><br><span class="line">  num++;</span><br><span class="line">  return showResult;</span><br><span class="line">&#125;</span><br><span class="line">var showResult= hello();</span><br><span class="line">showResult()		// 执行结果：弹出 101</span><br></pre></td></tr></table></figure>

<p>执行 hello()后，hello()用包内部的变量会存在，而闭包内部函数的内部变量不会存在，使得 Javascript 的垃圾回收机制不会收回 hello()占用的资源，因为 hello()中内部函数的执行需要依赖hello()中的变量。</p>
<h4 id="判断一个对象是否属于某个类"><a href="#判断一个对象是否属于某个类" class="headerlink" title="判断一个对象是否属于某个类"></a>判断一个对象是否属于某个类</h4><p>使用instanceof 关键字，判断一个对象是否是类的实例化对象；使用constructor属性，判断一个对象是否是类的构造函数</p>
<h4 id="JavaScript-中使用事件处理程序"><a href="#JavaScript-中使用事件处理程序" class="headerlink" title="JavaScript 中使用事件处理程序"></a>JavaScript 中使用事件处理程序</h4><p>事件是由用户与页面的交互（例如单击链接或填写表单）导致的操作。需要一个事件处理程序来保证所有事件的正确执行。事件处理程序是对象的额外属性。此属性包括事件的名称和事件发生时采取的操作。</p>
<h4 id="在Javascript-中有一个函数，执行直接对象查找时，它始终不会查找原型，这个函数是hasOwnProperty"><a href="#在Javascript-中有一个函数，执行直接对象查找时，它始终不会查找原型，这个函数是hasOwnProperty" class="headerlink" title="在Javascript 中有一个函数，执行直接对象查找时，它始终不会查找原型，这个函数是hasOwnProperty."></a>在Javascript 中有一个函数，执行直接对象查找时，它始终不会查找原型，这个函数是hasOwnProperty.</h4><h4 id="在Javascript-中使用-DOM"><a href="#在Javascript-中使用-DOM" class="headerlink" title="在Javascript 中使用 DOM"></a>在Javascript 中使用 DOM</h4><p>DOM 代表文档对象模型，并且负责文档中各种对象的相互交互。DOM 是开发网页所必需的，其中包括诸如段落、链接等对象。可以操作这些对象，如添加或删除等。为此，DOM还需要向网页添加额外的功能。</p>
<h4 id="document-write-和-innerHTML-的区别"><a href="#document-write-和-innerHTML-的区别" class="headerlink" title="document.write 和 innerHTML 的区别"></a>document.write 和 innerHTML 的区别</h4><p>document.write 重绘整个 页面；innerHTML可以重绘页面的一部分，</p>
<h4 id="在-JavaScript-中读取文件的方法"><a href="#在-JavaScript-中读取文件的方法" class="headerlink" title="在 JavaScript 中读取文件的方法"></a>在 JavaScript 中读取文件的方法</h4><h5 id="读取服务器中的文件内容"><a href="#读取服务器中的文件内容" class="headerlink" title="读取服务器中的文件内容"></a>读取服务器中的文件内容</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function readAjaxFile (url)&#123;</span><br><span class="line">  // 创建xhr</span><br><span class="line">  var xhr	= new XMLHttpRequest();</span><br><span class="line">  // 监听状态</span><br><span class="line">  xhr.onreadystatechange	= function()&#123;</span><br><span class="line">  // 监听状态值是 4</span><br><span class="line">  if(xhr.readyState === 4 &amp;&amp; shr.status === 200)&#123;</span><br><span class="line">    console.log (xhr.responseText)</span><br><span class="line">    // 打开请求</span><br><span class="line">    xhr.open(&quot;GET&#x27;, url, true)</span><br><span class="line">    //发送数据</span><br><span class="line">    xhr.send(nul1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="读取本地计算机中的内容"><a href="#读取本地计算机中的内容" class="headerlink" title="读取本地计算机中的内容"></a>读取本地计算机中的内容</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function readInputFile(id)&#123;</span><br><span class="line">  var file = document.getElementById(id).files[0];</span><br><span class="line">  // 实例化 FileReader</span><br><span class="line">  var reader = new FileReader();</span><br><span class="line">  // 读取文件</span><br><span class="line">  reader.readAsText(file)</span><br><span class="line">  // 监听返回</span><br><span class="line">  reader.onload = function(data) (</span><br><span class="line">    console.log(data, this.result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分配对象属性"><a href="#分配对象属性" class="headerlink" title="分配对象属性"></a>分配对象属性</h4><p>将属性分配给对象的方式与赋值给变量的方式相同。例如，表单对象的操作值以下列方式分配给”submit”：document.form.action =”submit”</p>
<h4 id="书写-JavaScript-语句的基本规范"><a href="#书写-JavaScript-语句的基本规范" class="headerlink" title="书写 JavaScript 语句的基本规范"></a>书写 JavaScript 语句的基本规范</h4><ol>
<li>不要在同一行声明多个变量。</li>
<li>应使用===/!==来比较true/false 或者数值。</li>
<li>使用对象字面量替代new Array这种形式。</li>
<li>不要使用全局函数。</li>
<li>switch 语句必须带有default 分支。</li>
<li>函数不应该有时有返回值，有时没有返回值。</li>
<li>for循环必须使用大括号括起来。</li>
<li>语句必须使用大括号括起来</li>
<li>for in 循环中的变量应该使用 var 关键字明确限定的作用域，从而避免作用域污染</li>
</ol>
<h4 id="去除前后空格"><a href="#去除前后空格" class="headerlink" title="去除前后空格"></a>去除前后空格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="保留三位小数并四舍五入"><a href="#保留三位小数并四舍五入" class="headerlink" title="保留三位小数并四舍五入"></a>保留三位小数并四舍五入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const rounded = Math.round(val * 1000) / 1000;</span><br></pre></td></tr></table></figure>

<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p><a href="https://zhuanlan.zhihu.com/p/269239904">纯函数要满足以下三点：</a></p>
<ul>
<li>相同输入总是会返回相同的输出。</li>
<li>不产生副作用。</li>
<li>不依赖于外部状态。</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/139659155">满足以下条件的函数是纯函数：</a></p>
<ul>
<li>它应始终返回相同的值。不管调用该函数多少次，无论今天、明天还是将来某个时候调用它。</li>
<li>自包含（不使用全局变量）。</li>
<li>它不应修改程序的状态或引起副作用（修改全局变量）。</li>
</ul>
<p><a href="https://www.haorooms.com/post/jquery_scroll_upanddown">jquery判断页面滚动条(scroll)是上滚还是下滚，且是否滚动到头部或者底部</a></p>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa-笔记</title>
    <url>/2021/01/20/Koa-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Pt41127sj?from=search&seid=17378531192218366513">技术胖-koa2教程</a>    <a href="http://www.jspang.com/detailed?id=34">技术胖博客笔记</a></p>
<h4 id="第01节：Koa开发环境搭建"><a href="#第01节：Koa开发环境搭建" class="headerlink" title="第01节：Koa开发环境搭建"></a>第01节：Koa开发环境搭建</h4><p>1、npm init -y (-y可选)  ————生成package.json文件</p>
<p>2、npm install –save koa ————在开发环境安装koa</p>
<p>3、编写测试程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Koa = require(&#x27;koa&#x27;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = &#x27;Hello Winney&#x27;  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure>

<p>4、运行node index.js  （因为是基于node的，所以直接node **.js）</p>
<p>5、然后在浏览器中输入：<a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a></p>
<h4 id="第02节：async-await的使用方法"><a href="#第02节：async-await的使用方法" class="headerlink" title="第02节：async/await的使用方法"></a>第02节：async/await的使用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function testAsync() &#123;</span><br><span class="line">	return &#x27;Hello async&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>加上async，就把这个方法变成了异步的</p>
<p>启用了async，返回的不是一个普通字符串，而是一个promise</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getSomething() &#123;</span><br><span class="line">    return &#x27;something&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function testAsync() &#123;</span><br><span class="line">    return &#x27;Helllo Async&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const result = testAsync();</span><br><span class="line">console.log(result);</span><br><span class="line">getSomething();</span><br></pre></td></tr></table></figure>

<h4 id="await：async-wait"><a href="#await：async-wait" class="headerlink" title="await：async wait"></a>await：async wait</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getSomething() &#123;</span><br><span class="line">    return &#x27;something&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function testAsync() &#123;</span><br><span class="line">    return &#x27;Helllo Async&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">    const v1 = await getSomething();</span><br><span class="line">    const v2 = await testAsync();</span><br><span class="line">    console.log(v1, v2);</span><br><span class="line">    console.log(`$&#123;v1&#125; $&#123;v2&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>await不仅可以接收promise对象也可以接收普通返回值。</p>
</blockquote>
<h4 id="setTimeout延迟处理"><a href="#setTimeout延迟处理" class="headerlink" title="setTimeout延迟处理"></a>setTimeout延迟处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function takeLongTime() &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; resolve(&#x27;long_time_value&#x27;), 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">    const v = await takeLongTime();</span><br><span class="line">    console.log(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>node demo.js     输入命令后，3秒后出现结果</p>
</blockquote>
<h4 id="第03节：Get请求的接收"><a href="#第03节：Get请求的接收" class="headerlink" title="第03节：Get请求的接收"></a>第03节：Get请求的接收</h4><p>监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.listen();</span><br></pre></td></tr></table></figure>

<p>query和querystring区别</p>
<ul>
<li><p>query：返回的是格式化好的参数对象。</p>
</li>
<li><p>querystring：返回的是请求字符串</p>
</li>
</ul>
<blockquote>
<p>在koa2中GET请求通过request接收，但是接受的方法有两种：query和querystring。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Koa = require(&#x27;koa&#x27;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async(ctx) =&gt; &#123;</span><br><span class="line">    let url = ctx.url;</span><br><span class="line"></span><br><span class="line">    //从request中获取GET请求</span><br><span class="line">    let request = ctx.request;</span><br><span class="line">    let req_query = request.query;</span><br><span class="line">    let req_querystring = request.querystring;</span><br><span class="line"></span><br><span class="line">    //从上下文中直接获取</span><br><span class="line">    let ctx_query = ctx.query;</span><br><span class="line">    let ctx_querystring = ctx.querystring;</span><br><span class="line"></span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        url,</span><br><span class="line">        req_query,</span><br><span class="line">        req_querystring,</span><br><span class="line">        ctx_query,</span><br><span class="line">        ctx_querystring</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;demo server is starting at port 3000&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:3000/%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:3000/在页面中显示：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;url&quot;: &quot;/&quot; , &quot;req_query&quot;: &#123;&#125;, &quot;reg_querystring&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:3000/?user=winney&amp;age=26%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%AD%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:3000/?user=winney&amp;age=26在页面中显示：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;url&quot; :&quot;/?user=winney&amp;age=26&quot; , &quot;req_query&quot;: &#123;&quot;user&quot;:&quot;winney, &quot;age&quot;: &quot;26&quot;&#125;,&#x27;req_querystring &quot;: &quot;user=winney&amp;age=26&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们可以使用浏览器插件-iFormatTool，让内容更清晰。图片中我们可以清楚看到query是一个对象，而querystring就是一个普通的字符串。</p>
</blockquote>
<p>下载地址：<a href="http://www.pc6.com/soft/FireFox_579049.html">http://www.pc6.com/soft/FireFox_579049.html</a></p>
<blockquote>
<p>将解压后里面的.crx文件拖拽到谷歌浏览器的扩展程序中，选择”添加”</p>
</blockquote>
<h4 id="添加扩展程序成功后，在页面中可以看到json格式的数据"><a href="#添加扩展程序成功后，在页面中可以看到json格式的数据" class="headerlink" title="添加扩展程序成功后，在页面中可以看到json格式的数据"></a>添加扩展程序成功后，在页面中可以看到json格式的数据</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Koa-%E7%AC%94%E8%AE%B0/note1.png" alt="谷歌浏览器添加查看json格式数据的扩展"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>MangoDB</title>
    <url>/2021/01/20/MangoDB/</url>
    <content><![CDATA[<p><a href="https://www.mongodb.com/">mongoDB官网</a>    <a href="https://www.mongodb.org.cn/">mongoDB中文官网</a>  </p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>参考教程：<a href="https://blog.csdn.net/mar_ljh/article/details/79286913">安装mongodb3.6之Installing MongoDB Compass…</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/MangoDB/note2.png" alt="安装教程"></p>
<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>环境变量加在“系统变量”中</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/MangoDB/note3.png" alt="环境变量加在“系统变量”中"></p>
<h5 id="安装compass"><a href="#安装compass" class="headerlink" title="安装compass"></a><a href="https://docs.mongodb.com/manual/reference/program/install_compass/index.html">安装compass</a></h5><h4 id="备份与删除"><a href="#备份与删除" class="headerlink" title="备份与删除"></a>备份与删除</h4><p>备份：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongodump -h 127.0.0.1 -d company -o D:\software\MangoDB\backup\123</span><br></pre></td></tr></table></figure>

<p>恢复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongorestore -h 127.0.0.1 -d testDemo D:\software\MangoDB\backup\123\company</span><br></pre></td></tr></table></figure>



<p>  <a href="https://www.bilibili.com/video/av21989676?from=search&seid=13644841351714946278">【尚硅谷】前端视频_MongoDB夯实基础视频</a></p>
<ul>
<li><p>基本概念</p>
<p>数据库（database）</p>
<p>集合（collection）</p>
<p>文档（documen）</p>
<pre><code>-在MongoDB中，数据庳和集合都不需要手动创建，
    当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据庳和集合
</code></pre>
</li>
<li><p>基本指令</p>
<ul>
<li>show dbs</li>
<li>show databases<br>-显示当前的所有数据库</li>
<li>use 数据库名<br>-进入到指定的数据库中</li>
<li>db<br>-db表示的是当前所处的数据库</li>
<li>show collections<br>-显示数据库中所有的集合</li>
</ul>
</li>
</ul>
<h4 id="数据库（Database）"><a href="#数据库（Database）" class="headerlink" title="数据库（Database）"></a>数据库（Database）</h4><ul>
<li>数据库是按照数据结构来组织、存储和管理数据的仓库。</li>
<li>我们的程序都是在内存中运行的，一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失。</li>
<li>所以我们就需要将一些程序运行的数据持久化到硬盘之中，以确保数据的安全性。而数据库就是数据持久化的最佳选择。</li>
<li>说白了，数据库就是存储数据的仓库。</li>
</ul>
<h4 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h4><p>数据库主要分成两种:</p>
<ul>
<li><p>关系型数据库(RDBMS)</p>
<ul>
<li><p>MySQL、Oracle、DB2、SQL Server …..</p>
</li>
<li><p>关系数据库中全都是表</p>
</li>
</ul>
</li>
<li><p>非关系型数据库(NoSQL Not Only SQL)</p>
<ul>
<li>MongoDB、Redis……</li>
<li>键值对数据库</li>
<li>文档数据库MongoDB</li>
</ul>
</li>
</ul>
<h4 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库(database)"></a>数据库(database)</h4><ul>
<li><p>数据库的服务器</p>
<ul>
<li><p>服务器用来保存数据</p>
</li>
<li><p>mongod用来启动服务器</p>
</li>
</ul>
</li>
<li><p>数据库的客户端</p>
<ul>
<li><p>客户端用来操作服务器，对数据进行增删剧改查的操作</p>
</li>
<li><p>mongo用来启动客户端</p>
</li>
</ul>
</li>
</ul>
<h4 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h4><ul>
<li>MongoDB是为快速开发互联网Web应用而设计的数据库系统。</li>
<li>MongoDB的设计目标是极简、灵活、作为Web应用栈的一部分。</li>
<li>MongoDB的数据模型是面向文档的，所谓文档是一种类似于JSON的结构，简单理解MongoDB这个数据库中存的是各种各样的JSON。(BSON )</li>
</ul>
<h4 id="三个概念"><a href="#三个概念" class="headerlink" title="三个概念"></a>三个概念</h4><ul>
<li><p>数据库( database )<br>– 数据库是一个仓库，在仓库中可以存放集合。</p>
</li>
<li><p>集合( collection )<br>– 集合类似于数组，在集合中可以存放文档。</p>
</li>
<li><p>文档( document )</p>
<p>– 文档数据库中的最小单位，我们存储和操作的内容都是文档。</p>
</li>
</ul>
<h4 id="下载MongoDB"><a href="#下载MongoDB" class="headerlink" title="下载MongoDB"></a>下载MongoDB</h4><ul>
<li><p>下载地址</p>
<p> <a href="https://www.mongodb.org/dl/win32/">https://www.mongodb.org/dl/win32/</a></p>
</li>
<li><p>MongoDB的版本偶数版本为稳定版，奇数版本为开发版。</p>
</li>
<li><p>MongoDB对于32位系统支持不佳，所以3.2版本以后没有再对32位系统的支持。</p>
</li>
</ul>
<h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><ul>
<li>结构化查询语言</li>
<li>关系数据库全都同SQL来操作</li>
</ul>
<p>1.安装MongoDB</p>
<ul>
<li>安装</li>
<li>配置环境交量<br>C: \Program Files\MongoDB\Server\3.2\bin</li>
<li>在c盘根日录<ul>
<li>创建一个文件夹data</li>
<li>在data中创建一个文件夹db</li>
</ul>
</li>
<li>打开cmd命令行窗口<ul>
<li>输入mongod启动mongodb服务器</li>
<li>32位注意：<br>启动服务器时，需要输入如下内容：<br>mongod –storageEngine=mmapv1</li>
</ul>
</li>
<li>在打开一个cmd窗口<br>输入mongo连接mongodb ，出现  &gt;</li>
</ul>
<h4 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h4><ul>
<li><p>在C盘根目录下创建data文件夹，在data下创建db文件夹</p>
</li>
<li><p>打开CMD命令行窗口，输入mongod</p>
</li>
<li><p>32位系统第一次启动∶</p>
<p>mongod –storageEngine=mmapv1</p>
</li>
</ul>
<blockquote>
<p>端口号最大不要超过65535</p>
<p>mongod –dbpath 数据库路径 </p>
<p>如果不想使用默认的端口号， 可以 mongod –dbpath 数据库路径 –port 端口号</p>
</blockquote>
<p><strong>注：先开数据库，再开客户端  先 mongod 再mongo</strong></p>
<p>将MongoDB设置为系统服务，可以白动在后台启动，不需要每次都手动启动</p>
<ol>
<li><p>在c盘根目录创建data<br>在data 下创建db和log文件夹</p>
</li>
<li><p>创建配置文件<br>在目录C: \Program Files\MongoDB\Server\3.2下添加一个配置文件mongod.cfg</p>
</li>
<li><p>以管理员的身份打开命令行窗口</p>
</li>
<li><p>执行如下的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc.exe  create MongoDB binPath=&quot;\&quot;C:\Program Files mongoDB\Server\3.2\bin\mongod.exo\&quot; --service --config=\&quot;C:Program Files\MongoDB\Server\3.2\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot;</span><br><span class="line"></span><br><span class="line">sc.exe create MongoDB binPath=&quot;\&quot;mongod的bin目录\mongod.exe\&quot;--service --config=\&quot;mongo的安装目录\mongod.cfg\&quot;&quot; DisplayName=&quot;MongoDB&quot; start= “auto&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动mongodb服务</p>
</li>
<li><p>如果启动失败，证明上边的操作有误,<br>在控制台输入sc delete MongoDB别除之前配置的服务然后从第—步再来一次</p>
</li>
</ol>
<p><a href="https://docs.mongodb.com/manual/crud/">增删改查</a></p>
<h4 id="数据库服务器—mongoDB"><a href="#数据库服务器—mongoDB" class="headerlink" title="数据库服务器—mongoDB"></a>数据库服务器—mongoDB</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/MangoDB/note1.png" alt="数据库服务器—mongoDB"></p>
<h4 id="安装mongodb以及设置为windows服务-详细步骤"><a href="#安装mongodb以及设置为windows服务-详细步骤" class="headerlink" title="安装mongodb以及设置为windows服务 详细步骤"></a>安装mongodb以及设置为windows服务 详细步骤</h4><p><a href="https://blog.csdn.net/u010874036/article/details/51921206">参考教程</a></p>
<p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/">Install MongoDB Community Edition on Windows</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>MangoDB</category>
      </categories>
      <tags>
        <tag>MangoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2021/06/10/Markdown/</url>
    <content><![CDATA[<h4 id="Markdown合并表格单元格"><a href="#Markdown合并表格单元格" class="headerlink" title="Markdown合并表格单元格"></a>Markdown合并表格单元格</h4><p>Markdown本身不支持单元格合并</p>
<blockquote>
<p>考虑到 Markdown 支持 html ，<br>所以，我们可以通过插入 html 中的 table 来实现。</p>
</blockquote>
<h4 id="Html-合并行"><a href="#Html-合并行" class="headerlink" title="Html 合并行"></a>Html 合并行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;这里是合并行&lt;/td&gt;    </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;这里也是合并行&lt;/td&gt;    </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Html-合并列"><a href="#Html-合并列" class="headerlink" title="Html 合并列"></a>Html 合并列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td rowspan=&quot;2&quot;&gt;这里是合并列&lt;/td&gt;    </span><br><span class="line">        &lt;td &gt;行二列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td &gt;行三列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Html-合并行和列"><a href="#Html-合并行和列" class="headerlink" title="Html 合并行和列"></a>Html 合并行和列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第一列&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;第二列&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">        &lt;td colspan=&quot;2&quot;&gt;我是合并行&lt;/td&gt;    </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;行二列一&lt;/td&gt; </span><br><span class="line">        &lt;td&gt;行二列二&lt;/td&gt; </span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td rowspan=&quot;2&quot;&gt;我是合并列&lt;/td&gt;    </span><br><span class="line">        &lt;td &gt;行三列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td &gt;行四列二&lt;/td&gt;  </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<h5 id="在markdown文档中使用GitHub仓库的图片地址"><a href="#在markdown文档中使用GitHub仓库的图片地址" class="headerlink" title="在markdown文档中使用GitHub仓库的图片地址"></a>在markdown文档中使用GitHub仓库的图片地址</h5><ol>
<li><p>在GitHub中创建一个<code>Public</code>仓库存放图片</p>
<p>注意：建立<code>Private</code>仓库，图片访问时，后面会加上一个token值，过一段时间就会失效。（这个很关键）</p>
</li>
<li><p>在仓库中选择“Add file”——Upload files，直接把图片上传到仓库；也可以将仓库下载到本地，然后push上去</p>
</li>
<li><p>在仓库中，选择需要的图片点进去，然后选择“Download”按钮，会新开一个窗口显示图片</p>
</li>
<li><p>复制新开窗口中，复制图片的访问路径(域名地址栏)</p>
</li>
<li><p>在markdown中插入图片标签，如： <code>![加载失败的文字提示](图片的链接)</code></p>
</li>
</ol>
<h4 id="如何用markdown文档做任务清单"><a href="#如何用markdown文档做任务清单" class="headerlink" title="如何用markdown文档做任务清单"></a><a href="https://jingyan.baidu.com/article/ab69b27090131d2ca7189f85.html">如何用markdown文档做任务清单</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] aaa</span><br><span class="line">- [ ] bbb</span><br><span class="line">-空格[空格]空格aaaa</span><br></pre></td></tr></table></figure>

<h3 id="markdown编辑软件"><a href="#markdown编辑软件" class="headerlink" title="markdown编辑软件"></a>markdown编辑软件</h3><ul>
<li>Typora（收费了）</li>
<li>在VSCode中，安装Typora扩展（Edit markdown like typora in vscode.），还不错。跟Typora真的挺像的。</li>
</ul>
<h3 id="markdown自动生成器"><a href="#markdown自动生成器" class="headerlink" title="markdown自动生成器"></a>markdown自动生成器</h3><h5 id="docsify"><a href="#docsify" class="headerlink" title="docsify"></a><a href="https://docsify.js.org/#/">docsify</a></h5><h4 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h4>]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOs相关笔记</title>
    <url>/2021/10/01/MacOs%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Mac系统——iOS环境"><a href="#Mac系统——iOS环境" class="headerlink" title="Mac系统——iOS环境"></a>Mac系统——iOS环境</h4><h5 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h5><p>开源安装脚本库：<a href="https://gitee.com/cunkai/HomebrewCN">https://gitee.com/cunkai/HomebrewCN</a></p>
<p>复制以下内容到你的终端：<br>intel芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>回车运行，按照提示运行下去就可以了</p>
<p>错误<br>做完上面的傻瓜式操作，理论上就OK了，但是我这边出现了安装完后用不了的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<p>经过检查后发现，是因为M1芯片的包安装位置不在是以前的<code>/usr/local/</code><br>而是<code>/opt/homebrew</code>，所以要将配置文件里的环境变量改过来</p>
<p>1、首先进入根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<p>2、创建.zshrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch .zshrc</span><br></pre></td></tr></table></figure>

<p>3、打开文件进行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure>

<p>4、如果有旧的环境就修改，没有就新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/opt/homebrew/bin:$PATH</span><br><span class="line">export PATH=/opt/homebrew/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>5、保存<br>使用<code>command + s</code><br>6、生效环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source .zshrc</span><br></pre></td></tr></table></figure>

<p>7、测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew -v</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://blog.csdn.net/sinat_38184748/article/details/114115441">MacOs M1安装Homebrew 在国内最简单方法</a>——使用这个安装成功</p>
<p><a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）（Mac &amp; Linux）</a></p>
<p>旧文章：<a href="https://blog.csdn.net/sinat_38184748/article/details/99450330?spm=1001.2014.3001.5502">macOS安装Homebrew太慢，换用清华镜像</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>


<h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</span><br></pre></td></tr></table></figure>





<h4 id="安装watchman"><a href="#安装watchman" class="headerlink" title="安装watchman"></a>安装watchman</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>

<h5 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_NO_INSTALL_CLEANUP=TRUE</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/126640559?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166458144816782417056210%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166458144816782417056210&biz_id=&utm_medium=distribute.pc_search_result.none-task-code-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126640559-0-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=Disable%20this%20behaviour%20by%20setting%20HOMEBREW_NO_INSTALL_CLEANUP.%20Hide%20these%20hints%20with%20HOMEBREW_NO_ENV_HINTS%20(see%20%60man%20brew%60).">Mac系列之：Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW</a></p>
<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watchman -v</span><br></pre></td></tr></table></figure>

<h4 id="安装cocoapods"><a href="#安装cocoapods" class="headerlink" title="安装cocoapods"></a>安装cocoapods</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>







<p>镜像地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry 镜像地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ---- https://registry.npmjs.org/</span><br><span class="line">cnpm --- http://r.cnpmjs.org/</span><br><span class="line">taobao - https://registry.npmmirror.com</span><br><span class="line">edunpm - http://registry.enpmjs.org/</span><br><span class="line">eu ----- http://registry.npmjs.eu/</span><br><span class="line">au ----- http://registry.npmjs.org.au/</span><br><span class="line">sl ----- http://npm.strongloop.com/</span><br><span class="line">nj ----- https://registry.nodejitsu.com/</span><br><span class="line">pt ----- http://registry.npmjs.pt/</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>切换回淘宝镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>

<p>先用淘宝镜像安装项目，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure>

<p><code>安装不了cocoapods</code></p>
<p>切换到<code>https://registry.npmmirror.com/</code></p>
<p>切换到项目目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AwesomeProject</span><br></pre></td></tr></table></figure>

<p>再安装cocoapods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i cocoapods</span><br></pre></td></tr></table></figure>



<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.19</span><br><span class="line">warning ../../../../../package.json: No license field</span><br><span class="line">$ react-native run-ios</span><br><span class="line">info Found Xcode project &quot;AwesomeProject.xcodeproj&quot;</span><br><span class="line">info Building (using &quot;xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A&quot;)</span><br><span class="line">error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening AwesomeProject.xcodeproj.</span><br><span class="line">Command line invocation:</span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A</span><br><span class="line"></span><br><span class="line">User defaults from command line:</span><br><span class="line">    IDEPackageSupportUseBuiltinSCM = YES</span><br><span class="line"></span><br><span class="line">Prepare packages</span><br><span class="line"></span><br><span class="line">Computing target dependency graph and provisioning inputs</span><br><span class="line"></span><br><span class="line">Create build description</span><br><span class="line">Build description signature: bf2f29ad51ca6266b44cbb8d643576b3</span><br><span class="line">Build description path: /Users/yangyanyi/Library/Developer/Xcode/DerivedData/AwesomeProject-fgqiuteczcwroxgbdakmwcrknckt/Build/Intermediates.noindex/XCBuildData/bf2f29ad51ca6266b44cbb8d643576b3-desc.xcbuild</span><br><span class="line"></span><br><span class="line">note: Building targets in dependency order</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Copy Pods Resources&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Embed Pods Frameworks&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Bundle React Native code and images&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Start Packager&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line"></span><br><span class="line">** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://lightrun.com/answers/facebook-react-native-fresh-react-native-066-app-does-not-build-on-xcode-13-ios-116-compiler-error-on-sysuioo">Fresh react-native (0.66) app does not build on XCode 13, iOS 11.6: compiler error on SysUio.o</a>  </p>
<p>参考：<a href="https://stackoverflow.com/questions/55725042/error-failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-wit">error Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65. i can not Run my Project</a></p>
<p>原因可能是没有安装cocoapods成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ios </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<p>然后报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing CocoaAsyncSocket</span><br><span class="line">[!] /usr/local/bin/git clone https://github.com/robbiehanson/CocoaAsyncSocket.git /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt --template= --single-branch --depth 1 --branch 7.6.5</span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/robbiehanson/CocoaAsyncSocket.git/&#x27;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>(可能也不需要做下面这个设置，每次报以上错误的时候，一直pod install，直到安装成功)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://stackoverflow.com/questions/48987512/ssl-connect-ssl-error-syscall-in-connection-to-github-com443">SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</a></p>
<h4 id="hermes-engine的安装问题"><a href="#hermes-engine的安装问题" class="headerlink" title="hermes-engine的安装问题"></a>hermes-engine的安装问题</h4><p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing hermes-engine</span><br><span class="line">[!] /usr/bin/curl -f -L -o /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-67147-8lkp1c/file.tgz https://github.com/facebook/react-native/releases/download/v0.70.1/hermes-runtime-darwin-v0.70.1.tar.gz --create-dirs --netrc-optional --retry 2 -A &#x27;CocoaPods/1.11.3 cocoapods-downloader/1.5.1&#x27;</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0  496M    0 1343k    0     0   1299      0   4d 15h  0:17:38   4d 14h   894</span><br><span class="line">curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个问题折腾了好久好久好久好久……</p>
</blockquote>
<h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ol>
<li>打开一个终端，先执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&#x27;your.host:port&#x27; //your.host:port我的是127.0.0.1:1087</span><br><span class="line">export https_proxy=&#x27;your.host:port&#x27; your.host:port我的是127.0.0.1:1087</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>这个终端界面转到项目目录下，再执行pod install –verbose</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install --verbose</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在安装命令添加参数<code>--verbose</code>看打印详细信息</p>
</blockquote>
<p>参考：<a href="https://blog.csdn.net/BUG_delete/article/details/110133505?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&utm_relevant_index=1">Cocoapods安装私有库问题</a></p>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>然后自动执行<code>Generating Pods project</code></p>
<p>然后自动执行<code>Integrating client project</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Please close any current Xcode sessions and use `myapp.xcworkspace` for this project from now on.</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp` (`myapp.xcodeproj` project)</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp-myappTests` (`myapp.xcodeproj` project)</span><br><span class="line">  - Running post integrate hooks</span><br><span class="line">  - Writing Lockfile in `Podfile.lock`</span><br><span class="line">  - Writing Manifest in `Pods/Manifest.lock`</span><br><span class="line">  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only performed in repo update</span><br><span class="line"></span><br><span class="line">-&gt; Pod installation complete! There are 59 dependencies from the Podfile and 49 total pods installed.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据终端提示，如果想要使用刚添加的第三方库，必须打开<code>MyApp.xcworkspace</code>，而非之前的<code>MyApp.xcodeProj</code>。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/c19df91997fd">CocoaPods的安装与使用</a></p>
<h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn ios </span><br><span class="line">或</span><br><span class="line">yarn react-native run-ios</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo insecure &gt;&gt; ~/.curlrc然后 pod install</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">1.删除项目依赖包以及 yarn 缓存</span><br><span class="line">rm -rf node_modules &amp;&amp; yarn cache clean</span><br><span class="line">2.重新装包</span><br><span class="line">yarn install</span><br><span class="line">3.清除 React-Native 缓存</span><br><span class="line">rm -rf ~/.rncache</span><br></pre></td></tr></table></figure>



<p>如果iOS使用的是Mac M1的架构，可能还会遇到Cocoapods 的一些兼容问题。如果在安装 pods依赖时出现问题，可以尝试运行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo arch -x86_64 gem install ffi</span><br><span class="line">arch -x86_64 pod install</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/263303.htm">详解React Native项目中启用Hermes引擎</a></p>
<p><a href="https://blog.csdn.net/u010208471/article/details/92068560">解决 React-Native mac 运行报错 error Failed to build iOS project. We ran “xcodebuild” command but it exite</a></p>
<p><a href="https://developer.apple.com/forums/thread/682927">s</a></p>
<p><a href="https://cloud.tencent.com/developer/ask/sof/514376">更新到最新版本RN 0.64.0后，React本机应用程序将无法运行</a></p>
<p><a href="https://medium.com/alameda-dev/installing-react-native-mapbox-navigation-in-ios-e35d43c5987a">Installing React Native with Mapbox Navigation in iOS</a></p>
<p>参考：<a href="https://blog.csdn.net/LIUXIAOXIAOBO/article/details/82894101">[!] Error installing Fabric. /usr/bin/curl -f -L -o /var/folders</a></p>
<p>参考：<a href="https://www.jianshu.com/p/b079d6566c67">【解决】[!] Error installing Fabric. [!]/usr/bin/curl -f -L -o /var/folders</a></p>
<p><a href="https://blog.csdn.net/u012477117/article/details/122241972">Pod Error installing Bugly</a></p>
<p><a href="http://www.caotama.com/670255.html">pod install 报错 :error installing AMapFoundation ,iOS 大佬们来看一下</a></p>
<p><a href="https://stackoverflow.com/questions/65458086/failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-with-erro">Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65</a></p>
<p><a href="https://blog.csdn.net/qingpingguo12/article/details/126137315">镜像切换</a></p>
<p><a href="https://blog.csdn.net/CaptainJava/article/details/109132783">Mac全自动安装brew一键配置国内镜像源</a></p>
<p><a href="https://blog.csdn.net/hh680821/article/details/104936180?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166457782716782417034485%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166457782716782417034485&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104936180-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=homebrew%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Mac HomeBrew国内镜像安装方法</a></p>
<p><a href="https://github.com/yanue/V2rayU/releases/tag/3.3.0">科学上网</a></p>
<p>淘宝镜像：<a href="https://mirrors.aliyun.com/homebrew/?spm=a2c6h.13651104.0.0.1fc17608pdL2JD">https://mirrors.aliyun.com/homebrew/?spm=a2c6h.13651104.0.0.1fc17608pdL2JD</a></p>
<h4 id="Mac系统下——Android-环境"><a href="#Mac系统下——Android-环境" class="headerlink" title="Mac系统下——Android 环境"></a><a href="https://www.reactnative.cn/docs/environment-setup">Mac系统下——Android 环境</a></h4><p>Java Development Kit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew install --cask zulu11</span><br></pre></td></tr></table></figure>

<p>React Native 需要 Java Development Kit [JDK] 11。你可以在命令行中输入 <code>javac -version</code>（请注意是 javac，不是 java）来查看你当前安装的 JDK 版本</p>
<h5 id="3-配置-ANDROID-SDK-ROOT-环境变量"><a href="#3-配置-ANDROID-SDK-ROOT-环境变量" class="headerlink" title="3. 配置 ANDROID_SDK_ROOT 环境变量"></a>3. 配置 ANDROID_SDK_ROOT 环境变量<a href="https://www.reactnative.cn/docs/environment-setup#3-%E9%85%8D%E7%BD%AE-android_sdk_root-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"></a></h5><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。</p>
<p>具体的做法是把下面的命令加入到 shell 的配置文件中。如果你的 shell 是 zsh，则配置文件为<code>~/.zshrc</code>，如果是 bash 则为<code>~/.bash_profile</code>（可以使用<code>echo $0</code>命令查看你所使用的 shell。）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚</span></span><br><span class="line">export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/emulator</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools</span><br></pre></td></tr></table></figure>



<blockquote>
<p>译注：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在 Finder 中是隐藏的，并且这个文件有可能并不存在。可在终端下使用<code>vi ~/.zshrc</code>命令创建或编辑。如不熟悉 vi 操作，请点击<a href="http://www.eepw.com.cn/article/48018.htm">这里</a>学习。</p>
</blockquote>
<p>使用<code>source $HOME/.zshrc</code>命令来使环境变量设置立即生效（否则重启后才生效）。可以使用<code>echo $ANDROID_SDK_ROOT</code>检查此变量是否已正确设置。</p>
<blockquote>
<p>请确保你正确指定了 Android SDK 路径。你可以在 Android Studio 的”Preferences”菜单中查看 SDK 的真实路径，具体是<strong>Appearance &amp; Behavior</strong> → <strong>System Settings</strong> → <strong>Android SDK</strong>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MiniUI-笔记</title>
    <url>/2019/08/16/MiniUI-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://www.miniui.com/">MiniUI官网</a></p>
<h4 id="表单初始化"><a href="#表单初始化" class="headerlink" title="表单初始化"></a>表单初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;form id=&quot;fa&quot; name=&quot;fa&quot; autocomplete=&quot;off&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">function init()&#123;</span><br><span class="line">	mini.parse();</span><br><span class="line">	form = new mini.Form(&quot;fa&quot;);	</span><br><span class="line">&#125;</span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">	init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>是否显示分页：<code>showPager=&quot;true&quot;</code></p>
<p>分页显示条数：<code>pageSize=&quot;20&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">    &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div field=&quot;created_at&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;申请时间&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;real_name&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;申请人（代理）&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;name&quot; width=&quot;200&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;公司名称&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;money&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;当次申请金额&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;pledge&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;当次押金&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;agency_status_name&quot; width=&quot;60&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_agency_status_name&quot;&gt;申请人状态&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;remit_time&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;打款时间&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;remit_type_name&quot; width=&quot;120&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;打款方式&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;status_name&quot; width=&quot;60&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_status_name&quot;&gt;打款状态&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer&quot;&gt;操作&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>





<h4 id="输入框提示语-类似placeholder"><a href="#输入框提示语-类似placeholder" class="headerlink" title="输入框提示语-类似placeholder"></a>输入框提示语-类似placeholder</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">emptyText=&quot;请输入区服&quot;</span><br></pre></td></tr></table></figure>

<h4 id="表单元素必填及提示语"><a href="#表单元素必填及提示语" class="headerlink" title="表单元素必填及提示语"></a>表单元素必填及提示语</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">required=&quot;true&quot;</span><br><span class="line">requiredErrorText=&quot;区服不能为空&quot;</span><br></pre></td></tr></table></figure>

<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><ol>
<li><h5 id="自带验证方法"><a href="#自带验证方法" class="headerlink" title="自带验证方法"></a>自带验证方法</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a class=&quot;mini-button submit-button&quot;onclick=&quot;SubmitData();&quot;&gt;提交&lt;/a&gt;  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 提交事件</span><br><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">	form.validate();   // 框架自带验证表单的方法</span><br><span class="line">	if (form.isValid() == false) return false;   </span><br><span class="line">	</span><br><span class="line">	....// 其他代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  </span><br><span class="line">class=&quot;mini-textbox&quot; </span><br><span class="line">name=&quot;server_id&quot;  </span><br><span class="line">required=&quot;true&quot; </span><br><span class="line">requiredErrorText=&quot;区服不能为空&quot; </span><br><span class="line">value=&quot;&quot;</span><br><span class="line">style=&quot;width:200px;&quot; </span><br><span class="line">emptyText=&quot;请输入区服&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h5></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SubmitData() &#123;</span><br><span class="line">    var form_validate = true;</span><br><span class="line"></span><br><span class="line">    // 错误信息内容</span><br><span class="line">    var errorMsg = [&quot;提示：区间比例必须连续！&quot;, &quot;提示：区间范围错误！&quot;, &quot;提示：区间比例必须在0-100以内！&quot;, &quot;提示：区间必须输入0及正整数！&quot;, &quot;提示：区间比例必须输入0及正整数！&quot;, &quot;提示：请完整填写区间！&quot;, &quot;提示：请填写区间比例！&quot;];</span><br><span class="line">    //错误提示函数</span><br><span class="line">    function showError(msg, el) &#123;</span><br><span class="line">        var errorIcon = &#x27;&lt;span class=&quot;mini-errorIcon&quot; title=&quot;&#x27; + msg + &#x27;&quot;&gt;&lt;/span&gt;&#x27;;</span><br><span class="line">        var hasError = el.find(&quot;.mini-errorIcon&quot;).length;</span><br><span class="line">        if(hasError != 1) &#123;</span><br><span class="line">            el.append(errorIcon);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	.......</span><br><span class="line">    if(end_val != &quot;&quot; || percent_val != &quot;&quot;) &#123;</span><br><span class="line">        showError(errorMsg[5], $(this));</span><br><span class="line">        form_validate = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(form_validate == false) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	$.post(&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;, $(&quot;form&quot;).serialize(), function(response) &#123;</span><br><span class="line">		if (response.success)</span><br><span class="line">		&#123;</span><br><span class="line">			window.location.href = &quot;&#123;:U(&#x27;index&#x27;)&#125;&quot;;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			alert(response.msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,&quot;json&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="表单验证规则总结"><a href="#表单验证规则总结" class="headerlink" title="表单验证规则总结"></a><a href="http://www.miniui.com/demo/form/rules.html">表单验证规则总结</a></h4><h4 id="miniui-结束日期不能小于起始日期"><a href="#miniui-结束日期不能小于起始日期" class="headerlink" title="miniui 结束日期不能小于起始日期"></a>miniui 结束日期不能小于起始日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.HTML代码：</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">　　&lt;th class=&quot;nui-form-label&quot; style=&quot;width:15%;&quot;&gt;&lt;label for=&quot;report.startDate$text&quot; &gt;起始日期：&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">　　&lt;td style=&quot;width:35%;&quot; &gt;</span><br><span class="line">　　&lt;input id=&quot;report.startDate&quot; class=&quot;nui-datepicker&quot; style=&quot;width: 95%;&quot; name=&quot;report.startDate&quot; required=&quot;true&quot;/&gt;</span><br><span class="line">　　&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　&lt;th class=&quot;nui-form-label&quot; style=&quot;width:15%;&quot;&gt;&lt;label for=&quot;report.productCode$text&quot;&gt;结束日期：&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">　　&lt;td style=&quot;width:35%;&quot;&gt;</span><br><span class="line">　　&lt;input id=&quot;report.endDate&quot; class=&quot;nui-datepicker&quot; name=&quot;report.endDate&quot; style=&quot;width: 95%;&quot; required=&quot;true&quot; onvaluechanged=&quot;onValueChanged&quot;/&gt;</span><br><span class="line">　　&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2.JS代码：</span><br><span class="line"></span><br><span class="line">function onValueChanged(e)&#123;</span><br><span class="line">　　var startDate = mini.get(&quot;report.startDate&quot;).getFormValue();</span><br><span class="line">　　var endDate = e.value;</span><br><span class="line">　　if(startDate!=&quot;&quot;)&#123;</span><br><span class="line">	　　startDate=startDate.substring(0,4) + startDate.substring(5,7) + startDate.substring(8,10);</span><br><span class="line">	&#125;</span><br><span class="line">　　if(endDate!=&quot;&quot;)&#123;</span><br><span class="line">	　　endDate=endDate.substring(0,4) + endDate.substring(5,7) + endDate.substring(8,10);</span><br><span class="line">	&#125;</span><br><span class="line">　　if(startDate&gt;endDate)&#123;</span><br><span class="line">	　　e.isValid=false;</span><br><span class="line">		mini.alert(error);</span><br><span class="line">		mini.get(end).setValue(&quot;&quot;);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="日期插件-加上时分秒"><a href="#日期插件-加上时分秒" class="headerlink" title="日期插件-加上时分秒"></a>日期插件-加上时分秒</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">format=&quot;yyyy-MM-dd H:mm:ss&quot;  showTime=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传按钮"><a href="#文件上传按钮" class="headerlink" title="文件上传按钮"></a>文件上传按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input class=&quot;mini-htmlfile&quot; id=&quot;license&quot; name=&quot;license&quot; buttonText=&quot;浏览文件&quot; limitType=&quot;*.bmp;*.gif;*.png;*.jpg;*.jpeg&quot; required=&quot;true&quot; style=&quot;width:250px;&quot; onfileselect=&quot;fileChange(this)&quot;/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var inputFile = $(&quot;input:file&quot;).filter(&quot;:visible&quot;);</span><br><span class="line">$.ajaxFileUpload(&#123;</span><br><span class="line">    url: &quot;&#123;:U(&#x27;&#x27;)&#125;&quot;,</span><br><span class="line">    secureuri: false,</span><br><span class="line">    fileElementId: inputFile,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    data: data,</span><br><span class="line">    success: function (response, status) &#123;</span><br><span class="line">        if (response.success)&#123;</span><br><span class="line">            window.location.href = &quot;&#123;:U(&#x27;index&#x27;)&#125;&quot;;</span><br><span class="line">        &#125; else if(response.msg.file_errors) &#123;</span><br><span class="line">            var obj = response.msg.file_errors;</span><br><span class="line">            .....</span><br><span class="line"></span><br><span class="line">        &#125;else if(response.msg.status_error) &#123;</span><br><span class="line">           .....</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            alert(response.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: function () &#123;</span><br><span class="line">        $(&quot;#fa input:file&quot;).filter(&quot;:visible&quot;).each(function(i, e)&#123;</span><br><span class="line">            e.replaceWith(inputFile[i]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-按钮的文字"><a href="#文件上传-按钮的文字" class="headerlink" title="文件上传-按钮的文字"></a>文件上传-按钮的文字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buttonText=&quot;浏览文件&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-文件类型限制"><a href="#文件上传-文件类型限制" class="headerlink" title="文件上传-文件类型限制"></a>文件上传-文件类型限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">limitType=&quot;*.bmp;*.gif;*.png;*.jpg;*.jpeg&quot;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传-上传时的自定义验证"><a href="#文件上传-上传时的自定义验证" class="headerlink" title="文件上传-上传时的自定义验证"></a>文件上传-上传时的自定义验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input class=&quot;mini-htmlfile&quot; id=&quot;package_file&quot; name=&quot;package_file&quot; buttonText=&quot;浏览...&quot; limitType=&quot;*.apk;*.ipa&quot; onvalidation=&quot;fileValidation&quot; style=&quot;width:250px;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">function fileValidation(e) &#123;</span><br><span class="line">	if (e.value != &#x27;&#x27; &amp;&amp; e.isValid) &#123;</span><br><span class="line">		var fileName = getFileName(e.value);</span><br><span class="line">		var platform = $(&quot;input[name=&#x27;type&#x27;]:checked&quot;).val();</span><br><span class="line"></span><br><span class="line">		var uPattern = /^[a-z0-9A-Z._]+$/;</span><br><span class="line">		if(! uPattern.test(fileName)) &#123;</span><br><span class="line">			e.errorText = &#x27;母包文件名只能包含字母、数字、下横线&quot;_&quot;、点&quot;.&quot;&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		var arr = fileName.split(&quot;.&quot;);</span><br><span class="line">		if(platform == 1 &amp;&amp; arr[arr.length-1] != &quot;apk&quot;) &#123;</span><br><span class="line">			e.errorText = &#x27;上传文件格式为：*.apk&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line">		if(platform == 2 &amp;&amp; arr[arr.length-1] != &quot;ipa&quot;) &#123;</span><br><span class="line">			e.errorText = &#x27;上传文件格式为：*.ipa&#x27;;</span><br><span class="line">			e.isValid = false;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取表单数据"><a href="#获取表单数据" class="headerlink" title="获取表单数据"></a>获取表单数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = form.getData(true);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">	form.validate();</span><br><span class="line">	if (form.isValid() == false) return false;</span><br><span class="line"></span><br><span class="line">	var data= form.getData(true);</span><br><span class="line">	$.post(&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;, data, function(response) &#123;</span><br><span class="line">		if (response.success)</span><br><span class="line">		&#123;</span><br><span class="line">			alert(response.msg);</span><br><span class="line">			form.reset();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">            alert(response.msg);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;,&quot;json&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.reset();</span><br></pre></td></tr></table></figure>



<h4 id="传多个数据"><a href="#传多个数据" class="headerlink" title="传多个数据"></a>传多个数据</h4><p>name值使用<code>[]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input name=&quot;start[]&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="渲染表格数据-grid-load-data"><a href="#渲染表格数据-grid-load-data" class="headerlink" title="渲染表格数据-grid.load(data);"></a>渲染表格数据-grid.load(data);</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">    &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line">        &lt;div field=&quot;money&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;退款金额&lt;/div&gt;</span><br><span class="line">        &lt;div field=&quot;time&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot;&gt;退款时间&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    mini.parse();</span><br><span class="line">    grid = mini.get(&quot;datagrid1&quot;);</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    </span><br><span class="line">    data.agency_id = &#123;$agency_id&#125;;</span><br><span class="line">    </span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p><code>kindeditor</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var editor;</span><br><span class="line">KindEditor.ready(function(K) &#123;</span><br><span class="line">	editor = K.create(&#x27;textarea[name=&quot;content&quot;]&#x27;, &#123;</span><br><span class="line">		resizeType : 1,</span><br><span class="line">		allowPreviewEmoticons : false,</span><br><span class="line">		allowImageUpload : false,</span><br><span class="line">		items : [</span><br><span class="line">			&#x27;source&#x27;, &#x27;fontsize&#x27;, &#x27;|&#x27;, &#x27;forecolor&#x27;, &#x27;hilitecolor&#x27;, &#x27;bold&#x27;, &#x27;italic&#x27;, &#x27;underline&#x27;,</span><br><span class="line">			&#x27;removeformat&#x27;, &#x27;|&#x27;, &#x27;justifyleft&#x27;, &#x27;justifycenter&#x27;, &#x27;justifyright&#x27;, &#x27;insertorderedlist&#x27;,</span><br><span class="line">			&#x27;insertunorderedlist&#x27;, &#x27;|&#x27;, &#x27;link&#x27;]</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // 安卓手机兼容性处理(KindEditor在移动端默认显示源码模式)</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    var isAndroid = u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Adr&#x27;) &gt; -1;</span><br><span class="line">    if(isAndroid) &#123;</span><br><span class="line">        $(&quot;.ke-outline[data-name=&#x27;source&#x27;]&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="alert弹窗"><a href="#alert弹窗" class="headerlink" title="alert弹窗"></a>alert弹窗</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mini.alert(result.msg);</span><br></pre></td></tr></table></figure>

<h4 id="复选框-全选"><a href="#复选框-全选" class="headerlink" title="复选框-全选"></a>复选框-全选</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;all_apps&quot; class=&quot;mini-checkbox&quot; readOnly=&quot;false&quot; text=&quot;全选&quot; onvaluechanged=&quot;onValueChangedAll&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;ul class=&quot;checkbox-list w60&quot;&gt;</span><br><span class="line">    &lt;foreach name=&quot;app_list&quot; item=&quot;item&quot;&gt;</span><br><span class="line">        &lt;li title=&quot;&#123;$item.app_name&#125;&quot;&gt;</span><br><span class="line">            &lt;div onValueChanged=&quot;onValueChanged&quot; id=&quot;app_check&#123;$item.app_id&#125;&quot; name=&quot;app_id[]&quot; trueValue=&quot;&#123;$item.app_id&#125;&quot; class=&quot;mini-checkbox app-check&quot; text=&quot;&#123;$item.app_name&#125;&quot; checked=&quot;&lt;if condition=&quot;in_array($item[&#x27;app_id&#x27;], $user_own_app)&quot;&gt;true&lt;else /&gt;false&lt;/if&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化全选</span><br><span class="line">isCheckAll();</span><br><span class="line">//判断是否全选</span><br><span class="line">function isCheckAll()&#123;</span><br><span class="line">    var num = 0;</span><br><span class="line">	for(var i = 0; i &lt; id_list.length; i++) &#123;</span><br><span class="line">		var obj = mini.get(id_list[i]).checked;</span><br><span class="line">		if(obj == true) &#123;</span><br><span class="line">			num +=1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//是否全选</span><br><span class="line">	if(num == id_list.length)&#123;</span><br><span class="line">		mini.get(&quot;all_apps&quot;).setChecked(true);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		mini.get(&quot;all_apps&quot;).setChecked(false);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选某个游戏</span><br><span class="line">function onValueChanged(e) &#123;</span><br><span class="line">    isCheckAll();</span><br><span class="line">&#125;</span><br><span class="line">//全选按钮</span><br><span class="line">function onValueChangedAll(e) &#123;</span><br><span class="line">	var checked = this.getChecked();</span><br><span class="line"></span><br><span class="line">	for(var i = 0; i &lt; id_list.length; i++) &#123;</span><br><span class="line">		var obj = mini.get(id_list[i]);</span><br><span class="line">		if(checked)&#123;</span><br><span class="line">			obj.setChecked(true);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			obj.setChecked(false);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输入框事件监听"><a href="#输入框事件监听" class="headerlink" title="输入框事件监听"></a><a href="http://www.miniui.com/docs/api/index.html#ui=textbox">输入框事件监听</a></h4><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">EventObject</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">valuechanged</td>
<td align="left"></td>
<td align="left">值改变时发生</td>
</tr>
<tr>
<td align="left">validation</td>
<td align="left"></td>
<td align="left">验证时发生</td>
</tr>
<tr>
<td align="left">enter</td>
<td align="left"></td>
<td align="left">回车时发生</td>
</tr>
<tr>
<td align="left">keydown</td>
<td align="left"></td>
<td align="left">键盘按下时发生</td>
</tr>
<tr>
<td align="left">keyup</td>
<td align="left"></td>
<td align="left">键盘按起时发生</td>
</tr>
<tr>
<td align="left">focus</td>
<td align="left"></td>
<td align="left">获取焦点时发生</td>
</tr>
<tr>
<td align="left">blur</td>
<td align="left"></td>
<td align="left">失去焦点时发生</td>
</tr>
</tbody></table>
<p><code>注意：使用时，需要加上on</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onblur=&quot;onValueChanged&quot;</span><br></pre></td></tr></table></figure>

<h4 id="设置表单的值"><a href="#设置表单的值" class="headerlink" title="设置表单的值"></a>设置表单的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  class=&quot;mini-textbox&quot; name=&quot;game_id&quot; id=&quot;game_id&quot; required=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// mini.get(ID值).setValue(str)</span><br><span class="line">mini.get(&#x27;game_id&#x27;).setValue(&#x27;7000,7001&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="1-60的整数的验证"><a href="#1-60的整数的验证" class="headerlink" title="1-60的整数的验证"></a>1-60的整数的验证</h4><p><code>vtype=&quot;int;range:1,60&quot;</code>, vtype中可以填写多个验证规则，用<code>;</code>隔开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input  class=&quot;mini-textbox&quot; name=&quot;act_days&quot; vtype=&quot;int;range:1,60&quot; intErrorText=&quot;请填写1-60的正整数&quot; rangeErrorText=&quot;请填写1-60的正整数&quot; required=&quot;true&quot; requiredErrorText=&quot;活动天数不能为空&quot; value=&quot;&quot; style=&quot;width:200px;&quot; emptyText=&quot;请输入活动天数&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.miniui.com/demo/form/rules.html">表单验证规则总结</a></p>
<p><a href="http://www.miniui.com/docs/api/index.html#ui=textbox">Properties</a></p>
<h4 id="自定义表格里面的内容"><a href="#自定义表格里面的内容" class="headerlink" title="自定义表格里面的内容"></a>自定义表格里面的内容</h4><p>使用<code>renderer</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;mini-fit&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;datagrid1&quot; class=&quot;mini-datagrid&quot; style=&quot;width:100%;height:100%;&quot; url=&quot;&#123;:U(&#x27;&#x27;)&#125;&quot;  idField=&quot;id&quot; showPager=&quot;true&quot; pageSize=&quot;20&quot;&gt;</span><br><span class="line">        &lt;div property=&quot;columns&quot;&gt;</span><br><span class="line">			.......</span><br><span class="line">            &lt;div field=&quot;&quot; width=&quot;100&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer_package_upload&quot;&gt;上传母包&lt;/div&gt;</span><br><span class="line">            &lt;div field=&quot;&quot; width=&quot;150&quot; headerAlign=&quot;center&quot; align=&quot;center&quot; allowSort=&quot;false&quot; renderer=&quot;onActionRenderer&quot;&gt;操作&lt;/div&gt;</span><br><span class="line">            .......</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 上传母包</span><br><span class="line">function onActionRenderer_package_upload(e) &#123;</span><br><span class="line">    var grid      = e.sender;</span><br><span class="line">    var record    = e.record;</span><br><span class="line">    </span><br><span class="line">    var app_id    = record.app_id;</span><br><span class="line">    var app_package_exists = record.app_package_exists;</span><br><span class="line">    </span><br><span class="line">    var package_edit = &#x27;&#123;$access[&#x27;package_edit&#x27;]&#125;&#x27;;</span><br><span class="line">    if (package_edit) &#123;</span><br><span class="line">    	if(app_package_exists == 1)&#123;</span><br><span class="line">    		return &#x27;&lt;span class=&quot;pointer&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;jump(\&#x27;&#123;:U(&#x27;package_edit&#x27;)&#125;/app_id/&#x27;+app_id+&#x27;\&#x27;)&quot;&gt;重新上传&lt;/span&gt;&#x27;;</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		return &#x27;&lt;span class=&quot;pointer&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;jump(\&#x27;&#123;:U(&#x27;package_edit&#x27;)&#125;/app_id/&#x27;+app_id+&#x27;\&#x27;)&quot;&gt;+&lt;/span&gt;&#x27;;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="行内写JavaScript-跳转"><a href="#行内写JavaScript-跳转" class="headerlink" title="行内写JavaScript-跳转"></a>行内写JavaScript-跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=\&quot;javascript:edit(&quot; + record.id + &quot;);\&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">function edit(id)</span><br><span class="line">&#123;</span><br><span class="line">	window.location.replace(&quot;&#123;:U(&#x27;HbSetting/edit&#x27;)&#125;&quot; + &#x27;/id/&#x27; + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function timeForm(e)</span><br><span class="line">&#123;</span><br><span class="line">	if (e.value != &#x27;&#x27; ) &#123;</span><br><span class="line">		date = new Date(e.value);</span><br><span class="line">	    return date.Format(&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		return e.value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">Date.prototype.Format =  function (fmt) &#123;  // author: meizz </span><br><span class="line">    var o = &#123;</span><br><span class="line">       &quot;M+&quot;:  this.getMonth() + 1,  // 月份 </span><br><span class="line">       &quot;d+&quot;:  this.getDate(),  // 日 </span><br><span class="line">       &quot;h+&quot;:  this.getHours(),  // 小时 </span><br><span class="line">       &quot;m+&quot;:  this.getMinutes(),  // 分 </span><br><span class="line">       &quot;s+&quot;:  this.getSeconds(),  // 秒 </span><br><span class="line">       &quot;q+&quot;: Math.floor(( this.getMonth() + 3) / 3),  // 季度 </span><br><span class="line">       &quot;S&quot;:  this.getMilliseconds()  // 毫秒 </span><br><span class="line">   &#125;;</span><br><span class="line">    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, ( this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));</span><br><span class="line">    for ( var k  in o)</span><br><span class="line">    if ( new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));</span><br><span class="line">    return fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表格页面的初始化"><a href="#表格页面的初始化" class="headerlink" title="表格页面的初始化"></a>表格页面的初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var grid;</span><br><span class="line">var games = &#123;$games&#125;;</span><br><span class="line"></span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">    init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function init()</span><br><span class="line">&#123;</span><br><span class="line">    mini.parse();</span><br><span class="line">    grid = mini.get(&quot;datagrid1&quot;);</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function search()</span><br><span class="line">&#123;</span><br><span class="line">    var form = new mini.Form(&quot;#fs&quot;);  </span><br><span class="line">    form.validate();</span><br><span class="line">    if (form.isValid() == false) return;</span><br><span class="line">    var data = form.getData(true);</span><br><span class="line">    grid.load(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表单页面的初始化"><a href="#表单页面的初始化" class="headerlink" title="表单页面的初始化"></a>表单页面的初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var form;</span><br><span class="line">function init()&#123;</span><br><span class="line">	mini.parse();</span><br><span class="line">	form = new mini.Form(&quot;fa&quot;);	</span><br><span class="line">&#125;</span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">    init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 表单验证</span><br><span class="line">// 提交事件</span><br><span class="line">function SubmitData() </span><br><span class="line">&#123;</span><br><span class="line">    form.validate();</span><br><span class="line">    // form.isValid()   验证是否通过</span><br><span class="line">    </span><br><span class="line">    if (form.isValid() == false)&#123;</span><br><span class="line">		return false</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	var data = $(&quot;form&quot;).serialize();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mini.open(&#123;</span><br><span class="line">    url: &quot;&#123;:U(&#x27;batch_check&#x27;)&#125;?id=&quot;+id + &quot;&amp;lock_status=&quot; + status,</span><br><span class="line">    title: &quot;审核信息&quot;, </span><br><span class="line">    width: 800, </span><br><span class="line">    height: 380,</span><br><span class="line">    onload: function (data) &#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    ondestroy: function (action) &#123;</span><br><span class="line">        if (action==&#x27;ok&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            var iframe = this.getIFrameEl();</span><br><span class="line">            var data = iframe.contentWindow.GetData();</span><br><span class="line">            data = mini.clone(data);    //必须</span><br><span class="line"></span><br><span class="line">            $.post(&quot;&#123;:U(&#x27;batch_check&#x27;)&#125;&quot;, data, function(result) &#123;</span><br><span class="line">                if (result.success == false)</span><br><span class="line">                &#123;</span><br><span class="line">                    alert(result.msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &quot;json&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        grid.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>MiniUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js相关笔记</title>
    <url>/2020/08/24/Node-js%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://nodejs.org/zh-cn/">Node.js官网</a></p>
<p><a href="https://cnodejs.org/">Cnode社区</a></p>
<p><a href="http://nodejs.cn/">Node.js中文网</a></p>
<p><a href="https://npm.taobao.org/">淘宝NPM镜像</a></p>
<p>Node.js&amp;HTML5论坛</p>
<p><strong>后端处理分页数据的接口</strong>   <a href="https://www.cnblogs.com/fm060/p/8144758.html">参考博客</a></p>
<p><a href="https://www.axis-studio.org/2017/12/29/element-express-mongoose%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/index.html">element+express+mongoose实现分页查询</a></p>
<h4 id="后端接口代码："><a href="#后端接口代码：" class="headerlink" title="后端接口代码："></a>后端接口代码：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/getSources&#x27;</span>,<span class="title function_">async</span>(req, res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> currentPage = <span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">currentPage</span>) <span class="comment">// 转换前端传入当前页码</span></span><br><span class="line">    <span class="keyword">let</span> pageSize = <span class="built_in">parseInt</span>(req.<span class="property">query</span>.<span class="property">pageSize</span>) <span class="comment">// 转换前端传入的每页大小</span></span><br><span class="line">    <span class="keyword">let</span> skip = (currentPage-<span class="number">1</span>)*pageSize <span class="comment">// 实现分割查询的skip</span></span><br><span class="line">    <span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有数据</span></span><br><span class="line">    <span class="keyword">var</span> allSources = <span class="keyword">await</span> <span class="title class_">Sources</span>.<span class="title function_">find</span>();</span><br><span class="line">    <span class="keyword">var</span> allCount = allSources.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> allPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(allCount/pageSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据页码和每页显示条数筛选数据</span></span><br><span class="line">    <span class="keyword">const</span> sources = <span class="keyword">await</span> <span class="title class_">Sources</span>.<span class="title function_">find</span>(params).<span class="title function_">skip</span>(skip).<span class="title function_">limit</span>(pageSize)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> object =&#123;</span><br><span class="line">        <span class="attr">allCount</span>: allCount,</span><br><span class="line">        <span class="attr">allPage</span>: allPage,</span><br><span class="line">        <span class="attr">page</span>: currentPage,</span><br><span class="line">        <span class="attr">data</span>: sources</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(object)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="前端请求接口代码："><a href="#前端请求接口代码：" class="headerlink" title="前端请求接口代码："></a>前端请求接口代码：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取素材列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getSources</span> = (<span class="params">param</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/getSources&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: param</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>.vue页面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">  @size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">  @current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br><span class="line">  :current-page=<span class="string">&quot;currentPage&quot;</span></span><br><span class="line">  :page-sizes=<span class="string">&quot;[10, 15, 20, 25, 30]&quot;</span></span><br><span class="line">  :page-size=<span class="string">&quot;pageSize&quot;</span></span><br><span class="line">  layout=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span><br><span class="line">  :total=<span class="string">&quot;allCount&quot;</span>&gt;</span><br><span class="line">&lt;/el-pagination&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">sourceList</span>: [],</span><br><span class="line"><span class="attr">allCount</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">  </span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="comment">// 渲染第一页的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initData</span>(<span class="variable language_">this</span>.<span class="property">currentPage</span>)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line">initData (thisPage) &#123;</span><br><span class="line">  <span class="keyword">let</span> param = &#123;</span><br><span class="line">    <span class="attr">currentPage</span>: thisPage,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getSources</span>(param).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sourceList</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">allCount</span> = res.<span class="property">data</span>.<span class="property">allCount</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(`当前页: $&#123;val&#125;`);  </span></span><br><span class="line">  <span class="comment">// 渲染相应页码的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initData</span>(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建package-json："><a href="#创建package-json：" class="headerlink" title="创建package.json："></a>创建package.json：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p><a href="http://javascript.ruanyifeng.com/nodejs/npm.html">npm模块管理器</a></p>
<p><a href="https://jingyan.baidu.com/article/91f5db1b3e1f991c7f05e395.html">我们安装了Nodejs是安装了什么</a></p>
<p><a href="https://github.com/nimoc/gulp-book/blob/master/chapter1.md">安装 Node 和 gulp</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://nodejs.org/zh-cn/download/">node安装包下载地址</a></p>
<ol>
<li>下载.msi文件</li>
<li>按”下一步”，”下一步”装好</li>
<li>双击安装好的目录里面的”node.exe”，文件，输入node  （这一步好像不需要）</li>
<li>创建一个app.js文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;He1lo world\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol>
<li>运行app.js：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在浏览器中预览</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/ </span></span><br><span class="line">或者</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:3000/</span></span><br></pre></td></tr></table></figure>

<p>使用淘宝NPM镜像</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>清屏命令（清掉历史操作记录）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<p>取消命令继续执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Ctrl</span> +  C </span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_36423639/article/details/70230571">window下通过nvm-windows来安装多版本node</a></p>
<p>[全栈最后一公里 - Scott 带你学习 Node.js 线上服务器部署与发布](<a href="http://www.imooc.com/article/17554">http://www.imooc.com/article/17554</a> Scott)</p>
<p><a href="http://nqdeng.github.io/7-days-nodejs/">七天学会NodeJS</a></p>
<p><a href="https://www.handlebarsjs.cn/">Handlebars-轻量的语义化模板</a></p>
<p><strong>什么是异步I/O？</strong></p>
<p>就是我们读取/写入文件或者操作数据库的时候，此时应该是异步的读取。CPU命令磁盘驱动器读取文件，CPU此时不能死等磁盘返回结果，如果死等CPU自己就被阻塞了，性能是极大的浪费。比如：PHP读取文件，性能就不高，因为被阻塞了。</p>
<h3 id="Node-js创建第一个应用"><a href="#Node-js创建第一个应用" class="headerlink" title="Node.js创建第一个应用"></a>Node.js创建第一个应用</h3><p>如果我们使用PHP来编写后端的代码时，需要Apache 或者Nginx 的 HTTP服务器，来处理客户端的请求相应。不过对Node.js 来说，概念完全不一样了。使用 Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。</p>
<ol>
<li>引入http模块</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http= <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>创建服务器</li>
</ol>
<p>接下来我们使用http.createServer()方法创建服务器，并使用listen方法绑定8888端口。函数通过request, response参数来接收和响应数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(functio (request, response)&#123;</span><br><span class="line">	<span class="comment">// 发送HTTP头部</span></span><br><span class="line">	<span class="comment">// HTTP状态值: 200 : oK</span></span><br><span class="line">  <span class="comment">// 设置HTTP头部，状态码是200，文件类型是html，字符集是utf8</span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送响应数据“Hello World&quot;</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;哈哈哈哈，我买了一个iPhone&quot;</span> +(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>)+<span class="string">&quot;s&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">&#125;).listen(8888);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 终端打印如下信息</span></span><br><span class="line"><span class="string">console.log(&quot;</span><span class="title class_">Server</span> running at <span class="attr">http</span>:<span class="comment">//127.0.0.1:8888/&quot;);</span></span><br></pre></td></tr></table></figure>

<p>结束响应：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">res.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure>

<h3 id="node-js查询数据，倒序排序：sort-‘-字段名’"><a href="#node-js查询数据，倒序排序：sort-‘-字段名’" class="headerlink" title="node.js查询数据，倒序排序：sort(‘-字段名’)"></a>node.js查询数据，倒序排序：sort(‘-字段名’)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let currentPage = parseInt(req.query.currentPage) // 转换前端传入当前页码</span><br><span class="line">let pageSize = parseInt(req.query.pageSize) // 转换前端传入的每页大小</span><br><span class="line">let skip = (currentPage-1)*pageSize // 实现分割查询的skip</span><br><span class="line">let params = &#123;&#x27;delete_time&#x27;: &quot;0&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 根据页码和每页显示条数筛选数据</span><br><span class="line">const sources = await Sources.find(params).sort(&#x27;-create_time&#x27;).skip(skip).limit(pageSize)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>NuxtJS-笔记</title>
    <url>/2022/05/01/Nuxt-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://nuxtjs.org/">NuxtJS官网</a></p>
<p><a href="https://www.nuxtjs.cn/">NuxtJS-中文官网</a></p>
<p><a href="https://www.jspang.com/article/86">Nuxt3从零到实战手把手 免费视频图文教程-技术胖</a></p>
]]></content>
      <tags>
        <tag>NuxtJS</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Parcel打包TypeScript</title>
    <url>/2020/11/12/Parcel%E6%89%93%E5%8C%85TypeScript/</url>
    <content><![CDATA[<h4 id="用-Parcel-打包-TypeScript-代码"><a href="#用-Parcel-打包-TypeScript-代码" class="headerlink" title="用 Parcel 打包 TypeScript 代码"></a>用 Parcel 打包 TypeScript 代码</h4><blockquote>
<h4 id="建立一个新项目"><a href="#建立一个新项目" class="headerlink" title="建立一个新项目"></a>建立一个新项目</h4></blockquote>
<ol>
<li>教学需要，这里我们重新建立一个项目<code>TSTest</code>,在桌面新建立一个文件夹，然后在<code>VSCode</code>中打开。</li>
<li>打开终端，输入<code>npm init -y</code>,创建<code>package.json</code>文件</li>
<li>在终端中输入<code>tsc --init</code>,创建<code>tsconfig.json</code>文件</li>
<li>修改<code>tsconfig.json</code>配置<code>rootDir</code>和<code>outDir</code>.</li>
<li>新建<code>src</code>文件夹，在里边建立<code>index.html</code>,<code>page.ts</code>文件</li>
<li>编写<code>index.html</code>文件，并引入<code>page.ts</code>文件</li>
<li>编写<code>page.ts</code>文件</li>
</ol>
<p>index.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./page.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>page.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">teacher</span>: string = <span class="string">&quot;jspang&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher);</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="Parcel-的安装和使用"><a href="#Parcel-的安装和使用" class="headerlink" title="Parcel 的安装和使用"></a>Parcel 的安装和使用</h4></blockquote>
<p><code>npm</code>或者<code>yarn</code>来进行安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add --dev parcel@next</span><br></pre></td></tr></table></figure>

<p>修改package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;parcel ./src/index.html&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开终端输入<code>yarn test</code>,这时候终端会给出一个地址<code>http://localhost:1234</code>,把地址放到浏览器上，可以看到浏览器的控制台会输出<code>jspang</code>。</p>
<p>这说明<code>Parcel</code>会自动对<code>index.html</code>中引入的<code>TypeScript</code>文件进行编译，然后打包好后，就可以直接使用了。</p>
<h4 id="在-TypeScript-中使用-JQuery"><a href="#在-TypeScript-中使用-JQuery" class="headerlink" title="在 TypeScript 中使用 JQuery"></a>在 TypeScript 中使用 JQuery</h4><blockquote>
<h4 id="引入-JQuery-框架库"><a href="#引入-JQuery-框架库" class="headerlink" title="引入 JQuery 框架库"></a>引入 JQuery 框架库</h4></blockquote>
<p>直接在<code>index.html</code>加入<code>&lt;script&gt;</code>标签</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>有了 jquery 框架，就可以在<code>TypeScript</code>文件中进行使用<code>JQuery</code>的语法</p>
<p>然后在<code>page.ts</code>文件中编写如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">teacher</span>: string = <span class="string">&quot;jspang&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher);</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;jspang&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>写完后到终端中输入<code>yarn test</code>进行编译和启动服务。然后在地址栏输入了<code>http://localhost:1234</code>,可以看到程序可以正常输出，也没有任何的报错。</p>
<blockquote>
<h4 id="安装-types-jquery-解决方法"><a href="#安装-types-jquery-解决方法" class="headerlink" title="安装 types/jquery(解决方法)"></a>安装 types/jquery(解决方法)</h4></blockquote>
<p>第一种：就是安装别人写好的文件</p>
<p>但是在<code>vscode</code>中是会报错的，这时候就需要我们安装类型文件<code>type file</code>,直接可以用 npm 进行安装。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i @types/jquery</span><br></pre></td></tr></table></figure>

<p>第二种:简单粗暴</p>
<p>还有一种简单粗暴的方法的方式就是直接在<code>page.ts</code>文件的头部加入这句代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">declare <span class="keyword">var</span> <span class="attr">$</span>: any;</span><br></pre></td></tr></table></figure>

<p>第三种：自己写一个<code>.d.ts</code>声明文件的类库，如果你用的类库很少见，就需要自己写了。这个写起来还是很麻烦的。 比如 JQuery 就有几十个接口，如果你要写，这个文件会写很长，所以原则就是有别人写好的就直接用，实在没有就用粗暴的方法，如果实在不行，再考虑写<code>.d.ts</code>声明文件。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-笔记</title>
    <url>/2021/01/25/PHP-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="输出json数据"><a href="#输出json数据" class="headerlink" title="输出json数据"></a>输出json数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &#x27;&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;count&quot;:1000,&quot;data&quot;:[&#123;&quot;id&quot;:10000,&quot;username&quot;:&quot;user-0&quot;,&quot;sex&quot;:&quot;女&quot;,&quot;city&quot;:&quot;城市-0&quot;,&quot;sign&quot;:&quot;签名-0&quot;,&quot;experience&quot;:255,&quot;logins&quot;:24,&quot;wealth&quot;:82830700,&quot;classify&quot;:&quot;作家&quot;,&quot;score&quot;:57&#125;,&#123;&quot;id&quot;:10029,&quot;username&quot;:&quot;user-29&quot;,&quot;sex&quot;:&quot;男&quot;,&quot;city&quot;:&quot;城市-29&quot;,&quot;sign&quot;:&quot;签名-29&quot;,&quot;experience&quot;:647,&quot;logins&quot;:107,&quot;wealth&quot;:97450636,&quot;classify&quot;:&quot;酱油&quot;,&quot;score&quot;:27&#125;]&#125;&#x27;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia</title>
    <url>/2022/06/17/Pinia/</url>
    <content><![CDATA[<p><a href="https://pinia.vuejs.org/">Pinia-官网</a></p>
<p><a href="https://stackblitz.com/github/piniajs/example-vue-3-vite?file=index.html">Pinia-Demo</a></p>
<h4 id="pinia2入门使用"><a href="#pinia2入门使用" class="headerlink" title="pinia2入门使用"></a><a href="https://www.jianshu.com/p/d42b9c57cbac">pinia2入门使用</a></h4>]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native相关笔记</title>
    <url>/2021/09/28/React-Native%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://reactnative.dev/">React Native官网</a></p>
<p><a href="https://www.reactnative.cn/">React Native 中文网</a></p>
<h4 id="移动App的开发模式"><a href="#移动App的开发模式" class="headerlink" title="移动App的开发模式"></a>移动App的开发模式</h4><ul>
<li>原生开发</li>
<li>原生App</li>
<li>Android | iOS | Windows</li>
</ul>
<ul>
<li>混合开发</li>
<li>混合App</li>
<li>React Native | Weex | Flutter</li>
</ul>
<ul>
<li>H5开发</li>
<li>Web App</li>
<li>HTML、CSS、JavaScript</li>
</ul>
<h4 id="跨平台框架的比较"><a href="#跨平台框架的比较" class="headerlink" title="跨平台框架的比较"></a>跨平台框架的比较</h4><table>
<thead>
<tr>
<th>框架</th>
<th>React Native</th>
<th>Weex</th>
<th>Flutter</th>
</tr>
</thead>
<tbody><tr>
<td>所属公司</td>
<td>Facebook</td>
<td>Alibaba</td>
<td>Google</td>
</tr>
<tr>
<td>编程语言</td>
<td>JavaScript（React）</td>
<td>JavaScript（Vue）</td>
<td>Dart</td>
</tr>
<tr>
<td>引擎</td>
<td>JSCore</td>
<td>V8</td>
<td>Flutter engine</td>
</tr>
<tr>
<td>支持系统</td>
<td>Android、iOS</td>
<td>Android、iOS、Web</td>
<td>Android、iOS、Fuchsia</td>
</tr>
<tr>
<td>性能</td>
<td>一般</td>
<td>较快</td>
<td>较快</td>
</tr>
<tr>
<td>使用场景</td>
<td>整体App</td>
<td>单页面</td>
<td>整体App</td>
</tr>
<tr>
<td>学习成本</td>
<td>难</td>
<td>易</td>
<td>一般</td>
</tr>
</tbody></table>
<p><a href="https://www.jianshu.com/p/8717e1e614a9">移动端跨平台框架对比</a></p>
<h4 id="移动App的开发模式-1"><a href="#移动App的开发模式-1" class="headerlink" title="移动App的开发模式"></a>移动App的开发模式</h4><table>
<thead>
<tr>
<th>开发模式</th>
<th>原生开发</th>
<th>混合开发</th>
<th>Web开发</th>
</tr>
</thead>
<tbody><tr>
<td>运行环境</td>
<td>Android、iOS</td>
<td>Android、iOS</td>
<td>浏览器、WebView</td>
</tr>
<tr>
<td>编程语言</td>
<td>Java、Objective-C</td>
<td>JavaScript、Dart</td>
<td>HTML、CSS、JavaScript</td>
</tr>
<tr>
<td>可移植性</td>
<td>差</td>
<td>一般</td>
<td>好</td>
</tr>
<tr>
<td>开发速度</td>
<td>慢</td>
<td>一般</td>
<td>快</td>
</tr>
<tr>
<td>性能</td>
<td>快</td>
<td>较慢</td>
<td>慢</td>
</tr>
<tr>
<td>学习成本</td>
<td>高</td>
<td>一般</td>
<td>低</td>
</tr>
</tbody></table>
<p>React Native的优点</p>
<ul>
<li>开发体验好<ul>
<li>用统一的代码规范开发移动端程序，不用关注移动端的差异</li>
</ul>
</li>
<li>开发成本低<ul>
<li>开发一次，可以生成Android和iOs两个系统上的App- Learn once, write anywhere</li>
</ul>
</li>
<li>学习成本低<ul>
<li>只要掌握JavaScript和React，就可以进行移动端开发了</li>
</ul>
</li>
</ul>
<p>React Native的不足</p>
<ul>
<li>不成熟;<ul>
<li>项目版本更新维护较频繁，学习成本高;</li>
<li>试错成本高，有些问题较少解决方案，易耽误开发进度。</li>
</ul>
</li>
<li>性能差<ul>
<li>整体性能仍不如原生</li>
</ul>
</li>
<li>兼容性差<ul>
<li>涉及底层的功能，需要针对Android和iOs双端单独开发;</li>
</ul>
</li>
</ul>
<h4 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h4><ul>
<li><p>安装Node.js</p>
<ul>
<li>Node.js的版本应&gt;=12(推荐安装LTS版本)</li>
<li><code> npm config set registry https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p>安装Yarn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 React Native脚手架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>需要安装Android开发环境、iOS开发环境</p>
<p>Window下只能安装Android开发环境</p>
<p>Mac下可以安装Android开发环境、iOS开发环境</p>
<p>Android环境</p>
<ul>
<li>安装JDK</li>
<li>安装Android Studio</li>
<li>安装Android SDK</li>
<li>配置环境变量</li>
</ul>
<p>·下载JDK(Java SE Development Kit)<br> https:/<a href="http://www.oracle.com/jiava/technologies/iavase/javase-jdk8-downloads.html%C2%B7JDK%E7%9A%84%E7%89%88%E6%9C%AC%E5%BF%85%E9%A1%BB%E6%98%AF1.8(1.8%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AE%98%E6%96%B9%E4%B9%9F%E7%9B%B4%E6%8E%A5%E7%A7%B08%E7%89%88%E6%9C%AC)">www.oracle.com/jiava/technologies/iavase/javase-jdk8-downloads.html·JDK的版本必须是1.8(1.8版本，官方也直接称8版本)</a><br>·目前不支持高于1.8的JDK版本<br>·下载时要求登陆(请先注册Oracle账号)<br>·或者直接找老师，获取上面的安装包<br>·安装JDK(一直“下一步”)<br>·命令行中，输入java -version，验证安装是否成功<br>L, A, G，。u———</p>
<p>·下载Android Studio<br><a href="https://developer.android.com/studio/index.html%C2%B7%E5%AE%89%E8%A3%85Android">https://developer.android.com/studio/index.html·安装Android</a> Studio (一直“下一步”)·启动Android Studio<br>·初次启动，需要安装组件（组件约2GB，安装后占用空间约8GB)·安装组件的过程巨长巨长巨长，要有耐心</p>
<p>. What<br>·Android SDK是针对安卓开发的套件. Why<br>·虽然Android Studio默认会安装最新版本的Android SDK<br>·但是，目前编译React Native应用需要的是Android 10(Q)版本的SDK<br>· How<br>·打开Android Studio，在菜单Tools下找到”SDK Manager”</p>
<p>·配置ANDROID_HOME环境变量<br>·打开Android Studio，点击菜单Tools → SDK Manager，找到Appearance &amp;Behavior → System Settings → Android SDK</p>
<p>·跟ANDROID_HOME相关的环境变量<br>·%ANDROID_HOME%\platform-tools%ANDROID_HOME%\emulator<br>·%ANDROID_HOME%\tools·%ANDROID_HOME%\tools\bin<br>—L，A,G，。u</p>
]]></content>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router笔记</title>
    <url>/2022/04/12/React-Router%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="http://react-guide.github.io/react-router-cn/">React Router 中文文档</a></p>
<p><a href="https://github.com/remix-run/react-router">react-router</a></p>
<p><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/installation.md">docs–installation.md</a></p>
<p><a href="https://github.com/remix-run/react-router/tree/main/packages/react-router-dom">react-router-dom</a></p>
<p><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">docs-tutorial.md</a></p>
<h3 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h3><p>依赖包分间接依赖包和直接依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>在pages目录中，创建路由组件</p>
<h4 id="React-Router—看这里的最新用法"><a href="#React-Router—看这里的最新用法" class="headerlink" title="React Router—看这里的最新用法"></a><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></h4><p><a href="https://github.com/remix-run/react-router">react-router—–Github</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">React Router中文文档</a></p>
<h4 id="react-router-dom使用指南"><a href="#react-router-dom使用指南" class="headerlink" title="react-router-dom使用指南"></a><a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南</a></h4><p>v6文档：<a href="https://reactrouter.com/">https://reactrouter.com</a></p>
<p>v5文档：<a href="https://v5.reactrouter.com/web/guides/quick-start">https://v5.reactrouter.com/web/guides/quick-start</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 入口文件index.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;,</span><br><span class="line">    document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 应用的根组件App.js</span><br><span class="line">import React, &#123;Component&#125; from &quot;react&quot;;</span><br><span class="line">import &#123;Routes, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &quot;./App.less&quot;;</span><br><span class="line"></span><br><span class="line">import Login from &quot;./pages/login/Login&quot;;</span><br><span class="line">import Admin from &quot;./pages/admin/Admin&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Routes&gt;</span><br><span class="line">                &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/&quot; element=&#123;&lt;Admin /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/Routes&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Navigate &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">function A()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Navigate to=&quot;/b&quot; /&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编程式重定向"><a href="#编程式重定向" class="headerlink" title="编程式重定向"></a>编程式重定向</h4><p>navigate要在useEffect中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  if(user.isLogin) &#123;</span><br><span class="line">    navigate(&quot;/home&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [user]);</span><br></pre></td></tr></table></figure>



<p><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts#navigate-function">Navigation Function</a></p>
<h4 id="使用layout的路由配置"><a href="#使用layout的路由配置" class="headerlink" title="使用layout的路由配置"></a>使用layout的路由配置</h4><p><a href="https://github.com/remix-run/react-router/tree/main/examples/lazy-loading">参考-lazy-loading</a></p>
<h5 id="关键点：Outlet"><a href="#关键点：Outlet" class="headerlink" title="关键点：Outlet"></a>关键点：Outlet</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; useSelector&#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; useNavigate  &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; Routes, Route, Outlet &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; Layout&#125; from &#x27;antd&#x27;;</span><br><span class="line"></span><br><span class="line">import Top from &#x27;../../components/Top&#x27;</span><br><span class="line">import Bottom from &#x27;../../components/Bottom&#x27;</span><br><span class="line">import LeftNav from &quot;../../components/LeftNav&quot;</span><br><span class="line"></span><br><span class="line">import Product from &#x27;../product/Product&#x27;;</span><br><span class="line">import AddProduct from &#x27;../product/AddProduct&#x27;;</span><br><span class="line">import EditProduct from &#x27;../product/EditProduct&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; Content&#125; = Layout;</span><br><span class="line"></span><br><span class="line">export default function Container() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;DashboardLayout /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route index element=&#123;&lt;Product /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;add&quot; element=&#123;&lt;AddProduct /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;edit&quot; element=&#123;&lt;EditProduct /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function DashboardLayout() &#123;</span><br><span class="line"> </span><br><span class="line">    let navigate = useNavigate();</span><br><span class="line">    const stateUser = useSelector(state =&gt; state.user);</span><br><span class="line">    const root = JSON.parse(localStorage.getItem(&#x27;persist:root&#x27;));</span><br><span class="line">    const user = JSON.parse(root.user) || stateUser;</span><br><span class="line">    </span><br><span class="line">    // 未登录</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        if(!user.isLogin) &#123;</span><br><span class="line">          navigate(&quot;/login&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [user]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout className=&#x27;container&#x27;&gt;</span><br><span class="line">        &lt;LeftNav/&gt;</span><br><span class="line">        &lt;Layout&gt;</span><br><span class="line">            &lt;Top user=&#123;user&#125;/&gt;</span><br><span class="line">            &lt;Content style=&#123;&#123; margin: &#x27;24px 16px 0&#x27; &#125;&#125;&gt;</span><br><span class="line">                &lt;div className=&quot;site-layout-background content-box&quot; style=&#123;&#123; padding: 24, minHeight: 850 &#125;&#125;&gt;</span><br><span class="line">                  &lt;Outlet /&gt;</span><br><span class="line">                &lt;Bottom/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/Content&gt;</span><br><span class="line">        &lt;/Layout&gt;</span><br><span class="line">    &lt;/Layout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>React Router</category>
      </categories>
      <tags>
        <tag>React Router</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN-笔记</title>
    <url>/2021/01/18/SVN-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="显示日志（查看更新内容）"><a href="#显示日志（查看更新内容）" class="headerlink" title="显示日志（查看更新内容）"></a>显示日志（查看更新内容）</h4><p>右键—&gt;TortoiseSVN—&gt;显示日志—&gt;查看更新下来的内容，或者对之前的代码进行比较</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>React-使用笔记</title>
    <url>/2021/03/02/React-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="疫情实时大数据报告—React项目"><a href="#疫情实时大数据报告—React项目" class="headerlink" title="疫情实时大数据报告—React项目"></a><a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_wangmeng#tab4">疫情实时大数据报告</a>—React项目</h4><p><a href="https://codesandbox.io/examples/package/react-dom">React Dom Examples</a></p>
<p><a href="https://codesandbox.io/examples/package/react">React Examples</a></p>
<p><a href="https://create-react-app.bootcss.com/">Create React App 中文文档</a></p>
<p><a href="https://create-react-app.dev/">Create React App</a></p>
<h4 id="VSCode扩展"><a href="#VSCode扩展" class="headerlink" title="VSCode扩展"></a>VSCode扩展</h4><h5 id="生成react代码片段-ES7"><a href="#生成react代码片段-ES7" class="headerlink" title="生成react代码片段-ES7"></a>生成react代码片段-ES7</h5><p>在VSCode中搜’ES7’，选择‘ES7 React/Redux/GraphQL/React-Native snippets’</p>
<p>在新建的<code>.jsx/.js</code>文件中</p>
<ol>
<li><p>输入<code>rcc</code>，快速生成class component：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rfc</code>，快速生成function component：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rconst</code>，快速生成constrctor：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props)</span><br><span class="line"></span><br><span class="line">  this.state = &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入<code>rcredux</code>，快速生成redux模版：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import PropTypes from &#x27;prop-types&#x27;</span><br><span class="line">import &#123; connect &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">export class test extends Component &#123;</span><br><span class="line">  static propTypes = &#123;</span><br><span class="line">    prop: PropTypes</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; (&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(test)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html#use-the-production-build">生产环境的配置</a></p>
<p><a href="https://www.cnblogs.com/houxianzhou/p/15222138.html">react中引入css的方式有哪几种</a></p>
<h4 id="快速注释"><a href="#快速注释" class="headerlink" title="快速注释"></a>快速注释</h4><p>在vscode中，<code>.jsx</code>文件中，选中要注释的文字，按<code> CTRL + shift + /</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* 提取组件 */&#125;</span><br></pre></td></tr></table></figure>

<h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><ol>
<li>箭头函数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.setState(state =&gt; (&#123;</span><br><span class="line">    isShowWarn: !state.isShowWarn</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ol>
<li><p>bind()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props)</span><br><span class="line"></span><br><span class="line">  this.state = &#123;</span><br><span class="line">     isShowWarn: false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.handleClick = this.handleClick.bind(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handleClick() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick = ()=&gt;&#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;this.handleClick&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数写在元素上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">        isShowWarn: !state.isShowWarn</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123; (e)=&gt; this.handleClick(e) &#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 <code>key</code> 属性的值，请用其他属性名显式传递这个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="组件中的return"><a href="#组件中的return" class="headerlink" title="组件中的return"></a>组件中的return</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return &lt;div&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>返回多个html标签，换行写更清晰，使用<code>return()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return(</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">		&lt;li&gt;&lt;/li&gt;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>组件，含有return，会返回react或<code>null</code></p>
<p>函数组件，可以从参数props中拿到属性</p>
<p>class组件，可以从this.props中拿到属性</p>
<p>props的属性名==组件传进来的属性名 </p>
<p><code>&#123;&#125;</code>中可以写JavaScript代码，如果是对象，需要<code>&#123;&#123;a:1,b:2&#125;&#125;</code></p>
<p>map函数，自带return</p>
<p>key放在组件<code>&lt;ListItems/&gt;</code>上，而不是放在<code>&lt;li&gt;&lt;li/&gt;</code>上</p>
<p>key在某个循环中保证唯一性就好，不用在整个页面中保证唯一性</p>
<p>避免key使用索引index，特别是反序操作的情况。 因为会重新渲染，导致性能变差。使用id等唯一性属性</p>
</blockquote>
<blockquote>
<p>在 <code>map()</code> 方法中的元素需要设置 key 属性</p>
</blockquote>
<p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 <code>key</code> 属性的值，请用其他属性名显式传递这个值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const content = posts.map((post) =&gt;</span><br><span class="line">  &lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面例子中，<code>Post</code> 组件可以读出 <code>props.id</code>，但是不能读出 <code>props.key</code>。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="四、引入路由"><a href="#四、引入路由" class="headerlink" title="四、引入路由"></a>四、引入路由</h3><p>依赖包分间接依赖包和直接依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom</span><br></pre></td></tr></table></figure>

<p>在pages目录中，创建路由组件</p>
<h4 id="React-Router—看这里的最新用法"><a href="#React-Router—看这里的最新用法" class="headerlink" title="React Router—看这里的最新用法"></a><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></h4><p><a href="https://github.com/remix-run/react-router">react-router—–Github</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">React Router中文文档</a></p>
<h4 id="react-router-dom使用指南"><a href="#react-router-dom使用指南" class="headerlink" title="react-router-dom使用指南"></a><a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南</a></h4><p>v6文档：<a href="https://reactrouter.com/">https://reactrouter.com</a></p>
<p>v5文档：<a href="https://v5.reactrouter.com/web/guides/quick-start">https://v5.reactrouter.com/web/guides/quick-start</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 入口文件index.js</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;,</span><br><span class="line">    document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 应用的根组件App.js</span><br><span class="line">import React, &#123;Component&#125; from &quot;react&quot;;</span><br><span class="line">import &#123;Routes, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &quot;./App.less&quot;;</span><br><span class="line"></span><br><span class="line">import Login from &quot;./pages/login/Login&quot;;</span><br><span class="line">import Admin from &quot;./pages/admin/Admin&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Routes&gt;</span><br><span class="line">                &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/&quot; element=&#123;&lt;Admin /&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/Routes&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Navigate &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">function A()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Navigate to=&quot;/b&quot; /&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引入antd样式"><a href="#引入antd样式" class="headerlink" title="引入antd样式"></a>引入antd样式</h4><p>App.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;~antd/dist/antd.css&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="React中StrictMode严格模式"><a href="#React中StrictMode严格模式" class="headerlink" title="React中StrictMode严格模式"></a><a href="https://blog.csdn.net/wu_xianqiang/article/details/113521191">React中StrictMode严格模式</a></h4><p>StrictMode 是一个用来检查项目中潜在问题的工具。与 <a href="https://so.csdn.net/so/search?q=Fragment&spm=1001.2101.3001.7020">Fragment</a> 一样，StrictMode 不会渲染任何可见的 UI。它为其后代元素触发额外的检查和警告。</p>
<p>StrictMode 目前有助于：</p>
<p>1、识别不安全的生命周期<br>2、关于使用过时字符串 ref API 的警告<br>3、关于使用废弃的 findDOMNode 方法的警告<br>4、检测意外的副作用<br>5、检测过时的 context API</p>
<h4 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h4><p><a href="http://react-guide.github.io/react-router-cn/docs/API.html">API接口</a></p>
<p><a href="http://react-guide.github.io/react-router-cn/docs/Glossary.html">词汇表</a></p>
<h5 id="获取-URL-参数"><a href="#获取-URL-参数" class="headerlink" title="获取 URL 参数"></a><a href="http://react-guide.github.io/react-router-cn/docs/Introduction.html">获取 URL 参数</a></h5><p>比如你访问 <code>/foo?bar=baz</code>，你可以通过访问 <code>this.props.location.query.bar</code> 从 Route 组件中获得 <code>&quot;baz&quot;</code> 的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;messages/:id&quot; component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">), document.body)</span><br></pre></td></tr></table></figure>

<p>通过上面的配置，这个应用知道如何渲染下面四个 URL：</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>组件</th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td><code>App</code></td>
</tr>
<tr>
<td><code>/about</code></td>
<td><code>App -&gt; About</code></td>
</tr>
<tr>
<td><code>/inbox</code></td>
<td><code>App -&gt; Inbox</code></td>
</tr>
<tr>
<td><code>/inbox/messages/:id</code></td>
<td><code>App -&gt; Inbox -&gt; Message</code></td>
</tr>
</tbody></table>
<h4 id="createRoot"><a href="#createRoot" class="headerlink" title="createRoot"></a><a href="https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis">createRoot</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Before</span><br><span class="line">import &#123; render &#125; from &#x27;react-dom&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;app&#x27;);</span><br><span class="line">render(&lt;App tab=&quot;home&quot; /&gt;, container);</span><br><span class="line"></span><br><span class="line">// After</span><br><span class="line">import &#123; createRoot &#125; from &#x27;react-dom/client&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;app&#x27;);</span><br><span class="line">const root = createRoot(container);</span><br><span class="line">root.render(&lt;App tab=&quot;home&quot; /&gt;);</span><br></pre></td></tr></table></figure>

<h4 id="轮播图-swiper"><a href="#轮播图-swiper" class="headerlink" title="轮播图-swiper"></a><a href="https://swiperjs.com/get-started">轮播图-swiper</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install swiper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// import Swiper JS</span><br><span class="line">import Swiper from &#x27;swiper&#x27;;</span><br><span class="line">// import Swiper styles</span><br><span class="line">import &#x27;swiper/css&#x27;;</span><br><span class="line"></span><br><span class="line">const swiper = new Swiper(...);</span><br></pre></td></tr></table></figure>

<p><a href="https://swiperjs.com/react">Swiper React Components</a></p>
<h3 id="react移动端"><a href="#react移动端" class="headerlink" title="react移动端"></a>react移动端</h3><h3 id="Ant-Design-Mobile"><a href="#Ant-Design-Mobile" class="headerlink" title="Ant Design Mobile"></a><a href="https://mobile.ant.design/zh">Ant Design Mobile</a></h3><p><a href="https://github.com/ant-design/ant-design-mobile">ant-design-mobile——GitHub</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save antd-mobile</span><br></pre></td></tr></table></figure>

<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a><a href="https://mobile.ant.design/zh/guide/i18n">国际化</a></h4><h4 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a>textarea 标签</h4><p>而在 React 中，<code>&lt;textarea&gt;</code> 使用 <code>value</code> 属性代替。这样，可以使得使用 <code>&lt;textarea&gt;</code> 的表单和使用单行 input 的表单非常类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;textarea value=&#123;this.state.value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="select-标签"><a href="#select-标签" class="headerlink" title="select 标签"></a>select 标签</h4><p>由于 <code>selected</code> 属性的缘故，椰子选项默认被选中。React 并不会使用 <code>selected</code> 属性，而是在根 <code>select</code> 标签上使用 <code>value</code> 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：</p>
<h4 id="react打包正式环境-相对路径"><a href="#react打包正式环境-相对路径" class="headerlink" title="react打包正式环境-相对路径"></a>react打包正式环境-相对路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打包后，会有静态资源获取不到的报错</p>
</blockquote>
<p>解决：</p>
<p>在<code>package.json</code>文件中，加入<code>homepage</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;.&quot;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_40259641/article/details/114988659">react 项目打包路径问题</a></p>
<h4 id="create-react-app打包上线页面空白的问题"><a href="#create-react-app打包上线页面空白的问题" class="headerlink" title="create-react-app打包上线页面空白的问题"></a>create-react-app打包上线页面空白的问题</h4><p>1.项目用的是 BrowserRouter ， BrowserRouter 一般是用于服务端渲染，所以服务端也需要相应的配置。要不然 网关不知道你有哪些路由，怎么给你转发。</p>
<p>解决：</p>
<ol>
<li><code>BrowserRouter 换成 HashRouter</code><br>打包后，发现在本地开启web服务器预览后，正常，但是放在服务器上后，依然为空白，提示静态资源找不到。</li>
<li>解决：<br>配置 package.json 中的<code> homepage:&#39;./&#39;</code><br>这样可以使打包后的静态资源，采用相对路径。</li>
</ol>
<p><a href="https://blog.csdn.net/weixin_40302777/article/details/94579132">react根据不同环境配置不同接口</a></p>
<p><a href="https://www.ltonus.com/React/react-project-config.html">三分钟教你搞定 React 项目多环境配置</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native环境配置相关笔记</title>
    <url>/2021/10/02/React-Native%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="macOS环境配置"><a href="#macOS环境配置" class="headerlink" title="macOS环境配置"></a>macOS环境配置</h3><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>参考博客：<a href="https://blog.csdn.net/sinat_38184748/article/details/114115441">MacOs M1安装Homebrew 在国内最简单方法</a>——使用这个安装成功</p>
<h5 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1.安装Homebrew"></a>1.安装Homebrew</h5><hr>
<h6 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h6><p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<p>因为M1芯片的包安装位置不在是以前的<code>/usr/local/</code>，而是<code>/opt/homebrew</code>，所以要将配置文件里的环境变量改过来</p>
<p>1、首先进入根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<p>2、创建.zshrc文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch .zshrc</span><br></pre></td></tr></table></figure>

<p>3、打开文件进行编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open -e .zshrc</span><br></pre></td></tr></table></figure>

<p>4、如果有旧的环境就修改，没有就新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/opt/homebrew/bin:$PATH</span><br><span class="line">export PATH=/opt/homebrew/sbin:$PATH</span><br></pre></td></tr></table></figure>

<p>5、保存<br>使用<code>command + s</code><br>6、生效环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ source .zshrc</span><br></pre></td></tr></table></figure>

<p>7、测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew -v    // 显示版本，即安装成功</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h6 id="本次安装参考内容："><a href="#本次安装参考内容：" class="headerlink" title="本次安装参考内容："></a>本次安装参考内容：</h6><p>开源安装脚本库：<a href="https://gitee.com/cunkai/HomebrewCN">https://gitee.com/cunkai/HomebrewCN</a></p>
<p>复制以下内容到你的终端：<br>intel芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>M1芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>回车运行，按照提示运行下去就可以了</p>
<p>错误<br>做完上面的傻瓜式操作，理论上就OK了，但是我这边出现了安装完后用不了的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command not found : brew</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h6 id="相关参考内容："><a href="#相关参考内容：" class="headerlink" title="相关参考内容："></a>相关参考内容：</h6><p><a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）（Mac &amp; Linux）</a></p>
<p>旧文章：<a href="https://blog.csdn.net/sinat_38184748/article/details/99450330?spm=1001.2014.3001.5502">macOS安装Homebrew太慢，换用清华镜像</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-cask</span><br></pre></td></tr></table></figure>

<h6 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;$(brew --repo)&quot; &amp;&amp; git remote -v</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-安装watchman"><a href="#2-安装watchman" class="headerlink" title="2.安装watchman"></a>2.安装watchman</h4><blockquote>
<p>参考：<a href="https://blog.csdn.net/zhengzaifeidelushang/article/details/126640559?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166458144816782417056210%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166458144816782417056210&biz_id=&utm_medium=distribute.pc_search_result.none-task-code-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126640559-0-null-null.142%5Ev51%5Econtrol,201%5Ev3%5Econtrol_1&utm_term=Disable%20this%20behaviour%20by%20setting%20HOMEBREW_NO_INSTALL_CLEANUP.%20Hide%20these%20hints%20with%20HOMEBREW_NO_ENV_HINTS%20(see%20%60man%20brew%60).">Mac系列之：Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>

<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.</span><br><span class="line">Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</span><br></pre></td></tr></table></figure>

<p>解决方法，终端输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HOMEBREW_NO_INSTALL_CLEANUP=TRUE</span><br></pre></td></tr></table></figure>

<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watchman -v</span><br></pre></td></tr></table></figure>



<h4 id="3-安装cocoapods"><a href="#3-安装cocoapods" class="headerlink" title="3.安装cocoapods"></a>3.安装cocoapods</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>

<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run v1.22.19</span><br><span class="line">warning ../../../../../package.json: No license field</span><br><span class="line">$ react-native run-ios</span><br><span class="line">info Found Xcode project &quot;AwesomeProject.xcodeproj&quot;</span><br><span class="line">info Building (using &quot;xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A&quot;)</span><br><span class="line">error Failed to build iOS project. We ran &quot;xcodebuild&quot; command but it exited with error code 65. To debug build logs further, consider building your app with Xcode.app, by opening AwesomeProject.xcodeproj.</span><br><span class="line">Command line invocation:</span><br><span class="line">    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project AwesomeProject.xcodeproj -configuration Debug -scheme AwesomeProject -destination id=A7F04948-7FA8-45D1-B4A6-C26B21B6548A</span><br><span class="line"></span><br><span class="line">User defaults from command line:</span><br><span class="line">    IDEPackageSupportUseBuiltinSCM = YES</span><br><span class="line"></span><br><span class="line">Prepare packages</span><br><span class="line"></span><br><span class="line">Computing target dependency graph and provisioning inputs</span><br><span class="line"></span><br><span class="line">Create build description</span><br><span class="line">Build description signature: bf2f29ad51ca6266b44cbb8d643576b3</span><br><span class="line">Build description path: /Users/yangyanyi/Library/Developer/Xcode/DerivedData/AwesomeProject-fgqiuteczcwroxgbdakmwcrknckt/Build/Intermediates.noindex/XCBuildData/bf2f29ad51ca6266b44cbb8d643576b3-desc.xcbuild</span><br><span class="line"></span><br><span class="line">note: Building targets in dependency order</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">/Users/yangyanyi/Documents/Code/Gitee/reactive_native/AwesomeProject/ios/Pods/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject.debug.xcconfig:1:1: error: unable to open configuration settings file</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Unable to read contents of XCFileList &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-resources-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-input-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">error: Unable to load contents of file list: &#x27;/Target Support Files/Pods-AwesomeProject/Pods-AwesomeProject-frameworks-Debug-output-files.xcfilelist&#x27; (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Copy Pods Resources&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;[CP] Embed Pods Frameworks&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Bundle React Native code and images&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line">warning: Run script build phase &#x27;Start Packager&#x27; will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking &quot;Based on dependency analysis&quot; in the script phase. (in target &#x27;AwesomeProject&#x27; from project &#x27;AwesomeProject&#x27;)</span><br><span class="line"></span><br><span class="line">** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ios </span><br><span class="line">pod install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://lightrun.com/answers/facebook-react-native-fresh-react-native-066-app-does-not-build-on-xcode-13-ios-116-compiler-error-on-sysuioo">Fresh react-native (0.66) app does not build on XCode 13, iOS 11.6: compiler error on SysUio.o</a>  </p>
<p>参考：<a href="https://stackoverflow.com/questions/55725042/error-failed-to-build-ios-project-we-ran-xcodebuild-command-but-it-exited-wit">error Failed to build iOS project. We ran “xcodebuild” command but it exited with error code 65. i can not Run my Project</a></p>
</blockquote>
<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing CocoaAsyncSocket</span><br><span class="line">[!] /usr/local/bin/git clone https://github.com/robbiehanson/CocoaAsyncSocket.git /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt --template= --single-branch --depth 1 --branch 7.6.5</span><br><span class="line"></span><br><span class="line">Cloning into &#x27;/var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-8728-969mqt&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/robbiehanson/CocoaAsyncSocket.git/&#x27;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于网络问题，不断安装中断，每次报类似的错误，继续输入pod install，就会继续安装，直到安装成功</p>
</blockquote>
<h4 id="4-hermes-engine的安装问题"><a href="#4-hermes-engine的安装问题" class="headerlink" title="4.hermes-engine的安装问题"></a>4.hermes-engine的安装问题</h4><blockquote>
<p>这个有490多M，每次安装都失败，报错信息都一致。这个折腾了好久好久….</p>
</blockquote>
<p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Error installing hermes-engine</span><br><span class="line">[!] /usr/bin/curl -f -L -o /var/folders/2p/dtc9s94148j8px03g4gkxpkr0000gn/T/d20221001-67147-8lkp1c/file.tgz https://github.com/facebook/react-native/releases/download/v0.70.1/hermes-runtime-darwin-v0.70.1.tar.gz --create-dirs --netrc-optional --retry 2 -A &#x27;CocoaPods/1.11.3 cocoapods-downloader/1.5.1&#x27;</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">  0  496M    0 1343k    0     0   1299      0   4d 15h  0:17:38   4d 14h   894</span><br><span class="line">curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ol>
<li>打开一个终端，先执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&#x27;your.host:port&#x27; //your.host:port我的是127.0.0.1:1087</span><br><span class="line">export https_proxy=&#x27;your.host:port&#x27; your.host:port我的是127.0.0.1:1087</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>这个终端界面转到项目目录下，再执行<code>pod install --verbose</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install --verbose						// 在安装命令添加参数`--verbose`看打印详细信息</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/BUG_delete/article/details/110133505?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-110133505-blog-82894101.t0_edu_mix&utm_relevant_index=1">Cocoapods安装私有库问题</a></p>
</blockquote>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>命令行打印消息中看到自动执行<code>Generating Pods project</code></p>
<p>命令行打印消息中看到自动执行<code>Integrating client project</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[!] Please close any current Xcode sessions and use `myapp.xcworkspace` for this project from now on.</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp` (`myapp.xcodeproj` project)</span><br><span class="line"></span><br><span class="line">Integrating target `Pods-myapp-myappTests` (`myapp.xcodeproj` project)</span><br><span class="line">  - Running post integrate hooks</span><br><span class="line">  - Writing Lockfile in `Podfile.lock`</span><br><span class="line">  - Writing Manifest in `Pods/Manifest.lock`</span><br><span class="line">  CDN: trunk Relative path: CocoaPods-version.yml exists! Returning local because checking is only performed in repo update</span><br><span class="line"></span><br><span class="line">-&gt; Pod installation complete! There are 59 dependencies from the Podfile and 49 total pods installed.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据终端提示，如果想要使用刚添加的第三方库，必须打开<code>MyApp.xcworkspace</code>，而非之前的<code>MyApp.xcodeProj</code>。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/c19df91997fd">CocoaPods的安装与使用</a></p>
<h4 id="5-运行项目"><a href="#5-运行项目" class="headerlink" title="5.运行项目"></a>5.运行项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn ios </span><br><span class="line">或</span><br><span class="line">yarn react-native run-ios</span><br></pre></td></tr></table></figure>



<h4 id="配置-ANDROID-SDK-ROOT-环境变量"><a href="#配置-ANDROID-SDK-ROOT-环境变量" class="headerlink" title="配置 ANDROID_SDK_ROOT 环境变量"></a>配置 ANDROID_SDK_ROOT 环境变量</h4><p>1.打开配置文件的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">vi /Users/yangyanyi/.zshrc</span><br></pre></td></tr></table></figure>

<p>2.编辑配置文件，将以下代码粘贴到配置文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚</span><br><span class="line">export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/emulator</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin</span><br><span class="line">export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools</span><br></pre></td></tr></table></figure>

<p>3.保存后退出vi，参考：<a href="https://wenku.baidu.com/view/e4705173bd23482fb4daa58da0116c175f0e1e80.html">Mac终端编辑完成后如何保存</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>4.使用<code>source $HOME/.zshrc</code>命令来使环境变量设置立即生效（否则重启后才生效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.zshrc</span><br></pre></td></tr></table></figure>

<p>5.使用<code>echo $ANDROID_SDK_ROOT</code>检查此变量是否已正确设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $ANDROID_SDK_ROOT</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输入完，在终端成功显示：<code>/Users/yangyanyi/Library/Android/sdk</code></p>
</blockquote>
<h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &#x27;:react-native-gradle-plugin&#x27;.</span><br><span class="line">&gt; Could not resolve all files for configuration &#x27;:react-native-gradle-plugin:classpath&#x27;.</span><br><span class="line">   &gt; Could not download kotlin-gradle-plugin-1.6.10.jar (org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line">   &gt; Could not download kotlin-compiler-embeddable-1.6.10.jar (org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 12m 28s</span><br><span class="line"></span><br><span class="line">error Failed to install the app. Make sure you have the Android development environment set up: https://reactnative.dev/docs/environment-setup.</span><br><span class="line">Error: Command failed: ./gradlew app:installDebug -PreactNativeDevServerPort=8081</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &#x27;:react-native-gradle-plugin&#x27;.</span><br><span class="line">&gt; Could not resolve all files for configuration &#x27;:react-native-gradle-plugin:classpath&#x27;.</span><br><span class="line">   &gt; Could not download kotlin-gradle-plugin-1.6.10.jar (org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-gradle-plugin/1.6.10/kotlin-gradle-plugin-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line">   &gt; Could not download kotlin-compiler-embeddable-1.6.10.jar (org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.10)</span><br><span class="line">      &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">         &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.6.10/kotlin-compiler-embeddable-1.6.10.jar&#x27;.</span><br><span class="line">            &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.40.215] failed: connect timed out</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line"></span><br><span class="line">BUILD FAILED in 12m 28s</span><br><span class="line"></span><br><span class="line">    at makeError (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/execa/index.js:174:9)</span><br><span class="line">    at /Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/execa/index.js:278:16</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:96:5)</span><br><span class="line">    at async runOnAllDevices (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js:109:5)</span><br><span class="line">    at async Command.handleAction (/Users/yangyanyi/Documents/Code/Gitee/reactive_native/myapp/node_modules/@react-native-community/cli/build/index.js:142:9)</span><br><span class="line">info Run CLI with --verbose flag for more details.</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG图片的使用</title>
    <url>/2019/07/29/SVG%E5%9B%BE%E7%89%87%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>CSS也可以使用SVG文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">    background: url(icon.svg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SVG文件还可以转为BASE64编码，然后作为Data URL写入网页。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;data:image/svg+xml; base64, [data]&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>2.1<code>&lt;svg&gt;</code>标签<br>SVG代码都放在顶层标签<code>&lt;svg&gt;</code>之中。下面是一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;&quot;1O0%&quot; height=&quot;&quot;100%&quot;&gt;</span><br><span class="line">    &lt;circle id=&quot;mycircle&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;50&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>width属性和height属性，制定了SVG图像在HTML元素中所占据的宽度和高度。除了相对单位，也可以采用绝对单位（单位︰像素)。如果不指定这两个属性，SVG图像默认大小是300像素（宽）*150像素（高)。<br>如果只想展示SG图像的一部分，就要指定viewBox属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;100&quot; height=&quot;100&quot; viewBox=&quot;50 50 50 50&quot;&gt;</span><br><span class="line">	&lt;circle id=&quot;mycircle&quot; cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;50&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>viewBox属性的值有四个数字，分别是左上角的横坐标和纵坐标、视口的高度和宽度。上面代码中，SVG图像是<code>100像素宽*100像素高</code>，viewBox属性指定视口从（ 50，50 )这个点开始。所以，实际看到的是右下角的四分之一圆。<br>注意，视口必须适配所在的空间。上面代码中，视口的大小是<code>50*50</code>，由于SVG图像的大小是<code>100*100</code>，所以视口会放大去适配SVG图像的大小，即放大了四倍。</p>
<p>如果不指定width属性和height属性，只指定viewBox属性，则相当于只给到定SVG图像的长宽比。这时，SVG图像的默认大小将等于所在的HTML元素的大小。</p>
<p>2.2<code>&lt;circle&gt;</code>标签<br><code>&lt;circle&gt;</code>标签代表圆形。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">    &lt;circle cx=&quot;30&quot; cy=&quot;50&quot; r=&quot;25&quot;/&gt;</span><br><span class="line">    &lt;circle cx=&quot;90&quot; cy=&quot;50&quot; r=&quot;25&quot; c1ass=&quot;red&quot;/&gt;</span><br><span class="line">    &lt;circle cx=&quot;150&quot; cy=&quot;50&quot; r=&quot;25&quot; class=&quot;fancy&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了三个园。<code>&lt;circle&gt;</code>标签的cx、cy、r属性分别为横坐标、纵坐标和半径，单位为像素。坐标都是相对于<code>&lt;svg&gt;</code>画布的左上角原点。<br>class属性用来指定对应的CSS类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.red &#123;</span><br><span class="line">    fill: red;</span><br><span class="line">&#125;</span><br><span class="line">.fancy &#123;</span><br><span class="line">    fill: none;</span><br><span class="line">    stroke: black;</span><br><span class="line">    stroke-width:3pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SVG的CSS属性与网页元素有所不同。</p>
<ul>
<li>fill：填充色</li>
<li>stroke：描边色</li>
<li>stroke-width：边框宽度</li>
</ul>
<p>2.3<code>&lt;line&gt;</code>标签<br><code>&lt;line&gt;</code>标签用来绘制直线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot; height=&quot;180&quot;&gt;</span><br><span class="line">	&lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;200&quot; y2=&quot;0&quot; style=&quot;stroke:rgb(0,0,0);stroke-width:5;&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>&lt;line&gt;</code>标签的×1属性和y1属性，表示线段起点的横坐标和纵坐标;x2属性和y2属性，表示线段终点的横坐标和纵坐标; style属性表示线段的样式。</p>
<p>2.4<code> &lt;polyline&gt;</code>标签<br><code>&lt;polyline&gt;</code>标签用于绘制—根折线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg width=&quot;300&quot;&quot; height=&quot;&quot;180&quot;&gt;</span><br><span class="line">	&lt;polyline points=&quot;3,3 30,28 3,53&quot; fill=&quot;none&quot; stroke=&quot;black&quot;/&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;polyline&gt;</code>的points属性指定了每个端点的坐标，横坐标与纵坐标之间与逗号分隔，点与点之间用空格分隔。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux笔记</title>
    <url>/2021/04/12/Redux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://github.com/reduxjs">Redux-Github</a></p>
<p><a href="https://redux.js.org/">Redux-官网</a></p>
<p><a href="http://cn.redux.js.org/">Redux 中文官网</a></p>
<p><a href="https://react-redux.js.org/">React Redux</a></p>
<p><a href="https://www.redux.org.cn/">Redux 中文文档</a></p>
<p><a href="https://redux-toolkit-cn.netlify.app/">Redux工具包-中文文档</a></p>
<p><a href="https://redux-toolkit.js.org/">Redux Toolkit</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/103420294">七步搞定React Redux</a></p>
<p><a href="https://blog.csdn.net/weixin_57218747/article/details/118070930">React-Redux</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1707122824099613498&wfr=spider&for=pc">「HearLing」React学习之路-redux、react-redux</a></p>
<p><a href="http://cn.redux.js.org/introduction/learning-resources">学习资源</a></p>
<p><a href="https://github.com/reduxjs/redux.git">示例</a></p>
<p><a href="https://www.jianshu.com/p/9dcfa43d4e5a">Redux（基本用法）</a></p>
<p><strong><a href="https://github.com/reduxjs/rtk-convert-todos-example">使用Redux工具包的示例—-rtk-convert-todos-example</a></strong></p>
<p>Redux 有很好的<a href="https://link.jianshu.com/?t=http://redux.js.org/">文档</a>，还有配套的小视频（<a href="https://link.jianshu.com/?t=https://egghead.io/courses/getting-started-with-redux">前30集</a>，<a href="https://link.jianshu.com/?t=https://egghead.io/courses/building-react-applications-with-idiomatic-redux">后30集</a>）</p>
<p>博客：<a href="http://www.javashuo.com/article/p-ruetjmbl-cg.html">React进阶(4)-拆分Redux-将store,Reducer,action,actionTypes独立管理</a></p>
<h4 id="createStore-reducer-preloadedState-enhancer"><a href="#createStore-reducer-preloadedState-enhancer" class="headerlink" title="createStore(reducer, [preloadedState], [enhancer])"></a><a href="http://cn.redux.js.org/api/createstore">createStore(reducer, [preloadedState], [enhancer])</a></h4><p><code>reducer</code> <em>(Function)</em>: 接收两个参数，分别是当前的 state 树和要处理的 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary#action">action</a>，返回新的 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary#state">state 树</a></p>
<p> Reducer 必须是<strong>纯函数</strong></p>
<p><strong>不要在 reducer 中调用 API 接口请求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;redux&#x27;</span><br><span class="line"></span><br><span class="line">function todos(state = [], action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;ADD_TODO&#x27;:</span><br><span class="line">      return state.concat([action.text])</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let store = createStore(todos, [&#x27;Use Redux&#x27;])</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &#x27;ADD_TODO&#x27;,</span><br><span class="line">  text: &#x27;Read the docs&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// [ &#x27;Use Redux&#x27;, &#x27;Read the docs&#x27; ]</span><br></pre></td></tr></table></figure>

<h4 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士#"></a>小贴士<a href="http://cn.redux.js.org/api/createstore#%E5%B0%8F%E8%B4%B4%E5%A3%AB">#</a></h4><ul>
<li>应用中不要创建多个 store！相反，使用 <a href="http://cn.redux.js.org/api/combinereducers"><code>combineReducers</code></a> 来把多个 reducer 创建成一个根 reducer。</li>
<li>Redux state 通常是普通 JS 对象或者数组。</li>
<li>如果 state 是普通对象，永远不要修改它！比如，reducer 里不要使用 <code>Object.assign(state, newData)</code>，应该使用 <code>Object.assign(&#123;&#125;, state, newData)</code>。这样才不会覆盖旧的 <code>state</code>。如果可以的话，也可以使用 <a href="http://cn.redux.js.org/recipes/using-object-spread-operator">对象拓展操作符（object spread spread operator</a> 特性中的 <code>return &#123; ...state, ...newData &#125;</code>。</li>
<li>对于服务端运行的同构应用，为每一个请求创建一个 store 实例，以此让 store 相隔离。dispatch 一系列请求数据的 action 到 store 实例上，等待请求完成后再在服务端渲染应用。</li>
<li>当 store 创建后，Redux 会 dispatch 一个 action 到 reducer 上，来用初始的 state 来填充 store。你不需要处理这个 action。但要记住，如果第一个参数也就是传入的 state 是 <code>undefined</code> 的话，reducer 应该返回初始的 state 值。</li>
<li>要使用多个 store 增强器的时候，你可能需要使用 <a href="http://cn.redux.js.org/api/compose">compose</a></li>
</ul>
<h4 id="combineReducers-reducers"><a href="#combineReducers-reducers" class="headerlink" title="combineReducers(reducers)"></a><a href="http://cn.redux.js.org/api/combinereducers/">combineReducers(reducers)</a></h4><p><code>combineReducers</code> 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 <a href="http://cn.redux.js.org/api/createstore"><code>createStore</code></a> 方</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p><code>reducers/todos.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function todos(state = [], action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;ADD_TODO&#x27;:</span><br><span class="line">      return state.concat([action.text])</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reducers/counter.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function counter(state = 0, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;INCREMENT&#x27;:</span><br><span class="line">      return state + 1</span><br><span class="line">    case &#x27;DECREMENT&#x27;:</span><br><span class="line">      return state - 1</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reducers/index.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &#x27;redux&#x27;</span><br><span class="line">import todos from &#x27;./todos&#x27;</span><br><span class="line">import counter from &#x27;./counter&#x27;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">  todos,</span><br><span class="line">  counter</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>App.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#x27;redux&#x27;</span><br><span class="line">import reducer from &#x27;./reducers/index&#x27;</span><br><span class="line"></span><br><span class="line">let store = createStore(reducer)</span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;</span><br><span class="line">//   counter: 0,</span><br><span class="line">//   todos: []</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &#x27;ADD_TODO&#x27;,</span><br><span class="line">  text: &#x27;Use Redux&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;</span><br><span class="line">//   counter: 0,</span><br><span class="line">//   todos: [ &#x27;Use Redux&#x27; ]</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a><a href="http://cn.redux.js.org/api/store/#store-%E6%96%B9%E6%B3%95">Store</a></h4><h4 id="Store-1"><a href="#Store-1" class="headerlink" title="Store"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#store">Store</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; reducer: counterReducer &#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;value: 0&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 是把数据传入 store 的惟一途径，所以任何数据，无论来自 UI 事件，网络回调或者是其它资源如 WebSockets，最终都应该以 action 的形式被 dispatch</p>
<p><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#action"><strong>action</strong></a> 是一个具有 <code>type</code> 字段的普通 JavaScript 对象。<strong>你可以将 action 视为描述应用程序中发生了什么的事件</strong>.</p>
<p><code>type</code> 字段是一个字符串，给这个 action 一个描述性的名字，比如<code>&quot;todos/todoAdded&quot;</code>。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个 action 所属的特征或类别，第二部分是发生的具体事情。</p>
<p>action 对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为 <code>payload</code> 的字段中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const addTodoAction = &#123;</span><br><span class="line">  type: &#x27;todos/todoAdded&#x27;,</span><br><span class="line">  payload: &#x27;Buy milk&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#action-creator"><strong>action creator</strong></a> 是一个创建并返回一个 action 对象的函数。它的作用是让你不必每次都手动编写 action 对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const addTodo = text =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: &#x27;todos/todoAdded&#x27;,</span><br><span class="line">    payload: text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#reducer">Reducer</a></h4><p><strong>reducer</strong> 是一个函数，接收当前的 <code>state</code> 和一个 <code>action</code> 对象，必要时决定如何更新状态，并返回新状态。函数签名是：<code>(state, action) =&gt; newState</code>。 <strong>你可以将 reducer 视为一个事件监听器，它根据接收到的 action（事件）类型处理事件。</strong></p>
<ul>
<li>禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">function counterReducer(state = initialState, action) &#123;</span><br><span class="line">  // 检查 reducer 是否关心这个 action</span><br><span class="line">  if (action.type === &#x27;counter/increment&#x27;) &#123;</span><br><span class="line">    // 如果是，复制 `state`</span><br><span class="line">    return &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      // 使用新值更新 state 副本</span><br><span class="line">      value: state.value + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回原来的 state 不变</span><br><span class="line">  return state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#dispatch">Dispatch</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">store.dispatch(&#123; type: &#x27;counter/increment&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure>

<p>我们通常调用 action creator 来调用 action：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const increment = () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: &#x27;counter/increment&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(increment())</span><br><span class="line"></span><br><span class="line">console.log(store.getState())</span><br><span class="line">// &#123;value: 2&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux 数据流"></a><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts#redux-%E6%95%B0%E6%8D%AE%E6%B5%81">Redux 数据流</a></h3><p>初始启动：</p>
<ul>
<li>使用最顶层的 root reducer 函数创建 Redux store</li>
</ul>
<p><img src="http://cn.redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="动画的方式来表达数据流更新"></p>
<h4 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h4><p><img src="https://redux.js.org/assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif" alt="异步"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>Redux 是一个管理全局应用状态的库<ul>
<li>Redux 通常与 React-Redux 库一起使用，把 Redux 和 React 集成在一起</li>
<li>Redux Toolkit 是编写 Redux 逻辑的推荐方式</li>
</ul>
</li>
<li>Redux 使用 “单向数据流”<ul>
<li>State 描述了应用程序在某个时间点的状态，UI 基于该状态渲染</li>
<li>当应用程序中发生某些事情时：<ul>
<li>UI dispatch 一个 action</li>
<li>store 调用 reducer，随后根据发生的事情来更新 state</li>
<li>store 通知 UI state 发生了变化</li>
</ul>
</li>
<li>UI 基于新 state 重新渲染</li>
</ul>
</li>
<li>Redux 有这几种类型的代码<ul>
<li><em>Action</em> 是有 <code>type</code> 字段的纯对象，描述发生了什么</li>
<li><em>Reducer</em> 是纯函数，基于先前的 state 和 action 来计算新的 state</li>
<li>每当 dispatch 一个 action 后，<em>store</em> 就会调用 root reducer</li>
</ul>
</li>
</ul>
<h4 id="applyMiddleware-…middleware"><a href="#applyMiddleware-…middleware" class="headerlink" title="applyMiddleware(…middleware)"></a><a href="http://cn.redux.js.org/api/applymiddleware/">applyMiddleware(…middleware)</a></h4><p><a href="https://github.com/reduxjs/redux-thunk">redux-thunk</a></p>
<p><a href="https://redux.js.org/usage/writing-logic-thunks">Writing Logic with Thunks</a></p>
<p>Middleware 是一个组合 <a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary/#dispatching-function">dispatch 函数</a> 的高阶函数，返回一个新的 dispatch 函数，通常将<a href="http://cn.redux.js.org/understanding/thinking-in-redux/glossary/#%E5%BC%82%E6%AD%A5-action">异步 action</a> 转换成 action</p>
<h3 id="subscribe-listener"><a href="#subscribe-listener" class="headerlink" title="subscribe(listener)"></a><a href="http://cn.redux.js.org/api/store#subscribelistener">subscribe(listener)</a></h3><p><a href="https://blog.csdn.net/weixin_40119412/article/details/120811920">Redux学习篇:关于store.subscribe()监听方法与取消监听的认识</a></p>
<blockquote>
<p>Store 允许使用store.subscribe方法设置<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>函数，一旦 State 发生变化，就自动执行这个函数。</p>
<p>store.subscribe方法返回一个函数，调用这个函数就可以解除监听</p>
</blockquote>
<h2 id="计数器示例应用程序"><a href="#计数器示例应用程序" class="headerlink" title="计数器示例应用程序"></a>计数器示例应用程序</h2><p>本项目使用 <a href="https://github.com/reduxjs/cra-template-redux">Create-React-App 的官方 Redux 模板</a> 创建。开箱即用，它已经配置了标准的 Redux 应用程序结构，使用 <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> 创建 Redux 存储和逻辑，以及 <a href="https://react-redux.js.org/">React-Redux</a> 将 Redux 存储和 React 组件连接在一起。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app redux-essentials-example --template redux</span><br></pre></td></tr></table></figure>

<h4 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h4><p><strong><a href="https://baijiahao.baidu.com/s?id=1707122824099613498&wfr=spider&for=pc">react-redux</a>发布了新的版本，与之前的contextAPI分离，提供对hooks的支持，那这不就更香了新的redux带来的改变</strong></p>
<ol>
<li><strong>「不再需要使用」</strong>mapStateToProps，mapDispatchToProps和connect来维护单独的container组件和UI组件，而是在组件中直接使用redux提供的hooks,读取redux中的state。</li>
<li>可以将任何现有的自定义<strong>「hooks与redux集成」</strong>，而不是将通过hooks创建的state，作为参数传递给其他hooks</li>
</ol>
<ul>
<li><p><strong>「useSelector：」</strong> 用于从Redux存储的state中提取值并订阅该state。</p>
</li>
<li><p><strong>「useDispatch：」</strong> 除了读取store中的state，还能dispatch actions更新store中的state。</p>
</li>
<li><p><strong>「useStore：」</strong> 用于获取创建的store实例</p>
</li>
</ul>
<h4 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#reading-state-from-the-store-with-useselector">useSelector</a></h4><p><span style="color:red">使用useSelector、useDispatch等HooksApi替代connect，减少模板代码。</span></p>
<p><code>useSelector</code> accepts a single function, which we call a <strong>selector</strong> function. <strong>A selector is a function that takes the entire Redux store state as its argument, reads some value from the state, and returns that result</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectTodos = state =&gt; state.todos</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectTotalCompletedTodos = state =&gt; &#123;</span><br><span class="line">  const completedTodos = state.todos.filter(todo =&gt; todo.completed)</span><br><span class="line">  return completedTodos.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; useSelector &#125; from &#x27;react-redux&#x27;</span><br><span class="line">import TodoListItem from &#x27;./TodoListItem&#x27;</span><br><span class="line"></span><br><span class="line">const selectTodos = state =&gt; state.todos</span><br><span class="line"></span><br><span class="line">const TodoList = () =&gt; &#123;</span><br><span class="line">  const todos = useSelector(selectTodos)</span><br><span class="line"></span><br><span class="line">  // since `todos` is an array, we can loop over it</span><br><span class="line">  const renderedListItems = todos.map(todo =&gt; &#123;</span><br><span class="line">    return &lt;TodoListItem key=&#123;todo.id&#125; todo=&#123;todo&#125; /&gt;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return &lt;ul className=&quot;todo-list&quot;&gt;&#123;renderedListItems&#125;&lt;/ul&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default TodoList</span><br></pre></td></tr></table></figure>

<blockquote>
<p>useSelector 自动为我们订阅了 Redux 存储！ 这样，任何时候分派一个动作，它都会立即再次调用它的选择器函数。 如果选择器返回的值与上次运行时相比发生了变化，useSelector 将强制我们的组件使用新数据重新渲染。 我们所要做的就是在我们的组件中调用 useSelector() 一次，它会为我们完成剩下的工作</p>
</blockquote>
<p>还值得注意的是，我们不必将选择器函数编写为单独的变量。您可以直接在 useSelector 调用中编写选择器函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const todos = useSelector(state =&gt; state.todos)</span><br></pre></td></tr></table></figure>

<h4 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#dispatching-actions-with-usedispatch">useDispatch</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; useDispatch &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">const Header = () =&gt; &#123;</span><br><span class="line">  const [text, setText] = useState(&#x27;&#x27;)</span><br><span class="line">  const dispatch = useDispatch()</span><br><span class="line"></span><br><span class="line">  const handleChange = e =&gt; setText(e.target.value)</span><br><span class="line"></span><br><span class="line">  const handleKeyDown = e =&gt; &#123;</span><br><span class="line">    const trimmedText = e.target.value.trim()</span><br><span class="line">    // If the user pressed the Enter key:</span><br><span class="line">    if (e.key === &#x27;Enter&#x27; &amp;&amp; trimmedText) &#123;</span><br><span class="line">      // Dispatch the &quot;todo added&quot; action with this text</span><br><span class="line">      dispatch(&#123; type: &#x27;todos/todoAdded&#x27;, payload: trimmedText &#125;)</span><br><span class="line">      // And clear out the text input</span><br><span class="line">      setText(&#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;What needs to be done?&quot;</span><br><span class="line">      autoFocus=&#123;true&#125;</span><br><span class="line">      value=&#123;text&#125;</span><br><span class="line">      onChange=&#123;handleChange&#125;</span><br><span class="line">      onKeyDown=&#123;handleKeyDown&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header</span><br></pre></td></tr></table></figure>

<p>hook 是一个 JS 函数，所以它不能自动从 store.js 中自动导入 store</p>
<p>We do this by <strong>rendering a <code>&lt;Provider&gt;</code> component around our entire <code>&lt;App&gt;</code>, and passing the Redux store as a prop to <code>&lt;Provider&gt;</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br><span class="line">import &#123; Provider &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  // Render a `&lt;Provider&gt;` around the entire `&lt;App&gt;`,</span><br><span class="line">  // and pass the Redux store to as a prop</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&#x27;root&#x27;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>React-Redux 与 React 结合使用的关键部分：</p>
<ul>
<li>Call the <code>useSelector</code> hook to read data in React components</li>
<li>Call the <code>useDispatch</code> hook to dispatch actions in React components</li>
<li>Put <code>&lt;Provider store=&#123;store&#125;&gt;</code> around your entire <code>&lt;App&gt;</code> component so that other components can talk to the store</li>
</ul>
<h3 id="Global-State-Component-State-and-Forms"><a href="#Global-State-Component-State-and-Forms" class="headerlink" title="Global State, Component State, and Forms"></a>Global State, Component State, and Forms</h3><p><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#react-redux-patterns">在 React + Redux 应用程序中，你的全局状态应该放在 Redux 存储中，而你的本地状态应该留在 React 组件中</a>：</p>
<ul>
<li>Do other parts of the application care about this data?</li>
<li>Do you need to be able to create further derived data based on this original data?</li>
<li>Is the same data being used to drive multiple components?</li>
<li>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</li>
<li>Do you want to cache the data (ie, use what’s in state if it’s already there instead of re-requesting it)?</li>
<li>Do you want to keep this data consistent while hot-reloading UI components (which may lose their internal state when swapped)?</li>
</ul>
<p><strong>Most form state probably shouldn’t be kept in Redux</strong></p>
<h3 id="Using-Multiple-Selectors-in-a-Component"><a href="#Using-Multiple-Selectors-in-a-Component" class="headerlink" title="Using Multiple Selectors in a Component"></a><a href="http://cn.redux.js.org/tutorials/fundamentals/part-5-ui-react/#using-multiple-selectors-in-a-component">Using Multiple Selectors in a Component</a></h3><p><strong>We can call <code>useSelector</code> multiple times within one component</strong>. In fact, this is actually a good idea - <strong>each call to <code>useSelector</code> should always return the smallest amount of state possible</strong></p>
<h3 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a><a href="https://redux-toolkit.js.org/"><strong>Redux Toolkit</strong></a></h3><h4 id="Redux-Toolkit-是什么？"><a href="#Redux-Toolkit-是什么？" class="headerlink" title="Redux Toolkit 是什么？"></a><a href="http://cn.redux.js.org/redux-toolkit/overview/#redux-toolkit-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Redux Toolkit 是什么？</a></h4><blockquote>
<p>简化最常见场景下的 Redux 开发，包括配置 store、定义 reducer，不可变的更新逻辑、甚至可以立即创建整个状态的 “切片 slice”，而无需手动编写任何 action creator 或者 action type。它还包括使用最广泛的 Redux 插件，例如 Redux Thunk 用于异步逻辑，而 Reselect 用于编写选择器 selector 函数，因此你可以立即使用它们。</p>
</blockquote>
<h4 id="createSlice"><a href="#createSlice" class="headerlink" title="createSlice"></a><a href="https://redux-toolkit.js.org/api/createSlice">createSlice</a></h4><p>接受一组化 reducer 函数，一个 slice 切片名和初始状态 initial state，并自动生成具有相应 action creator 和 action type 的 slice reducer</p>
<h5 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; nanoid &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const id = nanoid()</span><br></pre></td></tr></table></figure>

<p><code>createSlice</code> will return an object that looks like：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name : string,</span><br><span class="line">    reducer : ReducerFunction,</span><br><span class="line">    actions : Record&lt;string, ActionCreator&gt;,</span><br><span class="line">    caseReducers: Record&lt;string, CaseReducer&gt;.</span><br><span class="line">    getInitialState: () =&gt; State</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: &quot;todos&quot;,</span><br><span class="line">  reducer: (state, action) =&gt; newState,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    addTodo: (payload) =&gt; (&#123;type: &quot;todos/addTodo&quot;, payload&#125;),</span><br><span class="line">    toggleTodo: (payload) =&gt; (&#123;type: &quot;todos/toggleTodo&quot;, payload&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  caseReducers: &#123;</span><br><span class="line">    addTodo: (state, action) =&gt; newState,</span><br><span class="line">    toggleTodo: (state, action) =&gt; newState,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="reducer不容许直接修改state"><a href="#reducer不容许直接修改state" class="headerlink" title="reducer不容许直接修改state"></a>reducer不容许直接修改state</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对原有的上一次的state作一次深拷贝,在Redux中,reducer不容许直接修改state</span><br><span class="line">// const newState = Object.assign(&#123;&#125;, state);</span><br><span class="line">const newState = JSON.parse(JSON.stringify(state));</span><br><span class="line">newState.inputValue = action.value; // 将新的value值赋值给newState</span><br><span class="line">return newState;</span><br></pre></td></tr></table></figure>



<h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice, createAction &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line">import &#123; createStore, combineReducers &#125; from &#x27;redux&#x27;</span><br><span class="line"></span><br><span class="line">const incrementBy = createAction(&#x27;incrementBy&#x27;)</span><br><span class="line">const decrementBy = createAction(&#x27;decrementBy&#x27;)</span><br><span class="line"></span><br><span class="line">const counter = createSlice(&#123;</span><br><span class="line">  name: &#x27;counter&#x27;,</span><br><span class="line">  initialState: 0,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: (state) =&gt; state + 1,</span><br><span class="line">    decrement: (state) =&gt; state - 1,</span><br><span class="line">    multiply: &#123;</span><br><span class="line">      reducer: (state, action) =&gt; state * action.payload,</span><br><span class="line">      prepare: (value) =&gt; (&#123; payload: value || 2 &#125;), // fallback if the payload is a falsy value</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // &quot;builder callback API&quot;, recommended for TypeScript users</span><br><span class="line">  extraReducers: (builder) =&gt; &#123;</span><br><span class="line">    builder.addCase(incrementBy, (state, action) =&gt; &#123;</span><br><span class="line">      return state + action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">    builder.addCase(decrementBy, (state, action) =&gt; &#123;</span><br><span class="line">      return state - action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const user = createSlice(&#123;</span><br><span class="line">  name: &#x27;user&#x27;,</span><br><span class="line">  initialState: &#123; name: &#x27;&#x27;, age: 20 &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    setUserName: (state, action) =&gt; &#123;</span><br><span class="line">      state.name = action.payload // mutate the state all you want with immer</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // &quot;map object API&quot;</span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [counter.actions.increment]: (</span><br><span class="line">      state,</span><br><span class="line">      action /* action will be inferred as &quot;any&quot;, as the map notation does not contain type information */</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">      state.age += 1</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const reducer = combineReducers(&#123;</span><br><span class="line">  counter: counter.reducer,</span><br><span class="line">  user: user.reducer,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">store.dispatch(counter.actions.increment())</span><br><span class="line">// -&gt; &#123; counter: 1, user: &#123;name : &#x27;&#x27;, age: 21&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.increment())</span><br><span class="line">// -&gt; &#123; counter: 2, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.multiply(3))</span><br><span class="line">// -&gt; &#123; counter: 6, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">store.dispatch(counter.actions.multiply())</span><br><span class="line">// -&gt; &#123; counter: 12, user: &#123;name: &#x27;&#x27;, age: 22&#125; &#125;</span><br><span class="line">console.log(`$&#123;counter.actions.decrement&#125;`)</span><br><span class="line">// -&gt; &quot;counter/decrement&quot;</span><br><span class="line">store.dispatch(user.actions.setUserName(&#x27;eric&#x27;))</span><br><span class="line">// -&gt; &#123; counter: 12, user: &#123; name: &#x27;eric&#x27;, age: 22&#125; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="createAction"><a href="#createAction" class="headerlink" title="createAction"></a><a href="https://redux-toolkit.js.org/api/createAction">createAction</a></h4><p>创建actions的原先做法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const INCREMENT = &#x27;counter/increment&#x27;</span><br><span class="line"></span><br><span class="line">function increment(amount) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    type: INCREMENT,</span><br><span class="line">    payload: amount,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const action = increment(3)</span><br><span class="line">// &#123; type: &#x27;counter/increment&#x27;, payload: 3 &#125;</span><br></pre></td></tr></table></figure>

<p>The <code>createAction</code> helper combines these two declarations into one. It takes an action type and returns an action creator for that type. The action creator can be called either without arguments or with a <code>payload</code> to be attached to the action. Also, the action creator overrides <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">toString()</a> so that the action type becomes its string representation.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line"></span><br><span class="line">let action = increment()</span><br><span class="line">// &#123; type: &#x27;counter/increment&#x27; &#125;</span><br><span class="line"></span><br><span class="line">action = increment(3)</span><br><span class="line">// returns &#123; type: &#x27;counter/increment&#x27;, payload: 3 &#125;</span><br><span class="line"></span><br><span class="line">console.log(increment.toString())</span><br><span class="line">// &#x27;counter/increment&#x27;</span><br><span class="line"></span><br><span class="line">console.log(`The action type is: $&#123;increment&#125;`)</span><br><span class="line">// &#x27;The action type is: counter/increment&#x27;</span><br></pre></td></tr></table></figure>



<p><code>createAction</code> accepts an optional second argument: a “prepare callback” that will be used to construct the payload value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, nanoid &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const addTodo = createAction(&#x27;todos/add&#x27;, function prepare(text) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    payload: &#123;</span><br><span class="line">      text,</span><br><span class="line">      id: nanoid(),</span><br><span class="line">      createdAt: new Date().toISOString(),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(addTodo(&#x27;Write more docs&#x27;))</span><br><span class="line">/**</span><br><span class="line"> * &#123;</span><br><span class="line"> *   type: &#x27;todos/add&#x27;,</span><br><span class="line"> *   payload: &#123;</span><br><span class="line"> *     text: &#x27;Write more docs&#x27;,</span><br><span class="line"> *     id: &#x27;4AJvwMSWEHCchcWYga3dj&#x27;,</span><br><span class="line"> *     createdAt: &#x27;2019-10-03T07:53:36.581Z&#x27;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> **/</span><br></pre></td></tr></table></figure>

<h4 id="Usage-with-createReducer"><a href="#Usage-with-createReducer" class="headerlink" title="Usage with createReducer()"></a><a href="https://redux-toolkit.js.org/api/createAction">Usage with createReducer()</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, createReducer &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line">const decrement = createAction(&#x27;counter/decrement&#x27;)</span><br><span class="line"></span><br><span class="line">const counterReducer = createReducer(0, (builder) =&gt; &#123;</span><br><span class="line">  builder.addCase(increment, (state, action) =&gt; state + action.payload)</span><br><span class="line">  builder.addCase(decrement, (state, action) =&gt; state - action.payload)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="builder-addCase"><a href="#builder-addCase" class="headerlink" title="builder.addCase"></a><a href="https://redux-toolkit.js.org/api/createReducer#builderaddcase">builder.addCase</a></h4><h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h4><ul>
<li><strong>actionCreator</strong> Either a plain action type string, or an action creator generated by <a href="https://redux-toolkit.js.org/api/createAction"><code>createAction</code></a> that can be used to determine the action type.</li>
<li><strong>reducer</strong> The actual case reducer function.</li>
</ul>
<h4 id="createReducer"><a href="#createReducer" class="headerlink" title="createReducer()"></a><a href="https://redux-toolkit.js.org/api/createReducer">createReducer()</a></h4><p>Redux <a href="https://redux.js.org/basics/reducers">reducers</a> are often implemented using a <code>switch</code> statement, with one <code>case</code> for every handled action type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">function counterReducer(state = initialState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value + 1 &#125;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value - 1 &#125;</span><br><span class="line">    case &#x27;incrementByAmount&#x27;:</span><br><span class="line">      return &#123; ...state, value: state.value + action.payload &#125;</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With <code>createReducer</code>, your reducers instead look like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createAction, createReducer &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const increment = createAction(&#x27;counter/increment&#x27;)</span><br><span class="line">const decrement = createAction(&#x27;counter/decrement&#x27;)</span><br><span class="line">const incrementByAmount = createAction(&#x27;counter/incrementByAmount&#x27;)</span><br><span class="line"></span><br><span class="line">const initialState = &#123; value: 0 &#125;</span><br><span class="line"></span><br><span class="line">const counterReducer = createReducer(initialState, (builder) =&gt; &#123;</span><br><span class="line">  builder</span><br><span class="line">    .addCase(increment, (state, action) =&gt; &#123;</span><br><span class="line">      state.value++</span><br><span class="line">    &#125;)</span><br><span class="line">    .addCase(decrement, (state, action) =&gt; &#123;</span><br><span class="line">      state.value--</span><br><span class="line">    &#125;)</span><br><span class="line">    .addCase(incrementByAmount, (state, action) =&gt; &#123;</span><br><span class="line">      state.value += action.payload</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="Parameters-1"><a href="#Parameters-1" class="headerlink" title="Parameters"></a>Parameters</h5><ul>
<li><p><strong>initialState</strong> <code>State | (() =&gt; State)</code>:</p>
</li>
<li><p><strong>builderCallback</strong> <code>(builder: Builder) =&gt; void</code>      <code> builder.addCase(actionCreatorOrType, reducer)</code></p>
</li>
</ul>
<h4 id="configureStore"><a href="#configureStore" class="headerlink" title="configureStore"></a><a href="https://redux-toolkit.js.org/api/configureStore">configureStore</a></h4><h4 id="getDefaultMiddleware"><a href="#getDefaultMiddleware" class="headerlink" title="getDefaultMiddleware"></a><a href="https://redux-toolkit.js.org/api/getDefaultMiddleware">getDefaultMiddleware</a></h4><p><a href="https://redux-toolkit-cn.netlify.app/tutorials/intermediate-tutorial">Redux工具包-使用教程</a></p>
<h4 id="Store数据-持久化"><a href="#Store数据-持久化" class="headerlink" title="Store数据-持久化"></a>Store数据-持久化</h4><p><a href="https://blog.csdn.net/weixin_47077674/article/details/122617851?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165025080216782246469362%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165025080216782246469362&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-122617851.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E5%A6%82%E4%BD%95%E5%9C%A8React%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E7%9A%84%E7%8A%B6%E6%80%81%E6%8C%81%E4%B9%85%E5%8C%96&spm=1018.2226.3001.4187">如何在React中实现全局数据的状态持久化？一篇文章让你看懂状态持久化</a></p>
<p><a href="https://www.jianshu.com/p/59a85632d781">react-几步搞定redux-persist-持久化存储</a></p>
<h5 id="src-app-RootReducers-js"><a href="#src-app-RootReducers-js" class="headerlink" title="src/app/RootReducers.js"></a>src/app/RootReducers.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &quot;@reduxjs/toolkit&quot;;</span><br><span class="line">import userReducer from &quot;../reducers/userSlice&quot;;</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">    user: userReducer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="src-app-store-js"><a href="#src-app-store-js" class="headerlink" title="src/app/store.js"></a>src/app/store.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;;</span><br><span class="line">import &#123; persistStore, persistReducer &#125; from &#x27;redux-persist&#x27;;</span><br><span class="line">import storage from &#x27;redux-persist/lib/storage&#x27;;</span><br><span class="line">import rootReducer from &#x27;./RootReducers&#x27;;</span><br><span class="line"></span><br><span class="line">const persistConfig = &#123;</span><br><span class="line">  key: &#x27;root&#x27;,</span><br><span class="line">  storage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const persistedReducer = persistReducer(</span><br><span class="line">  persistConfig,</span><br><span class="line">  rootReducer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export const store = configureStore(&#123;</span><br><span class="line">  reducer: persistedReducer,</span><br><span class="line">  middleware: (getDefaultMiddleware) =&gt;</span><br><span class="line">    getDefaultMiddleware(&#123;</span><br><span class="line">      serializableCheck: false,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">export const persistor = persistStore(store)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; Provider &#125; from &#x27;react-redux&#x27;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">import &#x27;./index.css&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">import * as serviceWorker from &#x27;./serviceWorker&#x27;;</span><br><span class="line">import &#123; store, persistor &#125; from &#x27;./app/store&#x27;;</span><br><span class="line">import &#123; PersistGate &#125; from &quot;redux-persist/integration/react&quot;</span><br><span class="line"></span><br><span class="line">import &#123; createRoot &#125; from &#x27;react-dom/client&#x27;;</span><br><span class="line">const container = document.getElementById(&#x27;root&#x27;);</span><br><span class="line">const root = createRoot(container);</span><br><span class="line">root.render(</span><br><span class="line">    &lt;React.StrictMode&gt;</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt;</span><br><span class="line">                &lt;BrowserRouter&gt;</span><br><span class="line">                    &lt;App/&gt;</span><br><span class="line">                &lt;/BrowserRouter&gt;</span><br><span class="line">            &lt;/PersistGate&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">    &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// If you want your app to work offline and load faster, you can change</span><br><span class="line">// unregister() to register() below. Note this comes with some pitfalls.</span><br><span class="line">// Learn more about service workers: https://bit.ly/CRA-PWA</span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=&quot;/&quot; element=&#123;&lt;Container/&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/home&quot; element=&#123;&lt;Home /&gt;&#125;&gt;</span><br><span class="line">          &lt;Route path=&quot;/home/:id&quot; element=&#123;&lt;Home /&gt;&#125; /&gt;</span><br><span class="line">        &lt;/Route&gt; */&#125;</span><br><span class="line">        &#123;/* &lt;Route path=&quot;/product&quot; element=&#123;&lt;Container /&gt;&#125;&gt;</span><br><span class="line">          &lt;Route path=&quot;/product/add&quot; element=&#123;&lt;AddProduct /&gt;&#125; /&gt;</span><br><span class="line">          &lt;Route path=&quot;/product/edit/:id&quot; element=&#123;&lt;EditProduct /&gt;&#125; /&gt;</span><br><span class="line">        &lt;/Route&gt; */&#125;</span><br><span class="line"></span><br><span class="line">      &#123;/* &lt;/Routes&gt; */&#125;</span><br></pre></td></tr></table></figure>



<h4 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React Redux"></a><a href="https://react-redux.js.org/">React Redux</a></h4><h4 id="redux-persist"><a href="#redux-persist" class="headerlink" title="redux-persist"></a><a href="https://github.com/rt2zz/redux-persist">redux-persist</a></h4><p><a href="https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist">Use with Redux-Persist</a></p>
<h4 id="Redux-Toolkit–使用教程"><a href="#Redux-Toolkit–使用教程" class="headerlink" title="Redux Toolkit–使用教程"></a><a href="https://redux-toolkit.js.org/tutorials/quick-start">Redux Toolkit–使用教程</a></h4>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Redux</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text相关笔记</title>
    <url>/2019/08/24/Sublime-Text%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/Submit%20Text.jpg" alt="img"></p>
<h2 id="Sublime3安装配置"><a href="#Sublime3安装配置" class="headerlink" title="Sublime3安装配置"></a>Sublime3安装配置</h2><p>Sublime跨平台的前端开发神器，共享软傺</p>
<p>下载最新Sublime3安装包</p>
<ul>
<li><p>官网地址: <a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></p>
</li>
<li><p>网盘地址: <a href="http://pan.baidu.com/s/1ntszCgT">http://pan.baidu.com/s/1ntszCgT</a></p>
</li>
<li><p>安装包管理器</p>
</li>
<li><ul>
<li>打开Sublime3控制台，ctrl+~</li>
<li>输入安装包管理器命令代码(见备注)</li>
<li>注意需要联网才能安装，因为是在线下载包。</li>
<li>包管理器的官网地址: <a href="https://packagecontrol.io/">https://packagecontrol.io</a></li>
</ul>
</li>
</ul>
<h4 id="Sublime-Text-3-安装Package-Control"><a href="#Sublime-Text-3-安装Package-Control" class="headerlink" title="Sublime Text 3 安装Package Control"></a><a href="https://www.cnblogs.com/luoshupeng/p/3310777.html">Sublime Text 3 安装Package Control</a></h4><h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><p><a href="https://www.douban.com/note/326071630/?type=like&_i=3394023-X_1kzR">SublimeText自带格式化代码功能 - reindent</a></p>
<p>1、首先通过以下路径打开用户按键绑定文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Preferences → Key Bindings – User</span><br></pre></td></tr></table></figure>

<p>2、然后在其中添加以下代码（如果你有需要的话，其中的快捷键组合是可以自己定义的）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;keys&quot;: [&quot;ctrl+shift+r&quot;], &quot;command&quot;: &quot;reindent&quot; , &quot;args&quot;:&#123;&quot;single_line&quot;: false&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title>React-笔记</title>
    <url>/2021/03/02/React-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://reactjs.org/">React官网</a></p>
<p><a href="https://create-react-app.dev/">Create React App</a></p>
<h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app">创建应用</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>



<p>react使用Apifox的项目案例，可参考<code>Gitee/ad_manage_react</code>项目</p>
<p>json-server的使用，可参考<code>全球新闻发布系统项目</code></p>
<h4 id="单页面应用"><a href="#单页面应用" class="headerlink" title="单页面应用"></a>单页面应用</h4><p>与页面或后续页面的任何交互，都不再需要往返 server 加载资源，即页面不会重新加载</p>
<h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p><a href="https://babeljs.io/">Babel</a> 是 React 最常用的 compiler</p>
<h4 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h4><p>常用的打包 React 应用的工具有 <a href="https://webpack.js.org/">webpack</a> 和 <a href="http://browserify.org/">Browserify</a>。</p>
<h4 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h4><p><a href="https://www.npmjs.com/">npm</a> 和 <a href="https://yarnpkg.com/">Yarn</a> 是两个常用的管理 React 应用依赖的 package 管理工具</p>
<h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>React DOM 使用 camelCase（驼峰式命名）来定义属性的名称</p>
<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>组件名称应该始终以大写字母开头（<code>&lt;Wrapper/&gt;</code> <strong>而不是</strong> <code>&lt;wrapper/&gt;</code>）</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p><code>props</code> 是只读的。不应以任何方式修改它们</p>
<h4 id="组合-vs-继承"><a href="#组合-vs-继承" class="headerlink" title="组合 vs 继承"></a><a href="https://react.docschina.org/docs/composition-vs-inheritance.html">组合 vs 继承</a></h4><h4 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a><a href="https://react.docschina.org/docs/composition-vs-inheritance.html#containment">props.children</a></h4><p>每个组件都可以获取到 <code>props.children</code>。它包含组件的开始标签和结束标签之间的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Welcome&gt;Hello world!&lt;/Welcome&gt;</span><br></pre></td></tr></table></figure>

<p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 <code>children</code>，而是自行约定：将所需内容传入 props，并使用相应的 prop。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SplitPane(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;SplitPane&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;SplitPane-left&quot;&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=&quot;SplitPane-right&quot;&gt;</span><br><span class="line">        &#123;props.right&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SplitPane</span><br><span class="line">      left=&#123;</span><br><span class="line">        &lt;Contacts /&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dialog(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;FancyBorder color=&quot;blue&quot;&gt;</span><br><span class="line">      &lt;h1 className=&quot;Dialog-title&quot;&gt;</span><br><span class="line">        &#123;props.title&#125;      &lt;/h1&gt;</span><br><span class="line">      &lt;p className=&quot;Dialog-message&quot;&gt;</span><br><span class="line">        &#123;props.message&#125;      &lt;/p&gt;</span><br><span class="line">    &lt;/FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function WelcomeDialog() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Dialog      title=&quot;Welcome&quot;      message=&quot;Thank you for visiting our spacecraft!&quot; /&gt;  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dialog(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;FancyBorder color=&quot;blue&quot;&gt;</span><br><span class="line">      &lt;h1 className=&quot;Dialog-title&quot;&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &lt;p className=&quot;Dialog-message&quot;&gt;</span><br><span class="line">        &#123;props.message&#125;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;/FancyBorder&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SignUpDialog extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    this.handleSignUp = this.handleSignUp.bind(this);</span><br><span class="line">    this.state = &#123;login: &#x27;&#x27;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Dialog title=&quot;Mars Exploration Program&quot;</span><br><span class="line">              message=&quot;How should we refer to you?&quot;&gt;</span><br><span class="line">        &lt;input value=&#123;this.state.login&#125;</span><br><span class="line">               onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleSignUp&#125;&gt;</span><br><span class="line">          Sign Me Up!</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/Dialog&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.setState(&#123;login: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSignUp() &#123;</span><br><span class="line">    alert(`Welcome aboard, $&#123;this.state.login&#125;!`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>当组件中的一些数据在某些时刻发生变化时，这时就需要使用 <code>state</code> 来跟踪状态</p>
<p><code>state</code> 和 <code>props</code> 之间最重要的区别是：<code>props</code> 由父组件传入，而 <code>state</code> 由组件本身管理。组件不能修改 <code>props</code>，但它可以修改 <code>state</code>。</p>
<h4 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class">生命周期方法</a></h4><h4 id="受控组件-vs-非受控组件"><a href="#受控组件-vs-非受控组件" class="headerlink" title="受控组件 vs 非受控组件"></a><a href="https://zh-hans.reactjs.org/docs/forms.html#controlled-components">受控组件</a> vs <a href="https://zh-hans.reactjs.org/docs/uncontrolled-components.html">非受控组件</a></h4><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">Ref</a></h4><h4 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a><a href="https://zh-hans.reactjs.org/docs/lifting-state-up.html">状态提升</a></h4><h4 id="应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？"><a href="#应该在-React-组件的哪个生命周期函数中发起-AJAX-请求？" class="headerlink" title="应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？"></a>应该在 React 组件的哪个生命周期函数中发起 AJAX 请求？</h4><p>在 <a href="https://zh-hans.reactjs.org/docs/react-component.html#mounting"><code>componentDidMount</code></a> 这个生命周期函数中发起 AJAX 请求</p>
<h4 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#more-flexible-toolchains">工具链</a></h4><h4 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h4><p>所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS（cross-site-scripting, 跨站脚本）</a>攻击</p>
<h4 id="JSX-表示对象"><a href="#JSX-表示对象" class="headerlink" title="JSX 表示对象"></a>JSX 表示对象</h4><p>Babel 会把 JSX 转译成一个名为 <code>React.createElement()</code> 函数调用</p>
<p><code>React.createElement()</code> 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意：这是简化过的结构</span><br><span class="line">const element = &#123;</span><br><span class="line">  type: &#x27;h1&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: &#x27;greeting&#x27;,</span><br><span class="line">    children: &#x27;Hello, world!&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这些对象被称为 “<strong>React 元素</strong>”。</p>
<p><strong>仅使用 React 构建的应用通常只有单一的根 DOM 节点</strong>。如果你在将 React 集成进一个已有应用，那么你可以在应用中包含任意多的独立根 DOM 节点。</p>
<p>React 元素是<a href="https://en.wikipedia.org/wiki/Immutable_object">不可变对象</a>。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p>
<h4 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h4><p>组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。</p>
<p>建议从组件自身的角度命名 props，而不是依赖于调用组件的上下文命名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Avatar user=&#123;props.author&#125; /&gt;</span><br><span class="line"></span><br><span class="line">function Avatar(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;img className=&quot;Avatar&quot;</span><br><span class="line">      src=&#123;props.user.avatarUrl&#125;</span><br><span class="line">      alt=&#123;props.user.name&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改</strong></p>
<h4 id="不要直接修改-State"><a href="#不要直接修改-State" class="headerlink" title="不要直接修改 State"></a>不要直接修改 State</h4><p>应该使用 <code>setState()</code></p>
<p>构造函数是唯一可以给 <code>this.state</code> 赋值的地方</p>
<h4 id="State-的更新可能是异步的"><a href="#State-的更新可能是异步的" class="headerlink" title="State 的更新可能是异步的"></a><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">State 的更新可能是异步的</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Wrong</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  counter: this.state.counter + this.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Correct</span><br><span class="line">this.setState((state, props) =&gt; (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;unreadMessages.length &gt; 0 &amp;&amp;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">      You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符 &amp;&amp;"></a>与运算符 &amp;&amp;</h4><p><code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p>
<p>注意：下面示例中，render 方法的返回值是 <code>&lt;div&gt;0&lt;/div&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; count &amp;&amp; &lt;h1&gt;Messages: &#123;count&#125;&lt;/h1&gt;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The user is &lt;b&gt;&#123;isLoggedIn ? &#x27;currently&#x27; : &#x27;not&#x27;&#125;&lt;/b&gt; logged in.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;isLoggedIn</span><br><span class="line">    ? &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;</span><br><span class="line">    : &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a><a href="https://zh-hans.reactjs.org/docs/conditional-rendering.html">阻止组件渲染</a></h4><p>让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染</p>
<h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><p>表单元素（如<code>&lt;input&gt;</code>、 <code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code>）通常自己维护 state</p>
<h4 id="文件-input-标签"><a href="#文件-input-标签" class="headerlink" title="文件 input 标签"></a>文件 input 标签</h4><p>因为它的 value 只读，所以它是 React 中的一个<strong>非受控</strong>组件</p>
<h4 id="处理多个输入"><a href="#处理多个输入" class="headerlink" title="处理多个输入"></a>处理多个输入</h4><p>当需要处理多个 <code>input</code> 元素时，我们可以给每个元素添加 <code>name</code> 属性，并让处理函数根据 <code>event.target.name</code> 的值选择要执行的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleInputChange(event) &#123;</span><br><span class="line">    const target = event.target;</span><br><span class="line">    const value = target.name === &#x27;isGoing&#x27; ? target.checked : target.value;</span><br><span class="line">    const name = target.name;</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      [name]: value</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同 ES5:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var partialState = &#123;&#125;;</span><br><span class="line">partialState[name] = value;this.setState(partialState);</span><br></pre></td></tr></table></figure>

<h4 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组合-vs-继承-1"><a href="#组合-vs-继承-1" class="headerlink" title="组合 vs 继承"></a>组合 vs 继承</h3><h4 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h4><p>有些组件无法提前知晓它们子组件的具体内容。在 <code>Sidebar</code>（侧边栏）和 <code>Dialog</code>（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。</p>
<p>我们建议这些组件使用一个特殊的 <code>children</code> prop 来将他们的子组件传递到渲染结果中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;props.children&#125;</span><br></pre></td></tr></table></figure>

<p>少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 <code>children</code>，而是自行约定：将所需内容传入 props，并使用相应的 prop</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div className=&quot;SplitPane&quot;&gt;</span><br><span class="line">  &lt;div className=&quot;SplitPane-left&quot;&gt;</span><br><span class="line">    &#123;props.left&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div className=&quot;SplitPane-right&quot;&gt;</span><br><span class="line">    &#123;props.right&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="将设计好的-UI-划分为组件层级"><a href="#将设计好的-UI-划分为组件层级" class="headerlink" title="将设计好的 UI 划分为组件层级"></a><a href="https://zh-hans.reactjs.org/docs/thinking-in-react.html">将设计好的 UI 划分为组件层级</a></h4><h4 id="编写组件步骤"><a href="#编写组件步骤" class="headerlink" title="编写组件步骤"></a>编写组件步骤</h4><ol>
<li>第一步：将设计好的 UI 划分为组件层级</li>
<li>第二步：用 React 创建一个静态版本</li>
<li>第三步：确定 UI state 的最小（且完整）表示</li>
<li>第四步：确定 state 放置的位置</li>
<li>第五步：添加反向数据流</li>
</ol>
<blockquote>
<p>通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：</p>
<ol>
<li>该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。</li>
<li>该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。</li>
<li>你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。</li>
</ol>
<p>包含所有产品的原始列表是经由 props 传入的，所以它不是 state；搜索词和复选框的值应该是 state，因为它们随时间会发生改变且无法由其他数据计算而来；经过搜索筛选的产品列表不是 state，因为它的结果可以由产品的原始列表根据搜索词和复选框的选择计算出来。</p>
<p>综上所述，属于 state 的有：</p>
<ul>
<li>用户输入的搜索词</li>
<li>复选框是否选中的值</li>
</ul>
</blockquote>
<p>哪个组件应该拥有某个 state </p>
<ul>
<li>找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。</li>
</ul>
<p><strong>state 只能由拥有它们的组件进行更改</strong></p>
<p>state在哪个组件，修改state的方法就在哪个组件</p>
<h4 id="生命周期图谱"><a href="#生命周期图谱" class="headerlink" title="生命周期图谱"></a><strong><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a></strong></h4><h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a><a href="https://zh-hans.reactjs.org/docs/react-component.html">组件的生命周期</a></h4><h4 id="React权限菜单设计"><a href="#React权限菜单设计" class="headerlink" title="React权限菜单设计"></a>React权限菜单设计</h4><p><a href="https://blog.csdn.net/oKeYue/article/details/79092903">React项目配置6(前后端分离如何控制用户权限)</a></p>
<p><a href="https://blog.csdn.net/oKeYue/article/details/81130922?spm=1001.2014.3001.5502">(源码开放) React + webpack3 多页面应用 及 常见问题解答</a></p>
<h5 id="10分钟快速搭建React权限菜单设计"><a href="#10分钟快速搭建React权限菜单设计" class="headerlink" title="10分钟快速搭建React权限菜单设计"></a><a href="https://www.csdn.net/tags/NtDaIg3sMDg5MTktYmxvZwO0O0OO0O0O.html">10分钟快速搭建React权限菜单设计</a></h5><h5 id="React-组件权限控制的实现"><a href="#React-组件权限控制的实现" class="headerlink" title="React 组件权限控制的实现"></a><a href="https://www.jb51.net/article/237335.htm">React 组件权限控制的实现</a></h5><p><a href="https://blog.csdn.net/qq_18913129/article/details/105491090">React的React.FC与React.Component的初步认识</a></p>
<p><a href="https://www.jianshu.com/p/94ace269414d">useMemo和useEffect有什么区别？怎么使用useMemo</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/411190859">useMemo 使用指南</a></p>
<p><a href="https://blog.csdn.net/weixin_33782386/article/details/88610257">react-hooks中的一些懵逼点</a></p>
<blockquote>
<p><code>useEffect</code>只能在<code>DOM</code>更新后再触发再去控制</p>
<p><code>memo</code>是在<code>DOM</code>更新前触发的，就像官方所说的，类比生命周期就是<a href="https://links.jianshu.com/go?to=https://zh-hans.reactjs.org/docs/hooks-faq.html%23how-do-lifecycle-methods-correspond-to-hooks">shouldComponentUpdate</a></p>
</blockquote>
<blockquote>
<p>在前端开发的过程中，我们需要缓存一些内容，以避免在需渲染过程中因大量不必要的耗时计算而导致的性能问题。为此 React 提供了一些方法可以帮助我们去实现数据的缓存，useMemo 就是其中之一</p>
</blockquote>
<h4 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h4><p><a href="https://segmentfault.com/a/1190000018928587">React Hooks 解析（上）：基础</a></p>
<p><a href="https://segmentfault.com/a/1190000018950566">React Hooks 解析（下）：进阶</a></p>
<p><a href="https://www.jianshu.com/p/be8fb469d507">useCallback</a></p>
<blockquote>
<p>解释这个 Hook 之前先理解下什么是副作用。网络请求、订阅某个模块或者 DOM 操作都是副作用的例子，Effect Hook 是专门用来处理副作用的。正常情况下，在<code>Function Component</code>的函数体中，是不建议写副作用代码的，否则容易出 bug。</p>
</blockquote>
<blockquote>
<p>在绝大多数情况下，<code>useEffect</code>Hook 是更好的选择。唯一例外的就是需要根据新的 UI 来进行 DOM 操作的场景。<code>useLayoutEffect</code>会保证在页面渲染前执行，也就是说页面渲染出来的是最终的效果。如果使用<code>useEffect</code>，页面很可能因为渲染了 2 次而出现抖动。</p>
</blockquote>
<p><a href="https://react.docschina.org/docs/context.html">context</a></p>
<blockquote>
<p>Context 主要应用场景在于<em>很多</em>不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</p>
</blockquote>
<blockquote>
<p><strong>如果你只是想避免层层传递一些属性，<a href="https://react.docschina.org/docs/composition-vs-inheritance.html">组件组合（component composition）</a>有时候是一个比 context 更好的解决方案。</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ThemeContext = React.createContext(&#x27;light&#x27;);</span><br><span class="line"></span><br><span class="line">&lt;ThemeContext.Provider value=&quot;dark&quot;&gt;</span><br><span class="line">    &lt;Toolbar /&gt;</span><br><span class="line">&lt;/ThemeContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">// 中间的组件再也不必指明往下传递 theme 了。</span><br><span class="line">function Toolbar() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ThemedButton /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ThemedButton extends React.Component &#123;</span><br><span class="line">  // 指定 contextType 读取当前的 theme context。</span><br><span class="line">  // React 会往上找到最近的 theme Provider，然后使用它的值。</span><br><span class="line">  // 在这个例子中，当前的 theme 值为 “dark”。</span><br><span class="line">  static contextType = ThemeContext;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Button theme=&#123;this.context&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 Provider 的 <code>value</code> 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 <code>shouldComponentUpdate</code> 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</p>
</blockquote>
<p><a href="https://react.docschina.org/docs/context.html#contextconsumer">Context.Consumer</a></p>
<p><a href="https://react.docschina.org/docs/context.html#consuming-multiple-contexts">消费多个 Context</a></p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><a href="https://react.docschina.org/docs/context.html#caveats">注意事项</a></h5><blockquote>
<p>因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染</p>
</blockquote>
<p>为了防止这种情况，将 value 状态提升到父节点的 state 里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      value: &#123;something: &#x27;something&#x27;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;Provider value=&#123;this.state.value&#125;&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function HeaderBar() &#123;</span><br><span class="line">  const user = useContext(CurrentUser);</span><br><span class="line">  const notifications = useContext(Notifications);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Welcome back, &#123;user.name&#125;!</span><br><span class="line">      You have &#123;notifications.length&#125; notifications.</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h5><p><code>useReducer</code>的用法跟 Redux 非常相似，当 state 的计算逻辑比较复杂又或者需要根据以前的值来计算时，使用这个 Hook 比<code>useState</code>会更好。</p>
<h5 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Click happened with dependency: <span class="subst">$&#123;count&#125;</span>`</span>), [count],</span><br><span class="line">  ); </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;memoizedHandleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>useCallback</code>缓存的是方法的引用，而<code>useMemo</code>缓存的则是方法的返回值。使用场景是减少不必要的子组件渲染：</p>
</blockquote>
<h5 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function() &#123;</span><br><span class="line">  const myRef = useRef(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    myRef.current.focus();</span><br><span class="line">  &#125;, [])</span><br><span class="line">  </span><br><span class="line">  return &lt;input ref=&#123;myRef&#125; type=&quot;text&quot; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>useRef</code>返回一个普通 JS 对象，可以将任意数据存到<code>current</code>属性里面，就像使用实例化对象的<code>this</code>一样。另外一个使用场景是获取 previous props 或 previous state</p>
</blockquote>
<h5 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h5><blockquote>
<p>自定义 Hook 的命名有讲究，必须以<code>use</code>开头，在里面可以调用其它的 Hook。入参和返回值都可以根据需要自定义，没有特殊的约定。使用也像普通的函数调用一样，Hook 里面其它的 Hook（如<code>useEffect</code>）会自动在合适的时候调用</p>
</blockquote>
<h4 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html#effect-hook">Effect Hook</a></h4><blockquote>
<p>在 React 组件中执行过<strong>数据获取、订阅或者手动修改过 DOM</strong>。我们统一把这些操作称为“<strong>副作用</strong>”，或者简称为“作用”。</p>
<p><code>useEffect</code> 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API。（我们会在<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html">使用 Effect Hook</a> 里展示对比 <code>useEffect</code> 和这些方法的例子。）</p>
</blockquote>
<h4 id="Hook概览"><a href="#Hook概览" class="headerlink" title="Hook概览"></a><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html#effect-hook">Hook概览</a></h4><p><a href="https://react.docschina.org/docs/code-splitting.html#reactlazy">懒加载-React.lazy</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Suspense &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const OtherComponent = React.lazy(() =&gt; import(&#x27;./OtherComponent&#x27;));</span><br><span class="line"></span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">        &lt;OtherComponent /&gt;</span><br><span class="line">      &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/code-splitting.html#error-boundaries">异常捕获边界</a></p>
<p><a href="https://react.docschina.org/docs/code-splitting.html#route-based-code-splitting">基于路由的代码分割</a></p>
<p><a href="https://react.docschina.org/docs/error-boundaries.html#introducing-error-boundaries">错误边界（Error Boundaries）</a></p>
<h4 id="Refs-转发"><a href="#Refs-转发" class="headerlink" title="Refs 转发"></a><a href="https://react.docschina.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components">Refs 转发</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const FancyButton = React.forwardRef((props, ref) =&gt; (</span><br><span class="line">  &lt;button ref=&#123;ref&#125; className=&quot;FancyButton&quot;&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">// 你可以直接获取 DOM button 的 ref：</span><br><span class="line">const ref = React.createRef();</span><br><span class="line">&lt;FancyButton ref=&#123;ref&#125;&gt;Click me!&lt;/FancyButton&gt;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>出于同样的原因，当 <code>React.forwardRef</code> 存在时有条件地使用它也是不推荐的：它改变了你的库的行为，并在升级 React 自身时破坏用户的应用。</p>
</blockquote>
<h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a><a href="https://react.docschina.org/docs/higher-order-components.html">高阶组件</a></h4><p>高阶组件是参数为组件，返回值为新组件的函数。</p>
<p>组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。</p>
<h4 id="深入-JSX"><a href="#深入-JSX" class="headerlink" title="深入 JSX"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html">深入 JSX</a></h4><blockquote>
<p><code>if</code> 语句以及 <code>for</code> 循环不是 JavaScript 表达式，所以不能在 JSX 中直接使用。但是，你可以用在 JSX 以外的代码中</p>
</blockquote>
<h5 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#string-literals">字符串字面量</a></h5><p>如下两个 JSX 表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent message=&quot;hello world&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;&#x27;hello world&#x27;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>当你将字符串字面量赋值给 prop 时，它的值是未转义的。所以，以下两个 JSX 表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent message=&quot;&amp;lt;3&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent message=&#123;&#x27;&lt;3&#x27;&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="Props-默认值为-“True”"><a href="#Props-默认值为-“True”" class="headerlink" title="Props 默认值为 “True”"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#props-default-to-true">Props 默认值为 “True”</a></h5><p>以下两个 JSX 表达式是等价的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyTextBox autocomplete /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyTextBox autocomplete=&#123;true&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="属性展开"><a href="#属性展开" class="headerlink" title="属性展开"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#spread-attributes">属性展开</a></h5><p>以下两个组件是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function App1() &#123;</span><br><span class="line">  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: &#x27;Ben&#x27;, lastName: &#x27;Hector&#x27;&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你还可以选择只保留当前组件需要接收的 props，并使用展开运算符将其他 props 传递下去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Button = props =&gt; &#123;</span><br><span class="line">  const &#123; kind, ...other &#125; = props;</span><br><span class="line">  const className = kind === &quot;primary&quot; ? &quot;PrimaryButton&quot; : &quot;SecondaryButton&quot;;</span><br><span class="line">  return &lt;button className=&#123;className&#125; &#123;...other&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button kind=&quot;primary&quot; onClick=&#123;() =&gt; console.log(&quot;clicked!&quot;)&#125;&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="字符串字面量-1"><a href="#字符串字面量-1" class="headerlink" title="字符串字面量"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#string-literals-1">字符串字面量</a></h5><p>你可以将字符串放在开始和结束标签之间，此时 <code>props.children</code> 就只是该字符串。这对于很多内置的 HTML 元素很有用。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure>

<p>React 组件也能够返回存储在数组中的一组元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  // 不需要用额外的元素包裹列表元素！</span><br><span class="line">  return [</span><br><span class="line">    // 不要忘记设置 key :)</span><br><span class="line">    &lt;li key=&quot;A&quot;&gt;First item&lt;/li&gt;,</span><br><span class="line">    &lt;li key=&quot;B&quot;&gt;Second item&lt;/li&gt;,</span><br><span class="line">    &lt;li key=&quot;C&quot;&gt;Third item&lt;/li&gt;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript 表达式可以被包裹在 <code>&#123;&#125;</code> 中作为子元素。例如，以下表达式是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyComponent&gt;foo&lt;/MyComponent&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent&gt;&#123;&#x27;foo&#x27;&#125;&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure>

<h5 id="布尔类型、Null-以及-Undefined-将会忽略"><a href="#布尔类型、Null-以及-Undefined-将会忽略" class="headerlink" title="布尔类型、Null 以及 Undefined 将会忽略"></a><a href="https://react.docschina.org/docs/jsx-in-depth.html#booleans-null-and-undefined-are-ignored">布尔类型、Null 以及 Undefined 将会忽略</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;props.messages.length &gt; 0 &amp;&amp;</span><br><span class="line">    &lt;MessageList messages=&#123;props.messages&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如果你想渲染 <code>false</code>、<code>true</code>、<code>null</code>、<code>undefined</code> 等值，你需要先将它们<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion">转换为字符串</a>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  My JavaScript variable is &#123;String(myVariable)&#125;.</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化</a></h4><h5 id="Brunch"><a href="#Brunch" class="headerlink" title="Brunch"></a><a href="https://react.docschina.org/docs/optimizing-performance.html#brunch">Brunch</a></h5><p>通过安装 <a href="https://github.com/brunch/terser-brunch"><code>terser-brunch</code></a> 插件，来获得最高效的 Brunch 生产构建：</p>
<h5 id="避免调停"><a href="#避免调停" class="headerlink" title="避免调停"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">避免调停</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你知道在什么情况下你的组件不需要更新，你可以在 <code>shouldComponentUpdate</code> 中返回 <code>false</code> 来跳过整个渲染过程。其包括该组件的 <code>render</code> 调用以及之后的操作。</p>
<p>如果你的组件只有当 <code>props.color</code> 或者 <code>state.count</code> 的值改变才需要更新时，你可以使用 <code>shouldComponentUpdate</code> 来进行检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    if (this.props.color !== nextProps.color) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.state.count !== nextState.count) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大部分情况下，你可以使用 <code>React.PureComponent</code> 来代替手写 <code>shouldComponentUpdate</code></p>
<h4 id="不可变数据的力量"><a href="#不可变数据的力量" class="headerlink" title="不可变数据的力量"></a><a href="https://react.docschina.org/docs/optimizing-performance.html">不可变数据的力量</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">  this.setState(state =&gt; (&#123;</span><br><span class="line">    words: state.words.concat([&#x27;marklar&#x27;])</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">  this.setState(state =&gt; (&#123;</span><br><span class="line">    words: [...state.words, &#x27;marklar&#x27;],</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>为了不改变原本的对象，我们可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a> 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateColorMap(colormap) &#123;</span><br><span class="line">  return Object.assign(&#123;&#125;, colormap, &#123;right: &#x27;blue&#x27;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加<a href="https://github.com/sebmarkbage/ecmascript-rest-spread">对象扩展属性</a>以使得更新不可变对象变得更方便：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateColorMap(colormap) &#123;</span><br><span class="line">  return &#123;...colormap, right: &#x27;blue&#x27;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/polyfill">Polyfill</a></p>
<p><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills">HTML5 Cross Browser Polyfills</a></p>
<h4 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a><a href="https://react.docschina.org/docs/portals.html">Portals</a></h4><p>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReactDOM.createPortal(child, container)</span><br></pre></td></tr></table></figure>

<p>第一个参数（<code>child</code>）是任何<a href="https://react.docschina.org/docs/react-component.html#render">可渲染的 React 子元素</a>，例如一个元素，字符串或 fragment。第二个参数（<code>container</code>）是一个 DOM 元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  // React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。</span><br><span class="line">  // `domNode` 是一个可以在任何位置的有效 DOM 节点。</span><br><span class="line">  return ReactDOM.createPortal(</span><br><span class="line">    this.props.children,</span><br><span class="line">    domNode  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个 portal 的典型用例是当父组件有 <code>overflow: hidden</code> 或 <code>z-index</code> 样式时，但你需要子组件能够在视觉上“跳出”其容器。例如，对话框、悬浮卡以及提示框：</p>
<h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a><a href="https://react.docschina.org/docs/profiler.html">Profiler</a></h4><p><code>Profiler</code> 测量渲染一个 React 应用多久渲染一次以及渲染一次的“代价”。 它的目的是识别出应用中渲染较慢的部分，或是可以使用<a href="https://react.docschina.org/docs/hooks-faq.html#how-to-memoize-calculations">类似 memoization 优化</a>的部分，并从相关优化中获益。</p>
<h4 id="不使用-ES6的使用方法"><a href="#不使用-ES6的使用方法" class="headerlink" title="不使用 ES6的使用方法"></a><a href="https://react.docschina.org/docs/react-without-es6.html">不使用 ES6</a>的使用方法</h4><p>无论是函数组件还是 class 组件，都拥有 <code>defaultProps</code> 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: &#x27;Mary&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果使用 <code>createReactClass()</code> 方法创建组件，那就需要在组件中定义 <code>getDefaultProps()</code> 函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getDefaultProps: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;Mary&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/react-without-es6.html#setting-the-initial-state">初始化 State</a></p>
<p><a href="https://react.docschina.org/docs/react-without-es6.html#autobinding">自动绑定</a></p>
<p>为了保险起见，以下三种做法都是可以的：</p>
<ul>
<li>在 constructor 中绑定方法。</li>
<li>使用箭头函数，比如：<code>onClick=&#123;(e) =&gt; this.handleClick(e)&#125;</code>。</li>
<li>继续使用 <code>createReactClass</code>。</li>
</ul>
<h4 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a><a href="https://react.docschina.org/docs/render-props.html">Render Props</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const mouse = this.props.mouse;</span><br><span class="line">    return (</span><br><span class="line">      &lt;img src=&quot;/cat.jpg&quot; style=&#123;&#123; position: &#x27;absolute&#x27;, left: mouse.x, top: mouse.y &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mouse extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleMouseMove = this.handleMouseMove.bind(this);</span><br><span class="line">    this.state = &#123; x: 0, y: 0 &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div style=&#123;&#123; height: &#x27;100vh&#x27; &#125;&#125; onMouseMove=&#123;this.handleMouseMove&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/*</span><br><span class="line">          Instead of providing a static representation of what &lt;Mouse&gt; renders,</span><br><span class="line">          use the `render` prop to dynamically determine what to render.</span><br><span class="line">        */&#125;</span><br><span class="line">        &#123;this.props.render(this.state)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MouseTracker extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;移动鼠标!&lt;/h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果你出于某种原因真的想要 HOC，那么你可以轻松实现</span><br><span class="line">// 使用具有 render prop 的普通组件创建一个！</span><br><span class="line">function withMouse(Component) &#123;</span><br><span class="line">  return class extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Component &#123;...this.props&#125; mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>render prop 是一个用于告知组件需要渲染什么内容的函数 prop。</strong></p>
<p>移动端事件使用onTouchMove</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onTouchMove=&#123;handleMouseMove&#125;</span><br><span class="line"></span><br><span class="line">// 使用event.touches[0].clientX</span><br><span class="line">// this.setState(&#123;</span><br><span class="line">//   x: event.touches[0].clientX - 30,</span><br><span class="line">//   y: event.touches[0].clientY - 30</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure>





<h4 id="静态类型检查"><a href="#静态类型检查" class="headerlink" title="静态类型检查"></a><a href="https://react.docschina.org/docs/static-type-checking.html">静态类型检查</a></h4><p>建议在大型代码库中使用 Flow 或 TypeScript 来代替 <code>PropTypes</code>。</p>
<h5 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h5><ul>
<li><a href="https://flow.org/en/docs/types/">Flow 文档：类型注解</a></li>
<li><a href="https://flow.org/en/docs/editors/">Flow 文档：编辑器</a></li>
<li><a href="https://flow.org/en/docs/react/">Flow 文档：React</a></li>
<li><a href="https://medium.com/flow-type/linting-in-flow-7709d7a7e969">在 Flow 中进行 lint</a></li>
</ul>
<h5 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h5><ul>
<li><p><a href="https://www.typescriptlang.org/">TypeScript</a></p>
</li>
<li><p><a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">在 React 中使用 TypeScript</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">TypeScript 文档：基本类型</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">TypeScript 文档：JavaScript 迁移</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/react-&-webpack.html">TypeScript 文档：React 与 Webpack</a></p>
</li>
<li><p><a href="https://react.docschina.org/docs/static-type-checking.html#using-typescript-with-create-react-app">在 Create React App 中使用 TypeScript</a></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br></pre></td></tr></table></figure>

<p>将 TypeScript 添加到<strong>现有的 Create React App 项目</strong>中，<a href="https://facebook.github.io/create-react-app/docs/adding-typescript">请参考此文档</a>.</p>
<p><a href="https://react.docschina.org/docs/static-type-checking.html#configuring-the-typescript-compiler">配置 TypeScript 编译器</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn run tsc --init</span><br></pre></td></tr></table></figure>

<p>如果你使用 <a href="https://www.npmjs.com/">npm</a>，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure>

<p><code>tsconfig.json</code> 文件中，有许多配置项用于配置编译器。查看所有配置项的的详细说明，<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">请参考此文档</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    &quot;rootDir&quot;: &quot;src&quot;,</span><br><span class="line">    &quot;outDir&quot;: &quot;build&quot;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json">TypeScript React Starter</a> 提供了一套默认的 <code>tsconfig.json</code> 帮助你快速上手。</p>
<p>在 React 中，你的组件文件大多数使用 <code>.js</code> 作为扩展名。在 TypeScript 中，提供两种文件扩展名：<code>.ts</code> 是默认的文件扩展名，而 <code>.tsx</code> 是一个用于包含 <code>JSX</code> 代码的特殊扩展名。</p>
<h5 id="运行-TypeScript"><a href="#运行-TypeScript" class="headerlink" title="运行 TypeScript"></a><a href="https://react.docschina.org/docs/static-type-checking.html#running-typescript">运行 TypeScript</a></h5><p>如果你按照上面的说明操作，现在应该能运行 TypeScript 了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<p>如果你使用 npm，执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>如果你没有看到输出信息，这意味着它编译成功了</p>
<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a><a href="https://react.docschina.org/docs/strict-mode.html">严格模式</a></h4><p>你可以为应用程序的任何部分启用严格模式。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function ExampleApplication() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;React.StrictMode&gt;        </span><br><span class="line">      	&lt;div&gt;</span><br><span class="line">          &lt;ComponentOne /&gt;</span><br><span class="line">          &lt;ComponentTwo /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/React.StrictMode&gt;      </span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>StrictMode</code> 目前有助于：</p>
<ul>
<li><a href="https://react.docschina.org/docs/strict-mode.html#identifying-unsafe-lifecycles">识别不安全的生命周期</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#warning-about-legacy-string-ref-api-usage">关于使用过时字符串 ref API 的警告</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage">关于使用废弃的 findDOMNode 方法的警告</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#detecting-unexpected-side-effects">检测意外的副作用</a></li>
<li><a href="https://react.docschina.org/docs/strict-mode.html#detecting-legacy-context-api">检测过时的 context API</a></li>
</ul>
<p>渲染阶段的生命周期包括以下 class 组件方法：</p>
<ul>
<li><code>constructor</code></li>
<li><code>componentWillMount</code> (or <code>UNSAFE_componentWillMount</code>)</li>
<li><code>componentWillReceiveProps</code> (or <code>UNSAFE_componentWillReceiveProps</code>)</li>
<li><code>componentWillUpdate</code> (or <code>UNSAFE_componentWillUpdate</code>)</li>
<li><code>getDerivedStateFromProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>render</code></li>
<li><code>setState</code> 更新函数（第一个参数）</li>
</ul>
<h4 id="使用-PropTypes-进行类型检查"><a href="#使用-PropTypes-进行类型检查" class="headerlink" title="使用 PropTypes 进行类型检查"></a><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html">使用 PropTypes 进行类型检查</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PropTypes from &#x27;prop-types&#x27;;</span><br><span class="line"></span><br><span class="line">class Greeting extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Greeting.propTypes = &#123;</span><br><span class="line">  name: PropTypes.string</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>出于性能方面的考虑，<code>propTypes</code> 仅在开发模式下进行检查。</p>
<h4 id="默认-Prop-值"><a href="#默认-Prop-值" class="headerlink" title="默认 Prop 值"></a><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html">默认 Prop 值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Greeting extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指定 props 的默认值：</span><br><span class="line">Greeting.defaultProps = &#123;</span><br><span class="line">  name: &#x27;Stranger&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 渲染出 &quot;Hello, Stranger&quot;：</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Greeting /&gt;,</span><br><span class="line">  document.getElementById(&#x27;example&#x27;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>defaultProps</code> 用于确保 <code>this.props.name</code> 在父组件没有指定其值时，有一个默认值。</p>
<h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html">非受控组件</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class NameForm extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">    this.input = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(&#x27;A name was submitted: &#x27; + this.input.current.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Name:</span><br><span class="line">          &lt;input type=&quot;text&quot; ref=&#123;this.input&#125; /&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你还是不清楚在某个特殊场景中应该使用哪种组件，那么 <a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">这篇关于受控和非受控输入组件的文章</a> 会很有帮助。</p>
<h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html#default-values">默认值</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">defaultValue=&quot;Bob&quot;</span><br><span class="line">type=&quot;text&quot;</span><br><span class="line">ref=&#123;this.input&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>希望 React 能赋予组件一个初始值，但是不去控制后续的更新。 在这种情况下, 你可以指定一个 <code>defaultValue</code> 属性，而不是 <code>value</code>。</p>
<p>同样，<code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 支持 <code>defaultChecked</code>，<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code> 支持 <code>defaultValue</code>。</p>
<h5 id="文件输入"><a href="#文件输入" class="headerlink" title="文件输入"></a><a href="https://react.docschina.org/docs/uncontrolled-components.html#the-file-input-tag">文件输入</a></h5><p>在 HTML 中，<code>&lt;input type=&quot;file&quot;&gt;</code> 可以让用户选择一个或多个文件上传到服务器，或者通过使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications">File API</a> 进行操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>在 React 中，<code>&lt;input type=&quot;file&quot; /&gt;</code> 始终是一个非受控组件，因为它的值只能由用户设置，而不能通过代码控制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class FileInput extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">    this.fileInput = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(</span><br><span class="line">      `Selected file - $&#123;this.fileInput.current.files[0].name&#125;`</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Upload file:</span><br><span class="line">          &lt;input type=&quot;file&quot; ref=&#123;this.fileInput&#125; /&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a><a href="https://react.docschina.org/docs/web-components.html">Web Components</a></h4><h4 id="React-顶层-API"><a href="#React-顶层-API" class="headerlink" title="React 顶层 API"></a><a href="https://react.docschina.org/docs/react-api.html#cloneelement">React 顶层 API</a></h4><h5 id="转换元素"><a href="#转换元素" class="headerlink" title="转换元素"></a>转换元素</h5><p><code>React</code> 提供了几个用于操作元素的 API：</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#cloneelement"><code>cloneElement()</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#isvalidelement"><code>isValidElement()</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactchildren"><code>React.Children</code></a></li>
</ul>
<h5 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h5><p><code>React</code> 还提供了用于减少不必要嵌套的组件。</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactfragment"><code>React.Fragment</code></a></li>
</ul>
<h5 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h5><ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactcreateref"><code>React.createRef</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactforwardref"><code>React.forwardRef</code></a></li>
</ul>
<h5 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h5><p>Suspense 使得组件可以“等待”某些操作结束后，再进行渲染。目前，Suspense 仅支持的使用场景是：<a href="https://react.docschina.org/docs/code-splitting.html#reactlazy">通过 <code>React.lazy</code> 动态加载组件</a>。它将在未来支持其它使用场景，如数据获取等。</p>
<ul>
<li><a href="https://react.docschina.org/docs/react-api.html#reactlazy"><code>React.lazy</code></a></li>
<li><a href="https://react.docschina.org/docs/react-api.html#reactsuspense"><code>React.Suspense</code></a></li>
</ul>
<h5 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a><a href="https://react.docschina.org/docs/react-api.html#hooks">Hook</a></h5><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。Hook 拥有<a href="https://react.docschina.org/docs/hooks-intro.html">专属文档章节</a>和单独的 API 参考文档：</p>
<ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#basic-hooks">基础 Hook</a><ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usestate"><code>useState</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useeffect"><code>useEffect</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a></li>
</ul>
</li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#additional-hooks">额外的 Hook</a><ul>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback"><code>useCallback</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usememo"><code>useMemo</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useref"><code>useRef</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#useimperativehandle"><code>useImperativeHandle</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect"><code>useLayoutEffect</code></a></li>
<li><a href="https://react.docschina.org/docs/hooks-reference.html#usedebugvalue"><code>useDebugValue</code></a></li>
</ul>
</li>
</ul>
<h5 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a><a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent">React.PureComponent</a></h5><p><code>React.PureComponent</code> 与 <a href="https://react.docschina.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 很相似。两者的区别在于 <a href="https://react.docschina.org/docs/react-api.html#reactcomponent"><code>React.Component</code></a> 并未实现 <a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a>，而 <code>React.PureComponent</code> 中以浅层对比 prop 和 state 的方式来实现了该函数。</p>
<p>如果赋予 React 组件相同的 props 和 state，<code>render()</code> 函数会渲染相同的内容，那么在某些情况下使用 <code>React.PureComponent</code> 可提高性能。</p>
<p><a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent">注意</a></p>
<blockquote>
<p><code>React.PureComponent</code> 中的 <code>shouldComponentUpdate()</code> 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。仅在你的 props 和 state 较为简单时，才使用 <code>React.PureComponent</code>，或者在深层数据结构发生变化时调用 <a href="https://react.docschina.org/docs/react-component.html#forceupdate"><code>forceUpdate()</code></a> 来确保组件被正确地更新。你也可以考虑使用 <a href="https://facebook.github.io/immutable-js/">immutable 对象</a>加速嵌套数据的比较。</p>
</blockquote>
<h5 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a><a href="https://react.docschina.org/docs/react-api.html#reactmemo">React.memo</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const MyComponent = React.memo(function MyComponent(props) &#123;</span><br><span class="line">  /* 使用 props 渲染 */</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>React.memo</code> 为<a href="https://react.docschina.org/docs/higher-order-components.html">高阶组件</a>。它与 <a href="https://react.docschina.org/docs/react-api.html#reactpurecomponent"><code>React.PureComponent</code></a> 非常相似，但只适用于函数组件，而不适用 class 组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function MyComponent(props) &#123;</span><br><span class="line">  /* 使用 props 渲染 */</span><br><span class="line">&#125;</span><br><span class="line">function areEqual(prevProps, nextProps) &#123;</span><br><span class="line">  /*</span><br><span class="line">  如果把 nextProps 传入 render 方法的返回结果与</span><br><span class="line">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span><br><span class="line">  否则返回 false</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br><span class="line">export default React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure>

<p>此方法仅作为**<a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化</a>**的方式而存在。但请不要依赖它来“阻止”渲染，因为这会产生 bug。</p>
<h5 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a><a href="https://react.docschina.org/docs/react-api.html#createelement">createElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  type,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="cloneElement"><a href="#cloneElement" class="headerlink" title="cloneElement()"></a><a href="https://react.docschina.org/docs/react-api.html#cloneelement">cloneElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.cloneElement(</span><br><span class="line">  element,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="isValidElement"><a href="#isValidElement" class="headerlink" title="isValidElement()"></a><a href="https://react.docschina.org/docs/react-api.html#isvalidelement">isValidElement()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.isValidElement(object)</span><br></pre></td></tr></table></figure>

<p>验证对象是否为 React 元素，返回值为 <code>true</code> 或 <code>false</code>。</p>
<h5 id="React-Children"><a href="#React-Children" class="headerlink" title="React.Children"></a><a href="https://react.docschina.org/docs/react-api.html#reactchildren">React.Children</a></h5><p><code>React.Children</code> 提供了用于处理 <code>this.props.children</code> 不透明数据结构的实用方法。</p>
<h5 id="React-createRef"><a href="#React-createRef" class="headerlink" title="React.createRef"></a><a href="https://react.docschina.org/docs/react-api.html#reactcreateref">React.createRef</a></h5><h5 id="React-forwardRef"><a href="#React-forwardRef" class="headerlink" title="React.forwardRef"></a><a href="https://react.docschina.org/docs/react-api.html#reactforwardref">React.forwardRef</a></h5><h5 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy"></a><a href="https://react.docschina.org/docs/react-api.html#reactlazy">React.lazy</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这个组件是动态加载的</span><br><span class="line">const SomeComponent = React.lazy(() =&gt; import(&#x27;./SomeComponent&#x27;));</span><br></pre></td></tr></table></figure>

<h5 id="React-Suspense"><a href="#React-Suspense" class="headerlink" title="React.Suspense"></a><a href="https://react.docschina.org/docs/react-api.html#reactsuspense">React.Suspense</a></h5><p><code>React.Suspense</code> 可以指定加载指示器（loading indicator），以防其组件树中的某些子组件尚未具备渲染条件。目前，懒加载组件是 <code>&lt;React.Suspense&gt;</code> 支持的<strong>唯一</strong>用例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 该组件是动态加载的</span><br><span class="line">const OtherComponent = React.lazy(() =&gt; import(&#x27;./OtherComponent&#x27;));</span><br><span class="line"></span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  return (</span><br><span class="line">    // 显示 &lt;Spinner&gt; 组件直至 OtherComponent 加载完成</span><br><span class="line">    &lt;React.Suspense fallback=&#123;&lt;Spinner /&gt;&#125;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;OtherComponent /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/React.Suspense&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="React-Component"><a href="#React-Component" class="headerlink" title="React.Component"></a><a href="https://react.docschina.org/docs/react-component.html#the-component-lifecycle">React.Component</a></h4><h5 id="组件的生命周期-1"><a href="#组件的生命周期-1" class="headerlink" title="组件的生命周期"></a><a href="https://react.docschina.org/docs/react-component.html#the-component-lifecycle">组件的生命周期</a></h5><p><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a></p>
<p><a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate">shouldComponentUpdate()</a></p>
<p>此方法仅作为**<a href="https://react.docschina.org/docs/optimizing-performance.html">性能优化的方式</a>**而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。</p>
<h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a><a href="https://react.docschina.org/docs/react-component.html#constructor">constructor()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props)</span><br></pre></td></tr></table></figure>

<p><strong>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。</strong></p>
<h5 id="setState"><a href="#setState" class="headerlink" title="setState()"></a><a href="https://react.docschina.org/docs/react-component.html#setstate">setState()</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.setState((state, props) =&gt; &#123;</span><br><span class="line">  return &#123;counter: state.counter + props.step&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a><a href="https://react.docschina.org/docs/react-component.html#forceupdate">forceUpdate()</a></h5><h5 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a><a href="https://react.docschina.org/docs/react-component.html#defaultprops">defaultProps</a></h5><h5 id="state-1"><a href="#state-1" class="headerlink" title="state"></a><a href="https://react.docschina.org/docs/react-component.html#state">state</a></h5><p> <a href="https://react.docschina.org/docs/state-and-lifecycle.html">State &amp; 生命周期</a></p>
<h4 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a><a href="https://react.docschina.org/docs/dom-elements.html">DOM 元素</a></h4><h4 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a><a href="https://react.docschina.org/docs/events.html">合成事件</a></h4><h4 id="React-术语词汇表"><a href="#React-术语词汇表" class="headerlink" title="React 术语词汇表"></a><a href="https://react.docschina.org/docs/glossary.html">React 术语词汇表</a></h4><h4 id="Hook-简介"><a href="#Hook-简介" class="headerlink" title="Hook 简介"></a><a href="https://react.docschina.org/docs/hooks-intro.html">Hook 简介</a></h4><h5 id="自定义-Hook-1"><a href="#自定义-Hook-1" class="headerlink" title="自定义 Hook"></a><a href="https://react.docschina.org/docs/hooks-overview.html#building-your-own-hooks">自定义 Hook</a></h5><p><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a></p>
<p> <a href="https://react.docschina.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a></p>
<h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a><a href="https://react.docschina.org/docs/hooks-state.html">useState</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [count, setCount] = useState(initialCount);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 class 组件中的 <code>setState</code> 方法不同，<code>useState</code> 不会自动合并更新对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setState(prevState =&gt; &#123;</span><br><span class="line">  // 也可以使用 Object.assign</span><br><span class="line">  return &#123;...prevState, ...updatedValues&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><a href="https://react.docschina.org/docs/hooks-effect.html">useEffect</a></h4><p><a href="https://react.docschina.org/docs/hooks-effect.html#%E9%9C%80%E8%A6%81%E6%B8%85%E9%99%A4%E7%9A%84-effect">需要清除的 effect</a></p>
<h5 id="清除-effect"><a href="#清除-effect" class="headerlink" title="清除 effect"></a><a href="https://react.docschina.org/docs/hooks-reference.html#cleaning-up-an-effect">清除 effect</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  const subscription = props.source.subscribe();</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    // 清除订阅</span><br><span class="line">    subscription.unsubscribe();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://react.docschina.org/docs/hooks-reference.html#timing-of-effects">effect 的执行时机</a></p>
<p><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect"><code>useLayoutEffect</code></a> Hook 来处理这类 effect。它和 <code>useEffect</code> 的结构相同，区别只是调用时机不同。</p>
<h4 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a><a href="https://react.docschina.org/docs/hooks-rules.html">Hook 规则</a></h4><p>只在最顶层使用 Hook</p>
<p>不要在循环，条件或嵌套函数中调用 Hook</p>
<h4 id="自定义-Hook-2"><a href="#自定义-Hook-2" class="headerlink" title="自定义 Hook"></a><a href="https://react.docschina.org/docs/hooks-custom.html">自定义 Hook</a></h4><h4 id="Hook-API-索引"><a href="#Hook-API-索引" class="headerlink" title="Hook API 索引"></a><a href="https://react.docschina.org/docs/hooks-reference.html">Hook API 索引</a></h4><h5 id="useContext-1"><a href="#useContext-1" class="headerlink" title="useContext"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext">useContext</a></h5><p>即使祖先使用 <a href="https://react.docschina.org/docs/react-api.html#reactmemo"><code>React.memo</code></a> 或 <a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate</code></a>，也会在组件本身使用 <code>useContext</code> 时重新渲染。</p>
<p><a href="https://react.docschina.org/docs/hooks-reference.html#usecontext">把如下代码与 Context.Provider 放在一起</a></p>
<h5 id="useReducer-1"><a href="#useReducer-1" class="headerlink" title="useReducer"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usereducer">useReducer</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用 reducer 重写 useState 一节的计数器示例：</span><br><span class="line"></span><br><span class="line">const initialState = &#123;count: 0&#125;;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123;count: state.count + 1&#125;;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123;count: state.count - 1&#125;;</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Counter() &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a><a href="https://react.docschina.org/docs/hooks-reference.html#lazy-initialization">惰性初始化</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function init(initialCount) &#123;</span><br><span class="line">  return &#123;count: initialCount&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;increment&#x27;:</span><br><span class="line">      return &#123;count: state.count + 1&#125;;</span><br><span class="line">    case &#x27;decrement&#x27;:</span><br><span class="line">      return &#123;count: state.count - 1&#125;;</span><br><span class="line">    case &#x27;reset&#x27;:</span><br><span class="line">      return init(action.payload);</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Counter(&#123;initialCount&#125;) &#123;</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, initialCount, init);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;reset&#x27;, payload: initialCount&#125;)&#125;&gt;</span><br><span class="line">        Reset</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="useCallback-1"><a href="#useCallback-1" class="headerlink" title="useCallback"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback">useCallback</a></h5><p>每次渲染，函数会生成一个新的引用地址（引用类型，跟对象/数组一样）</p>
<ul>
<li>保持一个函数的不变性</li>
<li>可以说是<code>useMemo</code>的一个语法糖，专门处理函数</li>
</ul>
<p><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/#the-usecallback-hook">The useCallback hook</a></p>
<p>下面两个代码是等价的：</p>
<p><code>useMemo</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleMegaBoost = React.useMemo(() =&gt; &#123;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    setCount((currentValue) =&gt; currentValue + 1234);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p><code>useCallback</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleMegaBoost = React.useCallback(() =&gt; &#123;</span><br><span class="line">  setCount((currentValue) =&gt; currentValue + 1234);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usecallback">useMemo</a></h5><p><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/">Understanding useMemo and useCallback</a></p>
<p><a href="https://www.bilibili.com/video/BV1uG411V7m3/?spm_id_from=333.337.search-card.all.click&vd_source=40931b9b7a6dfae9780e1c6f05637a83">课程</a></p>
<ul>
<li>做快照，减少大量运算</li>
<li>保持一个值的不变性</li>
</ul>
<p>为了减少一些大量计算（需要计算的数据没有改变，但是其他数据改变，重新渲染，会引起大量计算）</p>
<p><code>useMemo</code> takes two arguments:（两个参数）</p>
<ol>
<li>A chunk of work to be performed, wrapped up in a function（大量计算的函数）</li>
<li>A list of dependencies（依赖）</li>
</ol>
<p>**<code>useMemo</code> is essentially like a lil’ cache, and the dependencies are the cache invalidation strategy.**（像缓存）</p>
<p>This is commonly known as <em>memoization</em>, and it’s why this hook is called “useMemo”.（记忆化，备忘）</p>
<h6 id="消耗性能的案例（每秒time变化，都会进行一次大量计算）"><a href="#消耗性能的案例（每秒time变化，都会进行一次大量计算）" class="headerlink" title="消耗性能的案例（每秒time变化，都会进行一次大量计算）"></a>消耗性能的案例（每秒time变化，都会进行一次大量计算）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;heavyComputations()&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="使用usememo之后，只有num变化时，才进行大量的计算"><a href="#使用usememo之后，只有num变化时，才进行大量的计算" class="headerlink" title="使用usememo之后，只有num变化时，才进行大量的计算"></a>使用usememo之后，只有num变化时，才进行大量的计算</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect, useMemo&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  const result = useMemo(() =&gt; &#123;</span><br><span class="line">    return heavyComputations();</span><br><span class="line">  &#125;, [num]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;result&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I’ve extracted two new components, <code>Clock</code> and <code>PrimeCalculator</code>. By branching off from <code>App</code>, these two components each manage their own state. A re-render in one component won’t affect the other.（可以将它们分成两个组件，各自管理它们自己的状态，互不影响）</p>
<p> <code>React.memo</code> wraps around our component and protects it from unrelated updates. Our <code>PurePrimeCalculator</code> will only re-render when it receives new data, or when its internal state changes.（可以使用 <code>React.memo</code>包裹组件，让它成为一个纯组件【输入不改变的时候，输出不改变】）</p>
<h6 id="改为独立组件"><a href="#改为独立组件" class="headerlink" title="改为独立组件"></a>改为独立组件</h6><p>这样也是每秒都执行一次大量计算函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;ShowInput/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ShowInput() &#123;</span><br><span class="line">  const [num, setNum] = useState(10);</span><br><span class="line">  // 大量计算</span><br><span class="line">  const heavyComputations = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;正在进行大量计算&#x27;)</span><br><span class="line">    return num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; value=&#123;num&#125; onChange=&#123; (e) =&gt; &#123;setNum(e.target.value)&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;&#123;heavyComputations()&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：使用<code>React.memo</code>将ShowInput组件改为纯函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">const PureShowInput = React.memo(ShowInput);</span><br><span class="line"></span><br><span class="line">export default function Customevent() &#123;</span><br><span class="line">  const [time, setTime] = useState(new Date())</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      setTime(new Date())</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,[time])</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;time.toLocaleString()&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;PureShowInput/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ShowInput() &#123;</span><br><span class="line"> .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在导出的时候，直接将其导出为纯组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// PrimeCalculator.js</span><br><span class="line">function PrimeCalculator() &#123;</span><br><span class="line">  /* Component stuff here */</span><br><span class="line">&#125;</span><br><span class="line">export default React.memo(PrimeCalculator);</span><br></pre></td></tr></table></figure>

<h6 id="使用纯组件（React-memo）的方法，还是会进行大量计算"><a href="#使用纯组件（React-memo）的方法，还是会进行大量计算" class="headerlink" title="使用纯组件（React.memo）的方法，还是会进行大量计算"></a><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/#use-case-2-preserved-references">使用纯组件（React.memo）的方法，还是会进行大量计算</a></h6><p><code>Boxes.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default React.memo(Boxes);</span><br></pre></td></tr></table></figure>

<p><code>App.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const boxes = [</span><br><span class="line">    &#123; flex: boxWidth, background: &#x27;hsl(345deg 100% 50%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 3, background: &#x27;hsl(260deg 100% 40%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 1, background: &#x27;hsl(50deg 100% 60%)&#x27; &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&lt;Boxes boxes=&#123;boxes&#125; /&gt;</span><br></pre></td></tr></table></figure>

<p>原因：every time React re-renders, we’re producing a <em>brand new array</em>. They’re equivalent in terms of <em>value</em>, but not in terms of <em>reference</em>.（组件每次重新渲染，会生成一个全新的数组，引用类型，地址就发生了改变，所以Boxes会重新渲染）</p>
<p>解决方法：使用<code>useMemo</code>，依赖<code>boxWidth</code>，当<code>boxWidth</code>改变时才更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const boxes = React.useMemo(() =&gt; &#123;</span><br><span class="line">  return [</span><br><span class="line">    &#123; flex: boxWidth, background: &#x27;hsl(345deg 100% 50%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 3, background: &#x27;hsl(260deg 100% 40%)&#x27; &#125;,</span><br><span class="line">    &#123; flex: 1, background: &#x27;hsl(50deg 100% 60%)&#x27; &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;, [boxWidth]);</span><br></pre></td></tr></table></figure>

<p>当使用context时，父组件的值改变的时候，会引起子组件的更新。如果不想子组件每次都更新，可以使用<code>useMemo</code>，只有当依赖<code>user, status, forgotPwLink</code>发生改变时，再更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const AuthContext = React.createContext(&#123;&#125;);</span><br><span class="line">function AuthProvider(&#123; user, status, forgotPwLink, children &#125;)&#123;</span><br><span class="line">  const memoizedValue = React.useMemo(() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user,</span><br><span class="line">      status,</span><br><span class="line">      forgotPwLink,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [user, status, forgotPwLink]);</span><br><span class="line">  return (</span><br><span class="line">    &lt;AuthContext.Provider value=&#123;memoizedValue&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;/AuthContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="useRef-1"><a href="#useRef-1" class="headerlink" title="useRef"></a><a href="https://react.docschina.org/docs/hooks-reference.html#useref">useRef</a></h5><h5 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a><a href="https://react.docschina.org/docs/hooks-reference.html#useimperativehandle">useImperativeHandle</a></h5><h5 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a><a href="https://react.docschina.org/docs/hooks-reference.html#uselayouteffect">useLayoutEffect</a></h5><h5 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a><a href="https://react.docschina.org/docs/hooks-reference.html#usedebugvalue">useDebugValue</a></h5><h4 id="Hooks-FAQ"><a href="#Hooks-FAQ" class="headerlink" title="Hooks FAQ"></a><a href="https://react.docschina.org/docs/hooks-faq.html">Hooks FAQ</a></h4><h4 id="测试概览"><a href="#测试概览" class="headerlink" title="测试概览"></a><a href="https://react.docschina.org/docs/testing.html">测试概览</a></h4><p><strong><a href="https://facebook.github.io/jest/">Jest</a></strong> </p>
<h4 id="AJAX-and-APIs"><a href="#AJAX-and-APIs" class="headerlink" title="AJAX and APIs"></a><a href="https://react.docschina.org/docs/faq-ajax.html">AJAX and APIs</a></h4><p>比如社区比较流行的 <a href="https://github.com/axios/axios">Axios</a>，<a href="https://api.jquery.com/jQuery.ajax/">jQuery AJAX</a>，或者是浏览器内置的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">window.fetch</a>。</p>
<p>在 <a href="https://react.docschina.org/docs/react-component.html#mounting"><code>componentDidMount</code></a> 这个生命周期函数中发起 AJAX 请求</p>
<h4 id="在组件中使用事件处理函数"><a href="#在组件中使用事件处理函数" class="headerlink" title="在组件中使用事件处理函数"></a><a href="https://react.docschina.org/docs/faq-functions.html">在组件中使用事件处理函数</a></h4><p><a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Yehuda Katz 的文章</a>详细解释了什么是绑定，以及函数在 JavaScript 中怎么起作用。</p>
<p>传递参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; this.handleClick(id)&#125; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.handleClick.bind(this, id)&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="通过箭头函数传递参数"><a href="#通过箭头函数传递参数" class="headerlink" title="通过箭头函数传递参数"></a><a href="https://react.docschina.org/docs/faq-functions.html#example-passing-params-using-arrow-functions">通过箭头函数传递参数</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;this.state.letters.map(letter =&gt;</span><br><span class="line">    &lt;li key=&#123;letter&#125; onClick=&#123;() =&gt; this.handleClick(letter)&#125;&gt;</span><br><span class="line">      &#123;letter&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="通过-data-attributes-传递参数"><a href="#通过-data-attributes-传递参数" class="headerlink" title="通过 data-attributes 传递参数"></a><a href="https://react.docschina.org/docs/faq-functions.html#example-passing-params-using-data-attributes">通过 data-attributes 传递参数</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleClick(e) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      justClicked: e.target.dataset.letter</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;this.state.letters.map(letter =&gt;</span><br><span class="line">    &lt;li key=&#123;letter&#125; data-letter=&#123;letter&#125; onClick=&#123;this.handleClick&#125;&gt;</span><br><span class="line">      &#123;letter&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h5 id="怎样阻止函数被调用太快或者太多次？"><a href="#怎样阻止函数被调用太快或者太多次？" class="headerlink" title="怎样阻止函数被调用太快或者太多次？"></a><a href="https://react.docschina.org/docs/faq-functions.html#how-can-i-prevent-a-function-from-being-called-too-quickly-or-too-many-times-in-a-row">怎样阻止函数被调用太快或者太多次？</a></h5><p>如果你有一个 <code>onClick</code> 或者 <code>onScroll</code> 这样的事件处理器，想要阻止回调被触发的太快，那么可以限制执行回调的速度，可以通过以下几种方式做到这点：</p>
<ul>
<li><strong>节流</strong>：基于时间的频率来进行抽样更改 (例如 <a href="https://lodash.com/docs#throttle"><code>_.throttle</code></a>)</li>
<li><strong>防抖</strong>：一段时间的不活动之后发布更改 (例如 <a href="https://lodash.com/docs#debounce"><code>_.debounce</code></a>)</li>
<li><strong><code>requestAnimationFrame</code> 节流</strong>：基于 requestAnimationFrame 的抽样更改 (例如 <a href="https://react.docschina.org/docs/[%60raf-schd%60](https://github.com/alexreardon/raf-schd)">raf-schd</a>)</li>
</ul>
<p>可以看这个比较 throttle 和 debounce 的<a href="http://demo.nimius.net/debounce_throttle/">可视化页面</a></p>
<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a><a href="https://react.docschina.org/docs/faq-functions.html#throttle">节流</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import throttle from &#x27;lodash.throttle&#x27;;</span><br><span class="line"></span><br><span class="line">class LoadMoreButton extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">    this.handleClickThrottled = throttle(this.handleClick, 1000);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    this.handleClickThrottled.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;button onClick=&#123;this.handleClickThrottled&#125;&gt;Load More&lt;/button&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.props.loadMore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a><a href="https://react.docschina.org/docs/faq-functions.html#debounce">防抖</a></h4><p>防抖确保函数不会在上一次被调用之后一定量的时间内被执行。当必须进行一些费时的计算来响应快速派发的事件时（比如<code>鼠标滚动或键盘事件时</code>），防抖是非常有用的。下面这个例子以 250ms 的延迟来改变文本输入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import debounce from &#x27;lodash.debounce&#x27;;</span><br><span class="line"></span><br><span class="line">class Searchbox extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    this.emitChangeDebounced = debounce(this.emitChange, 250);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    this.emitChangeDebounced.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        onChange=&#123;this.handleChange&#125;</span><br><span class="line">        placeholder=&quot;Search...&quot;</span><br><span class="line">        defaultValue=&#123;this.props.value&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.emitChangeDebounced(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emitChange(value) &#123;</span><br><span class="line">    this.props.onChange(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a><a href="https://react.docschina.org/docs/faq-state.html">组件状态</a></h4>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/05/16/TypeScript-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.typescriptlang.org/">Typescript-官网</a></p>
<p><a href="https://typescript.bootcss.com/">TypeScript 中文手册</a></p>
<p><a href="https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json">TypeScript React Starter</a> </p>
<ul>
<li><p><a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">在 React 中使用 TypeScript</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">TypeScript 文档：基本类型</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">TypeScript 文档：JavaScript 迁移</a></p>
</li>
<li><p><a href="https://www.typescriptlang.org/docs/handbook/react-&-webpack.html">TypeScript 文档：React 与 Webpack</a></p>
</li>
<li><p><a href="https://react.docschina.org/docs/static-type-checking.html#using-typescript-with-create-react-app">在 Create React App 中使用 TypeScript</a></p>
</li>
</ul>
<p>如需将 TypeScript 添加到<strong>现有的 Create React App 项目</strong>中，<a href="https://facebook.github.io/create-react-app/docs/adding-typescript">请参考此文档</a>.</p>
<p>通过<a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">此文档</a> 了解更多有关在 React 中使用 TypeScript 的知识。</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm insatll -g typescript </span><br></pre></td></tr></table></figure>

<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure>



<h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Girl &#123;</span><br><span class="line">	name: string;</span><br><span class="line">	age : number;</span><br><span class="line">	bust: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const girl=&#123;</span><br><span class="line">	name:&#x27;大脚&quot;,</span><br><span class="line">	age: 18,</span><br><span class="line">	bust: 94</span><br><span class="line">&#125;</span><br><span class="line">const screenResume= (girl : Girl)=&gt;&#123;</span><br><span class="line">	girl.age &lt; 24 &amp;&amp; girl.bust &gt;=90 &amp;&amp; console.log( girl.name+&#x27;进入面试&#x27;)</span><br><span class="line">	girl.age &gt;= 24 || girl.bust &lt;90 &amp;&amp; console.log( girl.name+&#x27;你被淘汰&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const getResume = (girl:Girl)=&gt;&#123;</span><br><span class="line">	console.log(girl.name+&#x27;年龄是&#x27;+girl.age)</span><br><span class="line">	console.log(girl.name+ &#x27;胸围是&#x27;+girl.bust)</span><br><span class="line">&#125;</span><br><span class="line">screenResume(girl)</span><br><span class="line">getResume(girl)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const screenResume= (name: string,age: number,bust:number)=&gt;&#123;</span><br><span class="line">	age &lt; 24 &amp;&amp; bust &gt;=90 &amp;&amp; console.log(name+&#x27;进入面试&#x27;)</span><br><span class="line">	age &gt;= 24 || bust &lt;90 &amp;&amp; console.log(name+&#x27;你被淘汰&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">const getResume = (name : string, age : number, bust: number)=&gt;&#123;</span><br><span class="line">	console.log(name+&#x27;年龄是&#x27;+age)</span><br><span class="line">	console.log(name+&#x27;胸围是&#x27;+bust)</span><br><span class="line">&#125;</span><br><span class="line">screenResume(&#x27;大脚&#x27;,18,94)</span><br><span class="line">getResume(&#x27;大脚&quot;,18,94)</span><br></pre></td></tr></table></figure>

<h5 id="可选值的定义："><a href="#可选值的定义：" class="headerlink" title="可选值的定义："></a>可选值的定义：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age ? : number (age可有可没有)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Girl &#123;</span><br><span class="line">	name: string;</span><br><span class="line">	age : number;</span><br><span class="line">	bust: number;</span><br><span class="line">	waistline ?: number;</span><br><span class="line">&#125;</span><br><span class="line">// 这样写不会报错：</span><br><span class="line">const getResume = (girl:Girl)=&gt;&#123;</span><br><span class="line">	console.log(girl.name+&#x27;年龄是&#x27;+girl.age)</span><br><span class="line">	console.log(girl.name+&#x27;胸围是&#x27;+girl.bust)</span><br><span class="line">	girl.waistline &amp;&amp; console.log(girl.name+&#x27;腰围是:&#x27;+girl.waistline )</span><br><span class="line">&#125;</span><br><span class="line">// 输出的内容还是跟原来一样</span><br><span class="line"></span><br><span class="line">// 如果将girl改为：</span><br><span class="line">const girl=&#123;</span><br><span class="line">	name:&#x27;大脚&quot;,</span><br><span class="line">	age: 18,</span><br><span class="line">	bust: 94,</span><br><span class="line">	waistline: 21</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 再输出打印，就会将waistline打印出来</span><br></pre></td></tr></table></figure>

<h5 id="定义一个可以加任何属性"><a href="#定义一个可以加任何属性" class="headerlink" title="定义一个可以加任何属性"></a>定义一个可以加任何属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[propname:string]: any;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Girl &#123;</span><br><span class="line">	name: string;</span><br><span class="line">	age : number;</span><br><span class="line">	bust: number;</span><br><span class="line">	waistline ?: number;</span><br><span class="line">	[propname:string]: any;</span><br><span class="line">&#125;</span><br><span class="line">const girl=&#123;</span><br><span class="line">	name: &quot;大脚&quot;,</span><br><span class="line">	age: 18,</span><br><span class="line">	bust:94,</span><br><span class="line">	waistline: 21,</span><br><span class="line">	sex:&#x27;女’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加方法："><a href="#添加方法：" class="headerlink" title="添加方法："></a>添加方法：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Girl &#123;</span><br><span class="line">	name: string;</span><br><span class="line">	age : number;</span><br><span class="line">	bust: number;</span><br><span class="line">	waistline ?: number;</span><br><span class="line">	[propname:string]: any;</span><br><span class="line">	say(): string;</span><br><span class="line">&#125;</span><br><span class="line">const girl=&#123;</span><br><span class="line">	name:&#x27;大脚&quot;，</span><br><span class="line">	age: 18,</span><br><span class="line">	bust:94,</span><br><span class="line">	waistline: 21,</span><br><span class="line">	sex: &#x27;女&#x27;，</span><br><span class="line">	say()&#123;</span><br><span class="line">		return &quot;欢迎光临，红浪漫洗浴!!”</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="接口和类的约束"><a href="#接口和类的约束" class="headerlink" title="接口和类的约束"></a>接口和类的约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class xiaojieJie implements Girl&#123;</span><br><span class="line">	name=&quot;刘英&quot;</span><br><span class="line">	age=18</span><br><span class="line">	bust=90</span><br><span class="line">	say()&#123;</span><br><span class="line">		return &quot;欢迎光临,红浪漫洗浴!!&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="接口间的继承"><a href="#接口间的继承" class="headerlink" title="接口间的继承"></a>接口间的继承</h5><h4 id="TypeScript中类的概念和使用"><a href="#TypeScript中类的概念和使用" class="headerlink" title="TypeScript中类的概念和使用"></a>TypeScript中类的概念和使用</h4><blockquote>
<h4 id="类的基本使用"><a href="#类的基本使用" class="headerlink" title="类的基本使用"></a>类的基本使用</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Lady &#123;</span><br><span class="line">  content = &quot;Hi，帅哥&quot;;</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return this.content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const goddess = new Lady();</span><br><span class="line">console.log(goddess.sayHello());</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Lady &#123;</span><br><span class="line">  content = &quot;Hi，帅哥&quot;;</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return this.content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class XiaoJieJie extends Lady &#123;</span><br><span class="line">  sayLove() &#123;</span><br><span class="line">    return &quot;I love you&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const goddess = new XiaoJieJie();</span><br><span class="line">console.log(goddess.sayHello());</span><br><span class="line">console.log(goddess.sayLove());</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类的重写"><a href="#类的重写" class="headerlink" title="类的重写"></a>类的重写</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class XiaoJieJie extends Lady &#123;</span><br><span class="line">  sayLove() &#123;</span><br><span class="line">    return &quot;I love you!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return &quot;Hi , honey!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="super关键字的使用"><a href="#super关键字的使用" class="headerlink" title="super关键字的使用"></a>super关键字的使用</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class XiaoJieJie extends Lady &#123;</span><br><span class="line">  sayLove() &#123;</span><br><span class="line">    return &quot;I love you!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return super.sayHello() + &quot;。你好！&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="TypeScript中类的访问类型"><a href="#TypeScript中类的访问类型" class="headerlink" title="TypeScript中类的访问类型"></a>TypeScript中类的访问类型</h4><blockquote>
<p>其实类的访问类型就是基于三个关键词<code>private</code>、<code>protected</code>和<code>public</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public name:string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="public访问属性讲解"><a href="#public访问属性讲解" class="headerlink" title="public访问属性讲解"></a>public访问属性讲解</h4></blockquote>
<blockquote>
<p><code>public</code>从英文字面的解释就是<code>公共的</code>或者说是<code>公众的</code>，在程序里的意思就是允许在类的内部和外部被调用.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public name:string;</span><br><span class="line">    public sayHello()&#123;</span><br><span class="line">        console.log(this.name + &#x27; say Hello&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public name:string;</span><br><span class="line">    public sayHello()&#123;</span><br><span class="line">        console.log(this.name + &#x27;say Hello&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//-------以下属于类的外部--------</span><br><span class="line">const person = new Person()</span><br><span class="line">person.name = &#x27;jspang.com&#x27;</span><br><span class="line">person.sayHello()</span><br><span class="line">console.log(person.name)</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="private访问属性讲解"><a href="#private访问属性讲解" class="headerlink" title="private访问属性讲解"></a>private访问属性讲解</h4></blockquote>
<blockquote>
<p>private 访问属性的意思是，只允许再类的内部被调用，外部不允许调用</p>
</blockquote>
<p>比如现在我们把 name 属性改成<code>private</code>,这时候在类的内部使用不会提示错误，而外部使用<code>VSCode</code>直接会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private name:string;</span><br><span class="line">    public sayHello()&#123;</span><br><span class="line">        console.log(this.name + &#x27;say Hello&#x27;)  //此处不报错</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//-------以下属于类的外部--------</span><br><span class="line">const person = new Person()</span><br><span class="line">person.name = &#x27;jspang.com&#x27;    //此处报错</span><br><span class="line">person.sayHello()</span><br><span class="line">console.log(person.name)  //此处报错</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="protected访问属性讲解"><a href="#protected访问属性讲解" class="headerlink" title="protected访问属性讲解"></a>protected访问属性讲解</h4></blockquote>
<blockquote>
<p>protected 允许在类内及继承的子类中使用</p>
</blockquote>
<h4 id="TypeScript类的构造函数"><a href="#TypeScript类的构造函数" class="headerlink" title="TypeScript类的构造函数"></a>TypeScript类的构造函数</h4><blockquote>
<h4 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    public name :string ;</span><br><span class="line">    constructor(name:string)&#123;</span><br><span class="line">        this.name=name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person= new Person(&#x27;jspang&#x27;)</span><br><span class="line">console.log(person.name)</span><br></pre></td></tr></table></figure>

<h6 id="简单写法："><a href="#简单写法：" class="headerlink" title="简单写法："></a>简单写法：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(public name:string)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person= new Person(&#x27;jspang&#x27;)</span><br><span class="line">console.log(person.name)</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类继承中的构造器写法"><a href="#类继承中的构造器写法" class="headerlink" title="类继承中的构造器写法"></a>类继承中的构造器写法</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(public name:string)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Teacher extends Person&#123;</span><br><span class="line">    constructor(public age:number)&#123;</span><br><span class="line">        super(&#x27;jspang&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const teacher = new Teacher(18)</span><br><span class="line">console.log(teacher.age)</span><br><span class="line">console.log(teacher.name)</span><br></pre></td></tr></table></figure>

<p>这就是子类继承父类并有构造函数的原则，就是在子类里写构造函数时，必须用<code>super()</code>调用父类的构造函数，如果需要传值，也必须进行传值操作。就算是父类没有构造函数，子类也要使用<code>super()</code>进行调用，否则就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person&#123;&#125;</span><br><span class="line"></span><br><span class="line">class Teacher extends Person&#123;</span><br><span class="line">    constructor(public age:number)&#123;</span><br><span class="line">        super()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const teacher = new Teacher(18)</span><br><span class="line">console.log(teacher.age)</span><br></pre></td></tr></table></figure>

<h4 id="TypeScript类的Getter、Setter和static使用"><a href="#TypeScript类的Getter、Setter和static使用" class="headerlink" title="TypeScript类的Getter、Setter和static使用"></a>TypeScript类的Getter、Setter和static使用</h4><p>类的访问类型<code>private</code>，它的最大用处是封装一个属性，然后通过 Getter 和 Setter 的形式来访问和修改这个属性。</p>
<blockquote>
<h4 id="类的Getter和Setter"><a href="#类的Getter和Setter" class="headerlink" title="类的Getter和Setter"></a>类的Getter和Setter</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Xiaojiejie &#123;</span><br><span class="line">  constructor(private _age:number)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Xiaojiejie &#123;</span><br><span class="line">  constructor(private _age:number)&#123;&#125;</span><br><span class="line">  get age()&#123;</span><br><span class="line">      return this._age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dajiao = new Xiaojiejie(28)</span><br><span class="line"></span><br><span class="line">console.log(dajiao.getAge)</span><br></pre></td></tr></table></figure>

<p>玄妙就在于<code>getter</code>里，我们可以对<code>_age</code>进行处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Xiaojiejie &#123;</span><br><span class="line">  constructor(private _age:number)&#123;&#125;</span><br><span class="line">  get age()&#123;</span><br><span class="line">      return this._age-10</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>_age</code>是私有的，那类的外部就没办法改变，所以这时候可以用<code>setter</code>属性进行改变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Xiaojiejie &#123;</span><br><span class="line">  constructor(private _age:number)&#123;&#125;</span><br><span class="line">  get age()&#123;</span><br><span class="line">      return this._age-10</span><br><span class="line">  &#125;</span><br><span class="line">  set age(age:number)&#123;</span><br><span class="line">    this._age=age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dajiao = new Xiaojiejie(28)</span><br><span class="line">dajiao.age=25</span><br><span class="line">console.log(dajiao.age)</span><br></pre></td></tr></table></figure>

<p>其实<code>setter</code>也是可以保护私有变量的，现在大脚的年龄输出是 15 岁，在<code>setter</code>里给他加上个 3 岁，就18</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set age(age:number)&#123;</span><br><span class="line">   this._age=age+3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类中的static"><a href="#类中的static" class="headerlink" title="类中的static"></a>类中的static</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Girl &#123;</span><br><span class="line">  sayLove() &#123;</span><br><span class="line">    return &quot;I Love you&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const girl = new Girl();</span><br><span class="line">console.log(girl.sayLove());</span><br></pre></td></tr></table></figure>

<p>不想<code>new</code>出对象，而直接使用这个方法，那<code>TypeScript</code>为你提供了快捷的方式，用<code>static</code>声明的属性和方法，不需要进行声明对象，就可以直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Girl &#123;</span><br><span class="line">  static sayLove() &#123;</span><br><span class="line">    return &quot;I Love you&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(Girl.sayLove());</span><br></pre></td></tr></table></figure>

<h4 id="类的只读属性和抽象类"><a href="#类的只读属性和抽象类" class="headerlink" title="类的只读属性和抽象类"></a>类的只读属性和抽象类</h4><p>抽象类跟父类很像，都需要继承，但是抽象类里一般都有抽象方法。继承抽象类的类必须实现抽象方法才可以</p>
<blockquote>
<h4 id="类里的只读属性-readonly"><a href="#类里的只读属性-readonly" class="headerlink" title="类里的只读属性 readonly"></a>类里的只读属性 readonly</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public name:string </span>)&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jspang&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<p>比如我现在有一个需求，就是在实例化对象时赋予的名字，以后不能再更改了，也就是我们常说的只读属性。我们先来看现在这种情况是可以随意更改的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    constructor(public name:string )&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = new Person(&#x27;jspang&#x27;)</span><br><span class="line">person.name= &#x27;谢广坤&#x27;</span><br><span class="line">console.log(person.name)</span><br></pre></td></tr></table></figure>

<p>这时候就可以用一个关键词<code>readonly</code>,也就是只读的意思，来修改<code>Person</code>类代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public readonly _name :string;</span><br><span class="line">    constructor(name:string )&#123;</span><br><span class="line">        this._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = new Person(&#x27;jspang&#x27;)</span><br><span class="line">person._name= &#x27;谢广坤&#x27;</span><br><span class="line">console.log(person._name)</span><br></pre></td></tr></table></figure>

<p>这样写完后，<code>VSCode</code>就回直接给我们报错，告诉我们<code>_name</code>属性是只读属性，不能修改。</p>
<blockquote>
<h4 id="抽象类的使用"><a href="#抽象类的使用" class="headerlink" title="抽象类的使用"></a>抽象类的使用</h4></blockquote>
<p>比如我开了一个红浪漫洗浴中心，里边有服务员，有初级技师，高级技师，每一个岗位我都写成一个类，那代码就是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Waiter &#123;&#125;</span><br><span class="line"></span><br><span class="line">class BaseTeacher &#123;&#125;</span><br><span class="line"></span><br><span class="line">class seniorTeacher &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>我要求无论是什么职位，都要有独特的技能，比如服务员就是给顾客倒水，初级技师要求会泰式按摩，高级技师要求会 SPA 全身按摩。这是一个硬性要求，但是每个职位的技能有不同，这时候就可以用抽象类来解决问题。</p>
<p>抽象类的关键词是<code>abstract</code>,里边的抽象方法也是<code>abstract</code>开头的，现在我们就写一个<code>Girl</code>的抽象类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class Girl&#123;</span><br><span class="line">    abstract skill()  //因为没有具体的方法，所以我们这里不写括号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个抽象类，三个类就可以继承这个类，然后会要求必须实现<code>skill()</code>方法，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class Girl&#123;</span><br><span class="line">    abstract skill()  //因为没有具体的方法，所以我们这里不写括号</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Waiter extends Girl&#123;</span><br><span class="line">    skill()&#123;</span><br><span class="line">        console.log(&#x27;大爷，请喝水！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BaseTeacher extends Girl&#123;</span><br><span class="line">    skill()&#123;</span><br><span class="line">        console.log(&#x27;大爷，来个泰式按摩吧！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class seniorTeacher extends Girl&#123;</span><br><span class="line">    skill()&#123;</span><br><span class="line">        console.log(&#x27;大爷，来个SPA全身按摩吧！&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件-初识-tsconfig-json"><a href="#配置文件-初识-tsconfig-json" class="headerlink" title="配置文件-初识 tsconfig.json"></a>配置文件-初识 tsconfig.json</h4><blockquote>
<h4 id="生成-tsconfig-json-文件"><a href="#生成-tsconfig-json-文件" class="headerlink" title="生成 tsconfig.json 文件"></a>生成 tsconfig.json 文件</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>如果此时你的<code>tsc</code>执行不了，很有可能是你没有全局安装 TypeScript,可以全局安装一下。</p>
<p>找到<code>complilerOptions</code>属性下的<code>removeComments:true</code>选项，把注释去掉。</p>
<p>如果要想编译配置文件起作用，我们可以直接运行<code>tsc</code>命令，这时候<code>tsconfig.json</code>才起作用，可以看到生成的<code>js</code>文件已经不带注释了。</p>
<blockquote>
<h4 id="include-、exclude-和-files"><a href="#include-、exclude-和-files" class="headerlink" title="include 、exclude 和 files"></a>include 、exclude 和 files</h4></blockquote>
<ol>
<li><p>第一种：使用 include 配置</p>
<p><code>include</code>属性是用来指定要编译的文件的，比如现在我们只编译<code>demo.ts</code>文件，而不编译其他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;include&quot;:[&quot;demo.ts&quot;],</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">      //any something</span><br><span class="line">      //........</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>第二种：使用exclude配置</p>
<p><code>exclude</code>是不包含，除了demo2.ts不编译，其他都编译。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;exclude&quot;:[&quot;demo2.ts&quot;],</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">      //any something</span><br><span class="line">      //........</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三种：使用 files 配置</p>
<p><code>files</code>的配置效果和<code>include</code>几乎一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;files&quot;:[&quot;demo.ts&quot;],</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">      //any something</span><br><span class="line">      //........</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="配置文件-初识-compilerOptions-配置项"><a href="#配置文件-初识-compilerOptions-配置项" class="headerlink" title="配置文件-初识 compilerOptions 配置项"></a>配置文件-初识 compilerOptions 配置项</h4><p>它是告诉<code>TypeScript</code>具体如何编译成<code>js</code>文件的</p>
<blockquote>
<h4 id="removeComments-属性"><a href="#removeComments-属性" class="headerlink" title="removeComments 属性"></a>removeComments 属性</h4></blockquote>
<p>它的用处是告诉<code>TypeScript</code>对编译出来的<code>js</code>文件是否显示注释（注解）。比如我们现在把<code>removeComments</code>的值设置为<code>true</code>，就是在<code>js</code>中不显示注释。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// I&#x27;m JSPang</span><br><span class="line">const person: string = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<p>把<code>removeComments</code>的值，设置为<code>true</code>，编译后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var person = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<p>把<code>removeComments</code>的值，设置为<code>false</code>,编译后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">// I‘m JSPang</span><br><span class="line">var person = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="strict-属性"><a href="#strict-属性" class="headerlink" title="strict 属性"></a>strict 属性</h4></blockquote>
<p><code>strict</code>属性如果设置为<code>true</code>,就代表我们的编译和书写规范，要按照<code>TypeScript</code>最严格的规范来写，如果我们把这个设置为<code>false</code>或者注释掉，意思是我们可以对设置一些不严格的写法。</p>
<blockquote>
<h4 id="noImplicitAny-属性"><a href="#noImplicitAny-属性" class="headerlink" title="noImplicitAny 属性"></a>noImplicitAny 属性</h4></blockquote>
<p><code>noImplicitAny</code>属性的作用是，允许你的注解类型 any 不用特意表明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jspang(name) &#123;</span><br><span class="line">  return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们的<code>TypeScript</code>是进行报错的，我们用<code>tsc</code>编译也是报错的。这就是因为我们开启了<code>strict:true</code>,我们先注释掉，然后把<code>noImplicitAny</code>的值设置为<code>false</code>,就不再报错了。</p>
<p>如果设置为<code>noImplicitAny:true</code>,意思就是值就算是 any（任意值），你也要进行类型注释。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jspang(name: any) &#123;</span><br><span class="line">  return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以简单的理解为，设置为 true，就是必须明确置顶 any 类型的值。</p>
<blockquote>
<h4 id="strictNullChecks-属性"><a href="#strictNullChecks-属性" class="headerlink" title="strictNullChecks 属性"></a>strictNullChecks 属性</h4></blockquote>
<p>我们先把<code>strictNullChecks</code>设置为<code>false</code>,它的意思就是，<strong>不强制检查 NULL 类型。</strong>我们举个例子，让你能一下子就明白，还是删除<code>demo.ts</code>里的代码，然后编写代码.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const jspang: string = null;</span><br></pre></td></tr></table></figure>

<p>代码写完后，你会发现这段代码是不报错的，如果是以前，一定是报错的，这就是我们配置了“不强制检验 null 类型”。如果你设成<code>strictNullChecks:true</code>，这时候就报错了。</p>
<blockquote>
<h4 id="ts-node-遵循-tsconfig-js-文件"><a href="#ts-node-遵循-tsconfig-js-文件" class="headerlink" title="ts-node 遵循 tsconfig.js 文件"></a>ts-node 遵循 tsconfig.js 文件</h4></blockquote>
<h4 id="配置文件-compilerOptions-配置内容详解"><a href="#配置文件-compilerOptions-配置内容详解" class="headerlink" title="配置文件- compilerOptions 配置内容详解"></a>配置文件- compilerOptions 配置内容详解</h4><blockquote>
<h4 id="rootDir-和-outDir"><a href="#rootDir-和-outDir" class="headerlink" title="rootDir 和 outDir"></a>rootDir 和 outDir</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;outDir&quot;: &quot;./build&quot; ,</span><br><span class="line">    &quot;rootDir&quot;: &quot;./src&quot; ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="编译-ES6-语法到-ES5-语法-allowJs"><a href="#编译-ES6-语法到-ES5-语法-allowJs" class="headerlink" title="编译 ES6 语法到 ES5 语法-allowJs"></a>编译 ES6 语法到 ES5 语法-allowJs</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const name = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<p>如果不做任何配置，这时候试用<code>tsc</code>是没有效果的。需要到<code>tsconfig.js</code>文件里进行修改，修改的地方有两个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;target&quot;:&#x27;es5&#x27; ,  // 这一项默认是开启的，你必须要保证它的开启，才能转换成功</span><br><span class="line">&quot;allowJs&quot;:true,   // 这个配置项的意思是联通</span><br></pre></td></tr></table></figure>

<p>这两项都开启后，在使用<code>tsc</code>编译时，就会编译<code>js</code>文件了。</p>
<blockquote>
<h4 id="sourceMap-属性"><a href="#sourceMap-属性" class="headerlink" title="sourceMap 属性"></a>sourceMap 属性</h4></blockquote>
<blockquote>
<p>sourceMap 简单说，Source map 就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>
</blockquote>
<blockquote>
<h4 id="noUnusedLocals-和-noUnusedParameters"><a href="#noUnusedLocals-和-noUnusedParameters" class="headerlink" title="noUnusedLocals 和 noUnusedParameters"></a>noUnusedLocals 和 noUnusedParameters</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const jspang: string = null;</span><br><span class="line">export const name = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<p>这时候你会发现<code>jspang</code>这个变量没有任何地方使用，但是我们编译的话，它依然会被编译出来，这就是一种资源的浪费。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//编译后的文件</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">exports.__esModule = true;</span><br><span class="line">exports.name = void 0;</span><br><span class="line">var jspang = null;</span><br><span class="line">exports.name = &quot;jspang&quot;;</span><br></pre></td></tr></table></figure>

<p>这时候我们可以开启<code>noUnusedLocals：true</code>，开启后我们的程序会直接给我们提示不能这样编写代码，有没有使用的变量。</p>
<p><code>noUnusedParameters</code>是针对于名优使用的函数的，方法和<code>noUnusedLocals：true</code>一样，小伙伴们自己尝试吧。</p>
<h6 id="编译选项详解"><a href="#编译选项详解" class="headerlink" title="编译选项详解"></a>编译选项详解</h6><p><a href="https://www.tslang.cn/docs/handbook/compiler-options.html">编译选项</a></p>
<h4 id="联合类型和类型保护"><a href="#联合类型和类型保护" class="headerlink" title="联合类型和类型保护"></a>联合类型和类型保护</h4><blockquote>
<h4 id="联合类型展示"><a href="#联合类型展示" class="headerlink" title="联合类型展示"></a>联合类型展示</h4></blockquote>
<p>所谓联合类型，可以认为一个变量可能有两种或两种以上的类型。所以我们使用了联合类型，关键符号是<code>|</code>(竖线)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Waiter &#123;</span><br><span class="line">  anjiao: boolean;</span><br><span class="line">  say: () =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Teacher &#123;</span><br><span class="line">  anjiao: boolean;</span><br><span class="line">  skill: () =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function judgeWho(animal: Waiter | Teacher) &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function judgeWho(animal: Waiter | Teacher) &#123;</span><br><span class="line">  animal.say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这时候问题来了，如果我直接写一个这样的方法，就会报错，因为<code>judgeWho</code>不能准确的判断联合类型具体的实例是什么。</p>
<p>这时候就需要再引出一个概念叫做<code>类型保护</code></p>
<blockquote>
<h4 id="类型保护-类型断言"><a href="#类型保护-类型断言" class="headerlink" title="类型保护-类型断言"></a>类型保护-类型断言</h4></blockquote>
<p>类型断言就是通过断言的方式确定传递过来的准确值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Waiter &#123;</span><br><span class="line">  anjiao: boolean;</span><br><span class="line">  say: () =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Teacher &#123;</span><br><span class="line">  anjiao: boolean;</span><br><span class="line">  skill: () =&gt; &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function judgeWho(animal: Waiter | Teacher) &#123;</span><br><span class="line">  if (animal.anjiao) &#123;</span><br><span class="line">    (animal as Teacher).skill();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    (animal as Waiter).say();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类型保护-in语法"><a href="#类型保护-in语法" class="headerlink" title="类型保护-in语法"></a>类型保护-in语法</h4></blockquote>
<p>经常使用<code>in</code>语法来作类型保护，比如用<code>if</code>来判断<code>animal</code>里有没有<code>skill()</code>方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function judgeWhoTwo(animal: Waiter | Teacher) &#123;</span><br><span class="line">  if (&quot;skill&quot; in animal) &#123;</span><br><span class="line">    animal.skill();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    animal.say();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>else</code>部分能够自动判断，得益于<code>TypeScript</code>的自动判断。</p>
<blockquote>
<h4 id="类型保护-typeof-语法"><a href="#类型保护-typeof-语法" class="headerlink" title="类型保护-typeof 语法"></a>类型保护-typeof 语法</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function add(first: string | number, second: string | number) &#123;</span><br><span class="line">  return first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候会报错，解决这个问题，就可以直接用type of来进行解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function add(first: string | number, second: string | number) &#123;</span><br><span class="line">  if (typeof first === &quot;string&quot; || typeof second === &quot;string&quot;) &#123;</span><br><span class="line">    return `$&#123;first&#125;$&#123;second&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">  return first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="类型保护-instanceof-语法"><a href="#类型保护-instanceof-语法" class="headerlink" title="类型保护-instanceof 语法"></a>类型保护-instanceof 语法</h4></blockquote>
<p>比如现在要作类型保护的是一个对象，这时候就可以使用<code>instanceof</code>语法来作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class NumberObj &#123;</span><br><span class="line">  count: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function addObj(first: object | NumberObj, second: object | NumberObj) &#123;</span><br><span class="line">  return first.count + second.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错不要紧，直接使用<code>instanceof</code>语法进行判断一下，就可以解决问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function addObj(first: object | NumberObj, second: object | NumberObj) &#123;</span><br><span class="line">  if (first instanceof NumberObj &amp;&amp; second instanceof NumberObj) &#123;</span><br><span class="line">    return first.count + second.count;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Enum-枚举类型讲解"><a href="#Enum-枚举类型讲解" class="headerlink" title="Enum 枚举类型讲解"></a>Enum 枚举类型讲解</h4><p>初级程序员写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getServe</span>(<span class="params">status: number</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;massage&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;SPA&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dabaojian&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getServe</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我要去<span class="subst">$&#123;result&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>中级程序员写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Status</span> = &#123;</span><br><span class="line">  <span class="attr">MASSAGE</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">SPA</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">DABAOJIAN</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getServe</span>(<span class="params">status: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">MASSAGE</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;massage&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">SPA</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;spa&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">DABAOJIAN</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dabaojian&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getServe</span>(<span class="title class_">Status</span>.<span class="property">SPA</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我要去<span class="subst">$&#123;result&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>高级程序员写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Status</span> &#123;</span><br><span class="line">  <span class="variable constant_">MASSAGE</span>,</span><br><span class="line">  <span class="variable constant_">SPA</span>,</span><br><span class="line">  <span class="variable constant_">DABAOJIAN</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getServe</span>(<span class="params">status: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">MASSAGE</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;massage&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">SPA</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;spa&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === <span class="title class_">Status</span>.<span class="property">DABAOJIAN</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dabaojian&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getServe</span>(<span class="title class_">Status</span>.<span class="property">SPA</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我要去<span class="subst">$&#123;result&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="枚举类型的对应值"><a href="#枚举类型的对应值" class="headerlink" title="枚举类型的对应值"></a>枚举类型的对应值</h4></blockquote>
<p>你调用时传一个<code>1</code>,也会输出<code>我要去spa</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">getServe</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>因为枚举类型是有对应的数字值的，默认是从 0 开始的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">MASSAGE</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">SPA</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">DABAOJIAN</span>);</span><br></pre></td></tr></table></figure>

<p>可以看出结果就是<code>0,1,2</code>。那这时候不想默认从 0 开始，而是想从 1 开始。可以这样写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Status</span> &#123;</span><br><span class="line">  <span class="variable constant_">MASSAGE</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="variable constant_">SPA</span>,</span><br><span class="line">  <span class="variable constant_">DABAOJIAN</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="枚举通过下标反查"><a href="#枚举通过下标反查" class="headerlink" title="枚举通过下标反查"></a>枚举通过下标反查</h4></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Status.MASSAGE, Status[1]);</span><br></pre></td></tr></table></figure>

<h4 id="TypeScript-函数泛型-难点"><a href="#TypeScript-函数泛型-难点" class="headerlink" title="TypeScript 函数泛型-难点"></a>TypeScript 函数泛型-难点</h4><blockquote>
<h4 id="编写一个联合类型-Demo"><a href="#编写一个联合类型-Demo" class="headerlink" title="编写一个联合类型 Demo"></a>编写一个联合类型 Demo</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">first: string | number, second: string | number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">join</span>(<span class="string">&quot;jspang&quot;</span>, <span class="string">&quot;.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>那现在所学的知识就完成不了啦，所以需要学习<code>泛型</code>来解决这个问题。</p>
<blockquote>
<h4 id="初始泛型概念-generic"><a href="#初始泛型概念-generic" class="headerlink" title="初始泛型概念-generic"></a>初始泛型概念-generic</h4></blockquote>
<blockquote>
<p>泛型：[generic - 通用、泛指的意思],那最简单的理解，泛型就是泛指的类型。</p>
</blockquote>
<p>泛型的定义使用<code>&lt;&gt;</code>（尖角号）进行定义的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> join&lt;<span class="title class_">JSPang</span>&gt;(<span class="attr">first</span>: <span class="title class_">JSPang</span>, <span class="attr">second</span>: <span class="title class_">JSPang</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join &lt; string &gt; (<span class="string">&quot;jspang&quot;</span>, <span class="string">&quot;.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果要是<code>number</code>类型，就直接在调用方法的时候进行更改就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">join &lt; number &gt; (<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="泛型中数组的使用"><a href="#泛型中数组的使用" class="headerlink" title="泛型中数组的使用"></a>泛型中数组的使用</h4></blockquote>
<p>如果传递过来的值要求是数字，如何用泛型进行定义那?两种方法，第一种是直接使用<code>[]</code>，第二种是使用<code>Array&lt;泛型&gt;</code>。形式不一样，其他的都一样。</p>
<p>第一种写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> myFun&lt;<span class="variable constant_">ANY</span>&gt;(<span class="attr">params</span>: <span class="variable constant_">ANY</span>[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">myFun &lt; string &gt; [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>第二种写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> myFun&lt;<span class="variable constant_">ANY</span>&gt;(<span class="attr">params</span>: <span class="title class_">Array</span>&lt;<span class="variable constant_">ANY</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line">myFun &lt; string &gt; [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>在工作中，我们经常使用<code>&lt;T&gt;</code>来作泛型的表示</p>
<blockquote>
<h4 id="多个泛型的定义"><a href="#多个泛型的定义" class="headerlink" title="多个泛型的定义"></a>多个泛型的定义</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> join&lt;T, P&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: P) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">join &lt; number, string &gt; (<span class="number">1</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="泛型的类型推断"><a href="#泛型的类型推断" class="headerlink" title="泛型的类型推断"></a>泛型的类型推断</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> join&lt;T, P&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: P) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">join</span>(<span class="number">1</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>不建议大量使用类型推断，这会让你的代码易读和健壮性都会下降</p>
<h4 id="TypeScript-类中泛型-难点"><a href="#TypeScript-类中泛型-难点" class="headerlink" title="TypeScript 类中泛型-难点"></a>TypeScript 类中泛型-难点</h4><blockquote>
<h4 id="编写一个基本类"><a href="#编写一个基本类" class="headerlink" title="编写一个基本类"></a>编写一个基本类</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private girls: string[]</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getGirl</span>(<span class="attr">index</span>: number): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectGirl = <span class="keyword">new</span> <span class="title class_">SelectGirl</span>([<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectGirl.<span class="title function_">getGirl</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>在 TypeScript 中，编写复杂代码的时候，会经常使用泛型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private girls: string[] | number[]</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getGirl</span>(<span class="attr">index</span>: number): string | number &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="初始类的泛型"><a href="#初始类的泛型" class="headerlink" title="初始类的泛型"></a>初始类的泛型</h4></blockquote>
<p>用<code>&lt;&gt;</code>编写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private girls: T[]</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getGirl</span>(<span class="attr">index</span>: number): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectGirl = <span class="keyword">new</span> <span class="title class_">SelectGirl</span>([<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectGirl.<span class="title function_">getGirl</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>这时候代码并不报错，也使用了泛型，但是在实例化对象的时候，TypeScript 是通过类型推断出来的。这种方法并不好，所以还是需要在实例化对象的时候，对泛型的值进行确定，比如是<code>string</code>类型，就这样写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> selectGirl = <span class="keyword">new</span> <span class="title class_">SelectGirl</span>() &lt; string &gt; [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="泛型中的继承"><a href="#泛型中的继承" class="headerlink" title="泛型中的继承"></a>泛型中的继承</h4></blockquote>
<p>现在需求又变了，要求返回是一个对象中的<code>name</code>,也就是下面的代码要改成这个样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index].<span class="property">name</span>;</span><br></pre></td></tr></table></figure>

<p>现在的代码一定时报错的，但是这时候还要求我们这么做，意思就是说传递过来的值必须是一个对象类型的，里边还要有<code>name</code>属性。这时候就要用到继承了，我用接口的方式来实现。写一个<code>Girl</code>的接口，每个接口里都要有 name 属性。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了接口后用<code>extends</code>关键字实现泛型继承，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Girl</span>&gt; &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这句代码的意思是泛型里必须有一个<code>name</code>属性，因为它继承了<code>Girl</code>接口。</p>
<p>现在程序还是报错的，因为我们<code>getGirl</code>方法的返回类型还不对，这时候应该是一个<code>string</code>类型才对，所以代码应该改为下面的样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Girl</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private girls: T[]</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getGirl</span>(<span class="attr">index</span>: number): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index].<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectGirl = <span class="keyword">new</span> <span class="title class_">SelectGirl</span>([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;大脚&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;刘英&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;晓红&quot;</span> &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectGirl.<span class="title function_">getGirl</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4></blockquote>
<p>现在的泛型可以是任意类型，可以是对象、字符串、布尔、数字都是可以的。但你现在要求这个泛型必须是<code>string</code>或者<code>number</code>类型。我们还是拿上面的例子，不过把代码改为最初的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SelectGirl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private girls: T[]</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getGirl</span>(<span class="attr">index</span>: number): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">girls</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectGirl = <span class="keyword">new</span> <span class="title class_">SelectGirl</span>&lt;string&gt;([<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectGirl.<span class="title function_">getGirl</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>然后进行约束，这时候还是可以使用关键字<code>extends</code>来进行约束，把代码改成下面的样子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SelectGirl&lt;T extends number | string&gt; &#123;</span><br><span class="line">  //.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="TypeScript-静态类型"><a href="#TypeScript-静态类型" class="headerlink" title="TypeScript 静态类型"></a>TypeScript 静态类型</h4><h5 id="TypeScript-最主要的特点就是可以定义静态类型"><a href="#TypeScript-最主要的特点就是可以定义静态类型" class="headerlink" title="TypeScript 最主要的特点就是可以定义静态类型"></a>TypeScript 最主要的特点就是可以定义静态类型</h5><p>Static Typing  (一旦定义了就不可以再改变了)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let count : number = 1;   (一旦定义了是number，就是number，不能改变类型。)</span><br><span class="line">count.后面可以跟number的所有方法</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface XiaojieJie &#123;</span><br><span class="line">    uname: string, </span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const xiaohong : XiaojieJie = &#123;</span><br><span class="line">    uname: &#x27;小红&#x27;, </span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">console.log(xiaohong.age) </span><br></pre></td></tr></table></figure>

<h4 id="基础静态类型和对象静态类型"><a href="#基础静态类型和对象静态类型" class="headerlink" title="基础静态类型和对象静态类型"></a>基础静态类型和对象静态类型</h4><h5 id="基础静态类型"><a href="#基础静态类型" class="headerlink" title="基础静态类型"></a>基础静态类型</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const count0 : number = 918;</span><br><span class="line">const myName : string = &#x27;jspang&#x27;;</span><br><span class="line">// null , undefinde , booLean, void, symboL</span><br></pre></td></tr></table></figure>

<h5 id="对象静态类型"><a href="#对象静态类型" class="headerlink" title="对象静态类型"></a>对象静态类型</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojieJie: &#123;</span><br><span class="line">    name : string,</span><br><span class="line">    age : number </span><br><span class="line">&#125; = &#123;</span><br><span class="line">    name : &#x27;大脚&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejie : string [] = [&quot;小红&quot;, &quot;小林&quot;, &quot;小星星&quot;]</span><br><span class="line"></span><br><span class="line">class Person&#123;&#125;</span><br><span class="line">const dajiao : Person = new Person();</span><br></pre></td></tr></table></figure>

<p>定义一个函数，返回值必须是字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const jianXiaoJieJie :()=&gt;string =()=&gt;&#123;return &#x27;大脚&#x27;&#125;</span><br><span class="line">//对象类型，数组类型，类类型，函数类型</span><br></pre></td></tr></table></figure>

<h4 id="类型注解和类型推断"><a href="#类型注解和类型推断" class="headerlink" title="类型注解和类型推断"></a>类型注解和类型推断</h4><h5 id="类型注解-type-annotation"><a href="#类型注解-type-annotation" class="headerlink" title="类型注解 - type annotation"></a>类型注解 - type annotation</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let count : number ;</span><br><span class="line"></span><br><span class="line">function getTotal(one : number , two : number)&#123;</span><br><span class="line">	return one + two</span><br><span class="line">&#125;</span><br><span class="line">const total = getTotal(1,2);</span><br></pre></td></tr></table></figure>



<h5 id="类型推断-type-inference"><a href="#类型推断-type-inference" class="headerlink" title="类型推断 - type inference"></a>类型推断 - type inference</h5><h4 id="函数参数和返回类型的注解"><a href="#函数参数和返回类型的注解" class="headerlink" title="函数参数和返回类型的注解"></a>函数参数和返回类型的注解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getTotal(one : number , two : number)&#123;</span><br><span class="line">	return one + two +&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">const total = getTotal(1,2);  (会有错误提示) （定义的是number类型，返回的是string类型）</span><br><span class="line"></span><br><span class="line">解决方法：对返回做注解</span><br><span class="line">function getTotal(one : number , two : number): number&#123;</span><br><span class="line">	return one + two +&#x27;&#x27;  (这样写，编辑器就会有错误的提示)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">改正：</span><br><span class="line">function getTotal(one : number , two : number): number&#123;</span><br><span class="line">	return one + two </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="void："><a href="#void：" class="headerlink" title="void："></a>void：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sayHe1lo(): void&#123;</span><br><span class="line">	console.log(&#x27;Hello worid&#x27;)</span><br><span class="line">	return &quot;&quot;;(如果在函数中，任何地方有return就会报错，就会很直观的知道);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="never："><a href="#never：" class="headerlink" title="never："></a>never：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">抛出异常：</span><br><span class="line">function errorFuntion() : never&#123;</span><br><span class="line">	throw new Error()</span><br><span class="line">	console.log(&quot;Hello world&quot;)</span><br><span class="line">&#125;</span><br><span class="line">或者死循环：</span><br><span class="line">function forNever() : never&#123;</span><br><span class="line">	while(true)&#123;&#125;</span><br><span class="line">	console.log( &#x27;Hello world &#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function add(&#123;one ,two&#125; : &#123;one : number ,two : number&#125; )&#123;</span><br><span class="line">	return one + two</span><br><span class="line">&#125;</span><br><span class="line">const total = add(fone: 1,two:2&#125;); </span><br><span class="line"></span><br><span class="line">function getNumber(&#123;one&#125; : &#123;one : number&#125;)&#123;</span><br><span class="line">	return one</span><br><span class="line">&#125;</span><br><span class="line">const one = getNumber(&#123;one: 1&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="数组类型注解的方法"><a href="#数组类型注解的方法" class="headerlink" title="数组类型注解的方法"></a>数组类型注解的方法</h4><h5 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numberArr = [1,2,3]</span><br><span class="line">(鼠标放上去，能够看到推断出是number类型)</span><br></pre></td></tr></table></figure>

<h5 id="类型注释"><a href="#类型注释" class="headerlink" title="类型注释"></a>类型注释</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numberArr : number[] = [1,2,3];</span><br><span class="line">const stringArr : string[] = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">const undefinedArr : undefined[] = [undefined, undefined];</span><br><span class="line">const arr : (number | string)[] = [1, &#x27;string&#x27;, 2];</span><br></pre></td></tr></table></figure>

<h5 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejies :&#123;name : string, age:number&#125;[] =[</span><br><span class="line">	&#123;name: &#x27;刘英&#x27;, age: 18&#125;,</span><br><span class="line">	&#123;name : &#x27;谢大脚&quot;, age: 28&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h6 id="其他形式写法："><a href="#其他形式写法：" class="headerlink" title="其他形式写法："></a>其他形式写法：</h6><ol>
<li><h6 id="type-alias-类型别名"><a href="#type-alias-类型别名" class="headerlink" title="type alias 类型别名"></a>type alias 类型别名</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Lady = &#123;name: string,age: number&#125;</span><br><span class="line">const xiaojiejies : Lady[] [</span><br><span class="line">	&#123;name:&#x27;刘英&#x27;, age: 18&#125;,</span><br><span class="line">	&#123;name : &#x27;谢大脚&quot; , age:28&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="类"><a href="#类" class="headerlink" title="类"></a>类</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Madam &#123;</span><br><span class="line">	name: string ;</span><br><span class="line">	age : number;</span><br><span class="line">&#125;</span><br><span class="line">const xiaojiejies : Madam[] = [</span><br><span class="line">	&#123;name: &#x27;刘英&#x27;, age: 18&#125;,</span><br><span class="line">	&#123;name: &#x27;谢大脚&quot;, age: 28&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="元组的使用和类型约束"><a href="#元组的使用和类型约束" class="headerlink" title="元组的使用和类型约束"></a>元组的使用和类型约束</h4><h5 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// const xiaojiejie : (string | number)[] = [ &#x27;dajiao &#x27; , &#x27;teacher &#x27;, 28]</span><br></pre></td></tr></table></figure>

<h5 id="元组的写法"><a href="#元组的写法" class="headerlink" title="元组的写法"></a>元组的写法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejie : [string,string,number] = [ &#x27;dajiao&#x27; , &#x27;teacher&#x27;,28]</span><br></pre></td></tr></table></figure>

<h5 id="CSV（现在很少用）"><a href="#CSV（现在很少用）" class="headerlink" title="CSV（现在很少用）"></a>CSV（现在很少用）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejies : [string, string, number][] =[</span><br><span class="line">	[ &#x27;dajiao &#x27; , &#x27;teacher&quot; ,28],</span><br><span class="line">	[ &#x27;liuying&quot; , &#x27;teacher&#x27; ,18],</span><br><span class="line">	[ &quot; cuihua &#x27; , &#x27;teacher&quot; ,22]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="初识命名空间-Namespace"><a href="#初识命名空间-Namespace" class="headerlink" title="初识命名空间-Namespace"></a>初识命名空间-Namespace</h4><p>以前的课程都是通过<code>Node</code>来运行代码的，这节课为了有更好的演示效果，我们要在浏览器中运行代码。这就要求我们重新创建一个项目，直接在桌面上建立一个文件夹<code>TSWeb</code>。</p>
<blockquote>
<h4 id="搭建浏览器开发环境步骤"><a href="#搭建浏览器开发环境步骤" class="headerlink" title="搭建浏览器开发环境步骤"></a>搭建浏览器开发环境步骤</h4></blockquote>
<ol>
<li>建立好文件夹后，打开 VSCode，把文件夹拉到编辑器当中，然后打开终端，运行<code>npm init -y</code>,创建<code>package.json</code>文件。</li>
<li>生成文件后，我们接着在终端中运行<code>tsc -init</code>,生成<code>tsconfig.json</code>文件。</li>
<li>新建<code>src</code>和<code>build</code>文件夹，再建一个<code>index.html</code>文件。</li>
<li>在<code>src</code>目录下，新建一个<code>page.ts</code>文件，这就是我们要编写的<code>ts</code>文件了。</li>
<li>配置<code>tsconfig.json</code>文件，设置<code>outDir</code>和<code>rootDir</code>(在 15 行左右)，也就是设置需要编译的文件目录，和编译好的文件目录。</li>
<li>然后编写<code>index.html</code>，引入<code>&lt;script src=&quot;./build/page.js&quot;&gt;&lt;/script&gt;</code>,当让我们现在还没有<code>page.js</code>文件。</li>
<li>编写<code>page.ts</code>文件，加入一句输出<code>console.log(&#39;jspang.com&#39;)</code>,再在控制台输入<code>tsc</code>,就会生成<code>page.js</code>文件</li>
<li>再到浏览器中查看<code>index.html</code>文件，如果按<code>F12</code>可以看到<code>jspang.com</code>，说明我们的搭建正常了。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./build/page.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="没有命名空间时的问题"><a href="#没有命名空间时的问题" class="headerlink" title="没有命名空间时的问题"></a>没有命名空间时的问题</h4></blockquote>
<p>为了你更好的理解，先写一下这样代码，用类的形式在<code>index.html</code>中实现<code>header</code>,<code>content</code>和<code>Footer</code>部分，类似我们常说的模板。</p>
<p>在<code>page.ts</code>文件里，写出下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完后我们用<code>tsc</code>进行编译一次，然后修改<code>index.html</code>文件，在<code>&lt;body&gt;</code>标签里引入<code>&lt;script&gt;</code>标签，并实例化<code>Page</code>，代码如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Page</span>();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>这时候再到浏览器进行预览，就可以看到对应的页面被展现出来了。看起来没有什么问题，但是有经验的程序员就会发现，这样写全部都是全局变量（通过查看<code>./build/page.js</code>文件可以看出全部都是<code>var</code>声明的变量）。<strong>过多的全局变量会让我们代码变的不可维护。</strong></p>
<p>这时候你在浏览器的控制台(<code>Console</code>)中，分别输入<code>Header</code>、<code>Content</code>、<code>Footer</code>和<code>Page</code>都时可以拿到对应的变量的,说明他们全都是全局变量。</p>
<p>其实你理想的是，只要有<code>Page</code>这个全局变量就足够了，剩下的可以模块化封装起来，不暴露到全局。</p>
<blockquote>
<h4 id="命名空间的使用"><a href="#命名空间的使用" class="headerlink" title="命名空间的使用"></a>命名空间的使用</h4></blockquote>
<p><code>命名空间</code>这个语法，很类似编程中常说的模块化思想，比如<code>webpack</code>打包时，每个模块有自己的环境，不会污染其他模块,不会有全局变量产生。命名空间就跟这个很类似，注意这里是类似，而不是相同。</p>
<p>命名空间声明的关键词是<code>namespace</code> 比如声明一个<code>namespace Home</code>,需要暴露出去的类，可以使用<code>export</code>关键词，这样只有暴漏出去的类是全局的，其他的不会再生成全局污染了。修改后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TS 代码写完后，再到<code>index.html</code>文件中进行修改，用命名空间的形式进行调用，就可以正常了。 写完后，记得用<code>tsc</code>编译一下，当然你也可以使用<code>tsc -w</code>进行监视了，只要有改变就会进行重新编译。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Home</span>.<span class="title class_">Page</span>();</span><br></pre></td></tr></table></figure>

<p>现在再到浏览器中进行查看，可以看到现在就只有<code>Home.Page</code>是在控制台可以得到的，其他的<code>Home.Header</code>…这些都是得不到的，说明只有<code>Home.Page</code>是全局的，其他的都是模块化私有的。</p>
<p>这就是 TypeScript 给我们提供的类似模块化开发的语法，它的好处就是让全局变量减少了很多，实现了基本的封装，减少了全局变量的污染。</p>
<h4 id="深入命名空间-Namespace"><a href="#深入命名空间-Namespace" class="headerlink" title="深入命名空间-Namespace"></a>深入命名空间-Namespace</h4><blockquote>
<h4 id="用命名空间实现组件化"><a href="#用命名空间实现组件化" class="headerlink" title="用命名空间实现组件化"></a>用命名空间实现组件化</h4></blockquote>
<p>在<code>src</code>目录下新建一个文件<code>components.ts</code>，编写代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace <span class="title class_">Components</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是，我每个类(<code>class</code>)都使用了<code>export</code>导出，导出后就可以在<code>page.ts</code>中使用这些组件了。比如这样使用-代码如下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Header</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Content</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Components</span>.<span class="title class_">Footer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候你可以使用<code>tsc</code>进行重新编译，但在预览时，你会发现还是会报错，找不到<code>Components</code>,想解决这个问题，我们必须要在<code>index.html</code>里进行引入<code>components.js</code>文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./build/page.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./build/components.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<h4 id="多文件编译成一个文件"><a href="#多文件编译成一个文件" class="headerlink" title="多文件编译成一个文件"></a>多文件编译成一个文件</h4></blockquote>
<p>直接打开<code>tsconfig.json</code>文件，然后找到<code>outFile</code>配置项，这个就是用来生成一个文件的设置，但是如果设置了它，就不再支持<code>&quot;module&quot;:&quot;commonjs&quot;</code>设置了，我们需要把它改成<code>&quot;module&quot;:&quot;amd&quot;</code>,然后在去掉对应的<code>outFile</code>注释，设置成下面的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./build/page.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置好后，删除掉<code>build</code>下的<code>js</code>文件，然后用<code>tsc</code>进行再次编译。</p>
<p>然后删掉<code>index.html</code>文件中的<code>component.js</code>,在浏览器里还是可以正常运行的。</p>
<blockquote>
<h4 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace <span class="title class_">Components</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> namespace <span class="title class_">SubComponents</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//someting ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完后在控制台再次编辑<code>tsc</code>，然后你在浏览器中也是可以查到这个命名空间的<code>Components.SubComponents.Test</code>(需要刷新页面后才会显示)。</p>
<h4 id="TypeScript-如何使用-import-语法"><a href="#TypeScript-如何使用-import-语法" class="headerlink" title="TypeScript 如何使用 import 语法"></a>TypeScript 如何使用 import 语法</h4><blockquote>
<h4 id="修改-components-ts-文件"><a href="#修改-components-ts-文件" class="headerlink" title="修改 components.ts 文件"></a>修改 components.ts 文件</h4></blockquote>
<p>现在去掉<code>components.ts</code>里的<code>namespace</code>命名空间代码，写成 <code>ES6</code> 的 <code>export</code> 导出模式。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Header</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Header&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Content</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Content&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Footer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    elem.<span class="property">innerText</span> = <span class="string">&quot;This is Footer&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在三个类就都已经用<code>export</code>导出了，也就是说可以实现用<code>import</code>进行引入了。</p>
<blockquote>
<h4 id="修改-page-ts-文件"><a href="#修改-page-ts-文件" class="headerlink" title="修改 page.ts 文件"></a>修改 page.ts 文件</h4></blockquote>
<p>来到<code>page.ts</code>文件，去掉<code>namespace</code>命名空间对应的代码，然后使用 <code>import</code> 语法进行导入<code>Header</code>、<code>Content</code>和<code>Footer</code>,代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Content</span>, <span class="title class_">Footer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./components&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在看起来确实和工作中写的代码非常类似了。这时候可以使用<code>tsc</code>进行编译。然后可以看到编译好的代码都是<code>define</code>开头的(这是 amd 规范的代码，不能直接在浏览器中运行，可以在 Node 中直接运行)，这种代码在浏览器中是没办法被直接运行的，需要其他库(<code>require.js</code>)的支持。</p>
<blockquote>
<h4 id="引入-require-js"><a href="#引入-require-js" class="headerlink" title="引入 require.js"></a>引入 require.js</h4></blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这时候就可以解析<code>define</code>这样的语法了。然后把<code>page.ts</code>中加入<code>default</code>关键字，如果不加是没办法直接引用到的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span>, <span class="title class_">Content</span>, <span class="title class_">Footer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Header</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Footer</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候再用<code>tsc</code>进行编译一下，你会发现还是又问题。因为使用<code>export default</code>这种形式的语法，需要在<code>html</code>里用<code>require</code>来进行引入。</p>
<blockquote>
<h4 id="require-方式引入"><a href="#require-方式引入" class="headerlink" title="require 方式引入"></a>require 方式引入</h4></blockquote>
<p>因为你已经加入了<code>require.js</code>这个库，所以现在可以直接在代码中使用<code>require</code>了。具体代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">require</span>([<span class="string">&quot;page&quot;</span>], <span class="keyword">function</span> (<span class="params">page</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> page.<span class="title function_">default</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>当我们有了<code>webpack</code>和<code>Parcel</code>的时候就不会这么麻烦，这些都交给打包工具来处理就好了。</p>
<p><a href="https://jspang.com/detailed?id=63">【技术胖博客】</a></p>
<h6 id="Demo1-ts"><a href="#Demo1-ts" class="headerlink" title="Demo1.ts"></a>Demo1.ts</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jspang() </span><br><span class="line">&#123; </span><br><span class="line">    let web: string = &quot;Hello world&quot; </span><br><span class="line">    console.log (web)</span><br><span class="line">&#125;</span><br><span class="line">jspang()</span><br></pre></td></tr></table></figure>



<h5 id="初步运行"><a href="#初步运行" class="headerlink" title="初步运行"></a>初步运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node Demo.ts</span><br><span class="line"></span><br><span class="line">会出现报错：</span><br><span class="line">SyntaxError: Unexpected token &#x27;:&#x27;</span><br><span class="line">表示异常，不支持这个东西。</span><br></pre></td></tr></table></figure>

<p>输入以下语句来转ts为js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc Demo1.ts</span><br></pre></td></tr></table></figure>

<p>如果出现：<br> 无法将“tsc”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。</p>
<p><a href="https://www.cnblogs.com/vickylinj/p/12228773.html">参考</a>  则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">cnpm install typescript -g</span><br><span class="line"></span><br><span class="line">再次运行即可：</span><br><span class="line">tsc Demo1.ts</span><br><span class="line">node Demo1.js</span><br></pre></td></tr></table></figure>

<p>每次都这样的操作比较麻烦，可以全局安装ts-node</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g ts-node </span><br></pre></td></tr></table></figure>

<p>即可直接输入以下语句执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ts-node Demo1.ts</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode-笔记</title>
    <url>/2021/01/18/VSCode-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://lzw.me/a/vscode-visual-studio-code-shortcut.html">常用快捷键</a>    <a href="https://www.awesomes.cn/">大牛在用</a></p>
<h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shift + Alt + F</span><br></pre></td></tr></table></figure>

<p>代码缩进</p>
<p>选中代码段之后</p>
<p>1、向左</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shift + TAB </span><br></pre></td></tr></table></figure>

<p>2、向右：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TAB</span><br></pre></td></tr></table></figure>



<h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + K + T</span><br></pre></td></tr></table></figure>



<h4 id="VSCode搜索指定某个目录下查找文件"><a href="#VSCode搜索指定某个目录下查找文件" class="headerlink" title="VSCode搜索指定某个目录下查找文件"></a>VSCode搜索指定某个目录下查找文件</h4><ol>
<li>先点击选中这个要查找的目录。</li>
<li>右键点击后，点击里面的「Find in Folder」即 在文件夹中查找…..</li>
</ol>
<p><a href="https://jingyan.baidu.com/article/7e44095377c9d12fc1e2ef5b.html">将VSCode设置成中文语言环境</a></p>
<h5 id="快速在浏览器中打开"><a href="#快速在浏览器中打开" class="headerlink" title="快速在浏览器中打开"></a>快速在浏览器中打开</h5><ol>
<li>安装open in browser插件</li>
<li>重新启动VSCode</li>
<li>快捷键：Alt + B</li>
</ol>
<h5 id="使用sublime快捷键"><a href="#使用sublime快捷键" class="headerlink" title="使用sublime快捷键"></a>使用sublime快捷键</h5><p>安装插件：Sublime Text Keymap and Settings Importer</p>
<h5 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h5><p><a href="https://jingyan.baidu.com/article/6f2f55a14ba6e3b5b93e6cd6.html">https://jingyan.baidu.com/article/6f2f55a14ba6e3b5b93e6cd6.html</a></p>
<p><a href="https://jingyan.baidu.com/article/6dad5075383c3fa123e36ec3.html">https://jingyan.baidu.com/article/6dad5075383c3fa123e36ec3.html</a></p>
<h5 id="VSCode编辑器字体大小设置"><a href="#VSCode编辑器字体大小设置" class="headerlink" title="VSCode编辑器字体大小设置"></a>VSCode编辑器字体大小设置</h5><p>“settings”——“文本编辑器”——常用设置——Editor：Font Size（这里设置为20）</p>
<h4 id="VSCode如何用浏览器预览运行html文件"><a href="#VSCode如何用浏览器预览运行html文件" class="headerlink" title="VSCode如何用浏览器预览运行html文件"></a>VSCode如何用浏览器预览运行html文件</h4><p>在”扩展“中搜索”view in browser“——右键点击html文件，选择View In Browser</p>
<p><code>view in browser</code>已废弃， 换成”open in browser”</p>
<h4 id="VSCode-编写Vue项目安装Vetur插件实现-代码高亮"><a href="#VSCode-编写Vue项目安装Vetur插件实现-代码高亮" class="headerlink" title="VSCode 编写Vue项目安装Vetur插件实现 代码高亮"></a>VSCode 编写Vue项目安装Vetur插件实现 代码高亮</h4><h4 id="VSCode中配置Vue3-TS-的用户代码片段"><a href="#VSCode中配置Vue3-TS-的用户代码片段" class="headerlink" title="VSCode中配置Vue3 + TS 的用户代码片段"></a>VSCode中配置Vue3 + TS 的用户代码片段</h4><p>设置——配置用户代码片段——新建代码片段——代码片段文件名（输入该快捷键生成代码片段–例如：vue3）</p>
<p>输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;vue-template&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;vue3&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">		&quot;&lt;template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;script setup lang=&#x27;ts&#x27;&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/script&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;style lang=&#x27;less&#x27; scoped&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/style&gt;&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;my vue3 template&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><p>在新建的.vue文件中，输入’vue3‘，即可快速生成以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>open in browser：在默认浏览器打开</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite配置</title>
    <url>/2022/08/04/Vite%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>配置文件：<code>vite.config.ts</code></p>
<h3 id="1-配置打包公共路径-base"><a href="#1-配置打包公共路径-base" class="headerlink" title="1.配置打包公共路径-base"></a>1.配置打包公共路径-base</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base:&#x27;./&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置地址别名-alias"><a href="#2-配置地址别名-alias" class="headerlink" title="2.配置地址别名-alias"></a>2.配置地址别名-<a href="https://vitejs.cn/config/#resolve-alias">alias</a></h3><p>使用简短的别名去替代一个较长的路径</p>
<p><code>__dirname</code>：项目的绝对路径</p>
<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save path</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; resolve &#125; from &#x27;path&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      test: resolve(__dirname, &#x27;src/components/test/&#x27;),</span><br><span class="line">      icon: resolve(__dirname, &#x27;./src/assets/images/&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前：</span><br><span class="line">import ViteSet from &#x27;../../components/test/ViteSet.vue&#x27;;</span><br><span class="line">&lt;img src=&quot;../../assets/images/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line">        </span><br><span class="line">// 修改后：</span><br><span class="line">import ViteSet2 from &#x27;test/ViteSet.vue&#x27;;</span><br><span class="line">&lt;img src=&quot;icon/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ViteSet&gt;&lt;/ViteSet&gt;</span><br><span class="line">&lt;ViteSet2&gt;&lt;/ViteSet2&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="2-1图片的地址的别名-特殊处理"><a href="#2-1图片的地址的别名-特殊处理" class="headerlink" title="2.1图片的地址的别名-特殊处理"></a>2.1图片的地址的别名-特殊处理</h4><blockquote>
<p>图片使用<code>icon: resolve(__dirname, &#39;./src/assets/images/&#39;)</code>这种配置，打包上线后，页面可以正常显示图片，但本地测试是加载不出图片的。</p>
<p>所以不能直接写 <code>名称：resolve(...)</code>，要使用引号加<code>斜杠开头的别名</code></p>
</blockquote>
<h5 id="2-1-1配置"><a href="#2-1-1配置" class="headerlink" title="2.1.1配置"></a>2.1.1配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#x27;/icon&#x27;:&#x27;./src/assets/images/&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2使用"><a href="#2-1-2使用" class="headerlink" title="2.1.2使用"></a>2.1.2使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改前：</span><br><span class="line">&lt;img src=&quot;../../assets/images/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br><span class="line">// 修改后：</span><br><span class="line">&lt;img src=&quot;/icon/zhangyu.svg&quot; alt=&quot;章鱼小丸子&quot;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>这样本地环境和正式环境都能正常显示</strong></p>
</blockquote>
<p>参考：<a href="https://blog.csdn.net/liujucai/article/details/112280937">vite vue3.0 配置拦截，路由跳转</a></p>
<h3 id="3-生产环境去除console-log的配置"><a href="#3-生产环境去除console-log的配置" class="headerlink" title="3.生产环境去除console.log的配置"></a>3.生产环境去除console.log的配置</h3><p><a href="https://vitejs.cn/config/#build-terseroptions">build.terserOptions</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  build:&#123;</span><br><span class="line">    minify: &#x27;terser&#x27;, // 必须配置&#x27;terser&#x27;，不然terserOptions不生效，因为minify默认不是&#x27;terser&#x27;</span><br><span class="line">    terserOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">            //生产环境时移除console</span><br><span class="line">            drop_console: true,</span><br><span class="line">            drop_debugger: true,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-1报错处理"><a href="#3-1报错处理" class="headerlink" title="3.1报错处理"></a>3.1报错处理</h4><p>打包上线会出现报错：</p>
<p><code>[vite:terser] terser not found. Since Vite v3, terser has become an optional dependency. You need to install it.</code></p>
<p>解决：Vite V3需要安装<a href="https://www.npmjs.com/package/terser">terser依赖包</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i terser</span><br></pre></td></tr></table></figure>

<h3 id="4-mock数据的配置"><a href="#4-mock数据的配置" class="headerlink" title="4.mock数据的配置"></a>4.mock数据的配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-mock mockjs  -D</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/vbenjs/vite-plugin-mock">vite-plugin-mock</a></strong></p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#usage">使用</a></p>
<h4 id="4-1引入"><a href="#4-1引入" class="headerlink" title="4.1引入"></a>4.1引入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; viteMockServe &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    // default</span><br><span class="line">    mockPath: &#x27;mock&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h4 id="4-2使用"><a href="#4-2使用" class="headerlink" title="4.2使用"></a>4.2使用</h4><p>在根目录新建mock目录</p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#mock-file-example">示例</a></p>
<h5 id="4-2-1mock-index-ts："><a href="#4-2-1mock-index-ts：" class="headerlink" title="4.2.1mock/index.ts："></a>4.2.1mock/index.ts：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: &#x27;vben&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/post&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    timeout: 2000,</span><br><span class="line">    response: &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;vben&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/text&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    rawResponse: async (req, res) =&gt; &#123;</span><br><span class="line">      let reqbody = &#x27;&#x27;</span><br><span class="line">      await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        req.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class="line">          reqbody += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(&#x27;end&#x27;, () =&gt; resolve(undefined))</span><br><span class="line">      &#125;)</span><br><span class="line">      res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;)</span><br><span class="line">      res.statusCode = 200</span><br><span class="line">      res.end(`hello, $&#123;reqbody&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2引入axios"><a href="#4-2-2引入axios" class="headerlink" title="4.2.2引入axios"></a>4.2.2引入axios</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i axios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(&#x27;/api/get&#x27;)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h5 id="使用mock来模拟更多数据"><a href="#使用mock来模拟更多数据" class="headerlink" title="使用mock来模拟更多数据"></a>使用mock来模拟更多数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mockjs --save-dev</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// 定义数据类型</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">// 输出结果随机生成的数据（node index.js）</span><br><span class="line"> console.log(data);</span><br></pre></td></tr></table></figure>

<h5 id="将mock模拟的数据放到接口返回中"><a href="#将mock模拟的数据放到接口返回中" class="headerlink" title="将mock模拟的数据放到接口返回中"></a>将mock模拟的数据放到接口返回中</h5><p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line">var list = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: list</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h3 id="5-配置前端跨域代理"><a href="#5-配置前端跨域代理" class="headerlink" title="5.配置前端跨域代理"></a>5.配置前端跨域代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        &#x27;/ss&#x27;: &#123;</span><br><span class="line">            target: &#x27;https://saucenao.com/search.php?db=999&amp;output_type=2&amp;url=https://pica.zhimg.com/v2-178387c7e8e907910d715e890bfd7519_1440w.jpg?source=172ae18b&amp;api_key=33d4bee5c19583cd3756ee47f2ebef8edd5bef7e&#x27;,</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            rewrite: (path) =&gt; path.replace(/^\/ss/, &#x27;&#x27;),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&#x27;/ss&#x27;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="6-env环境变量的配置"><a href="#6-env环境变量的配置" class="headerlink" title="6.env环境变量的配置"></a>6.env环境变量的配置</h3><h4 id="6-1环境变量配置"><a href="#6-1环境变量配置" class="headerlink" title="6.1环境变量配置"></a>6.1环境变量配置</h4><p><code>.env.development</code>：</p>
<p>可配置多个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_BASE_API = /api</span><br><span class="line">VITE_BASE_API = /api2</span><br><span class="line">VITE_BASE_API = /api3</span><br></pre></td></tr></table></figure>

<p><code>.env.production</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VITE_BASE_API = https://www.manga2020.com/api/v3/comic/hydxjxrwgb/chapter/cb321fca-c608-11e8-879b-024352452ce0?timeout=10000</span><br></pre></td></tr></table></figure>

<h4 id="6-2修改请求链接"><a href="#6-2修改请求链接" class="headerlink" title="6.2修改请求链接"></a>6.2修改请求链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(import.env.VITE_BASE_API as string)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地环境使用mock数据： /api    正式环境使用正式的api链接</p>
<p>这样本地可以使用mock数据，正式使用正式的api数据。互不影响。  </p>
</blockquote>
<h3 id="7-CDN的配置"><a href="#7-CDN的配置" class="headerlink" title="7.CDN的配置"></a>7.CDN的配置</h3><p><code>备注：暂时配置不成功</code></p>
<p><strong><a href="https://github.com/MMF-FE/vite-plugin-cdn-import">vite-plugin-cdn-import</a></strong></p>
<p><a href="https://github.com/MMF-FE/vite-plugin-cdn-import#vueuse-demo">vue使用示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vite-plugin-cdn-import --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import importToCDN, &#123; autoComplete &#125; from &#x27;vite-plugin-cdn-import&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        vue(),</span><br><span class="line">        importToCDN(&#123;</span><br><span class="line">            modules: [</span><br><span class="line">                autoComplete(&#x27;vue&#x27;), // vue2 use autoComplete(&#x27;vue2&#x27;)</span><br><span class="line">                autoComplete(&#x27;@vueuse/shared&#x27;),</span><br><span class="line">                autoComplete(&#x27;@vueuse/core&#x27;)</span><br><span class="line">            ],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-代码压缩的配置-gzip"><a href="#8-代码压缩的配置-gzip" class="headerlink" title="8.代码压缩的配置-gzip"></a>8.代码压缩的配置-gzip</h3><p><strong><a href="https://github.com/vbenjs/vite-plugin-compression">vite-plugin-compression</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-compression -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import viteCompression from &#x27;vite-plugin-compression&#x27;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [viteCompression()],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="9-打包图片"><a href="#9-打包图片" class="headerlink" title="9.打包图片"></a>9.打包图片</h3><p><strong><a href="https://github.com/vbenjs/vite-plugin-imagemin">vite-plugin-imagemin</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vite-plugin-imagemin@0.4.6 -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import viteImagemin from &#x27;vite-plugin-imagemin&#x27;</span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      viteImagemin(&#123;</span><br><span class="line">        gifsicle: &#123;</span><br><span class="line">          optimizationLevel: 7,</span><br><span class="line">          interlaced: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        optipng: &#123;</span><br><span class="line">          optimizationLevel: 7,</span><br><span class="line">        &#125;,</span><br><span class="line">        mozjpeg: &#123;</span><br><span class="line">          quality: 20,</span><br><span class="line">        &#125;,</span><br><span class="line">        pngquant: &#123;</span><br><span class="line">          quality: [0.8, 0.9],</span><br><span class="line">          speed: 4,</span><br><span class="line">        &#125;,</span><br><span class="line">        svgo: &#123;</span><br><span class="line">          plugins: [</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;removeViewBox&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              name: &#x27;removeEmptyAttrs&#x27;,</span><br><span class="line">              active: false,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码，本地会报错，需重启一下</p>
<p>参考：<a href="https://www.icode9.com/content-4-1151614.html">搭建vite2.0+vue3.0+ts+多页面打包+多环境+gzip+图片压缩框架</a></p>
<p><a href="https://www.pudn.com/news/627cb910ebb030486dd6b752.html">Vite图片压缩(vite-plugin-imagemin) imagemin error: XXXX解决办法</a></p>
<h3 id="10-element-plus按需引入"><a href="#10-element-plus按需引入" class="headerlink" title="10.element plus按需引入"></a>10.<a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">element plus按需引入</a></h3><p><a href="https://www.jianshu.com/p/5f70056a03b6">做个开源博客学习Vite2 + Vue3 （二）设置别名、代理和ESLint</a></p>
]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js + Element-UI导航写法</title>
    <url>/2020/03/19/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<h4 id="方法一（基本的）："><a href="#方法一（基本的）：" class="headerlink" title="方法一（基本的）："></a>方法一（基本的）：</h4><blockquote>
<p>elementUi导航通常会和vue-router一起使用，所以与官网的示例的写法不太一样。具体写法如下:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">   &lt;el-menu-item v-for=&quot;item in items&quot; :index=&quot;item.src&quot;&gt;&#123;&#123;item.name&#125;&#125;            </span><br><span class="line">   &lt;/el-menu-item&gt;</span><br><span class="line"> &lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>
<p><strong>data里则是正常的数据即可：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        items:[</span><br><span class="line">          &#123;src:&#x27;/gameinfo/index&#x27;,name:&#x27;基本信息&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameversion/index&#x27;,name:&#x27;版本管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplatform/index&#x27;,name:&#x27;渠道管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameproduct/index&#x27;,name:&#x27;充值产品&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplugin/index&#x27;,name:&#x27;插件管理&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>效果如图所示：</strong></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav1.png" alt="路由"></p>
<p>【参考】： <a href="https://blog.csdn.net/weixin_42488404/article/details/83414761">VUE elementUi导航写法</a></p>
<h4 id="方法二-加上图标的-："><a href="#方法二-加上图标的-：" class="headerlink" title="方法二(加上图标的)："></a>方法二(加上图标的)：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;(item, i) in items&quot; :key=&quot;i&quot; :index=&quot;item.path&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;          </span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>
<p><strong>data里面</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">items:[</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;基本信息&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-info&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameversion/index&#x27;,</span><br><span class="line">        title:&#x27;版本管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-version&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplatform/index&#x27;,</span><br><span class="line">        title:&#x27;渠道管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-channel&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameproduct/index&#x27;,</span><br><span class="line">        title:&#x27;充值产品&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-recharge&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplugin/index&#x27;,</span><br><span class="line">        title:&#x27;插件管理&#x27;,</span><br><span class="line">        icon:&#x27;el-icon-cpu&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/package/index&#x27;,</span><br><span class="line">        title:&#x27;打包管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-packageKit&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/order/index&#x27;,</span><br><span class="line">        title:&#x27;订单查询&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-orderQuery&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;切换至ios&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-android&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>效果如图所示：</strong><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav2.png" alt="导航栏跳转路由"></p>
<p>【参考】： <a href="https://www.jianshu.com/p/e24c37fb9e64">Vue框架Element UI教程-导航栏跳转路由（五）</a></p>
<h4 id="方法三（当前目录下的多个子页面选中时的高亮问题）："><a href="#方法三（当前目录下的多个子页面选中时的高亮问题）：" class="headerlink" title="方法三（当前目录下的多个子页面选中时的高亮问题）："></a>方法三（当前目录下的多个子页面选中时的高亮问题）：</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav3.png" alt="当前目录下的多个子页面选中时的高亮问题"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue-js-Element-UI%E5%AF%BC%E8%88%AA%E5%86%99%E6%B3%95/nav4.png" alt="当前目录下的多个子页面选中时的高亮问题"></p>
<p><strong>router/index.js文件的路由配置（特别关注activeMenu、apiActiveMenu的配置）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/gameinfo/edit&#x27;,</span><br><span class="line">  name: &#x27;GameEdit&#x27;,</span><br><span class="line">  component: GameEdit,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: &#x27;修改信息&#x27;,</span><br><span class="line">    activeMenu: &#x27;/gameinfo/index&#x27;, // 主菜单 的 接口文档 高亮</span><br><span class="line">    apiActiveMenu: &#x27;/gameinfo/edit&#x27; // 接口文档的子菜单高亮</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>关键代码（在导航栏组件内写）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    activeMenu() &#123;</span><br><span class="line">      const route = this.$route</span><br><span class="line">      const &#123; meta, path &#125; = route</span><br><span class="line">      // if set path, the sidebar will highlight the path you set</span><br><span class="line">      if (meta.apiActiveMenu) &#123; // 注意这里很重要</span><br><span class="line">        return meta.activeMenu</span><br><span class="line">      &#125;</span><br><span class="line">      return path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>【参考】： <a href="https://blog.csdn.net/m0_38134431/article/details/94755527">elementui中NavMenu 导航菜单高亮问题——解决多种情况</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Element-ui</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Elemennt</title>
    <url>/2021/01/19/Vue-Elemennt/</url>
    <content><![CDATA[<h4 id="vue是否安装成功"><a href="#vue是否安装成功" class="headerlink" title="vue是否安装成功"></a>vue是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue</span><br></pre></td></tr></table></figure>

<p>如果显示以下内容，说明安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: vue &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --help                                 output usage information</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2-基础知识</title>
    <url>/2021/02/20/Vue2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h4 id="Vue-js-中文文档"><a href="#Vue-js-中文文档" class="headerlink" title="Vue.js-中文文档"></a><a href="https://cn.vuejs.org/">Vue.js-中文文档</a></h4><h4 id="找相关资源"><a href="#找相关资源" class="headerlink" title="找相关资源"></a>找相关资源</h4><p>vue.js官网的资源列表中的<a href="https://github.com/vuejs/awesome-vue">awesome -vue</a>里面</p>
<p><a href="https://ke.qq.com/course/180464">腾讯课堂vue.js学习视频</a></p>
<p>Vue.js是一套构建用户界面(view)的MVWM框架。Vue.js 的核心库只关注视图层，并且非<br>常容易学习，非常容易与其他库或已有的项目整合。</p>
<h4 id="Vue-js的目的"><a href="#Vue-js的目的" class="headerlink" title="Vue.js的目的"></a>Vue.js的目的</h4><p>Vue.js的产生核心是为了解决如下三个问题：</p>
<ol>
<li>解决数据绑定的问题;</li>
<li>Vue.js 框架生产的主要目的是为了开发大兴单页面应用(SPA: Single Page Application)<br>Angularjs中对PC端支持的比较良好，但是对移动端支持就一般。而Vue.js主要支<br>持移动端，也支持PC端。</li>
<li>它还支持组件化。也就是可以将页面封装成若干个组件，采用积木式编程，这样是<br>页面的复用度达到最高(支持组件化)。</li>
</ol>
<h4 id="Vue-js特性"><a href="#Vue-js特性" class="headerlink" title="Vue.js特性"></a>Vue.js特性</h4><ol>
<li><p>MVVM模式<br> M: model业务模型， 用处:处理数据，提供数据<br> V: view用户界面、用户视图</p>
<pre><code>   业务模型model中的数据发生改变的时候，用户视图view也随之变化。用户视图
</code></pre>
<p>view改变的时候，业务模型model中的数据也可以发生改变。</p>
</li>
</ol>
<ol start="2">
<li>组件化</li>
<li>指令系统</li>
<li>Vue.js 2.0开始支持虚拟DOM (Vue.js 1.0是操作的真是DOM，而不是虚拟DOM)<br>虚拟DOM可以提升页面的刷新速度。</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>第一步，引入vue.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>第二步，Vue.js提供了一个Vue，我们需要创建一个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">	el:&quot;#demo&quot;,		// 声明Vue.js管理的边界</span><br><span class="line">	data:&#123;&#125;,	// data核心作用是存放显示在页面中的数据，需要是一个对象</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第三步，在用户界面view中，通过<code>&#123;&#123;&#125;&#125;`形式将data中的数据显示在页面中。
				在用户界面中，`&#123;&#123;&#125;&#125;</code>代码中绑定的data的key,而在页面中显示的是该key的value。</p>
<h4 id="vue特点"><a href="#vue特点" class="headerlink" title="vue特点"></a>vue特点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个Vue实例必须与一个页面元素绑定</span><br><span class="line"></span><br><span class="line">*.vue是Vue.js特有的文件格式，表示的就是一个Vue组件，被称为单页式组件</span><br><span class="line"></span><br><span class="line">Vue2具有很高的兼容性，我们也可以用&quot;.js&quot;文件来单纯地定义组件的逻辑，</span><br><span class="line">甚至可以使用React 的JSX格式的组件（需要babel-plugin-transform-vue-jsx支持）</span><br><span class="line"></span><br><span class="line">注： 从Vue2开始，组件模板必须且只能有一个顶层元素，如果在组件模板内设置多个顶层元素将会引发编译异常。</span><br></pre></td></tr></table></figure>

<ul>
<li>数据驱动</li>
<li>组件化</li>
<li>轻量</li>
<li>简洁</li>
<li>高效</li>
</ul>
<h4 id="单页组件由一下三部分组成："><a href="#单页组件由一下三部分组成：" class="headerlink" title="单页组件由一下三部分组成："></a>单页组件由一下三部分组成：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt; ——视图模板</span><br><span class="line">&lt;style&gt;&lt;/style&gt; ——组件样式表</span><br><span class="line">&lt;script&gt;&lt;/script&gt; ——组件定义</span><br></pre></td></tr></table></figure>

<h4 id="data使用函数返回是为了可以具有更高的灵活性"><a href="#data使用函数返回是为了可以具有更高的灵活性" class="headerlink" title="data使用函数返回是为了可以具有更高的灵活性"></a>data使用函数返回是为了可以具有更高的灵活性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  data() &#123; </span><br><span class="line">    return &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用less（直接使用CSS语法来编写样式表，代码量大）"><a href="#使用less（直接使用CSS语法来编写样式表，代码量大）" class="headerlink" title="使用less（直接使用CSS语法来编写样式表，代码量大）"></a>使用less（直接使用CSS语法来编写样式表，代码量大）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i less style-loader css-loader less-loader -D</span><br><span class="line"></span><br><span class="line">在/assets/中添加一个todos.less文件，并在App.vue的组件定义内引入less样式表</span><br><span class="line"></span><br><span class="line">import &#x27;./assets/todo.less&#x27;</span><br><span class="line"></span><br><span class="line">注：通过import将样式文件导入是一种全局性的做法，也就是说，在每一个页面内的</span><br><span class="line">&lt;head&gt;&lt;/head&gt;中都会有一个样式表，这样做的缺点是很容易导致样式冲突。如果希</span><br><span class="line">望样式表仅应用于当前组件，可以使用&lt;style scoped&gt;&lt;/style&gt;，然后用css的</span><br><span class="line">@import导入样式表：</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    @import &#x27;./assets/todos.less&#x27;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="注：如果在元素属性中不加上”-”-Vue认为是向这个属性赋上字符串值而不是Vue组件上定义的属性引用！"><a href="#注：如果在元素属性中不加上”-”-Vue认为是向这个属性赋上字符串值而不是Vue组件上定义的属性引用！" class="headerlink" title="注：如果在元素属性中不加上”:”,Vue认为是向这个属性赋上字符串值而不是Vue组件上定义的属性引用！"></a>注：如果在元素属性中不加上”:”,Vue认为是向这个属性赋上字符串值而不是Vue组件上定义的属性引用！</h4><p>注：无论是绑定的是样式类还是样式属性，:class和:style表达式内一定是一个JSON对象。<br>如： :class=”{‘btn’: true}”     :style=”{‘color’: ‘red’}”<br>:class的JSON对象的值一定是布尔型的，true表示加上样式，false表示移除样式类。<br>:style的JSON对象则像是一个样式配置项，key声明属性名，value则是样式属性的具体值。</p>
<h4 id="时间格式化专用的包——moment-js"><a href="#时间格式化专用的包——moment-js" class="headerlink" title="时间格式化专用的包——moment.js"></a>时间格式化专用的包——moment.js</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i moment -S</span><br><span class="line"></span><br><span class="line">引入moment,并设定moment的区域为中国</span><br><span class="line">import moment from &#x27;moment&#x27;</span><br><span class="line">import &#x27;moment/locale/zh-cn&#x27;</span><br><span class="line">moment.locale(&#x27;zh-cn&#x27;)</span><br><span class="line"></span><br><span class="line">加入date的过滤器</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    //省略.....</span><br><span class="line">    filters: &#123;</span><br><span class="line">        date(val) &#123;</span><br><span class="line">            return moment(val).calendar()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在模板上应用过滤器</span><br><span class="line">&lt;time&gt; &#123;&#123; todo.created | date&#125;&#125;&lt;/time&gt;</span><br><span class="line"></span><br><span class="line">注：在所有的过滤器中是没有this引用的，过滤器内的this是一个undefined的值，所以要在过滤器内尝试引用组件实例内的变量或方法，否则会引发空值引用的异常。</span><br></pre></td></tr></table></figure>

<p>参考《vue2实践揭秘》</p>
<h4 id="邂逅-Vue-js"><a href="#邂逅-Vue-js" class="headerlink" title="邂逅 Vue.js"></a>邂逅 Vue.js</h4><h5 id="为什么学Vuejs？"><a href="#为什么学Vuejs？" class="headerlink" title="为什么学Vuejs？"></a>为什么学Vuejs？</h5><p>项目需求、公司要求</p>
<h5 id="简单认识一下Vuejs"><a href="#简单认识一下Vuejs" class="headerlink" title="简单认识一下Vuejs"></a>简单认识一下Vuejs</h5><ul>
<li><p>渐进式框架        </p>
</li>
<li><p>vuejs全家桶：Core + Vue + router + Vuex            </p>
</li>
<li><p>特点和常见高级功能</p>
<ul>
<li><p>解耦视图和数据</p>
</li>
<li><p>可复用的组件</p>
</li>
<li><p>前端路由技术</p>
</li>
<li><p>状态管理</p>
</li>
<li><p>虚拟DOM</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>学习Vuejs的前提<pre><code>- 从零学习Vue开发，不需要angular，react基础，甚至jQuery经验
</code></pre>
<ul>
<li>具备一定的HTML，CSS，Javascript基础</li>
</ul>
</li>
</ul>
<h4 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h4><p>一、直接CDN引入</p>
<p>1、开发环境版本，包含了有帮助的命令行警告</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2、生产环境版本，优化了尺寸和速度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.0&quot;&gt;&lt;/script&gt;	</span><br></pre></td></tr></table></figure>

<p>二、下载和引入</p>
<p>1、开发环境</p>
<p><a href="https://cn.vuejs.org/js/vue.js">https://cn.vuejs.org/js/vue.js</a><br>2、生产环境<br><a href="https://cn.vuejs.org/js/vue.min.js">https://cn.vuejs.org/js/vue.min.js</a></p>
<p>三、NPM安装<br>最新稳定版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure>

<h4 id="Hello-Vuejs"><a href="#Hello-Vuejs" class="headerlink" title="Hello Vuejs"></a>Hello Vuejs</h4><p>响应式（当数据发生改变的时候，界面内容发生改变）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = new Vue(&#123;</span><br><span class="line">     el: &#x27;#app&#x27;,</span><br><span class="line">     data: &#123;</span><br><span class="line">     &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>案例：计数器<br>v-on:click简写： @click</p>
<h4 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h4><h4 id="创建Vue实例传入的options"><a href="#创建Vue实例传入的options" class="headerlink" title="创建Vue实例传入的options"></a>创建Vue实例传入的options</h4><ul>
<li>el</li>
<li>data（组件当中data必须是一个函数）</li>
<li>methods</li>
<li>函数与方法的区别</li>
</ul>
<h4 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h4><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">缩进2个空格更合适也可以缩进4个空格</span><br><span class="line"></span><br><span class="line">mustache语法中，不仅仅可以直接写变量，也可以写简单的表达式</span><br><span class="line">1：&#123;&#123;firstName + &#x27; &#x27; + lastName&#125;&#125;</span><br><span class="line">2：&#123;&#123;firstName&#125;&#125;  &#123;&#123;lastName&#125;&#125;</span><br><span class="line"></span><br><span class="line">v-once（不想响应式显示内容时）</span><br><span class="line"></span><br><span class="line">v-html（显示标签内容）	</span><br><span class="line"></span><br><span class="line">v-text</span><br><span class="line"></span><br><span class="line">v-pre（原封不动显示该内容）</span><br><span class="line"></span><br><span class="line">v-cloak（数据没有加载出来时，不显示&#123;&#123;&#125;&#125;）</span><br><span class="line"></span><br><span class="line">v-bind</span><br><span class="line"></span><br><span class="line">- 动态绑定属性</span><br><span class="line">- v-bind:src  简写： ：src</span><br><span class="line">- 动态绑定class类名</span><br><span class="line">  :class=&quot;&#123;active: isActive, line: isLine&#125;&quot;</span><br><span class="line">- 动态绑定style</span><br></pre></td></tr></table></figure>

<h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><h4 id="Object侦测"><a href="#Object侦测" class="headerlink" title="Object侦测"></a>Object侦测</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Object%E4%BE%A6%E6%B5%8B.png" alt="Object侦测"></p>
<h4 id="在控制台查看data数据"><a href="#在控制台查看data数据" class="headerlink" title="在控制台查看data数据"></a>在控制台查看data数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.name</span><br></pre></td></tr></table></figure>

<p>app这个变量会代理vue中data数据。所以我们访问data中数据的时候，直接用app.name就可以了</p>
<p>这样，如果我们要实现前后台交互，只要将从后台得到的数据，放在data中，页面就会自动绑定，这样就实现了从model-&gt;view的数据流向。</p>
<h4 id="防止闪烁"><a href="#防止闪烁" class="headerlink" title="防止闪烁"></a>防止闪烁</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	[v-cloak]&#123;</span><br><span class="line">		display:none;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">	&lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;   // 这种写法，网络不好的时候，不会看到花括号，防止闪烁</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&#123;&#123;a | toDou&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	Vue.filter(&#x27;toDou&#x27;, function(input)&#123;</span><br><span class="line">		return input &lt; 10 ? &#x27;0&#x27; + input : input;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&#123;&#123;a | toDou 1 2&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	Vue.filter(&#x27;toDou&#x27;, function(input,a,b)&#123;</span><br><span class="line">		alert(a + &#x27;,&#x27; + b);</span><br><span class="line">		return input &lt; 10 ? &#x27;0&#x27; + input : input;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&#123;&#123;a | date&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	Vue.filter(&#x27;date&#x27;, function(input)&#123;</span><br><span class="line">		var oDate = new Date(input);</span><br><span class="line">		// 时间戳转时分秒</span><br><span class="line">		return oDate.getFullYear() + &#x27;-&#x27; + (oDate.getMonth() + 1) + &#x27;-&#x27; + oDate.getDate() + &#x27; &#x27; + oDate.getHours() + &#x27;:&#x27; + oDate.getMinutes() + &#x27;:&#x27; + oDate.getSeconds();</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">	&lt;span v-red&gt;</span><br><span class="line">		红色字体</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	Vue.directive(&#x27;red&#x27;, function()&#123;</span><br><span class="line">		this.el.style.background = &#x27;red&#x27;;</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	window.onload = function() &#123;</span><br><span class="line">		var vm = new Vue(&#123;</span><br><span class="line">			el:&#x27;#box&#x27;,</span><br><span class="line">			data:&#123;</span><br><span class="line">				msg:&#x27;welcome&#x27;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="字符串翻转（倒序）-逆转消息"><a href="#字符串翻转（倒序）-逆转消息" class="headerlink" title="字符串翻转（倒序）-逆转消息"></a>字符串翻转（倒序）-逆转消息</h4><h5 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a>join() 方法</h5><p>用于把数组中的所有元素放入一个字符串。</p>
<p>元素是通过指定的分隔符进行分隔的</p>
<h5 id="split-方法"><a href="#split-方法" class="headerlink" title="split() 方法"></a>split() 方法</h5><p>用于把一个字符串分割成字符串数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app-5&quot;&gt;</span><br><span class="line">	&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">	&lt;button @click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var app5 = new Vue(&#123;</span><br><span class="line">	el:&quot;#app-5&quot;,</span><br><span class="line">	data:&#123;</span><br><span class="line">		message:&#x27;Hello Vue.js&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	methods:&#123;</span><br><span class="line">		reverseMessage:function()&#123;</span><br><span class="line">			this.message = this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="线上生产环境"><a href="#线上生产环境" class="headerlink" title="线上生产环境"></a>线上生产环境</h4><h5 id="代码开发及测试环节"><a href="#代码开发及测试环节" class="headerlink" title="代码开发及测试环节"></a>代码开发及测试环节</h5><ol>
<li>UI标注</li>
<li>真实数据演示</li>
</ol>
<h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><ol>
<li>架构设计</li>
<li>组件抽象</li>
<li>模块拆分</li>
<li>代码风格统一</li>
<li>JS变量命名规范</li>
<li>CSS代码规范</li>
</ol>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>《Vue2实践揭秘》</category>
      </categories>
      <tags>
        <tag>《Vue2实践揭秘》</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0-笔记</title>
    <url>/2022/06/08/Vue3-0-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Vue3-x–系列学习"><a href="#Vue3-x–系列学习" class="headerlink" title="Vue3.x–系列学习"></a><a href="https://www.kancloud.cn/cyyspring/vue3/2696499">Vue3.x–系列学习</a></h4><h4 id="vue3-ts-2-：TypeScript-语法汇总"><a href="#vue3-ts-2-：TypeScript-语法汇总" class="headerlink" title="vue3+ts(2)：TypeScript 语法汇总"></a><a href="https://zhuanlan.zhihu.com/p/360553463">vue3+ts(2)：TypeScript 语法汇总</a></h4><ul>
<li>vue3+ts项目系列第1篇**<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s/MpmoEbJPTWKCSHdtpd1jCw">《vue3项目从0到1搭建》</a>**</li>
<li>vue3+ts项目系列第2篇**<a href="https://link.zhihu.com/?target=https://lianpf.github.io/posts/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/03.ts%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">《TypeScript 语法汇总》</a>**</li>
<li>vue3+ts项目系列第3篇**<a href="https://link.zhihu.com/?target=https://lianpf.github.io/posts/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/07.vue3%E7%BB%84%E5%90%88%E5%BC%8Fapi%E5%8F%8A%E9%87%8D%E8%A6%81%E5%B1%9E%E6%80%A7%E5%8F%98%E6%9B%B4/">《vue3组合式api及重要属性变更》</a>**</li>
</ul>
<h4 id="vite-vue3-ts-富文本编辑器"><a href="#vite-vue3-ts-富文本编辑器" class="headerlink" title="vite + vue3 + ts 富文本编辑器"></a>vite + vue3 + ts 富文本编辑器</h4><p><a href="https://www.lanmper.cn/vue/t9834.html">vite + vue3 + ts 安装 tinymce 富文本编辑器</a></p>
<p><a href="https://github.com/tinymce/tinymce">tinymce</a></p>
<p><a href="https://www.tiny.cloud/">tiny官网</a></p>
<p><strong><a href="https://github.com/tinymce/tinymce-vue">tinymce-vue</a></strong></p>
<p><a href="https://www.tiny.cloud/docs/quick-start/">文档</a></p>
<p><a href="http://tinymce.ax-z.cn/">tiny中文文档</a></p>
<p><a href="http://tinymce.ax-z.cn/integrations/integrate-index.php">在vue中的使用</a></p>
<p><a href="https://www.tiny.cloud/docs/integrations/vue/">Vue中的使用-官网</a></p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><p><a href="https://www.tiny.cloud/docs/tinymce/6/vue-pm/">Vue3项目的安装</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save tinymce &quot;@tinymce/tinymce-vue@^4&quot;</span><br></pre></td></tr></table></figure>

<p><code>注：此应用包共有两个目录文件：*tinymce*和*@tinymce*。以后若需要卸载的话，可以直接删除这两个目录文件</code></p>
<h4 id="2-安装汉化语言包"><a href="#2-安装汉化语言包" class="headerlink" title="2.安装汉化语言包"></a>2.安装汉化语言包</h4><p><a href="https://www.tiny.cloud/get-tiny/language-packages/">语言包下载列表</a>，选择<em>Chinese Simplified</em>，解压得到<em>zh-Hans.js</em>文件。</p>
<p>然后，在<code>/node_modules/tinymce</code>下，新建设目录<em>langs</em>，把<em>zh-Hans.js</em>复制过去。注意：langs 目录必须与 themes，处于同等目录下，否则不起作用。</p>
<p><a href="https://blog.csdn.net/m0_46850900/article/details/112500444?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165969109816782395347116%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165969109816782395347116&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112500444-null-null.142%5Ev39%5Epc_rank_v37,185%5Ev2%5Econtrol&utm_term=vue%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8&spm=1018.2226.3001.4187">vue富文本编辑器</a></p>
<p><a href="https://blog.csdn.net/weixin_48201324/article/details/122632208?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165969109816782395347116%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165969109816782395347116&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-4-122632208-null-null.142%5Ev39%5Epc_rank_v37,185%5Ev2%5Econtrol&utm_term=vue%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8&spm=1018.2226.3001.4187">最好用的 7 款 Vue 3 富文本编辑器</a></p>
<p><a href="https://blog.csdn.net/w1418899532/article/details/100867223?ops_request_misc=&request_id=&biz_id=102&utm_term=vue%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-100867223.142%5Ev39%5Epc_rank_v37,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">vue实现富文本编辑器(附图)-vue-quill-editor</a></p>
<p><a href="https://www.cnblogs.com/huihuihero/p/13877589.html">在vuecli3.0+中使用tinymce及实现多图上传，文件上传，公式编辑等功能</a></p>
<h4 id="vue3-vite的项目如何将打包后的绝对路径改为相对路径"><a href="#vue3-vite的项目如何将打包后的绝对路径改为相对路径" class="headerlink" title="vue3+vite的项目如何将打包后的绝对路径改为相对路径"></a><a href="https://blog.csdn.net/zy21131437/article/details/125861170">vue3+vite的项目如何将打包后的绝对路径改为相对路径</a></h4><p>在vue3+vite的项目中，配置文件名为 <strong><code>vite.config.js</code>**，如果没有就在<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>下新建一个，文件名固定为：</strong><code>vite.config.js</code>**，然后在里面加上base属性，设置值为 <code>&quot;./&quot;</code>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base: &#x27;./&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果不是用Vite的，[vue cli3.x打包后如何修改生成的静态资源的目录和路径](</p>
<h4 id="仅限-TypeScript-的功能"><a href="#仅限-TypeScript-的功能" class="headerlink" title="仅限 TypeScript 的功能"></a>仅限 TypeScript 的功能</h4><p><a href="https://preview.pro.ant.design/dashboard/analysis">Ant Design Pro</a></p>
<h4 id="仅限类型的-props-emit-声明"><a href="#仅限类型的-props-emit-声明" class="headerlink" title="#仅限类型的 props/emit 声明"></a><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E4%BB%85%E9%99%90%E7%B1%BB%E5%9E%8B%E7%9A%84-props-emit-%E5%A3%B0%E6%98%8E">#</a>仅限类型的 props/emit 声明</h4><p><a href="https://blog.csdn.net/qq_43612538/article/details/117753657">关于vue3.x中的emits的用法</a></p>
<p><a href="https://blog.csdn.net/lijiahui_/article/details/123944591">【vue3 之 emits &amp; $emit() 讲解 】监听子组件事件、emit事件验证、options写法、composition setup写法</a></p>
<p><a href="https://blog.csdn.net/snowball_li/article/details/123298575">vue：匿名slot、具名slot、作用域slot（技术栈Vue3 + TS）</a></p>
<p><a href="https://www.cnblogs.com/jing-zhe/p/14171863.html">博客参考</a></p>
<p><strong>diff方法优化：<a href="http://vue-next-template-explorer.netlify.app/">http://vue-next-template-explorer.netlify.app/</a></strong></p>
<p><a href="https://v3.cn.vuejs.org/api/composition-api.html#setup">组合式API</a></p>
<p><a href="https://blog.csdn.net/weixin_51754955/article/details/119062659">vscode自定义代码片段</a></p>
<p><a href="https://blog.csdn.net/weixin_46357198/article/details/121308557">vscode 中，vue导入组件路径提示</a></p>
<p><a href="https://blog.csdn.net/qq_61233877/article/details/125092310">带你熟练vue3的setup语法糖＜script setup＞</a></p>
<p><a href="https://blog.csdn.net/weixin_42776027/article/details/121007438">vue3的script setup语法糖中使用toRefs</a></p>
<p><a href="https://wenku.baidu.com/view/dd64aaffa68da0116c175f0e7cd184254b351b21.html">vue3的script setup语法糖中使用toRefs</a></p>
<p><a href="http://www.zzvips.com/article/212964.html">Vue3 学习笔记—Script Setup 语法糖用了才知道有多爽</a></p>
<p><a href="https://www.cnblogs.com/MrSlow/p/15777696.html">Vue3新的script setup语法糖</a></p>
<h4 id="安装Vue-Language-Features-Volar-插件"><a href="#安装Vue-Language-Features-Volar-插件" class="headerlink" title="安装Vue Language Features (Volar)插件"></a>安装Vue Language Features (Volar)插件</h4><p><a href="https://blog.csdn.net/weixin_43880397/article/details/121464597">vue3 学习笔记 (五)——vue3 的 setup 如何实现响应式功能？</a></p>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a><a href="https://v3.cn.vuejs.org/guide/data-methods.html#%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81">防抖和节流</a></h3><p>Vue 没有内置支持防抖和节流，但可以使用 <a href="https://lodash.com/">Lodash</a> 等库来实现</p>
<h4 id="setup语法糖处理异步-响应式数组数据"><a href="#setup语法糖处理异步-响应式数组数据" class="headerlink" title="setup语法糖处理异步-响应式数组数据"></a>setup语法糖处理异步-响应式数组数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let data = reactive([]);</span><br><span class="line"></span><br><span class="line">api.get(&#x27;/apps/getapps&#x27;).then(res =&gt; &#123;</span><br><span class="line">    if(res.code === 1) &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">        data.push(...res.data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Vue3-数据响应式"><a href="#Vue3-数据响应式" class="headerlink" title="Vue3 数据响应式"></a><a href="https://blog.csdn.net/hx_1551/article/details/124623872">Vue3 数据响应式</a></h4><p>在vue3中一般返回的数据是不响应的，如果需要响应式需要在定义时声明<br>方法1：reactive（）：<br>    定义：reactive（）是一个函数，可以用来定义复杂数据类型完成响应式<br>    案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;userInfo.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">//4，结果打印Cat</span><br><span class="line">&lt;button @click=&quot;userNameUpdate&quot;&gt;&lt;button&gt;</span><br><span class="line">&lt;script lang=&#x27;setup&#x27;&gt;</span><br><span class="line">//1，引用reactive</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">//2，定义响应式对象</span><br><span class="line">const userInfo = reactive(&#123;</span><br><span class="line">    name:&#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">//3，点击改变响应式对象中name的值</span><br><span class="line">const userNameUpdate = ()=&gt;&#123;</span><br><span class="line">    userInfo.name = &quot;Cat&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>方法2：toRef（）：<br>    定义：当我们在渲染数据时，不希望用到前缀时，可以使用组合toRef（）<br>       toRef（）是函数，<strong>转换响应式对象</strong>中的某个属性为单独响应式数据，他们之间依然相互绑定<br>    案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">//先打印Vue2</span><br><span class="line">&lt;button @click=&#x27;nameUpdata&#x27;&gt;修改&lt;/button&gt;</span><br><span class="line">//点击后打印Vue3</span><br><span class="line">&lt;script lang=&#x27;setup&#x27;&gt;</span><br><span class="line">//1，引用reactive，toRef</span><br><span class="line">import &#123;reactive,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line">//2，定义响应式对象</span><br><span class="line">const userInfo = reactive(&#123;</span><br><span class="line">    name:&#x27;Vue2&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">//3，定义单独响应式变量</span><br><span class="line">const name = toRef(userInfo,&#x27;name&#x27;)</span><br><span class="line">//4，点击修改name值</span><br><span class="line">const nameUpdata = ()=&gt;&#123;</span><br><span class="line">    name.value = &#x27;Vue3&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>方法3：toRefs（）：<br>    定义：可以定义转换响应式对象中所有属性为响应式数据，通常用于结构reactive定义的对象，转换响应式对象中所有属性（也可以是一部分）为单独响应式数据，对象成为普通对象，且数据关联<br>    案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;button @click = &#x27;upData&#x27;&gt;修改信息&lt;/button&gt;</span><br><span class="line">&lt;script lang=&#x27;setup&#x27;&gt;</span><br><span class="line">//1，引用reactive、toRefs</span><br><span class="line">import &#123;reactive,toRefs&#125; from &#x27;vue&#x27;</span><br><span class="line">//2，定义响应式对象</span><br><span class="line">const userInfo = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:&#x27;23&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">//3，定义转换单独响应式数据</span><br><span class="line">const &#123;name,age&#125; =toRefs(userInfo)</span><br><span class="line">//4，修改数据事件</span><br><span class="line">const upData = () =&gt;&#123;</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    age.value = &#x27;24&#x27;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法4：ref（）：<br>        定义：ref（）是一个函数，用来定义简单类型数据响应式<br>        注意：<br>                1）在修改值和获取值时需要用.value<br>                2）在渲染数据时可以省略.value<br>        案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;button @click=&quot;upData&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;script lang=&#x27;setup&#x27;&gt;</span><br><span class="line">//1，引用ref</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">//2，定义响应式变量</span><br><span class="line">const name = ref(&#x27;vue2&#x27;)</span><br><span class="line">//3，修改数据事件</span><br><span class="line">const upData = ()=&gt;&#123;</span><br><span class="line">    name.value = &#x27;vue3&#x27;</span><br><span class="line">    conslot.log(name.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="vue中数组的七个响应式方法"><a href="#vue中数组的七个响应式方法" class="headerlink" title="vue中数组的七个响应式方法"></a><a href="https://www.csdn.net/tags/OtDaEg4sMjUxMTUtYmxvZwO0O0OO0O0O.html">vue中数组的七个响应式方法</a></h4><h4 id="antd-Select组件placeholder不显示解决办法和原因"><a href="#antd-Select组件placeholder不显示解决办法和原因" class="headerlink" title="antd Select组件placeholder不显示解决办法和原因"></a><a href="https://blog.csdn.net/GMLGDJ/article/details/122754487">antd Select组件placeholder不显示解决办法和原因</a></h4><p> &lt;Select<br>        placeholder=”placeholder”<br>        // value={undefined} //显示<br>        value=’’  // 不显示<br>      // value={null}  // 不显示<br>      &gt;<br>        <Option value="lucy">Lucy</Option><br>      </Select><br>解决办法：placeholder不显示是因为设置了value值为”或者null，把value值设为undefined就可以了</p>
<p>原因：placeholder是当前组件值为空时显示的替换文本，只有值为空的时候才会显示。当组件绑定了value后，值不再是空，即时初始化值为””或null也视为有值，所以placeholder自然就不会显示。</p>
<h4 id="vee-validate"><a href="#vee-validate" class="headerlink" title="vee-validate"></a>vee-validate</h4><p>Vue项目中使用<a href="https://wenku.baidu.com/view/7aba411740323968011ca300a6c30c225901f022.html">vee-validate进行表单验证</a></p>
<h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><p>Vue 是通过运行时检测来确定哪些样式的 property 是被当前浏览器支持的。如果浏览器不支持某个 property，Vue 会进行多次测试以找到支持它的前缀。</p>
<h4 id="在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="在 &lt;template&gt; 元素上使用 v-if 条件渲染分组"></a>在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</h4><h4 id="Vue3-VSCode代码片段"><a href="#Vue3-VSCode代码片段" class="headerlink" title="Vue3-VSCode代码片段"></a>Vue3-VSCode代码片段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;vue-template&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;vue3&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">		&quot;&lt;template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/template&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;script setup lang=&#x27;ts&#x27;&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/script&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;style lang=&#x27;less&#x27;&gt;&quot;,</span><br><span class="line">		&quot;&quot;,</span><br><span class="line">		&quot;&lt;/style&gt;&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;my vue3 template&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="props-–-defineProps-Ts-版本"><a href="#props-–-defineProps-Ts-版本" class="headerlink" title="props – defineProps Ts 版本"></a><a href="https://www.kancloud.cn/cyyspring/vue3/2748147">props – defineProps Ts 版本</a></h4><h4 id="vue3-setup单文件组件中配置inheritAttrs"><a href="#vue3-setup单文件组件中配置inheritAttrs" class="headerlink" title="vue3 setup单文件组件中配置inheritAttrs"></a><a href="https://blog.csdn.net/xuefeng11111/article/details/121584181">vue3 setup单文件组件中配置inheritAttrs</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        inheritAttrs: false</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="ts写法"><a href="#ts写法" class="headerlink" title="ts写法"></a>ts写法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&#x27;ts&#x27;&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        inheritAttrs: false</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="mande-插件"><a href="#mande-插件" class="headerlink" title="mande-插件"></a><a href="https://www.npmjs.com/package/mande">mande-插件</a></h4><p>fetch-插件</p>
<p><em>mande</em> has better defaults to communicate with APIs using <code>fetch</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mande</span><br><span class="line">yarn add mande</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; mande &#125; from &#x27;mande&#x27;</span><br><span class="line"></span><br><span class="line">const users = mande(&#x27;/api/users&#x27;)</span><br><span class="line"></span><br><span class="line">users</span><br><span class="line">  .post(&#123;</span><br><span class="line">    name: &#x27;Dio&#x27;,</span><br><span class="line">    password: &#x27;irejectmyhumanityjojo&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then((user) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="defineProps-Ts-版本"><a href="#defineProps-Ts-版本" class="headerlink" title="defineProps Ts 版本"></a><a href="https://www.kancloud.cn/cyyspring/vue3/2748147">defineProps Ts 版本</a></h4><ul>
<li><code>defineProps</code> 在ts 版本支持 <strong>泛型参数来定义 prop</strong></li>
<li>传递给<code>defineProps</code>的泛型参数本身<strong>不能</strong>是一个导入的类型</li>
<li>基于类型的声明或者运行时声明都可以使用，但是你不能同时使用两者</li>
<li>接口或对象字面类型可以包含从其他文件导入的类型引用</li>
<li>ts 类型编译时候 require 默认不是false 是true</li>
</ul>
<ol>
<li><strong>泛型参数来定义 prop</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt; &#123;&#123; props.name &#125;&#125; &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  // js 版本使用支持的</span><br><span class="line">  // const props = defineProps(&#123;</span><br><span class="line">  //   name: String,</span><br><span class="line">  // &#125;);</span><br><span class="line"></span><br><span class="line"> // 类型字面量定义</span><br><span class="line">  // type Props = &#123;</span><br><span class="line">  //   name: string;</span><br><span class="line">  //   age: number | string;</span><br><span class="line">  // &#125;;</span><br><span class="line"></span><br><span class="line">  // ts 泛型形式定义</span><br><span class="line">  interface Props &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age?: number | string;</span><br><span class="line">  &#125;</span><br><span class="line">  const props = defineProps&lt;Props&gt;();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>传递给<code>defineProps</code>的泛型参数本身<strong>不能</strong>是一个导入的类型</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Props &#125; from &#x27;./other-file&#x27;</span><br><span class="line"></span><br><span class="line">// 不支持！</span><br><span class="line">defineProps&lt;Props&gt;()</span><br></pre></td></tr></table></figure>

<ol>
<li>基于类型的声明或者运行时声明都可以使用，但是你不能同时使用两者</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt; &lt;div&gt;&lt;/div&gt;&#123;&#123; props.name &#125;&#125; &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  // 不可以两种写法混用</span><br><span class="line">  type Props = &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    age: number | string;</span><br><span class="line">  &#125;;</span><br><span class="line">  const props = defineProps&lt;Props&gt;(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>接口或对象字面类型可以包含从其他文件导入的类型引用</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type a = string;</span><br><span class="line">export default a;</span><br><span class="line">&lt;template&gt; &lt;div&gt;&lt;/div&gt;&#123;&#123; props.name &#125;&#125; &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import a from &#x27;../Props/props&#x27;;</span><br><span class="line">  // 接口中调用的类型可以从 其他文件导入</span><br><span class="line">  type Props = &#123;</span><br><span class="line">    name: a; // 我使用其他文件类型</span><br><span class="line">    age: number | string;</span><br><span class="line">  &#125;;</span><br><span class="line">  const props = defineProps&lt;Props&gt;();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>ts 类型编译时候 require 默认不是false 是true <code>defineProps&lt;&#123; msg: string &#125;&gt;</code>会被编译为<code>&#123; msg: &#123; type: String, required: true &#125;&#125;</code>。<br><img src="https://img.kancloud.cn/b4/3d/b43d7135b2cf177ffff9704b2cd01fad_518x138.png" alt="img"></li>
</ol>
<blockquote>
<h5 id="ts-泛型参数来定义-–-定义默认值"><a href="#ts-泛型参数来定义-–-定义默认值" class="headerlink" title="ts 泛型参数来定义 – 定义默认值"></a>ts 泛型参数来定义 – 定义默认值</h5></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Props &#123;</span><br><span class="line">  msg?: string // ? 相当于 require 是否必填默认必填</span><br><span class="line">  labels?: string[],</span><br><span class="line">  age:12 | 13, //  相当于 validator，但复杂的不行</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义默认值比较复杂 需要withDefaults 函数 </span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  msg: &#x27;hello&#x27;,</span><br><span class="line">  labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<h5 id="ts-泛型参数来定义-–-开启响应式语法糖"><a href="#ts-泛型参数来定义-–-开启响应式语法糖" class="headerlink" title="ts 泛型参数来定义 – 开启响应式语法糖"></a>ts 泛型参数来定义 – 开启响应式语法糖</h5></blockquote>
<p>这种形式必须是<strong>开启响应式语法糖</strong>，默认是关闭的目前在实验属性，需要版本 <a href="https://staging-cn.vuejs.org/guide/extras/reactivity-transform.html#explicit-opt-in">可以参考</a><br><code>vue@^3.2.25</code>。</p>
<h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite#"></a>Vite<a href="https://staging-cn.vuejs.org/guide/extras/reactivity-transform.html#vite">#</a></h3><ul>
<li>需要<code>@vitejs/plugin-vue@^2.0.0</code></li>
<li>应用于 SFC 和 js(x)/ts(x) 文件。在执行转换之前，会对文件进行快速的使用检查，因此不使用宏的文件应该不会有性能损失。</li>
<li>注意<code>refTransform</code>现在是一个插件的顶层选项，而不再是位于<code>script.refSugar</code>之中了，因为它不仅仅只对 SFC 起效。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// vite.config.js</span><br><span class="line">export default &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(&#123;</span><br><span class="line">      reactivityTransform: true</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli#"></a><code>vue-cli</code><a href="https://staging-cn.vuejs.org/guide/extras/reactivity-transform.html#vue-cli">#</a></h3><ul>
<li>目前仅对 SFC 起效</li>
<li>需要<code>vue-loader@^17.0.0</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(&#x27;vue&#x27;)</span><br><span class="line">      .use(&#x27;vue-loader&#x27;)</span><br><span class="line">      .tap((options) =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          ...options,</span><br><span class="line">          reactivityTransform: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仅用webpack-vue-loader"><a href="#仅用webpack-vue-loader" class="headerlink" title="仅用webpack+vue-loader#"></a>仅用<code>webpack</code>+<code>vue-loader</code><a href="https://staging-cn.vuejs.org/guide/extras/reactivity-transform.html#plain-webpack-vue-loader">#</a></h3><ul>
<li>目前仅对 SFC 起效</li>
<li>需要<code>vue-loader@^17.0.0</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: &#x27;vue-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          reactivityTransform: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>开启后使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  interface Props &#123;</span><br><span class="line">    msg: string</span><br><span class="line">    count?: number</span><br><span class="line">    foo?: string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const &#123;</span><br><span class="line">    msg,</span><br><span class="line">    // 默认值正常可用</span><br><span class="line">    count = 1,</span><br><span class="line">    // 解构时命别名也可用</span><br><span class="line">    // 这里我们就将 `props.foo` 命别名为 `bar`</span><br><span class="line">    foo: bar</span><br><span class="line">  &#125; = defineProps&lt;Props&gt;()</span><br><span class="line"></span><br><span class="line">  watchEffect(() =&gt; &#123;</span><br><span class="line">    // 会在 props 变化时打印</span><br><span class="line">    console.log(msg, count, bar)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5></blockquote>
<p><code>Volar</code>可以赋予上文中的 template 很友好的 TS 提示与校验，解决了 template 的 TS 提示问题。<strong>注意</strong>，使用它时，要先**移除<code>Vetur</code>**，以避免造成冲突，如下图如果使用ts 并且使用 Vetur 并不会有props 提示并且使用setup 组件会显示没有使用，图使用<code>Volar</code> 解决了这些问题</p>
<p><img src="https://img.kancloud.cn/aa/83/aa83cc72e95290db156be8dd7c4e4825_627x376.png" alt="img"></p>
<h4 id="SFC-Single-File-Components"><a href="#SFC-Single-File-Components" class="headerlink" title="SFC -Single-File Components"></a><a href="https://vuejs.org/guide/scaling-up/sfc.html">SFC -Single-File Components</a></h4><p><a href="https://vitejs.dev/config/">Vite-config</a></p>
<h4 id="vite热更新（vue3）"><a href="#vite热更新（vue3）" class="headerlink" title="vite热更新（vue3）"></a><a href="https://blog.csdn.net/weixin_45369499/article/details/125158995">vite热更新（vue3）</a></h4><p><code>vite.config.ts</code>文件中添加代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">hmr</span>: <span class="literal">true</span>,  <span class="comment">// 开启热更新</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  server:&#123;</span><br><span class="line">    hmr: true,  // 开启热更新</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Ant-Design-Vue3-x中动态渲染icon图标"><a href="#Ant-Design-Vue3-x中动态渲染icon图标" class="headerlink" title="Ant Design Vue3.x中动态渲染icon图标"></a><a href="https://blog.csdn.net/m0_53056203/article/details/124568024">Ant Design Vue3.x中动态渲染icon图标</a></h4><h4 id="Vue-3-Ant-Design-Vue-动态渲染icons"><a href="#Vue-3-Ant-Design-Vue-动态渲染icons" class="headerlink" title="Vue 3 Ant Design Vue 动态渲染icons"></a><a href="https://blog.csdn.net/DevilAngelia/article/details/124959849">Vue 3 Ant Design Vue 动态渲染icons</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import * as antIcons from &#x27;@ant-design/icons-vue&#x27; // 引入ant icons</span><br><span class="line"></span><br><span class="line">const antIconsList: any = antIcons; // 重新赋值定义类型 避免后续遍历注册组件的时候ts报错</span><br><span class="line"></span><br><span class="line">&lt;component :is=&quot;antIconsList[item.meta.icon]&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="vue-3-的复制功能-vue-clipboard3"><a href="#vue-3-的复制功能-vue-clipboard3" class="headerlink" title="vue 3 的复制功能 vue-clipboard3"></a><a href="https://www.jianshu.com/p/c3fb60e8eccb">vue 3 的复制功能 vue-clipboard3</a></h4><h4 id="组件-国际化-中文"><a href="#组件-国际化-中文" class="headerlink" title="组件-国际化-中文"></a>组件-国际化-中文</h4><p><a href="https://blog.51cto.com/u_15316082/3209711">Vue+antd 国际化–默认英文改成中文</a></p>
<p>[Vue 解决 Warning: <a href="https://blog.csdn.net/zz00008888/article/details/112895429">antdv: LocaleProvider] <code>LocaleProvider</code> is deprecated. Please use <code>locale</code> …..</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zh_CN from &quot;ant-design-vue/lib/locale-provider/zh_CN&quot;;</span><br><span class="line"></span><br><span class="line">&lt;a-config-provider :locale=&quot;zh_CN&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/a-config-provider&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：在使用 ant-design-for-vue 国际化的时候，LocaleProvider 已弃用，需要换成 ConfigProvider。</li>
<li>解决：把<code> &lt;a-locale-provider&gt;</code> 标签换成 <code>&lt;a-config-provider&gt;</code> 标签即可</li>
</ul>
<p><a href="http://www.manongjc.com/detail/24-fqjxxougfxbdcin.html">antd-vue实现导出excel</a></p>
<p><a href="http://t.zoukankan.com/llive-p-14880959.html">antd-vue实现导出excel</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2047844">Vue3将数据导出为Excel—公司偷学技术的第1天</a>、</p>
<h3 id="导出表格-js-table2excel"><a href="#导出表格-js-table2excel" class="headerlink" title="导出表格-js-table2excel"></a><a href="https://www.npmjs.com/package/js-table2excel">导出表格-js-table2excel</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install js-table2excel</span><br></pre></td></tr></table></figure>

<h4 id="可以设置表格的单元格的宽高和类型"><a href="#可以设置表格的单元格的宽高和类型" class="headerlink" title="可以设置表格的单元格的宽高和类型"></a>可以设置表格的单元格的宽高和类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const column = [</span><br><span class="line">    &#123;</span><br><span class="line">        title: &#x27;Name&#x27;,</span><br><span class="line">        key: &#x27;name&#x27;,</span><br><span class="line">        type: &#x27;text&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: &#x27;Pic&#x27;,</span><br><span class="line">        key: &#x27;pic&#x27;,</span><br><span class="line">        type: &#x27;image&#x27;,</span><br><span class="line">        width: 80,</span><br><span class="line">        height: 50</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">const data = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;xiao&#x27;,</span><br><span class="line">        age: &#x27;18&#x27;,</span><br><span class="line">        pic: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;jie&#x27;,</span><br><span class="line">        age: &#x27;18&#x27;,</span><br><span class="line">        pic: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">const excelName = &#x27;boy&#x27;</span><br><span class="line"> </span><br><span class="line">table2excel(column, data, excelName)</span><br></pre></td></tr></table></figure>

<h4 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h4><p>引入<code>import table2excel from &#39;js-table2excel&#39;</code>，在<code>js-table2excel</code>上会有以下警告：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无法找到模块“js-table2excel”的声明文件。“H:/Gitee/Vue3_demo/vue3-app-manage/node_modules/_js-table2excel@1.0.3@js-table2excel/index.js”隐式拥有 &quot;any&quot; 类型。</span><br><span class="line">  尝试使用 `npm i --save-dev @types/js-table2excel` (如果存在)，或者添加一个包含 `declare module &#x27;js-table2excel&#x27;;` 的新声明(.d.ts)文件</span><br></pre></td></tr></table></figure>

<h4 id="已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案"><a href="#已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案" class="headerlink" title="已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案"></a><a href="https://www.cnblogs.com/feibiubiu/p/12603807.html">已安装对应模块，但报无法找到模块“XXX”的声明文件的解决方案</a></h4><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>在src目录下，新建<code>shime-vue.d.ts</code>文件，在里面进行声明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare module &#x27;js-table2excel&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="vue3网络请求到的数据为proxy对象时，如何获取值"><a href="#vue3网络请求到的数据为proxy对象时，如何获取值" class="headerlink" title="vue3网络请求到的数据为proxy对象时，如何获取值"></a><a href="https://www.bilibili.com/read/cv12282506">vue3网络请求到的数据为proxy对象时，如何获取值</a></h4><h4 id="将proxy对象转为普通数组-toRaw"><a href="#将proxy对象转为普通数组-toRaw" class="headerlink" title="将proxy对象转为普通数组-toRaw"></a><a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#toraw">将proxy对象转为普通数组-toRaw</a></h4><p>注意：<code>toRaw</code>的时候，要加上<code>.value</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const selectedRowsArr = ref&lt;DataType[]&gt;([]);</span><br><span class="line"></span><br><span class="line">const list = toRaw(selectedRowsArr.value);  // 这个就是普通数组</span><br></pre></td></tr></table></figure>

<h4 id="13个开发常用的Vue-UI组件库"><a href="#13个开发常用的Vue-UI组件库" class="headerlink" title="13个开发常用的Vue UI组件库"></a><a href="https://www.jianshu.com/p/f98a14effc81">13个开发常用的Vue UI组件库</a></h4><h4 id="vue跳转页面的几种方法-推荐"><a href="#vue跳转页面的几种方法-推荐" class="headerlink" title="vue跳转页面的几种方法(推荐)"></a><a href="https://www.jb51.net/article/183611.htm">vue跳转页面的几种方法(推荐)</a></h4><ol>
<li><p>router-link跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 直接跳转 --&gt;</span><br><span class="line">&lt;router-link to=&#x27;/testDemo&#x27;&gt;</span><br><span class="line"> &lt;button&gt;点击跳转2&lt;/button&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line">  </span><br><span class="line">&lt;!-- 带参数跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;testDemo&#x27;,query:&#123;setid:123456&#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;button&gt;点击跳转1&lt;/button&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line">  </span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;testDemo&#x27;,params:&#123;setid:1111222&#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;button&gt;点击跳转3&lt;/button&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this.$router.push()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$router.push(&#x27;/testDemo&#x27;);</span><br></pre></td></tr></table></figure>

<p>element-ui下拉菜单的事件监听@command做页面跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dropdown class=&quot;ml15&quot; @command=&quot;handleCommand&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;el-dropdown-link&quot;&gt;</span><br><span class="line">        &lt;!-- &lt;i class=&quot;el-icon-user-solid&quot;&gt;&lt;/i&gt; --&gt;</span><br><span class="line">        &lt;el-button icon=&quot;el-icon-user-solid&quot; circle size=&quot;mini&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">        &lt;el-dropdown-item command=&quot;/user/updatepass&quot;&gt;修改密码&lt;/el-dropdown-item&gt;</span><br><span class="line">        &lt;el-dropdown-item command=&quot;/login&quot;&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">    &lt;/el-dropdown-menu&gt;</span><br><span class="line">&lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">handleCommand(command) &#123;</span><br><span class="line">  console.log(command)</span><br><span class="line">  this.$router.push(command)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取当前路由—this.$route.path</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$route.path</span><br><span class="line"></span><br><span class="line">if(this.$route.path!=&#x27;/Home&#x27;)&#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">          path:&#x27;/Home&#x27;,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="vue项目中引入本地json文件"><a href="#vue项目中引入本地json文件" class="headerlink" title="vue项目中引入本地json文件"></a>vue项目中引入本地json文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const appsId = require(&#x27;@/utils/appsId.json&#x27;);</span><br></pre></td></tr></table></figure>

<p>appsId.json文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &quot;未分类&quot;, </span><br><span class="line">    &quot;2&quot;: &quot;哈哈哈项目&quot;, </span><br><span class="line">    &quot;3&quot;: &quot;测试模块&quot;, </span><br><span class="line">    &quot;4&quot;: &quot;呵呵呵项目&quot;, </span><br><span class="line">    &quot;5&quot;: &quot;好啊好啊项目&quot;, </span><br><span class="line">    &quot;6&quot;: &quot;哈哈哈哈哈项目&quot;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在服务器上跑node服务，配置mongodb啊，你本地怎么运行的，服务器就怎么运行，只不过服务器上的node服务也好nginx也好，读取的是打包压缩后的静态项目资源，<code>服务器也就是可以通过外网ip访问的的一台电脑</code></p>
]]></content>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-Vite项目搭建笔记</title>
    <url>/2020/07/29/Vue3-Vite%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://vitejs.dev/">Vite官网</a></p>
<p><a href="https://vitejs.cn/">Vite中文官网</a></p>
<p>安装Vuter，有代码提示</p>
<blockquote>
<p>Vite requires <a href="https://nodejs.org/en/">Node.js</a> version 14.18+, 16+</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">创建项目</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ok to proceed? (y) y</span><br><span class="line">√ Project name: ... Vue3_mobile</span><br><span class="line">√ Package name: ... vue3-mobile</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Vue3_mobile</span><br><span class="line">npm install   </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue_mobile</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue_mobile</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<h4 id="几款实用的VUE移动端UI框架"><a href="#几款实用的VUE移动端UI框架" class="headerlink" title="几款实用的VUE移动端UI框架"></a><a href="https://wenku.baidu.com/view/c4b466ee5cbfc77da26925c52cc58bd6318693d5.html">几款实用的VUE移动端UI框架</a></h4><ul>
<li><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">Vant</a> （有赞）</li>
<li><a href="https://nutui.jd.com/#/">NutUI</a>   (京东)</li>
<li><a href="http://mint-ui.github.io/docs/#/">Mint-ui</a></li>
<li><a href="https://doc.vux.li/zh-CN/vux-loader/plugins.html">Vux</a>  （微信风格）</li>
<li><a href="https://vonic.ai/#features">vonic</a></li>
</ul>
<h4 id="vue3-vite的项目如何将打包后的绝对路径改为相对路径"><a href="#vue3-vite的项目如何将打包后的绝对路径改为相对路径" class="headerlink" title="vue3+vite的项目如何将打包后的绝对路径改为相对路径"></a><a href="https://blog.csdn.net/zy21131437/article/details/125861170">vue3+vite的项目如何将打包后的绝对路径改为相对路径</a></h4><p>在vue3+vite的项目中，配置文件名为 <strong><code>vite.config.js</code>**，如果没有就在<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>下新建一个，文件名固定为：</strong><code>vite.config.js</code>**，然后在里面加上base属性，设置值为 <code>&quot;./&quot;</code>，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base: &#x27;./&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果不是用Vite的，<a href="https://www.jb51.net/article/243243.htm">vue cli3.x打包后如何修改生成的静态资源的目录和路径</a></p>
<h3 id="移动端1px的问题"><a href="#移动端1px的问题" class="headerlink" title="移动端1px的问题"></a>移动端1px的问题</h3><p>1px可以不转换为rem</p>
<h3 id="移动端vm与rem适配"><a href="#移动端vm与rem适配" class="headerlink" title="移动端vm与rem适配"></a>移动端vm与rem适配</h3><ol>
<li>将根元素的<code>font-size</code>设置为<code>font-size: 0.13333333vw;</code></li>
<li>这样就是1rem = 1px；写样式的时候，多少px就写多少rem</li>
</ol>
<p>参考博客：</p>
<p><a href="https://blog.csdn.net/qq_38990451/article/details/107382146?app_version=5.6.1&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22107382146%22,%22source%22:%22winney07%22%7D&ctrtid=M0aIM&utm_source=app">最简单的移动端适配方案（vw/rem）</a></p>
<p><a href="https://blog.csdn.net/sky2714/article/details/80849863?app_version=5.6.1&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%2280849863%22,%22source%22:%22winney07%22%7D&ctrtid=keW0g&utm_source=app">最简单的移动端适配方案(rem+vw)</a></p>
<h4 id="关于字体的适配-文本字号不建议使用rem"><a href="#关于字体的适配-文本字号不建议使用rem" class="headerlink" title="关于字体的适配-文本字号不建议使用rem"></a>关于字体的适配-<a href="https://github.com/amfe/article/issues/17">文本字号不建议使用<code>rem</code></a></h4><blockquote>
<p>现在绝大多数的字体文件都自带一些点阵尺寸，通常是<code>16px</code>和<code>24px</code>，所以我们<strong>不希望出现<code>13px</code>和<code>15px</code>这样的奇葩尺寸</strong>。</p>
</blockquote>
<p>所以可以使用媒体查询，根据不同的dpr，设置不一样的字体大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    font-size: 12px; </span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line">@media(-webkit-min-device-pixel-ratio:2),(min-device-pixel-ratio:2)&#123;</span><br><span class="line">   p &#123;</span><br><span class="line">      font-size: 24px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media(-webkit-min-device-pixel-ratio:3),(min-device-pixel-ratio:3)&#123;</span><br><span class="line">   p &#123;</span><br><span class="line">      font-size: 36px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>github上使用下面这种，但好像不起作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[data-dpr=&quot;2&quot;] p &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;3&quot;] p &#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="svg的使用"><a href="#svg的使用" class="headerlink" title="svg的使用"></a>svg的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-Vite-Vant-笔记</title>
    <url>/2021/11/03/Vue3-Vite-Vant-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/351888882">vue3使用vite2移动端项目</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/442732586">vite px转rem (vite+vant+vue3 demo)</a></p>
<p>注：如果是ts项目，postcss.config.js需重命名为postcss.config.cjs</p>
<p><a href="https://www.proyy.com/6956431101141352485.html#toc_3">vite+vue3+ts+eslint编写移动端rem自适应</a></p>
<p><a href="https://blog.csdn.net/weixin_52827704/article/details/123914911">flex布局: 一行显示固定个数，换行展示</a></p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue3-vite-vant</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue3-vite-vant</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="使用vant"><a href="#使用vant" class="headerlink" title="使用vant"></a>使用vant</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vant</span><br></pre></td></tr></table></figure>

<h4 id="按需引入组件（推荐）"><a href="#按需引入组件（推荐）" class="headerlink" title="按需引入组件（推荐）"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart#an-xu-yin-ru-zu-jian-tui-jian">按需引入组件（推荐）</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components -D</span><br></pre></td></tr></table></figure>

<h5 id="配置vite-config-ts"><a href="#配置vite-config-ts" class="headerlink" title="配置vite.config.ts"></a>配置vite.config.ts</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import Components from &#x27;unplugin-vue-components/vite&#x27;;</span><br><span class="line">import &#123; VantResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    Components(&#123;</span><br><span class="line">      resolvers: [VantResolver()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="引入函数组件的样式"><a href="#引入函数组件的样式" class="headerlink" title="引入函数组件的样式"></a>引入函数组件的样式</h5><p>Vant 中有个别组件是以函数的形式提供的，包括 <code>Toast</code>，<code>Dialog</code>，<code>Notify</code> 和 <code>ImagePreview</code> 组件。在使用函数组件时，<code>unplugin-vue-components</code> 无法自动引入对应的样式，因此需要手动引入样式。</p>
<h4 id="使用方法1"><a href="#使用方法1" class="headerlink" title="使用方法1"></a>使用方法1</h4><h5 id="在-lt-script-setup-gt-中可以直接使用-Vant-组件，不需要进行组件注册。"><a href="#在-lt-script-setup-gt-中可以直接使用-Vant-组件，不需要进行组件注册。" class="headerlink" title="在 &lt;script setup&gt; 中可以直接使用 Vant 组件，不需要进行组件注册。"></a>在 <code>&lt;script setup&gt;</code> 中可以直接使用 Vant 组件，不需要进行组件注册。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; Button &#125; from &#x27;vant&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Button /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用方法2"><a href="#使用方法2" class="headerlink" title="使用方法2"></a>使用方法2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-button type=&quot;primary&quot;&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button disabled type=&quot;primary&quot;&gt;禁用状态&lt;/van-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="移动端适配写法-设计稿尺寸（750-1624px）"><a href="#移动端适配写法-设计稿尺寸（750-1624px）" class="headerlink" title="移动端适配写法-设计稿尺寸（750*1624px）"></a>移动端适配写法-设计稿尺寸（750*1624px）</h4><p><a href="https://www.zcool.com.cn/article/ZODQ2Mzg0.html">移动端设计规范和方法汇总</a></p>
<h5 id="一、rem写法"><a href="#一、rem写法" class="headerlink" title="一、rem写法"></a>一、rem写法</h5><p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.元素在750宽的设计稿中，多少px，就写多少rem</p>
<h5 id="二、viewport插件的写法"><a href="#二、viewport插件的写法" class="headerlink" title="二、viewport插件的写法"></a>二、viewport插件的写法</h5><p>元素在750宽的设计稿中，<code>*px</code>，就写<code>*/2px</code>  (要除以2)</p>
<h4 id="Rem适配"><a href="#Rem适配" class="headerlink" title="Rem适配"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#liu-lan-qi-gua-pei">Rem适配</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss postcss-pxtorem --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -S amfe-flexible</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p>
<blockquote>
<p>由于<code>viewport</code>单位得到众多浏览器的兼容，<code>lib-flexible</code>这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用<code>viewport</code>来替代此方。</p>
</blockquote>
<h4 id="Viewport-布局—推荐—本项目使用"><a href="#Viewport-布局—推荐—本项目使用" class="headerlink" title="Viewport 布局—推荐—本项目使用"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#viewport-bu-ju">Viewport 布局</a>—推荐—本项目使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="viewport布局的相关配置"><a href="#viewport布局的相关配置" class="headerlink" title="viewport布局的相关配置"></a>viewport布局的相关配置</h4><p>在项目根目录添加<code>postcss.config.cjs</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// postcss.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    &#x27;postcss-px-to-viewport&#x27;: &#123;</span><br><span class="line">      viewportWidth: 375,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This file is being treated as an ES module because it has </span><br><span class="line">a &#x27;.js&#x27; file extension and &#x27;H:\Gitee\Vue3_demo\vue3-vite-vant\package.json&#x27; contains &quot;type&quot;: &quot;module&quot;. To treat it as a CommonJS script, rename it to use the &#x27;.cjs&#x27; file extension.</span><br></pre></td></tr></table></figure>

<p>解决：1.将<code>postcss.config.js</code>改为<code>postcss.config.cjs</code> ;  2.重启服务</p>
<h4 id="使用less"><a href="#使用less" class="headerlink" title="使用less"></a>使用less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i less less-loader -D</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h4 id="在main-ts中引入reset-less"><a href="#在main-ts中引入reset-less" class="headerlink" title="在main.ts中引入reset.less"></a>在main.ts中引入reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./assets/css/reset.less&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="reset-less"><a href="#reset-less" class="headerlink" title="reset.less"></a>reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* http://meyerweb.com/eric/tools/css/reset/ </span><br><span class="line">   v2.0 | 20110126</span><br><span class="line">   License: none (public domain)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed, </span><br><span class="line">figure, figcaption, footer, header, hgroup, </span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	border: 0;</span><br><span class="line">	// font-size: 100%;</span><br><span class="line">	// font: inherit;</span><br><span class="line">	vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure, </span><br><span class="line">footer, header, hgroup, menu, nav, section &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">	line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">ol, ul &#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote, q &#123;</span><br><span class="line">	quotes: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: &#x27;&#x27;;</span><br><span class="line">	content: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">	border-spacing: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置手机可访问本地电脑项目"><a href="#配置手机可访问本地电脑项目" class="headerlink" title="配置手机可访问本地电脑项目"></a>配置手机可访问本地电脑项目</h4><p><a href="http://www.manongjc.com/detail/29-saiyfskdbsqqcmz.html">Vite 使用本地ip+localhost访问服务</a></p>
<p>使用vite新建的项目默认访问链接：<a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>
<ol>
<li><p>修改<code>vite.config.js</code>文件，添加<code>server</code>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;		// 处理使用本地ip访问页面</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>若使用手机访问本地ip页面，访问不成功（显示“服务器已停用”）。即要将本地电脑的防火墙“关闭”即可。<a href="https://blog.csdn.net/zoepriselife316/article/details/117957732">手机和电脑连接同一wifi,手机访问不了电脑起的项目</a></p>
<p>2.1电脑的“设置”——“网络和共享中心”——“Windows Defender 防火墙”（左下角）——“启用或关闭Windows Defender 防火墙”（左侧）——选择“关闭”（专用网络和公用网络都关闭）</p>
<p><code>注意：使用完，最好重新“启用”防火墙。</code></p>
<p>2.2 如果手机连接的当前wifi那里的<code>HTTP代理</code>-<code>配置代理</code>是开启的，将其关闭</p>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/dd26cae7d7b2">vite.config.js之resolve.alias配置</a></p>
<h4 id="vue实现动态改变title"><a href="#vue实现动态改变title" class="headerlink" title="vue实现动态改变title"></a><a href="https://www.dianjilingqu.com/161326.html">vue实现动态改变title</a></h4><h4 id="自定义主题颜色"><a href="#自定义主题颜色" class="headerlink" title="自定义主题颜色"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/config-provider#zi-ding-yi-css-bian-liang">自定义主题颜色</a></h4><p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ConfigProvider &#125; from &#x27;vant&#x27;;</span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-config-provider :theme-vars=&quot;themeVars&quot;&gt;</span><br><span class="line">    &lt;van-nav-bar</span><br><span class="line">    title=&quot;红包活动&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/van-config-provider&gt;</span><br></pre></td></tr></table></figure>

<p>3.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const themeVars = &#123;</span><br><span class="line">    navBarBackgroundColor: &#x27;#555&#x27;,</span><br><span class="line">    navBarTitleTextColor: &#x27;#fff&#x27;,</span><br><span class="line">    navBarIconColor: &#x27;#fff&#x27;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原来：background: var(–van-nav-bar-background-color);</p>
<p>自定义写法：navBarBackgroundColor，会转换成–van-nav-bar-background-color</p>
</blockquote>
<h4 id="样式覆盖报错处理"><a href="#样式覆盖报错处理" class="headerlink" title="样式覆盖报错处理"></a><a href="https://blog.csdn.net/m0_51431448/article/details/123003864">样式覆盖报错处理</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[@vue/compiler-sfc] the &gt;&gt;&gt; and /deep/ combinators have been deprecated. Use :deep() instead.</span><br></pre></td></tr></table></figure>

<p>在Vue2中 我们经常使用 <strong>&gt;&gt;&gt;</strong> 或 <strong>/deep/</strong> 样式穿透 修改<a href="https://so.csdn.net/so/search?q=elementui&spm=1001.2101.3001.7020">elementui</a>里面的样式</p>
<p>但是Vue3中 弃用了 <strong>&gt;&gt;&gt;</strong> 和 <strong>/deep/</strong> 使用 <strong>:deep()</strong> 代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/deep/ .van-cell__title&#123;</span><br><span class="line">    span&#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> /deep/ .van-cell__left-icon&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:deep(.van-cell__title)&#123;</span><br><span class="line">    span&#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">:deep(.van-cell__left-icon)&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a><a href="https://router.vuejs.org/installation.html">路由配置</a></h4><p>1.安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure>

<p>2.src目录中新建router目录，新建index.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;createRouter, createWebHashHistory&#125; from &#x27;vue-router&#x27;</span><br><span class="line">import RedPacket from &#x27;../pages/redPacket/index.vue&#x27;;</span><br><span class="line">import Withdraw from &#x27;../pages/Withdraw/index.vue&#x27;</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">    &#123; </span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        component: RedPacket,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;红包活动&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path: &#x27;/withdraw&#x27;,</span><br><span class="line">        component: Withdraw,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;提现&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes, </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure>

<p>3.修改mian.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;;</span><br><span class="line"></span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure>

<p>4.App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="动态修改页面Title"><a href="#动态修改页面Title" class="headerlink" title="动态修改页面Title"></a>动态修改页面Title</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to, from) =&gt; &#123;</span><br><span class="line">    // 动态修改页面title</span><br><span class="line">    if (to.meta.title) &#123;</span><br><span class="line">        document.title = to.meta.title  as string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="页面跳转组件-router-link"><a href="#页面跳转组件-router-link" class="headerlink" title="页面跳转组件-router-link"></a>页面跳转组件-router-link</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/withdraw&quot;&gt;</span><br><span class="line">    &lt;van-button color=&quot;#fe8124&quot; plain size=&quot;small&quot;&gt; </span><br><span class="line">    提现</span><br><span class="line">    &lt;/van-button&gt;</span><br><span class="line">&lt;/router-link&gt; </span><br></pre></td></tr></table></figure>

<h4 id="自定义主题放在App-vue"><a href="#自定义主题放在App-vue" class="headerlink" title="自定义主题放在App.vue"></a>自定义主题放在App.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ConfigProvider &#125; from &#x27;vant&#x27;;</span><br><span class="line">// 自定义主题颜色</span><br><span class="line">  const themeVars = &#123;</span><br><span class="line">      navBarBackgroundColor: &#x27;#555&#x27;,</span><br><span class="line">      navBarTitleTextColor: &#x27;#fff&#x27;,</span><br><span class="line">      navBarIconColor: &#x27;#fff&#x27;,</span><br><span class="line">      cellHorizontalPadding: &#x27;8px&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-config-provider :theme-vars=&quot;themeVars&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/van-config-provider&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style  scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="父子组件传值-defineProps"><a href="#父子组件传值-defineProps" class="headerlink" title="父子组件传值-defineProps"></a>父子组件传值-defineProps</h4><p>参考：<a href="https://blog.csdn.net/skyblacktoday/article/details/120879677">vue3：语法糖内的defineProps及defineEmits、defineExpose</a></p>
<p>属性：</p>
<p>1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: String,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>采用ts专有声明，无默认值</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props =  defineProps&lt;&#123; // 采用ts专有声明，无默认值</span><br><span class="line">    title: string,</span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>采用ts专有声明，有默认值</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Props &#123;</span><br><span class="line">    title?: string</span><br><span class="line">&#125;</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">    title: &#x27;首页&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h5 id="子组件："><a href="#子组件：" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: String,</span><br><span class="line">&#125;)</span><br><span class="line">或带默认值</span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;红包活动&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="父组件："><a href="#父组件：" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;&#x27;红包活动&#x27;&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：如果传值是字符串要加上单引号(:title=&quot;&#39;红包活动&#39;&quot;)，否则不生效</code></p>
<h5 id="或使用变量："><a href="#或使用变量：" class="headerlink" title="或使用变量："></a>或使用变量：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const title = ref(&#x27;红包活动&#x27;)</span><br><span class="line"></span><br><span class="line">&lt;!-- 顶部导航 --&gt;</span><br><span class="line">&lt;TopNav :title=&quot;title&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="子组件传父组件-defineEmits"><a href="#子组件传父组件-defineEmits" class="headerlink" title="子组件传父组件-defineEmits"></a>子组件传父组件-defineEmits</h4><h5 id="子组件：-1"><a href="#子组件：-1" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    left-arrow</span><br><span class="line">    :right-text=&quot;props.rightText&quot;</span><br><span class="line">    @click-right=&quot;onClickRight&quot;</span><br><span class="line">/&gt;</span><br><span class="line">const $emit = defineEmits([&#x27;navRightClick&#x27;])</span><br><span class="line">// 导航栏右侧按钮点击</span><br><span class="line">const onClickRight = () =&gt; &#123;</span><br><span class="line">    $emit(&#x27;navRightClick&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const props =  defineProps(&#123;</span><br><span class="line">    rightText: String</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="父组件：-1"><a href="#父组件：-1" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot; :rightText=&quot;&#x27;提现明细&#x27;&quot; @navRightClick=&quot;handleRightClick&quot;/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">    console.log(&quot;点击右侧按钮&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编程式路由跳转"><a href="#编程式路由跳转" class="headerlink" title="编程式路由跳转"></a>编程式路由跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">     router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="导航栏父子传值-也可改为插槽的用法"><a href="#导航栏父子传值-也可改为插槽的用法" class="headerlink" title="导航栏父子传值-也可改为插槽的用法"></a>导航栏父子传值-也可改为插槽的用法</h4><h5 id="子组件：-2"><a href="#子组件：-2" class="headerlink" title="子组件："></a>子组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">&gt;</span><br><span class="line">   &lt;template #right&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure>

<p>不能写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-nav-bar</span><br><span class="line">    :title=&quot;props.title&quot;</span><br><span class="line">    left-arrow</span><br><span class="line">    @click-left=&quot;onClickLeft&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;      // 这样写不起作用</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure>

<h5 id="父组件：-2"><a href="#父组件：-2" class="headerlink" title="父组件："></a>父组件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;&gt;</span><br><span class="line">   &lt;router-link to=&quot;/withdraw/detail&quot;&gt;红包明细&lt;/router-link&gt;</span><br><span class="line">&lt;/TopNav&gt;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TopNav :title=&quot;&#x27;提现&#x27;&quot;&gt;</span><br><span class="line">   &lt;span @click=&quot;handleRightClick&quot;&gt;红包明细&lt;/span&gt;</span><br><span class="line">&lt;/TopNav&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const handleRightClick = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;跳转&#x27;)</span><br><span class="line">     router.push(&#x27;/withdraw/detail&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Vite热更新的开启"><a href="#Vite热更新的开启" class="headerlink" title="Vite热更新的开启"></a>Vite热更新的开启</h4><p>vite.config.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    hmr: true,    // 开启热更新</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/weixin_45369499/article/details/125158995">vite热更新（vue3）</a>   | <a href="https://blog.csdn.net/wanglaotou88/article/details/124708297">Vite 是如何做热更新的</a></p>
<p><code>项目的热更新存在延迟，每次都要重启项目</code></p>
<p>做了以上配置还是不起作用：</p>
<p>原因：组件引入的路径大小写写错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Withdraw from &#x27;../pages/Withdraw/index.vue&#x27;;</span><br></pre></td></tr></table></figure>

<p>解决：将<code>Withdraw</code>改为<code>withdraw</code>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Withdraw from &#x27;../pages/withdraw/index.vue&#x27;;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.jb51.net/article/240873.htm">Vue Vite热更新不起作用的正确解决办法</a></p>
<blockquote>
<p>提示：文件夹名称严格注意大小写</p>
<p>router 路由中名称 和文件夹(目录), 文件名需要保证大小写一致</p>
</blockquote>
<h4 id="‘v-model’-directives-require-no-argument"><a href="#‘v-model’-directives-require-no-argument" class="headerlink" title="‘v-model’ directives require no argument"></a><a href="https://blog.csdn.net/weixin_48952990/article/details/125387578">‘v-model’ directives require no argument</a></h4><p>解决方法：<br>解决方法：<br>在VScode中，打开 “文件&gt;首选项&gt;设置” 找到右侧用户设置<br>搜索vetur.validation,找到下面这句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;vetur.validation.template&quot;: true  </span><br></pre></td></tr></table></figure>


<p>将true改成false</p>
<p>//如果没有可以直接添加该句 （将检查关闭）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;vetur.validation.template&quot;: false</span><br></pre></td></tr></table></figure>

<h4 id="vue3：复制功能（vue-clipboard3）"><a href="#vue3：复制功能（vue-clipboard3）" class="headerlink" title="vue3：复制功能（vue-clipboard3）"></a><a href="https://blog.csdn.net/qq_40745143/article/details/123688798">vue3：复制功能（vue-clipboard3）</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-clipboard3</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import useClipboard from &#x27;vue-clipboard3&#x27;</span><br><span class="line">import &#123; Toast &#125; from &#x27;vant&#x27;;</span><br><span class="line">import &#x27;vant/es/toast/style&#x27;;</span><br><span class="line"></span><br><span class="line">// 复制绑定码</span><br><span class="line">const &#123; toClipboard &#125; = useClipboard()</span><br><span class="line">const copy = async (val:string) =&gt; &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      await toClipboard(val)</span><br><span class="line">      console.log(&#x27;Copied to clipboard&#x27;)</span><br><span class="line">      Toast.success(&#x27;复制成功&#x27;);</span><br><span class="line">   &#125; catch (e) &#123;</span><br><span class="line">      console.error(e)</span><br><span class="line">   &#125;</span><br><span class="line">   show.value = false;  // 关闭弹窗</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-button color=&quot;#fe7c1a&quot; @click=&quot;copy(&#x27;bcJcB9&#x27;)&quot;&gt;复制并前往绑定&lt;/van-button&gt;</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/col">页面布局</a></h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Vue3-Vite-Vant-%E7%AC%94%E8%AE%B0/note1.png" alt="layout布局"></p>
<p>左右有padding，元素之间间距相等（加<code>gutter=&quot;15&quot;</code>），元素宽度一样(<code>span=&quot;6&quot;</code>)，换行（每行相加够24）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-row justify=&quot;space-between&quot; gutter=&quot;15&quot;&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot; class=&quot;active&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;5元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;10元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line"></span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;primary&quot; size=&quot;small&quot;&gt;2元&lt;/van-button&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br></pre></td></tr></table></figure>

<p><code>注：这样写，按钮看起来还是不平均配分,因没有给按钮设置宽度（width: 100%;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.van-button&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    margin-bottom: 18px;</span><br><span class="line">    background-color: #ffd898;</span><br><span class="line">    border-color: #ffd898;</span><br><span class="line">&#125;</span><br><span class="line">.active&#123;</span><br><span class="line">    .van-button&#123;</span><br><span class="line">        background-color: #ffab22;</span><br><span class="line">        border-color: #ffab22;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态绑定class"><a href="#动态绑定class" class="headerlink" title="动态绑定class"></a>动态绑定class</h4><p><code>:class</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:class=&quot;&#123;active: amount === i.amount&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h3><ol>
<li>vite-plugin-mock</li>
<li>mockjs</li>
<li>axios</li>
</ol>
<p><a href="https://www.jianshu.com/p/d812ce349265">mockjs介绍</a></p>
<p><a href="https://github.com/nuysoft/Mock/wiki/Getting-Started">https://github.com/nuysoft/Mock/wiki/Getting-Started</a></p>
<p><a href="http://mockjs.com/">mock官网</a></p>
<p><a href="http://mockjs.com/examples.html">mock示例</a></p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-mock mockjs  -D</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://github.com/vbenjs/vite-plugin-mock">vite-plugin-mock</a></strong></p>
<p><a href="https://github.com/vbenjs/vite-plugin-mock#usage">使用</a></p>
<h5 id="2-在vite-config-ts中引入"><a href="#2-在vite-config-ts中引入" class="headerlink" title="2.在vite.config.ts中引入"></a>2.在vite.config.ts中引入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; viteMockServe &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  vue(),</span><br><span class="line">  viteMockServe(&#123;</span><br><span class="line">    // default</span><br><span class="line">    mockPath: &#x27;mock&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h5 id="3-在项目根目录新建mock目录-mock-index-ts："><a href="#3-在项目根目录新建mock目录-mock-index-ts：" class="headerlink" title="3.在项目根目录新建mock目录-mock/index.ts："></a>3.在项目根目录新建mock目录-mock/index.ts：</h5><p><a href="https://github.com/vbenjs/vite-plugin-mock#mock-file-example">示例</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: &#x27;vben&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/post&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    timeout: 2000,</span><br><span class="line">    response: &#123;</span><br><span class="line">      code: 0,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;vben&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/text&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    rawResponse: async (req, res) =&gt; &#123;</span><br><span class="line">      let reqbody = &#x27;&#x27;</span><br><span class="line">      await new Promise((resolve) =&gt; &#123;</span><br><span class="line">        req.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class="line">          reqbody += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(&#x27;end&#x27;, () =&gt; resolve(undefined))</span><br><span class="line">      &#125;)</span><br><span class="line">      res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;)</span><br><span class="line">      res.statusCode = 200</span><br><span class="line">      res.end(`hello, $&#123;reqbody&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h5 id="4-安装axios"><a href="#4-安装axios" class="headerlink" title="4.安装axios"></a>4.安装axios</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure>

<h5 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">async function fn() &#123;</span><br><span class="line">  const &#123; data &#125; = await axios.get(&#x27;/api/get&#x27;)</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h5 id="6-使用mock来模拟更多数据"><a href="#6-使用mock来模拟更多数据" class="headerlink" title="6.使用mock来模拟更多数据"></a>6.使用mock来模拟更多数据</h5><h5 id="7-将mock模拟的数据放到接口返回中"><a href="#7-将mock模拟的数据放到接口返回中" class="headerlink" title="7.将mock模拟的数据放到接口返回中"></a>7.将mock模拟的数据放到接口返回中</h5><p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.ts</span><br><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line">var list = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    url: &#x27;/api/get&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        data: list</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// 定义数据类型</span><br><span class="line">var data = Mock.mock(&#123;</span><br><span class="line">  // 20条数据</span><br><span class="line">  &quot;data|20&quot;: [&#123;</span><br><span class="line">    // 商品种类</span><br><span class="line">    &quot;goodsClass&quot;: &quot;女装&quot;,</span><br><span class="line">    // 商品Id</span><br><span class="line">    &quot;goodsId|+1&quot;: 1,</span><br><span class="line">    //商品名称</span><br><span class="line">    &quot;goodsName&quot;: &quot;@ctitle(10)&quot;,</span><br><span class="line">    //商品地址</span><br><span class="line">    &quot;goodsAddress&quot;: &quot;@county(true)&quot;,</span><br><span class="line">    //商品等级评价★</span><br><span class="line">    &quot;goodsStar|1-5&quot;: &quot;★&quot;,</span><br><span class="line">    //商品图片</span><br><span class="line">    &quot;goodsImg&quot;: &quot;@Image(&#x27;100x100&#x27;,&#x27;@color&#x27;,&#x27;小甜甜&#x27;)&quot;,</span><br><span class="line">    //商品售价</span><br><span class="line">    &quot;goodsSale|30-500&quot;: 30</span><br><span class="line"></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">// 输出结果随机生成的数据（node index.js）</span><br><span class="line"> console.log(data);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/d8ca41e9bce4">vue项目，svn提交代码时忽略node_modules文件夹提交</a></p>
<h5 id="8-将数据和接口方法分开"><a href="#8-将数据和接口方法分开" class="headerlink" title="8.将数据和接口方法分开"></a>8.将数据和接口方法分开</h5><p>mock/data.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Mock from &#x27;mockjs&#x27;</span><br><span class="line"></span><br><span class="line">// mock的数据</span><br><span class="line">// 金额列表</span><br><span class="line">export const amountList = Mock.mock(&#123;</span><br><span class="line">    // 20条数据</span><br><span class="line">    &quot;amountList&quot;: [&#123;</span><br><span class="line">      &quot;amount&quot;: 2,</span><br><span class="line">      &quot;amountId&quot;: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>mock/index.ts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; MockMethod &#125; from &#x27;vite-plugin-mock&#x27;</span><br><span class="line">import &#123; amountList &#125; from &#x27;./data.js&#x27;</span><br><span class="line"></span><br><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">      url: &#x27;/api/getAmountList&#x27;,</span><br><span class="line">      method: &#x27;get&#x27;,</span><br><span class="line">      response: (&#123; query &#125;) =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          code: 0,</span><br><span class="line">          data: amountList,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">] as MockMethod[]</span><br></pre></td></tr></table></figure>

<h4 id="reactive的做法"><a href="#reactive的做法" class="headerlink" title="reactive的做法"></a>reactive的做法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// reactive的做法</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">const userinfo = reactive(&#123;</span><br><span class="line">    name: &#x27;&#x27;,</span><br><span class="line">    level: 0,</span><br><span class="line">    server_area: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">const &#123;name, level, server_area&#125; = toRefs(userinfo)</span><br><span class="line">axios.get(&#x27;/api/getUserInfo&#x27;).then(res =&gt; &#123;</span><br><span class="line">    const &#123; name, level, server_area &#125; =  res.data.data.userInfo</span><br><span class="line">    userinfo.name = name;</span><br><span class="line">    userinfo.level = level;</span><br><span class="line">    userinfo.server_area = server_area;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="ref的做法"><a href="#ref的做法" class="headerlink" title="ref的做法"></a>ref的做法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">// ref的做法</span><br><span class="line">const name = ref(&#x27;&#x27;);</span><br><span class="line">const server_area = ref(&#x27;&#x27;);</span><br><span class="line">const level = ref(0)</span><br><span class="line">axios.get(&#x27;/api/getUserInfo&#x27;).then(res =&gt; &#123;</span><br><span class="line">    const userinfo = res.data.data.userInfo;</span><br><span class="line">    name.value = userinfo.name;</span><br><span class="line">    level.value = userinfo.level;</span><br><span class="line">    server_area.value = userinfo.server_area;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="枚举的使用-enum"><a href="#枚举的使用-enum" class="headerlink" title="枚举的使用-enum"></a>枚举的使用-enum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 枚举</span><br><span class="line">enum HbType &#123;</span><br><span class="line">    &#x27;等级红包&#x27; = 1,</span><br><span class="line">    &#x27;充值红包&#x27; ,</span><br><span class="line">    &#x27;高级红包&#x27; ,</span><br><span class="line">&#125;</span><br><span class="line">enum HbIcon &#123;</span><br><span class="line">    &#x27;src/assets/images/hb_level.png&#x27; = 1,</span><br><span class="line">    &#x27;src/assets/images/hb_charge.png&#x27; ,</span><br><span class="line">    &#x27;src/assets/images/hb_senior.png&#x27; ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 红包数据</span><br><span class="line">// type:1 --等级红包</span><br><span class="line">// type:2 --充值红包</span><br><span class="line">// type:3 --高级红包</span><br><span class="line">export const hbData = Mock.mock(&#123;</span><br><span class="line">    hbData: &#123;</span><br><span class="line">        total: 300.00,</span><br><span class="line">        list: [&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 1,</span><br><span class="line">            amount: 50,</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 2,</span><br><span class="line">            amount: 100,</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            id: 10001,</span><br><span class="line">            type: 3,</span><br><span class="line">            amount: 150,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const hbList = ref([]);</span><br><span class="line">axios.get(&#x27;/api/getHbData&#x27;).then(res =&gt; &#123;</span><br><span class="line">    hbList.value.push(...res.data.data.hbData.list);</span><br><span class="line">    console.log(hbList)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 结构</span><br><span class="line">&lt;van-cell </span><br><span class="line">    class=&quot;withdraw-li&quot;</span><br><span class="line">    :title=&quot;&#x27;+ &#x27; + i.amount +&#x27;元&#x27;&quot;</span><br><span class="line">    :label=&quot;HbType[i.type]&quot;</span><br><span class="line">    center </span><br><span class="line">    v-for=&quot;i in hbList&quot;</span><br><span class="line">    :key=&quot;i.id&quot;</span><br><span class="line">&gt;  </span><br><span class="line">    &lt;template #icon&gt;</span><br><span class="line">        &lt;img :src=&quot;HbIcon[i.type]&quot; class=&quot;red-packet&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #value&gt;</span><br><span class="line">        &lt;router-link to=&quot;/withdraw&quot;&gt;提现 &amp;gt;&lt;/router-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br></pre></td></tr></table></figure>



<h4 id="解决报错信息"><a href="#解决报错信息" class="headerlink" title="解决报错信息"></a>解决报错信息</h4><p>控制台报以下警告信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Added non-passive event listener to a scroll-blocking ‘touchstart‘ event. Consider marking event...</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 安装插件</span><br><span class="line">npm install -S default-passive-events</span><br><span class="line">// 在main.js引入</span><br><span class="line">import &#x27;default-passive-events&#x27;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/yjl13598765406/article/details/125496865">参考</a></p>
<h4 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h4><p><code>注意： 写v-for循环时，要对循环的列表进行判断，以免数据还没有返回就进行渲染，获取不到值</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot; v-if=&quot;list.length &gt; 0&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>Property &#39;id&#39; does not exist on type &#39;never&#39;.</code></p>
<p>解决：加上类型限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface List &#123;</span><br><span class="line">   amount: number;</span><br><span class="line">   date: string</span><br><span class="line">   id: number</span><br><span class="line">   type: number</span><br><span class="line">&#125;</span><br><span class="line">const list = ref&lt;List[]&gt;([])</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.x知识图谱</title>
    <url>/2022/08/25/Vue3-x%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_01%E5%AD%A6%E5%89%8D%E4%BA%86%E8%A7%A3.png" alt="学前了解"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_02%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png" alt="基础知识"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_03%E7%BB%84%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95.png" alt="组件相关语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_04%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.png" alt="高级语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_05%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95.png" alt="高级语法"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/V1_06%E9%85%8D%E5%A5%97%E5%B7%A5%E5%85%B7.png" alt="配套工具"></p>
]]></content>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目设置每个页面的title</title>
    <url>/2020/03/19/Vue%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84title/</url>
    <content><![CDATA[<h5 id="1、在项目目录下安装vue-wechat-title"><a href="#1、在项目目录下安装vue-wechat-title" class="headerlink" title="1、在项目目录下安装vue-wechat-title"></a>1、在项目目录下安装vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vue-wechat-title --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="2、在main-js中-使用vue-wechat-title"><a href="#2、在main-js中-使用vue-wechat-title" class="headerlink" title="2、在main.js中 使用vue-wechat-title"></a>2、在main.js中 使用vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(require(&#x27;vue-wechat-title&#x27;))     //实例化参数</span><br></pre></td></tr></table></figure>
<h5 id="3、在router的配置中设置"><a href="#3、在router的配置中设置" class="headerlink" title="3、在router的配置中设置"></a>3、在router的配置中设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      path: &#x27;/home&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: &#x27;主页&#x27;       //页面标题</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h5 id="4、在每个vue页面中加入"><a href="#4、在每个vue页面中加入" class="headerlink" title="4、在每个vue页面中加入 "></a>4、在每个vue页面中加入 <div v-wechat-title="$route.meta.title"></div></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;content content-box&quot;&gt;</span><br><span class="line">      &lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>


<h6 id="【参考】：-vue项目设置每个页面的title"><a href="#【参考】：-vue项目设置每个页面的title" class="headerlink" title="【参考】： vue项目设置每个页面的title"></a>【参考】： <a href="https://www.cnblogs.com/itgezhu/p/10817502.html">vue项目设置每个页面的title</a></h6>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Wampserver-笔记</title>
    <url>/2021/01/18/Wampserver-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>注：如果重新有问题，启动服务一直是黄色，可以卸载了wamp，然后重启电脑，再重装</p>
<h4 id="phpmyadmin默认SQL账号密码"><a href="#phpmyadmin默认SQL账号密码" class="headerlink" title="phpmyadmin默认SQL账号密码:"></a>phpmyadmin默认SQL账号密码:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号：root，密码为空</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/note1.png" alt="phpmyadmin默认SQL账号密码"></p>
<h4 id="虚拟目录的配置"><a href="#虚拟目录的配置" class="headerlink" title="虚拟目录的配置"></a>虚拟目录的配置</h4><p>修改默认网站目录</p>
<p>第一步：修改d:\wamp\bin\apache\Apache2.4.9\conf\httpd.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找： DocumentRoot &quot;c:/wamp/www/&quot;</span><br><span class="line">修改： DocumentRoot &quot;d:/www/&quot;</span><br><span class="line">查找： &lt;Directory &quot;c:/wamp/www/&quot;&gt;</span><br><span class="line">修改： &lt;Directory &quot;d:/www/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：修改wampmanager.ini和wampmanager.tpl</p>
<p>1、修改c:\wamp\wampmanager.ini:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)打开：c:\wamp\wampmanager.ini</span><br><span class="line">(2)查找：Type: item; Caption: &quot;www 目录&quot;; Action: shellexecute; FileName: &quot;c:/wamp/www&quot;; Glyph: 2</span><br><span class="line">(3)修改：Type: item; Caption: &quot;www 目录&quot;; Action: shellexecute; FileName: &quot;d:/www&quot;; Glyph: 2</span><br></pre></td></tr></table></figure>

<p>2、修改c:\wamp\wampmanager.tpl：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)打开：c:\wamp\wampmanager.tpl</span><br><span class="line">(2)查找：Type: item; Caption: &quot;$&#123;w_wwwDirectory&#125;&quot;; Action: shellexecute; FileName: &quot;$&#123;wwwdir&#125;&quot;; Glyph: 2</span><br><span class="line">(3)修改：Type: item; Caption: &quot;$&#123;w_wwwDirectory&#125;&quot;; Action: shellexecute; FileName: &quot;d:/www&quot;; Glyph: 2</span><br></pre></td></tr></table></figure>

<h4 id="修改默认项目目录"><a href="#修改默认项目目录" class="headerlink" title="修改默认项目目录"></a>修改默认项目目录</h4><p>1、修改httpd.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;D:/Work/&quot;</span><br><span class="line">&lt;Directory &quot;D:/Work/&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>2、修改httpd-vhost.conf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	ServerName localhost</span><br><span class="line">	ServerAlias localhost</span><br><span class="line">	DocumentRoot D:/Work/</span><br><span class="line">	&lt;Directory  &quot;D:/Work/&quot;&gt;</span><br><span class="line">		Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">		AllowOverride All</span><br><span class="line">		Require local</span><br><span class="line">	&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h4 id="本地项目-配置服务器访问"><a href="#本地项目-配置服务器访问" class="headerlink" title="本地项目-配置服务器访问"></a>本地项目-配置服务器访问</h4><p>1、配置host（C:\Windows\System32\drivers\etc）</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">192.168.1.49    www.web.com</span><br></pre></td></tr></table></figure>

<p>2、配置httpd-vhosts.conf（wampserver\bin\apache\apache2.4.23\conf\extra\httpd-vhosts.conf）</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">listen 8081</span><br><span class="line">&lt;VirtualHost *:8081&gt;</span><br><span class="line">    ServerName www.web.com</span><br><span class="line">    DocumentRoot &quot;E:/wampserver/www/web&quot;</span><br><span class="line">    &lt;Directory &quot;E:/wampserver/www/web&quot;&gt;</span><br><span class="line">      Options Indexes FollowSymLinks</span><br><span class="line">      AllowOverride All</span><br><span class="line">      Order allow,deny</span><br><span class="line">      Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<p>3、访问的时候，使用<a href="http://www.web.com来访问本地项目/">www.web.com来访问本地项目</a></p>
<h4 id="Apache相对路径文件的放置"><a href="#Apache相对路径文件的放置" class="headerlink" title="Apache相对路径文件的放置"></a>Apache相对路径文件的放置</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/Wampserver-%E7%AC%94%E8%AE%B0/note2.png" alt="Apache相对路径文件的放置"></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Wampserver</category>
      </categories>
      <tags>
        <tag>Wampserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端JavaScript高级框架</title>
    <url>/2021/01/21/Web%E5%89%8D%E7%AB%AFJavaScript%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>课程链接：<a href="https://ke.qq.com/course/232676">https://ke.qq.com/course/232676</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web阅读器开发-笔记</title>
    <url>/2021/01/29/Web%E9%98%85%E8%AF%BB%E5%99%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><a href="https://www.imooc.com/video/17794">课程链接</a></p>
<h4 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h4><ul>
<li>了解阅读器工作原理，了解epub格式的解析原理</li>
<li>运用Vue.js+epub.js实现一个简单的阅读器</li>
<li>实现阅读器的基础功能，如字号选择、背景色选择等</li>
</ul>
<h4 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h4><ol>
<li>阅读器原理学习</li>
<li>搭建vue-cli环境</li>
<li>编写阅读器源码</li>
<li>总结学习知识点</li>
</ol>
<h4 id="知识点解析"><a href="#知识点解析" class="headerlink" title="知识点解析"></a>知识点解析</h4><h5 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h5><ul>
<li><p>阅读器的工作原理</p>
<ul>
<li><p>工作流程</p>
</li>
<li><p>阅读器引擎</p>
</li>
</ul>
</li>
<li><p>常见电子书格式</p>
</li>
<li><p>epub格式电子书解析原理</p>
<ul>
<li>mimetype</li>
<li>container.xml</li>
<li>content.opf</li>
<li>toc.ncx</li>
</ul>
</li>
</ul>
<h5 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h5><ul>
<li>transition过渡</li>
<li>组件化</li>
<li>class与style</li>
<li>绑定父组件与子组件通信</li>
<li>子组件与父组件通信</li>
<li>nextTick0方法</li>
<li>dom操作</li>
</ul>
<h5 id="epub-js"><a href="#epub-js" class="headerlink" title="epub.js"></a>epub.js</h5><ul>
<li>epub下载</li>
<li>Book</li>
<li>Rendition</li>
<li>Theme</li>
</ul>
<h4 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h4><ul>
<li>import</li>
<li>function</li>
<li>mixin</li>
<li>变量</li>
</ul>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul>
<li>伪类和伪元素</li>
<li>resetcss</li>
<li>定位</li>
<li>过渡动画</li>
<li>flex布局</li>
</ul>
<h4 id="阅读器工作原理简介"><a href="#阅读器工作原理简介" class="headerlink" title="阅读器工作原理简介"></a>阅读器工作原理简介</h4><ol>
<li><p>电子书</p>
<ul>
<li><p>txt</p>
</li>
<li><p>pdf</p>
</li>
<li><p>epub</p>
</li>
<li><p>mobi</p>
</li>
<li><p>…..</p>
</li>
</ul>
</li>
<li><p>阅读器引擎</p>
<p>2.1 解析</p>
<ul>
<li>书名</li>
<li>作者</li>
<li>目录</li>
<li>封面</li>
<li>章节</li>
</ul>
<p>2.2 渲染</p>
</li>
<li><p>功能</p>
<ul>
<li>字号</li>
<li>背景色</li>
<li>目录</li>
<li>书签</li>
<li>笔记</li>
<li>…..</li>
</ul>
</li>
</ol>
<h4 id="ePub和mobi"><a href="#ePub和mobi" class="headerlink" title="ePub和mobi"></a>ePub和mobi</h4><ul>
<li>ePub(Electronic Publication)电子出版物</li>
<li>mobi是Amazon Kindle的电子书格式</li>
</ul>
<h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><ol>
<li>开发准备</li>
<li>vue-cli</li>
<li>依赖包下载</li>
<li>项目配置</li>
<li>阅读器解析</li>
<li>阅读器渲染</li>
<li>翻页功能</li>
<li>字号背景</li>
<li>进度条</li>
<li>目录</li>
</ol>
<h4 id="开发准备-搭建Vue脚手架"><a href="#开发准备-搭建Vue脚手架" class="headerlink" title="开发准备+搭建Vue脚手架"></a>开发准备+搭建Vue脚手架</h4><ul>
<li>安装Node.js和Vue.js环境</li>
<li>通过vue init搭建Vue脚手架</li>
<li>通过VSCode打开项目，使用npm run dev启动项目</li>
</ul>
<blockquote>
<p>下载脚手架模板： <a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a></p>
</blockquote>
<h4 id="viewport配置"><a href="#viewport配置" class="headerlink" title="viewport配置"></a>viewport配置</h4><ul>
<li>viewport用来设置用户在手机上的可视区域</li>
<li>width=device-width :指定viewport宽度为设备宽度，initial-scale=1.0∶指定默认缩放比例为1:1</li>
<li>通过maximum-scale和minimum-scale限定屏幕缩放比例为1:1通过user-scalable限制用户对屏幕进行缩放</li>
</ul>
<blockquote>
<p>在dom加载完毕之后，动态设置根元素的font-size</p>
</blockquote>
<h4 id="rem配置"><a href="#rem配置" class="headerlink" title="rem配置"></a>rem配置</h4><ul>
<li><p>rem是css3新增的一个相对长度单位</p>
</li>
<li><p>rem的值相当于根元素font-size值的倍数</p>
<p>1rem =根元素font-size<br>2rem =根元素font-size * 2</p>
</li>
<li><p>DOMContentLoaded事件动态设置根元素font-size</p>
<p>html.style.fontSize = window.innerWidth / 10 + ‘px’</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;name: &#x27;App&#x27;&#125;</span><br><span class="line">document.addEventListener(&#x27;DOMContentLoaded&#x27;,()=&gt; &#123;</span><br><span class="line">    const html = document.querySelector(&#x27;html&#x27;)</span><br><span class="line">    let fontSize = window.innerwidth / 10</span><br><span class="line">    fontSize = fontSize &gt; 50 ? 50 : fontSize</span><br><span class="line">    html.style.fontSize = fontSize + &#x27;px&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="reset-scsS和global-scss"><a href="#reset-scsS和global-scss" class="headerlink" title="reset.scsS和global.scss"></a>reset.scsS和global.scss</h4><ul>
<li>reset.scss的目的是为了消除不同浏览器默认样式的不一致性</li>
<li>global.scss规定了整个站点的公共样式、公共方法和公共参数等</li>
<li>实现px2rem方法，将px转化为rem</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reset.css :https://meyerweb.com/eric/tools/css/reset/</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>webpack起步</title>
    <url>/2019/11/20/Webpack/</url>
    <content><![CDATA[<p><a href="https://www.webpackjs.com/">webpack中文官网</a></p>
<h4 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h4><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><ol>
<li><p>新建目录文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir webpack-demo</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd webpack-demo</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成package.json文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装webpack</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行webpack命令，如果可以执行，则安装成功</p>
<p>注意：webpack为4+版本以上，需要安装webpack-cli ,安装本地webpack-cli之前，要安装全局</p>
</blockquote>
</li>
<li><p>安装全局webpack-cli</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack-cli –g</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装本地webpack-cli</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>安装淘宝镜像（ 如果网速不太好的情况下，可以选择安装淘宝镜像）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>快速安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> webpack-demo &amp;&amp; <span class="built_in">cd</span> webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>贯穿整个指南的是，我们将使用 diff 块，来显示我们对目录、文件和代码所做的更改。</p>
</blockquote>
<h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><p>现在我们将创建以下目录结构、文件和内容：</p>
<h6 id="project"><a href="#project" class="headerlink" title="project"></a>project</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- index.html</span><br><span class="line">+ |- /src</span><br><span class="line">+   |- index.js</span><br></pre></td></tr></table></figure>
<h6 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">component</span></span>() &#123;</span><br><span class="line">  var element = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  // Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的</span><br><span class="line">  element.innerHTML = _.<span class="built_in">join</span>([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;webpack&#x27;</span>], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.body.appendChild(component());</span><br></pre></td></tr></table></figure>
<h6 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;title&gt;起步&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://unpkg.com/lodash@4.16.6&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;./src/index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们还需要调整 package.json 文件，以便确保我们安装包是私有的(private)，并且移除 main 入口。这可以防止意外发布你的代码。</p>
</blockquote>
<p><em><div style="background:#DCF2FD;color:#618ca0;padding:6px;">如果你想要了解 package.json 内在机制的更多信息，我们推荐阅读 <a href="https://docs.npmjs.com/files/package.json" title="" target="">npm 文档</a>。</div></em></p>
<h6 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;webpack-demo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">+   <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">-   <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^2.0.9&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;dependencies&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在此示例中，<code>&lt;script&gt;</code> 标签之间存在隐式依赖关系。<code>index.js</code> 文件执行之前，还依赖于页面中引入的 <code>lodash</code>。之所以说是隐式的是因为 <code>index.js</code> 并未显式声明需要引入 <code>lodash</code>，只是假定推测已经存在一个全局变量 <code>_</code>。</p>
</blockquote>
<p>使用这种方式去管理 JavaScript 项目会有一些问题：</p>
<blockquote>
<ul>
<li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li>
<li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li>
<li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li>
</ul>
</blockquote>
<p>让我们使用 webpack 来管理这些脚本。</p>
<h4 id="关于webpack使用CleanWebpackPlugin插件时报错"><a href="#关于webpack使用CleanWebpackPlugin插件时报错" class="headerlink" title="关于webpack使用CleanWebpackPlugin插件时报错"></a>关于webpack使用CleanWebpackPlugin插件时报错</h4><div style="color:red;">CleanWebpackPlugin is not a constructor</div>
错误写法：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const CleanWebpackPlugin = require(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">plugins: [</span><br><span class="line">    new CleanWebpackPlugin([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
正确写法：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const &#123; CleanWebpackPlugin &#125; = require(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">plugins: [</span><br><span class="line">    new CleanWebpackPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="自动化构建工具webpack-学习笔记"><a href="#自动化构建工具webpack-学习笔记" class="headerlink" title="自动化构建工具webpack-学习笔记"></a>自动化构建工具webpack-学习笔记</h4><h5 id="1、了解webpack相关"><a href="#1、了解webpack相关" class="headerlink" title="1、了解webpack相关"></a>1、了解webpack相关</h5><ul>
<li><p>什么是webpack</p>
<ul>
<li><p>webpack是一个核块打包器(bundLer)</p>
</li>
<li><p>在webpack看来，前端的所有资源文件(js/json/css/img/Less/ …)都会作为模块处理它将根据模块的依赖关系进行静态分析，生成对应的静态资源</p>
</li>
</ul>
</li>
<li><p>理解Loader</p>
<ul>
<li><p>webpack本身只能加载JS/JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的Loader进行转换/加载</p>
</li>
<li><p>Loader本身也是运行在node.js 环境中的Javascript模块</p>
</li>
<li><p>它本身是一个函数，接受源文件作为参数，返回转换的结果</p>
</li>
<li><p>loader一般以xxx-Loader的方式命名，xxx代表了这个Loader要做的转换功能，比如json-Loader</p>
</li>
</ul>
</li>
<li><p>配置文件(默认)</p>
<ul>
<li>webpack.config.js ：是一个node模块，返回一个 json格式的配置信息对象</li>
</ul>
</li>
<li><p>插件</p>
<ul>
<li><p>插件件可以完成一些Loader不能完成的功能。</p>
</li>
<li><p>插件的使用一股是在webpack的配置信息plLugins 选项中指定。</p>
</li>
<li><p>cLeanlebpackPLugin：自动清除指定文件夹资源</p>
</li>
<li><p>HtmLlwebpackPLugin：自动生HTML文件并</p>
</li>
<li><p>uglifyJSPLugin ：压的s文件</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Webpack叫模块打包器，它认为所有文件都是模块，一个除外（html）</p>
<p>它本身只加载js和json，所以需要loader（js库）</p>
<p>MODULES WITH DEPENDENCIES：模块之间的依赖关系</p>
<p>Css要依赖图片，因为要引入它，也就是说，截图中，箭头指向的东西是它依赖的东西。</p>
<p>STATIC ASSETS：静态资源</p>
</blockquote>
<p>从webpack v4.0.0开始，可以不用引入一个配置文件。然而，webpack仍然还是<code>高度可配置的</code>。在开始前你需要先理解四个<code>核心概念</code>︰</p>
<ul>
<li>入口(entry)</li>
<li>输出(output) </li>
<li>loader</li>
<li>插件(plugins)</li>
</ul>
<h5 id="2、学习文档"><a href="#2、学习文档" class="headerlink" title="2、学习文档"></a>2、学习文档</h5><ul>
<li>webpack官网: http: / /webpack.github.io/</li>
<li>webpack3文档(英文): https : //webpack.js.org/</li>
<li>webpack3文档(中文): https: //doc.webpack-china.org/</li>
</ul>
<h5 id="3、开启项目"><a href="#3、开启项目" class="headerlink" title="3、开启项目"></a>3、开启项目</h5><p>初始化项目：</p>
<ul>
<li><p>新建目录文件夹（webpack_test）</p>
</li>
<li><p>生成package.json文件</p>
</li>
<li><p>安装webpack</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g       // 全局安装</span><br><span class="line">npm install webpack --save-dev     // 局部安装</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4、编译打包应用"><a href="#4、编译打包应用" class="headerlink" title="4、编译打包应用"></a>4、编译打包应用</h5><ul>
<li>创建入口src/js/：entry.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.write(&quot;entry.js is work&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建主页面: dist/index.html</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>编译js</p>
<p>webpack src/js/entry.js dist/bundle.js</p>
</li>
<li><p>查看页面效果</p>
</li>
</ul>
<h5 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);    // node内置的模块用来去设置路径的;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">	entry: &quot;./src/index.js&#x27;,</span><br><span class="line">	output: &#123;</span><br><span class="line">		filename: &quot;bundle.js &#x27;,</span><br><span class="line">		path: path.resolve(_dirname,&#x27;dist&#x27;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5、打包应用"><a href="#5、打包应用" class="headerlink" title="5、打包应用"></a>5、打包应用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h4 id="6、打包css和图片文件"><a href="#6、打包css和图片文件" class="headerlink" title="6、打包css和图片文件"></a>6、打包css和图片文件</h4><ul>
<li><p>安装样式的loader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i css-loader style-loader --save-dev</span><br><span class="line">npm i file-loader url-loader --save-dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：url-loader是对象file-loader的上层封装，使用时需配合file-loader使用</p>
</blockquote>
</li>
<li><p>配置loader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">	module: &#123;</span><br><span class="line">		rules: [</span><br><span class="line">			&#123;</span><br><span class="line">				test: /\.css$/,      // $是指以.css结尾的文件</span><br><span class="line">				use: [&#x27;style-loader&quot; , &quot;css-loader&#x27;]</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="7、自动编译打包"><a href="#7、自动编译打包" class="headerlink" title="7、自动编译打包"></a>7、自动编译打包</h4><ul>
<li><p>利用webpack开发服务器工具： webpack-dev-server</p>
</li>
<li><p>下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devserver: &#123;</span><br><span class="line">	contentBase: &#x27;./ dist&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>package配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;start&quot; : &quot;webpack-dev-server --open&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译打包应用并运行</p>
</li>
</ul>
<h4 id="8、使用webpack插件"><a href="#8、使用webpack插件" class="headerlink" title="8、使用webpack插件"></a>8、使用webpack插件</h4><ul>
<li><p>常见的插件</p>
<ul>
<li><p>使用html-webpack-plugin根据模板html生成引入script的页面</p>
</li>
<li><p>使用clean-webpack-plugin清除dist文件夹</p>
</li>
</ul>
</li>
<li><p>下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin clean-webpack-plugin</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const HtmLwebpackPlugin = require(&#x27;html-webpack-plugin&#x27;); // 自动生成htmL文件</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="9、热加载"><a href="#9、热加载" class="headerlink" title="9、热加载"></a>9、热加载</h4><hr>
<h4 id="与gulp的比较"><a href="#与gulp的比较" class="headerlink" title="与gulp的比较"></a>与gulp的比较</h4><ul>
<li>gulp比较灵活  未封装</li>
<li>webpack 封装好的</li>
</ul>
<ol>
<li>创建目录（webpack-vue）</li>
<li>切换到目录</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd webpack-vue</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>生成package.json文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm init</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 entry point: (index.js)   改为main.js    // 这个是入口文件</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改package.json文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将script修改为下面这样</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --hot --port 8888&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装vue等相关模板</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install vue --save  </span><br><span class="line">或</span><br><span class="line">cnpm i vue -S</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>安装wepack和webpack-dev-server</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i -D webpack webpack-dev-server</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>安装其他依赖包</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i -D vue-loader vue-html-loader vue-style-loader vue-template-compiler</span><br><span class="line">cnpm i -D css-loader file-loader style-loader</span><br><span class="line">cnpm i -D babel-loader babel-core babel-preset-env</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>配置webpack</li>
</ol>
<p><code>webpack.config.js：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;       			<span class="comment">// 模块</span></span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&#x27;./main.js&#x27;</span>,  			<span class="comment">// 入口文件</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">output</span>:&#123;              		<span class="comment">// 将VUE文件编译输出</span></span><br><span class="line">		<span class="attr">path</span>: __dirname, 				<span class="comment">// 项目根路径 是node.js中的一个全局变量,它指向当前执行脚本所在的目录</span></span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&#x27;build.js&#x27;</span>    <span class="comment">// 所有的JS放入build.js</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="attr">module</span>:&#123;</span><br><span class="line">		<span class="attr">rules</span>:[&#123;                  <span class="comment">// 加载规则</span></span><br><span class="line">			<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,         <span class="comment">// vue文件</span></span><br><span class="line">			<span class="attr">loader</span>:<span class="string">&#x27;vue-loader&#x27;</span>    <span class="comment">// 加载器</span></span><br><span class="line">		&#125;,&#123;</span><br><span class="line">			<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">			<span class="attr">loader</span>:<span class="string">&#x27;babel-loader&#x27;</span>,       <span class="comment">// ES6转换，所有的ES6文件加载及转换</span></span><br><span class="line">			<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>     <span class="comment">// 排除这个目录</span></span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>编写入口文件(main.js）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// h相当于创建一个element</span></span><br><span class="line">  <span class="comment">// 相当于下面： 渲染这个App</span></span><br><span class="line">  <span class="comment">// render:function(createElement) &#123;</span></span><br><span class="line">  <span class="comment">//     return createElement(App)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p><a href="http://www.ybao.org/book/webpack/webpack-2889.html">Webpack手册介绍-源宝</a></p>
<h3 id="Webpack是什么"><a href="#Webpack是什么" class="headerlink" title="Webpack是什么?"></a>Webpack是什么?</h3><ol>
<li>模块化</li>
<li>自定义文件或npm install</li>
<li>静态文件模块化</li>
<li>借助于插件和加载器</li>
</ol>
<h3 id="Webpack的优势"><a href="#Webpack的优势" class="headerlink" title="Webpack的优势"></a>Webpack的优势</h3><p>主要体现在以下几点：</p>
<ol>
<li>代码分离</li>
<li>装载器(css , sass ，jsx等等)</li>
<li>智能解析(require(“./templatel/“ + names + “.ejs”))</li>
</ol>
<h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g webpack</span><br><span class="line">npm install webpack-dev-server</span><br></pre></td></tr></table></figure>

<h3 id="创建项目步骤"><a href="#创建项目步骤" class="headerlink" title="创建项目步骤"></a>创建项目步骤</h3><ol>
<li>安装webpack</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack</span><br></pre></td></tr></table></figure>

<ol>
<li>新建一个文件夹webpack-my-app (切换到这个目录）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...&gt;cd 目录\webpack-my-app</span><br></pre></td></tr></table></figure>

<ol>
<li>生成package.json</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; cnpm init</span><br><span class="line"></span><br><span class="line">package <span class="attr">name</span>:(webpack-my-app)</span><br><span class="line"><span class="attr">version</span>: (<span class="number">1.0</span><span class="number">.0</span>)</span><br><span class="line">description：应用于webpackentry </span><br><span class="line">point：(index.<span class="property">js</span>)</span><br><span class="line">test <span class="attr">command</span>:</span><br><span class="line">git <span class="attr">repository</span>:</span><br><span class="line"><span class="attr">keywords</span>: webpack打包工具  webpack-dev-serve</span><br><span class="line"><span class="attr">author</span>: winney</span><br><span class="line">1<span class="attr">icense</span>: (<span class="variable constant_">ISC</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>新建一个入口文件(app.js）：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我是入口文件,打包输出bundle.js&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>执行打包命令：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack  app.<span class="property">js</span>  bundle.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p>（提示需要安装 webpack-cli, 在当前目录，命令：cnpm install webpack-cli -D）</p>
<p>在页面中引用bundle.js：(会生成一个bundle.js）</p>
<p>如果期间报错，查看webpack的版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<p>结果报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">The</span> <span class="variable constant_">CLI</span> moved into a separate <span class="attr">package</span>: webpack-c1i. .. ,.<span class="number">.6</span></span><br><span class="line">please insta11<span class="string">&#x27;webpack-cli&#x27;</span> <span class="keyword">in</span> addition to webpack itself to use the <span class="variable constant_">CLI</span>.</span><br><span class="line">-&gt; when using <span class="attr">npm</span>: npm insta11 webpack-cli-D</span><br><span class="line">-&gt;when using <span class="attr">yarn</span>: yarn add webpack-cli -D</span><br></pre></td></tr></table></figure>

<p>执行了cnpm insta11 webpack-cli-D，输入webpack -v，还是报一样的错。</p>
<p><strong>【解决方案】</strong></p>
<p><a href="https://www.cnblogs.com/cythia/p/8495341.html">webpack4.0.1安装问题及解决方法</a></p>
<p><strong>全局安装一下webpack-cli</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<p>当安装完之后,就能显示版本号了,</p>
<p>注意点:安装好之后,打包文件的时候必须在webpack.config.js文件里面配置入口出口文件来打包,不然的话会报错.使用的时候尽量还是不要在生产环境使用.官网上也说了一句话:安装这些最新体验版本时要小心！它们可能仍然包含 bug，因此不应该用于生产环境。</p>
<p><strong>在项目目录下要本地安装webpack-cli -D</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install webpack-cli -D</span><br></pre></td></tr></table></figure>

<ol>
<li>app.js引入people.js（如果引入的是自己创建的文件，必须使用./，即使是在同一个目录下，也要使用./）</li>
</ol>
<p>people.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.exports = &quot;Hello EveryBody ! ! ! ! !&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHello</span>(<span class="params"> </span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Hello Everyone welcome to Lanou Class&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">getHello</span>( );</span><br></pre></td></tr></table></figure>

<p>app.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = <span class="built_in">require</span>(<span class="string">&#x27;./people.js&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> $ = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $(&quot;body&quot;).append(&quot;&lt;h1&gt;&quot; + people[0].name + &quot;&lt;/h1&gt;&quot;);</span></span><br><span class="line"></span><br><span class="line">$.<span class="title function_">each</span>(people, <span class="keyword">function</span>(<span class="params">key, value</span>)&#123;</span><br><span class="line">	$(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;h1&gt;&quot;</span> + people [key].<span class="property">name</span> + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people[<span class="number">1</span>].<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<h3 id="如何将js文件进行模块化"><a href="#如何将js文件进行模块化" class="headerlink" title="如何将js文件进行模块化"></a>如何将js文件进行模块化</h3><ul>
<li>module.exports     require( )</li>
<li>自定义文件，引入时需要使用./</li>
<li>npm下载的文件，不需要./</li>
</ul>
<h3 id="如何使用第三方"><a href="#如何使用第三方" class="headerlink" title="如何使用第三方"></a>如何使用第三方</h3><ol>
<li>在npm服务器中下载第三方</li>
<li>require()第三方</li>
</ol>
<h3 id="如何将静态文件模块化"><a href="#如何将静态文件模块化" class="headerlink" title="如何将静态文件模块化"></a>如何将静态文件模块化</h3><ol>
<li>创建css文件</li>
<li>下载对应的加载器</li>
<li>修饰我们的css文件   !css-loader</li>
</ol>
<h3 id="如何配置webpack-config-js"><a href="#如何配置webpack-config-js" class="headerlink" title="如何配置webpack.config.js"></a>如何配置webpack.config.js</h3><ul>
<li>出口文件</li>
<li>入口文件</li>
<li>模块</li>
<li>加载器</li>
</ul>
<h3 id="如何使用package-json启动项目"><a href="#如何使用package-json启动项目" class="headerlink" title="如何使用package.json启动项目"></a>如何使用package.json启动项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scripts <span class="string">&quot;build&quot;</span> <span class="string">&quot;start&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="如何将es6转换为es5"><a href="#如何将es6转换为es5" class="headerlink" title="如何将es6转换为es5"></a>如何将es6转换为es5</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">babel babel-core babel-loader. . .</span><br></pre></td></tr></table></figure>

<ol>
<li>全局安装 ：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack@<span class="number">3.8</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<ol>
<li>生成package.json：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm init </span><br></pre></td></tr></table></figure>

<ol>
<li>局部安装</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save-devwebpack@<span class="number">3.8</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<ol>
<li>新建一个文件夹 src，里面放app.js（入口文件）</li>
<li>新建一个dist文件夹，存放输出的文件</li>
<li>在开发环境中，总是要一边改，一边看转化效果吧，webpack 也能办到，多加一个参数就好。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack --watch ./src/app.<span class="property">js</span> ./dist/app.<span class="property">bundle</span>.<span class="property">js</span>（实时监听）</span><br></pre></td></tr></table></figure>

<ol>
<li>在生产环境，或线上，我们肯定不希望这么大的体积，毕竟体积越大，带宽浪费就越多呀，下载也越慢。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpack -p ./src/app.<span class="property">js</span> ./dist/app.<span class="property">bundle</span>.<span class="property">js</span> 【压缩】</span><br></pre></td></tr></table></figure>

<p>如果要发布到线上环境，我们要把它压缩一下的。</p>
<p>而 webpack 本来就有这样的功能，也只是一个参数 -p</p>
<hr>
<h3 id="配置文件的设置"><a href="#配置文件的设置" class="headerlink" title="配置文件的设置"></a>配置文件的设置</h3><h4 id="创建配置文件-webpack-config-js"><a href="#创建配置文件-webpack-config-js" class="headerlink" title="创建配置文件 webpack.config.js"></a>创建配置文件 webpack.config.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// entry 表示源文件，output 这边表示的是输出的目标文件。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;./dist/app.bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>直接在终端上输入 webpack 就可以了。webpack 命令会去找 webpack.config.js 文件，并读取它的内容（源文件和目标文件），最后进行相应的处理。</p>
<h4 id="改造-package-json-的-scripts-部分"><a href="#改造-package-json-的-scripts-部分" class="headerlink" title="改造 package.json 的 scripts 部分"></a>改造 package.json 的 scripts 部分</h4><p>就是可以放一些常用的命令行脚本，比如我们可以把我们经常要用的 webpack 命令放到这里来。</p>
<p>我把它改了一下，变成类似下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello-wepback&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack -d --watch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prod&quot;</span>: <span class="string">&quot;webpack -p&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^3.8.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改动的内容主要是增加了下面几行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack -d --watch&quot;</span>,</span><br><span class="line">   <span class="string">&quot;prod&quot;</span>: <span class="string">&quot;webpack -p&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>怎么用呢？</p>
<p>很简单，分别是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev </span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run prod </span><br></pre></td></tr></table></figure>

<hr>
<p>因为 index.html 文件太死了，连 js 文件都写死了，有时候引用的 js 文件是动态变化的呢？</p>
<p>打个比方，类似下面这种例子：</p>
<p>而且还不确定有多少个。</p>
<p>还有一种情况，有时候为了更好的 cache 处理，文件名还带着 hash，例如下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">main.9046fe2bf8166cbe16d7.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p>这个 hash 是文件的 md5 值，随着文件的内容而变化，你总不能每变化一次，就改一下 index.html 文件吧？</p>
<p>效率太低！</p>
<p>下面我们要使用一个 webpack 的插件 <a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a>  来更好的处理这个问题。</p>
<h4 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install html-webpack-plugin --save-dev</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>webpack.config.js 文件改一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后，运行一下上文所说的 npm run dev 命令，你会发现在 dist 目录生成了 index.html 文件</p>
<p>要改变 title 很简单，上文提到 HtmlWebpackPlugin 这个方法可以传入很多参数的，下面这样就可以解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>配置文件修改了，配置文件是不会自动构建的，要重新运行 npm run dev</p>
<h4 id="制作一个新模板"><a href="#制作一个新模板" class="headerlink" title="制作一个新模板"></a>制作一个新模板</h4><p>新建 src/index.html 文件</p>
<p>把 webpack.config.js 更改如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p>
<p>说白了，就是 loader 类似于 task，能够处理文件，比如把 Scss 转成 CSS，TypeScript 转成 JavaScript 等。</p>
<p>再不明白的话，还是用实例来说明吧。（其实它的概念并不重要，你会用就行）</p>
<h4 id="用-css-loader-和-style-loader-处理-CSS"><a href="#用-css-loader-和-style-loader-处理-CSS" class="headerlink" title="用 css-loader 和 style-loader 处理 CSS"></a>用 css-loader 和 style-loader 处理 CSS</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev css-loader style-loader</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: &#123;</span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="用-sass-loader-把-SASS-编译成-CSS"><a href="#用-sass-loader-把-SASS-编译成-CSS" class="headerlink" title="用 sass-loader 把 SASS 编译成 CSS"></a>用 sass-loader 把 SASS 编译成 CSS</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">minify</span>: &#123;</span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="用-extract-text-webpack-plugin-把-CSS-分离成文件"><a href="#用-extract-text-webpack-plugin-把-CSS-分离成文件" class="headerlink" title="用 extract-text-webpack-plugin 把 CSS 分离成文件"></a>用 extract-text-webpack-plugin 把 CSS 分离成文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev extract-text-webpack-plugin </span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;app.bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(<span class="string">&#x27;style.css&#x27;</span>)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">          <span class="attr">fallback</span>: <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">//resolve-url-loader may be chained before sass-loader if necessary</span></span><br><span class="line">          <span class="attr">use</span>: [<span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先全局安装 </span></span><br><span class="line">npm install -g webpack-dev-server</span><br><span class="line">npm install --save-dev webpack-dev-server</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装@2.11.1版本的</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-react-开发环境（babel）"><a href="#配置-react-开发环境（babel）" class="headerlink" title="配置 react 开发环境（babel）"></a>配置 react 开发环境（babel）</h3><h4 id="1-安装-react"><a href="#1-安装-react" class="headerlink" title="1. 安装 react"></a>1. 安装 react</h4><p>要使用 react，就必须装下面两个包的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save react react-dom</span><br></pre></td></tr></table></figure>

<h4 id="2-建立-babel"><a href="#2-建立-babel" class="headerlink" title="2. 建立 babel"></a>2. 建立 babel</h4><p>可能你不懂 babel 是什么，你可以把它理解为编译器，它能把 react 代码转成一般浏览器可读可执行的代码，通常可以用它来转化 react 或 vue 这样的前端代码，或者把 es6 代码转成普通的 javascript 代码等等。</p>
<p>如果还不理解的话，可以看我这篇文章 <a href="https://www.rails365.net/articles/babel-ru-men-zhi-nan">babel 入门指南</a>。</p>
<p>要让 babel 很好的转化 react 代码，首先要安装好 babel，再装 babel 转化 react 的包。</p>
<p>运行下面的命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-core babel-preset-react babel-preset-env</span><br></pre></td></tr></table></figure>

<p>创建 .babelrc 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>, <span class="string">&quot;react&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-在-webpack-使用-babel-loader"><a href="#3-在-webpack-使用-babel-loader" class="headerlink" title="3. 在 webpack 使用 babel-loader"></a>3. 在 webpack 使用 babel-loader</h4><p>最后我们需要在 webpack 中使用一个 loader 来转化 react 的代码。</p>
<p>首先，安装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">          <span class="attr">fallback</span>: <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">//resolve-url-loader may be chained before sass-loader if necessary</span></span><br><span class="line">          <span class="attr">use</span>: [<span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 这两行是处理 react 相关的内容</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.jsx$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>4. 写 react 组件</strong></p>
<p><strong>src/index.html</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>src/app.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">&#x27;./app.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Root</span> <span class="keyword">from</span> <span class="string">&#x27;./Root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>&gt;</span><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>src/Root.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Root</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;textAlign:</span> &#x27;<span class="attr">center</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>手动创建.babelrc文件时，报以下错误，创建失败：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1626407672490-e7c25db5-8e5b-4d49-9ede-c3ff38e8d543.png" alt="img"></p>
<p>创建.babelrc文件命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">echo &gt;.<span class="property">babelrc</span> </span><br></pre></td></tr></table></figure>

<h3 id="clean-webpack-plugin-清除文件"><a href="#clean-webpack-plugin-清除文件" class="headerlink" title="clean-webpack-plugin 清除文件"></a>clean-webpack-plugin 清除文件</h3><p>一般这个插件是配合 webpack -p 这条命令来使用，就是说在为生产环境编译文件的时候，先把 build或dist (就是放生产环境用的文件) 目录里的文件先清除干净，再生成新的。</p>
<p>把 src/app.js 改改内容，然后再执行 npm run prod。</p>
<p>再多运行几次，生成的带 hash 的 app.bundle.js 文件就会很多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dist</span><br><span class="line">├── app.<span class="property">bundle</span>.0e380cea371d050137cd.<span class="property">js</span></span><br><span class="line">├── app.<span class="property">bundle</span>.259c34c1603489ef3572.<span class="property">js</span></span><br><span class="line">├── app.<span class="property">bundle</span>.<span class="property">e56abf8d6e5742c78c4b</span>.<span class="property">js</span></span><br><span class="line">├── index.<span class="property">html</span></span><br><span class="line">└── style.<span class="property">css</span></span><br></pre></td></tr></table></figure>

<p>这些带 hash 的 app.bundle.js 只有最新的才有用，其他的都没用，我们要在 build 之前把它们全清空，这真是 clean-webpack-plugin 发挥的作用。</p>
<h4 id="使用-clean-webpack-plugin"><a href="#使用-clean-webpack-plugin" class="headerlink" title="使用 clean-webpack-plugin"></a>使用 clean-webpack-plugin</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CleanWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pathsToClean = [</span><br><span class="line">  <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&quot;app.bundle&quot;</span>: <span class="string">&#x27;./src/app.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[chunkhash].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(pathsToClean),</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(<span class="string">&#x27;style.css&#x27;</span>)</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>重新运行npm run prod</p>
<p>会删除dist这个目录，然后重新再生成一个。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1626407672515-a1a87d46-d623-4cfa-8668-3d06f270ec59.png" alt="img"></p>
<h3 id="配置多个-HTML-文件"><a href="#配置多个-HTML-文件" class="headerlink" title="配置多个 HTML 文件"></a>配置多个 HTML 文件</h3><p>有个问题，<strong>contact.html 使用的 js 和 css 跟 index.html 是一模一样的</strong></p>
<p>如果我要让 contact.html 使用跟 index.html 不同的 js，如何做呢？（只要保证 js 不同，css 也会不同的，因为 css 也是由 js 里 import 的嘛)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&quot;app.bundle&quot;</span>: <span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 这行是新增的。</span></span><br><span class="line">    <span class="string">&quot;contact&quot;</span>: <span class="string">&#x27;./src/contact.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(pathsToClean),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 这行是新增的。</span></span><br><span class="line">      <span class="attr">excludeChunks</span>: [<span class="string">&#x27;contact&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/contact.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;contact.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 这行是新增的。</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;contact&#x27;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(<span class="string">&#x27;style.css&#x27;</span>)</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的 excludeChunks 指的是不包含， chunks 代表的是包含。</p>
<p><strong>src/contact.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi from contact js&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>生产环境和开发环境： 【修改package.json文件】</strong></p>
<p>分别是开发环境使用的 npm run dev 命令和生产环境使用的 npm run prod 命令。</p>
<p>我们把它改成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span>,</span><br><span class="line">  <span class="string">&quot;prod&quot;</span>: <span class="string">&quot;NODE_ENV=production webpack -p&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>【window环境，需要加set 和 &amp;】</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1626407672454-5d1aa245-88fb-4fc9-ac80-5310bc090380.png" alt="img"></p>
<h3 id="Bootstrap-框架"><a href="#Bootstrap-框架" class="headerlink" title="Bootstrap 框架"></a>Bootstrap 框架</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/5378426/1626407672698-8f1e9d77-8ee9-4aec-95d7-5a2762257594.png" alt="img"></p>
<p>还要装bootstrap-sass </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm bootstrap-sass@<span class="number">3.3</span><span class="number">.7</span> --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">const config = &#123;</span><br><span class="line">  entry: &#x27;./src/js/app.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &#x27;/dist&#x27;,</span><br><span class="line">    filename: &#x27;bundle.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        use: [ &#x27;babel-loader&#x27; ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use: [ &#x27;style-loader&#x27;, &#x27;css-loader&#x27; ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: &#x27;./src/index.js&#x27;,</span><br><span class="line">        print: &#x27;./src/print.js&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &#x27;inline-source-map&#x27;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: &#x27;./dist&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new CleanWebpackPlugin(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: &#x27;Out Management&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">        // filename: &#x27;bundle.js&#x27;,</span><br><span class="line">        filename: &#x27;[name].bundle.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="webpack-app"><a href="#webpack-app" class="headerlink" title="webpack-app"></a>webpack-app</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│  .babelrc</span><br><span class="line">│  .bootstraprc</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.bootstrap.config.js</span><br><span class="line">│  webpack.common.js</span><br><span class="line">│  webpack.config.js</span><br><span class="line">│  webpack.config.js.bak</span><br><span class="line">│  webpack.dev.js</span><br><span class="line">│  webpack.prod.js</span><br><span class="line">│</span><br><span class="line">|——node_modules</span><br><span class="line">|</span><br><span class="line">├─dist</span><br><span class="line">│  │  app.bundle.23080236a288b553e71f.js</span><br><span class="line">│  │  app.bundle.e107dfebe8e36080c12b86a23bcd7955.css</span><br><span class="line">│  │  bootstrap.2f405ecd1f1909206470.js</span><br><span class="line">│  │  bootstrap.55cebd1d76656dacbe76ac17ea3f37bf.css </span><br><span class="line">│  │  contact.c35a6e89d395e9e9d252.js</span><br><span class="line">│  │  contact.html</span><br><span class="line">│  │  index.html</span><br><span class="line">│  │</span><br><span class="line">│  ├─fonts</span><br><span class="line">│  │      glyphicons-halflings-regular.eot</span><br><span class="line">│  │      glyphicons-halflings-regular.ttf</span><br><span class="line">│  │      glyphicons-halflings-regular.woff</span><br><span class="line">│  │      glyphicons-halflings-regular.woff2</span><br><span class="line">│  │</span><br><span class="line">│  └─images</span><br><span class="line">│          glyphicons-halflings-regular.svg</span><br><span class="line">│          money-bag.svg</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    │  app.css</span><br><span class="line">    │  app.js</span><br><span class="line">    │  app.scss</span><br><span class="line">    │  app2.js</span><br><span class="line">    │  contact.html</span><br><span class="line">    │  contact.js</span><br><span class="line">    │  index.html</span><br><span class="line">    │  index.pug</span><br><span class="line">    │  jquery.changeStyle.js</span><br><span class="line">    │  Root.js</span><br><span class="line">    │</span><br><span class="line">    ├─images</span><br><span class="line">    │      logo.png</span><br><span class="line">    │      money-bag.svg</span><br><span class="line">    │      true.jpg</span><br><span class="line">    │</span><br><span class="line">    └─includes</span><br><span class="line">            header.pug</span><br></pre></td></tr></table></figure>

<h3 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const merge = require(&#x27;webpack-merge&#x27;);</span><br><span class="line">const common = require(&#x27;./webpack.common.js&#x27;);</span><br><span class="line">const bootstrapEntryPoints = require(&#x27;./webpack.bootstrap.config&#x27;)</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = merge(common, &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    &quot;app.bundle&quot;: &#x27;./src/app.js&#x27;,</span><br><span class="line">    &quot;contact&quot;: &#x27;./src/contact.js&#x27;,</span><br><span class="line">    &quot;bootstrap&quot;: bootstrapEntryPoints.prod</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &#x27;process.env&#x27;: &#123;</span><br><span class="line">        &#x27;NODE_ENV&#x27;: JSON.stringify(&#x27;production&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const merge = require(&#x27;webpack-merge&#x27;);</span><br><span class="line">const common = require(&#x27;./webpack.common.js&#x27;);</span><br><span class="line">const bootstrapEntryPoints = require(&#x27;./webpack.bootstrap.config&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = merge(common, &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    &quot;app.bundle&quot;: &#x27;./src/app.js&#x27;,</span><br><span class="line">    &quot;contact&quot;: &#x27;./src/contact.js&#x27;,</span><br><span class="line">    &quot;bootstrap&quot;: bootstrapEntryPoints.dev</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: &#x27;inline-source-map&#x27;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: &#x27;./dist&#x27;,</span><br><span class="line">    inline: true,</span><br><span class="line">    port: 9000,</span><br><span class="line">    open: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js-2"><a href="#webpack-config-js-2" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line">const bootstrapEntryPoints = require(&#x27;./webpack.bootstrap.config&#x27;)</span><br><span class="line">var HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const ExtractTextPlugin = require(&#x27;extract-text-webpack-plugin&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const CleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">var isProd = process.env.NODE_ENV === &#x27;production&#x27;; // true or false</span><br><span class="line"></span><br><span class="line">var bootstrapConfig = isProd ? bootstrapEntryPoints.prod : bootstrapEntryPoints.dev;</span><br><span class="line"></span><br><span class="line">var cssDev = [&#x27;style-loader&#x27;, &#x27;css-loader?sourceMap&#x27;, &#x27;sass-loader?sourceMap&#x27;];</span><br><span class="line">var cssProd = ExtractTextPlugin.extract(&#123;</span><br><span class="line">  fallback: &#x27;style-loader&#x27;,</span><br><span class="line">  //resolve-url-loader may be chained before sass-loader if necessary</span><br><span class="line">  use: [&#x27;css-loader&#x27;, &#x27;sass-loader&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var cssConfig = isProd ? cssProd : cssDev;</span><br><span class="line"></span><br><span class="line">let pathsToClean = [</span><br><span class="line">  &#x27;dist&#x27;,</span><br><span class="line">]</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  devtool: &#x27;source-map&#x27;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    &quot;app.bundle&quot;: &#x27;./src/app2.js&#x27;,</span><br><span class="line">    // 这行是新增的。</span><br><span class="line">    &quot;contact&quot;: &#x27;./src/contact.js&#x27;,</span><br><span class="line">    &quot;bootstrap&quot;: bootstrapConfig</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;[name].[hash].js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: 9000,</span><br><span class="line">    open: true,</span><br><span class="line">    hot: true</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new CleanWebpackPlugin(pathsToClean),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">      filename: &#x27;index.html&#x27;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      hash: true,</span><br><span class="line">      // 这行是新增的。</span><br><span class="line">      excludeChunks: [&#x27;contact&#x27;]</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/contact.html&#x27;,</span><br><span class="line">      filename: &#x27;contact.html&#x27;,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        collapseWhitespace: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      hash: true,</span><br><span class="line">      // 这行是新增的。</span><br><span class="line">      chunks: [&#x27;contact&#x27;]</span><br><span class="line">    &#125;),</span><br><span class="line">    // css 文件放到 css 目录中</span><br><span class="line">    new ExtractTextPlugin(&#123;</span><br><span class="line">      filename: &#x27;[name].css&#x27;,</span><br><span class="line">      disable: !isProd,</span><br><span class="line">      publicPath: &#x27;css/&#x27;</span><br><span class="line">    &#125;),</span><br><span class="line">    // 这两行是新增的</span><br><span class="line">    new webpack.NamedModulesPlugin(),</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: &#x27;jquery&#x27;,</span><br><span class="line">      jQuery: &#x27;jquery&#x27;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.scss$/,</span><br><span class="line">        use: cssConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      // 这两行是处理 react 相关的内容</span><br><span class="line">      &#123; test: /\.js$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;,</span><br><span class="line">      &#123; test: /\.jsx$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;,</span><br><span class="line">      &#123; test: /\.pug$/, loader: [&#x27;raw-loader&#x27;, &#x27;pug-html-loader&#x27;] &#125;,</span><br><span class="line">      &#123; test: /\.(gif|png|jpe?g|svg)$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;file-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: &#x27;[name].[ext]&#x27;,</span><br><span class="line">              outputPath: &#x27;images/&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              bypassOnDebug: true,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      // 下面几行才是 html-loader 的配置内容</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.html$/,</span><br><span class="line">        use: [ &#123;</span><br><span class="line">          loader: &#x27;html-loader&#x27;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            minimize: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      &#123; test:/bootstrap-sass[\/\\]assets[\/\\]javascripts[\/\\]/, loader: &#x27;imports-loader?jQuery=jquery&#x27; &#125;,</span><br><span class="line">      // 字体文件都放到 fonts 目录中</span><br><span class="line">      &#123; test: /\.(woff2?|svg)$/, loader: &#x27;url-loader?limit=10000&amp;name=[name].[ext]&amp;outputPath=fonts/&#x27; &#125;,</span><br><span class="line">      &#123; test: /\.(ttf|eot)$/, loader: &#x27;file-loader?name=[name].[ext]&amp;outputPath=fonts/&#x27; &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">const ExtractTextPlugin = require(&#x27;extract-text-webpack-plugin&#x27;);</span><br><span class="line">const CleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;[name].[chunkhash].js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: &#x27;jquery&#x27;,</span><br><span class="line">      jQuery: &#x27;jquery&#x27;</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin([&#x27;dist&#x27;]),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/index.html&#x27;,</span><br><span class="line">      filename: &#x27;index.html&#x27;,</span><br><span class="line">      minify: false,</span><br><span class="line">      hash: process.env.NODE_ENV === &#x27;production&#x27;,</span><br><span class="line">      excludeChunks: [&#x27;contact&#x27;]</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &#x27;./src/contact.html&#x27;,</span><br><span class="line">      filename: &#x27;contact.html&#x27;,</span><br><span class="line">      minify: false,</span><br><span class="line">      hash: process.env.NODE_ENV === &#x27;production&#x27;,</span><br><span class="line">      chunks: [&#x27;contact&#x27;]</span><br><span class="line">    &#125;),</span><br><span class="line">    new ExtractTextPlugin(&#123;</span><br><span class="line">      filename: &#x27;[name].[contenthash].css&#x27;,</span><br><span class="line">      disable: false,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.scss$/,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: &#x27;style-loader&#x27;,</span><br><span class="line">          use: [&#x27;css-loader?sourceMap&#x27;, &#x27;sass-loader?sourceMap&#x27;]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; test: /\.js$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;,</span><br><span class="line">      &#123; test: /\.jsx$/, loader: &#x27;babel-loader&#x27;, exclude: /node_modules/ &#125;,</span><br><span class="line">      &#123; test: /\.pug$/, loader: [&#x27;raw-loader&#x27;, &#x27;pug-html-loader&#x27;] &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(gif|png|jpe?g|svg)$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;file-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: &#x27;[name].[ext]&#x27;,</span><br><span class="line">              outputPath: &#x27;images/&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              bypassOnDebug: true,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.html$/,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: &#x27;html-loader&#x27;,</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; test: /\.woff2?$/, loader: &#x27;url-loader?limit=10000&amp;name=[name].[ext]&amp;outputPath=fonts/&#x27; &#125;,</span><br><span class="line">      &#123; test: /\.(ttf|eot)$/, loader: &#x27;file-loader?name=[name].[ext]&amp;outputPath=fonts/&#x27; &#125;,</span><br><span class="line">      &#123; test:/bootstrap-sass[\/\\]assets[\/\\]javascripts[\/\\]/, loader: &#x27;imports-loader?jQuery=jquery&#x27; &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-bootstrap-config-js"><a href="#webpack-bootstrap-config-js" class="headerlink" title="webpack.bootstrap.config.js"></a>webpack.bootstrap.config.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">function getBootstraprcCustomLocation() &#123;</span><br><span class="line">  return process.env.BOOTSTRAPRC_LOCATION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const bootstraprcCustomLocation = getBootstraprcCustomLocation();</span><br><span class="line"></span><br><span class="line">let defaultBootstraprcFileExists;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  fs.statSync(&#x27;./.bootstraprc&#x27;);</span><br><span class="line">  defaultBootstraprcFileExists = true;</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  defaultBootstraprcFileExists = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!bootstraprcCustomLocation &amp;&amp; !defaultBootstraprcFileExists) &#123;</span><br><span class="line">  /* eslint no-console: 0 */</span><br><span class="line">  console.log(&#x27;You did not specify a \&#x27;bootstraprc-location\&#x27; &#x27; +</span><br><span class="line">    &#x27;arg or a ./.bootstraprc file in the root.&#x27;);</span><br><span class="line">  console.log(&#x27;Using the bootstrap-loader default configuration.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DEV and PROD have slightly different configurations</span><br><span class="line">let bootstrapDevEntryPoint;</span><br><span class="line">if (bootstraprcCustomLocation) &#123;</span><br><span class="line">  bootstrapDevEntryPoint = &#x27;bootstrap-loader/lib/bootstrap.loader?&#x27; +</span><br><span class="line">    `configFilePath=$&#123;__dirname&#125;/$&#123;bootstraprcCustomLocation&#125;` +</span><br><span class="line">    &#x27;!bootstrap-loader/no-op.js&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  bootstrapDevEntryPoint = &#x27;bootstrap-loader&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let bootstrapProdEntryPoint;</span><br><span class="line">if (bootstraprcCustomLocation) &#123;</span><br><span class="line">  bootstrapProdEntryPoint = &#x27;bootstrap-loader/lib/bootstrap.loader?extractStyles&#x27; +</span><br><span class="line">    `&amp;configFilePath=$&#123;__dirname&#125;/$&#123;bootstraprcCustomLocation&#125;` +</span><br><span class="line">    &#x27;!bootstrap-loader/no-op.js&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  bootstrapProdEntryPoint = &#x27;bootstrap-loader/extractStyles&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  dev: bootstrapDevEntryPoint,</span><br><span class="line">  prod: bootstrapProdEntryPoint,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;, &quot;react&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下利用CMD命令批量修改文件名</title>
    <url>/2020/01/06/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%A9%E7%94%A8CMD%E5%91%BD%E4%BB%A4%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<h3 id="Windows环境下利用CMD命令批量修改文件名"><a href="#Windows环境下利用CMD命令批量修改文件名" class="headerlink" title="Windows环境下利用CMD命令批量修改文件名"></a>Windows环境下利用CMD命令批量修改文件名</h3><h4 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h4><h5 id="·文件重命名-ren"><a href="#·文件重命名-ren" class="headerlink" title="·文件重命名 ren"></a>·文件重命名 <span style="color:#c7254e;">ren</span></h5><p>1、ren即rename的缩写，使用ren或者rename命令均可实现文件重命名的操作；命令的使用方法很简单，格式为 <span style="color:#c7254e;">ren old_name new_name</span> ；例如，想要将D盘根目录下的文件 a.txt 重命名为 b.doc ，只需要在CMD中进入D盘根目录，执行 <span style="color:#c7254e;">ren a.txt b.doc </span>；或者使用绝对路径，执行 <span style="color:#c7254e;">ren D:\a.txt b.doc  </span>，也可以达到同样的效果</p>
<p>2、需要注意的是，旧文件名 <span style="color:#c7254e;">old_name </span>可以使用相对路径，也可以包含绝对路径，但新文件名 <span style="color:#c7254e;">new_name</span>不能包含任何文件路径，只能是纯文件名；所以，要想批量修改包含子文件夹的多个路径下的大量文件名，还需要用到一款支持通配符匹配查询替换的文本编辑器，以便从路径+文件名的文件目录系统中提取出文件名的部分</p>
<p>3、另外， <span style="color:#c7254e;">ren</span> 也支持使用通配符；例如，想要将扩展名为 <span style="color:#c7254e;">.docx </span>的文件扩展名批量修改为 <span style="color:#c7254e;">.doc</span> ，执行 <span style="color:#c7254e;">ren *.docx  *.doc</span> 即可；但通配符的使用规则十分复杂，若无法完全理解其中的匹配规则，建议只使用通配符来修改文件扩展名</p>
<p>摘抄自：<a href="https://blog.csdn.net/hitomitoi/article/details/81566494">https://blog.csdn.net/hitomitoi/article/details/81566494</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>ad_manage_react-项目笔记</title>
    <url>/2021/10/10/ad-manage-react-%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="启动项目注意事项："><a href="#启动项目注意事项：" class="headerlink" title="启动项目注意事项："></a>启动项目注意事项：</h3><ol>
<li>启动Apifox应用——项目的mock接口</li>
</ol>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">│  App.js</span><br><span class="line">│  App.less</span><br><span class="line">│  App.test.js</span><br><span class="line">│  index.css</span><br><span class="line">│  index.js</span><br><span class="line">│  reportWebVitals.js</span><br><span class="line">│  setupTests.js</span><br><span class="line">│</span><br><span class="line">├─api					——接口文件（分模块）</span><br><span class="line">│      source.js		——素材管理模块相关Api</span><br><span class="line">│      user.js			——用户模块相关Api</span><br><span class="line">│</span><br><span class="line">├─app								——app公用</span><br><span class="line">│      BreadcrumbMap.jsx			——面包屑相关配置</span><br><span class="line">│      leftMenus.js					——左侧导航栏相关数据</span><br><span class="line">│      leftMenus—对应旧的LeftNav.js	  ——antd左侧导航旧版的做法</span><br><span class="line">│      rootReducers.js				——reducer的集合</span><br><span class="line">│      router.js					——路由配置</span><br><span class="line">│      store.js						——store的配置</span><br><span class="line">│</span><br><span class="line">├─assets							——静态资源</span><br><span class="line">│  ├─css</span><br><span class="line">│  │      style.css</span><br><span class="line">│  │</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      header.jpeg</span><br><span class="line">│  │</span><br><span class="line">│  └─less							</span><br><span class="line">│          common.less				——公用样式</span><br><span class="line">│          cover_antd.less			——覆盖antd默认样式的样式文件</span><br><span class="line">│          style.less				——其他样式</span><br><span class="line">│</span><br><span class="line">├─components						——组件集合</span><br><span class="line">│  │  Bottom.jsx					——页面底部</span><br><span class="line">│  │  EditableTable.jsx				——可编辑表格</span><br><span class="line">│  │  LeftNav-旧的使用方法.jsx</span><br><span class="line">│  │  LeftNav.jsx					——左侧导航栏组件</span><br><span class="line">│  │  Top.jsx						——页面顶部</span><br><span class="line">│  │</span><br><span class="line">│  └─charts							——图表相关组件</span><br><span class="line">│          LineChart.jsx			——线性图组件</span><br><span class="line">│</span><br><span class="line">├─pages								——页面组件（根据模块划分）</span><br><span class="line">│  ├─agent</span><br><span class="line">│  │      Account.jsx</span><br><span class="line">│  │      AddAccount.jsx</span><br><span class="line">│  │      AddAgent.jsx</span><br><span class="line">│  │      Agent.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─dashboard</span><br><span class="line">│  │      Overview.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─group</span><br><span class="line">│  │      AddGroup.jsx</span><br><span class="line">│  │      Group.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─home</span><br><span class="line">│  │      Container.jsx</span><br><span class="line">│  │      Home.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─login</span><br><span class="line">│  │      Login.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─manage</span><br><span class="line">│  │      Customevent.jsx</span><br><span class="line">│  │      Datacb.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─product</span><br><span class="line">│  │      AddProduct.jsx</span><br><span class="line">│  │      EditProduct.jsx</span><br><span class="line">│  │      Product.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─source</span><br><span class="line">│  │      AddSource.jsx</span><br><span class="line">│  │      EditSource.jsx</span><br><span class="line">│  │      Source.jsx</span><br><span class="line">│  │      SourceUpload.jsx</span><br><span class="line">│  │</span><br><span class="line">│  ├─tool</span><br><span class="line">│  │      Attribute.jsx</span><br><span class="line">│  │      Logtool.jsx</span><br><span class="line">│  │</span><br><span class="line">│  └─user</span><br><span class="line">│          EditPassword.jsx</span><br><span class="line">│</span><br><span class="line">├─reducers							——reducers相关（根据模块划分）</span><br><span class="line">│      userSlice.js					——用户模块相关reducer处理</span><br><span class="line">│</span><br><span class="line">└─utils								——自定义相关文件</span><br><span class="line">        fetchUtil.js				——接口请求相关封装</span><br></pre></td></tr></table></figure>



<h2 id="项目笔记"><a href="#项目笔记" class="headerlink" title="项目笔记"></a>项目笔记</h2><p><a href="https://ant.design/docs/react/use-with-create-react-app-cn">在 create-react-app 中使用</a></p>
<p>注：先引入less，免得后面再来配置的时候，由于依赖包之间的版本之间存在冲突问题。</p>
<h4 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create react-app ad_manage_react</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd antd-demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h5 id="安装并引入-antd"><a href="#安装并引入-antd" class="headerlink" title="安装并引入 antd"></a>安装并引入 antd</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<h5 id="安装-craco-并修改-package-json-里的-scripts-属性"><a href="#安装-craco-并修改-package-json-里的-scripts-属性" class="headerlink" title="安装 craco 并修改 package.json 里的 scripts 属性"></a>安装 craco 并修改 <code>package.json</code> 里的 <code>scripts</code> 属性</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;craco start&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;craco build&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;craco test&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录创建一个 <code>craco.config.js</code> 用于修改默认配置</p>
<h5 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h5><p>首先把 <code>src/App.css</code> 文件修改为 <code>src/App.less</code>，然后修改样式引用为 less 文件。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* src/App.js */</span><br><span class="line"><span class="deletion">- import &#x27;./App.css&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#x27;./App.less&#x27;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* src/App.less */</span><br><span class="line">- @import &#x27;~antd/dist/antd.css&#x27;;</span><br><span class="line">+ @import &#x27;~antd/dist/antd.less&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后安装 <code>craco-less</code> 并修改 <code>craco.config.js</code> 文件如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add craco-less</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const CracoLessPlugin = require(<span class="string">&#x27;craco-less&#x27;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          lessOptions: &#123;</span><br><span class="line">            modifyVars: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125;,</span><br><span class="line">            javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="添加react-router-dom-6"><a href="#添加react-router-dom-6" class="headerlink" title="添加react-router-dom@6"></a>添加react-router-dom@6</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom@6</span><br></pre></td></tr></table></figure>

<h4 id="添加react-redux"><a href="#添加react-redux" class="headerlink" title="添加react-redux"></a>添加react-redux</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure>

<h4 id="添加Redux-Toolkit"><a href="#添加Redux-Toolkit" class="headerlink" title="添加Redux Toolkit"></a>添加Redux Toolkit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @reduxjs/toolkit</span><br></pre></td></tr></table></figure>

<h4 id="添加redux-persist"><a href="#添加redux-persist" class="headerlink" title="添加redux-persist"></a>添加redux-persist</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add redux-persist</span><br></pre></td></tr></table></figure>

<h4 id="异步获取数据"><a href="#异步获取数据" class="headerlink" title="异步获取数据"></a>异步获取数据</h4><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><h5 id="可变的变量不放在useEffect中"><a href="#可变的变量不放在useEffect中" class="headerlink" title="可变的变量不放在useEffect中"></a>可变的变量不放在useEffect中</h5><p>错误用法：</p>
<p>这样写会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let sourceList = [];</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    getSourcesList(1).then(res =&gt; &#123;</span><br><span class="line">    	sourceList = res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>



<p> 改为：</p>
<p>注：useEffect后面的依赖项，要加[]，不加，会一直执行这个方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [sourceList, setSourceList] = useState([]);</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    getSourcesList(1).then(res =&gt; &#123;</span><br><span class="line">      console.log(&#x27;res获取素材列表&#x27;);</span><br><span class="line">      console.log(res);</span><br><span class="line">      setSourceList(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>

<h4 id="使用数据图表"><a href="#使用数据图表" class="headerlink" title="使用数据图表"></a>使用数据图表</h4><p><a href="https://www.csdn.net/tags/MtjaUg3sNTM3OTQtYmxvZwO0O0OO0O0O.html">使用echarts-for-react数据图表</a></p>
<h5 id="ECharts-for-React"><a href="#ECharts-for-React" class="headerlink" title="ECharts for React"></a><a href="https://git.hust.cc/echarts-for-react/">ECharts for React</a></h5><p><a href="https://echarts.apache.org/zh/option.html#title">ECharts–官网文档</a></p>
<p>注：要安装echarts，不然会报以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module not found: Error: Can&#x27;t resolve &#x27;echarts&#x27; in &#x27;H:\Gitee\ad_manage_react\node_modules\echarts-for-react\esm&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add echarts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add echarts-for-react</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactECharts from &#x27;echarts-for-react&#x27;;</span><br><span class="line">const options = &#123;</span><br><span class="line">    grid: &#123; top: 8, right: 8, bottom: 24, left: 36 &#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        data: [820, 932, 901, 934, 1290, 1330, 1320],</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        smooth: true,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;axis&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ReactECharts option=&#123;options&#125; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="工具栏组件"><a href="#工具栏组件" class="headerlink" title="工具栏组件"></a>工具栏组件</h4><h5 id="toolbox"><a href="#toolbox" class="headerlink" title="toolbox"></a>toolbox</h5><h4 id="echart图表生成表格"><a href="#echart图表生成表格" class="headerlink" title="echart图表生成表格"></a>echart图表生成表格</h4><p>toolbox—features—dataView</p>
<p><a href="https://zhuanlan.zhihu.com/p/375435811">将echarts的数据视图装换为table表格,并且导出excel</a></p>
<p><a href="https://www.freesion.com/article/1308912177/">将ECHARTS的数据视图展示为TABLE并且导出EXCEL</a></p>
<h5 id="一、使用工具栏的方法"><a href="#一、使用工具栏的方法" class="headerlink" title="一、使用工具栏的方法"></a>一、使用工具栏的方法</h5><p>工具栏生成表格的设置，在<code>toolbox-&gt;feature-&gt;dataView</code>中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const options = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">      type: &#x27;category&#x27;,</span><br><span class="line">      name: &#x27;日期&#x27;,</span><br><span class="line">      key: &#x27;date&#x27;,</span><br><span class="line">      data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">      type: &#x27;value&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">      data: [&#x27;自然量&#x27;, &#x27;推广量&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    grid: &#123;</span><br><span class="line">      left: &#x27;3%&#x27;,</span><br><span class="line">      right: &#x27;4%&#x27;,</span><br><span class="line">      bottom: &#x27;3%&#x27;,</span><br><span class="line">      containLabel: true</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;自然量&#x27;,</span><br><span class="line">        key: &#x27;nature&#x27;,</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        stack: &#x27;Total&#x27;,</span><br><span class="line">        data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;推广量&#x27;,</span><br><span class="line">        key: &#x27;spread&#x27;,</span><br><span class="line">        type: &#x27;line&#x27;,</span><br><span class="line">        stack: &#x27;Total&#x27;,</span><br><span class="line">        data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &#x27;axis&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">      feature: &#123;</span><br><span class="line">        dataView: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          readOnly: false,</span><br><span class="line">          lang: [&#x27;&#x27;, &#x27;关闭&#x27;, &#x27;刷新&#x27;],</span><br><span class="line">          optionToContent: function(opt) &#123;</span><br><span class="line">            var axisData = opt.xAxis[0].data;</span><br><span class="line">            var series = opt.series;</span><br><span class="line">            var table = &#x27;&lt;table class=&quot;chart-table&quot; style=&quot;width:100%;text-align:center&quot; border=&quot;1&quot;&gt;&#x27;+</span><br><span class="line">                      &#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                        + &#x27;&lt;th&gt;时间&lt;/th&gt;&#x27;</span><br><span class="line">                      +&#x27;&lt;/thead&gt;&lt;/tr&gt;&#x27;</span><br><span class="line">                       + &#x27;&lt;tbody&gt;&#x27;;</span><br><span class="line">            for (var i = 0, l = axisData.length; i &lt; l; i++) &#123;</span><br><span class="line">                table += &#x27;&lt;tr&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + axisData[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + series[0].data[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;td&gt;&#x27; + series[0].data[i] + &#x27;&lt;/td&gt;&#x27;</span><br><span class="line">                         + &#x27;&lt;/tr&gt;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            table += &#x27;&lt;/tbody&gt;&lt;/table&gt;&#x27;;</span><br><span class="line">            return table;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const onChartReadyCallback = (echarts) =&gt;&#123;</span><br><span class="line">    myLineChart = echarts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ReactECharts option=&#123;options&#125; onChartReady=&#123;onChartReadyCallback&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h5 id="二、自定义表格的方法"><a href="#二、自定义表格的方法" class="headerlink" title="二、自定义表格的方法"></a>二、自定义表格的方法</h5><p>需要设置toolbox属性</p>
<p>缺点：表头的固定不好设置</p>
<p>设置dataView为不可见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br><span class="line"></span><br><span class="line">feature: &#123;</span><br><span class="line">   dataView: &#123;</span><br><span class="line">      show: true</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">let myLineChart = &#x27;&#x27;;</span><br><span class="line">const onChartReadyCallback = (echarts) =&gt;&#123;</span><br><span class="line">    myLineChart = echarts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const toggleToTable = () =&gt; &#123;</span><br><span class="line">	let opt = myLineChart.getOption();</span><br><span class="line">	var tbHtml = opt.toolbox[0].feature.dataView.optionToContent(opt);</span><br><span class="line">	</span><br><span class="line">	// 然后将生成的HTML填充到对应的节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div onClick=&#123;toggleToTable&#125;&gt;生成表格&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h5 id="三、使用antd生成表格"><a href="#三、使用antd生成表格" class="headerlink" title="三、使用antd生成表格"></a>三、使用antd生成表格</h5><p>注：</p>
<ol>
<li>主要是处理<code>columns</code>和<code>dataSource</code>数据</li>
<li>不需要设置toolbox属性</li>
</ol>
<h4 id="legend"><a href="#legend" class="headerlink" title="legend"></a><a href="https://echarts.apache.org/zh/option.html#legend">legend</a></h4><p>图例组件展现了不同系列的标记(symbol)，颜色和名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">  data: [&#x27;自然量&#x27;, &#x27;推广量&#x27;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a><a href="https://echarts.apache.org/zh/option.html#grid">grid</a></h4><p>设置这个位置，可以让legend显示在图表上方位置，而不是覆盖在图表上</p>
<p>直角坐标系内绘图网格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">    left: &#x27;3%&#x27;,</span><br><span class="line">    right: &#x27;4%&#x27;,</span><br><span class="line">    bottom: &#x27;3%&#x27;,</span><br><span class="line">    containLabel: true  //grid 区域是否包含坐标轴的刻度标签。</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="折叠图叠加"><a href="#折叠图叠加" class="headerlink" title="折叠图叠加"></a><a href="https://echarts.apache.org/examples/zh/editor.html?c=line-stack">折叠图叠加</a></h4><h5 id="series"><a href="#series" class="headerlink" title="series"></a>series</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &#x27;自然量&#x27;,</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    stack: &#x27;Total&#x27;,</span><br><span class="line">    data: [120, 132, 101, 134, 90, 230, 210]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    name: &#x27;推广量&#x27;,</span><br><span class="line">    type: &#x27;line&#x27;,</span><br><span class="line">    stack: &#x27;Total&#x27;,</span><br><span class="line">    data: [220, 182, 191, 234, 290, 330, 310]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="echart添加横向滚动条"><a href="#echart添加横向滚动条" class="headerlink" title="echart添加横向滚动条"></a><a href="https://www.cnblogs.com/-flq/p/9639331.html">echart添加横向滚动条</a></h4><h5 id="dataZoom"><a href="#dataZoom" class="headerlink" title="dataZoom"></a><a href="https://echarts.apache.org/zh/option.html#dataZoom">dataZoom</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataZoom: [</span><br><span class="line">  &#123;</span><br><span class="line">    type: &#x27;slider&#x27;,</span><br><span class="line">    show: true,</span><br><span class="line">    xAxisIndex: [0],</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>



<h4 id="左侧导航栏-新版本的使用"><a href="#左侧导航栏-新版本的使用" class="headerlink" title="左侧导航栏-新版本的使用"></a>左侧导航栏-新版本的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const items = [</span><br><span class="line">  &#123; label: &#x27;菜单项一&#x27;, key: &#x27;item-1&#x27; &#125;, // 菜单项务必填写 key</span><br><span class="line">  &#123; label: &#x27;菜单项二&#x27;, key: &#x27;item-2&#x27; &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: &#x27;子菜单&#x27;,</span><br><span class="line">    key: &#x27;submenu&#x27;,</span><br><span class="line">    children: [&#123; label: &#x27;子菜单项&#x27;, key: &#x27;submenu-item-1&#x27; &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line">return &lt;Menu items=&#123;items&#125; /&gt;;</span><br></pre></td></tr></table></figure>

<h5 id="加上页面跳转"><a href="#加上页面跳转" class="headerlink" title="加上页面跳转"></a><a href="https://ant.design/components/menu-cn/">加上页面跳转</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    label: (</span><br><span class="line">      &lt;a href=&quot;https://ant.design&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;</span><br><span class="line">        Navigation Four - Link</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    ),</span><br><span class="line">    key: &#x27;alipay&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="项目中-加上页面跳转的做法"><a href="#项目中-加上页面跳转的做法" class="headerlink" title="项目中-加上页面跳转的做法"></a>项目中-加上页面跳转的做法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Link &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    label: ( &lt;Link to=&quot;/product&quot;&gt;全部产品&lt;/Link&gt;),</span><br><span class="line">    key:&#x27;/product&#x27;,</span><br><span class="line">    icon: &lt;AppstoreOutlined /&gt;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="Menu新版本—左侧导航栏完整代码"><a href="#Menu新版本—左侧导航栏完整代码" class="headerlink" title="Menu新版本—左侧导航栏完整代码"></a>Menu新版本—左侧导航栏完整代码</h4><ol>
<li><p>左侧导航menus</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; </span><br><span class="line">    AppstoreOutlined,</span><br><span class="line">    ToolOutlined, </span><br><span class="line">    MacCommandOutlined,</span><br><span class="line">    FolderOpenOutlined, </span><br><span class="line">    DashboardOutlined,</span><br><span class="line">    PieChartOutlined,</span><br><span class="line">    SettingOutlined &#125;</span><br><span class="line">from &#x27;@ant-design/icons&#x27;;</span><br><span class="line">import &#123; Link &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">const leftMenus = [</span><br><span class="line">    &#123;</span><br><span class="line">        // label: &#x27;全部产品&#x27;,</span><br><span class="line">        label: ( &lt;Link to=&quot;/product&quot;&gt;全部产品&lt;/Link&gt;),</span><br><span class="line">        key:&#x27;/product&#x27;,</span><br><span class="line">        icon: &lt;AppstoreOutlined /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        // label: &#x27;素材管理&#x27;,</span><br><span class="line">        label: ( &lt;Link to=&quot;/source&quot;&gt;素材管理&lt;/Link&gt;),</span><br><span class="line">        key:&#x27;/source&#x27;,</span><br><span class="line">        icon: &lt;FolderOpenOutlined /&gt;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: &#x27;公共模块&#x27;,</span><br><span class="line">        key:&#x27;/ad&#x27;,</span><br><span class="line">        icon: &lt;MacCommandOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;权限管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/account&quot;&gt;权限管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/account&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;用户管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/user&quot;&gt;用户管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/user&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;账户管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/agent&quot;&gt;账户管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/agent&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;项目管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/group&quot;&gt;项目管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/group&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;渠道管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/channel&quot;&gt;渠道管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/channel&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;设备管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/device&quot;&gt;设备管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/device&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;推广参数设置&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/ad/config&quot;&gt;推广参数设置&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/ad/config&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/dashboard&#x27;,</span><br><span class="line">        label: &#x27;仪表盘&#x27;,</span><br><span class="line">        icon: &lt;DashboardOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;总览&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/overview&quot;&gt;总览&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/overview&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;实时&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/realtime&quot;&gt;实时&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/realtime&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;渠道效果对比&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/dashboard/channeleffect&quot;&gt;渠道效果对比&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/dashboard/channeleffect&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/collect&#x27;,</span><br><span class="line">        label: &#x27;报表&#x27;,</span><br><span class="line">        icon: &lt;PieChartOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;分包推广详情&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/subpackage&quot;&gt;分包推广详情&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/subpackage&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;SEM活动详情&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/sem&quot;&gt;SEM活动详情&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/sem&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;激活延迟分析&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/collect/effectevaluate&quot;&gt;激活延迟分析&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/collect/effectevaluate&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/tool&#x27;,</span><br><span class="line">        label: &#x27;工具&#x27;,</span><br><span class="line">        icon: &lt;ToolOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;归因查询&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/tool/attribute&quot;&gt;归因查询&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/tool/attribute&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;日志流&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/tool/logtool&quot;&gt;日志流&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/tool/logtool&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        key:&#x27;/manage&#x27;,</span><br><span class="line">        label: &#x27;配置&#x27;,</span><br><span class="line">        icon: &lt;SettingOutlined /&gt;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;推广回调管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/manage/datacb&quot;&gt;推广回调管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/manage/datacb&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // label: &#x27;埋点管理&#x27;,</span><br><span class="line">                label: ( &lt;Link to=&quot;/manage/customevent&quot;&gt;埋点管理&lt;/Link&gt;),</span><br><span class="line">                key:&#x27;/manage/customevent&#x27;,</span><br><span class="line">                icon: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export default leftMenus;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧导航-组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; Layout, Menu &#125; from &#x27;antd&#x27;;</span><br><span class="line">import &#123; useLocation &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">import leftMenus from &#x27;../app/leftMenus&#x27;;</span><br><span class="line">import &#123; </span><br><span class="line">    MenuUnfoldOutlined,</span><br><span class="line">    MenuFoldOutlined,</span><br><span class="line">    &#125;</span><br><span class="line">from &#x27;@ant-design/icons&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; Sider &#125; = Layout;</span><br><span class="line">// const &#123; SubMenu &#125; = Menu;</span><br><span class="line"></span><br><span class="line">// 左侧导航栏</span><br><span class="line">export default function LeftNav(props) &#123;</span><br><span class="line">  const location = useLocation();</span><br><span class="line">  const pathname = location.pathname;</span><br><span class="line">  const [selectedKeys, setSelectedKeys] = useState([]);</span><br><span class="line">  const [openKeys, setOpenKeys] = useState([]);</span><br><span class="line"> </span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 更新选中状态</span><br><span class="line">    </span><br><span class="line">    const rank = pathname.split(&#x27;/&#x27;);</span><br><span class="line">    switch(rank.length) &#123;</span><br><span class="line">      case 2 :</span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        break;</span><br><span class="line">      </span><br><span class="line">      case 3: </span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        setOpenKeys([rank.slice(0, 2).join(&#x27;/&#x27;)])</span><br><span class="line">        break;</span><br><span class="line">  </span><br><span class="line">      case 4: </span><br><span class="line">        setSelectedKeys([pathname])</span><br><span class="line">        setOpenKeys([rank.slice(0, 2).join(&#x27;/&#x27;), rank.slice(0, 3).join(&#x27;/&#x27;)])</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        setSelectedKeys([]);</span><br><span class="line">        setOpenKeys([]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[pathname]);</span><br><span class="line"></span><br><span class="line">  // 展开/收起SubMenu触发</span><br><span class="line">  const onOpenChange = keys =&gt; &#123;</span><br><span class="line">    setOpenKeys(keys)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 点击MenuItem时触发</span><br><span class="line">  const onClick = e =&gt; &#123;</span><br><span class="line">    setSelectedKeys([e.key])</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Sider </span><br><span class="line">        trigger=&#123;null&#125; </span><br><span class="line">        collapsible </span><br><span class="line">        collapsed=&#123;props.isCollapsed&#125;</span><br><span class="line">        collapsedWidth=&quot;60&quot;</span><br><span class="line">        className=&#x27;left-sider&#x27;</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">            overflow: &#x27;auto&#x27;,</span><br><span class="line">            height: &#x27;100vh&#x27;,</span><br><span class="line">            position: &#x27;fixed&#x27;,</span><br><span class="line">            left: 0,</span><br><span class="line">            top: 0,</span><br><span class="line">            bottom: 0,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;div className=&quot;logo&quot;&gt;</span><br><span class="line">        &lt;span </span><br><span class="line">            className=&#x27;toggleFold&#x27; </span><br><span class="line">            onClick=&#123;props.onToggle&#125;</span><br><span class="line">        &gt;</span><br><span class="line">            &#123; props.isCollapsed ? &lt;MenuUnfoldOutlined/&gt; :  &lt;MenuFoldOutlined/&gt;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;Menu</span><br><span class="line">          items=&#123;leftMenus&#125; </span><br><span class="line">          theme=&quot;dark&quot;</span><br><span class="line">          mode=&quot;inline&quot; </span><br><span class="line">          openKeys=&#123;openKeys&#125;</span><br><span class="line">          selectedKeys=&#123;selectedKeys&#125;</span><br><span class="line">          onOpenChange=&#123;onOpenChange&#125;</span><br><span class="line">          onClick=&#123;onClick&#125;</span><br><span class="line">          defaultSelectedKeys=&#123;[selectedKeys]&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/Sider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="antd-日期选择-最近几天"><a href="#antd-日期选择-最近几天" class="headerlink" title="antd-日期选择-最近几天"></a>antd-日期选择-最近几天</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; DatePicker &#125; from &#x27;antd&#x27;;</span><br><span class="line">const &#123; RangePicker &#125; = DatePicker;</span><br><span class="line"></span><br><span class="line">&lt;RangePicker</span><br><span class="line">  ranges=&#123;&#123;</span><br><span class="line">    &#x27;全部&#x27;: [moment(&quot;2020-09-10&quot;), moment()],</span><br><span class="line">    &#x27;今天&#x27;: [moment(), moment()],</span><br><span class="line">    &#x27;昨天&#x27;: [moment().subtract(1, &#x27;days&#x27;), moment().subtract(1, &#x27;days&#x27;)],</span><br><span class="line">    &#x27;近7天&#x27;: [moment().subtract(6, &#x27;days&#x27;), moment()],</span><br><span class="line">    &#x27;近14天&#x27;: [moment().subtract(13, &#x27;days&#x27;), moment()],</span><br><span class="line">    &#x27;近30天&#x27;: [moment().subtract(29, &#x27;days&#x27;), moment()],</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  locale=&#123;locale&#125;</span><br><span class="line">  defaultValue=&#123;[moment(&quot;2020-09-10&quot;), moment()]&#125;</span><br><span class="line">  style=&#123;&#123;width:220&#125;&#125;</span><br><span class="line">  onChange=&#123;onRangeChange&#125;</span><br><span class="line">  placement=&quot;bottomRight&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/Form.Item&gt;</span><br></pre></td></tr></table></figure>

<h4 id="antd表格"><a href="#antd表格" class="headerlink" title="antd表格"></a>antd表格</h4><p>渲染表格的数据—–数组数据，每一项要有唯一的key值</p>
<p>key值相关报错：<code>Warning: Each child in a list should have a unique &quot;key&quot; prop.</code></p>
<p>解决方法：</p>
<ol>
<li><p>在数据中添加key属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;key&quot;: 3215,</span><br><span class="line">        &quot;id&quot;: 3215,</span><br><span class="line">        &quot;group_id&quot;: 2,</span><br><span class="line">        &quot;group_name&quot;: &quot;测试项目&quot;,</span><br><span class="line">        &quot;create_by&quot;: &quot;10000&quot;</span><br><span class="line">     &#125;</span><br><span class="line">     ....</span><br><span class="line"> ]    </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用别的唯一性的属性：<code> rowKey = &#123; record =&gt; record.id&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Table </span><br><span class="line">  columns=&#123;columns&#125; </span><br><span class="line">  dataSource=&#123;accountList&#125;</span><br><span class="line">  rowKey = &#123; record =&gt; record.id&#125;</span><br><span class="line">  bordered&gt;</span><br><span class="line">&lt;/Table&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="报错信息处理"><a href="#报错信息处理" class="headerlink" title="报错信息处理"></a>报错信息处理</h4><p><code>[Violation] Added non-passive event listener to a scroll-blocking ＜some＞ event. Consider marking eve</code></p>
<p><a href="https://blog.csdn.net/qq_45820967/article/details/117426636">react报错: Unable to preventDefault inside passive event li ……</a></p>
<p><a href="https://stackoverflow.com/questions/51345929/react-js-violation-added-non-passive-event-listener-to-a-scroll-blocking-mou">React js -[Violation] Added non-passive event listener to a scroll-blocking ‘mousewheel’ event</a></p>
<p><a href="https://www.jianshu.com/p/576347881906?u_atoken=232b4a7e-0231-4946-8908-47ebf8e606a9&u_asession=01_3ZFCuVcOfuwSPfoQFLRMZKUf4ScuwHJlmBJl7VN4QVB7dNjfi4wDQit6KXmcpw4X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_OXZcyuDd-UGTHXkkR-LW63KmjkU3JT7ddtoHBlecZWGBkFo3NEHBv0PZUm6pbxQU&u_asig=05EPhiOrWxZ56qQnnFYP6YcxEx5hAgiHwRV60GtPYDTOQNU6EBiTLvNmp_kORYdoQkT4feHNfaH8NCsFDdym0tGIgqMawo17KziwQo1CW2H_dUHyxqMXrsIndIQKY2FKo2C0nf13abHfSCQtBUc7n-PTwxuv4jOESKkFpMk-zCu2P9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzTc2O0STMN1NJO_82A13D1qAuhUSv5lr4LcS7JnU9TKWzKnPGeiYgOeAvNODIGQOu-3h9VXwMyh6PgyDIVSG1W8DqoVQR08v6xbsOEOaVs-lHANw4_8BpU31TkZPiPBinieC25fhKOae3jNeeE3fG_hOWccivToL8qDJ_zjAM3mAmWspDxyAEEo4kbsryBKb9Q&u_aref=+OncCc9GS1BtE2d0dfPERz/UNao=">react Added non-passive event listener to a scroll-blocking ‘mousewheel’ event</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add default-passive-events  或  cnpm i default-passive-events -S</span><br><span class="line">并在 App.js 中 import &#x27;default-passive-events&#x27;;</span><br></pre></td></tr></table></figure>

<p>加上以上配置之后，</p>
<p>报错：<code>react-dom.development.js:6848 Unable to preventDefault inside passive event listener invocation.</code></p>
<p><a href="https://blog.csdn.net/wdnmd_69/article/details/124354187">React中使用antd的select报错Unable to preventDefault inside passive event listener invocation.</a></p>
<p>最后解决：</p>
<p>先停掉运行中的项目，找到node_modules\react-dom\cjs\react-dom.development.js中6202行的代码将event.preventDefault();注释掉，再重新运行项目，无需任何其他设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">if (event.preventDefault) &#123;</span><br><span class="line">    //event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE</span><br><span class="line">  &#125; else if (typeof event.returnValue !== &#x27;unknown&#x27;) &#123;</span><br><span class="line">    event.returnValue = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_59803648/article/details/121792700">React中轮播报错pan-y不起作用Unable to preventDefault inside passive event listener invocation</a></p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>项目笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify相关笔记</title>
    <url>/2020/08/24/docsify%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a><a href="https://docsify.js.org/#/zh-cn/quickstart">官网文档</a></h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>

<h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure>

<h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure>

<h4 id="添加左侧导航栏-loadSidebar-true"><a href="#添加左侧导航栏-loadSidebar-true" class="headerlink" title="添加左侧导航栏-loadSidebar: true"></a>添加左侧导航栏-loadSidebar: true</h4><ol>
<li><p>修改docs/index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">  loadSidebar: true,  // 开启左侧导航栏</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  repo: &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录(docs)中，新建<code>_sidebar.md</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 常用网址     // 分组名</span><br><span class="line"></span><br><span class="line">  * [Vue](website/vue.md)   // 链接到对应文件</span><br><span class="line">* 收藏博客</span><br><span class="line"></span><br><span class="line">  * [javascript](blogs/javascript.md)</span><br><span class="line">* 常用软件</span><br><span class="line"></span><br><span class="line">  * [web前端](software/web.md)</span><br><span class="line">* 笔记</span><br><span class="line"></span><br><span class="line">  [web前端](software/web.md)</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建对应的文件（如：<code>website/vue.md</code> 【新建website目录，新建vue.md】）</p>
</li>
</ol>
<h4 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h4><ol>
<li><p>修改<code>window.$docsify</code>（在<code>docs/index.html</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">    loadSidebar: true,</span><br><span class="line">    name: &#x27;&#x27;,</span><br><span class="line">    repo: &#x27;&#x27;,</span><br><span class="line">    search: &#123;   // 添加</span><br><span class="line">        noData: &#123;</span><br><span class="line">          &#x27;/&#x27;: &#x27;无匹配结果&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        paths: &#x27;auto&#x27;,</span><br><span class="line">        placeholder: &#123;</span><br><span class="line">          &#x27;/&#x27;: &#x27;搜索&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>search.min.js</code>插件（在<code>docs/index.html</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;工作文档&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;description&quot; content=&quot;Description&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;shortcut icon&quot; href=&quot;./favicon.ico&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar-folder.min.css&quot; /&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    a&#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">    a:hover&#123;</span><br><span class="line">      text-decoration: underline;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar ul li a&#123;</span><br><span class="line">      /* color: #0088CC !important; */</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .content td a, .content p a&#123;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section blockquote p&#123;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section h5&#123;</span><br><span class="line">      font-size: 1.05rem;</span><br><span class="line">      margin-top: 0.5rem;</span><br><span class="line">      margin-bottom: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section hr&#123;</span><br><span class="line">      margin: 2em 0 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.folder::before&#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.file::before&#123;</span><br><span class="line">      background: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li::before&#123;</span><br><span class="line">      content: &quot;-&quot;;</span><br><span class="line">      top: -1px;</span><br><span class="line">      left: -10px;</span><br><span class="line">      width: 10px;</span><br><span class="line">      height: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-nav ul:not(.app-sub-sidebar)&gt;li.open::before&#123;</span><br><span class="line">      transform: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section p&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section th&#123;</span><br><span class="line">      background-color: #f8f8f8;</span><br><span class="line">      color: #909399;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section pre&#123;</span><br><span class="line">      padding: 0 0.6rem;</span><br><span class="line">      margin: 0.6em 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section pre&gt;code&#123;</span><br><span class="line">      padding: 0.4rem 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section code, .markdown-section output:after, .markdown-section pre&#123;</span><br><span class="line">      font-family: &#x27;Source Sans Pro,Helvetica Neue,Arial,sans-serif&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    /* .sidebar&#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sidebar-toggle&#123;</span><br><span class="line">      width: 184px;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">      left: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    .markdown-section&#123;</span><br><span class="line">      max-width: 90%;</span><br><span class="line">    &#125; */</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.$docsify = &#123;</span><br><span class="line">      // name: &#x27;工作文档&#x27;,</span><br><span class="line">      auto2top: true,</span><br><span class="line">      repo: &#x27;&#x27;,</span><br><span class="line">      loadSidebar: true,</span><br><span class="line">      sidebarDisplayLevel: 0,</span><br><span class="line">      // subMaxLevel: 2,</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &#x27;/.*/_sidebar.md&#x27;: &#x27;/_sidebar.md&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      search: &#123;</span><br><span class="line">          noData: &#123;</span><br><span class="line">            &#x27;/&#x27;: &#x27;无匹配结果&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          paths: &#x27;auto&#x27;,</span><br><span class="line">          placeholder: &#123;</span><br><span class="line">            &#x27;/&#x27;: &#x27;搜索&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;!-- Docsify v4 --&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify@4&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/docsify-sidebar-collapse.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify</title>
    <url>/2021/06/10/docsify/</url>
    <content><![CDATA[<h4 id="docsify"><a href="#docsify" class="headerlink" title="docsify"></a>docsify</h4><p><a href="https://docsify.js.org/#/zh-cn/">docsify中文文档</a></p>
<p>摘自<a href="https://www.jianshu.com/p/4883e95aa903">视觉派pie</a> 、<a href="https://www.imooc.com/article/287154">Docsify快速搭建个人博客</a></p>
<blockquote>
<p>文档网站生成工具、快速搭建个人博客</p>
</blockquote>
<blockquote>
<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会将 <code>.md</code> 转成 <code>.html</code> 文件，所有转换工作都是在运行时进行。</p>
<p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 <code>.html</code> 文件“污染” commit 记录，只需要创建一个 <code>index.html</code> 就可以开始写文档而且直接部署在<a href="https://links.jianshu.com/go?to=https://docsify.js.org/%23/zh-cn/deploy">GitHub Pages</a>。</p>
</blockquote>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>无需构建，写完文档直接发布</li>
<li>容易使用并且轻量 (~19kB gzipped)</li>
<li>智能的全文搜索</li>
<li>提供多套主题</li>
<li>丰富的 API</li>
<li>支持 Emoji</li>
<li>兼容 IE10+</li>
<li>支持 SSR (<a href="https://links.jianshu.com/go?to=https://github.com/docsifyjs/docsify-ssr-demo">example</a>)</li>
</ul>
<h4 id="生成文档的工具："><a href="#生成文档的工具：" class="headerlink" title="生成文档的工具："></a>生成文档的工具：</h4><p>阿里的语雀、DokuWiki、MDwiki、HDwiki</p>
<p><a href="https://www.jianshu.com/p/84b46b67031d">使用Typora+docsify+GitHub Pages搭建团队知识库</a></p>
<h5 id="文档案例"><a href="#文档案例" class="headerlink" title="文档案例"></a>文档案例</h5><p><a href="https://hanxueqing.github.io/Douban-Movie/#/?id=%E4%BD%BF%E7%94%A8vue%E5%85%A8%E5%AE%B6%E6%A1%B6nodejs%E6%90%AD%E5%BB%BA%E7%9A%84%E5%B0%8F%E5%9E%8B%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE">使用Vue全家桶+Node.js搭建的小型全栈项目</a></p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>全局安装<code>docsify-cli</code>工具，可以方便地创建及在本地预览生成的文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure>

<h5 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h5><p>如果想在项目的 <code>./docs</code> 目录里写文档，直接通过 <code>init</code> 初始化项目。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure>

<h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5><p>通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。默认访问地址 <a href="http://localhost:3000/">http://localhost:3000</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure>

<h5 id="定制侧边栏"><a href="#定制侧边栏" class="headerlink" title="定制侧边栏"></a>定制侧边栏</h5><ol>
<li><p>在项目根目录（与index.html同目录）创建<code>_sidebar.md</code>文件</p>
</li>
<li><p>配置 <code>loadSidebar</code> 选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">   loadSidebar: true</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>_sidebar.md</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- docs/_sidebar.md --&gt;</span><br><span class="line"></span><br><span class="line">* [首页](zh-cn/)</span><br><span class="line">* [指南](zh-cn/guide)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <code>alias</code> 避免不必要的回退过程 （即访问非根目录的页面时，会报<code>_sidebar.md</code>文件是404)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">    loadSidebar: true,</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#x27;/.*/_sidebar.md&#x27;: &#x27;/_sidebar.md&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h4 id="docsify-侧边栏目录扩展"><a href="#docsify-侧边栏目录扩展" class="headerlink" title="docsify 侧边栏目录扩展"></a><a href="https://www.cnblogs.com/baby123/p/14361402.html">docsify 侧边栏目录扩展</a></h4><p>官方文档没有介绍左侧目录的折叠问题，可以使用这个开源：</p>
<p>git地址 <a href="https://github.com/iPeng6/docsify-sidebar-collapse">https://github.com/iPeng6/docsify-sidebar-collapse</a></p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar.min.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/sidebar-folder.min.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify-sidebar-collapse/dist/docsify-sidebar-collapse.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用sidebarDisplayLevel设置默认折叠的层级：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.$docsify = &#123;</span><br><span class="line">      sidebarDisplayLevel: 1,   // 如果想收起的是第一层级，设置为0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后根据自己需求修改样式。</p>
<h4 id="侧边栏三层级配置"><a href="#侧边栏三层级配置" class="headerlink" title="侧边栏三层级配置"></a>侧边栏三层级配置</h4><p>参考<a href="https://cpury.com/1408.html">docsify侧边栏折叠</a></p>
<p>_sidebar.md：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 项目</span><br><span class="line">    * [管理后台](project/manage.md)</span><br><span class="line">        * [新广告后台](project/ad_admin.md)</span><br><span class="line">        * [纳米盒应用后台2.0](project/AppManage2.0.md)</span><br><span class="line">        * [纳米盒管理后台](project/manage_new.md)</span><br><span class="line">        * [黄豆芽办公系统](project/ai.huangdouya.com.md)</span><br><span class="line">        * [黄豆芽sdk运营后台](project/hanteng-manage.vxinyou.com.md)</span><br><span class="line">        * [切支付](project/check_pay.md)</span><br></pre></td></tr></table></figure>

<p>manage.md：（里面写什么都可以）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 新广告后台</span><br><span class="line">## 纳米盒应用后台2.0</span><br><span class="line">## 纳米盒管理后台</span><br><span class="line">## 黄豆芽办公系统</span><br><span class="line">## 黄豆芽sdk运营后台</span><br><span class="line">## 切支付</span><br></pre></td></tr></table></figure>

<h4 id="添加代码高亮"><a href="#添加代码高亮" class="headerlink" title="添加代码高亮"></a>添加代码高亮</h4><p>引入js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://docsify.js.org/#/zh-cn/language-highlight">代码高亮</a></p>
<p>写代码的时候要加上bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```bash</span><br><span class="line">echo &quot;hello&quot;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>



<h4 id="加入搜索功能"><a href="#加入搜索功能" class="headerlink" title="加入搜索功能"></a>加入搜索功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">search: &#123;</span><br><span class="line">    noData: &#123;</span><br><span class="line">      &#x27;/&#x27;: &#x27;没有结果!&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    paths: &#x27;auto&#x27;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      &#x27;/&#x27;: &#x27;搜索&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h4><p><a href="https://blog.csdn.net/weixin_34568812/article/details/112002961">如何把 Docsify 文档部署到服务器?</a></p>
<p><a href="https://www.jianshu.com/p/84b46b67031d">使用Typora+docsify+GitHub Pages搭建团队知识库</a></p>
<p><a href="https://juejin.cn/post/6844904115466682375">使用docsify 写开源文档+部署到云服务器</a></p>
]]></content>
      <tags>
        <tag>docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>game_sdk项目笔记</title>
    <url>/2021/10/13/game-sdk%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create react-app game_sdk</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd game_sdk</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure>

<ol>
<li><code>index.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; HashRouter &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">&lt;/HashRouter&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项：使用HashRouter，直接访问<a href="http://localhost:3003/login%E6%98%AF%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E7%9A%84%EF%BC%8C%E8%A6%81%E6%B3%A8%E6%84%8FHashRouter%E4%B8%8EBrowserRouter%E7%9A%84%E5%8C%BA%E5%88%AB">http://localhost:3003/login是页面空白的，要注意HashRouter与BrowserRouter的区别</a></p>
</blockquote>
<blockquote>
<p><a href="http://localhost:3003/#/login">http://localhost:3003/#/login</a></p>
</blockquote>
<p>项目中改为BrowserRouter，正式环境再改为HashRouter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>router/index.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Routes, Route &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line"></span><br><span class="line">import Login from &#x27;../pages/user/Login&#x27;;</span><br><span class="line">import Service from &#x27;../pages/service/Service&#x27;;</span><br><span class="line">import MyCenter from &#x27;../pages/mycenter/MyCenter&#x27;;</span><br><span class="line">import Register from &#x27;../pages/user/Register&#x27;;</span><br><span class="line"></span><br><span class="line">function RootRouter() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/register&quot; element=&#123;&lt;Register /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/service&quot; element=&#123;&lt;Service /&gt;&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/mycenter&quot; element=&#123;&lt;MyCenter /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Routes&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default RootRouter;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>App.js</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import RootRouter from &quot;./router&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">       &lt;RootRouter/&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<h4 id="使用antd（项目中使用antd"><a href="#使用antd（项目中使用antd" class="headerlink" title="使用antd（项目中使用antd)"></a>使用<a href="https://ant.design/docs/react/use-with-create-react-app-cn">antd</a>（项目中使用antd)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<p>修改 <code>src/App.css</code>，在文件顶部引入 <code>antd/dist/antd.css</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="高级配置——使用less"><a href="#高级配置——使用less" class="headerlink" title="高级配置——使用less"></a><a href="https://ant.design/docs/react/use-with-create-react-app-cn#%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE">高级配置</a>——使用less</h5><p>安装 craco </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code> 里的 <code>scripts</code> 属性。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;start&quot;: &quot;craco start&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;craco build&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;test&quot;: &quot;craco test&quot;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录创建一个 <code>craco.config.js</code> 用于修改默认配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* craco.config.js */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>引入 <a href="https://github.com/DocSpring/craco-less">craco-less</a> 来帮助加载 less 样式和修改变量</p>
<p><code>src/App.css</code> 文件修改为 <code>src/App.less</code>，然后修改样式引用为 less 文件。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">/* src/App.js */</span><br><span class="line"><span class="deletion">- import &#x27;./App.css&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#x27;./App.less&#x27;;</span></span><br><span class="line">/* src/App.less */</span><br><span class="line"><span class="deletion">- @import &#x27;~antd/dist/antd.css&#x27;;</span></span><br><span class="line"><span class="addition">+ @import &#x27;~antd/dist/antd.less&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>安装 <code>craco-less</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add craco-less</span><br></pre></td></tr></table></figure>

<p>修改 <code>craco.config.js</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const CracoLessPlugin = require(&#x27;craco-less&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          lessOptions: &#123;</span><br><span class="line">            modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#f6c700&#x27; &#125;,</span><br><span class="line">            javascriptEnabled: true,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>注意：配置完，要重启项目</code></p>
<p>这里是配置主题颜色，不改变主题颜色，可不加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#f6c700&#x27; &#125;,</span><br></pre></td></tr></table></figure>





<p>也可以使用<a href="https://antd-mobile.gitee.io/zh/guide/quick-start">Ant Design Mobile</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd-mobile</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>React</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo实现文章置顶功能</title>
    <url>/2020/05/25/hexo%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="修改generator-js"><a href="#修改generator-js" class="headerlink" title="修改generator.js"></a>修改generator.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到node_modules/hexo-generator-index/lib/generator.js这个文件。</span><br></pre></td></tr></table></figure>
<p>在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var posts = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure>
<p>下面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">        if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">        else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">    &#125;</span><br><span class="line">    else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>完整代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var pagination = require(&#x27;hexo-pagination&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals) &#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">      if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">          if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">          else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">      &#125;</span><br><span class="line">      else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">          return -1;</span><br><span class="line">      &#125;</span><br><span class="line">      else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          return 1;</span><br><span class="line">      &#125;</span><br><span class="line">      else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">  &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &#x27;page&#x27;;</span><br><span class="line">  var path = config.index_generator.path || &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  return pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">    format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp学习笔记</title>
    <url>/2019/07/11/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av64407974?from=search&seid=17812780048673997573">前端自动化构建工具 Gulp 视频教程</a></p>
<p><a href="https://v3.gulpjs.com.cn/">旧版官网</a>   |  <a href="https://v3.gulpjs.com.cn/docs/api/">旧版API</a>   |  <a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/">新版官网</a>     |    <a href="https://www.gulpjs.com.cn/docs/api/concepts/">新版API</a></p>
<a href="https://www.gulpjs.com.cn/" title="" target="">Gulp中文网</a>

<a href="https://gulpjs.com/" title="" target="">Gulp</a>
<a href="https://gulpjs.com/plugins/" title="" target="">Gulp插件</a>

<p>在百度网盘，Gulp-master、gulp-demo-master、gulp-book-master中有相关使用教程。</p>
<p><a href="https://www.gulpjs.com.cn/">gulp-官网</a></p>
<p><a href="https://github.com/gulpjs/gulp">gulp-github</a></p>
<p><a href="https://github.com/winney07/gulp-book">gulp-book</a></p>
<p><a href="https://github.com/nimoc/gulp-book">gulp-book</a></p>
<p>gulp是与grunt功能类似的<b><strong>前端项目构建</strong></b>，工具，也是基于nodejs的自动<b>任务运行器</b><br>能自动化地完成JavaScript/coffee/sass/less/html/image/css等文件的合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务。<br>gulp更高效（异步多任务）、更易于使用，插件高质量<br>特点：<br>1、任务化<br>2、基于流（数据流，输入流I 输出流O）</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|- dist </span><br><span class="line">|- src</span><br><span class="line">    |- js</span><br><span class="line">    |- css</span><br><span class="line">    |- less</span><br><span class="line">|- index.html</span><br><span class="line">|- gulpfile.js</span><br><span class="line">|- package.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用淘宝镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ul>
<li><p>脚手架工具：套用代码（模板代码）</p>
</li>
<li><p>依赖管理工具：依赖代码（库、依赖）</p>
</li>
<li><p>构建工具：预处理代码（自己写的JavaScript，CSS，HTML）  检查代码、编译、打包</p>
</li>
<li><p>构建工具的配置一般保存在构建配置文件（build file）里</p>
</li>
</ul>
<p>用脚手架工具yemoman搭建项目，用依赖管理工具bower来搜索、安装依赖，用构建工具gulp来处理文件。Yemoman作为一个脚手架工具，可以初始化gulp(构建配置文件)和bower（项目基本的依赖）。Gulp还可以使用bower所提供的信息把依赖添加到项目的主要文件中。</p>
<ul>
<li>JavaScript引擎，提供了编译和运行JavaScript的环境</li>
</ul>
<p>脚手架工具的作用是搭建项目，让项目顺利跑起来。脚手架工具可以创建一个项目必需的目录，并且初始文件（比如构建代码）、模板代码复制过去，最后安装依赖。在整个开发过程中，脚手架工具的定位是创建项目的基础架构。</p>
<p>Generator是可以被命令行工具yo执行的JavaScript应用，它所做的事情只不过是创建新目录和复制文件。不过，它也没有那么简单。它还可监听参数来修改文件。</p>
<ul>
<li>Yeoman的唯一任务就是运行generator。</li>
</ul>
<p>依赖是独立完整的模块，它是一个应用的一部分或者扩展。依赖可以是像jQuery或angular这样的库，可以是一些UI组件，也可以是像bootstrap这样完整的UI框架。依赖的另一种叫法是包。使用依赖或者包的好处在于：你不用花时间去开发那些已经有的功能，只要用现成的就行了。</p>
<p>依赖管理工具的主要功能是在社区和公司的仓库中搜索依赖，并且下载到本地的项目中。</p>
<p>只要一个模块是由Git托管的，并且拥有bower.json文件，就可以用bower来安装。</p>
<p>有了bower，你就可以用工具来管理所有的第三方模块和组件了。</p>
<ul>
<li>Gulp流式构建系统</li>
</ul>
<p>构建系统是整个工具链的核心。它会处理所有的源文件，把它们变成可部署的代码。它还可以 检查代码质量，自动执行重复的操作。</p>
<p>构建工具首先会读取一个构建配置（或者构建文件），然后定义三个东西：源文件、处理流程和输出文件的目录。源代码经过处理的流程后，最后会被输出到目录中。</p>
<p>用脚手架工具创建应用，用依赖管理工具下载需要的依赖，然后使用构建工具来执行代码编译工具。这三个工具都是基于Node.js的版本。Gulp是整个项目的核心，也是最主要的工具。</p>
<h4 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i gulp -g</span><br></pre></td></tr></table></figure>
<h4 id="局部安装gulp"><a href="#局部安装gulp" class="headerlink" title="局部安装gulp"></a>局部安装gulp</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i gulp --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="配置gulpfile-js"><a href="#配置gulpfile-js" class="headerlink" title="配置gulpfile.js"></a>配置gulpfile.js</h4><h4 id="使用gulp插件"><a href="#使用gulp插件" class="headerlink" title="使用gulp插件"></a>使用gulp插件</h4><h5 id="相关插件："><a href="#相关插件：" class="headerlink" title="相关插件："></a>相关插件：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp-concat: 合并文件（js/css）</span><br><span class="line">gulp-uglify：压缩js文件</span><br><span class="line">gulp-rename：文件重命名</span><br><span class="line">gulp-less：编译less</span><br><span class="line">gulp-clean-css：压缩css</span><br><span class="line">gulp-livereload：实时自动编译刷新</span><br></pre></td></tr></table></figure>

<p>###重要API</p>
<h5 id="gulp-src-filePath-pathArr"><a href="#gulp-src-filePath-pathArr" class="headerlink" title="gulp.src(filePath/pathArr)"></a>gulp.src(filePath/pathArr)</h5><p>指向指定路径的所有文件，返回文件流对象<br>用于读取文件</p>
<h5 id="gulp-dest-dirPath-pathArr"><a href="#gulp-dest-dirPath-pathArr" class="headerlink" title="gulp.dest(dirPath/pathArr)"></a>gulp.dest(dirPath/pathArr)</h5><p>指向指定的所有文件夹</p>
<h5 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name, [deps], fn)"></a>gulp.task(name, [deps], fn)</h5><p>定义一个任务</p>
<h5 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch()"></a>gulp.watch()</h5><p>监视文件的变化</p>
<h3 id="处理js-合并-压缩js文件"><a href="#处理js-合并-压缩js文件" class="headerlink" title="处理js(合并/压缩js文件)"></a>处理js(合并/压缩js文件)</h3><p> 创建js文件<br>   src/js/test1.js<br>   src/js/test2.js</p>
<h5 id="下载插件："><a href="#下载插件：" class="headerlink" title="下载插件："></a>下载插件：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码"><a href="#配置编码" class="headerlink" title="配置编码"></a>配置编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var concat = require(<span class="string">&#x27;gulp-concat&#x27;</span>);</span><br><span class="line">var uglify = require(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line">var rename = require(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var gulp = require(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line">var concat = require(<span class="string">&#x27;gulp-concat&#x27;</span>);</span><br><span class="line">var uglify = require(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line">var rename = require(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//注册任务</span><br><span class="line">// gulp.task(<span class="string">&#x27;任务名&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">//     //配置任务的操作</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">//注册合并压缩js的任务</span><br><span class="line">gulp.task(<span class="string">&#x27;js&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //如果js目录（包括子目录）的所有js文件，需要加上/**/，</span><br><span class="line">    //不加，只代表js目录下的所有js文件</span><br><span class="line">    // gulp.src(<span class="string">&quot;src/js/**/*.js&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/js/*.js&quot;</span>)             //找到目标原文件，将数据读取到gulp的内存中</span><br><span class="line">               .pipe(concat(<span class="string">&#x27;build.js&#x27;</span>))       //临时合并文件</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/js/&#x27;</span>))    // 临时输出文件到本地</span><br><span class="line">               .pipe(uglify())                 //压缩文件</span><br><span class="line">               .pipe(rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))  //重命名</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/js/&#x27;</span>))     //输出压缩文件</span><br><span class="line">&#125;);</span><br><span class="line">// 如果执行每个人物都要gulp ***敲一次命令行，是不方便的，所以把任务放到默认任务里面</span><br><span class="line">//注册默认任务</span><br><span class="line">// gulp.task(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" alt="报错信息"><br>gulp4中创建的任务是一个异步的javascript函数——一个接受错误第一次回调或返回stream, promise, event emitter, child process, 或 observable观察的函数。</p>
<a href="http://www.xinran001.com/frontend/47.html" title="" target="">gulp运行报错：Task function must be specified必须指定任务函数</a>


<h5 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp js</span><br></pre></td></tr></table></figure>
<p>在dist目录下生成  js文件夹和build.js和build.min.js</p>
<h3 id="处理css"><a href="#处理css" class="headerlink" title="处理css"></a>处理css</h3><p> 创建css文件<br>   src/css/test1.css<br>   src/css/test2.css<br>   src/less/test3.less</p>
<h5 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h5> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-less gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码-1"><a href="#配置编码-1" class="headerlink" title="配置编码"></a>配置编码</h5><p> var less = require(‘gulp-less’);<br> var cleanCSS = require(‘gulp-clean-css’);</p>
<h5 id="less处理任务"><a href="#less处理任务" class="headerlink" title="less处理任务"></a>less处理任务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;less&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/less/*.less&quot;</span>)</span><br><span class="line">               .pipe(less())            //编译less文件为css文件</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;src/css/&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp less</span><br></pre></td></tr></table></figure>
<p>在src/css目录下生成test3.css文件（先将less编译为css文件，<br>放到src/css目录下，然后再跟其他css文件一起压缩处理等）</p>
<h5 id="合并压缩css文件"><a href="#合并压缩css文件" class="headerlink" title="合并压缩css文件"></a>合并压缩css文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;css&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/css/*.css&quot;</span>)</span><br><span class="line">               .pipe(concat(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">               .pipe(rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))</span><br><span class="line">               .pipe(cssClean(&#123;compatibility: <span class="string">&#x27;ie8&#x27;</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="执行命令-1"><a href="#执行命令-1" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp css</span><br></pre></td></tr></table></figure>
<p>在dist目录下生成css目录，css目录里面有文件build.min.css</p>
<h5 id="执行任务异步，任务之间解决依赖关系"><a href="#执行任务异步，任务之间解决依赖关系" class="headerlink" title="执行任务异步，任务之间解决依赖关系"></a>执行任务异步，任务之间解决依赖关系</h5><p>使用gulp.task(‘default’, [‘js’, ‘less’, ‘css’]);<br>报错：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" alt="报错信息"><br>原因：<br>gulp.task 移除了三参数语法，现在不能使用数组来指定一个任务的依赖。gulp 4.0 加入了 gulp.series 和 gulp.parallel 来实现任务的串行化和并行化。<br>不要用Gulp3的方式指定依赖任务，你需要使用gulp.series和gulp.parallel，因为gulp任务现在只有两个参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.series：按照顺序执行</span><br><span class="line">gulp.paralle：可以并行计算</span><br></pre></td></tr></table></figure>
<a href="https://www.jianshu.com/p/c30ff8592421" title="" target="">参考博客</a>
<p>存在异步问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.parallel(<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    // Build the website.</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>报错：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.png" alt="报错信息"></p>
<a href="https://www.npmjs.com/package/gulp4" title="" target="">参考gulp4 Sample gulpfile.js</a>
<p>最终将任务改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var build = gulp.series(gulp.parallel(<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;css&#x27;</span>));</span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, build);</span><br></pre></td></tr></table></figure>
<p>将已生成的dist目录删除，执行任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp </span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.png" alt="运行gulp"><br>在目录中生成dist目录，里面有这3个任务生成的文件。<br>注：如果gulp任务中，去掉return，也可以完成任务，但是任务变成同步执行。<br>return能保证任务是异步执行的，在任务执行完成后，会在gulp中释放掉。效率高</p>
<p>less执行的任务比较多，也许less还没执行完，就执行到css任务了。<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.png" alt="less还没执行完，就执行到css任务"><br>所以要保证执行css任务时，less任务已经执行完了。（添加一个任务数组参数）<br>3.0**这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;css&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>], <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/css/*.css&quot;</span>)</span><br><span class="line">               .pipe(concat(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">               .pipe(rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))</span><br><span class="line">               .pipe(cssClean(&#123;compatibility: <span class="string">&#x27;ie8&#x27;</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>4.0**这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var build = gulp.series(<span class="string">&#x27;less&#x27;</span>, gulp.parallel(<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;html&#x27;</span>));</span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, build);</span><br></pre></td></tr></table></figure>
<p>结果：（css任务在less任务完成之后再执行）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.png" alt="css任务在less任务完成之后再执行"></p>
<h3 id="压缩html"><a href="#压缩html" class="headerlink" title="压缩html"></a>压缩html</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-htmlmin --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码-2"><a href="#配置编码-2" class="headerlink" title="配置编码"></a>配置编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var htmlMin = require(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h5 id="压缩html任务"><a href="#压缩html任务" class="headerlink" title="压缩html任务"></a>压缩html任务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;html&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">               .pipe(htmlMin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>src/index.html:<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.png" alt="运行结果"><br>压缩之后dist/index.html:<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.png" alt="运行结果"><br>原因：<br>原html文件引入的css文件路径不对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;dist/css/build.min.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/build.min.css&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="半自动进行项目构建（把gulp的版本换为3-9-1，4-0以上版本处理起来不熟练）"><a href="#半自动进行项目构建（把gulp的版本换为3-9-1，4-0以上版本处理起来不熟练）" class="headerlink" title="半自动进行项目构建（把gulp的版本换为3.9.1，4.0以上版本处理起来不熟练）"></a>半自动进行项目构建（把gulp的版本换为3.9.1，4.0以上版本处理起来不熟练）</h4><h5 id="下载插件-1"><a href="#下载插件-1" class="headerlink" title="下载插件"></a>下载插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码-3"><a href="#配置编码-3" class="headerlink" title="配置编码"></a>配置编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var livereload = require(<span class="string">&#x27;gulp-livereload&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//所有需要实时监听的任务，后面加上：</span><br><span class="line">.pipe(livereload())  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;watch&#x27;</span>,[<span class="string">&#x27;default&#x27;</span>], <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //开启监听</span><br><span class="line">    livereload.listen();</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">    gulp.watch([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&#x27;*.html&#x27;</span>,  [<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>执行任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp watch </span><br></pre></td></tr></table></figure>
<p>当src里面的文件有修改时，直接手动刷新浏览器，则可以看到变化，不需要再输入一次执行任务的命令</p>
<h3 id="全自动进行项目构建"><a href="#全自动进行项目构建" class="headerlink" title="全自动进行项目构建"></a>全自动进行项目构建</h3><h4 id="热加载（实时加载）"><a href="#热加载（实时加载）" class="headerlink" title="热加载（实时加载）"></a>热加载（实时加载）</h4><h5 id="下载插件：gulp-connect"><a href="#下载插件：gulp-connect" class="headerlink" title="下载插件：gulp-connect"></a>下载插件：gulp-connect</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-connect --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码-4"><a href="#配置编码-4" class="headerlink" title="配置编码"></a>配置编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var connect = require(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;server&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>],<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //配置服务器的选项</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">&#x27;dist/&#x27;</span>,</span><br><span class="line">        livereload: <span class="literal">true</span>,     //实时刷新</span><br><span class="line">        port: 5000</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">    gulp.watch([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&#x27;*.html&#x27;</span>,  [<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//所有需要实时监听的任务，后面加上：</span><br><span class="line"> .pipe(connect.reload())</span><br></pre></td></tr></table></figure>
<h5 id="执行任务-1"><a href="#执行任务-1" class="headerlink" title="执行任务"></a>执行任务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp server</span><br></pre></td></tr></table></figure>
<h3 id="自动开启链接"><a href="#自动开启链接" class="headerlink" title="自动开启链接"></a>自动开启链接</h3><h5 id="下载插件-2"><a href="#下载插件-2" class="headerlink" title="下载插件"></a>下载插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install open --save-dev</span><br></pre></td></tr></table></figure>
<h5 id="配置编码-5"><a href="#配置编码-5" class="headerlink" title="配置编码"></a>配置编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var open = require(<span class="string">&#x27;open&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在server任务中，加入：</span><br><span class="line">//open可以自动打开指定的链接</span><br><span class="line">open(<span class="string">&#x27;http://localhost:5000/&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="–扩展–"><a href="#–扩展–" class="headerlink" title="–扩展–"></a>–扩展–</h3><p>打包加载gulp插件<br><b>前提：将插件下载好</b><br>下载打包插件：gulp-load-plugins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-load-plugins --save-dev</span><br><span class="line"></span><br><span class="line">引入： var $ = require(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)();</span><br></pre></td></tr></table></figure>
<p>($就是函数执行后返回的对象，其他插件的方法都在$这个对象里面。)<br>神来之笔：其他的插件不用再引入了<br>使用方法：<br>所有的插件用$引出，其他插件的方法名统一为插件的名字(即插件)<br>使用：<br>在每个方法前面加上$.来调用该方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;css&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>],<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/css/*.css&quot;</span>)</span><br><span class="line">               .pipe($.concat(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">               .pipe($.rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))</span><br><span class="line">               .pipe($.cssClean(&#123;compatibility: <span class="string">&#x27;ie8&#x27;</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;html&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">               .pipe($.htmlMin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/&#x27;</span>))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h6 id="后面跟的是gulp插件，gulp-后面的名称。"><a href="#后面跟的是gulp插件，gulp-后面的名称。" class="headerlink" title="$.后面跟的是gulp插件，gulp-后面的名称。"></a>$.后面跟的是gulp插件，gulp-后面的名称。</h6><p>报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.htmlMin is not a <span class="keyword">function</span></span><br></pre></td></tr></table></figure>
<p>因为一开始是：var htmlMin = require(‘gulp-htmlmin’);<br>将htmlMin改为htmlmin即可<br>报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$.cssClean is not a <span class="keyword">function</span></span><br></pre></td></tr></table></figure>
<p>因为一开始是：var cssClean = require(‘gulp-clean-css’);<br>将cssClean改为cleanCss即可(驼峰命名法)</p>
<p>注：如果使用gulp-load-plugins这个插件，就不用每个插件一个一个引入。<br>gulpfile.js：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var gulp = require(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line">var $ = require(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)();</span><br><span class="line"></span><br><span class="line">// var concat = require(<span class="string">&#x27;gulp-concat&#x27;</span>);</span><br><span class="line">// var uglify = require(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line">// var rename = require(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line">// var less = require(<span class="string">&#x27;gulp-less&#x27;</span>);</span><br><span class="line">// var cssClean = require(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line">// var htmlMin = require(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line">// var livereload = require(<span class="string">&#x27;gulp-livereload&#x27;</span>);</span><br><span class="line">// var connect = require(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var open = require(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">//注册任务</span><br><span class="line">// gulp.task(<span class="string">&#x27;任务名&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">//     //配置任务的操作</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">//注册合并压缩js的任务</span><br><span class="line">gulp.task(<span class="string">&#x27;js&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //如果js目录（包括子目录）的所有js文件，需要加上/**/，</span><br><span class="line">    //不加，只代表js目录下的所有js文件</span><br><span class="line">    // gulp.src(<span class="string">&quot;src/js/**/*.js&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/js/*.js&quot;</span>) //找到目标原文件，将数据读取到gulp的内存中</span><br><span class="line">               .pipe($.concat(<span class="string">&#x27;build.js&#x27;</span>))       //临时合并文件</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/js/&#x27;</span>))    // 临时输出文件到本地</span><br><span class="line">               .pipe($.uglify())                 //压缩文件</span><br><span class="line">               .pipe($.rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))  //重命名</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/js/&#x27;</span>))     //输出压缩文件</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册转换less的任务</span><br><span class="line">gulp.task(<span class="string">&#x27;less&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/less/*.less&quot;</span>)</span><br><span class="line">               .pipe($.less())            //编译less文件为css文件</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;src/css/&#x27;</span>))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册合并压缩css文件</span><br><span class="line">gulp.task(<span class="string">&#x27;css&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>],<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&quot;src/css/*.css&quot;</span>)</span><br><span class="line">               .pipe($.concat(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">               .pipe($.rename(&#123;suffix: <span class="string">&#x27;.min&#x27;</span>&#125;))</span><br><span class="line">               .pipe($.cleanCss(&#123;compatibility: <span class="string">&#x27;ie8&#x27;</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line">//注册压缩html任务</span><br><span class="line">gulp.task(<span class="string">&#x27;html&#x27;</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> gulp.src(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">               .pipe($.htmlmin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</span><br><span class="line">               .pipe(gulp.dest(<span class="string">&#x27;dist/&#x27;</span>))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册监视任务(半自动)</span><br><span class="line">gulp.task(<span class="string">&#x27;watch&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>], <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //开启监听</span><br><span class="line">    livereload.listen();</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">    gulp.watch([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&#x27;*.html&#x27;</span>,  [<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//注册监视任务（全自动）</span><br><span class="line">gulp.task(<span class="string">&#x27;server&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>],<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    //配置服务器的选项</span><br><span class="line">    $.connect.server(&#123;</span><br><span class="line">        root: <span class="string">&#x27;dist/&#x27;</span>,</span><br><span class="line">        livereload: <span class="literal">true</span>,     //实时刷新</span><br><span class="line">        port: 5000</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    //open可以自动打开指定的链接</span><br><span class="line">    open(<span class="string">&#x27;http://localhost:5000/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">    gulp.watch([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&#x27;*.html&#x27;</span>,  [<span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 如果执行每个任务都要gulp *敲一次命令行，是不方便的，所以把任务放到默认任务里面</span><br><span class="line">//注册默认任务</span><br><span class="line">// gulp 4.0.2不能这样写：</span><br><span class="line">// gulp.task(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">// gulp4可以这样写：</span><br><span class="line">// var build = gulp.series(<span class="string">&#x27;less&#x27;</span>, gulp.parallel(<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;html&#x27;</span>));</span><br><span class="line">// gulp.task(<span class="string">&#x27;default&#x27;</span>, build);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;html&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/CyLee/p/6368629.html">JsLint 的安装和使用</a></p>
<p> JSLint 是一款Javascript验证工具，在定位错误并确保基本指南得以遵循时，非常有用。如果你正在编写专业级的javascript，应该使用 JSLint 或者类似的验证工具（JSHint）。它帮助我们避免了许多种bug，极大缩短了开发时间。如果你安装了Node.js，像这样即可安装：</p>
<p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g jslint</span><br></pre></td></tr></table></figure>

<p>使用 JSlint：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jslint spa.js</span><br></pre></td></tr></table></figure>

<p>如果出现以下效果，说明安装并且验证成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spa.js is OK.</span><br></pre></td></tr></table></figure>

<p><a href="https://www.w3cschool.cn/intellij_idea_doc/intellij_idea_doc-cpvt2z2y.html">JSCS：验证JavaScript代码</a></p>
<p><a href="https://github.com/nimoc/gulp-book">gulp 入门指南</a></p>
<p><a href="https://blog.csdn.net/beverley__/article/details/55213235">Gulp编译、合并、压缩，以及Browsersync实时刷新教程</a></p>
<p><a href="https://www.xiaochao.me/seo/118.html">https://www.xiaochao.me/seo/118.html</a></p>
<p><a href="https://www.xiaochao.me/seo/119.html">https://www.xiaochao.me/seo/119.html</a></p>
<p><a href="https://www.xiaochao.me/seo/120.html">https://www.xiaochao.me/seo/120.html</a></p>
<p>小超的博客复制过来的：</p>
<h3 id="gulp的安装"><a href="#gulp的安装" class="headerlink" title="gulp的安装"></a>gulp的安装</h3><p>gulp是依赖于node.js的开放，安装前，请先去node.js官网下载，安装完成后，就开始了以下的操作</p>
<p>安装全局的npm (因为npm是国外的，在这，由于公司的网速，特别卡，坑了我几天了，安装一个npm需要2天，电脑还是不关机的情况下，后来放弃了，就选择了淘宝镜像的。</p>
<p>cnpm，安装方法，可参考一下淘宝的镜像<a href="https://npm.taobao.org/">https://npm.taobao.org/</a> )，在接下来的文章中，我会与淘宝镜像的命令进行说明</p>
<p>使用淘宝镜像安装：npm，可直接安装gulp,node.js自动安装有npm，不需要引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>gulp安装：如果是npm，—下请不要再开头加c ，加了就不关我的事了，在这里-g代表全局变量声明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install -g gulp</span><br></pre></td></tr></table></figure>



<p>安装完全局后，接下来，就开始了gulp的使用了，先创建自己的项目文件，在这里，因为我是用window的，如果是linux我也不做过多的讲解了，等有机会在服务器上折腾一个gulp的时候</p>
<p>进入E盘，在选中的项目中创建一个文件，window用户用md , linux用户用mkdir，在命令行上输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">md gulp-xiaochao</span><br></pre></td></tr></table></figure>

<p>cd,进入目录后，在开始前，我们先创建一个叫package.json文件的文件，先位置好相关的依赖，在这里也可以直接输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure>

<p>进行相关的配置，在这里面会问我们—些问题，版本号和说明什么的，如果喜欢折腾可以填写，全部回车也可以，没有太大的影响，在填写完后，会自动的在文件夹下看见一个叫package.json，当打开文件就会看见，刚刚配置好的说明。回到命令行工具，开始安装gulp，在这里注意—下，前面是全局，要加-g说明，现在是安装在局部，就不需要加上，但是要加上的是–save-dev,这表示写入刚刚创建的</p>
<p>package.json的文件夹里，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure>

<p>当创建好了gulp，目录文件上，会多出了一个node_modules文件夹，打开package,json文件，可以看到上面写着相应的版本号，为了测试他是遵循我的依赖文件走的，我就删除了这个node_modules,然后再从新安装了一下，这次，我不加gulp</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev</span><br></pre></td></tr></table></figure>

<p>安装后，会发现目录里面被删除的node_modules文件又回来了，解释一下，因为在配置文件package.json已经写入了gulp，所以在安装的时候，这里是可以自动安装回来的，说到这，aulp的安装就结束了</p>
<h4 id="gulpfile-js："><a href="#gulpfile-js：" class="headerlink" title="gulpfile.js："></a>gulpfile.js：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取gulp-uglify模块(用于压缩js文件)</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line"><span class="comment">// 在命令使用gulp script启动此任务</span></span><br><span class="line">	gulp.<span class="title function_">task</span>(<span class="string">&#x27;script&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> 		<span class="comment">// 1.我到文件</span></span><br><span class="line">		gulp.<span class="title function_">src</span>(<span class="string">&#x27;js/*.js&#x27;</span>)</span><br><span class="line">    		<span class="comment">// 2.压缩js</span></span><br><span class="line">				.<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">    		<span class="comment">// 3.另存压缩后的文件</span></span><br><span class="line">				.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：1.要加&quot;task&quot;；2.连写，后面不加分号；3.pipe的英文不要写错</span></span><br></pre></td></tr></table></figure>



<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="1-1-环境运行环境nodejs"><a href="#1-1-环境运行环境nodejs" class="headerlink" title="1.1 环境运行环境nodejs"></a>1.1 环境运行环境nodejs</h4><ul>
<li>使用gulp 自动化编译scss. js 等</li>
<li>使用bower管理依赖插件,</li>
<li>使用requirejs 作为模块加载器,</li>
<li>使用bootstrap css 作为样式框架</li>
<li>依赖jquery,jquery-ui 两个库</li>
</ul>
<h4 id="1-2-项目目录"><a href="#1-2-项目目录" class="headerlink" title="1.2 项目目录"></a>1.2 项目目录</h4><ul>
<li>node_rodules 为依赖模块文件</li>
<li>.bowerrc 为 bower配置文件，包含模块安装目录配置</li>
<li>bower. json 为 bower配置文件，包含依赖模块等</li>
<li>gulpfile.js 为 gulp 任务配置文件</li>
<li>package.json为程序配置文件，包含npm 依赖模块等</li>
<li>Lib 为 bower.json  dependencies 中的依赖文件</li>
</ul>
<p>node.js开发环境搭建</p>
<p>[node.js官网](https: //nodejs.org/en/download/)</p>
<h3 id="bower的使用"><a href="#bower的使用" class="headerlink" title="bower的使用"></a>bower的使用</h3><p>使用了bower的项目都会在目录下有一个bowex..ison.文件。在该文件同级目录下，使用如下命令即可安装相关依赖库。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bower install</span><br></pre></td></tr></table></figure>

<p>注：bower下载安装依赖库实际上是使用git进行下载。对于linux系统，由于默认都有安装git，所以一般没问题。但是windows系统一般没有git。在 windows系统下需要确定安装了git客户端，建议使用同捆的git bash 命令什来执行bowerinstall命令。或者把git目录加入windows的环境变量中,再在命令行中执行bowerinstall命令。（）</p>
<p>使用 bower安装某个特定类库，例如： jquery </p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>先装全局，然后在对应文件夹中打开git CMD，做以下操作：</p>
<ol>
<li>在对应的文件夹中，查看是否安装了bower</li>
<li>生成.bowerrc文件</li>
<li>在.bowerrc文件中写出安装bower的文件夹目录</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	“directory”: <span class="string">&quot;lib&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-生成bower-json文件"><a href="#2-生成bower-json文件" class="headerlink" title="2.生成bower.json文件"></a>2.生成bower.json文件</h4><p>在window下的CMD命令窗口，以管理员的身份，去到对应的目录，运行  bower init    其他需要输入的信息，可以选择都是默认也可以选择自己写</p>
<h4 id="3-安装其他依赖插件"><a href="#3-安装其他依赖插件" class="headerlink" title="3.安装其他依赖插件"></a>3.安装其他依赖插件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bower install jquery bootstrap <span class="built_in">require</span> jquery-ui --save-dev</span><br></pre></td></tr></table></figure>

<p>加上–save-dev，在bower.json文件中会写入相关信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bootstrap&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">	<span class="string">&quot;requirejs&quot;</span>: <span class="string">&quot;^2.3.5&quot;</span>,</span><br><span class="line">	<span class="string">&quot;jquery-ui&quot;</span>: <span class="string">&quot;^1.12.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gulp-自动化操作"><a href="#gulp-自动化操作" class="headerlink" title="gulp-自动化操作"></a>gulp-自动化操作</h3><h4 id="全局安装gulp-1"><a href="#全局安装gulp-1" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h4><p>Gulpjs是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务，gulp,js 是基于node.js构建的，利用node.js 的威力，可以快速构建项目</p>
<ol>
<li>说明：全局安装gulp 目的是为了通过她执行gulp 任务 ;</li>
<li>安装：命令提示符执行cnpm install gulp -g; </li>
</ol>
<h4 id="生成package-json"><a href="#生成package-json" class="headerlink" title="生成package.json"></a>生成package.json</h4><p>先写好gulpfile.js文件再执行cnpm init命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure>

<h4 id="本地安装gulp"><a href="#本地安装gulp" class="headerlink" title="本地安装gulp"></a>本地安装gulp</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-connect --save-dev</span><br><span class="line"></span><br><span class="line">cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure>

<h4 id="Sass文件处理"><a href="#Sass文件处理" class="headerlink" title="Sass文件处理"></a>Sass文件处理</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp sass</span><br></pre></td></tr></table></figure>

<h4 id="把gulp-connect改为gulp-webserver"><a href="#把gulp-connect改为gulp-webserver" class="headerlink" title="把gulp-connect改为gulp-webserver"></a>把gulp-connect改为gulp-webserver</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install gulp-webserver --save-dev</span><br></pre></td></tr></table></figure>



<p>报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">Error</span>: <span class="title class_">Script</span> error <span class="keyword">for</span> <span class="string">&quot;popper.js&quot;</span>, needed <span class="attr">by</span>: bootstrap</span><br><span class="line"><span class="comment">// 不知道什么原因导致的</span></span><br></pre></td></tr></table></figure>

<h4 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h4><p>在project\lib\bootstrap\assets\js\vendor中复制一份popper.min.js改名为popper.js，放在project目录下</p>
<p><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a></p>
<h3 id="AMD与CMD的区别"><a href="#AMD与CMD的区别" class="headerlink" title="AMD与CMD的区别"></a>AMD与CMD的区别</h3><ul>
<li>AMD：requirejs     先加载所有的依赖      加载完才能使用</li>
<li>CMD：seajs        延迟加载               需要谁，加载谁</li>
</ul>
<h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="keyword">function</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">		....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a= <span class="built_in">require</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.<span class="title function_">info</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    b.<span class="title function_">info2</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="gulpfile-js的配置"><a href="#gulpfile-js的配置" class="headerlink" title="gulpfile.js的配置"></a>gulpfile.js的配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var gulp = require(&#x27;gulp&#x27;),</span><br><span class="line">    $ = require(&#x27;gulp-load-plugins&#x27;)();</span><br><span class="line"> </span><br><span class="line">var app = &#123;</span><br><span class="line">    srcPath: &#x27;src/&#x27;,</span><br><span class="line">    devPath: &#x27;dist/&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">gulp.task(&#x27;js&#x27;,function()&#123;</span><br><span class="line">    return gulp.src(app.srcPath + &#x27;/*.js&#x27;,&#123;base:app.srcPath&#125;)</span><br><span class="line">        .pipe($.plumber())</span><br><span class="line">        .pipe($.babel(&#123;</span><br><span class="line">            　presets: [&#x27;es2015&#x27;]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(app.devPath));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&#x27;html&#x27;,function()&#123;</span><br><span class="line">    return gulp.src(app.srcPath + &#x27;/*.html&#x27;,&#123;base:app.srcPath&#125;)</span><br><span class="line">        .pipe(gulp.dest(app.devPath));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&#x27;clean&#x27;,function()&#123;</span><br><span class="line">    return gulp.src(app.devPath)</span><br><span class="line">        .pipe($.clean());</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//浏览器同步</span><br><span class="line">gulp.task(&#x27;webserve&#x27;,function()&#123;</span><br><span class="line">    return gulp.src(app.devPath)</span><br><span class="line">        .pipe($.webserver(&#123;</span><br><span class="line">            livereload: true, //开启gulp-livereload</span><br><span class="line">            open: true,</span><br><span class="line">            port: 2333 //浏览器端口</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 监听</span><br><span class="line">gulp.task(&#x27;watch&#x27;,function()&#123;</span><br><span class="line">    gulp.watch(app.srcPath + &#x27;/*.js&#x27;, [&#x27;js&#x27;]);</span><br><span class="line">    gulp.watch(app.srcPath + &#x27;**/*.html&#x27;, [&#x27;html&#x27;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;build&#x27;,[&#x27;js&#x27;, &#x27;html&#x27;]);</span><br><span class="line"></span><br><span class="line">//定义gulp默认任务</span><br><span class="line">gulp.task(&#x27;default&#x27;,[&#x27;build&#x27;,&#x27;watch&#x27;], function () &#123;</span><br><span class="line">    return gulp.src(app.devPath)</span><br><span class="line">        .pipe($.webserver(&#123;</span><br><span class="line">            livereload: true, //开启gulp-livereload</span><br><span class="line">            open: true,</span><br><span class="line">            port: 2333 //浏览器端口</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line">var gulp        = require(&quot;gulp&quot;)</span><br><span class="line">var browserSync = require(&quot;browser-sync&quot;).create()</span><br><span class="line">var babel       = require(&quot;gulp-babel&quot;)</span><br><span class="line">//修改完之后，刷新页面</span><br><span class="line">var reload       = browserSync.reload</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;js&#x27;, function()&#123;</span><br><span class="line">    return gulp.src(&#x27;src/index.js&#x27;)</span><br><span class="line">               .pipe(gulp.dest(&#x27;dist&#x27;))</span><br><span class="line">               .pipe(babel(&#123;</span><br><span class="line">                　presets: [&#x27;es2015&#x27;]</span><br><span class="line">                &#125;))</span><br><span class="line">               .pipe(reload(&#123;stream:true&#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(&quot;default&quot;, function() &#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server:&#123;</span><br><span class="line">            baseDir: &#x27;./&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        port:&#x27;8089&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    gulp.watch(&#x27;src/*.js&#x27;,[&#x27;js&#x27;])</span><br><span class="line">&#125;)</span><br><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">// 调用 .create() 意味着你得到一个唯一的实例并允许您创建多个服务器或代理。</span><br><span class="line">var browserSync = require(&#x27;browser-sync&#x27;).create();</span><br><span class="line">// 定义一个任务，任务的名字，该任务所要执行的一些操作</span><br><span class="line">gulp.task(&#x27;watch&#x27;, function() &#123;</span><br><span class="line">// 启动Browsersync服务。这将启动一个服务器，代理服务器（proxy）或静态服务器（server）</span><br><span class="line">browserSync.init(&#123;</span><br><span class="line">    // 设置监听的文件，以gulpfile.js所在的根目录为起点，如果不在根目录要加上路径，单个文件就用字符串，多个文件就用数组</span><br><span class="line">    files: [&quot;*.html&quot;, &quot;css/*.css&quot;, &quot;src/*.js&quot;, &quot;dist/*.js&quot;],</span><br><span class="line">    // 启动静态服务器，默认监听3000端口，设置启动时打开的index.html的路径</span><br><span class="line">    server: &#123;</span><br><span class="line">        baseDir: &quot;./&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 在不同浏览器上镜像点击、滚动和表单，即所有浏览器都会同步</span><br><span class="line">    ghostMode: &#123;</span><br><span class="line">        clicks: true,</span><br><span class="line">        scroll: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 更改控制台日志前缀</span><br><span class="line">    logPrefix: &quot;learning browser-sync in gulp&quot;,</span><br><span class="line">    // 设置监听时打开的浏览器，下面的设置会同时打开chrome, firefox和IE</span><br><span class="line">    // browser: [&quot;chrome&quot;, &quot;firefox&quot;, &quot;iexplore&quot;],</span><br><span class="line">    // 设置服务器监听的端口号</span><br><span class="line">    port: 8089</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&quot;default&quot;, function() &#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server:&#123;</span><br><span class="line">            baseDir: &#x27;./&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        port:&#x27;8089&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h4 id="Gulp-demo"><a href="#Gulp-demo" class="headerlink" title="Gulp-demo"></a>Gulp-demo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│  gulpfile.js      </span><br><span class="line">│  index.html       </span><br><span class="line">│  package.json     </span><br><span class="line">│  </span><br><span class="line">├─dist</span><br><span class="line">│  │  index.html    </span><br><span class="line">│  │</span><br><span class="line">│  ├─css</span><br><span class="line">│  │      build.min.css</span><br><span class="line">│  │</span><br><span class="line">│  └─js</span><br><span class="line">│          build.js</span><br><span class="line">│          build.min.js</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    ├─css</span><br><span class="line">    │      test1.css</span><br><span class="line">    │      test2.css</span><br><span class="line">    │      test3.css</span><br><span class="line">    │</span><br><span class="line">    ├─js</span><br><span class="line">    │      test1.js</span><br><span class="line">    │      test2.js</span><br><span class="line">    │</span><br><span class="line">    └─less</span><br><span class="line">            test3.less</span><br><span class="line">gulpfile.js</span><br><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">var $ = require(&#x27;gulp-load-plugins&#x27;)();</span><br><span class="line"></span><br><span class="line">// var concat = require(&#x27;gulp-concat&#x27;);</span><br><span class="line">// var uglify = require(&#x27;gulp-uglify&#x27;);</span><br><span class="line">// var rename = require(&#x27;gulp-rename&#x27;);</span><br><span class="line">// var less = require(&#x27;gulp-less&#x27;);</span><br><span class="line">// var cssClean = require(&#x27;gulp-clean-css&#x27;);</span><br><span class="line">// var htmlMin = require(&#x27;gulp-htmlmin&#x27;);</span><br><span class="line">// var livereload = require(&#x27;gulp-livereload&#x27;);</span><br><span class="line">// var connect = require(&#x27;gulp-connect&#x27;);</span><br><span class="line"></span><br><span class="line">var open = require(&#x27;open&#x27;);</span><br><span class="line">//注册任务</span><br><span class="line">// gulp.task(&#x27;任务名&#x27;, function() &#123;</span><br><span class="line">//     //配置任务的操作</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">//注册合并压缩js的任务</span><br><span class="line">gulp.task(&#x27;js&#x27;, function() &#123;</span><br><span class="line">    //如果js目录（包括子目录）的所有js文件，需要加上/**/，</span><br><span class="line">    //不加，只代表js目录下的所有js文件</span><br><span class="line">    // gulp.src(&quot;src/js/**/*.js&quot;) </span><br><span class="line">    </span><br><span class="line">    return gulp.src(&quot;src/js/*.js&quot;)             //找到目标原文件，将数据读取到gulp的内存中</span><br><span class="line">               .pipe($.concat(&#x27;build.js&#x27;))       //临时合并文件</span><br><span class="line">               .pipe(gulp.dest(&#x27;dist/js/&#x27;))    // 临时输出文件到本地</span><br><span class="line">               .pipe($.uglify())                 //压缩文件</span><br><span class="line">               .pipe($.rename(&#123;suffix: &#x27;.min&#x27;&#125;))  //重命名</span><br><span class="line">               .pipe(gulp.dest(&#x27;dist/js/&#x27;))     //输出压缩文件</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册转换less的任务</span><br><span class="line">gulp.task(&#x27;less&#x27;, function() &#123;</span><br><span class="line">    return gulp.src(&quot;src/less/*.less&quot;)</span><br><span class="line">               .pipe($.less())            //编译less文件为css文件</span><br><span class="line">               .pipe(gulp.dest(&#x27;src/css/&#x27;))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册合并压缩css文件</span><br><span class="line">gulp.task(&#x27;css&#x27;, [&#x27;less&#x27;],function() &#123;</span><br><span class="line">    return gulp.src(&quot;src/css/*.css&quot;)</span><br><span class="line">               .pipe($.concat(&#x27;build.css&#x27;))</span><br><span class="line">               .pipe($.rename(&#123;suffix: &#x27;.min&#x27;&#125;))</span><br><span class="line">               .pipe($.cleanCss(&#123;compatibility: &#x27;ie8&#x27;&#125;))</span><br><span class="line">               .pipe(gulp.dest(&#x27;dist/css/&#x27;))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line">//注册压缩html任务</span><br><span class="line">gulp.task(&#x27;html&#x27;, function() &#123;</span><br><span class="line">    return gulp.src(&#x27;index.html&#x27;)</span><br><span class="line">               .pipe($.htmlmin(&#123;collapseWhitespace: true&#125;))</span><br><span class="line">               .pipe(gulp.dest(&#x27;dist/&#x27;))</span><br><span class="line">               .pipe($.livereload())              //实时刷新</span><br><span class="line">               .pipe($.connect.reload())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//注册监视任务(半自动)</span><br><span class="line">gulp.task(&#x27;watch&#x27;, [&#x27;default&#x27;], function() &#123;</span><br><span class="line">    //开启监听</span><br><span class="line">    livereload.listen();</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(&#x27;src/js/*.js&#x27;, [&#x27;js&#x27;]);</span><br><span class="line">    gulp.watch([&#x27;src/css/*.css&#x27;, &#x27;src/less/*.less&#x27;], [&#x27;css&#x27;]);</span><br><span class="line">    gulp.watch(&#x27;*.html&#x27;,  [&#x27;html&#x27;]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//注册监视任务（全自动）</span><br><span class="line">gulp.task(&#x27;server&#x27;, [&#x27;default&#x27;],function() &#123;</span><br><span class="line">    //配置服务器的选项</span><br><span class="line">    $.connect.server(&#123;</span><br><span class="line">        root: &#x27;dist/&#x27;,</span><br><span class="line">        livereload: true,     //实时刷新</span><br><span class="line">        port: 5000</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    //open可以自动打开指定的链接</span><br><span class="line">    open(&#x27;http://localhost:5000/&#x27;);</span><br><span class="line"></span><br><span class="line">    //确认监听的目标以及绑定相应的任务</span><br><span class="line">    gulp.watch(&#x27;src/js/*.js&#x27;, [&#x27;js&#x27;]);</span><br><span class="line">    gulp.watch([&#x27;src/css/*.css&#x27;, &#x27;src/less/*.less&#x27;], [&#x27;css&#x27;]);</span><br><span class="line">    gulp.watch(&#x27;*.html&#x27;,  [&#x27;html&#x27;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 如果执行每个任务都要gulp ***敲一次命令行，是不方便的，所以把任务放到默认任务里面</span><br><span class="line">//注册默认任务</span><br><span class="line">// gulp 4.0.2不能这样写</span><br><span class="line">// gulp.task(&#x27;default&#x27;, [&#x27;js&#x27;, &#x27;less&#x27;, &#x27;css&#x27;]);</span><br><span class="line"></span><br><span class="line">// gulp.task(&#x27;default&#x27;, gulp.parallel(&#x27;js&#x27;, &#x27;less&#x27;, &#x27;css&#x27;, function () &#123;</span><br><span class="line">//     // Build the website.</span><br><span class="line">// &#125;));</span><br><span class="line"></span><br><span class="line">// var build = gulp.series(&#x27;less&#x27;, gulp.parallel(&#x27;js&#x27;, &#x27;css&#x27;, &#x27;html&#x27;));</span><br><span class="line">// gulp.task(&#x27;default&#x27;, build);</span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;js&#x27;, &#x27;less&#x27;, &#x27;css&#x27;, &#x27;html&#x27;]);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery-笔记</title>
    <url>/2019/03/07/jQuery-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="监听输入框的值变化事件"><a href="#监听输入框的值变化事件" class="headerlink" title="监听输入框的值变化事件"></a>监听输入框的值变化事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.search-input&quot;).bind(&#x27;input porpertychange&#x27;,function()&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不足：输入中文时，每输入一个字母，都会触发</p>
<h4 id="监听输入框的值变化-优化"><a href="#监听输入框的值变化-优化" class="headerlink" title="监听输入框的值变化-优化"></a>监听输入框的值变化-优化</h4><p>改为使用compositionstart和compositionend</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 搜索框</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.optionList .searchIpt&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        var text = $(this).val().trim();</span><br><span class="line">        // 匹配查询结果</span><br><span class="line">        searchCheck(text, &quot;.searchIpt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="回到页面顶部"><a href="#回到页面顶部" class="headerlink" title="回到页面顶部"></a>回到页面顶部</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onscroll = function()&#123;</span><br><span class="line">    if (document.documentElement.scrollTop || document.body.scrollTop &gt; 0) &#123;</span><br><span class="line">        document.getElementById(&quot;test&quot;).style.display=&#x27;block&#x27;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        document.getElementById(&quot;test&quot;).style.display=&#x27;none&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.onclick = function()&#123;</span><br><span class="line">    document.body.scrollTop = document.documentElement.scrollTop = 0;</span><br><span class="line">    document.getElementById(&quot;test&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>lay-excel-导出插件</title>
    <url>/2021/02/19/lay-excel-%E5%AF%BC%E5%87%BA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="LAY-EXCEL-简单快捷的导出插件"><a href="#LAY-EXCEL-简单快捷的导出插件" class="headerlink" title="LAY-EXCEL 简单快捷的导出插件"></a>LAY-EXCEL 简单快捷的导出插件</h1><p>现有导出前端库中，XLSX.JS功能强大但是操作颇为不便，于是封装了此插件，依赖jQuery，支持Layui插件形式加载，<strong>导出仅需一句话</strong>。</p>
<p>导出excel功能基于 XLSX.js，下载功能基于 FileSaver，读取文件基于 H5的 FileReader。</p>
<p><strong>功能演示地址：</strong><a href="http://excel.wj2015.com/">http://excel.wj2015.com</a></p>
<p><strong>文档地址：</strong><a href="http://excel.wj2015.com/_book/">http://excel.wj2015.com/_book/</a></p>
<p><img src="../../../../%E6%88%91%E7%9A%84%E8%B5%84%E6%96%99%E5%BA%93/WEB%E5%89%8D%E7%AB%AF/ScreenToGif.gif" alt="1570418356365"></p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>支持IE10+、Firefox、chrome</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>一句话导出，快速上手请查看 <a href="http://excel.wj2015.com/_book/docs/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html">『快速上手』</a>，更多便捷函数请查看<a href="http://excel.wj2015.com/_book/docs/%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8/">『函数列表』</a>，样式设置请查看<a href="http://excel.wj2015.com/_book/docs/%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE%E4%B8%93%E5%8C%BA.html">『样式设置专区』</a>。</p>
<h2 id="依赖的开源项目"><a href="#依赖的开源项目" class="headerlink" title="依赖的开源项目"></a>依赖的开源项目</h2><table>
<thead>
<tr>
<th>开源项目名称</th>
<th>地址</th>
<th>用于</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/SheetJS/js-xlsx">SheetJS / js-xlsx</a></td>
<td><a href="https://github.com/SheetJS/js-xlsx">https://github.com/SheetJS/js-xlsx</a></td>
<td>导出的基础逻辑</td>
</tr>
<tr>
<td><a href="https://github.com/protobi/js-xlsx">protobi / js-xlsx</a></td>
<td><a href="https://github.com/protobi/js-xlsx">https://github.com/protobi/js-xlsx</a></td>
<td>可以设置样式，用于补全样式功能</td>
</tr>
<tr>
<td><a href="https://github.com/eligrey/FileSaver.js/">FileSaver.js</a></td>
<td><a href="https://github.com/eligrey/FileSaver.js/">https://github.com/eligrey/FileSaver.js/</a></td>
<td>前端用于保存文件的JS功能组件</td>
</tr>
<tr>
<td><a href="https://github.com/eligrey/Blob.js/">Blob.js</a></td>
<td><a href="https://github.com/eligrey/Blob.js/">https://github.com/eligrey/Blob.js/</a></td>
<td>Blob在IE10中的hack实现</td>
</tr>
<tr>
<td><a href="https://github.com/philipwalton/polyfill/">polyfill.js</a></td>
<td><a href="https://github.com/philipwalton/polyfill/">https://github.com/philipwalton/polyfill/</a></td>
<td>有名的IE兼容插件</td>
</tr>
<tr>
<td><a href="https://github.com/es-shims/es5-shim">shim.js</a></td>
<td><a href="https://github.com/es-shims/es5-shim">https://github.com/es-shims/es5-shim</a></td>
<td>xlsx.js内置的兼容组件，支持ES5</td>
</tr>
</tbody></table>
<blockquote>
<p>注：魔改 js-xlsx 支持样式的具体细节请见博客：<a href="https://blog.wj2015.com/2019/05/01/js-xlsx%E6%94%AF%E6%8C%81%E6%A0%B7%E5%BC%8F/">JeffreyWang的个人博客：令最新JS-XLSX支持样式的改造方法</a></p>
</blockquote>
<h2 id="待完成需求"><a href="#待完成需求" class="headerlink" title="待完成需求"></a>待完成需求</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 【文档】制作Gitbook方便查阅</li>
<li><input checked="" disabled="" type="checkbox"> 【文档】新增『参与开发』页，以便其他开发者上手此插件</li>
<li><input checked="" disabled="" type="checkbox"> 【文档】新增『常见问题整理』，整理群内高频问题，提高处理效率</li>
<li><input disabled="" type="checkbox"> 【支持】使用npm的方式加载</li>
<li><input disabled="" type="checkbox"> 【测试】单元测试覆盖</li>
<li><input disabled="" type="checkbox"> 【测试】建立CI/CD机制</li>
<li><input disabled="" type="checkbox"> 【导出】分段递归获取数据函数封装</li>
<li><input disabled="" type="checkbox"> 【导出】分段压缩打包</li>
<li><input disabled="" type="checkbox"> 【导出】导出图片（卡住）</li>
<li><input disabled="" type="checkbox"> 【导入】导入图片（卡住）</li>
<li><input disabled="" type="checkbox"> 【兼容性】导入支持IE11（卡住）</li>
</ul>
<h2 id="参与开发"><a href="#参与开发" class="headerlink" title="参与开发"></a>参与开发</h2><p>如果有好的想法，或者想实现 <a href="#%E5%BE%85%E5%AE%8C%E6%88%90%E9%9C%80%E6%B1%82">『待完成需求』</a>中的部分功能，请邮 <a href="mailto:admin@wj2015.com">admin@wj2015.com</a>，或者加群 <a href="https://jq.qq.com/?_wv=1027&k=5RcqcwI">555056599</a> 讨论。</p>
<p>如果有意贡献代码，那么在开始之前，请先阅读 <a href="http://excel.wj2015.com/_book/docs/%E5%8F%82%E4%B8%8E%E5%BC%80%E5%8F%91.html">『参与开发』</a> 文档。</p>
<h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p>感谢 Layui 社区的小伙伴们的使用及建议，还有交流群中反馈各种问题和积极回复问题的群友们，以及 Github 上提 ISSUE、PR 的小伙伴们~</p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><a href="https://github.com/wangerzi/layui-authtree">Auahtree插件</a>、<a href="https://blog.wj2015.com/">JeffreyWang的个人博客</a></p>
<h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>LAY-EXCEL is licensed under the Apache License, Version 2.0. See <a href="https://github.com/GitbookIO/gitbook/blob/master/LICENSE">LICENSE</a> for the full license text.</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>layui</category>
      </categories>
      <tags>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>jsTree笔记</title>
    <url>/2021/01/15/jsTree%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://www.jstree.com.cn/">jsTree</a></p>
<h4 id="清除上次操作记录"><a href="#清除上次操作记录" class="headerlink" title="清除上次操作记录"></a>清除上次操作记录</h4><p><strong>需求</strong>：当进来页面时，页面只展开第一级目录</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/jsTree%E7%AC%94%E8%AE%B0/note1.png" alt="jstree只展开第一级目录"></p>
<p><strong>目前存在问题</strong>：当用户在树上操作了置换，重新刷新页面，进来置换，依然保持上次操作后的状态，如图：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/jsTree%E7%AC%94%E8%AE%B0/note2.png" alt="依然保持上次操作后的状态"></p>
<p>解决方法：</p>
<p>在changed.jstree事件里面，让树重新刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#jstree_demo_div&#x27;).on(&quot;changed.jstree&quot;, function (e, data) &#123;</span><br><span class="line">      $(&#x27;#jstree_demo_div&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>写法1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#treeId&#x27;).jstree(true).refresh();</span><br></pre></td></tr></table></figure>

<p>写法2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#jstree_demo_div&#x27;).jstree(&#x27;refresh&#x27;);</span><br></pre></td></tr></table></figure>

<h5 id="只展开第一级目录"><a href="#只展开第一级目录" class="headerlink" title="只展开第一级目录"></a>只展开第一级目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[0].state.opened = true;</span><br><span class="line">rendertree_group_admin(data);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>state.opened是控制展开还是收起，设置第一级的state.opened为true。</p>
</blockquote>
<p>结合（解决jstree初始状态只展开第一级目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on(&#x27;changed.jstree&#x27;, function (e, data) &#123;</span><br><span class="line">    // 清除树用户之前的操作记录</span><br><span class="line">    $(&#x27;#group_ admin&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">success: function (ret)&#123;</span><br><span class="line">    if (ret.hasOwnProperty(&quot;code&quot;)) &#123;</span><br><span class="line">    	var data = ret.hasOwnProperty(&quot;data&quot;) &amp;&amp; ret.data != &quot;&quot; ? ret.data : &quot;&quot;;</span><br><span class="line">        if (ret.code === 1) &#123;</span><br><span class="line">            $(&quot;#group_admin&quot;).jstree(&quot;destroy&quot;);</span><br><span class="line">            data[Ø].state, opened = true;</span><br><span class="line">            rendertree_group_admin(data);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在bug：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取是否刚登录进来页面</span><br><span class="line">var isFirst = localStorage.getItem(&#x27;loginInPage&#x27;);</span><br><span class="line">if(isFirst == &#x27;true&#x27;)&#123;</span><br><span class="line">	// 清除树的用户之前的操作记录</span><br><span class="line">	$(&#x27;#group_admin&#x27;).jstree(&#x27;refresh&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="展开全部"><a href="#展开全部" class="headerlink" title="展开全部"></a>展开全部</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#group_admin&quot;).jstree(&quot;close_all&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="收起全部"><a href="#收起全部" class="headerlink" title="收起全部"></a>收起全部</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#group_admin&quot;).jstree(&quot;open_all&quot;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>jsTree</category>
      </categories>
      <tags>
        <tag>jsTree</tag>
      </tags>
  </entry>
  <entry>
    <title>let和const命令</title>
    <url>/2019/07/04/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1-let命令"><a href="#1-let命令" class="headerlink" title="1.let命令"></a>1.let命令</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>所声明的变量，只在let命令所在的代码块内有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  var b = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a // ReferenceError: a is not defined.</span><br><span class="line">b // 1</span><br></pre></td></tr></table></figure>
<p>for循环的计数器，就很适合使用let命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(i);</span><br><span class="line">// ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var a = [];</span><br><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 10</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 6</span><br></pre></td></tr></table></figure>

<p>for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">  <span class="built_in">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br></pre></td></tr></table></figure>
<h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var tmp = 123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; // ReferenceError</span><br><span class="line">  <span class="built_in">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p>
<h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><p>let不允许在相同作用域内，重复声明同一个变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 报错</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 报错</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">let</span> a = 10;</span><br><span class="line">  <span class="built_in">let</span> a = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，不能在函数内部重新声明参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> func(arg) &#123;</span><br><span class="line">  <span class="built_in">let</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">func() // 报错</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> func(arg) &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">let</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">func() // 不报错</span><br></pre></td></tr></table></figure>
<h4 id="ES6的块级作用域"><a href="#ES6的块级作用域" class="headerlink" title="ES6的块级作用域"></a>ES6的块级作用域</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// IIFE 写法</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  var tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">// 块级作用域写法</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="块级作用域与函数声明"><a href="#块级作用域与函数声明" class="headerlink" title="块级作用域与函数声明"></a>块级作用域与函数声明</h4><p>允许在块级作用域内声明函数。<br>函数声明类似于var，即会提升到全局作用域或函数作用域的头部。<br>同时，函数声明还会提升到所在的块级作用域的头部。</p>
<p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 块级作用域内部的函数声明语句，建议不要使用</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 块级作用域内部，优先使用函数表达式</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">let</span> a = <span class="string">&#x27;secret&#x27;</span>;</span><br><span class="line">  <span class="built_in">let</span> f = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> a;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 第一种写法，报错</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="built_in">let</span> x = 1;</span><br><span class="line"></span><br><span class="line">// 第二种写法，不报错</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">let</span> x = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，第一种写法没有大括号，所以不存在块级作用域，而let只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p>
<p>函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 不报错</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 报错</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const PI = 3.1415;</span><br><span class="line">PI // 3.1415</span><br><span class="line"></span><br><span class="line">PI = 3;</span><br><span class="line">// TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>
<p>上面代码表明改变常量的值会报错。</p>
<p><b>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</b></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const foo;</span><br><span class="line">// SyntaxError: Missing initializer <span class="keyword">in</span> const declaration</span><br></pre></td></tr></table></figure>
<p>上面代码表示，对于const来说，只声明不赋值，就会报错。</p>
<p>const的作用域与let命令相同：只在声明所在的块级作用域内有效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  console.log(MAX); // ReferenceError</span><br><span class="line">  const MAX = 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码在常量MAX声明之前就调用，结果报错。</p>
<p>const声明的常量，也与let一样不可重复声明。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var message = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line"><span class="built_in">let</span> age = 25;</span><br><span class="line"></span><br><span class="line">// 以下两行都会报错</span><br><span class="line">const message = <span class="string">&quot;Goodbye!&quot;</span>;</span><br><span class="line">const age = 30;</span><br></pre></td></tr></table></figure>
<h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// 为 foo 添加一个属性，可以成功</span><br><span class="line">foo.prop = 123;</span><br><span class="line">foo.prop // 123</span><br><span class="line"></span><br><span class="line">// 将 foo 指向另一个对象，就会报错</span><br><span class="line">foo = &#123;&#125;; // TypeError: <span class="string">&quot;foo&quot;</span> is read-only</span><br></pre></td></tr></table></figure>
<p>如果真的想将对象冻结，应该使用Object.freeze方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const foo = Object.freeze(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">// 常规模式时，下面一行不起作用；</span><br><span class="line">// 严格模式时，该行会报错</span><br><span class="line">foo.prop = 123;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>阮一峰-ES6</category>
      </categories>
      <tags>
        <tag>阮一峰-ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>layui 笔记</title>
    <url>/2020/06/24/layui-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://github.com/sentsin/layui">layui-github</a></p>
<p><a href="https://layer.layui.com/api.html">layer文档</a></p>
<p><a href="https://layer.layui.com/api.html#btn">layer.comfirm弹窗按钮文字和事件</a></p>
<h4 id="layui表格的复选框全选和单选的功能"><a href="#layui表格的复选框全选和单选的功能" class="headerlink" title="layui表格的复选框全选和单选的功能"></a>layui表格的复选框全选和单选的功能</h4><ol>
<li><p>表格需要导出的，导出时，要将自定义的复选框去除</p>
</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; field: <span class="string">&#x27;checkbox&#x27;</span>, title: <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; lay-filter=&quot;allAccountList&quot; lay-skin=&quot;primary&quot;&gt;&#x27;</span>, width: 66 ,templet: <span class="keyword">function</span>(res)&#123;</span><br><span class="line">   <span class="built_in">return</span> <span class="string">&#x27;&lt;input type=&quot;checkbox&quot; data-id=&quot;&#x27;</span>+ res.id +<span class="string">&#x27;&quot; lay-filter=&quot;accountList&quot; lay-skin=&quot;primary&quot;&gt;&#x27;</span></span><br><span class="line">&#125;&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 监听全选复选框</span><br><span class="line">form.on(<span class="string">&#x27;checkbox(allAccountList)&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!list.length) &#123;</span><br><span class="line">        $(<span class="string">&#x27;input[lay-filter=&quot;allAccountList&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    // 是否全选</span><br><span class="line">    var isAll = data.elem.checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    // 是否被选中</span><br><span class="line">    <span class="keyword">if</span>(isAll) &#123;</span><br><span class="line">        ids = list.map(<span class="keyword">function</span>(item)&#123;</span><br><span class="line">            <span class="built_in">return</span> item.id;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ids = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 更新复选框样式</span><br><span class="line">    $(<span class="string">&#x27;.layui-table input[type=&quot;checkbox&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, isAll);</span><br><span class="line">    // 重新渲染</span><br><span class="line">    form.render(<span class="string">&#x27;checkbox&#x27;</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">// 监听单选复选框</span><br><span class="line">form.on(<span class="string">&#x27;checkbox(accountList)&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">    // 是否被选中</span><br><span class="line">    var isChecked = data.elem.checked;</span><br><span class="line">    // 是否全选</span><br><span class="line">    var isAll = <span class="literal">false</span>;</span><br><span class="line">    // 当前项的<span class="built_in">id</span></span><br><span class="line">    var _id = $(data.elem).data(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isChecked) &#123;</span><br><span class="line">        // 追加</span><br><span class="line">        ids.push(_id);</span><br><span class="line">        isAll = (ids.length == list.length) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 减去</span><br><span class="line">        var index = ids.indexOf(_id);</span><br><span class="line">        ids.splice(index, 1);</span><br><span class="line"></span><br><span class="line">        isAll =  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 更新全选复选框的样式</span><br><span class="line">    $(<span class="string">&#x27;input[lay-filter=&quot;allAccountList&quot;]&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>, isAll);</span><br><span class="line">    // 重新渲染</span><br><span class="line">    form.render(<span class="string">&#x27;checkbox&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="移动端，点击日期插件不显示"><a href="#移动端，点击日期插件不显示" class="headerlink" title="移动端，点击日期插件不显示"></a>移动端，点击日期插件不显示</h4><p>解决方法：加上，trigger: ‘click’ //采用click弹出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">laydate.render(&#123;</span><br><span class="line">elem: <span class="string">&#x27;#compareTime&#x27;</span> //指定元素</span><br><span class="line">, <span class="built_in">type</span>: <span class="string">&#x27;date&#x27;</span></span><br><span class="line">, max: endTime</span><br><span class="line">, min: minTime</span><br><span class="line">, trigger: <span class="string">&#x27;click&#x27;</span> //采用click弹出</span><br><span class="line">, <span class="keyword">done</span>: <span class="keyword">function</span> (value, <span class="built_in">date</span>, endDate) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;,</span><br><span class="line">ready: <span class="keyword">function</span>(<span class="built_in">date</span>)&#123;</span><br><span class="line">   .....</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="判断复选框是否选中-获取复选框的值"><a href="#判断复选框是否选中-获取复选框的值" class="headerlink" title="判断复选框是否选中(获取复选框的值)"></a>判断复选框是否选中(获取复选框的值)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data.elem.checked</span><br></pre></td></tr></table></figure>

<h4 id="设置layer-alert和layer-comfirm为不可resize"><a href="#设置layer-alert和layer-comfirm为不可resize" class="headerlink" title="设置layer-alert和layer-comfirm为不可resize"></a>设置layer-alert和layer-comfirm为不可resize</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将resize参数设置为<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="layui表格固定表头"><a href="#layui表格固定表头" class="headerlink" title="layui表格固定表头"></a>layui表格固定表头</h4><p>给表格设置高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    elem: &#x27;#hourData&#x27;</span><br><span class="line">    , data: res</span><br><span class="line">    , height: 330</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="导出excel表格"><a href="#导出excel表格" class="headerlink" title="导出excel表格"></a>导出excel表格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ins1 = table.render (&#123;</span><br><span class="line">	elem: &#x27;#demo &#x27;</span><br><span class="line">	,id: &#x27;test&#x27;</span><br><span class="line">	...</span><br><span class="line">&#125;)</span><br><span class="line">// 将上述表格示例导出为csv文件</span><br><span class="line">table.exportFile(ins1.config.id，data) ; // data为该实例中的任意数量的数据</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 渲染表格</span><br><span class="line">function table_list(list)&#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    console.log(cols);</span><br><span class="line">    table.render(&#123;</span><br><span class="line">        elem:&quot;#campaigninfo_ table&#x27;</span><br><span class="line">        , page: true  // 开启分市</span><br><span class="line">        , id:&quot;campaigninfoTable&quot;</span><br><span class="line">        , title:”推广活动详情&quot;</span><br><span class="line">        , cols: [cols]</span><br><span class="line">        , data: list</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 导出按钮</span><br><span class="line">$(&quot;.down-file&quot;).click(function() &#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    var arr = [] ;</span><br><span class="line">    for(var i = 0; i&lt; cols.length; i++) &#123;</span><br><span class="line">        arr.push(cols[i].title);</span><br><span class="line">    &#125;</span><br><span class="line">    // 导出所有数据，所以用返回的全部数据</span><br><span class="line">    table.exportFile(&quot;campaigninfoTable&quot;, list, &#x27;xls&#x27;); // 默认导出csv, 也可以为: xls</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="导出excel表格时，去掉页面表头显示的小图标"><a href="#导出excel表格时，去掉页面表头显示的小图标" class="headerlink" title="导出excel表格时，去掉页面表头显示的小图标"></a>导出excel表格时，去掉页面表头显示的小图标</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note2.png" alt="去掉导出表格的表头显示的小图标"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var campaigninfoTable;</span><br><span class="line">// 渲染表格</span><br><span class="line">function table_list(list)&#123;</span><br><span class="line">    var cols = getIndexs();</span><br><span class="line">    // 不受影响的表头</span><br><span class="line">    var colsold = $.extend(true,[],cols);</span><br><span class="line"></span><br><span class="line">    campalgnintoTable = table.render( &#123;</span><br><span class="line">        elem:&#x27;#campaigninfo_table&#x27;</span><br><span class="line">        , page: true // 开启分页</span><br><span class="line">        , cellMinwidth: 160</span><br><span class="line">        , id: &quot;campaigninfoTable”</span><br><span class="line">        , title: &quot;推广活动详情”</span><br><span class="line">        , cols:[colsold]</span><br><span class="line">        , data: list</span><br><span class="line">        , done: function (res, curr, count) &#123;</span><br><span class="line">            // 表格头部样式处理</span><br><span class="line">            tableHeaderscroll(&quot; #campaigninfo table&quot;, count);</span><br><span class="line">            // 分页的显示隐藏</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function downloadTable(tableobj, tableId, data) &#123;</span><br><span class="line">    // 循环表头，将图标去掉(下载表格前，将图标去掉) </span><br><span class="line">    var colsNew = table0bj.config.cols[0];</span><br><span class="line">    var colsold = $.extend(true,[] , colsNew);</span><br><span class="line">    for (var item in colsNew)&#123;</span><br><span class="line">        var title = colsNew [item][&#x27;title&#x27;];</span><br><span class="line">        if (title.index0f(&quot;&lt;/span&gt;&quot;) &gt; -1) &#123;</span><br><span class="line">            var arr = colsNew[item][&#x27;title&#x27;].split(&quot;&lt;/span&gt;&quot;);</span><br><span class="line">            colsNew[item][&#x27;title&#x27;] = arr[1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 设置新表头</span><br><span class="line">    table0bj.config.cols[0] = colsNew;</span><br><span class="line">    if (data.length)&#123;</span><br><span class="line">        // 导出所有数据，所以用返回的全部数据</span><br><span class="line">        layui.table.exportFile(tableId, data,&#x27;xls&#x27;); // 默认导出csV,也可以为: xls</span><br><span class="line">        // 设置有图标表头</span><br><span class="line">        table0bi.config.cols[0] = cols0ld;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        layer.msg(&#x27;暂无数据&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>点击下载时，将表格的头部图标去掉，执行了下载表格的函数之后，将表头的图标加上。<br>注意：由于表头cols是对象，指向地址，修改了，会影响全局的（例如：点击时间间隔时会拿到去掉图标的表头）<br>解决：（保留原来的不加以修改的表头数据）</p>
</blockquote>
<h4 id="修改重载表格时的加载图标"><a href="#修改重载表格时的加载图标" class="headerlink" title="修改重载表格时的加载图标"></a>修改重载表格时的加载图标</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note5.png" alt="修改重载表格时的加载图标"></p>
<ul>
<li><p>如果只修改样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-view .layui-table-init .layui-icon-loading&#123;</span><br><span class="line">  	font-size: 60px;</span><br><span class="line">  	color: #666;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不想页面显示表格加载图标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-view .layui-table-init .layui-icon-loading&#123;</span><br><span class="line">    display: none !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="表格表头标题之间边框不显示"><a href="#表格表头标题之间边框不显示" class="headerlink" title="表格表头标题之间边框不显示"></a>表格表头标题之间边框不显示</h4><p><strong>ie浏览器，layui表格的表头不显示边框</strong></p>
<p>th本来是position：relative；改为position: static；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table td, .layui-table th&#123;</span><br><span class="line">    position: static\9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法"><a href="#修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法" class="headerlink" title="修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法"></a>修改了layui表格的内容，不刷新页面，只刷新表格内容，页码不刷新解决方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function render_table(tabledata, cur) &#123;</span><br><span class="line">  ·········</span><br><span class="line">  , page: &#123;</span><br><span class="line">    curr: cur</span><br><span class="line">  &#125;</span><br><span class="line">  , data: tabledata</span><br><span class="line">   ·········</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取当前页</span><br><span class="line">var curr = $(&quot;.layui-laypage-skip input&quot;).val();</span><br><span class="line">//重新渲染表格</span><br><span class="line">&lt;!-- res.data：修改数据后，重新返回渲染表格的数据 --&gt;</span><br><span class="line">&lt;!-- 从curr页开始渲染表格 --&gt;</span><br><span class="line">render_table(res.data, curr);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="layui同时清空多个表单元素的值"><a href="#layui同时清空多个表单元素的值" class="headerlink" title="layui同时清空多个表单元素的值"></a>layui同时清空多个表单元素的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 form 加上 lay-filter属性  lay-filter=&quot;group_form&quot;</span><br><span class="line">2、 </span><br><span class="line">$(&quot;#cancel&quot;).click(function() &#123;</span><br><span class="line">    form.val(&quot;group_form&quot;, &#123;</span><br><span class="line">      &quot;sdk&quot;: &quot;&quot;,     //单选框清空不了</span><br><span class="line">      &quot;name&quot;: &quot;&quot;,    //输入框可以清空</span><br><span class="line">      &quot;sort&quot;: &quot;&quot;,    //复选框清空不了</span><br><span class="line">      &quot;ddddd&quot;: &quot;&quot;,   //下拉框可以清空</span><br><span class="line">      &quot;password&quot;: &quot;&quot; //密码框可以清空</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="将MD5定义成layui的模块"><a href="#将MD5定义成layui的模块" class="headerlink" title="将MD5定义成layui的模块"></a>将MD5定义成layui的模块</h4><p><a href="https://www.layui.com/doc/base/modules.html#extend">扩展一个 layui 模块</a></p>
<p>1、在md5的js文件最后加上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.define(function(exports)&#123; </span><br><span class="line">  exports(&#x27;mymd&#x27;, &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2、如果mymd.js文件放在与使用它的html文件同一个目录下，在html文件中直接使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用拓展模块</span><br><span class="line">layui.use([&#x27;mymd&#x27;], function()&#123;</span><br><span class="line">  var mymd = layui.mymd;</span><br><span class="line"></span><br><span class="line">  mymd.hash = md5;   //md5加密方法</span><br><span class="line">  console.log(mymd.hash(&quot;md5加密&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3、如果mymd.js文件放在与使用它的html文件不同目录下，在html文件中要在 extend 指定路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.extend(&#123;</span><br><span class="line">  mymd: &#x27;./js/mymd&#x27; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>再使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用拓展模块</span><br><span class="line">layui.use([&#x27;mymd&#x27;], function()&#123;</span><br><span class="line">  var mymd = layui.mymd;</span><br><span class="line"></span><br><span class="line">  mymd.hash = md5;   //md5加密方法</span><br><span class="line">  console.log(mymd.hash(&quot;md5加密&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="laypage"><a href="#laypage" class="headerlink" title="laypage"></a>laypage</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;laypage&#x27;, &#x27;layer&#x27;], function()&#123;</span><br><span class="line">  var laypage = layui.laypage</span><br><span class="line">  ,layer = layui.layer;</span><br><span class="line">  </span><br><span class="line">  //完整功能</span><br><span class="line">  laypage.render(&#123;</span><br><span class="line">    elem: &#x27;demo7&#x27;</span><br><span class="line">    ,count: 100</span><br><span class="line">    ,layout: [&#x27;count&#x27;, &#x27;prev&#x27;, &#x27;page&#x27;, &#x27;next&#x27;, &#x27;limit&#x27;, &#x27;skip&#x27;]</span><br><span class="line">    ,jump: function(obj)&#123;</span><br><span class="line">      console.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui日期时间段的设置，开始时间-结束时间"><a href="#layui日期时间段的设置，开始时间-结束时间" class="headerlink" title="layui日期时间段的设置，开始时间-结束时间"></a>layui日期时间段的设置，开始时间-结束时间</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var nowTime = new Date( ).valueOf( );</span><br><span class="line"></span><br><span class="line">var start = laydate.render(&#123;</span><br><span class="line">	elem: &quot;#start&quot;,</span><br><span class="line">	min: nowTime,</span><br><span class="line">	done: function(value, date) &#123;</span><br><span class="line">		endMax = end.config.max;</span><br><span class="line">		end.config.min = date;     // 根据开始时间来设置结束时间的最小值/最大值</span><br><span class="line">		end.config.min.month = date.month - 1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var end = laydate.render(&#123;</span><br><span class="line">	elem: &quot;#end&quot;,</span><br><span class="line">	min：nowTime,   //  结束时间初始化的时候要设置一个值，不然开始时间的回调中，设置了也不起作用。初始化的时候就要写上nowTime这个，不然动态控制不了</span><br><span class="line">	done: function(value, date) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改开始时间和结束时间之间的符号"><a href="#修改开始时间和结束时间之间的符号" class="headerlink" title="修改开始时间和结束时间之间的符号"></a>修改开始时间和结束时间之间的符号</h4><p>方法：修改laydate.js文件里面的t.range = “-“为t.range = “/“</p>
<p>修改layui/lay/modules/laydate.js：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(t.range === !0 &amp;&amp; (t.range = &#x27;/&#x27;))   改为： (t.range === !0 &amp;&amp; (t.range = &#x27;-&#x27;)) </span><br></pre></td></tr></table></figure>



<h4 id="laytui表格内容超过表格长度的处理"><a href="#laytui表格内容超过表格长度的处理" class="headerlink" title="laytui表格内容超过表格长度的处理"></a>laytui表格内容超过表格长度的处理</h4><p>当表格单元格的文字的长度超过表格当前列的宽度时，点击单元格的内容，会出现如图问题：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/layui-%E7%AC%94%E8%AE%B0/note7.png" alt="当表格单元格的文字的长度超过表格当前列的宽度时"></p>
<p>解决方法(使用css样式控制它隐藏)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.layui-table-tips-main&#123;display:none&#125;</span><br><span class="line">.layui-table-tips-c&#123;display:none&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/pyspang/p/11164736.html">https://www.cnblogs.com/pyspang/p/11164736.html</a></p>
<p><a href="https://www.cnblogs.com/xxzb/p/12618226.html">https://www.cnblogs.com/xxzb/p/12618226.html</a></p>
<p>layui分页插件，一直在调用方法的解决办法</p>
<p>（死循环）</p>
<p>由于每次加载时都会执行jump回调，所以初次不让它执行jump里的方法（!first）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laypage.render(&#123;</span><br><span class="line">    elem: &#x27;demo8&#x27;</span><br><span class="line">    , count: totalCount</span><br><span class="line">    , layout: [&#x27;count&#x27;, &#x27;prev&#x27;, &#x27;page&#x27;, &#x27;next&#x27;, &#x27;limit&#x27;, &#x27;refresh&#x27;, &#x27;skip&#x27;]</span><br><span class="line">    , jump: function (obj, first) &#123;</span><br><span class="line">        //模拟渲染</span><br><span class="line">        page = obj.curr;</span><br><span class="line">        limit = obj.limit;</span><br><span class="line">        if (!first) &#123;</span><br><span class="line">             //执行方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="requriejs加载layui"><a href="#requriejs加载layui" class="headerlink" title="requriejs加载layui"></a><a href="https://blog.csdn.net/radzhang/article/details/84927005">requriejs加载layui</a></h4><h4 id="渲染动态表头"><a href="#渲染动态表头" class="headerlink" title="渲染动态表头"></a>渲染动态表头</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var dynamicCols = [];     //用来存放动态表头</span><br><span class="line">var colsList = [];  //表头列表</span><br><span class="line">$(数据返回的表头数组).each(function (i, item) &#123;</span><br><span class="line">    //设置表头</span><br><span class="line">    var info = &#123; field: item.field, title: item.title &#125;;</span><br><span class="line">    colsList.push(info);</span><br><span class="line">&#125;</span><br><span class="line">dynamicCols.push(colsList);</span><br><span class="line"></span><br><span class="line">//执行渲染</span><br><span class="line">table.render(&#123;</span><br><span class="line">    elem: &quot;#demo&quot;  //指定原始表格元素选择器（推荐id选择器）</span><br><span class="line">    ,height: 315   //容器高度</span><br><span class="line">    ,cols:dynamicCols     //设置表头</span><br><span class="line">    </span><br><span class="line">    //,.....       //其他参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态修改layui的select框的值"><a href="#动态修改layui的select框的值" class="headerlink" title="动态修改layui的select框的值"></a>动态修改layui的select框的值</h4><p>例如：点击表格的编辑按钮，获取当前行数据，根据不同的系统名称，在弹出的弹窗中，将系统选中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form class=&quot;layui-form&quot; lay-filter=&quot;whitelistForm&quot;&gt;</span><br><span class="line">	&lt;input type=&quot;text&quot; name=&quot;whiteKey&quot; placeholder=&quot;搜索设备名&quot; autocomplete=&quot;off&quot; class=&quot;layui-input&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">// 点击表格的编辑按钮</span><br><span class="line">....</span><br><span class="line">else if(obj.event === &#x27;edit&#x27;) &#123;</span><br><span class="line">	var dataValue = data.system === &#x27;iOS&#x27; ? &#x27;1&#x27; : &#x27;2&#x27;;</span><br><span class="line">	</span><br><span class="line">	// 方法一或方法二的代码</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<ol>
<li><p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.val(&#x27;whitelistForm&#x27;, &#123;&#x27;whiteKey&#x27;: dataVale&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先需要使用lay-value来确定需要设置哪个元素自动选择</span><br><span class="line">var select = &#x27;dd [ lay-value=&#x27; +data.id + &#x27;]&#x27;;</span><br><span class="line">// 触发点击事件，实现自动选择</span><br><span class="line">$(&quot;input[ name=&#x27;system&#x27;]&quot;).siblings(&quot;div.layui-form-select&quot;).find(&#x27;dl&#x27;).find(select).click();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="layui日期时间段的设置，开始时间-结束时间-1"><a href="#layui日期时间段的设置，开始时间-结束时间-1" class="headerlink" title="layui日期时间段的设置，开始时间-结束时间"></a>layui日期时间段的设置，开始时间-结束时间</h4><p>最小值最大值动态设置的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* ----日期初始化-开始---- */</span><br><span class="line">$(&quot;#baseTime&quot;).val(today);</span><br><span class="line">$(&quot;#compareTime&quot;).val(adDate.getDate(-1)); // 前一天</span><br><span class="line">// 基础日期</span><br><span class="line">laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#baseTime&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , min: minTime</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 对比日期</span><br><span class="line">laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#compareTime&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , min: minTime</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;,</span><br><span class="line">    ready: function(date)&#123;</span><br><span class="line">        var y = date.year</span><br><span class="line">            , m = date.month </span><br><span class="line">            , d = date.date; </span><br><span class="line"></span><br><span class="line">        m = (m &lt; 10) ? &#x27;0&#x27; + m : m; </span><br><span class="line">        d = (d &lt; 10) ? &#x27;0&#x27; + d : d;</span><br><span class="line"></span><br><span class="line">        // 获取输入框上一次的日期</span><br><span class="line">        compareTime =  y + &#x27;-&#x27; + m + &#x27;-&#x27; + d; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var today = adDate.getDate(0);	// 今日(封装的一个方法)</span><br><span class="line">// 激活时间段日期选择 </span><br><span class="line">var activeTime = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#actRange&#x27;  </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , range: true</span><br><span class="line">    , max: today		// 最大值为今天</span><br><span class="line">    , trigger: &#x27;click&#x27; 	// 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        // 设置付费时间段最小日期</span><br><span class="line">        payRange.config.min = &#123;</span><br><span class="line">            year:date.year,</span><br><span class="line">            month:date.month - 1,</span><br><span class="line">            date:date.date</span><br><span class="line">        &#125;</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 付费时间段选择</span><br><span class="line">var payRange = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#payRange&#x27; </span><br><span class="line">    , type: &#x27;date&#x27;</span><br><span class="line">    , range: true</span><br><span class="line">    , min: today</span><br><span class="line">    , max: today</span><br><span class="line">    , trigger: &#x27;click&#x27; // 采用click弹出</span><br><span class="line">    , done: function (value, date, endDate) &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="upload模块"><a href="#upload模块" class="headerlink" title="upload模块"></a>upload模块</h5><p>多次上传同一文件，不弹报错信息</p>
<blockquote>
<p>场景：1.选择错误格式的文件（a.jpg），弹出错误提示”文件格式不对“；2.再次选择a.jpg，就不弹错误提示；</p>
<p>3.在1的基础上，选择其他文件(b.jpg)，会弹错误提示</p>
</blockquote>
<p>解决：需要清空file中的value值。如果值是一样的（也就是选择同一个文件），不会执行判断，所以弹出错误提示时，需要将它的value值清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 重新上传签名文件按钮</span><br><span class="line">upload.render(&#123; //允许上传的文件后缀</span><br><span class="line">    elem: &#x27;#uploadSign&#x27;</span><br><span class="line">    , url: &#x27;&#x27;</span><br><span class="line">    , accept: &#x27;file&#x27; //普通文件</span><br><span class="line">    , auto: false</span><br><span class="line">    , bindAction: &#x27;#uploadFile&#x27;</span><br><span class="line">    // , exts: &#x27;keystore|jks&#x27; //只允许上传文件 （这样写会调用layui本身的文件上传错误提示）</span><br><span class="line">    // , size: 1024 //限制文件大小，单位 KB</span><br><span class="line">    , done: function(res)&#123;</span><br><span class="line">        // 成功回调</span><br><span class="line">    &#125;</span><br><span class="line">    ,choose: function(obj)&#123;</span><br><span class="line">        obj.preview(function(index, file, result)&#123;</span><br><span class="line">            var suffix = file.name.split(&quot;.&quot;)[1]	// 文件后缀</span><br><span class="line">                , want_type = (suffix === &#x27;keystore&#x27; || suffix === &#x27;jks&#x27;)	// 只允许上传文件的格式</span><br><span class="line">                , want_size = file.size &lt;= 1024 * 1024		// 文件最大大小</span><br><span class="line">                , flag = want_type &amp;&amp; want_size	// 是否符合上传条件</span><br><span class="line">                , error_msg = !want_type ? &#x27;上传的签名文件的格式不对&#x27; : (!want_size ? &#x27;签名文件不能超过1.00MB&#x27; : &#x27;&#x27;); // 错误提示</span><br><span class="line"></span><br><span class="line">            if(flag) &#123;</span><br><span class="line">                obj.upload(index, file); // 满足条件调用上传方法</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                layer.msg(error_msg, &#123;time: 1000&#125;);</span><br><span class="line">                // 清空file中的值(避免多次上传同一文件，不弹错误提示)</span><br><span class="line">                $(&#x27;input[name=&quot;file&quot;]&#x27;).val(&#x27;&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="动态修改复选框的选中状态"><a href="#动态修改复选框的选中状态" class="headerlink" title="动态修改复选框的选中状态"></a>动态修改复选框的选中状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($(&#x27;.xxxx&#x27;).attr(&quot;checked&quot;) === &quot;checked&quot;) &#123; //判断是否选中</span><br><span class="line">     //设置选中 注意这里使用的是prop(), 这里要是使用了attr()是无效的</span><br><span class="line">    $(&#x27;.xxxx&#x27;).prop(&quot;checked&quot;, true);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $(&#x27;.xxxx&#x27;).prop(&quot;checked&quot;, false);</span><br><span class="line">&#125;</span><br><span class="line">form.render(); //重新渲染       ————————最重要的记得加上这句话---------</span><br></pre></td></tr></table></figure>

<h4 id="获取数据表格选中值"><a href="#获取数据表格选中值" class="headerlink" title="获取数据表格选中值"></a><a href="https://www.layui.com/doc/modules/table.html#method">获取数据表格选中值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table id=&quot;activity-manage&quot; lay-filter=&quot;packageList&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var activityManage = table.render(&#123;</span><br><span class="line">    elem: &#x27;#activity-manage&#x27;</span><br><span class="line">    , id: &quot;activityManage&quot;</span><br><span class="line">    , cellMinWidth: 130</span><br><span class="line">    .....</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//监听数据表格的复选框</span><br><span class="line">table.on(&#x27;checkbox(packageList)&#x27;, function (obj) &#123; </span><br><span class="line">    console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one</span><br><span class="line">    console.log(obj);  // 这里的data数据只针对当前选中的那一项</span><br><span class="line"></span><br><span class="line">    // 选择状态 (activityManage是config里面的id)</span><br><span class="line">    var checkStatus = table.checkStatus(&quot;activityManage&quot;);</span><br><span class="line">    console.log(checkStatus.data) //获取选中行的数据</span><br><span class="line">    console.log(checkStatus.data.length) //获取选中行数量，可作为是否有选中行的条件</span><br><span class="line">    console.log(checkStatus.isAll ) //表格是否全选</span><br><span class="line">    console.log(checkStatus);    // 这里的data，是当前已选中的所有数据的数组集合</span><br><span class="line">    .........</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态设置下拉框的值"><a href="#动态设置下拉框的值" class="headerlink" title="动态设置下拉框的值"></a>动态设置下拉框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置下拉框默认选项</span><br><span class="line">form.val(&quot;deviceManage&quot;, &#123;</span><br><span class="line">    &quot;os&quot;: 2</span><br><span class="line">&#125;);</span><br><span class="line">&lt;form class=&quot;layui-form  margin-t10&quot; action=&quot;&quot; lay-filter=&quot;deviceManage&quot; id=&quot;white_device&quot;&gt;</span><br><span class="line">    &lt;select name=&quot;os&quot; lay-filter=&quot;os&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;iOS&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot; selected&gt;Android&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="提示信息弹完再做其他操作（处理新增-编辑页面跳转这种情况）"><a href="#提示信息弹完再做其他操作（处理新增-编辑页面跳转这种情况）" class="headerlink" title="提示信息弹完再做其他操作（处理新增/编辑页面跳转这种情况）"></a>提示信息弹完再做其他操作（处理新增/编辑页面跳转这种情况）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer.msg(res.msg, &#123;time: 1000&#125;, function() &#123;</span><br><span class="line">    // 可点击</span><br><span class="line">    $(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line"></span><br><span class="line">    if ( res.code == 1 )&#123;</span><br><span class="line">        $.form.href(&quot;&#123;:url(&#x27;xy/account/role&#x27;)&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="动态修改单选框的值"><a href="#动态修改单选框的值" class="headerlink" title="动态修改单选框的值"></a>动态修改单选框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;input[name=&quot;isDiscount&quot;][value=&quot;0&quot;]&#x27;).prop(&#x27;checked&#x27;, true);</span><br><span class="line">form.render(&quot;radio&quot;);</span><br><span class="line"></span><br><span class="line">// 需要用到prop(&#x27;checked&#x27;, true);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.val(&quot;addpackage&quot;, &#123;</span><br><span class="line">    &quot;isDiscount&quot;: 0</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://fly.layui.com/extend/xmSelect/">xmSelect下拉多选</a></p>
<p><a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select文档</a></p>
<h4 id="接口处理完，弹出提示，提示语结束才跳转页面"><a href="#接口处理完，弹出提示，提示语结束才跳转页面" class="headerlink" title="接口处理完，弹出提示，提示语结束才跳转页面"></a>接口处理完，弹出提示，提示语结束才跳转页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layer.msg(res.msg, &#123;time: 1000&#125;, function()&#123;</span><br><span class="line">    // 成功-页面跳转</span><br><span class="line">    if(res.code == 1) &#123;</span><br><span class="line">        $.form.href(&quot;&#123;:url(&#x27;xy/account/index&#x27;)&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui获取已选复选框的值"><a href="#layui获取已选复选框的值" class="headerlink" title="layui获取已选复选框的值"></a>layui获取已选复选框的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr_box = [];</span><br><span class="line">$(&#x27;input[type=checkbox]:checked&#x27;).each(function() &#123;</span><br><span class="line">  arr_box.push($(this).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="初始化表格渲染条数"><a href="#初始化表格渲染条数" class="headerlink" title="初始化表格渲染条数"></a>初始化表格渲染条数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table.init(&#x27;data-detail&#x27;, &#123;</span><br><span class="line">    limit: 10 //注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致</span><br><span class="line">    //支持所有基础参数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="获取表单提交的数据"><a href="#获取表单提交的数据" class="headerlink" title="获取表单提交的数据"></a>获取表单提交的数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button href=&quot;javascript:;&quot; class=&quot;layui-btn layui-btn-normal&quot; lay-submit lay-filter=&quot;setAuthority&quot;&gt;保存&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">form.on(&#x27;submit(setAuthority)&#x27;, function(data)&#123;</span><br><span class="line">	var param = data.field;</span><br><span class="line">	......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注：对应的提交按钮，要添加  lay-submit  属性</p>
<h4 id="Tab的切换功能，切换事件监听等，需要依赖element模块"><a href="#Tab的切换功能，切换事件监听等，需要依赖element模块" class="headerlink" title="Tab的切换功能，切换事件监听等，需要依赖element模块"></a>Tab的切换功能，切换事件监听等，需要依赖element模块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use([&#x27;element&#x27;], function () &#123;</span><br><span class="line">    var element = layui.element;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="防止表单多次提交"><a href="#防止表单多次提交" class="headerlink" title="防止表单多次提交"></a>防止表单多次提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置提交按钮不可点击</span><br><span class="line">$(&quot;#submitBtn&quot;).attr(&quot;disabled&quot;, true);</span><br><span class="line"></span><br><span class="line">$(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听保存按钮</span><br><span class="line">form.on(&#x27;submit(save)&#x27;, function(data)&#123;</span><br><span class="line">    var params = data.field;</span><br><span class="line"></span><br><span class="line">    // 设置提交按钮不可点击</span><br><span class="line">    $(&quot;#submitBtn&quot;).attr(&quot;disabled&quot;, true);</span><br><span class="line"></span><br><span class="line">    // 请求接口处理</span><br><span class="line">    $.post(&#x27;/xy/account/roleAdd&#x27;, params, function(res)&#123;</span><br><span class="line">        layer.msg(res.msg, &#123;time: 1000&#125;, function() &#123;</span><br><span class="line">            // 可点击</span><br><span class="line">            $(&quot;#submitBtn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line"></span><br><span class="line">            if ( res.code == 1 )&#123;</span><br><span class="line">                $.form.href(&quot;&#123;:url(&#x27;xy/account/role&#x27;)&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui表格合并行"><a href="#layui表格合并行" class="headerlink" title="layui表格合并行"></a>layui表格合并行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 表格合并行</span><br><span class="line">function merge(res, names, indexs) &#123;</span><br><span class="line">    var data = res.data;</span><br><span class="line">    //定位需要添加合并属性的行数</span><br><span class="line">    var mergeIndex = 0;</span><br><span class="line">    //这里涉及到简单的运算，mark是计算每次需要合并的格子数</span><br><span class="line">    var mark = 1; </span><br><span class="line">    //需要合并的列名称</span><br><span class="line">    var columsName = names;</span><br><span class="line">    //需要合并的列索引值</span><br><span class="line">    var columsIndex = indexs;</span><br><span class="line"></span><br><span class="line">    //这里循环所有要合并的列</span><br><span class="line">    for (var k = 0; k &lt; columsName.length; k++) &#123; </span><br><span class="line">        //所有行</span><br><span class="line">        var trArr = $(&quot;.layui-table-body&gt;.layui-table&quot;).find(&quot;tr&quot;);</span><br><span class="line">        //这里循环表格当前的数据</span><br><span class="line">        for (var i = 1; i &lt; res.data.length; i++) &#123; </span><br><span class="line">            //获取当前行的当前列</span><br><span class="line">                var tdCurArr = trArr.eq(i).find(&quot;td&quot;).eq(columsIndex[k]);</span><br><span class="line">                //获取相同列的第一列</span><br><span class="line">                var tdPreArr = trArr.eq(mergeIndex).find(&quot;td&quot;).eq(columsIndex[k]);</span><br><span class="line">            //后一行的值与前一行的值做比较，相同就需要合并</span><br><span class="line">                if (data[i][columsName[k]] === data[i-1][columsName[k]]) &#123; </span><br><span class="line">                        mark += 1;</span><br><span class="line">                        //相同列的第一列增加rowspan属性</span><br><span class="line">                        tdPreArr.each(function () &#123;</span><br><span class="line">                                $(this).attr(&quot;rowspan&quot;, mark);</span><br><span class="line">                        &#125;);</span><br><span class="line">                        //当前行隐藏</span><br><span class="line">                        tdCurArr.each(function () &#123;</span><br><span class="line">                                $(this).css(&quot;display&quot;, &quot;none&quot;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                        mergeIndex = i;</span><br><span class="line">                        //一旦前后两行的值不一样了，那么需要合并的格子数mark就需要重新计算</span><br><span class="line">                        mark = 1;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mergeIndex = 0;</span><br><span class="line">        mark = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="layui-layer-遮罩"><a href="#layui-layer-遮罩" class="headerlink" title="layui-layer 遮罩"></a>layui-layer 遮罩</h4><p><a href="https://www.layui.site/doc/modules/layer.html#shade">弹出层区域默认自带0.3透明度的黑色背景蒙层</a></p>
<p><a href="https://www.layui.site/doc/modules/layer.html#shade">layer.load(icon, options) - 加载层</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//eg1</span><br><span class="line">var index = layer.load();</span><br><span class="line">//eg2</span><br><span class="line">var index = layer.load(1); //换了种风格</span><br><span class="line">//eg3</span><br><span class="line">var index = layer.load(2, &#123;time: 10*1000&#125;); //又换了种风格，并且设定最长等待10秒 </span><br><span class="line">//关闭</span><br><span class="line">layer.close(index);  </span><br></pre></td></tr></table></figure>

<h4 id="layui-时间插件laydate中动态设置改变min和max值"><a href="#layui-时间插件laydate中动态设置改变min和max值" class="headerlink" title="layui 时间插件laydate中动态设置改变min和max值"></a><a href="https://blog.csdn.net/bai_riqiang/article/details/80110000">layui 时间插件laydate中动态设置改变min和max值</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layui.use(&#x27;laydate&#x27;, function()&#123;</span><br><span class="line">  var laydate = layui.laydate;</span><br><span class="line"></span><br><span class="line">  // 开始日期</span><br><span class="line">  var startDate = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#startDate&#x27;</span><br><span class="line">    ,max : &quot;2099-12-31&quot;</span><br><span class="line">    ,done: function(value,date)&#123;</span><br><span class="line">      endDate.config.min =&#123;</span><br><span class="line">        year :date.year</span><br><span class="line">        ,month: date.month-1</span><br><span class="line">        ,date: date.date</span><br><span class="line">      &#125;;</span><br><span class="line">      // 可不加，根据需求来</span><br><span class="line">      $(&#x27;#endDate&#x27;)[0].focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  // 结束日期</span><br><span class="line">  var endDate = laydate.render(&#123;</span><br><span class="line">    elem: &#x27;#endDate &#x27;</span><br><span class="line">    ,min: &quot;1900-1-1&quot;</span><br><span class="line">    ,done: function (value,date) &#123;</span><br><span class="line">      startDate.config.max=&#123;</span><br><span class="line">        year :date.year</span><br><span class="line">        ,month: date.month-1</span><br><span class="line">        ,date: date.date</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="如果想去掉表单中所有输入框的浏览器历史记录"><a href="#如果想去掉表单中所有输入框的浏览器历史记录" class="headerlink" title="如果想去掉表单中所有输入框的浏览器历史记录"></a>如果想去掉表单中所有输入框的浏览器历史记录</h4><p>直接给form元素加上autocomplete=”off”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form autocomplete=&quot;off&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="layer弹两次"><a href="#layer弹两次" class="headerlink" title="layer弹两次"></a>layer弹两次</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上id-处理提示弹两次</span><br><span class="line">layer.msg(&#x27;复制成功&#x27;, &#123;id: &#x27;clipboard&#x27;, time: 1000&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/sentsin/layui/issues/I2C2CT">layui表格没有数据的时候，表头没有横向滚动条</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改一下table.js源码</span><br><span class="line">that.layMain.find(&#x27;tbody&#x27;).html(&#x27;&#x27;);</span><br><span class="line">that.layHeader.css(&#x27;overflow&#x27;,&#x27;auto&#x27;);//新加的</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/nuomizhende45/article/details/90108766">Layui数据表格显示无数据提示问题</a></p>
<h4 id="layui-排序功能"><a href="#layui-排序功能" class="headerlink" title="layui-排序功能"></a>layui-排序功能</h4><p>如果不使用layui本身的前端排序功能，需禁止：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">,autoSort: false // 禁用前端自动排序</span><br></pre></td></tr></table></figure>

<p>更新全部表单元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.render(); </span><br></pre></td></tr></table></figure>



<h4 id="扩展一个模板"><a href="#扩展一个模板" class="headerlink" title="扩展一个模板"></a>扩展一个模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /**扩展一个模块**/      </span><br><span class="line">layui.define(function(exports)&#123; </span><br><span class="line">  var obj = &#123;</span><br><span class="line">    hello: function(str)&#123;</span><br><span class="line">      alert(&#x27;Hello &#x27;+ (str||&#x27;mymod&#x27;));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 输出接口</span><br><span class="line">  exports(&#x27;mymod&#x27;, obj);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layui.extend(&#123;</span><br><span class="line">  mod2: &#x27;http://192.168.0.59/mymod/&#x27; // &#123;/&#125;的意思即代表采用自有路径，即不跟随 base 路径</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 使用拓展模块</span><br><span class="line">layui.use([&#x27;mymod&#x27;], function()&#123;</span><br><span class="line">  var mymod = layui.mymod;</span><br><span class="line"></span><br><span class="line">  mymod.hello(&#x27;World!&#x27;); //弹出 Hello World!</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="layui文件上传组件“请求上传接口出现异常”问题解决方案"><a href="#layui文件上传组件“请求上传接口出现异常”问题解决方案" class="headerlink" title="layui文件上传组件“请求上传接口出现异常”问题解决方案"></a><a href="https://wenku.baidu.com/view/00753c55f142336c1eb91a37f111f18583d00cd2.html">layui文件上传组件“请求上传接口出现异常”问题解决方案</a></h4><h4 id="layui上传错误请求上传接口出现异常解决方案"><a href="#layui上传错误请求上传接口出现异常解决方案" class="headerlink" title="layui上传错误请求上传接口出现异常解决方案"></a><a href="http://www.45fan.com/article.php?aid=20090321166392158778851636">layui上传错误请求上传接口出现异常解决方案</a></h4><h4 id="解决LAYUI数据表格中嵌套下拉框显示问题"><a href="#解决LAYUI数据表格中嵌套下拉框显示问题" class="headerlink" title="解决LAYUI数据表格中嵌套下拉框显示问题"></a>解决LAYUI数据表格中嵌套下拉框显示问题</h4><p><a href="https://www.cnblogs.com/xmcwm/p/14373853.html">layui学习——数据表格嵌套下拉列表，并实现动态更新</a></p>
<p><a href="https://wenku.baidu.com/view/ecb57ee05cbfc77da26925c52cc58bd6318693d2.html">解决layui数据表格中嵌套下拉框显示问题</a></p>
<p><a href="https://blog.lanluo.cn/10990">Layui数据表格中使用下拉选框被遮挡的解决方法，要在表格渲染中操作</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 表格渲染</span><br><span class="line">table.render(&#123;</span><br><span class="line">    elem: &#x27;#groupTable&#x27;</span><br><span class="line">    , limit: 10</span><br><span class="line">    , cols: [[</span><br><span class="line">        &#123; type: &#x27;numbers&#x27;, title: &#x27;序号&#x27;, width: 100 &#125;</span><br><span class="line">        , &#123; title: &#x27;下拉框&#x27;, minWidth: 140 , templet: function (res) &#123;</span><br><span class="line">            var selectStr = &#x27;&lt;select name=&quot;test&quot;&gt;&#x27;;</span><br><span class="line">            for(var i = 0; i&lt; 10; i ++) &#123;</span><br><span class="line">                selectStr += &#x27;&lt;option value=&quot;&#x27; + i+ &#x27;&quot;&gt;&#x27; + i+ &#x27;&lt;/option&gt;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            selectStr += &#x27;&lt;/select&gt;&#x27;</span><br><span class="line">            return selectStr;</span><br><span class="line">        &#125; &#125;</span><br><span class="line">    ]]</span><br><span class="line">    , page: &#123;</span><br><span class="line">        curr: this_curr</span><br><span class="line">    &#125;</span><br><span class="line">    , data: list</span><br><span class="line">    , done: function (res, curr, count) &#123;</span><br><span class="line">        $(&quot;.layui-table-body, .layui-table-box, .layui-table-cell&quot;).css(&#x27;overflow&#x27;, &#x27;visible&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a href="http://easyadmin.99php.cn/docs/">EasyAdmin</a></p>
<h4 id="LAYUI-MINI"><a href="#LAYUI-MINI" class="headerlink" title="LAYUI MINI"></a><a href="http://layuimini.99php.cn/docs/">LAYUI MINI</a></h4><p>EasyAdmin—layui mini 页面——表格内容渲染的方法在<code>public/static/admin/js/对应页面的js文件</code>，页面在<code>app/admin/view</code></p>
<p><a href="http://layuimini.99php.cn/iframe/v2/index.html">在线DEMO</a></p>
<h5 id="表格的筛选条件使用日期格式："><a href="#表格的筛选条件使用日期格式：" class="headerlink" title="表格的筛选条件使用日期格式："></a>表格的筛选条件使用日期格式：</h5><p>使用<code>search: &#39;range&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;create_time&#x27;, minWidth: 80, title: &#x27;操作时间&#x27;,search: &#x27;range&#x27;&#125;,</span><br></pre></td></tr></table></figure>

<p>表格的筛选条件使用下拉框：</p>
<p>使用<code>search: &#39;select&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;status&#x27;, minWidth: 80, title: &#x27;审核状态&#x27;, search: &#x27;select&#x27;,selectList: &#123;1: &#x27;已审核&#x27;, 0: &#x27;未审核&#x27;&#125;,templet: function (d) &#123;</span><br><span class="line">    if(d.status == 1) &#123;</span><br><span class="line">        return &quot;已审核&quot;;</span><br><span class="line">    &#125;else if(d.status == 0)&#123;</span><br><span class="line">        return &quot;未审核&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="操作栏"><a href="#操作栏" class="headerlink" title="操作栏"></a>操作栏</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;field: &#x27;account_ban_status&#x27;, title: &#x27;操作内容&#x27;, minWidth: 80, templet: function (d) &#123;</span><br><span class="line">    if(d.status == 0) &#123;</span><br><span class="line">        return &quot;注销账号&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(d.status == 1) &#123;</span><br><span class="line">        return &quot;恢复账号&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码"><a href="#切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码" class="headerlink" title="切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码"></a>切换左侧导航栏或Tab栏，关闭页面的二级页面（即iframe中的弹窗内容）——修改框架代码</h5><p><code>public/static/plugs/lay-module/layuimini/miniAdmin.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 打开新窗口</span><br><span class="line"> */</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;[layuimini-href]&#x27;, function () &#123;</span><br><span class="line">    var URL = window.location.href.split(&quot;#&quot;)[1]; // 当前URL</span><br><span class="line"></span><br><span class="line">    var loading = layer.load(0, &#123;shade: false, time: 2 * 1000&#125;);</span><br><span class="line">    var tabId = $(this).attr(&#x27;layuimini-href&#x27;),</span><br><span class="line">        href = $(this).attr(&#x27;layuimini-href&#x27;),</span><br><span class="line">        title = $(this).text(),</span><br><span class="line">        target = $(this).attr(&#x27;target&#x27;);</span><br><span class="line"></span><br><span class="line">    var el = $(&quot;[layuimini-href=&#x27;&quot; + href + &quot;&#x27;]&quot;, &quot;.layuimini-menu-left&quot;);</span><br><span class="line">    layer.close(window.openTips);</span><br><span class="line"></span><br><span class="line">    // 菜单地址不等于当前URL——切换到其他页面，关闭子页面内容</span><br><span class="line">    if(href !== URL) &#123;</span><br><span class="line">        var hasSecond = $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-iframe&#x27;).length;</span><br><span class="line">        if(hasSecond &gt; 0) &#123;</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-iframe&#x27;).remove();</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-shade&#x27;).remove();</span><br><span class="line">            $(&#x27;iframe[src=&quot;&#x27; + URL + &#x27;&quot;]&#x27;).contents().find(&#x27;.layui-layer-move&#x27;).remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="修改logo"><a href="#修改logo" class="headerlink" title="修改logo"></a>修改logo</h5><p><code>public/static/plugs/lay-module/layuimini/miniAdmin.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">renderLogo: function (data) &#123;</span><br><span class="line">    // var html = &#x27;&lt;a href=&quot;&#x27; + data.href + &#x27;&quot;&gt;&lt;img src=&quot;&#x27; + data.image + &#x27;&quot; alt=&quot;logo&quot;&gt;&lt;h1&gt;&#x27; + data.title + &#x27;&lt;/h1&gt;&lt;/a&gt;&#x27;;</span><br><span class="line">    var html = &#x27;&lt;img src=&quot;/static/common/images/logo.png&quot; alt=&quot;logo&quot;&gt;&lt;h1&gt;&#x27; + data.title + &#x27;&lt;/h1&gt;&#x27;;</span><br><span class="line">    $(&#x27;.layuimini-logo&#x27;).html(html);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>layui</category>
      </categories>
      <tags>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>portal开发环境搭建</title>
    <url>/2021/02/19/portal%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="1-1环境"><a href="#1-1环境" class="headerlink" title="1.1环境"></a>1.1环境</h4><p><strong>运行环境n</strong>odejs</p>
<p>使用gulp自动化编译scss，js等</p>
<p>使用bower管理依赖插件</p>
<p>使用requirejs作为模块加载器</p>
<p>使用bootstrap css作为样式框架</p>
<p>依赖jquery，jquery-ui两个库</p>
<h4 id="1-2项目目录"><a href="#1-2项目目录" class="headerlink" title="1.2项目目录"></a>1.2项目目录</h4><p>node_modules为依赖模块文件</p>
<p>.bowerrc 为bower配置文件,包含模块安装目录配置</p>
<p>bower.json为bower配置文件,包含依赖模块等</p>
<p>gulpfile.js为gulp任务配置文件</p>
<p>package.json为程序配置文件,包含npm依赖模块等</p>
<p>Lib为bower.json  dependencies中的依赖文件</p>
<p>node.js开发环境搭建</p>
<p>1、进入官网<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>2、下载文件后，双击(.msi)安装</p>
<p>3、安装相关环境 </p>
<p>打开C:\Program Files\nodejs目录你会发现里面自带了npm,直接用npm安装相环境即可</p>
<h4 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h4><p>1、说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>
<p>2、使用npm安装插件：命令提示符执行**npm install <name> [-g] [–save-dev]**；</p>
<p>2.1、<name>：node插件名称。例：<strong>npm install gulp –save-dev</strong></p>
<p>2.2、**-g**：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；  非全局安装：将会安装在当前定位目录；  全局安装可以通过命令行在任何地方调用它</p>
<p>2.3、**–save**：将保存配置信息至package.json（package.json是<a href="http://www.ydcss.com/archives/18#lesson6">nodejs项目配置文件</a>）；</p>
<p>2.4、**-dev**：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些express/ejs/body-parser等等。</p>
<p>2.5、为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行<strong>npm install</strong>，则会根据package.json下载所有需要的包，<strong>npm install –production</strong>只下载dependencies节点的包）。</p>
<h4 id="选装cnpm"><a href="#选装cnpm" class="headerlink" title="选装cnpm"></a>选装cnpm</h4><p>1、说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。！来自官网：<strong>“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</strong>；</p>
<p>2、官方网址：<a href="http://npm.taobao.org/">http://npm.taobao.org</a>；</p>
<p>3、安装：命令提示符执行<code>**npm install cnpm -g --registry=https://registry.npm.taobao.org**</code>；  注意：安装完后最好查看其版本号<strong>cnpm -v</strong>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>
<p>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>Bower使用（为什么使用bower，因为它可以节省掉你去git或是网上找js的时间;）</p>
<p>注：选Git CMD</p>
<h4 id="bower的安装"><a href="#bower的安装" class="headerlink" title="bower的安装"></a>bower的安装</h4><p>1、首先在我的系统安装 <strong>nodejs</strong>。因为我的系统是windows，还需要安装<strong>msysgit</strong>，注意图二中的选项</p>
<p>2、之后就可以用npm包管理工具下载并<strong>全局安装bower</strong>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g bower</span><br></pre></td></tr></table></figure>

<p>全局安装bower 后，可以查看Bower的帮助信息，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower help</span><br></pre></td></tr></table></figure>

<p>3、初始化当前工程的bower，此操作会在当前目录下生成bower.json文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure>

<h4 id="bower的使用"><a href="#bower的使用" class="headerlink" title="bower的使用"></a>bower的使用</h4><p>使用了bower的项目都会在目录下有一个bower.json文件。在该文件同级目录下，使用如下命令即可安装相关依赖库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower install  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：bower下载安装依赖库实际上是使用git进行下载。对于linux系统，由于默认都有安装git，所以一般没问题。但是windows系统一般没有git。在windows系统下需要确定安装了git客户端，建议使用同捆的git bash命令行来执行bower install命令。或者把git目录加入windows的环境变量中，再在命令行中执行bower install命令。()</p>
</blockquote>
<p>使用bower安装某个特定类库，例如jquery:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower install jquery</span><br></pre></td></tr></table></figure>

<p>使用bower更新某个特定类库，例如jquery:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower update jquery</span><br></pre></td></tr></table></figure>

<p>删除包,例如jquery (如果包已经被依赖，则不能删除)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower uninstall jquery</span><br></pre></td></tr></table></figure>

<p>试着在项目文件夹下，下载jquery 和 underscore</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower install jquery underscore</span><br></pre></td></tr></table></figure>

<p>然后就可以看到项目文件夹下多了bower_components（默认目录）,再就是两个插件包了（jquery和underscore）</p>
<p>初步这样也就行了，但是/bower_components这个目录有点让人不习惯，我想把东西下载到我习惯的目录里。需要加一个*<em>.bowerrc文件**。注意，</em>不需要名字什么的*，只要新增一个.bowerrc就行了。</p>
<p>提示：<strong>用cmd命令创建文件</strong>如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ type null &gt;.bowerrc</span><br><span class="line">bash: type: null: not found</span><br></pre></td></tr></table></figure>

<h4 id="bowerrc配置"><a href="#bowerrc配置" class="headerlink" title=".bowerrc配置"></a>.bowerrc配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;directory&quot; : &quot;js/jslib&quot;,</span><br><span class="line">    &quot;json&quot;:&quot;&quot;,</span><br><span class="line">    &quot;endpoint&quot; : &quot;&quot;,</span><br><span class="line">    &quot;searchpath&quot;: &quot;&quot;,</span><br><span class="line">    &quot;shorthand_resolver&quot; : &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>里面可以定义下载目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;directory&quot;: &quot;app/vendor&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的cmd命令再执行一遍，这次可以看到文件下载到app/vendor中了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bower install jquery underscore</span><br></pre></td></tr></table></figure>

<p>由于在实际安装过程中，没有运行命令 &gt;bower init 现在重新运行该命令 生成bower.json</p>
<p>遇到了问题，bower init 失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bower initbower ENOINT</span><br><span class="line">Register requires an interactive she11</span><br><span class="line">Additional error details:</span><br><span class="line">Note that you can manua1ly force an interactive she1l with --config.interactive</span><br></pre></td></tr></table></figure>

<p><strong>解决办法：</strong>在 windows cmd（管理者） 里面使用 bower init,而不是在 git bash 里面使用 bower init.</p>
<p>使用bower install jquery <strong>–save</strong>才会把jquery依赖记入到bower.json。</p>
<p>要安装某个版本使用#，如安装juqery1.9.1，可以使用bower install jquery#1.9.1。</p>
<p>除了用包名安装，也可以指定git地址，进行安装，如bower install <a href="https://github.com/jquery/jquery%E3%80%82">https://github.com/jquery/jquery。</a></p>
<p>bower install –save handlebars 后就会看到handlebar 在bower.json的dependencies里，如果不加–save就不会有。</p>
<p>接下来删了app/vendor下的所有内容，然后bower install，他会把bower.json中的dependencies重新下载。</p>
<h4 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h4><p>Gulp.js是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务，gulp.js是基于node.js构建的，利用node.js流的威力，可以快速构建项目</p>
<p>1、说明：全局安装gulp目的是为了通过她执行gulp任务；</p>
<p>2、安装：命令提示符执行<strong>cnpm install gulp -g</strong>；</p>
<p>3、查看是否正确安装：命令提示符执行<strong>gulp -v</strong>，出现版本号即为正确安装。</p>
<h4 id="新建package-json文件"><a href="#新建package-json文件" class="headerlink" title="新建package.json文件"></a>新建package.json文件</h4><p>2.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>
<p>2.2、它是这样一个json文件<strong>（注意：json文件内是不能写注释的，复制下列内容请删除注释）</strong>： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;test&quot;,   //项目名称（必须）</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,   //项目版本（必须）</span><br><span class="line">  &quot;description&quot;: &quot;This is for study gulp project !&quot;,   //项目描述（必须）</span><br><span class="line">  &quot;homepage&quot;: &quot;&quot;,   //项目主页</span><br><span class="line">  &quot;repository&quot;: &#123;    //项目资源库</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://git.oschina.net/xxxx&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &#123;    //项目作者信息</span><br><span class="line">    &quot;name&quot;: &quot;surging&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;surging2@qq.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,    //项目许可协议</span><br><span class="line">  &quot;devDependencies&quot;: &#123;    //项目依赖的插件</span><br><span class="line">    &quot;gulp&quot;: &quot;^3.8.11&quot;,</span><br><span class="line">    &quot;gulp-less&quot;: &quot;^3.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.3、当然我们可以手动新建这个配置文件，但是作为一名有志青年，我们应该使用更为效率的方法：命令提示符执行<strong>cnpm init</strong></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/portal%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/note1.png" alt="手动新建这个配置文件"></p>
<p>2.4、查看package.json帮助文档，命令提示符执行<strong>cnpm help package.json</strong></p>
<p>特别注意：package.json是一个普通json文件，所以不能添加任何注释。参看 <a href="http://www.zhihu.com/question/23004511">http://www.zhihu.com/question/23004511</a></p>
<h4 id="本地安装gulp插件"><a href="#本地安装gulp插件" class="headerlink" title="本地安装gulp插件"></a>本地安装gulp插件</h4><p>3.1、安装：定位目录命令后提示符执行<code>**cnpm install --save-dev**</code>；</p>
<p>3.2、本示例以gulp-less为例（编译less文件），命令提示符执行<code>**cnpm install gulp-less --save-dev**</code>；</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/portal%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/note2.png" alt="编译less文件"></p>
<p>3.3、将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；</p>
<p>3.4、为了能正常使用，我们还得本地安装gulp：<code>**cnpm install gulp --save-dev**</code>；</p>
<p>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。</p>
<h4 id="新建gulpfile-js文件（重要）"><a href="#新建gulpfile-js文件（重要）" class="headerlink" title="新建gulpfile.js文件（重要）"></a>新建gulpfile.js文件（重要）</h4><p>4.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。</p>
<p>4.2、它大概是这样一个js文件（更多插件配置请<a href="http://www.ydcss.com/archives/tag/gulp">查看这里</a>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导入工具包 require(&#x27;node_modules里对应模块&#x27;)</span><br><span class="line">var gulp = require(&#x27;gulp&#x27;), //本地安装gulp所用到的地方</span><br><span class="line">    less = require(&#x27;gulp-less&#x27;);</span><br><span class="line"> </span><br><span class="line">// 定义一个testLess任务（自定义任务名称）</span><br><span class="line">gulp.task(&#x27;testLess&#x27;, function () &#123;</span><br><span class="line">    gulp.src(&#x27;src/less/index.less&#x27;) // 该任务针对的文件</span><br><span class="line">        .pipe(less()) //该任务调用的模块</span><br><span class="line">        .pipe(gulp.dest(&#x27;src/css&#x27;)); // 将会在src/css下生成index.css</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&#x27;default&#x27;,[&#x27;testLess&#x27;, &#x27;elseTask&#x27;]); // 定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务</span><br><span class="line"> </span><br><span class="line">// gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span><br><span class="line">// gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span><br><span class="line">// gulp.dest(path[, options]) 处理完后文件生成路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>bower install  表示安装bower.json中的依赖文件到lib</p>
<p>npm install 表示安装package.json中的外挂到node_modules</p>
<h4 id="gulp环境下安装sass"><a href="#gulp环境下安装sass" class="headerlink" title="gulp环境下安装sass"></a>gulp环境下安装sass</h4><p>1、首先全局环境下配置淘宝镜像(**注意:这里是全局环境，不是项目根目录)<br>执行语句: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>2、进入项目根目录，安装<br>执行语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev node-sass</span><br></pre></td></tr></table></figure>

<p>3、仍然是项目根目录，安装<br>执行语句: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp-sass</span><br></pre></td></tr></table></figure>

<h4 id="gulp运行"><a href="#gulp运行" class="headerlink" title="gulp运行"></a>gulp运行</h4><p>输入 gulp</p>
<h4 id="Require-js使用"><a href="#Require-js使用" class="headerlink" title="Require.js使用"></a>Require.js使用</h4><p>1、为什么要用require.js</p>
<p>最早的时候，所有Javascript代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码依次加载多个js文件。</p>
<p>这样的写法有很大的缺点。首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；其次，由于js文件之间存在依赖关 系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载，当依赖关系很复杂的时候，代码的编写和维 护都会变得困难。</p>
<p>require.js的诞生，就是为了解决这两个问题：</p>
<p>​    （1）实现js文件的异步加载，避免网页失去响应；</p>
<p>​    （2）管理模块之间的依赖性，便于代码的编写和维护。</p>
<p>2、require.js的加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>加载require.js以后，下一步就要加载自己的代码了。假定自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3、模块的加载</p>
<p>1）main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">  //baseUrl: &quot;../lib&quot;,</span><br><span class="line">  shim: &#123;</span><br><span class="line">    &#x27;underscore&#x27;: &#123;</span><br><span class="line">     exports: &#x27;_&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    &quot;jquery&quot;: &quot;../lib/jquery/dist/jquery.min&quot;,</span><br><span class="line">    &quot;underscore&quot;: &quot;../lib/underscore/underscore-min&quot;,</span><br><span class="line">    &quot;selector&quot;:&quot;selector&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">require([&#x27;jquery&#x27;, &#x27;underscore&#x27;,&#x27;selector&#x27;], function($, _,selector)&#123;</span><br><span class="line">  alert(selector.add(1,1));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2）模块的写法 selector.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function() &#123;</span><br><span class="line">    var add = function(x,y) &#123;</span><br><span class="line">        return x+y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        add:add</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>portal</category>
      </categories>
      <tags>
        <tag>portal</tag>
      </tags>
  </entry>
  <entry>
    <title>qrcode生成二维码</title>
    <url>/2021/01/27/qrcode%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h4 id="qrcode生成二维码"><a href="#qrcode生成二维码" class="headerlink" title="qrcode生成二维码"></a>qrcode生成二维码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;qrcode.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;text&quot; type=&quot;text&quot; value=&quot;https://www.baidu.com/&quot; style=&quot;width:80%&quot; /&gt;&lt;br /&gt;</span><br><span class="line">&lt;div id=&quot;qrcode&quot; style=&quot;width:100px; height:100px; margin-top:15px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), &#123;</span><br><span class="line">        width : 100,</span><br><span class="line">        height : 100</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function makeCode () &#123;		</span><br><span class="line">        var elText = document.getElementById(&quot;text&quot;);</span><br><span class="line"></span><br><span class="line">        if (!elText.value) &#123;</span><br><span class="line">            alert(&quot;Input a text&quot;);</span><br><span class="line">            elText.focus();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        qrcode.makeCode(elText.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    makeCode();</span><br><span class="line"></span><br><span class="line">    $(&quot;#text&quot;).on(&quot;blur&quot;, function () &#123;</span><br><span class="line">        makeCode();</span><br><span class="line">    &#125;).on(&quot;keydown&quot;, function (e) &#123;</span><br><span class="line">        if (e.keyCode == 13) &#123;</span><br><span class="line">            makeCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="微信二维码电子名片生成系统"><a href="#微信二维码电子名片生成系统" class="headerlink" title="微信二维码电子名片生成系统"></a>微信二维码电子名片生成系统</h4><p><a href="https://gitee.com/winney/work/blob/master/Plugs/qrcode/code.png">【示意图】</a></p>
<p>清空二维码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qrcode.clear(); // clear the code.</span><br></pre></td></tr></table></figure>

<p>加上中文内容会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qrcode.min.js:1 Uncaught Error: code length overflow. (3452&gt;1440)</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p> <a href="https://github.com/KeeeX/qrcodejs">Keeex/qrcode</a>，用这里的js替换原来的js，但生成的内容格式跟原来的是不一样的。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js 基本环境</title>
    <url>/2019/06/19/vue-js-%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="1、安装有npm"><a href="#1、安装有npm" class="headerlink" title="1、安装有npm"></a>1、安装有npm</h4><a href="https://nodejs.org/en/" title="" target="">node.js官网</a>
<h4 id="2、安装vue-cli"><a href="#2、安装vue-cli" class="headerlink" title="2、安装vue-cli"></a>2、安装vue-cli</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-cli -g</span><br><span class="line"></span><br><span class="line">输入vue命令查看是否安装成功</span><br><span class="line">输入vue list 查看</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="3、建立工程"><a href="#3、建立工程" class="headerlink" title="3、建立工程"></a>3、建立工程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack 项目名</span><br></pre></td></tr></table></figure>
<h4 id="4、进入-项目名-目录，安装脚手架项目的基本支持包"><a href="#4、进入-项目名-目录，安装脚手架项目的基本支持包" class="headerlink" title="4、进入 项目名 目录，安装脚手架项目的基本支持包"></a>4、进入 项目名 目录，安装脚手架项目的基本支持包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
<h4 id="5、运行基本Vue-js程序"><a href="#5、运行基本Vue-js程序" class="headerlink" title="5、运行基本Vue.js程序"></a>5、运行基本Vue.js程序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
 <a href="https://www.cnblogs.com/wubaiqing/p/6726429.html" title="" target="">了解Virtual DOM(虚拟DOM)</a>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>《Vue2实践揭秘》</category>
      </categories>
      <tags>
        <tag>《Vue2实践揭秘》</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3-vite-疫情</title>
    <url>/2022/08/01/vue3-vite-%E7%96%AB%E6%83%85/</url>
    <content><![CDATA[<p><code>备注：</code> 对应项目vue3-vite-yiqing  【移动端——展示疫情实时数】</p>
<p><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project">Vite官网</a></p>
<p>优点：使用vite创建的项目，运行比webpack创建的要快</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... vue3-vite-yiqing</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vue3-vite-yiqing</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>VSCode中安装Vetur插件</p>
<h4 id="安装less"><a href="#安装less" class="headerlink" title="安装less"></a>安装less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i less less-loader -D</span><br></pre></td></tr></table></figure>

<h4 id="在main-ts中引入reset-less"><a href="#在main-ts中引入reset-less" class="headerlink" title="在main.ts中引入reset.less"></a>在main.ts中引入reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./assets/css/reset.less&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="reset-less"><a href="#reset-less" class="headerlink" title="reset.less"></a>reset.less</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* http://meyerweb.com/eric/tools/css/reset/ </span><br><span class="line">   v2.0 | 20110126</span><br><span class="line">   License: none (public domain)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed, </span><br><span class="line">figure, figcaption, footer, header, hgroup, </span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	border: 0;</span><br><span class="line">	// font-size: 100%;</span><br><span class="line">	// font: inherit;</span><br><span class="line">	vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure, </span><br><span class="line">footer, header, hgroup, menu, nav, section &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">	line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">ol, ul &#123;</span><br><span class="line">	list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote, q &#123;</span><br><span class="line">	quotes: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">	content: &#x27;&#x27;;</span><br><span class="line">	content: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">	border-spacing: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="设置根节点font-size值，使用rem适配"><a href="#设置根节点font-size值，使用rem适配" class="headerlink" title="设置根节点font-size值，使用rem适配"></a>设置根节点font-size值，使用rem适配</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:root&#123;</span><br><span class="line"> font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样设置之后1px = 1rem</p>
</blockquote>
<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  display: flex;</span><br><span class="line">  place-items: center;</span><br><span class="line">  min-width: 320px;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置手机可访问本地电脑项目"><a href="#配置手机可访问本地电脑项目" class="headerlink" title="配置手机可访问本地电脑项目"></a>配置手机可访问本地电脑项目</h4><p><a href="http://www.manongjc.com/detail/29-saiyfskdbsqqcmz.html">Vite 使用本地ip+localhost访问服务</a></p>
<p>使用vite新建的项目默认访问链接：<a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>
<ol>
<li><p>修改<code>vite.config.js</code>文件，添加<code>server</code>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;		// 处理使用本地ip访问页面</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>若使用手机访问本地ip页面，访问不成功（显示“服务器已停用”）。即要将本地电脑的防火墙“关闭”即可。<a href="https://blog.csdn.net/zoepriselife316/article/details/117957732">手机和电脑连接同一wifi,手机访问不了电脑起的项目</a></p>
<p>电脑的“设置”——“网络和共享中心”——“Windows Defender 防火墙”（左下角）——“启用或关闭Windows Defender 防火墙”（左侧）——选择“关闭”（专用网络和公用网络都关闭）</p>
<p>注意：使用完，最好重新“启用”防火墙。</p>
</li>
</ol>
<p><a href="https://www.jianshu.com/p/dd26cae7d7b2">vite.config.js之resolve.alias配置</a></p>
<h4 id="axios请求数据"><a href="#axios请求数据" class="headerlink" title="axios请求数据"></a>axios请求数据</h4><p>vue3中在onMounted生命周期中发出请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i axios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">    axios(&#x27;https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="跨域请求处理"><a href="#跨域请求处理" class="headerlink" title="跨域请求处理"></a>跨域请求处理</h4><p>修改<code>vite.config.ts</code>文件，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">    // hmr: true,  // 开启热更新</span><br><span class="line">   proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;https://c.m.163.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>vite.config.ts</code>修改后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  base:&#x27;./&#x27;,    // 处理打包后放正式环境的相对路径的问题</span><br><span class="line">  server: &#123;</span><br><span class="line">    host: &#x27;0.0.0.0&#x27;,</span><br><span class="line">    port: 8888,</span><br><span class="line">    open: true,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;https://c.m.163.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：修改配置文件后，要重启项目。(在vite搭建的项目，不需要重启)</p>
<h5 id="修改请求链接"><a href="#修改请求链接" class="headerlink" title="修改请求链接"></a>修改请求链接</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">.then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="对接口获取到的数据对象使用TS进行数据类型约束"><a href="#对接口获取到的数据对象使用TS进行数据类型约束" class="headerlink" title="对接口获取到的数据对象使用TS进行数据类型约束"></a>对接口获取到的数据对象使用TS进行数据类型约束</h4><ol>
<li><p>使用泛型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">	name: string;</span><br><span class="line">	type: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = reactive&lt;IData&gt;&#123;</span><br><span class="line">	name: &#x27;winney&#x27;,</span><br><span class="line">	type: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>企业级开发模式常用</p>
</li>
</ol>
<h4 id="接口返回字段："><a href="#接口返回字段：" class="headerlink" title="接口返回字段："></a>接口返回字段：</h4><ul>
<li>input:境外输入</li>
<li>noSymptom:无症状感染者</li>
<li>incrNoSymptom:新增</li>
<li>confirm:确诊</li>
<li>dead:死亡</li>
<li>heal:治愈</li>
<li>现有确诊数=累计确诊数-累计死亡数-累计治愈数</li>
<li>confirm-dead-heal</li>
</ul>
<p>总数：total</p>
<p>较昨日：today</p>
<h2 id="JS的实现"><a href="#JS的实现" class="headerlink" title="JS的实现"></a>JS的实现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const data = reactive(&#123;</span><br><span class="line">    name: &quot;winney&quot;,</span><br><span class="line">    areaTree: [],</span><br><span class="line">    chinaDayList: [],</span><br><span class="line">    chinaTotal: &#123;&#125;,</span><br><span class="line">    china: [],</span><br><span class="line">    hbData: &#123;&#125;,</span><br><span class="line">    type: 1,</span><br><span class="line">    mapType: 1,</span><br><span class="line">    lineType: 1,</span><br><span class="line">    lastUpdateTime:&quot;&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>为了避免使用数据时，每次都写<code>data.</code> , 对数据进行解构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; chinaTotal &#125; = toRefs(data);</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt; &lt;strong class=&quot;red&quot;&gt;&#123;&#123;chinaTotal.total.input&#125;&#125;&lt;/strong&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>直接使用会报错：</p>
<p>原因，异步请求是在组件onMounted之后的。 在第一次渲染的时候，当时还没有chinaTotal的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;tab-content&quot; v-if=&quot;chinaTotal.total&quot;&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Tab切换模块的功能"><a href="#Tab切换模块的功能" class="headerlink" title="Tab切换模块的功能"></a>Tab切换模块的功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取中国的数据</span><br><span class="line">data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">// 获取湖北的数据</span><br><span class="line">data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; chinaTotal, hbData &#125; = toRefs(data);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;tab-box&quot; v-if=&quot;chinaTotal.total&quot;&gt;  // 判断放在父盒子，做一次判断</span><br><span class="line"> 	</span><br><span class="line"> 	 &lt;!-- 全国疫情数据 --&gt;</span><br><span class="line"> 	 &lt;ul class=&quot;tab-content&quot; v-show=&quot;type=== 1&quot;&gt;</span><br><span class="line"> 	  &lt;!-- 湖北的数据 --&gt;</span><br><span class="line"> 	  &lt;ul class=&quot;tab-content&quot; v-show=&quot;type=== 2&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="tab切换事件"><a href="#tab切换事件" class="headerlink" title="tab切换事件"></a>tab切换事件</h4><p>动态绑定class的方法 <code>:class=&quot;&#123;active: type === 1&#125;&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;tab-btn&quot; @click=&quot;tabChange(1)&quot; :class=&quot;&#123;active: type === 1&#125;&quot;&gt;全国疫情数据(含港澳台)&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;tab-btn&quot; @click=&quot;tabChange(2)&quot; :class=&quot;&#123;active: type === 2&#125;&quot;&gt;湖北疫情数据&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const tabChange = (type: number) =&gt; &#123;</span><br><span class="line">    data.type = type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="TS的实现"><a href="#TS的实现" class="headerlink" title="TS的实现"></a>TS的实现</h2><p>不把跟业务无关的代码写在vue文件中</p>
<p>在src目录中新建一个type目录，存放所有的type</p>
<h4 id="1-src-type-index-ts"><a href="#1-src-type-index-ts" class="headerlink" title="1. src/type/index.ts"></a>1. <code>src/type/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">    name: string;</span><br><span class="line">    type: number;</span><br><span class="line">&#125;</span><br><span class="line">// 导出的时候要使用type,而不是普通对象</span><br><span class="line">export type&#123;</span><br><span class="line">    IData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../../type/index&quot;</span><br></pre></td></tr></table></figure>

<p>在src中新建pageJs目录，用于存放所有页面的逻辑js</p>
<h4 id="1-pageJs-index-ts"><a href="#1-pageJs-index-ts" class="headerlink" title="1. pageJs/index.ts"></a>1. <code>pageJs/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br></pre></td></tr></table></figure>



<h4 id="2-src-type-index-ts"><a href="#2-src-type-index-ts" class="headerlink" title="2. src/type/index.ts"></a>2. <code>src/type/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IData&#123;</span><br><span class="line">    name: string,</span><br><span class="line">    areaTree: any[],</span><br><span class="line">    chinaDayList: any[],</span><br><span class="line">    chinaTotal: any[],</span><br><span class="line">    china: any[],  // 中国的数据</span><br><span class="line">    hbData: Object, // 湖北的数据</span><br><span class="line">    type: number,</span><br><span class="line">    mapType: number,</span><br><span class="line">    lineType: number,</span><br><span class="line">    lastUpdateTime:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export type&#123;</span><br><span class="line">    IData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VSCode中TS实现接口的快捷方式：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/vue3-vite-%E7%96%AB%E6%83%85/Snipaste_2022-08-01_16-49-24.png" alt="VSCode中ts实现接口"></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/vue3-vite-%E7%96%AB%E6%83%85/Snipaste_2022-08-01_16-50-16.png" alt="VScode中ts接口实现"></p>
<h4 id="2-pageJs-index-ts"><a href="#2-pageJs-index-ts" class="headerlink" title="2. pageJs/index.ts"></a>2. <code>pageJs/index.ts</code></h4><p>优点：可重复使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br><span class="line"></span><br><span class="line">class InteData implements IData &#123;</span><br><span class="line">    name: string =&quot;&quot;</span><br><span class="line">    areaTree: any[] = []</span><br><span class="line">    chinaDayList: any[] = []</span><br><span class="line">    chinaTotal: any[] = []</span><br><span class="line">    china: any[]= []</span><br><span class="line">    hbData: Object = &#123;&#125;</span><br><span class="line">    type: number = 1</span><br><span class="line">    mapType: number = 1</span><br><span class="line">    lineType: number = 1</span><br><span class="line">    lastUpdateTime: string =&quot;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    InteData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-页面中使用"><a href="#3-页面中使用" class="headerlink" title="3.页面中使用"></a>3.页面中使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; InteData &#125; from &#x27;../../pageJs/index&#x27;</span><br><span class="line"> </span><br><span class="line">const data = reactive(new InteData())</span><br></pre></td></tr></table></figure>

<h4 id="4-请求数据方法封装"><a href="#4-请求数据方法封装" class="headerlink" title="4.请求数据方法封装"></a>4.请求数据方法封装</h4><p>注：setup函数中是不支持异步的</p>
<h5 id="4-1-pageJs-index-ts"><a href="#4-1-pageJs-index-ts" class="headerlink" title="4.1  pageJs/index.ts"></a>4.1  <code>pageJs/index.ts</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import type &#123; IData &#125; from &quot;../type/index&quot;</span><br><span class="line"></span><br><span class="line">class InteData implements IData &#123;</span><br><span class="line">    name: string =&quot;&quot;</span><br><span class="line">    areaTree: any[] = []</span><br><span class="line">    chinaDayList: any[] = []</span><br><span class="line">    chinaTotal: any[] = []</span><br><span class="line">    china: any[]= []</span><br><span class="line">    hbData: Object = &#123;&#125;</span><br><span class="line">    type: number = 1</span><br><span class="line">    mapType: number = 1</span><br><span class="line">    lineType: number = 1</span><br><span class="line">    lastUpdateTime: string =&quot;&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line"></span><br><span class="line">        // 获取中国的数据</span><br><span class="line">        data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">        // 获取湖北的数据</span><br><span class="line">        data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    InteData,</span><br><span class="line">    initDataFun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-页面中使用"><a href="#4-2-页面中使用" class="headerlink" title="4.2 页面中使用"></a>4.2 页面中使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; InteData, initDataFun &#125; from &#x27;../../pageJs/index&#x27;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    initDataFun(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Echarts的使用"><a href="#Echarts的使用" class="headerlink" title="Echarts的使用"></a><a href="https://echarts.apache.org/zh/index.html">Echarts</a>的使用</h2><p><a href="https://echarts.apache.org/examples/zh/editor.html?c=map-HK">地图图表</a></p>
<p><a href="https://echarts.apache.org/handbook/zh/basics/import">在项目中引入 Apache ECharts</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i echarts --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 地图 --&gt;</span><br><span class="line">&lt;div class=&quot;map-box&quot;&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">        :class=&quot;mapType === 1 ? &#x27;to-left&#x27; : &#x27;to-right&#x27;&quot;</span><br><span class="line">        id=&quot;map&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">        :class=&quot;mapType === 1 ? &#x27;to-left&#x27; : &#x27;to-right&#x27;&quot;</span><br><span class="line">        id=&quot;map2&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-pageJs-index-ts-1"><a href="#2-pageJs-index-ts-1" class="headerlink" title="2.pageJs/index.ts"></a>2.<code>pageJs/index.ts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line"></span><br><span class="line">type EChartsOption = echarts.EChartsOption;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    var mapDom = document.getElementById(&#x27;map&#x27;)!;</span><br><span class="line">    var mapDom2 = document.getElementById(&#x27;map2&#x27;)!;</span><br><span class="line"></span><br><span class="line">    var optionMap: EChartsOption = &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            subtext: &#x27;单击省份可查看病例数&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123; // 提示框</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">            formatter: &#x27;现有确诊病例&lt;br/&gt;&#123;b&#125;: &#123;c&#125;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        visualMap:&#123;</span><br><span class="line">            show:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var myMap = echarts.init(mapDom);</span><br><span class="line">    var myMap2 = echarts.init(mapDom2);</span><br><span class="line">    myMap.showLoading();</span><br><span class="line">    myMap2.showLoading();</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上自带的loading</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myMap = echarts.init(mapDom);</span><br><span class="line">var myMap2 = echarts.init(mapDom2);</span><br><span class="line">myMap.showLoading();</span><br><span class="line">myMap2.showLoading();</span><br></pre></td></tr></table></figure>

<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 地图数据</span><br><span class="line">let mapData:any[] = []</span><br><span class="line">data.china.map((v:any) =&gt; &#123;</span><br><span class="line">    mapData.push(&#123;</span><br><span class="line">        name: v.name,</span><br><span class="line">        value: v.total.confirm - v.total.dead - v.total.heal || 0,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-1-完整代码"><a href="#2-1-完整代码" class="headerlink" title="2.1.完整代码"></a>2.1.完整代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initDataFun = (data:InteData) =&gt; &#123;</span><br><span class="line">    var mapDom = document.getElementById(&#x27;map&#x27;)!;</span><br><span class="line">    var mapDom2 = document.getElementById(&#x27;map2&#x27;)!;</span><br><span class="line"></span><br><span class="line">    var optionMap: EChartsOption = &#123;</span><br><span class="line">        title:&#123;</span><br><span class="line">            subtext: &#x27;单击省份可查看病例数&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123; // 提示框</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">            formatter: &#x27;现有确诊病例&lt;br/&gt;&#123;b&#125;: &#123;c&#125;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        visualMap:&#123;</span><br><span class="line">            show:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将重复的配置抽出来</span><br><span class="line">    var series = &#123;</span><br><span class="line">        type: &quot;map&quot;,</span><br><span class="line">        map: &quot;china&quot;,</span><br><span class="line">        colorBy: &quot;series&quot;,</span><br><span class="line">        zoom: 1.3,</span><br><span class="line">        top: 80,</span><br><span class="line">        label:&#123;</span><br><span class="line">            show: true,</span><br><span class="line">            color: &quot;#333&quot;,</span><br><span class="line">            fontSize: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var myMap = echarts.init(mapDom);</span><br><span class="line">    var myMap2 = echarts.init(mapDom2);</span><br><span class="line">    myMap.showLoading();</span><br><span class="line">    myMap2.showLoading();</span><br><span class="line"></span><br><span class="line">    axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        const resData = res.data.data;</span><br><span class="line">        data.areaTree = resData.areaTree;</span><br><span class="line">        data.chinaDayList = resData.chinaDayList;</span><br><span class="line">        data.chinaTotal = resData.chinaTotal;</span><br><span class="line"></span><br><span class="line">        // 获取中国的数据</span><br><span class="line">        data.china = data.areaTree.find((v) =&gt; v.id===&quot;0&quot;).children;</span><br><span class="line">        // 获取湖北的数据</span><br><span class="line">        data.hbData = data.china.find((v) =&gt; v.id === &quot;420000&quot;)</span><br><span class="line"></span><br><span class="line">        // 地图数据</span><br><span class="line">        let mapData:any[] = []</span><br><span class="line">        data.china.map((v:any) =&gt; &#123;</span><br><span class="line">            mapData.push(&#123;</span><br><span class="line">                name: v.name,</span><br><span class="line">                value: v.total.confirm - v.total.dead - v.total.heal || 0,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        myMap.hideLoading();</span><br><span class="line">        myMap.setOption(&#123;</span><br><span class="line">            ...optionMap, </span><br><span class="line">            series:&#123;</span><br><span class="line">                ...series, </span><br><span class="line">                data: mapData,   // 数据源</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-引入china-json文件"><a href="#3-引入china-json文件" class="headerlink" title="3.引入china.json文件"></a>3.引入china.json文件</h4><p><a href="https://blog.csdn.net/seeeeeeeeeee/article/details/121495485?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-4-121495485-null-null.pc_agg_new_rank&utm_term=china.json%20geojson&spm=1000.2123.3001.4430">【echarts 中国地图】vue实现中国地图，省份居中china.json文件下载</a></p>
<p>在pageJs/index.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import chinaJson from &#x27;../assets/china.json&#x27;;</span><br><span class="line"></span><br><span class="line">echarts.registerMap(&quot;china&quot;, (chinaJson as any))</span><br></pre></td></tr></table></figure>

<h2 id="List组件封装"><a href="#List组件封装" class="headerlink" title="List组件封装"></a>List组件封装</h2><h4 id="子组件List组件："><a href="#子组件List组件：" class="headerlink" title="子组件List组件："></a>子组件List组件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        数据列表组件</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    msg: String,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(props.list)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="重点1：处理初始化会报错问题-判断是否渲染子组件"><a href="#重点1：处理初始化会报错问题-判断是否渲染子组件" class="headerlink" title="重点1：处理初始化会报错问题-判断是否渲染子组件"></a>重点1：处理初始化会报错问题-判断是否渲染子组件</h4><p>子组件的setup会在父组件的onMounted之前执行，所以传参的时候，要进行判断，是否渲染子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import List from &#x27;../../components/situation/List.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;List v-if=&quot;china.length &gt; 0&quot; :list=&quot;china&quot; :msg=&quot;&#x27;中国疫情&#x27;&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="动态数据传值"><a href="#动态数据传值" class="headerlink" title="动态数据传值"></a>动态数据传值</h4><p>动态数据，这样写会报错：<code>:msg=&quot;中国疫情&quot;</code></p>
<p>要加上引号：<code>:msg=&quot;&#39;中国疫情&#39;&quot;</code></p>
<h4 id="props里面的数据无需解构，可以直接使用"><a href="#props里面的数据无需解构，可以直接使用" class="headerlink" title="props里面的数据无需解构，可以直接使用"></a>props里面的数据无需解构，可以直接使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    msg: String,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#123;&#123;list&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件自调用——递归"><a href="#组件自调用——递归" class="headerlink" title="组件自调用——递归"></a>组件自调用——递归</h4><h4 id="重点2：组件自调用，要写上name值"><a href="#重点2：组件自调用，要写上name值" class="headerlink" title="重点2：组件自调用，要写上name值"></a>重点2：组件自调用，要写上name值</h4><p><code>List.vue</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup name=&quot;List&quot; lang=&#x27;ts&#x27;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;list-box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;info-title info&quot;&gt;</span><br><span class="line">            &lt;p&gt;地区&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;现有确诊&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;确诊&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;死亡&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;治愈&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;list&quot; v-for=&quot;i in list&quot; :key=&quot;i.id&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;p-box&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info&quot; @click=&quot;getShowChildren(i.id)&quot;&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.confirm - i.today.dead - i.today.heal&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;</span><br><span class="line">                        &lt;span&gt;&#123;&#123;i.total.confirm&#125;&#125;&lt;/span&gt;</span><br><span class="line">                        &lt;span&gt;较昨日&#123;&#123;i.today.confirm&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.dead&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;i.total.heal&#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                  &lt;!-- 世界数据不展示children --&gt;</span><br><span class="line">                &lt;div v-if=&quot;showChildren&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;children&quot; v-show=&quot;data.isShowChildren == i.id&quot;&gt;</span><br><span class="line">                        &lt;List :list=&quot;i.children&quot;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h4 id="重点3：定义子组件接收的属性"><a href="#重点3：定义子组件接收的属性" class="headerlink" title="重点3：定义子组件接收的属性"></a>重点3：定义子组件接收的属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup name=&quot;List&quot; lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    list: Array,</span><br><span class="line">    showChildren: Boolean  // 是否显示children数据 （中国病例显示，世界病例不显示—）</span><br><span class="line">&#125;)</span><br><span class="line">console.log(props.list)</span><br><span class="line"></span><br><span class="line">const data = reactive(&#123;</span><br><span class="line">    isShowChildren: &quot;&quot;    // 是否有children</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const getShowChildren = (id: string) =&gt; &#123;</span><br><span class="line">    data.isShowChildren == id</span><br><span class="line">    ? (data.isShowChildren = &quot;&quot;)</span><br><span class="line">    : (data.isShowChildren = id)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="文字溢出不换行显示"><a href="#文字溢出不换行显示" class="headerlink" title="文字溢出不换行显示"></a>文字溢出不换行显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>



<h3 id="懒加载——下拉刷新上拉加载"><a href="#懒加载——下拉刷新上拉加载" class="headerlink" title="懒加载——下拉刷新上拉加载"></a>懒加载——下拉刷新上拉加载</h3><p>国际病例数据较多——使用懒加载方式。</p>
<h4 id="上拉加载下拉刷新的组件-ScrollCom"><a href="#上拉加载下拉刷新的组件-ScrollCom" class="headerlink" title="上拉加载下拉刷新的组件-ScrollCom"></a>上拉加载下拉刷新的组件-ScrollCom</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;!-- ref=&quot;scrollEl&quot; 这里scrollEl 不是一个变量，是字符串--&gt;</span><br><span class="line">        &lt;!-- :ref=&quot;scrollEl&quot; 这里scrollEl 是一个变量--&gt;</span><br><span class="line">        &lt;!-- ref不会被渲染到DOM元素上去， 是一个内部属性，</span><br><span class="line">            用于与data中的属性进行绑定，如果在data中找到了对应名称的响应式的key值(属性)时,</span><br><span class="line">            当这个元素渲染完之后，会把这个元素的指针给到data中与之相同的key值的对象上去--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 绑定滚动事件：@scroll --&gt;</span><br><span class="line">        &lt;div </span><br><span class="line">            @scroll=&quot;scrollEvent&quot;</span><br><span class="line">            ref=&quot;scrollEl&quot; </span><br><span class="line">            class=&quot;scrollEl&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchstartTitleShow&quot;&gt;释放可刷新...&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchendTitleShow&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">            &lt;!-- 插槽——————这个组件可以被多个组件使用 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;div v-if=&quot;!isScroll&quot; class=&quot;&quot;&gt;&#123;&#123;endText&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    distance: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    isScroll: Boolean,</span><br><span class="line">    endText: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#x27;没有更多了&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> const $emit = defineEmits([&#x27;getList&#x27;])</span><br><span class="line"></span><br><span class="line">const data = reactive(&#123;</span><br><span class="line">    scrollEl: null,   // 用来装实例对象，  用于ref获取元素对象</span><br><span class="line">    startText: &quot;释放可刷新&quot;,</span><br><span class="line">    scrollTop: 0,</span><br><span class="line">    scrollY: 0,</span><br><span class="line">    translateY: 0,</span><br><span class="line">    touchstartTitleShow: false, // 控制手指按下屏幕的title显示</span><br><span class="line">    touchendTitleShow: false,   // 控制手指离开屏幕的title显示</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let &#123; </span><br><span class="line">    scrollEl,</span><br><span class="line">    startText,</span><br><span class="line">    scrollTop,</span><br><span class="line">    scrollY,</span><br><span class="line">    translateY,</span><br><span class="line">    touchstartTitleShow,</span><br><span class="line">    touchendTitleShow,</span><br><span class="line"> &#125; = toRefs(data);</span><br><span class="line"></span><br><span class="line">// 滚动事件</span><br><span class="line"> const scrollEvent = (e:any) =&gt;&#123;</span><br><span class="line">    data.scrollTop = e.srcElement.scrollTop;</span><br><span class="line">    if(!props.isScroll) return;</span><br><span class="line">    if(</span><br><span class="line">        data.scrollTop + e.srcElement.offsetHeight &gt; </span><br><span class="line">        e.srcElement.scrollHeight - props.distance</span><br><span class="line">    )&#123;</span><br><span class="line">        // 获取下一页的数据————子组件给父组件传值</span><br><span class="line">        $emit(&#x27;getList&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h4 id="使用ScrollCom"><a href="#使用ScrollCom" class="headerlink" title="使用ScrollCom"></a>使用ScrollCom</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScrollCom </span><br><span class="line">    :distance=&quot;100&quot;</span><br><span class="line">    :isScroll=&quot;true&quot;</span><br><span class="line">    @getList=&quot;getList&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;List </span><br><span class="line">    	v-if=&quot;areaTree.length &gt; 0&quot;</span><br><span class="line">    	:showChildren=&quot;false&quot; </span><br><span class="line">    	:list=&quot;areaTree&quot; </span><br><span class="line">    	:msg=&quot;&#x27;世界疫情&#x27;&quot;/&gt;</span><br><span class="line">&lt;/ScrollCom&gt;</span><br></pre></td></tr></table></figure>

<h4 id="对分页加载的数据进行拆解"><a href="#对分页加载的数据进行拆解" class="headerlink" title="对分页加载的数据进行拆解"></a>对分页加载的数据进行拆解</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const getPageList = (list:any[]) =&gt; &#123;</span><br><span class="line">    const arr:Array&lt;any[]&gt;[] = [];  // 二维数组</span><br><span class="line">    for(let index = 0; index &lt; list.length; index += 30)&#123;</span><br><span class="line">        arr.push(list.slice(index, index + 30))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对分页加载的数据进行拆解</span><br><span class="line">// 结构 如：[[1-30][31-60]....] 1-30条数据为第一页，31到60为第二页</span><br><span class="line">data.areaTree = getPageList(resData.areaTree);</span><br><span class="line">data.showList = data.areaTree[0];    // 第一页数据</span><br></pre></td></tr></table></figure>

<p>第一页数据：<code>:list=&quot;showList&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScrollCom </span><br><span class="line">    :distance=&quot;100&quot;</span><br><span class="line">    :isScroll=&quot;true&quot;</span><br><span class="line">    @getList=&quot;getList&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;List v-if=&quot;showList.length &gt; 0&quot; :showChildren=&quot;false&quot; :list=&quot;showList&quot; :msg=&quot;&#x27;世界疫情&#x27;&quot;/&gt;</span><br><span class="line">&lt;/ScrollCom&gt;</span><br></pre></td></tr></table></figure>

<h5 id="处理上拉加载报错："><a href="#处理上拉加载报错：" class="headerlink" title="处理上拉加载报错："></a>处理上拉加载报错：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: data.areaTree[page] is not iterable (cannot read property undefined)</span><br></pre></td></tr></table></figure>

<p>原因：页数等于数据长度仍去获取数据； 解决：页数等于数据长度，就显示“没有更多”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(page === data.areaTree.length - 1) &#123;</span><br><span class="line">    data.isScroll = false;  // 不可下拉加载数据</span><br><span class="line">    return;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><ul>
<li>touchstart</li>
<li>touchmove</li>
<li>touchend</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div </span><br><span class="line">    @scroll=&quot;scrollEvent&quot;</span><br><span class="line">    @touchstart=&quot;touchstart&quot;</span><br><span class="line">    @touchmove=&quot;touchmove&quot;</span><br><span class="line">    @touchend=&quot;touchend&quot;</span><br><span class="line">    ref=&quot;scrollEl&quot; </span><br><span class="line">    :style=&quot;&#123;top: `$&#123;translateY&#125;px`&#125;&quot;</span><br><span class="line">    class=&quot;scroll-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchstartTitleShow&quot;&gt;释放可刷新...&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;loadingBox&quot; v-if=&quot;touchendTitleShow&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">    &lt;!-- 插槽——————这个组件可以被多个组件使用 --&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;div v-if=&quot;!isScroll&quot; class=&quot;end-text&quot;&gt;&#123;&#123;endText&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 手指触碰到屏幕</span><br><span class="line"> const touchstart = (e:any) =&gt; &#123;</span><br><span class="line">    console.log(e.targetTouches[0])</span><br><span class="line">    let y = e.targetTouches[0].pageY;</span><br><span class="line">    data.startY = y;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// 手指开始滑动</span><br><span class="line">const touchmove = (e:any) =&gt; &#123;</span><br><span class="line">    let y = e.targetTouches[0].pageY;</span><br><span class="line">    if(y &gt; data.startY &amp;&amp; data.scrollTop ==0) &#123;</span><br><span class="line">        data.touchstartTitleShow = true;</span><br><span class="line">        // 如果当前移动距离大于初始点击坐标，则视为下拉，并且要处于顶部</span><br><span class="line">        data.translateY = (y - data.startY) / 2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        data.touchstartTitleShow = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 手指松开</span><br><span class="line">const touchend = (e:any) =&gt; &#123;</span><br><span class="line">    let y = e.changedTouches[0].pageY;</span><br><span class="line">    if(y &gt; data.startY) &#123;</span><br><span class="line">        data.translateY = 0;</span><br><span class="line">        data.touchstartTitleShow = false;</span><br><span class="line">        data.touchendTitleShow = true;</span><br><span class="line">        $emit(&#x27;refreshFun&#x27;, () =&gt; &#123;</span><br><span class="line">            // 更新完数据的回调</span><br><span class="line">            data.touchendTitleShow = false;</span><br><span class="line">        &#125;)</span><br><span class="line">        data.startY = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const $emit = defineEmits([&#x27;getList&#x27;,&#x27;refreshFun&#x27;])</span><br></pre></td></tr></table></figure>

<h4 id="下拉刷新方法及回调处理"><a href="#下拉刷新方法及回调处理" class="headerlink" title="下拉刷新方法及回调处理"></a>下拉刷新方法及回调处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下拉刷新方法及 回调处理</span><br><span class="line">const refreshFun = (fun:Function) =&gt;&#123;</span><br><span class="line">    // 注：要将initDataFun改为promise函数  即使用async await</span><br><span class="line">    </span><br><span class="line">    initDataFun(data).then(() =&gt; &#123;</span><br><span class="line">        page = 0;</span><br><span class="line">        data.isScroll = true;</span><br><span class="line">        fun();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：要将initDataFun函数改为返回promise</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const initDataFun = async (data:InteData) =&gt; &#123;</span><br><span class="line">	....</span><br><span class="line">	let res = await axios(&#x27;/api/ug/api/wuhan/app/data/list-total?t=330415245809&#x27;)</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="下拉的空白区域的宽度"><a href="#下拉的空白区域的宽度" class="headerlink" title="下拉的空白区域的宽度"></a>下拉的空白区域的宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:style=&quot;&#123;top: `$&#123;translateY&#125;px`&#125;&quot;</span><br></pre></td></tr></table></figure>



<h4 id="折线图，y轴上的刻度数据被挡住，使用以下方法调整样式"><a href="#折线图，y轴上的刻度数据被挡住，使用以下方法调整样式" class="headerlink" title="折线图，y轴上的刻度数据被挡住，使用以下方法调整样式"></a>折线图，y轴上的刻度数据被挡住，使用以下方法调整样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">    axisLabel:&#123;</span><br><span class="line">      margin: -20,  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><p><a href="https://blog.csdn.net/qq_37656005/article/details/119818759">关于vue3.0 + vite + ts 打包的坑</a></p>
<p><a href="https://www.modb.pro/db/114083">记一次 vue-tsc 引起的错误</a></p>
<p>打包报错：</p>
<p>将package.json的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vite build&quot;,</span><br></pre></td></tr></table></figure>

<h5 id="vue3-0-vite-ts项目搭建-分环境打包-四"><a href="#vue3-0-vite-ts项目搭建-分环境打包-四" class="headerlink" title="vue3.0+vite+ts项目搭建-分环境打包(四)"></a><a href="https://www.shuzhiduo.com/A/nAJvZxqGJr/">vue3.0+vite+ts项目搭建-分环境打包(四)</a></h5><p><a href="https://rollupjs.org/guide/en/#outputmanualchunks">rollup.js</a></p>
<p><a href="https://blog.csdn.net/weixin_45536484/article/details/120041748">ECharts y轴（yAxis）</a></p>
<p>备注：完整代码在<code>Gitee</code>中<code> Vue3_demo/vue3-vite-yiqing</code></p>
<p>备注：获取疫情数据的接口：<a href="https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809">https://c.m.163.com/api/ug/api/wuhan/app/data/list-total?t=330415245809</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1620882">解决vue本地环境跨域请求正常，版本打包后跨域代理不起作用，请求不到数据的方法</a></p>
<p><a href="https://www.qb5200.com/article/164553.html">vue项目打包后请求地址错误/打包后跨域操作</a></p>
<p><a href="https://blog.csdn.net/weixin_43110440/article/details/124882324"><strong>vite 打包后本地不能访问</strong></a></p>
<p><a href="https://www.it610.com/article/1506847191577198592.htm">vue3+vite项目配置axios及跨域</a></p>
<h4 id="VITE-VUE3-跨域环境变量配置"><a href="#VITE-VUE3-跨域环境变量配置" class="headerlink" title="VITE+VUE3 跨域环境变量配置"></a><a href="https://blog.csdn.net/xm2395939/article/details/125140690?app_version=5.7.0&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125140690%22,%22source%22:%22winney07%22%7D&ctrtid=shInB&utm_source=app">VITE+VUE3 跨域环境变量配置</a></h4><p><a href="https://blog.csdn.net/lsjweiyi/article/details/124645896">神坑——后端允许了跨域但是前端（vue3+vite+axios）仍然提示跨域</a></p>
<h4 id="axios封装请求"><a href="#axios封装请求" class="headerlink" title="axios封装请求"></a><a href="https://www.it610.com/article/1506847191577198592.htm">axios封装请求</a></h4><h4 id="使用vite如何配置跨域，以及环境配置"><a href="#使用vite如何配置跨域，以及环境配置" class="headerlink" title="使用vite如何配置跨域，以及环境配置"></a><a href="https://blog.csdn.net/jch923798729/article/details/123658250">使用vite如何配置跨域，以及环境配置</a></h4><p><a href="https://blog.csdn.net/m0_62152730/article/details/125082425">vue部署Linux上 跨域问题</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var http = axios.create(&#123;</span><br><span class="line">  timeout: 1000 * 20,</span><br><span class="line">  baseURL: import.meta.env.DEV? &#x27;&#x27;: import.meta.env.VITE_BASE_URL</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">  port: 4000, // 设置服务启动端口号</span><br><span class="line">  open: true, // 设置服务启动时是否自动打开浏览器</span><br><span class="line">  cors: true, // 允许跨域</span><br><span class="line"></span><br><span class="line">  // 设置代理，根据我们项目实际情况配置</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    &#x27;/api&#x27;: &#123;</span><br><span class="line">      target: env.VITE_BASE_URL, // 环境变量</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      secure: false,</span><br><span class="line">      rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/m0_62152730?type=blog">https://blog.csdn.net/m0_62152730?type=blog</a></p>
]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目处理跨域请求</title>
    <url>/2020/12/14/vue%E9%A1%B9%E7%9B%AE%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h4 id="1、设置配置文件"><a href="#1、设置配置文件" class="headerlink" title="1、设置配置文件"></a>1、设置配置文件</h4><ul>
<li>方法一：在根目录中新建vue.config.js文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    runtimeCompiler: true,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            // 匹配请求路径中的字符，</span><br><span class="line">            // 如果符合就用这个代理对象代理本次请求，路径为target的网址，</span><br><span class="line">            // changeOrigin为是否跨域，</span><br><span class="line">            // 如果不想始终传递这个前缀，可以重写路径</span><br><span class="line">            // pathRewrite为是否将指定字符串转换一个再发过去。</span><br><span class="line">            &#x27;/api&#x27;: &#123;</span><br><span class="line">              target: &#x27;http://ttapi.research.itcast.cn/&#x27;,</span><br><span class="line">                ws: true,</span><br><span class="line">                changeOrigin: true,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>方法二：在根目录中，新建config&gt;index.js文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    dev: &#123;</span><br><span class="line">        proxyTable: &#123;</span><br><span class="line">            &#x27;/api&#x27;: &#123;</span><br><span class="line">              target: &#x27;http://ttapi.research.itcast.cn/&#x27;, // 接口的域名</span><br><span class="line">              secure: false, // 如果是https接口，需要配置这个参数</span><br><span class="line">              changeOrigin: true, // 如果接口跨域，需要进行这个参数配置</span><br><span class="line">              pathRewrite: &#123;</span><br><span class="line">                &#x27;^/api&#x27;: &#x27;&#x27; // &#x27;/api/a/user&#x27; ==&#x27;localhost:8080/user&#x27;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、axios请求方法的写法："><a href="#2、axios请求方法的写法：" class="headerlink" title="2、axios请求方法的写法："></a>2、axios请求方法的写法：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&#x27;http://ttapi.research.itcast.cn/app/v1_0/comments&#x27;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: &#x27;a&#x27;,</span><br><span class="line">        source: this.source,</span><br><span class="line">        offset: this.offset,</span><br><span class="line">        limit: this.limit</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(&#x27;response&#x27;)</span><br><span class="line">    console.log(response)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="name属性是父组件传过来的，除了数组，对象，其他都不允许修改"><a href="#name属性是父组件传过来的，除了数组，对象，其他都不允许修改" class="headerlink" title="name属性是父组件传过来的，除了数组，对象，其他都不允许修改"></a>name属性是父组件传过来的，除了数组，对象，其他都不允许修改</h4><blockquote>
<p> props里面的数据，除了数组，对象，其他都不允许修改，所以不能用于页面元素的v-model属性中，因为v-model是双向绑定的</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;van-field</span><br><span class="line">   v-model=&quot;localName&quot;</span><br><span class="line">   ...</span><br><span class="line">/&gt;</span><br><span class="line"> props: &#123;</span><br><span class="line">     name: &#123;</span><br><span class="line">         type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      localName: this.name</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h4 id="当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写："><a href="#当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写：" class="headerlink" title="当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写："></a>当传递给子组件的数据既要使用又要修改，这种情况下我们可以使用v-model简写：</h4><p>例如：父组件的name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:name=&quot;user.name&quot;</span><br><span class="line">@update-name=&quot;user.name=$event&quot;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-model=&quot;user.name&quot;</span><br></pre></td></tr></table></figure>

<p>子组件也要跟着修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">this.$emit(&#x27;input&#x27;, this.localName)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-model=”user.name”</p>
<p>默认传递一个名字叫value的数据：    ：value=”user.name”</p>
<p>默认监听input事件:      @input=”user.name=$event”</p>
<p>v-model的本质还是父子组件通信，它仅仅是简化了父组件的使用，子组件还是按照原来那样使用</p>
</blockquote>
<p>注：在同一个子组件传递中，v-model只能使用一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这样是错误的：</span><br><span class="line">&lt;update-name</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    v-model=&quot;user.photo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h5 id="在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用-sync修饰符"><a href="#在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用-sync修饰符" class="headerlink" title="在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用.sync修饰符"></a>在同一个子组件传递中，v-model只能使用一次，如果有多个数据需要保持同步，使用.sync修饰符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;update-name</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    :gender.sync=&quot;user.photo&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：我们一般把最常用的数据设计为v-model绑定，把不太常用的数据设计为.sync</p>
</blockquote>
<h4 id="销毁组件的一种方法："><a href="#销毁组件的一种方法：" class="headerlink" title="销毁组件的一种方法："></a>销毁组件的一种方法：</h4><p>1、加上v-if来控制渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;update-name</span><br><span class="line">    v-if=&quot;isEditNameShow&quot;</span><br><span class="line">    v-model=&quot;user.name&quot;</span><br><span class="line">    @close=&quot;isEditNameShow=false&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="在Vue中操作DOM，要给该元素添加ref属性"><a href="#在Vue中操作DOM，要给该元素添加ref属性" class="headerlink" title="在Vue中操作DOM，要给该元素添加ref属性"></a>在Vue中操作DOM，要给该元素添加ref属性</h4><p>例如：点击头像，选择图片来修改头像</p>
<p>1、给input  file添加ref属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; hidden ref=&quot;file&quot;&gt;</span><br><span class="line">&lt;van-cell title=&quot;头像&quot; is-link center @click=&quot;$refs.file.click()&quot;&gt;</span><br><span class="line">    &lt;van-image</span><br><span class="line">        width=&quot;30&quot;</span><br><span class="line">        height=&quot;30&quot;</span><br><span class="line">        round fit=&quot;cover&quot;</span><br><span class="line">        :src=&quot;user.photo&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br></pre></td></tr></table></figure>

<p>2、控制选择的文件类型：accept属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; hidden ref=&quot;file&quot; accept=&quot;image/*&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>3、监听文件的change事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">    type=&quot;file&quot;</span><br><span class="line">    hidden</span><br><span class="line">    ref=&quot;file&quot;</span><br><span class="line">    accept=&quot;image/*&quot;</span><br><span class="line">    @change=&quot;onFileChange&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>4、解决选择相同文件不触发change事件,手动清空file的value值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onFileChange() &#123;</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">     // 手动清空file的value值</span><br><span class="line">     this.$refs.file.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、展示弹出层，在弹出层预览图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onFileChange() &#123;</span><br><span class="line">     // 展示弹出层</span><br><span class="line">     this.isEditPhotoShow = true</span><br><span class="line"></span><br><span class="line">    //  在弹出层预览选择的图片</span><br><span class="line">    const blod = window.URL.createObjectURL(this.$refs.file.files[0])</span><br><span class="line">    this.previewImage = blod</span><br><span class="line"></span><br><span class="line">     // 手动清空file的value值</span><br><span class="line">     this.$refs.file.value = &#x27;&#x27;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>6、父传，子收。并展示预览图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父传：</span><br><span class="line">&lt;update-photo</span><br><span class="line">    :image=&quot;previewImage&quot;</span><br><span class="line">/&gt;</span><br><span class="line">子收：</span><br><span class="line"> props: &#123;</span><br><span class="line">     image: &#123;</span><br><span class="line">         type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">&lt;div class=&quot;update-photo&quot;&gt;</span><br><span class="line">     &lt;img :src=&quot;image&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>7、修改父子组件传值的文件格式</p>
<blockquote>
<p>如果Content-Type  要求是 multipart/form-data，则一定要提交FormData数据对象，专门用于文件上传的，不能提交{}对象，没用</p>
</blockquote>
<p>所以要修改父组件传过来子组件的文件格式，保留原来的文件格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">onFileChange() &#123;</span><br><span class="line">    ....</span><br><span class="line">    const blod = this.$refs.file.files[0]</span><br><span class="line">    this.previewImage = blod</span><br><span class="line">	....</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&lt;update-photo</span><br><span class="line">    :file=&quot;previewImage&quot;</span><br><span class="line">    @close=&quot;isEditPhotoShow=false&quot;</span><br><span class="line">/&gt;</span><br><span class="line">子组件：</span><br><span class="line"> props: &#123;</span><br><span class="line">     file: &#123;</span><br><span class="line">        //  type: String,</span><br><span class="line">         required: true</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      image: window.URL.createObjectURL(this.file)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>8、处理接口传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件格式处理</span><br><span class="line"> const fd = new FormData()</span><br><span class="line"> fd.append(&#x27;photo&#x27;, this.file)</span><br><span class="line"> // photo为参数名，this.file为参数值</span><br><span class="line"></span><br><span class="line"> await updateUserPhoto(fd)</span><br></pre></td></tr></table></figure>

<p>9、处理图片裁切，使用 <a href="https://github.com/fengyuanchen/cropperjs">cropperjs</a>  这个跟vue没有关系，其他项目也可以使用） 也可以在<a href="https://github.com/vuejs/awesome-vue">Awesome</a> 中搜crop找裁切工具</p>
<ul>
<li>1、安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install cropperjs</span><br></pre></td></tr></table></figure>

<ul>
<li>2、引入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;cropperjs/dist/cropper.css&#x27;</span><br><span class="line">import Cropper from &#x27;cropperjs&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>3、使用：放在mounted里面</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img :src=&quot;image&quot; ref=&quot;image&quot;&gt;</span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    const image = this.$refs.image</span><br><span class="line">    const cropper = new Cropper(image, &#123;</span><br><span class="line">        viewMode: 1,</span><br><span class="line">        dragMode: &#x27;move&#x27;,</span><br><span class="line">        aspectRatio: 1,</span><br><span class="line">        // autoCropArea: 1,</span><br><span class="line">        cropBoxMovable: false,</span><br><span class="line">        cropBoxResizable: false,</span><br><span class="line">        background: false,</span><br><span class="line">        movable: true</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(cropper)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>4、让裁切区居中显示</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.update-photo&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -185px;</span><br><span class="line">    margin-left: -185px;</span><br><span class="line">    height: 370px;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width:370px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>5、获取裁切结果，getCroppedCanvas()</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">      image: window.URL.createObjectURL(this.file),</span><br><span class="line">      cropper: null</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">使用Promise返回一个裁切对象，用于async</span><br><span class="line"> getCroppedCanvas() &#123;</span><br><span class="line">     return new Promise(resolve =&gt; &#123;</span><br><span class="line">     // 因为cropper定义在mounted中，在这里无法使用，</span><br><span class="line">     	为了能够在这里能调用cropper，将cropper放在data中</span><br><span class="line">          this.cropper.getCroppedCanvas().toBlob((file) =&gt; &#123;</span><br><span class="line">            resolve(file)</span><br><span class="line">        &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line">getCroppedCanvas返回的Promise对象，在这里面使用：</span><br><span class="line">async onConfirm() &#123;</span><br><span class="line">     .....</span><br><span class="line">     const file = await this.getCroppedCanvas()</span><br><span class="line">     const img = window.URL.createObjectURL(file)</span><br><span class="line"></span><br><span class="line">    // 文件格式处理</span><br><span class="line">     const fd = new FormData()</span><br><span class="line">     fd.append(&#x27;photo&#x27;, file)</span><br><span class="line">     </span><br><span class="line">     await updateUserPhoto(fd)</span><br><span class="line"></span><br><span class="line">     this.$emit(&#x27;close&#x27;)</span><br><span class="line">     this.$emit(&#x27;update-photo&#x27;, img)</span><br><span class="line"></span><br><span class="line">     this.$toast.success(&#x27;保存成功&#x27;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目记录</title>
    <url>/2020/05/26/vue%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="在项目中引入阿里图库"><a href="#在项目中引入阿里图库" class="headerlink" title="在项目中引入阿里图库"></a>在项目中引入阿里图库</h3><ol>
<li>在阿里图库中，选好图标，建立好项目</li>
<li>将整个项目的图标下载到本地解压</li>
<li>在Vue.js项目的assets目录中，新建一个icon目录，将解压后文件夹里面的文件复制到这个目录下</li>
<li>在main.js文件里引入iconfont.css, import ‘@/assets/icon/iconfont.css’</li>
<li>在项目中引入图标的时候要加上iconfont类，然后再添加图标本身的类名</li>
</ol>
<h3 id="链接文字的写法-路由跳转"><a href="#链接文字的写法-路由跳转" class="headerlink" title="链接文字的写法(路由跳转)"></a>链接文字的写法(路由跳转)</h3><h5 id="不传参"><a href="#不传参" class="headerlink" title="不传参"></a>不传参</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明式：&lt;router-link :to=&quot;&#123;name:&#x27;index&#x27;&#125;&#125;&quot;&gt;    或者    &lt;router-link to=&#x27;/index&#x27;&gt;</span><br><span class="line"></span><br><span class="line">编程式：router.push(...)</span><br><span class="line">方法一: this.$router.push(&#123;path:&#x27;路径&#x27;)&#125;;</span><br><span class="line">方法二：this.$router.push(&#123;name:&#x27;组件名&#x27;)&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明式：&lt;router-link :to=&quot;&#123;name:&#x27;index&#x27;,query:&#123;id:&#x27;xxx&#x27;,name:&#x27;xxx&#x27;&#125;&#125;&quot;&gt;</span><br><span class="line">编程式：router.push(...)</span><br><span class="line"></span><br><span class="line">方法一：this.$router.push(&#123;path:&#x27;xxx&#x27;,query:&#123;aa:xx, bb: xx&#125;&#125;);   //带查询参数，类似于 “？” 的形式传值</span><br><span class="line"></span><br><span class="line">方法二：this.$router.push(&#123;path:&#x27;xxx&#x27;,params:&#123;aa:xx, bb: xx&#125;&#125;); </span><br><span class="line"></span><br><span class="line">注：以上两种方法的query跳转路径也可以写成name:&#x27;组件名&#x27;的形式</span><br><span class="line"></span><br><span class="line">在query中放入需要传递的参数即可，多个参数之间用逗号隔开；</span><br><span class="line"></span><br><span class="line">取值：this.$route.query.xx   (可在跳转的页面取得所传递的值)；</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">component: () =&gt; import(&#x27;@/views/dashboard/console/index.vue&#x27;),</span><br><span class="line">可以简写为：</span><br><span class="line">component: () =&gt; import(&#x27;@/views/dashboard/console&#x27;),</span><br></pre></td></tr></table></figure>

<h3 id="Vue-js-组件中绑定点击事件不生效的解决方法"><a href="#Vue-js-组件中绑定点击事件不生效的解决方法" class="headerlink" title="Vue.js 组件中绑定点击事件不生效的解决方法"></a>Vue.js 组件中绑定点击事件不生效的解决方法</h3><p>在使用组件（比如 element UI）的过程中，会发现无法通过 @click 绑定标签的点击事件。</p>
<p>因为 Vue.js 使用的是一套自己的事件传递机制，所以我们需要添加 @click.native 来绑定 DOM 原生事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dropdown-item icon=&quot;el-icon-unlock&quot; @click.native=&quot;resetPass&quot;&gt;&lt;/el-dropdown-item&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vuex的store的使用"><a href="#Vuex的store的使用" class="headerlink" title="Vuex的store的使用"></a>Vuex的store的使用</h3><p>注意：改变store值，要使用mutations，不要直接改变<br>store.js文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isCollapse: false,</span><br><span class="line">    isMobile: false</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    toggleCollapse(state) &#123;</span><br><span class="line">      state.isCollapse =  !state.isCollapse;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="在页面中的使用："><a href="#在页面中的使用：" class="headerlink" title="在页面中的使用："></a>在页面中的使用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在页面中引入：</span><br><span class="line">import &#123; mapState , mapMutations &#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">引入state：</span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([&#x27;isCollapse&#x27;,&#x27;isMobile&#x27;])</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">引入方法：</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([&#x27;toggleCollapse&#x27;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">页面结构中，直接使用：</span><br><span class="line">:class=&quot;&#123;&#x27;sider-collapse&#x27;:isCollapse&#125;&quot;</span><br><span class="line"></span><br><span class="line">在事件中直接使用：</span><br><span class="line">this.toggleCollapse();</span><br><span class="line"></span><br><span class="line">如果要传参：</span><br><span class="line">this.toggleCollapse(&#123;</span><br><span class="line">  param: this.isCollapse</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="emit的使用"><a href="#emit的使用" class="headerlink" title="$emit的使用"></a>$emit的使用</h3><p>通过 Event Bus 进行组件间通信，来折叠侧边栏</p>
<p>bus.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 使用 Event Bus</span><br><span class="line">const bus = new Vue();</span><br><span class="line"></span><br><span class="line">export default bus;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在点击事件的组件中：</span><br><span class="line">引入：</span><br><span class="line">import bus from &#x27;../public/bus&#x27;;</span><br><span class="line"></span><br><span class="line">页面结构中：</span><br><span class="line">@click=&quot;collapseChage&quot;</span><br><span class="line">v-show=&quot;!isCollapse&quot;</span><br><span class="line"></span><br><span class="line">数据，方法：</span><br><span class="line">data() &#123; </span><br><span class="line">  return &#123;</span><br><span class="line">      isCollapse: false,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  // 侧边栏折叠</span><br><span class="line">  collapseChage() &#123;</span><br><span class="line">      this.isCollapse = !this.isCollapse;</span><br><span class="line">      bus.$emit(&#x27;toggleCollapse&#x27;, this.isCollapse);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在需要用到这个状态的组件中：</span><br><span class="line">引入：</span><br><span class="line">import bus from &#x27;../public/bus&#x27;;</span><br><span class="line">数据：</span><br><span class="line">data() &#123; </span><br><span class="line">  return &#123;</span><br><span class="line">      isCollapse: false,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">页面结构：</span><br><span class="line">:class=&quot;&#123;&#x27;content-collapse&#x27;:isCollapse&#125;&quot;</span><br><span class="line"></span><br><span class="line">监听toggleCollapse事件：</span><br><span class="line">created() &#123;</span><br><span class="line">  bus.$on(&#x27;toggleCollapse&#x27;, msg =&gt; &#123;</span><br><span class="line">      this.isCollapse = msg;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="如何将element-ui中的表格和分页器连接起来"><a href="#如何将element-ui中的表格和分页器连接起来" class="headerlink" title="如何将element-ui中的表格和分页器连接起来"></a>如何将element-ui中的表格和分页器连接起来</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table </span><br><span class="line">    :data=&quot;tableData.slice((query.pageIndex - 1)*query.pageSize, query.pageIndex * query.pageSize)&quot;</span><br><span class="line">    border</span><br><span class="line">    class=&quot;table&quot;</span><br><span class="line">    ref=&quot;multipleTable&quot;</span><br><span class="line">    header-cell-class-name=&quot;table-header&quot;</span><br><span class="line">    @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">&gt;</span><br><span class="line">	&lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;55&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;name&quot; label=&quot;用户名&quot; &gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;账户余额&quot; &gt;</span><br><span class="line">    	&lt;template slot-scope=&quot;scope&quot;&gt;￥&#123;&#123;scope.row.money&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;pagination&quot; &gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">        background</span><br><span class="line">        @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change=&quot;handleCurrentchange&quot;</span><br><span class="line">        :current-page=&quot;query.pageIndex&quot;</span><br><span class="line">        :page-sizes=&quot;[10, 15, 20, 30]&quot;</span><br><span class="line">        :page-size=&quot;query.pageSize</span><br><span class="line">        layout=&quot;total, sizes, prev, pager, next, jumper&quot;</span><br><span class="line">        :total=&quot;pageTotal&quot;&gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">	name :&#x27;basetable&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return (</span><br><span class="line">            query:&#123;</span><br><span class="line">                address:&#x27;&#x27;,</span><br><span class="line">                name:&#x27;&#x27;,</span><br><span class="line">                pageIndex:1,   // 当前页</span><br><span class="line">                pageSize: 10,	// 每页显示条数</span><br><span class="line">                tableData: [],</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     // 分页导航</span><br><span class="line">     handleCurrentChange(val) &#123;</span><br><span class="line">        this.$set(this.query,&#x27;pageIndex&#x27;, val);</span><br><span class="line">        this.getData();</span><br><span class="line">     &#125;,</span><br><span class="line">     handleSizeChange(val) &#123;</span><br><span class="line">        this.$set(this.query,&#x27;pageSize&#x27;, val);</span><br><span class="line">        this.getData();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在vue项目中使用sass的配置方法"><a href="#在vue项目中使用sass的配置方法" class="headerlink" title="在vue项目中使用sass的配置方法"></a>在vue项目中使用sass的配置方法</h4><h5 id="1、安装sass的依赖包"><a href="#1、安装sass的依赖包" class="headerlink" title="1、安装sass的依赖包"></a>1、安装sass的依赖包</h5><p><code>sass-loader依赖于node-sass</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>

<h5 id="2、在build文件夹下的webpack-base-conf-js的rules里面添加配置"><a href="#2、在build文件夹下的webpack-base-conf-js的rules里面添加配置" class="headerlink" title="2、在build文件夹下的webpack.base.conf.js的rules里面添加配置"></a>2、在build文件夹下的webpack.base.conf.js的rules里面添加配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> test: /\.sass$/,</span><br><span class="line"> loaders: [&#x27;style&#x27;, &#x27;css&#x27;, &#x27;scss&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下图所示：</p>
<h5 id="3、在APP-vue中修改style标签"><a href="#3、在APP-vue中修改style标签" class="headerlink" title="3、在APP.vue中修改style标签"></a>3、在APP.vue中修改style标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">   $blue:red;</span><br><span class="line">    .common-header&#123;</span><br><span class="line">        color: $blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4、运行项目"><a href="#4、运行项目" class="headerlink" title="4、运行项目"></a>4、运行项目</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><code>注意：</code></h5><p>如有以下报错，是版本的问题影响的：</p>
<p><code>Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</code></p>
<ul>
<li><strong>解决方法</strong>： 选择更低版本的sass-loader</li>
<li><strong>卸载当前版本</strong>：npm uninstall sass-loader</li>
<li><strong>安装指定版本</strong>：npm install sass-loader<a href="">@7.3.1 </a> –save-dev </li>
</ul>
<p>参考： <a href="https://blog.csdn.net/ze1024/article/details/100516650">安装node-sass运行报错</a></p>
<h4 id="Vue项目设置每个页面的title"><a href="#Vue项目设置每个页面的title" class="headerlink" title="Vue项目设置每个页面的title"></a>Vue项目设置每个页面的title</h4><h5 id="1、在项目目录下安装vue-wechat-title"><a href="#1、在项目目录下安装vue-wechat-title" class="headerlink" title="1、在项目目录下安装vue-wechat-title"></a>1、在项目目录下安装vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm i vue-wechat-title --save-dev</span><br></pre></td></tr></table></figure>

<h5 id="2、在main-js中-使用vue-wechat-title"><a href="#2、在main-js中-使用vue-wechat-title" class="headerlink" title="2、在main.js中 使用vue-wechat-title"></a>2、在main.js中 使用vue-wechat-title</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(require(&#x27;vue-wechat-title&#x27;))     //实例化参数</span><br></pre></td></tr></table></figure>

<h5 id="3、在router的配置中设置"><a href="#3、在router的配置中设置" class="headerlink" title="3、在router的配置中设置"></a>3、在router的配置中设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      path: &#x27;/home&#x27;,</span><br><span class="line">      name: &#x27;Home&#x27;,</span><br><span class="line">      component: Home,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: &#x27;主页&#x27;       //页面标题</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、在每个vue页面中加入"><a href="#4、在每个vue页面中加入" class="headerlink" title="4、在每个vue页面中加入"></a>4、在每个vue页面中加入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div class=&quot;content content-box&quot;&gt;</span><br><span class="line">      &lt;div v-wechat-title=&quot;$route.meta.title&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h6 id="【参考】：-vue项目设置每个页面的title"><a href="#【参考】：-vue项目设置每个页面的title" class="headerlink" title="【参考】： vue项目设置每个页面的title"></a>【参考】： <a href="https://www.cnblogs.com/itgezhu/p/10817502.html">vue项目设置每个页面的title</a></h6><h4 id="Vue-js-ElementUI导航写法"><a href="#Vue-js-ElementUI导航写法" class="headerlink" title="Vue.js + ElementUI导航写法"></a>Vue.js + ElementUI导航写法</h4><h5 id="方法一（基本的）："><a href="#方法一（基本的）：" class="headerlink" title="方法一（基本的）："></a>方法一（基本的）：</h5><blockquote>
<p>ElementUI导航通常会和vue-router一起使用，所以与官网的示例的写法不太一样。具体写法如下:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">   &lt;el-menu-item v-for=&quot;item in items&quot; :index=&quot;item.src&quot;&gt;&#123;&#123;item.name&#125;&#125;            </span><br><span class="line">   &lt;/el-menu-item&gt;</span><br><span class="line"> &lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>

<p><strong>data里则是正常的数据即可：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        items:[</span><br><span class="line">          &#123;src:&#x27;/gameinfo/index&#x27;,name:&#x27;基本信息&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameversion/index&#x27;,name:&#x27;版本管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplatform/index&#x27;,name:&#x27;渠道管理&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameproduct/index&#x27;,name:&#x27;充值产品&#x27;&#125;,</span><br><span class="line">          &#123;src:&#x27;/gameplugin/index&#x27;,name:&#x27;插件管理&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>【参考】： <a href="https://blog.csdn.net/weixin_42488404/article/details/83414761">VUE elementUi导航写法</a></p>
<h5 id="方法二-加上图标的-："><a href="#方法二-加上图标的-：" class="headerlink" title="方法二(加上图标的)："></a>方法二(加上图标的)：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;$route.path&quot; class=&quot;el-menu-vertical-demo&quot; router&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;(item, i) in items&quot; :key=&quot;i&quot; :index=&quot;item.path&quot;&gt;</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot=&quot;title&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;          </span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>

<p><strong>data里面</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">items:[</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;基本信息&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-info&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameversion/index&#x27;,</span><br><span class="line">        title:&#x27;版本管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-version&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplatform/index&#x27;,</span><br><span class="line">        title:&#x27;渠道管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-channel&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameproduct/index&#x27;,</span><br><span class="line">        title:&#x27;充值产品&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-recharge&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameplugin/index&#x27;,</span><br><span class="line">        title:&#x27;插件管理&#x27;,</span><br><span class="line">        icon:&#x27;el-icon-cpu&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/package/index&#x27;,</span><br><span class="line">        title:&#x27;打包管理&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-packageKit&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/order/index&#x27;,</span><br><span class="line">        title:&#x27;订单查询&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-orderQuery&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        path:&#x27;/gameinfo/index&#x27;,</span><br><span class="line">        title:&#x27;切换至ios&#x27;,</span><br><span class="line">        icon:&#x27;iconfont icon-android&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目配置模块化路由</title>
    <url>/2020/05/25/vue%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E5%8C%96%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── src</span><br><span class="line">|    ├── assets         // 静态资源img、css、js</span><br><span class="line">|    ├── components     // 小组件</span><br><span class="line">|    ├── views          // 页面(视图)组件</span><br><span class="line">|    ├── App.vue        // 根组件</span><br><span class="line">|    ├── main.js        // 全局脚本文件（项目的入口）</span><br><span class="line">|    ├── router</span><br><span class="line">|    |    ├── index.js       // 路由脚本文件</span><br><span class="line">|    |    ├── modules       // 模块</span><br><span class="line">|    |    |    ├── user.js         // 用户模块</span><br><span class="line">|    |    |    ├── other.js        // 其他模块</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="模块文件的配置-以用户模块为例，其他模块也是一样的"><a href="#模块文件的配置-以用户模块为例，其他模块也是一样的" class="headerlink" title="模块文件的配置 (以用户模块为例，其他模块也是一样的)"></a>模块文件的配置 (以用户模块为例，其他模块也是一样的)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;login&#x27;,</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;登录页面&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/login/index.vue&#x27;) </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;register&#x27;,</span><br><span class="line">        path: &#x27;/register&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;注册页面&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/register/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &#x27;result&#x27;,</span><br><span class="line">        path: &#x27;/result&#x27;,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            title: &#x27;注册结果&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/account/register/result/index.vue&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">//因为这里配置了页面title，所以加meta属性，如果不需要配置，可以不加</span><br></pre></td></tr></table></figure>

<h3 id="index-js-router目录下的index-js"><a href="#index-js-router目录下的index-js" class="headerlink" title="index.js (router目录下的index.js)"></a>index.js (router目录下的index.js)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">import accoutRouter from &#x27;./modules/user&#x27;</span><br><span class="line">import otherRouter from &#x27;./modules/other&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">export default new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    ...accoutRouter,</span><br><span class="line">    ...otherRouter,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="根据路由动态修改title"><a href="#根据路由动态修改title" class="headerlink" title="根据路由动态修改title"></a>根据路由动态修改title</h3><p>在main中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 路由发生变化修改页面title */</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.title) &#123;</span><br><span class="line">      document.title = to.meta.title || &#x27;首页&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>main.js最终代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* 路由发生变化修改页面title */</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.title) &#123;</span><br><span class="line">      document.title = to.meta.title || &#x27;首页&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端功能代码参考</title>
    <url>/2021/11/24/web%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h4 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 生成随机密码按钮</span><br><span class="line">$(&quot;#generatePass&quot;).click(function() &#123;</span><br><span class="line">    function getRandom(min, max) &#123;</span><br><span class="line">        return Math.round(Math.random() * (max - min) + min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getCode() &#123;</span><br><span class="line">        let code = &#x27;&#x27;;</span><br><span class="line">        for (var i = 0; i &lt; 12; i++) &#123;</span><br><span class="line">            var type = getRandom(1, 3);</span><br><span class="line">            switch (type) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    code += String.fromCharCode(getRandom(48, 57));//数字</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    code += String.fromCharCode(getRandom(97, 122));//小写字母</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    code += String.fromCharCode(getRandom(65, 90));//大写字母</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 写入随机密码</span><br><span class="line">    $(&quot;#password&quot;).val(getCode());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="监听页面刷新事件方法"><a href="#监听页面刷新事件方法" class="headerlink" title="监听页面刷新事件方法"></a>监听页面刷新事件方法</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowEventHandlers/onbeforeunload">window.onbeforeunload</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听刷新页面事件方法（手动刷新）</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="处理接口请求函数"><a href="#处理接口请求函数" class="headerlink" title="处理接口请求函数"></a>处理接口请求函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 处理接口请求函数</span><br><span class="line">/*</span><br><span class="line">    url: 请求地址</span><br><span class="line">    data: 参数</span><br><span class="line">    callback: 回调函数</span><br><span class="line">*/</span><br><span class="line">function ajaxFun(url, data, callback) &#123;</span><br><span class="line">    $.post(url, data, function(res)&#123;  </span><br><span class="line">        callback(res);</span><br><span class="line">        // return false;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在html中显示JSON数据的方法"><a href="#在html中显示JSON数据的方法" class="headerlink" title="在html中显示JSON数据的方法"></a>在html中显示JSON数据的方法</h4><p>其实JSON.stringify本身就可以将JSON格式化，具体的用法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(res, null, 2);	// res是要JSON化的对象，2是spacing</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/web/553898.html">在html中显示JSON数据的方法</a></p>
<h4 id="时间戳转换格式"><a href="#时间戳转换格式" class="headerlink" title="时间戳转换格式"></a>时间戳转换格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//时间戳转换格式</span><br><span class="line">function formatDateTime(timeStamp) &#123; </span><br><span class="line">    var date = new Date();</span><br><span class="line">    date.setTime(timeStamp * 1000);</span><br><span class="line">    var y = date.getFullYear();    </span><br><span class="line">    var m = date.getMonth() + 1;    </span><br><span class="line">    m = m &lt; 10 ? (&#x27;0&#x27; + m) : m;    </span><br><span class="line">    var d = date.getDate();    </span><br><span class="line">    d = d &lt; 10 ? (&#x27;0&#x27; + d) : d;    </span><br><span class="line">    var h = date.getHours();  </span><br><span class="line">    h = h &lt; 10 ? (&#x27;0&#x27; + h) : h;  </span><br><span class="line">    var minute = date.getMinutes();  </span><br><span class="line">    var second = date.getSeconds();  </span><br><span class="line">    minute = minute &lt; 10 ? (&#x27;0&#x27; + minute) : minute;    </span><br><span class="line">    second = second &lt; 10 ? (&#x27;0&#x27; + second) : second;   </span><br><span class="line">    return y + &#x27;-&#x27; + m + &#x27;-&#x27; + d+&#x27; &#x27;+h+&#x27;:&#x27;+minute+&#x27;:&#x27;+second;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="复制功能"><a href="#复制功能" class="headerlink" title="复制功能"></a>复制功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var clipboard = new ClipboardJS(&quot;.copy-btn&quot;);</span><br><span class="line">clipboard.on(&#x27;success&#x27;, function(e) &#123;</span><br><span class="line">    layer.msg(&#x27;复制成功&#x27;, &#123;id: &#x27;clipboard&#x27;, time: 1000&#125;);</span><br><span class="line">    e.clearSelection();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="serialize获取的数据格式转换为json对象"><a href="#serialize获取的数据格式转换为json对象" class="headerlink" title="serialize获取的数据格式转换为json对象"></a>serialize获取的数据格式转换为json对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(formEl).serialize()                // 表单数据（筛选条件)</span><br><span class="line">    ,arr = decodeURIComponent(data).split(&quot;&amp;&quot;)  // 对数据拆分处理</span><br><span class="line">    ,formData = &#123;&#125;                              // 需要缓存的数据对象</span><br><span class="line"></span><br><span class="line">// 转为JSON对象</span><br><span class="line">arr.map(function(item) &#123;</span><br><span class="line">    formData[item.split(&#x27;=&#x27;)[0]] =  item.split(&#x27;=&#x27;)[1];</span><br><span class="line">&#125;)</span><br><span class="line">// 缓存formData</span><br><span class="line">setItem(&#x27;formData&#x27;, formData);</span><br></pre></td></tr></table></figure>

<h3 id="使用window-open-url-‘-self’-导出表格"><a href="#使用window-open-url-‘-self’-导出表格" class="headerlink" title="使用window.open(url, ‘_self’)导出表格"></a>使用window.open(url, ‘_self’)导出表格</h3><p>使用window.open(url, ‘_self’)导出表格后，页面会刷新，本来存放的localStorage会被清（因为刷新页面做了清空表格筛选条件和页码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听手动刷新页面事件(按浏览器的刷新按钮||使用js方法刷新页面)</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">    // 清空表格缓存的页码数据</span><br><span class="line">    removeItem(&quot;pages&quot;);</span><br><span class="line">    // 清空表格筛选条件缓存数据</span><br><span class="line">    removeItem(&quot;formData&quot;);</span><br><span class="line">    console.log(&#x27;刷新了页面&#x27;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>解决方法：使用sessionStorage临时缓存一份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在导出表格前，先临时拷贝localStorage缓存数据到sessionStorage</span><br><span class="line">// 使用window.open导出表格，会将localStorage中的formData清空</span><br><span class="line">sessionStorage.setItem(&#x27;formData&#x27;, JSON.stringify(getItem(&#x27;formData&#x27;)));</span><br><span class="line">sessionStorage.setItem(&#x27;pages&#x27;, JSON.stringify(getItem(&#x27;pages&#x27;)));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 导出表格后，从sessionStorage中拷贝数据再次缓存到locaStorage</span><br><span class="line">setItem(&#x27;formData&#x27;, sessionStorage.getItem(&#x27;formData&#x27;));</span><br><span class="line">setItem(&#x27;pages&#x27;, sessionStorage.getItem(&#x27;pages&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="通过url导出服务器端文件"><a href="#通过url导出服务器端文件" class="headerlink" title="通过url导出服务器端文件"></a>通过url导出服务器端文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// window.location.href= url;</span><br><span class="line">// 或</span><br><span class="line">window.open(url, &#x27;_self&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//搜索框-搜索事件</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;</span><br><span class="line">        //搜索内容</span><br><span class="line">        var txt = $(this).val().trim();</span><br><span class="line"></span><br><span class="line">        //显示的列表</span><br><span class="line">        var list = $(&quot;.layui-show .poplist li&quot;);</span><br><span class="line">        //匹配查询结果</span><br><span class="line">        for(var i  = 0; i&lt; list.length; i ++) &#123;</span><br><span class="line">            var item = $(list[i]).html();</span><br><span class="line">            if(item.indexOf(txt) &gt; -1) &#123;</span><br><span class="line">                $(list[i]).show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(list[i]).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>解决搜索框输入中文时，未输入完整词语就搜索的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//搜索框-搜索事件（解决中文输入法过程中，未输入完整就请求）</span><br><span class="line">var flag = true;</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">    flag = false;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">    flag = true;</span><br><span class="line">&#125;);</span><br><span class="line">// 解决</span><br><span class="line">$(&quot;.subtitle .iptform&quot;).on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">    if(flag) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="时间戳转换时间格式"><a href="#时间戳转换时间格式" class="headerlink" title="时间戳转换时间格式"></a>时间戳转换时间格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function formatDateTime(timeStamp) &#123; </span><br><span class="line">    var date = new Date();</span><br><span class="line">    date.setTime(timeStamp * 1000);</span><br><span class="line">    var y = date.getFullYear();    </span><br><span class="line">    var m = date.getMonth() + 1;    </span><br><span class="line">    m = m &lt; 10 ? (&#x27;0&#x27; + m) : m;    </span><br><span class="line">    var d = date.getDate();    </span><br><span class="line">    d = d &lt; 10 ? (&#x27;0&#x27; + d) : d;    </span><br><span class="line">    var h = date.getHours();  </span><br><span class="line">    h = h &lt; 10 ? (&#x27;0&#x27; + h) : h;  </span><br><span class="line">    var minute = date.getMinutes();  </span><br><span class="line">    var second = date.getSeconds();  </span><br><span class="line">    minute = minute &lt; 10 ? (&#x27;0&#x27; + minute) : minute;    </span><br><span class="line">    second = second &lt; 10 ? (&#x27;0&#x27; + second) : second;   </span><br><span class="line">    return y + &#x27;-&#x27; + m + &#x27;-&#x27; + d+&#x27; &#x27;+h+&#x27;:&#x27;+minute+&#x27;:&#x27;+second;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="滚动条css修改"><a href="#滚动条css修改" class="headerlink" title="滚动条css修改"></a>滚动条css修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 火狐浏览器</span><br><span class="line">.dashboard-container,</span><br><span class="line">.no-page-table .layui-table-main&#123;</span><br><span class="line">    // scrollbar-color: #0064a7 #8ea5b5;   // 如果有scrollbar-width才设置</span><br><span class="line">    scrollbar-width:none;				// 目前只有3个值可选：auto、thin、none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 针对谷歌浏览器、360浏览器、safari浏览器、Edge、Opera等</span><br><span class="line">.no-page-table ::-webkit-scrollbar,</span><br><span class="line">.right-content ::-webkit-scrollbar&#123;  /* 滚动条整体部分 */</span><br><span class="line">    width: 0;</span><br><span class="line">    margin-right:2px</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-button,</span><br><span class="line">.right-content ::-webkit-scrollbar-button &#123; /* 滚动条两端的按钮 */</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">// ::-webkit-scrollbar:horizontal针对横向滚动条，为了方便鼠标拖动，如果也设置为0，不好控制</span><br><span class="line">.no-page-table ::-webkit-scrollbar:horizontal,</span><br><span class="line">.right-content ::-webkit-scrollbar:horizontal &#123;   </span><br><span class="line">    height:6px;</span><br><span class="line">    margin-bottom:2px</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-track,</span><br><span class="line">.right-content ::-webkit-scrollbar-track  &#123;  /* 外层轨道 */</span><br><span class="line">    box-shadow: inset 0 0 5px transparent;</span><br><span class="line">    border-radius: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-track-piece,</span><br><span class="line">.right-content ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分 */</span><br><span class="line">    background-color: transparent;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-thumb,</span><br><span class="line">.right-content ::-webkit-scrollbar-thumb&#123;  /* 滑块 */</span><br><span class="line">    /* width:1px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    background: #CBCBCB; */</span><br><span class="line">    /*滚动条里面小方块*/</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);</span><br><span class="line">    background: rgba(0, 0, 0, 0.2);</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-corner,</span><br><span class="line">.right-content ::-webkit-scrollbar-corner &#123; /* 边角 */</span><br><span class="line">    width: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.no-page-table ::-webkit-scrollbar-thumb:hover,</span><br><span class="line">.right-content ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</span><br><span class="line">    background: #909090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要自定义设置其他样式，可根据上面的属性进行自定义设置</p>
<h4 id="如果设置滚动条宽度为0，可简略写："><a href="#如果设置滚动条宽度为0，可简略写：" class="headerlink" title="如果设置滚动条宽度为0，可简略写："></a>如果设置滚动条宽度为0，可简略写：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 火狐浏览器 */</span><br><span class="line">.dashboard-container,</span><br><span class="line">.no-page-table .layui-table-main&#123;</span><br><span class="line">    scrollbar-width:none;    // 这个值要设置给真实滚动内容的盒子，直接给html，不会全部生效</span><br><span class="line">&#125;</span><br><span class="line">// scrollbar-width的设置元素与谷歌浏览器::-webkit-scrollbar设置的元素可能不一样，要针对实际情况设置</span><br><span class="line"></span><br><span class="line">/* 滚动条整体部分 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar,</span><br><span class="line">.right-content ::-webkit-scrollbar&#123;  </span><br><span class="line">    width: 0;</span><br><span class="line">&#125;</span><br><span class="line">/* 滚动条两端的按钮 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar-button,</span><br><span class="line">.right-content ::-webkit-scrollbar-button &#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">/* 横向滚动条 */</span><br><span class="line">.no-page-table ::-webkit-scrollbar:horizontal,</span><br><span class="line">.right-content ::-webkit-scrollbar:horizontal &#123;</span><br><span class="line">    height:6px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Custom CSS Scrollbar for Firefox</a></p>
<p><a href="https://stackoverflow.com/questions/7357203/custom-scrollbars">Custom scrollbars</a></p>
<p><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Custom CSS Scrollbar for Firefox</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/scrollbar-color">scrollbar-color</a></p>
<p><a href="http://www.divcss5.com/css3-style/c57127.shtml">如何用CSS修改浏览器滚动条的样式</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/144204013">浏览器滚动条样式修改</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;  /* 滚动条整体部分 */</span><br><span class="line">     width:10px;</span><br><span class="line">     margin-right:2px</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-button &#123; /* 滚动条两端的按钮 */</span><br><span class="line">     width:10px;</span><br><span class="line">     background-color: yellow;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar:horizontal &#123;</span><br><span class="line">     height:10px;</span><br><span class="line">     margin-bottom:2px</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-track &#123;  /* 外层轨道 */</span><br><span class="line">     border-radius: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分 */</span><br><span class="line">     background-color: #333333;</span><br><span class="line">     border-radius: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-thumb &#123;  /* 滑块 */</span><br><span class="line">     width:10px;</span><br><span class="line">     border-radius: 5px;</span><br><span class="line">     background: #CBCBCB;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-corner &#123; /* 边角 */</span><br><span class="line">     width: 10px;</span><br><span class="line">     background-color: red;</span><br><span class="line"> &#125;</span><br><span class="line"> ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</span><br><span class="line">     background: #909090;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/cddcj/article/details/70332771">CSS设置滚动条样式</a></p>
<h4 id="回车事件"><a href="#回车事件" class="headerlink" title="回车事件"></a>回车事件</h4><p><a href="https://blog.csdn.net/SmallTeddy/article/details/107181087">Vue封装回车事件</a></p>
<p><a href="https://segmentfault.com/a/1190000013107871">JavaScript 深拷贝性能分析</a></p>
<p><a href="https://www.cnblogs.com/makai/p/11249986.html">深入 js 深拷贝对象</a></p>
<p>日常深拷贝，建议序列化反序列化方法。</p>
<p><a href="https://www.cnblogs.com/white0710/p/6686290.html">兼容各个浏览器的事件监听代码</a></p>
<p><a href="https://www.cnblogs.com/wangshucheng/p/11203097.html">将网址url中的参数转化为JSON格式的两种方法</a></p>
<h4 id="第一种：-for-循环方式"><a href="#第一种：-for-循环方式" class="headerlink" title="第一种： for 循环方式"></a>第一种： for 循环方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第一种： for循环</span><br><span class="line">var GetQueryJson1 = function () &#123;</span><br><span class="line">  let url = location.href; // 获取当前浏览器的URL</span><br><span class="line">  let arr = []; // 存储参数的数组</span><br><span class="line">  let res = &#123;&#125;; // 存储最终JSON结果对象</span><br><span class="line">  arr = url.split(&#x27;?&#x27;)[1].split(&#x27;&amp;&#x27;); // 获取浏览器地址栏中的参数</span><br><span class="line">   </span><br><span class="line">  for (let i = 0; i &lt; arr.length; i++) &#123; // 遍历参数</span><br><span class="line">    if (arr[i].indexOf(&#x27;=&#x27;) != -1)&#123; // 如果参数中有值</span><br><span class="line">      let str = arr[i].split(&#x27;=&#x27;);</span><br><span class="line">      res[str[0]] = str[1];</span><br><span class="line">    &#125; else &#123; // 如果参数中无值</span><br><span class="line">      res[arr[i]] = &#x27;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line">console.log(GetQueryJson1());</span><br></pre></td></tr></table></figure>

<h4 id="第二种：正则表达式方式"><a href="#第二种：正则表达式方式" class="headerlink" title="第二种：正则表达式方式"></a>第二种：正则表达式方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第二种：正则表达式</span><br><span class="line">var GetQueryJson2 = function () &#123;</span><br><span class="line">  let url = location.href; // 获取当前浏览器的URL</span><br><span class="line">  let param = &#123;&#125;; // 存储最终JSON结果对象</span><br><span class="line">  url.replace(/([^?&amp;]+)=([^?&amp;]+)/g, function(s, v, k) &#123;</span><br><span class="line">    param[v] = decodeURIComponent(k);//解析字符为中文</span><br><span class="line">    return k + &#x27;=&#x27; +  v;</span><br><span class="line">  &#125;);</span><br><span class="line">  return param;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">console.log(GetQueryJson2());</span><br></pre></td></tr></table></figure>

<h4 id="监听滚动条事件"><a href="#监听滚动条事件" class="headerlink" title="监听滚动条事件"></a>监听滚动条事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//监听内容区的滚动事件</span><br><span class="line">$(&quot;.dashboard-container&quot;).scroll(function() &#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    timer = setTimeout(function()&#123;</span><br><span class="line">        var hourDataTop = $(&quot;#hourData&quot;).offset().top;</span><br><span class="line">        var viewWidth = window.innerWidth;</span><br><span class="line">        var viewHeight = window.innerHeight;</span><br><span class="line"></span><br><span class="line">        // 内容滚动高度</span><br><span class="line">        var sctop = $(&quot;.dashboard-container&quot;).scrollTop(); </span><br><span class="line">        var isPC = IsPC();	// 是否PC端</span><br><span class="line">        var isHorizontal = viewWidth &gt; viewHeight;   // 是否横屏</span><br><span class="line"></span><br><span class="line">        // alert(isHorizontal);</span><br><span class="line"></span><br><span class="line">        var detailTablePos = isPC ? 153 : (isHorizontal ? 253 : 480);</span><br><span class="line">        var hourDataPos = isPC ? 90  : (isHorizontal ? 140 : 140);</span><br><span class="line">        console.log(hourDataTop);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(sctop &gt;= detailTablePos) &#123;</span><br><span class="line">            $(&quot;.detailTable .layui-table-header&quot;).addClass(&quot;fixed-table-header&quot;);</span><br><span class="line">            $(&quot;.hourData .layui-table-header&quot;).removeClass(&quot;fixed-table-header&quot;);</span><br><span class="line"></span><br><span class="line">            //获取右侧内容宽度</span><br><span class="line">            var w = $(&quot;.conditionWrap&quot;).width();</span><br><span class="line">            $(&quot;.detailTable .layui-table-header&quot;).css(&quot;width&quot;, w - 2);</span><br><span class="line">            $(&quot;.detailTable .layui-table-header&quot;).css(&quot;overflow&quot;, &quot;hidden&quot;);</span><br><span class="line"></span><br><span class="line">            //判断是否收起状态</span><br><span class="line">            var isFold = $(&quot;#main-layout&quot;).hasClass(&quot;hide-side&quot;);</span><br><span class="line">            if(isFold) &#123;</span><br><span class="line">                $(&quot;.detailTable .layui-table-header&quot;).addClass(&quot;fixed-table-header-left&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&quot;.detailTable .layui-table-header&quot;).removeClass(&quot;fixed-table-header-left&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            var total = getParams().total, this_table = &#x27;&#x27;, lay_id = &#x27;&#x27;;</span><br><span class="line">            switch(total) &#123;</span><br><span class="line">                case &#x27;0&#x27; :</span><br><span class="line">                    this_table = &#x27;.channelTable&#x27;;</span><br><span class="line">                    lay_id = &#x27;mainChannel&#x27;;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;1&#x27; :</span><br><span class="line">                    this_table = &#x27;.leaderTable&#x27;;</span><br><span class="line">                    lay_id = &#x27;leaderDetail&#x27;;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;2&#x27; :</span><br><span class="line">                    this_table = &#x27;.accountTable&#x27;;</span><br><span class="line">                    lay_id = &#x27;accountDetail&#x27;;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;3&#x27; :</span><br><span class="line">                    this_table = &#x27;.channelIdTable&#x27;;</span><br><span class="line">                    lay_id = &#x27;channelIdDetail&#x27;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;	</span><br><span class="line"></span><br><span class="line">            $(this_table + &quot; .layui-table-header&quot;).removeClass(&quot;fixed-table-header&quot;);</span><br><span class="line">            // 根据内容横向滚动多少，动态设置头部滚动多少</span><br><span class="line">            var left = $(&#x27;.layui-table-view[lay-id=&quot;&#x27; + lay_id + &#x27;&quot;] .layui-table-body&#x27;).scrollLeft();</span><br><span class="line">            $(this_table + &quot; .layui-table-header&quot;).scrollLeft(left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(hourDataTop &lt;= hourDataPos) &#123;</span><br><span class="line">            var w = $(&quot;.conditionWrap&quot;).width();</span><br><span class="line"></span><br><span class="line">            var hourW = $(&quot;.hourData .layui-table-header&quot;).width();</span><br><span class="line">            //判断是否收起状态</span><br><span class="line">            var isFold = $(&quot;#main-layout&quot;).hasClass(&quot;hide-side&quot;);</span><br><span class="line">            if(isFold) &#123;</span><br><span class="line">                $(&quot;.hourData .layui-table-header&quot;).css(&quot;width&quot;, hourW);</span><br><span class="line">                $(&quot;.hourData .layui-table-header&quot;).addClass(&quot;fixed-table-header-left&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&quot;.hourData .layui-table-header&quot;).css(&quot;width&quot;, hourW);</span><br><span class="line">                $(&quot;.hourData .layui-table-header&quot;).removeClass(&quot;fixed-table-header-left&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $(&quot;.hourData .layui-table-header&quot;).addClass(&quot;fixed-table-header&quot;);</span><br><span class="line">            $(&quot;.detailTable .layui-table-header&quot;).removeClass(&quot;fixed-table-header&quot;);</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            $(&quot;.hourData .layui-table-header&quot;).removeClass(&quot;fixed-table-header&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,150);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//左导航栏显示隐藏按钮</span><br><span class="line">$(&quot;#hideBtn&quot;).click(function() &#123;</span><br><span class="line">    $(&quot;.fixed-table-header&quot;).toggleClass(&quot;fixed-table-header-left&quot;);</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        var w = $(&quot;.conditionWrap&quot;).width();</span><br><span class="line">        $(&quot;.data-table .layui-table-header, [lay-id=&#x27;hourData&#x27;] .layui-table-box&quot;).css(&quot;width&quot;, w);</span><br><span class="line">    &#125;,400);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h4 id="URL参数改为json格式"><a href="#URL参数改为json格式" class="headerlink" title="URL参数改为json格式"></a>URL参数改为json格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(formEl).serialize()                // 表单数据（筛选条件)</span><br><span class="line">    ,arr = decodeURIComponent(data).split(&quot;&amp;&quot;)  // 对数据拆分处理</span><br><span class="line">    ,formData = &#123;&#125;                              // 需要缓存的数据对象</span><br><span class="line">// 转为JSON对象</span><br><span class="line">arr.map(function(item) &#123;</span><br><span class="line">    formData[item.split(&#x27;=&#x27;)[0]] =  item.split(&#x27;=&#x27;)[1];</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="大于等于0小于等于100正数的正则表达式是多少"><a href="#大于等于0小于等于100正数的正则表达式是多少" class="headerlink" title="大于等于0小于等于100正数的正则表达式是多少"></a>大于等于0小于等于100正数的正则表达式是多少</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以有小数：^100$|^(\d|[1-9]\d)(\.\d+)*$</span><br><span class="line">不可以有小数：^100$|^(\d|[1-9]\d)$</span><br></pre></td></tr></table></figure>

<h4 id="动态设置表格padding"><a href="#动态设置表格padding" class="headerlink" title="动态设置表格padding"></a>动态设置表格padding</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 动态设置表格padding</span><br><span class="line">function setTablePdRight() &#123;</span><br><span class="line">    // 判断是否有竖向滚动条</span><br><span class="line">    var maxH = $(&quot;.layui-table-body&quot;).height();</span><br><span class="line">    var tableH =  $(&quot;.main-layout-body&quot;).find(&quot;.layui-table-main .layui-table&quot;).height();</span><br><span class="line"></span><br><span class="line">    var pd_r = tableH &gt; maxH ? &#x27;17px&#x27; : &#x27;0&#x27;;</span><br><span class="line">    $(&quot;.layui-table-box &gt; .layui-table-header&quot;).css(&quot;padding-right&quot;, pd_r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模拟环形进度条"><a href="#模拟环形进度条" class="headerlink" title="模拟环形进度条"></a>模拟环形进度条</h4><p><code>circle-progress.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建模拟环形进度条</span><br><span class="line">// 导出文件过程中-网络请求卡顿/接口pending状态下的交互效果（假进度-只提供用户交互）</span><br><span class="line">var canvas = new EnableCircle(&#123;</span><br><span class="line">    id:&#x27;le-canvas&#x27;,		// 被渲染元素的canvas的ID</span><br><span class="line">    value: 96,			// 最大值</span><br><span class="line">    target: &#x27;primary&#x27;,</span><br><span class="line">    lineWidth: 10,		// 环形宽度</span><br><span class="line">    lineCap: &#x27;round&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为PC端"><a href="#判断是否为PC端" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为PC端</span><br><span class="line">function IsPC() &#123;</span><br><span class="line">	var userAgentInfo = navigator.userAgent;</span><br><span class="line">	var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">				&quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">				&quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">	var flag = true;</span><br><span class="line">	for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">		if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">			flag = false;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改url参数"><a href="#修改url参数" class="headerlink" title="修改url参数"></a>修改url参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function changeURLArg(url,arg,arg_val)&#123; </span><br><span class="line">    var pattern=arg+&#x27;=([^&amp;]*)&#x27;; </span><br><span class="line">    var replaceText=arg+&#x27;=&#x27;+arg_val; </span><br><span class="line">    if(url.match(pattern))&#123; </span><br><span class="line">        var tmp=&#x27;/(&#x27;+ arg+&#x27;=)([^&amp;]*)/gi&#x27;; </span><br><span class="line">        tmp=url.replace(eval(tmp),replaceText); </span><br><span class="line">        return tmp; </span><br><span class="line">    &#125;else&#123; </span><br><span class="line">        if(url.match(&#x27;[\?]&#x27;))&#123; </span><br><span class="line">            return url+&#x27;&amp;&#x27;+replaceText; </span><br><span class="line">        &#125;else&#123; </span><br><span class="line">            return url+&#x27;?&#x27;+replaceText; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return url+&#x27;\n&#x27;+arg+&#x27;\n&#x27;+arg_val; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变hash值"><a href="#改变hash值" class="headerlink" title="改变hash值"></a>改变hash值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//改变hash值</span><br><span class="line">function changeHash(key, val) &#123;</span><br><span class="line">    location.hash= location.hash.match(key+&quot;=([^&amp;]*)&quot;) ? location.hash.replace(eval(&#x27;/(&#x27;+ key+&#x27;=)([^&amp;]*)/gi&#x27;), key+&quot;=&quot;+val) : location.hash + &quot;&amp;&quot;+key+&quot;=&quot;+val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="监听手动刷新页面事件"><a href="#监听手动刷新页面事件" class="headerlink" title="监听手动刷新页面事件"></a>监听手动刷新页面事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 监听手动刷新页面事件(按浏览器的刷新按钮||使用js方法刷新页面)</span><br><span class="line">window.onbeforeunload = function(event)&#123;</span><br><span class="line">	// 清空缓存数据</span><br><span class="line">	localStorage.clear();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( empty($data[&#x27;name&#x27;]) ) $this-&gt;error(&#x27;姓名不能为空&#x27;);</span><br><span class="line">if ( mb_strlen($data[&#x27;name&#x27;]) &gt; 20 ) $this-&gt;error(&#x27;姓名请输入20位字符以内的中英文或数字&#x27;);</span><br><span class="line">if ( !preg_match(&quot;/^[A-Za-z0-9_\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+$/u&quot;, $data[&#x27;name&#x27;]) ) $this-&gt;error(&#x27;姓名请输入20位字符以内的中英文或数字&#x27;);</span><br><span class="line">if ( empty($data[&#x27;username&#x27;]) ) $this-&gt;error(&#x27;登录账号不能为空&#x27;);</span><br><span class="line">if ( !preg_match(&#x27;/^[A-Za-z0-9]&#123;1,15&#125;$/&#x27;, $data[&#x27;username&#x27;]) ) $this-&gt;error(&#x27;账号请输入15位字符以内的大小写字母或数字&#x27;);</span><br><span class="line">if ( empty($data[&#x27;password&#x27;]) ) $this-&gt;error(&#x27;登录密码不能为空&#x27;);</span><br><span class="line">if ( !preg_match(&#x27;/^(?![A-Z]+$)(?![a-z]+$)(?!\d+$)\S+$/&#x27;, $data[&#x27;password&#x27;]) ) $this-&gt;error(&#x27;密码请输入6-18位至少包含数字、大小字母中的两种&#x27;);</span><br><span class="line">if ( strlen($data[&#x27;password&#x27;]) &lt; 6 ||  strlen($data[&#x27;password&#x27;]) &gt; 18 ) $this-&gt;error(&#x27;密码请输入6-18位至少包含数字、大小字母中的两种&#x27;);</span><br><span class="line">if ( empty($data[&#x27;roleId&#x27;]) ) $this-&gt;error(&#x27;所属角色不能为空&#x27;);</span><br><span class="line">if ( AccountService::checkName(trim($data[&#x27;name&#x27;])) ) $this-&gt;error(&#x27;姓名已经存在，请重新定义&#x27;);</span><br><span class="line">if ( AccountService::checkUsername(trim($data[&#x27;username&#x27;])) ) $this-&gt;error(&#x27;请重新填写，该账号已存在&#x27;);</span><br></pre></td></tr></table></figure>

<p>遍历数组的指定值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 遍历对象数组的指定值</span><br><span class="line">function getObjectsVals(arr, key) &#123;</span><br><span class="line">    var objs = [], str = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    arr.forEach(function(value, index, array)&#123;</span><br><span class="line">        objs.push(array[index][key])</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    str = objs.join(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="阻止浏览器的默认行为"><a href="#阻止浏览器的默认行为" class="headerlink" title="阻止浏览器的默认行为"></a>阻止浏览器的默认行为</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function stopDefault(e) &#123; </span><br><span class="line">	if ( e &amp;&amp; e.preventDefault ) &#123;</span><br><span class="line">		e.preventDefault(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.w3cschool.cn/regexp/bxrq1pqf.html">正则表达式</a></p>
<p><a href="https://c.runoob.com/front-end/854/">正则表达式</a></p>
<h4 id="数组增删元素"><a href="#数组增删元素" class="headerlink" title="数组增删元素"></a>数组增删元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 数组添加或删除元素</span><br><span class="line">function filterArr(arr, item) &#123;</span><br><span class="line">    var _index;  //是否含有该选项</span><br><span class="line">    var html = &quot;&quot;;</span><br><span class="line">    _index = arr.indexOf(item);</span><br><span class="line">    if(_index &gt; -1) &#123;</span><br><span class="line">        arr.splice(_index, 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        arr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数组转字符串</span><br><span class="line">    html = arr.join(&#x27;,&#x27;);</span><br><span class="line"></span><br><span class="line">    return html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>工作笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>web移动端开发相关笔记</title>
    <url>/2018/06/18/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="移动端开发的资源与小技巧"><a href="#移动端开发的资源与小技巧" class="headerlink" title="移动端开发的资源与小技巧"></a><a href="https://github.com/jtyjty99999/mobileTech">移动端开发的资源与小技巧</a></h4><p><a href="https://www.quirksmode.org/mobile/">Mobile - Table of contents</a></p>
<p>[移动端](<a href="https://www.yuque.com/docs/share/27e13760-a250-4376-ab7e-072b8bae0b5b#">https://www.yuque.com/docs/share/27e13760-a250-4376-ab7e-072b8bae0b5b?#</a> 《移动端》)-语雀笔记</p>
<h4 id="网站收集"><a href="#网站收集" class="headerlink" title="网站收集"></a>网站收集</h4><table>
<thead>
<tr>
<th><a href="https://github.com/AlloyTeam/Mars">移动端Web解决方案</a></th>
<th><a href="https://github.com/hoosin/mobile-web-favorites">移动前端开发收藏夹</a></th>
<th><a href="https://www.oschina.net/translate/mobile-app-optimization-and-performance">优化移动体验的HTML5技巧</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://ww1.sinaimg.cn/bmiddle/c2c57f68jw1e4fh7dmw12j20fi2w6qe1.jpg">移动端手势表</a></td>
<td><a href="http://mobilehtml5.org/">Mobile HTML5</a>—html5移动端兼容性速查</td>
<td><a href="https://pixensity.com/">Pixel Density Display Listing</a>—几乎所有设备的屏幕尺寸与像素密度表</td>
</tr>
<tr>
<td><a href="https://screensiz.es/phone">Screen Sizes</a>—移动设备参数表</td>
<td><a href="https://ivomynttinen.com/blog/ios-design-guidelines">The iOS Design Guidelines</a>—ios端移动设备参数速查</td>
<td><a href="http://wileam.com/iphone-6-screen-cn/">iPhone 6 屏幕揭秘</a></td>
</tr>
<tr>
<td><a href="http://detectmobilebrowsers.com/">移动设备适配库2</a></td>
<td><a href="https://demos.jquerymobile.com/1.4.3/">jQuery Mobile Demos</a></td>
<td><a href="https://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto源码注释</a></td>
</tr>
<tr>
<td><a href="http://www.imooc.com/article/1115">移动端web开发技巧</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="移动端H5页面适配问题总结"><a href="#移动端H5页面适配问题总结" class="headerlink" title="移动端H5页面适配问题总结"></a>移动端H5页面适配问题总结</h4><h5 id="移动端H5页面使用rem做适配"><a href="#移动端H5页面使用rem做适配" class="headerlink" title="移动端H5页面使用rem做适配"></a>移动端H5页面使用rem做适配</h5><ol>
<li><p><code>如果H5页面不需要放在App内做混合App开发</code>，可以使用<code>vw</code>做适配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br><span class="line">// 设计稿是用iPhone6的尺寸设计，设计稿多少px就写多少rem</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>如果H5页面需要放在App内做混合App开发</code>，不需要兼容低版本的Android手机(9.0及以下)</p>
<ol>
<li><p>使用<code>vw</code>的情况下，<code>不需要兼容Android低版本（≤10.0）手机 </code>   。可以直接使用<code>vw</code>做适配</p>
</li>
<li><p>使用<code>vw</code>的情况下，<code>需要兼容Android低版本（≤10.0）手机，不需要兼容9.0及以下 </code>  的做法</p>
<p>原因：在Android手机低版本（≤10.0）的<code>webview</code>中，会出现<code>h5页面放大的情况</code>。低版本的webview获取错了字段，默认是8的，导致字体放大了8倍</p>
<blockquote>
<p>在在Android手机低版本（≤9.0）的手机自带浏览器中是显示正常的</p>
</blockquote>
<p>解决方法：在Android客户端加上以下两行代码，对webview进行相应的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mWebView.getSettings().setMinimumFontSize(1);</span><br><span class="line">mWebView.getSettings().setMinimumLogicalFontSize(1);</span><br></pre></td></tr></table></figure>

<p>参考博客：<a href="https://www.codenong.com/41179357/">关于html：Android Webview Rem单元可将框的大小缩放</a></p>
</li>
</ol>
</li>
<li><p><code>如果H5页面需要放在App内做混合App开发</code>，且需要兼容低版本的安卓手机(9.0及以下)</p>
<p>使用<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>做适配</p>
<p><strong>使用<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>做适配的注意事项</strong></p>
<ol>
<li><p>要在head中引入</p>
</li>
<li><p>要在样式表前引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/Rem/mobile-util.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：页面不写meta[name=&quot;viewport&quot;]标签,代码自动判断插入</code></p>
</li>
<li><p>iPhone6中，<code>data-dpr=&quot;2&quot;</code>，html的字体<code>style=&quot;font-size: 46.875px;&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">26px——&gt;0.55rem</span><br><span class="line"></span><br><span class="line">// 使用26px除以46.875就是0.55rem（设计稿中，多少px，除以46.875就是多少rem）</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>如果需要适配横屏</code>，修改<code>mobile-util.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 横竖屏字体设置</span><br><span class="line">if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">    // 横屏</span><br><span class="line">    docEl.style.fontSize = rem/2 + &#x27;px&#x27;;   // 将字体缩小一倍</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 竖屏</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// =========在文件最后将mobileUtil.fixScreen();修改为兼容横竖屏变化=========</span><br><span class="line">// 兼容横竖屏切换</span><br><span class="line">window.addEventListener(&quot;orientationchange&quot;, function()&#123;</span><br><span class="line">    mobileUtil.fixScreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br></pre></td></tr></table></figure>

<h4 id="使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）"><a href="#使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）" class="headerlink" title="使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）"></a>使用vw，rem做移动端适配–在低版本的安卓手机，页面样式显示错误（放很大）</h4><p>webview设置可以解决此错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mWebView.getSettings().setMinimumFontSize(1);</span><br><span class="line">mWebView.getSettings().setMinimumLogicalFontSize(1);</span><br></pre></td></tr></table></figure>

<p>Android Webview的rem单位会放大</p>
<p>参考：<a href="https://www.codenong.com/41179357/">关于html：Android Webview Rem单元可将框的大小缩放</a></p>
<h4 id="移动端meta头一些常用的属性"><a href="#移动端meta头一些常用的属性" class="headerlink" title="移动端meta头一些常用的属性"></a>移动端meta头一些常用的属性</h4><h5 id="1-meta标签"><a href="#1-meta标签" class="headerlink" title="1.meta标签"></a>1.meta标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1，shrink-to-fit=no, viewport-fit=cover&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>width=device-width：设备宽度；</li>
<li>user-scalable=no：是否可以缩放，可以设置为no或者0；</li>
<li>initial-scale=1.0：初始缩放比例</li>
<li>maximum-scale=1.0 ：最大缩放比例 </li>
<li>minimum-scale=1：最小缩放比例</li>
<li>shrink-to-fit=no ： 解决ios9中的bug 识别屏幕宽度</li>
<li>viewport-fit=cover： 解决苹果x 刘海的问题</li>
</ul>
<h5 id="2-针对苹果手机："><a href="#2-针对苹果手机：" class="headerlink" title="2.针对苹果手机："></a>2.针对苹果手机：</h5><p>可以把页面以app的方式添加到桌面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>如果你把app添加到桌面，改状态条的颜色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>允许全屏展示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=yes name=apple-touch-fullscreen&gt;</span><br></pre></td></tr></table></figure>

<p>禁止识别数字为电话,email：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-不常用"><a href="#3-不常用" class="headerlink" title="3.不常用"></a>3.不常用</h5><p>应用信息，保留系统的历史记录，运动效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=App-Config content=&quot;fullscreen=yes,useHistoryState=yes,transition=yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>max-age=180 响应时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;max-age=180&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>解决 dns缓存问题——好处：访问快</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h5><p>强制让360浏览器用chrome内核渲染页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>尽量用IE最新的模式渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>微软的老式浏览器 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>uc强制竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ强制竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>UC强制全屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ强制全屏 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>UC应用模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>QQ应用模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Rem-mobile-util-js的使用"><a href="#Rem-mobile-util-js的使用" class="headerlink" title="Rem-mobile-util.js的使用"></a>Rem-<a href="https://github.com/re54k/mobileweb-utilities/blob/master/util/mobile-util.js">mobile-util.js</a>的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/Rem/mobile-util.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：页面不写meta[name=&quot;viewport&quot;]标签,代码自动判断插入</code></p>
<h5 id="mobile-util-js—做横竖屏适配"><a href="#mobile-util-js—做横竖屏适配" class="headerlink" title="mobile-util.js—做横竖屏适配"></a>mobile-util.js—做横竖屏适配</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 横竖屏字体设置</span><br><span class="line">if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">    // 横屏</span><br><span class="line">    docEl.style.fontSize = rem/2 + &#x27;px&#x27;;   // 将字体缩小一倍</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 竖屏</span><br><span class="line">    docEl.style.fontSize = rem + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 兼容横竖屏切换</span><br><span class="line">window.addEventListener(&quot;orientationchange&quot;, function()&#123;</span><br><span class="line">    mobileUtil.fixScreen();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="移动端横竖屏适配"><a href="#移动端横竖屏适配" class="headerlink" title="移动端横竖屏适配"></a>移动端横竖屏适配</h4><p>摘自：<a href="https://www.jb51.net/article/256157.htm">JavaScript实现移动端横竖屏检测</a>， 仅用于学习</p>
<h5 id="一、HTML方法检测"><a href="#一、HTML方法检测" class="headerlink" title="一、HTML方法检测"></a>一、HTML方法检测</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引用竖屏的CSS文件 portrait.css --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot; rel=&quot;external nofollow&quot;  &gt;</span><br><span class="line">   </span><br><span class="line">  &lt;!-- 引用横屏的CSS文件 landscape.css --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot; href=&quot;landscape.css&quot; rel=&quot;external nofollow&quot;  &gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="二、CSS方法检测"><a href="#二、CSS方法检测" class="headerlink" title="二、CSS方法检测"></a>二、CSS方法检测</h5><p>css中通过媒体查询方法来判断是横屏还是竖屏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 竖屏 */</span><br><span class="line">@media screen and (orientation:portrait) &#123;</span><br><span class="line">  /* 这里写竖屏样式 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 横屏 */</span><br><span class="line">@media screen and (orientation:landscape) &#123;</span><br><span class="line">  /* 这里写横屏样式 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三、JS方法检测"><a href="#三、JS方法检测" class="headerlink" title="三、JS方法检测"></a>三、JS方法检测</h5><p><strong>【1】orientationChange事件</strong></p>
<p>苹果公司为移动 Safari中添加了 orientationchange 事件，orientationchange 事件在设备的纵横方向改变时触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&quot;orientationchange&quot;,function()&#123;</span><br><span class="line">    alert(window.orientation);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<p><strong>【2】orientation属性</strong></p>
<blockquote>
<p>window.orientation 获取手机的横竖的状态，window.orientation 属性中有 4个值：0和180的时候为竖屏（180为倒过来的竖屏），90和-90时为横屏（-90为倒过来的横屏）</p>
<p>0 表示肖像模式，90 表示向左旋转的横向模式（“主屏幕”按钮在右侧），-90 表示向右旋转的横向模 式（“主屏幕”按钮在左侧），180 表示 iPhone头朝下；但这种模式至今 尚未得到支持。如图展示了 window.orientation 的每个值的含义。</p>
</blockquote>
<p><strong>【3】案例</strong></p>
<p>检测用户当前手机横竖屏状态，如果处于横屏状态，提示用户 “为了更好的观看体验，请在竖屏下浏览”，否则不提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #box &#123;</span><br><span class="line">      position: fixed;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">      padding: 50px;</span><br><span class="line">      display: none;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background: rgba(0, 0, 0, .5);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    #box span &#123;</span><br><span class="line">      margin: auto;</span><br><span class="line">      font: 20px/40px &quot;宋体&quot;;</span><br><span class="line">      color: #fff;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;box&quot;&gt;&lt;span&gt;为了更好的观看体验，请在竖屏下浏览&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.addEventListener(&quot;orientationchange&quot;, toOrientation);</span><br><span class="line">    function toOrientation() &#123;</span><br><span class="line">      let box = document.querySelector(&quot;#box&quot;);</span><br><span class="line">      if (window.orientation == 90 || window.orientation == -90) &#123;</span><br><span class="line">        // 横屏-显示提示</span><br><span class="line">        box.style.display = &quot;flex&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 横屏-隐藏提示</span><br><span class="line">        box.style.display = &quot;none&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="移动端VM适配-横竖屏适配"><a href="#移动端VM适配-横竖屏适配" class="headerlink" title="移动端VM适配-横竖屏适配"></a>移动端VM适配-横竖屏适配</h4><ol>
<li><code>html，body</code>的字体设置<code>font-size: 0.13333333vw; </code></li>
<li>元素<code>多少px</code>，就写<code>多少rem</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body&#123;</span><br><span class="line">    font-size: 0.13333333vw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 横屏适配</span><br><span class="line">@media screen and (orientation: landscape)&#123;</span><br><span class="line">    html, body&#123;</span><br><span class="line">        font-size: 0.065vw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header&#123;</span><br><span class="line">	font-size: 16rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="移动端经验总结"><a href="#移动端经验总结" class="headerlink" title="移动端经验总结"></a>移动端经验总结</h2><h4 id="媒体查询常用样式表"><a href="#媒体查询常用样式表" class="headerlink" title="媒体查询常用样式表"></a>媒体查询常用样式表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt;    // 竖放加载</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot;href=&quot;landscape.css&quot;&gt;   // 横放加载</span><br><span class="line"></span><br><span class="line">// 竖屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:portrait)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">    #landscape &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 横屏时使用的样式</span><br><span class="line">&lt;style media=&quot;all and (orientation:landscape)&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">    #portrait &#123; display: none; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分链接"><a href="#分链接" class="headerlink" title="分链接"></a>分链接</h4><p><a href="https://www.icloud.com/keynote/000DIf8ISxFcuxka4YozKLaOg#Mobile_Webpage_%E5%A6%82%E4%BD%95%E8%87%AA%E9%80%82%E5%BA%94%E5%B1%8F%E5%B9%95_2">如何自适应网页屏幕</a></p>
<p>配套的解决方案（设备判断等）—<a href="https://github.com/unbug/generator-webappstarter/blob/master/app/templates/app/src/util/MetaHandler.js">generator-webappstarter</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ua = navigator.userAgent,</span><br><span class="line">  android = ua.match(/(Android);?[\s\/]+([\d.]+)?/),</span><br><span class="line">  ipad = ua.match(/(iPad).*OS\s([\d_]+)/),</span><br><span class="line">  ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/),</span><br><span class="line">  iphone = !ipad &amp;&amp; ua.match(/(iPhone\sOS)\s([\d_]+)/),</span><br><span class="line">  os = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">if (android) os.android = true, os.version = android[2];</span><br><span class="line">if (iphone &amp;&amp; !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, &#x27;.&#x27;)</span><br><span class="line">if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, &#x27;.&#x27;)</span><br><span class="line">if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, &#x27;.&#x27;) : null;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/imweb/mobile/issues/2">Mobile开发经验沉淀</a>—bug处理</p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/8">移动Web单页应用开发实践——页面结构化</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/1">移动Web产品前端开发口诀——“快”</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/7">移动Web开发，4行代码检测浏览器是否支持position:fixed</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/4">使用border-image实现类似iOS7的1px底边</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/2">移动端web页面使用position:fixed问题总结</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/11">移动Web开发实践——解决position:fixed自适应BUG</a></p>
<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/19">移动手机浏览器m3u8格式视频流播放支持程度测试</a></p>
<h4 id="指尖上的js系列"><a href="#指尖上的js系列" class="headerlink" title="指尖上的js系列"></a>指尖上的js系列</h4><p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html">指尖下的js ——多触式web前端开发之一：对于Touch的处理</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html">指尖下的js ——多触式web前端开发之二：处理简单手势</a></p>
<p><a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html">指尖下的js —— 多触式web前端开发之三：处理复杂手势</a></p>
<h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><h5 id="常用meta整理"><a href="#常用meta整理" class="headerlink" title="常用meta整理"></a><a href="https://segmentfault.com/a/1190000002407912">常用meta整理</a></h5><p>meta标签，这些meta标签在开发webapp时起到非常重要的作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0&quot; name=&quot;viewport&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt;</span><br><span class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览； 尤其要注意的是content里多个属性的设置一定要用分号+空格来隔开，如果不规范将不会起作用。</p>
<p>注意根据 <a href="http://www.weibo.com/avajayam">public_00</a> 提供的资料补充，content 使用分号作为分隔，在老的浏览器是支持的，但不是规范写法。</p>
<p>规范的写法应该是使用逗号分隔，参考 <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html">Safari HTML Reference - Supported Meta Tags</a> 和 <a href="http://developer.android.com/guide/webapps/targeting.html">Android - Supporting Different Screens in Web Apps</a></p>
</blockquote>
<blockquote>
<p>第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览； 第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式； 第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码</p>
<p>在设置了initial-scale=1 之后，我们终于可以以1:1 的比例进行页面设计了。 关于viewport，还有一个很重要的概念是：iphone 的safari 浏览器完全没有滚动条，而且不是简单的“隐藏滚动条”， 是根本没有这个功能。iphone 的safari 浏览器实际上从一开始就完整显示了这个网页，然后用viewport 查看其中的一部分。 当你用手指拖动时，其实拖的不是页面，而是viewport。浏览器行为的改变不止是滚动条，交互事件也跟普通桌面不一样。 (请参考：指尖的下JS 系列文章)</p>
<p>更详细的 viewport 相关的知识也可以参考</p>
</blockquote>
<ul>
<li>width - viewport的宽度</li>
<li>height - viewport的高度</li>
<li>initial-scale - 初始的缩放比例</li>
<li>minimum-scale - 允许用户缩放到的最小比例</li>
<li>maximum-scale - 允许用户缩放到的最大比例</li>
<li>user-scalable - 用户是否可以手动缩放</li>
</ul>
<h4 id="适配的相关文章"><a href="#适配的相关文章" class="headerlink" title="适配的相关文章"></a>适配的相关文章</h4><p>[移动端高清、多屏适配方案](<a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme">http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme</a> 3041)</p>
<p><a href="http://www.html-js.com/article/2402">手机淘宝的flexible设计与实现</a></p>
<h4 id="移动开发事件"><a href="#移动开发事件" class="headerlink" title="移动开发事件"></a>移动开发事件</h4><p><a href="http://wo.poco.cn/manson/post/id/268780">手机浏览器常用手势动作监听封装</a></p>
<h4 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h4><ul>
<li>touchstart //当手指接触屏幕时触发</li>
<li>touchmove //当已经接触屏幕的手指开始移动后触发</li>
<li>touchend //当手指离开屏幕时触发</li>
<li>touchcancel</li>
</ul>
<h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><ul>
<li>gesturestart //当两个手指接触屏幕时触发</li>
<li>gesturechange //当两个手指接触屏幕后开始移动时触发</li>
<li>gestureend</li>
</ul>
<h4 id="屏幕旋转事件"><a href="#屏幕旋转事件" class="headerlink" title="屏幕旋转事件"></a>屏幕旋转事件</h4><ul>
<li>onorientationchange</li>
</ul>
<h4 id="检测触摸屏幕的手指何时改变方向"><a href="#检测触摸屏幕的手指何时改变方向" class="headerlink" title="检测触摸屏幕的手指何时改变方向"></a>检测触摸屏幕的手指何时改变方向</h4><ul>
<li>orientationchange</li>
</ul>
<h4 id="touch事件支持的相关属性"><a href="#touch事件支持的相关属性" class="headerlink" title="touch事件支持的相关属性"></a>touch事件支持的相关属性</h4><ul>
<li>touches</li>
<li>targetTouches</li>
<li>changedTouches</li>
<li>clientX　　　　// X coordinate of touch relative to the viewport (excludes scroll offset)</li>
<li>clientY　　　　// Y coordinate of touch relative to the viewport (excludes scroll offset)</li>
<li>screenX　　　 // Relative to the screen</li>
<li>screenY 　　 // Relative to the screen</li>
<li>pageX　　 　　// Relative to the full page (includes scrolling)</li>
<li>pageY　　　　 // Relative to the full page (includes scrolling)</li>
<li>target　　　　 // Node the touch event originated from</li>
<li>identifier　　 // An identifying number, unique to each touch event</li>
<li>屏幕旋转事件：onorientationchange</li>
</ul>
<h4 id="判断屏幕是否旋转"><a href="#判断屏幕是否旋转" class="headerlink" title="判断屏幕是否旋转"></a>判断屏幕是否旋转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function orientationChange() &#123;</span><br><span class="line">    switch(window.orientation) &#123;</span><br><span class="line">      case 0:</span><br><span class="line">            alert(&quot;肖像模式 0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case -90:</span><br><span class="line">            alert(&quot;左旋 -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case 90:</span><br><span class="line">            alert(&quot;右旋 90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">            break;</span><br><span class="line">      case 180:</span><br><span class="line">          alert(&quot;风景模式 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);</span><br><span class="line">          break;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">    orientationChange();</span><br><span class="line">    window.onorientationchange = orientationChange;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="JS-单击延迟"><a href="#JS-单击延迟" class="headerlink" title="JS 单击延迟"></a>JS 单击延迟</h4><p>click 事件因为要等待单击确认，会有 300ms 的延迟，体验并不是很好。</p>
<p>开发者大多数会使用封装的 tap 事件来代替click 事件，所谓的 tap 事件由 touchstart 事件 + touchmove 判断 + touchend 事件封装组成。</p>
<p><a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE">Creating Fast Buttons for Mobile Web Applications</a></p>
<p><a href="http://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari">Eliminate 300ms delay on click events in mobile Safari</a></p>
<h4 id="WebKit-CSS"><a href="#WebKit-CSS" class="headerlink" title="WebKit CSS"></a>WebKit CSS</h4><p><a href="http://ued.ctrip.com/blog/wp-content/webkitcss/index.html">携程 UED 整理的 Webkit CSS 文档</a> ，全面、方便查询，下面为常用属性。</p>
<p>①“盒模型”的具体描述性质的包围盒块内容，包括边界，填充等等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-border-bottom-left-radius: radius;</span><br><span class="line">-webkit-border-top-left-radius: horizontal_radius vertical_radius;</span><br><span class="line">-webkit-border-radius: radius;      //容器圆角</span><br><span class="line">-webkit-box-sizing: sizing_model; 边框常量值：border-box/content-box</span><br><span class="line">-webkit-box-shadow: hoff voff blur color; //容器阴影（参数分别为：水平X 方向偏移量；垂直Y 方向偏移量；高斯模糊半径值；阴影颜色值）</span><br><span class="line">-webkit-margin-bottom-collapse: collapse_behavior; 常量值：collapse/discard/separate</span><br><span class="line">-webkit-margin-start: width;</span><br><span class="line">-webkit-padding-start: width;</span><br><span class="line">-webkit-border-image: url(borderimg.gif) 25 25 25 25 round/stretch round/stretch;</span><br><span class="line">-webkit-appearance: push-button;   //内置的CSS 表现，暂时只支持push-button</span><br></pre></td></tr></table></figure>

<p>②“视觉格式化模型”描述性质，确定了位置和大小的块元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: rtl</span><br><span class="line">unicode-bidi: bidi-override; 常量：bidi-override/embed/normal</span><br></pre></td></tr></table></figure>

<p>③“视觉效果”描述属性，调整的视觉效果块内容，包括溢出行为，调整行为，能见度，动画，变换，和过渡。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clip: rect(10px, 5px, 10px, 5px)</span><br><span class="line">resize: auto; 常量：auto/both/horizontal/none/vertical</span><br><span class="line">visibility: visible; 常量: collapse/hidden/visible</span><br><span class="line">-webkit-transition: opacity 1s linear; 动画效果 ease/linear/ease-in/ease-out/ease-in-out</span><br><span class="line">-webkit-backface-visibility: visibler; 常量：visible(默认值)/hidden</span><br><span class="line">-webkit-box-reflect: right 1px; 镜向反转</span><br><span class="line">-webkit-box-reflect: below 4px -webkit-gradient(linear, left top, left bottom,</span><br><span class="line">from(transparent), color-stop(0.5, transparent), to(white));</span><br><span class="line">-webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));;   //CSS 遮罩/蒙板效果</span><br><span class="line">-webkit-mask-attachment: fixed; 常量：fixed/scroll</span><br><span class="line">-webkit-perspective: value; 常量：none(默认)</span><br><span class="line">-webkit-perspective-origin: left top;</span><br><span class="line">-webkit-transform: rotate(5deg);</span><br><span class="line">-webkit-transform-style: preserve-3d; 常量：flat/preserve-3d; (2D 与3D)</span><br></pre></td></tr></table></figure>

<p>④“生成的内容，自动编号，并列出”描述属性，允许您更改内容的一个组成部分，创建自动编号的章节和标题，和操纵的风格清单的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content: “Item” counter(section) ” “;</span><br><span class="line">This resets the counter.</span><br><span class="line">First section</span><br><span class="line">&gt;two section</span><br><span class="line">three section</span><br><span class="line">counter-increment: section 1;</span><br><span class="line">counter-reset: section;</span><br></pre></td></tr></table></figure>

<p>⑤“分页媒体”描述性能与外观的属性，控制印刷版本的网页，如分页符的行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page-break-after: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-before: auto; 常量：always/auto/avoid/left/right</span><br><span class="line">page-break-inside: auto; 常量：auto/avoid</span><br></pre></td></tr></table></figure>

<p>⑥“颜色和背景”描述属性控制背景下的块级元素和颜色的文本内容的组成部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-background-clip: content; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-origin: padding; 常量：border/content/padding/text</span><br><span class="line">-webkit-background-size: 55px; 常量：length/length_x/length_y</span><br></pre></td></tr></table></figure>

<p>⑦ “字型”的具体描述性质的文字字体的选择范围内的一个因素。报告还描述属性用于下载字体定义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unicode-range: U+00-FF, U+980-9FF;</span><br></pre></td></tr></table></figure>

<p>⑧“文本”描述属性的特定文字样式，间距和自动滚屏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-shadow: #00FFFC 10px 10px 5px;</span><br><span class="line">text-transform: capitalize; 常量：capitalize/lowercase/none/uppercase</span><br><span class="line">word-wrap: break-word; 常量：break-word/normal</span><br><span class="line">-webkit-marquee: right large infinite normal 10s; 常量：direction(方向) increment(迭代次数) repetition(重复) style(样式) speed(速度);</span><br><span class="line">-webkit-marquee-direction: ahead/auto/backwards/down/forwards/left/reverse/right/up</span><br><span class="line">-webkit-marquee-incrementt: 1-n/infinite(无穷次)</span><br><span class="line">-webkit-marquee-speed: fast/normal/slow</span><br><span class="line">-webkit-marquee-style: alternate/none/scroll/slide</span><br><span class="line">-webkit-text-fill-color: #ff6600; 常量：capitalize, lowercase, none, uppercase</span><br><span class="line">-webkit-text-security: circle; 常量：circle/disc/none/square</span><br><span class="line">-webkit-text-size-adjust: none; 常量:auto/none;</span><br><span class="line">-webkit-text-stroke: 15px #fff;</span><br><span class="line">-webkit-line-break: after-white-space; 常量：normal/after-white-space</span><br><span class="line">-webkit-appearance: caps-lock-indicator;</span><br><span class="line">-webkit-nbsp-mode: space; 常量： normal/space</span><br><span class="line">-webkit-rtl-ordering: logical; 常量：visual/logical</span><br><span class="line">-webkit-user-drag: element; 常量：element/auto/none</span><br><span class="line">-webkit-user-modify: read- only; 常量：read-write-plaintext-only/read-write/read-only</span><br><span class="line">-webkit-user-select: text; 常量：text/auto/none</span><br></pre></td></tr></table></figure>

<p>⑨“表格”描述的布局和设计性能表的具体内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-border-horizontal-spacing: 2px;</span><br><span class="line">-webkit-border-vertical-spacing: 2px;</span><br><span class="line">-webkit-column-break-after: right; 常量：always/auto/avoid/left/right</span><br><span class="line">-webkit-column-break-before: right; 常量：always/auto/avoid/left/right</span><br><span class="line">–webkit-column-break-inside: logical; 常量：avoid/auto</span><br><span class="line">-webkit-column-count: 3; //分栏</span><br><span class="line">-webkit-column-rule: 1px solid #fff;</span><br><span class="line">style:dashed,dotted,double,groove,hidden,inset,none,outset,ridge,solid</span><br></pre></td></tr></table></figure>

<p>⑩“用户界面”描述属性，涉及到用户界面元素在浏览器中，如滚动文字区，滚动条，等等。报告还描述属性，范围以外的网页内容，如光标的标注样式和显示当您按住触摸触摸 目标，如在iPhone上的链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-box-align: baseline,center,end,start,stretch 常量：baseline/center/end/start/stretch</span><br><span class="line">-webkit-box-direction: normal;常量：normal/reverse</span><br><span class="line">-webkit-box-flex: flex_valuet</span><br><span class="line">-webkit-box-flex-group: group_number</span><br><span class="line">-webkit-box-lines: multiple; 常量：multiple/single</span><br><span class="line">-webkit-box-ordinal-group: group_number</span><br><span class="line">-webkit-box-orient: block-axis; 常量：block-axis/horizontal/inline-axis/vertical/orientation</span><br><span class="line">–webkit-box-pack: alignment; 常量：center/end/justify/start</span><br></pre></td></tr></table></figure>

<p>动画过渡 这是 Webkit 中最具创新力的特性：使用过渡函数定义动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-animation: title infinite ease-in-out 3s;</span><br><span class="line">animation 有这几个属性：</span><br><span class="line">-webkit-animation-name： //属性名，就是我们定义的keyframes</span><br><span class="line">-webkit-animation-duration：3s //持续时间</span><br><span class="line">-webkit-animation-timing-function： //过渡类型：ease/ linear(线性) /ease-in(慢到快)/ease-out(快到慢) /ease-in-out(慢到快再到慢) /cubic-bezier</span><br><span class="line">-webkit-animation-delay：10ms //动画延迟(默认0)</span><br><span class="line">-webkit-animation-iteration-count： //循环次数(默认1)，infinite 为无限</span><br><span class="line">-webkit-animation-direction： //动画方式：normal(默认 正向播放)； alternate(交替方向，第偶数次正向播放，第奇数次反向播放)</span><br></pre></td></tr></table></figure>

<p>这些同样是可以简写的。但真正让我觉的很爽的是keyframes，它能定义一个动画的转变过程供调用，过程为0%到100%或from(0%)到to(100%)。简单点说，只要你有想法，你想让元素在这个过程中以什么样的方式改变都是很简单的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform: 类型（缩放scale/旋转rotate/倾斜skew/位移translate）</span><br><span class="line">scale(num,num) 放大倍率。scaleX 和 scaleY(3)，可以简写为：scale(* , *)</span><br><span class="line">rotate(*deg) 转动角度。rotateX 和 rotateY，可以简写为：rotate(* , *)</span><br><span class="line">Skew(*deg) 倾斜角度。skewX 和skewY，可简写为：skew(* , *)</span><br><span class="line">translate(*,*) 坐标移动。translateX 和translateY，可简写为：translate(* , *)。</span><br></pre></td></tr></table></figure>

<h4 id="自定义滚动条-from-unknown"><a href="#自定义滚动条-from-unknown" class="headerlink" title="自定义滚动条 from unknown"></a>自定义滚动条 from unknown</h4><p>有没有觉得浏览器自带的原始滚动条很不美观，同时也有看到很多网站的自定义滚动条显得高端，就连chrome32.0开发板都抛弃了原始的滚动条，美观多了。那webkit浏览器是如何自定义滚动条的呢？ 参考：</p>
<p><a href="https://www.xuanfengge.com/css3-webkit-scrollbar.html">CSS3自定义滚动条样式 -webkit-scrollbar</a></p>
<h5 id="滚动条组成"><a href="#滚动条组成" class="headerlink" title="滚动条组成"></a>滚动条组成</h5><ul>
<li>::-webkit-scrollbar 滚动条整体部分</li>
<li>::-webkit-scrollbar-thumb 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li>
<li>::-webkit-scrollbar-track 滚动条的轨道（里面装有Thumb）</li>
<li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</li>
<li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li>
<li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li>
<li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span><br><span class="line">::-webkit-scrollbar</span><br><span class="line">&#123;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 16px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*定义滚动条轨道 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-track</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background-color: #F5F5F5;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*定义滑块 内阴影+圆角*/</span><br><span class="line">::-webkit-scrollbar-thumb</span><br><span class="line">&#123;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);</span><br><span class="line">    background-color: #555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.zhaoan.org/849.html">ie内核和webkit内核css滚动条样式</a></p>
<h5 id="ie内核："><a href="#ie内核：" class="headerlink" title="ie内核："></a>ie内核：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">scrollbar-3dlight-color:#D4D0C8; </span><br><span class="line">   scrollbar-highlight-color:#fff; </span><br><span class="line">   scrollbar-face-color:#E4E4E4; </span><br><span class="line">   scrollbar-arrow-color:#666; </span><br><span class="line">   scrollbar-shadow-color:#808080; </span><br><span class="line">   scrollbar-darkshadow-color:#D7DCE0; </span><br><span class="line">   scrollbar-base-color:#D7DCE0; </span><br><span class="line">   scrollbar-track-color:#;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="webkit内核："><a href="#webkit内核：" class="headerlink" title="webkit内核："></a>webkit内核：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Let&#x27;s get this party started */</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 12px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Track */</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); </span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* Handle */</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    background: rgba(255,0,0,0.8); </span><br><span class="line">    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5); </span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:window-inactive &#123;</span><br><span class="line">background: rgba(255,0,0,0.4); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="隐藏滚动条"><a href="#隐藏滚动条" class="headerlink" title="隐藏滚动条"></a>隐藏滚动条</h5><p>开发H5页面时为了美观，可能会隐藏滚动条，那么此时只要使用如下CSS代码即可实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123; width: 0; height: 0; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="页面描述"><a href="#页面描述" class="headerlink" title="页面描述"></a>页面描述</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;http://www.xxx.com/App_icon_72.png&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个属性是当用户把连接保存到手机桌面时使用的图标，如果不设置，则会用网页的截图。有了这，就可以让你的网页像APP一样存在手机里了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/img/startup.png&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个是APP启动画面图片，用途和上面的类似，如果不设置，启动画面就是白屏，图片像素就是手机全屏的像素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这个描述是表示打开的web app的最上面的时间、信号栏是黑色的，当然也可以设置其它参数，详细参数说明请参照：<a href="https://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html">Safari HTML Reference - Supported Meta Tags</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常见的-iPhone-和-Android-屏幕参数。"><a href="#常见的-iPhone-和-Android-屏幕参数。" class="headerlink" title="常见的 iPhone 和 Android 屏幕参数。"></a>常见的 iPhone 和 Android 屏幕参数。</h4><ul>
<li>设备 分辨率 设备像素比率</li>
<li>Android LDPI 320×240 0.75</li>
<li>Iphone 3 &amp; Android MDPI 320×480 1</li>
<li>Android HDPI 480×800 1.5</li>
<li>Iphone 4 960×640 2.0</li>
</ul>
<p>iPhone 4的一个 CSS 像素实际上表现为一块 2×2 的像素。所以图片像是被放大2倍一样，模糊不清晰。</p>
<p>解决办法：</p>
<p>1、页面引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 0.75)&quot; href=&quot;ldpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.0)&quot; href=&quot;mdpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.5)&quot; href=&quot;hdpi.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 2.0)&quot; href=&quot;retina.css&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>2、CSS文件里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#header &#123;</span><br><span class="line">    background:url(mdpi/bg.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (-webkit-device-pixel-ratio: 1.5) &#123;</span><br><span class="line">    /*CSS for high-density screens*/</span><br><span class="line">    #header &#123;</span><br><span class="line">        background:url(hdpi/bg.png);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移动-Web-开发经验技巧"><a href="#移动-Web-开发经验技巧" class="headerlink" title="移动 Web 开发经验技巧"></a>移动 Web 开发经验技巧</h4><h5 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h5><h6 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h6><ul>
<li>离线缓存</li>
<li>css优化【3d动画优化】</li>
<li>js优化 【js worker】</li>
<li>spdy,http2</li>
<li>service worker</li>
<li>入口dns预解析</li>
<li>域名收敛</li>
<li>cookie压缩</li>
<li>网速及网络情况侦测</li>
<li>webp</li>
</ul>
<h3 id="策略相关"><a href="#策略相关" class="headerlink" title="策略相关"></a>策略相关</h3><ul>
<li>前端资源压缩去重</li>
<li>首屏前置与资源lazyload</li>
<li>页面模板与数据分离</li>
<li>适当的base64,首屏css不建议使用</li>
<li>script 异步</li>
<li>后台智能加载下一页</li>
<li>图片渐进显示</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/">7 天打造前端性能监控系统</a></p>
<p><a href="http://velocity.oreilly.com.cn/2013/ppts/16_ms_optimization--web_front-end_performance_optimization.pdf">16_ms_optimization—web_front-end_performance_optimization</a></p>
<p><a href="http://velocity.oreilly.com.cn/2011/index.php?func=session&name=%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%EF%BF%BD%25A">velocity 2011 移动互联网应用的性能优化</a></p>
<p><a href="https://github.com/lx7575000/Translation/blob/master/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F.md">Medium图片加载模式</a></p>
<p><a href="https://lwdgit.github.io/editor.md/">Web性能权威指南</a></p>
<p><a href="https://developers.google.com/web/fundamentals/performance/?hl=zh-cn">Google 性能优化</a></p>
<p><a href="https://imququ.com/post/http2-resource.html">http2资料汇总</a></p>
<p><a href="http://www.html5rocks.com/zh/tutorials/appcache/beginner/">离线缓存使用规范</a></p>
<p><a href="http://www.cnblogs.com/qq309240790/p/5252992.html">12步创建高性能Web APP</a></p>
<p><a href="https://jakearchibald.com/2016/link-in-body/">css加载方式</a></p>
<p><a href="https://www.ampproject.org/docs/get_started/about-amp.html">Google AMP (AMP is a way to build web pages for static content that render fast)</a></p>
<p><a href="https://www.ampproject.org/docs/get_started/about-amp.html">缓存最佳实践</a></p>
<p><a href="http://www.html5rocks.com/zh/tutorials/speed/layers/">以层为基础的渲染加速－chrome</a></p>
<h4 id="点击与click事件"><a href="#点击与click事件" class="headerlink" title="点击与click事件"></a>点击与click事件</h4><p>对于a标记的点击导航，默认是在onclick事件中处理的。而移动客户端对onclick的响应相比PC浏览器有着明显的几百毫秒延迟。</p>
<p>在移动浏览器中对触摸事件的响应顺序应当是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ontouchstart -&gt; ontouchmove -&gt; ontouchend -&gt; onclick</span><br></pre></td></tr></table></figure>

<p>因此，如果确实要加快对点击事件的响应，就应当绑定ontouchend事件。</p>
<p>使用click会出现绑定点击区域闪一下的情况，解决：给该元素一个样式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: rgba(0,0,0,0);</span><br></pre></td></tr></table></figure>

<p>如果不使用click，也不能简单的用touchstart或touchend替代，需要用touchstart的模拟一个click事件，并且不能发生touchmove事件，或者用zepto中的tap（轻击）事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用iphone或ipad浏览很长的网页滚动时的滑动效果很不错吧？不过如果是一个div，然后设置 <code>height:200px;overflow:auto;</code>的话，可以滚动但是完全没有那滑动效果，很郁闷吧？</p>
<p>我看到很多网站为了实现这一效果，用了第三方类库，最常用的是iscroll（包括新浪手机页，百度等） 我一开始也使用，不过自从用了<code>-webkit-overflow-scrolling: touch;</code>样式后，就完全可以抛弃第三方类库了，把它加在<code>body&#123;&#125;</code>区域，所有的<code>overflow</code>需要滚动的都可以生效了。</p>
<p>另外有一篇比较全的移动端点击解决方案 <a href="http://www.zhihu.com/question/28979857">http://www.zhihu.com/question/28979857</a></p>
<h4 id="锁定-viewport"><a href="#锁定-viewport" class="headerlink" title="锁定 viewport"></a>锁定 viewport</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ontouchmove=&quot;event.preventDefault()&quot; //锁定viewport，任何屏幕操作不移动用户界面（弹出键盘除外）。</span><br></pre></td></tr></table></figure>

<h4 id="利用-Media-Query监听"><a href="#利用-Media-Query监听" class="headerlink" title="利用 Media Query监听"></a>利用 Media Query监听</h4><p>Media Query 相信大部分人已经使用过了。其实 JavaScript可以配合 Media Query这么用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mql = window.matchMedia(&quot;(orientation: portrait)&quot;);</span><br><span class="line">mql.addListener(handleOrientationChange);</span><br><span class="line">handleOrientationChange(mql);</span><br><span class="line">function handleOrientationChange(mql) &#123;</span><br><span class="line">    if (mql.matches) &#123;</span><br><span class="line">        alert(&#x27;The device is currently in portrait orientation &#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(&#x27;The device is currently in landscape orientation&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>借助了 Media Query 接口做的事件监听，所以很强大！</p>
<p>也可以通过获取 CSS 值来使用 Media Query 判断设备情况，详情请看：<a href="http://yujiangshui.com/use-javascript-css-media-queries-detect-device-state/">JavaScript 依据 CSS Media Queries 判断设备的方法</a>。</p>
<h4 id="rem最佳实践"><a href="#rem最佳实践" class="headerlink" title="rem最佳实践"></a>rem最佳实践</h4><p>rem是非常好用的一个属性，可以根据html来设定基准值，而且兼容性也很不错。不过有的时候还是需要对一些莫名其妙的浏览器优雅降级。以下是两个实践</p>
<ol>
<li><a href="http://jsbin.com/vaqexuge/4/edit">http://jsbin.com/vaqexuge/4/edit</a> 这有个demo，发现chrome当font-size小于12时，rem会按照12来计算。因此设置基准值要考虑这一点</li>
<li>可以用以下的代码片段保证在低端浏览器下也不会出问题</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html &#123; font-size: 62.5%; &#125; body &#123; font-size: 14px; font-size: 1.4rem; &#125; /* =14px / h1 &#123; font-size: 24px; font-size: 2.4rem; &#125; /=24px */</span><br></pre></td></tr></table></figure>

<h4 id="被点击元素的外观变化，可以使用样式来设定："><a href="#被点击元素的外观变化，可以使用样式来设定：" class="headerlink" title="被点击元素的外观变化，可以使用样式来设定："></a>被点击元素的外观变化，可以使用样式来设定：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: 颜色</span><br></pre></td></tr></table></figure>

<h4 id="检测判断-iPhone-iPod"><a href="#检测判断-iPhone-iPod" class="headerlink" title="检测判断 iPhone/iPod"></a>检测判断 iPhone/iPod</h4><p>开发特定设备的移动网站，首先要做的就是设备侦测了。下面是使用Javascript侦测iPhone/iPod的UA，然后转向到专属的URL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) &#123;</span><br><span class="line">　　if (document.cookie.indexOf(&quot;iphone_redirect=false&quot;) == -1) &#123;</span><br><span class="line">　　　　window.location = &quot;http://m.example.com&quot;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然Javascript是可以在水果设备上运行的，但是用户还是可以禁用。它也会造成客户端刷新和额外的数据传输，所以下面是服务器端侦测和转向：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPhone&#x27;) || strstr($_SERVER[&#x27;HTTP_USER_AGENT&#x27;],&#x27;iPod&#x27;)) &#123;</span><br><span class="line">　　header(&#x27;Location: http://yoursite.com/iphone&#x27;);</span><br><span class="line">　　exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="阻止旋转屏幕时自动调整字体大小"><a href="#阻止旋转屏幕时自动调整字体大小" class="headerlink" title="阻止旋转屏幕时自动调整字体大小"></a>阻止旋转屏幕时自动调整字体大小</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="禁止body滚动"><a href="#禁止body滚动" class="headerlink" title="禁止body滚动"></a>禁止body滚动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.ontouchmove=function(e)&#123; e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="页面长按，高亮全选文本"><a href="#页面长按，高亮全选文本" class="headerlink" title="页面长按，高亮全选文本"></a>页面长按，高亮全选文本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;http://blog.csdn.net/freshlover/article/details/40432247&gt;</span><br></pre></td></tr></table></figure>

<h4 id="模拟-hover伪类"><a href="#模拟-hover伪类" class="headerlink" title="模拟:hover伪类"></a>模拟:hover伪类</h4><p>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myLinks = document.getElementsByTagName(&#x27;a&#x27;);</span><br><span class="line">for(var i = 0; i &lt; myLinks.length; i++)&#123;</span><br><span class="line">　　myLinks[i].addEventListener(’touchstart’, function()&#123;this.className = “hover”;&#125;, false);</span><br><span class="line">　　myLinks[i].addEventListener(’touchend’, function()&#123;this.className = “”;&#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后用CSS增加hover效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:hover, a.hover &#123; /* 你的hover效果 */ &#125;</span><br></pre></td></tr></table></figure>

<p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p>
<h4 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h4><p><a href="http://jsbin.com/ibuwol/2/edit">Flex 模板和实例</a></p>
<p><a href="http://www.w3cplus.com/blog/666.html">深入了解 Flexbox 伸缩盒模型</a></p>
<p><a href="http://yehao.diandian.com/post/2013-09-15/40052216426">CSS Flexbox Intro</a></p>
<p><a href="http://www.w3.org/TR/css3-flexbox/">http://www.w3.org/TR/css3-flexbox/</a></p>
<h4 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h4><p>居中是移动端跟pc端共同的噩梦。这里有两种兼容性比较好的新方案。</p>
<ul>
<li>table布局法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123; text-align:center; display:table-cell; vertical-align:middle; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>老版本flex布局法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123; display:-webkit-box; -webkit-box-pack: center; -webkit-box-align: center; text-align:center; &#125;</span><br></pre></td></tr></table></figure>

<p>以上两种其实分别是retchat跟ionic的布局基石。</p>
<p>这里有更详细的更多的选择<a href="http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/">http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</a> 来自周文彬的博客</p>
<h4 id="h5底部输入框被键盘遮挡问题"><a href="#h5底部输入框被键盘遮挡问题" class="headerlink" title="h5底部输入框被键盘遮挡问题"></a>h5底部输入框被键盘遮挡问题</h4><p>h5页面有个很蛋疼的问题就是，当输入框在最底部，点击软键盘后输入框会被遮挡。</p>
<p>可以使用这个api，在点击input的时候调用即可 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView</a></p>
<p>如果切换输入法，由于不同输入法高度不同，又会出现被遮挡问题。由于无法捕获切换输入法的事件，因此可以开一个计时器，不断执行sscrollintoview即可。</p>
<h4 id="移动端实现标题文字截断"><a href="#移动端实现标题文字截断" class="headerlink" title="移动端实现标题文字截断"></a>移动端实现标题文字截断</h4><p><a href="http://www.75team.com/archives/611">http://www.75team.com/archives/611</a></p>
<h4 id="placeholder–line-height"><a href="#placeholder–line-height" class="headerlink" title="placeholder–line-height"></a>placeholder–line-height</h4><p>input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal，（stackoverflow也可查到这种解决办法）。</p>
<h4 id="处理-Retina-双倍屏幕"><a href="#处理-Retina-双倍屏幕" class="headerlink" title="处理 Retina 双倍屏幕"></a>处理 Retina 双倍屏幕</h4><p><a href="http://miekd.com/articles/using-css-sprites-to-optimize-your-website-for-retina-displays/">（经典）Using CSS Sprites to optimize your website for Retina Displays</a></p>
<p><a href="http://www.w3cplus.com/css/css-background-size-graphics.html">使用CSS3的background-size优化苹果的Retina屏幕的图像显示</a></p>
<p><a href="http://www.w3cplus.com/css/using-css-sprites-to-optimize-your-website-for-retina-displays.html">使用 CSS sprites 来优化你的网站在 Retina 屏幕下显示</a></p>
<p><a href="http://alexthorpe.com/uncategorized/css-sprites-for-retina-display-devices/683/">（案例）CSS IMAGE SPRITES FOR RETINA (HIRES) DEVICES</a></p>
<h4 id="input类型为date情况下不支持placeholder（来自于江水）"><a href="#input类型为date情况下不支持placeholder（来自于江水）" class="headerlink" title="input类型为date情况下不支持placeholder（来自于江水）"></a>input类型为date情况下不支持placeholder（来自于江水）</h4><p>这其实是浏览器自己的处理。因为浏览器会针对此类型 input 增加 datepicker 模块。</p>
<p>对 input type date 使用 placeholder 的目的是为了让用户更准确的输入日期格式，iOS 上会有 datepicker 不会显示 placeholder 文字，但是为了统一表单外观，往往需要显示。Android 部分机型没有 datepicker 也不会显示 placeholder 文字。</p>
<p>桌面端（Mac）</p>
<ul>
<li>Safari 不支持 datepicker，placeholder 正常显示。</li>
<li>Firefox 不支持 datepicker，placeholder 正常显示。</li>
<li>Chrome 支持 datepicker，显示 年、月、日 格式，忽略 placeholder。</li>
</ul>
<p>移动端</p>
<ul>
<li>iPhone5 iOS7 有 datepicker 功能，但是不显示 placeholder。</li>
<li>Andorid 4.0.4 无 datepicker 功能，不显示 placeholder</li>
</ul>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&#x27;date&#x27;)&quot;  id=&quot;date&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>因为text是支持placeholder的。因此当用户focus的时候自动把type类型改变为date，这样既有placeholder也有datepicker了</p>
<h4 id="判断照片的横竖排列"><a href="#判断照片的横竖排列" class="headerlink" title="判断照片的横竖排列"></a>判断照片的横竖排列</h4><p>有这样一种需求，需要判断用户照片是横着拍出来的还是竖着拍出来的，这里需要使用照片得exif信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;input&quot;).change(function() &#123;</span><br><span class="line">    var file = this.files[0];</span><br><span class="line">    fr   = new FileReader;</span><br><span class="line"></span><br><span class="line">    fr.onloadend = function() &#123;</span><br><span class="line">        var exif = EXIF.readFromBinaryFile(new BinaryFile(this.result));</span><br><span class="line">        alert(exif.Orientation);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fr.readAsBinaryString(file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用这两个库 来取exif信息<a href="http://www.nihilogic.dk/labs/binaryajax/binaryajax.js">http://www.nihilogic.dk/labs/binaryajax/binaryajax.js</a> <a href="http://www.nihilogic.dk/labs/exif/exif.js">http://www.nihilogic.dk/labs/exif/exif.js</a></p>
<h4 id="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"><a href="#Android上当viewport的width大于device-width时出现文字无故折行的解决办法" class="headerlink" title="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"></a>Android上当viewport的width大于device-width时出现文字无故折行的解决办法</h4><p><a href="http://www.iunbug.com/archives/2013/04/23/798.html">http://www.iunbug.com/archives/2013/04/23/798.html</a></p>
<h4 id="白屏解决与优化方案"><a href="#白屏解决与优化方案" class="headerlink" title="白屏解决与优化方案"></a>白屏解决与优化方案</h4><p>当前很多无线页面都使用前端模板进行数据渲染，那么在糟糕的网速情况下，一进去页面，看到的不是白屏就是 loading，这成为白屏问题。</p>
<p>此问题发生的原因基本可以归结为网速跟静态资源</p>
<p>1、css文件加载需要一些时间，在加载的过程中页面是空白的。 解决：可以考虑将css代码前置和内联。 2、首屏无实际的数据内容，等待异步加载数据再渲染页面导致白屏。 解决：在首屏直接同步渲染html，后续的滚屏等再采用异步请求数据和渲染html。 3、首屏内联js的执行会阻塞页面的渲染。 解决：尽量不在首屏html代码中放置内联脚本。（来自翔歌）</p>
<p>解决方案</p>
<p>根本原因是客户端渲染的无力，因此最简单的方法是在服务器端，使用模板引擎渲染所有页面。同时</p>
<p>1减少文件加载体积，如html压缩，js压缩 2加快js执行速度 比如常见的无限滚动的页面，可以使用js先渲染一个屏幕范围内的东西 3提供一些友好的交互，比如提供一些假的滚动条 4使用本地存储处理静态文件。</p>
<h4 id="h5-小特效实践"><a href="#h5-小特效实践" class="headerlink" title="h5 小特效实践"></a>h5 小特效实践</h4><h5 id="加速度感应（摇一摇）"><a href="#加速度感应（摇一摇）" class="headerlink" title="加速度感应（摇一摇）"></a>加速度感应（摇一摇）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (window.DeviceMotionEvent) &#123; window.addEventListener(&#x27;devicemotion&#x27;,deviceMotionHandler, false);</span><br><span class="line">&#125; var speed = 30;//speed var x = y = z = lastX = lastY = lastZ = 0; function deviceMotionHandler(eventData) &#123;</span><br><span class="line">var acceleration =event.accelerationIncludingGravity; x = acceleration.x; y = acceleration.y; z = acceleration.z; if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed || Math.abs(z-lastZ) &gt; speed) &#123; alert(&#x27;别摇那么大力嘛...&#x27;); // your code here &#125; lastX = x; lastY = y; lastZ = z; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽奖转盘</li>
<li>刮彩票</li>
<li>全景效果</li>
<li>描边动画</li>
<li>翻书</li>
</ul>
<h4 id="如何实现打开已安装的app，若未安装则引导用户安装"><a href="#如何实现打开已安装的app，若未安装则引导用户安装" class="headerlink" title="如何实现打开已安装的app，若未安装则引导用户安装?"></a>如何实现打开已安装的app，若未安装则引导用户安装?</h4><p>来自 <a href="http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html">http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html</a> kissy mobile 通过iframe src发送请求打开app自定义url scheme，如taobao://home（淘宝首页） 、etao://scan（一淘扫描）); 如果安装了客户端则会直接唤起，直接唤起后，之前浏览器窗口（或者扫码工具的webview）推入后台； 如果在指定的时间内客户端没有被唤起，则js重定向到app下载地址。 大概实现代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goToNative:function()&#123;</span><br><span class="line"></span><br><span class="line">    if(!body) &#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            doc.body.appendChild(iframe);</span><br><span class="line">            &#125;, 0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            body.appendChild(iframe);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            doc.body.removeChild(iframe);</span><br><span class="line">            gotoDownload(startTime);//去下载，下载链接一般是itunes app store或者apk文件链接</span><br><span class="line">            /**</span><br><span class="line">             * 测试时间设置小于800ms时，在android下的UC浏览器会打开native app时并下载apk，</span><br><span class="line">             * 测试android+UC下打开native的时间最好大于800ms;</span><br><span class="line">             */</span><br><span class="line">        &#125;, 800);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是 如果是android chrome 25版本以后，在iframe src不会发送请求， 原因如下<a href="https://developers.google.com/chrome/mobile/docs/intents">https://developers.google.com/chrome/mobile/docs/intents</a> ，通过location href使用intent机制拉起客户端可行并且当前页面不跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location = &#x27;intent://&#x27; + schemeUrl + &#x27;#Intent;scheme=&#x27; + scheme + &#x27;;package=&#x27; + self.package + &#x27;;end&#x27;;</span><br></pre></td></tr></table></figure>

<p>补充一个来自三水清的详细讲解<a href="http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/">http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/</a></p>
<h4 id="active的兼容"><a href="#active的兼容" class="headerlink" title="active的兼容"></a>active的兼容</h4><p>今天发现，要让a链接的CSS active伪类生效，只需要给这个a链接的touch系列的任意事件touchstart/touchend绑定一个空的匿名方法即可hack成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">color: #000;</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;a herf=”asdasd”&gt;asdasd&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a=document.getElementsByTagName(‘a’);</span><br><span class="line">for(var i=0;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i].addEventListener(‘touchstart’,function()&#123;&#125;,false);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h4><p>两个方法：使用css3动画的时尽量利用3D加速，从而使得动画变得流畅。动画过程中的动画闪白可以通过 backface-visibility 隐藏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-transform-style: preserve-3d;</span><br><span class="line">/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</span><br><span class="line">-webkit-backface-visibility: hidden;</span><br><span class="line">/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</span><br></pre></td></tr></table></figure>

<h4 id="测试是否支持svg图片"><a href="#测试是否支持svg图片" class="headerlink" title="测试是否支持svg图片"></a>测试是否支持svg图片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.implementation.hasFeature(&quot;http:// www.w3.org/TR/SVG11/feature#Image&quot;, &quot;1.1&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html"><a href="#考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html" class="headerlink" title="考虑兼容“隐私模式”(from http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html)"></a><strong>考虑兼容“隐私模式”(from</strong> <a href="http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html"><strong>http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html</strong></a>)</h4><p>ios的safari提供一种“隐私模式”，如果你的webapp考虑兼容这个模式，那么在使用html5的本地存储的一种————localStorage时，可能因为“隐私模式”下没有权限读写localstorge而使代码抛出错误，导致后续的js代码都无法运行了。</p>
<p>既然在safari的“隐私模式”下，没有调用localStorage的权限，首先想到的是先判断是否支持localStorage，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(&#x27;localStorage&#x27; in window)&#123;</span><br><span class="line">    //需要使用localStorage的代码写在这</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //不支持的提示和向下兼容代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试发现，即使在safari的“隐私模式”下，’localStorage’ in window的返回值依然为true，也就是说，if代码块内部的代码依然会运行，问题没有得到解决。 接下来只能相当使用try catch了，虽然这是一个不太推荐被使用的方法，使用try catch捕获错误，使后续的js代码可以继续运行，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    if(&#x27;localStorage&#x27; in window)&#123;</span><br><span class="line">         //需要使用localStorage的代码写在这</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">         //不支持的提示和向下兼容代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    // 隐私模式相关提示代码和不支持的提示和向下兼容代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，提醒大家注意，在需要兼容ios的safari的“隐私模式”的情况下，本地存储相关的代码需要使用try catch包裹并降级兼容。</p>
<h4 id="安卓手机点击锁定页面效果问题"><a href="#安卓手机点击锁定页面效果问题" class="headerlink" title="安卓手机点击锁定页面效果问题"></a>安卓手机点击锁定页面效果问题</h4><p>有些安卓手机，页面点击时会停止页面的javascript，css3动画等的执行，这个比较蛋疼。不过可以用阻止默认事件解决。详细见 <a href="http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h">http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function touchHandlerDummy(e)</span><br><span class="line">&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">document.addEventListener(&quot;touchstart&quot;, touchHandlerDummy, false);</span><br><span class="line">document.addEventListener(&quot;touchmove&quot;, touchHandlerDummy, false);</span><br><span class="line">document.addEventListener(&quot;touchend&quot;, touchHandlerDummy, false);</span><br></pre></td></tr></table></figure>

<h4 id="消除ie10里面的那个叉号"><a href="#消除ie10里面的那个叉号" class="headerlink" title="消除ie10里面的那个叉号"></a>消除ie10里面的那个叉号</h4><p><a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh767361.aspx">IE Pseudo-elements</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:-ms-clear&#123;display:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等"><a href="#关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等" class="headerlink" title="关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)"></a>关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)</h4><p><a href="http://blog.sina.com.cn/s/blog_6da647a601011u4v.html">mac下网页中文字体优化</a></p>
<p><a href="http://stackoverflow.com/questions/3220662/uiwebview-font-is-thinner-in-portrait-than-landscape">UIWebView font is thinner in portrait than landscape</a></p>
<p>判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">navigator.standalone</span><br></pre></td></tr></table></figure>

<h4 id="隐藏地址栏-amp-处理事件的时候，防止滚动条出现："><a href="#隐藏地址栏-amp-处理事件的时候，防止滚动条出现：" class="headerlink" title="隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现："></a>隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 隐藏地址栏  &amp; 处理事件的时候 ，防止滚动条出现</span><br><span class="line">addEventListener(&#x27;load&#x27;, function()&#123;</span><br><span class="line">    setTimeout(function()&#123; window.scrollTo(0, 1); &#125;, 100);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="ios7-可以通过meta标签的minimal来隐藏地址栏了"><a href="#ios7-可以通过meta标签的minimal来隐藏地址栏了" class="headerlink" title="ios7 可以通过meta标签的minimal来隐藏地址栏了"></a>ios7 可以通过meta标签的minimal来隐藏地址栏了</h4><p><a href="http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html">http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html</a></p>
<h4 id="判断是否为iPhone："><a href="#判断是否为iPhone：" class="headerlink" title="判断是否为iPhone："></a>判断是否为iPhone：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 判断是否为 iPhone ：</span><br><span class="line">function isAppleMobile() &#123;</span><br><span class="line">    return (navigator.platform.indexOf(&#x27;iPhone&#x27;) != -1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage:"></a>localStorage:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果名称是n的数据存在 ，则将其读出 ，赋予变量v。</span><br><span class="line">var v = localStorage.getItem(&#x27;n&#x27;) ? localStorage.getItem(&#x27;n&#x27;) : &quot;&quot;;   </span><br><span class="line">localStorage.setItem(&#x27;n&#x27;, v);      // 写入名称为 n、值为  v  的数据</span><br><span class="line">localStorage.removeItem(&#x27;n&#x27;);      // 删除名称为  n  的数据</span><br></pre></td></tr></table></figure>

<h4 id="使用特殊链接："><a href="#使用特殊链接：" class="headerlink" title="使用特殊链接："></a>使用特殊链接：</h4><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接 ,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>或用于单元格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;td onclick=&quot;location.href=&#x27;tel:122&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="自动大写与自动修正"><a href="#自动大写与自动修正" class="headerlink" title="自动大写与自动修正"></a>自动大写与自动修正</h4><p>要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="不让-Android-识别邮箱"><a href="#不让-Android-识别邮箱" class="headerlink" title="不让 Android 识别邮箱"></a>不让 Android 识别邮箱</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-touch-callout:none</span><br></pre></td></tr></table></figure>

<h4 id="禁止用户选中文字"><a href="#禁止用户选中文字" class="headerlink" title="禁止用户选中文字"></a>禁止用户选中文字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-user-select:none</span><br></pre></td></tr></table></figure>

<h4 id="动画效果中，使用-translate-比使用定位性能高"><a href="#动画效果中，使用-translate-比使用定位性能高" class="headerlink" title="动画效果中，使用 translate 比使用定位性能高"></a>动画效果中，使用 translate 比使用定位性能高</h4><p><a href="http://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/">Why Moving Elements With Translate() Is Better Than Pos:abs Top/left</a></p>
<h4 id="拿到滚动条"><a href="#拿到滚动条" class="headerlink" title="拿到滚动条"></a>拿到滚动条</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.scrollY </span><br><span class="line">window.scrollX</span><br></pre></td></tr></table></figure>

<p>比如要绑定一个touchmove的事件，正常的情况下类似这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&#x27;touchmove&#x27;, function()&#123;</span><br><span class="line">//.….code</span><br><span class="line">&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>而如果中间的code需要处理的东西多的话，fps就会下降影响程序顺滑度，而如果改成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&#x27;touchmove&#x27;, function()&#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">//.….code</span><br><span class="line">&#125;,0);</span><br><span class="line">&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>把代码放在setTimeout中，会发现程序变快.</p>
<h4 id="关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置"><a href="#关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置" class="headerlink" title="关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置"></a>关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置</h4><p><a href="http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893">http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893</a></p>
<p><a href="https://stackoverflow.com/questions/4687698/multiple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad">Multiple “apple-touch-startup-image” resolutions for iOS web app (esp. for iPad)?</a></p>
<h4 id="position-sticky与position-fixed布局"><a href="#position-sticky与position-fixed布局" class="headerlink" title="position:sticky与position:fixed布局"></a>position:sticky与position:fixed布局</h4><p><a href="http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/">http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/</a><a href="http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/">http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/</a></p>
<h4 id="关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"><a href="#关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格" class="headerlink" title="关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"></a>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</h4><p>可以通过正则去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.value = this.value.replace(/\u2006/g, &#x27;&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="关于android-webview中，input元素输入时出现的怪异情况"><a href="#关于android-webview中，input元素输入时出现的怪异情况" class="headerlink" title="关于android webview中，input元素输入时出现的怪异情况"></a>关于android webview中，input元素输入时出现的怪异情况</h4><p>见下图</p>
<p>​    <img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/webview.png" alt="webview"></p>
<p>Android Web 视图,至少在 HTC EVO 和三星的 Galaxy Nexus 中，文本输入框在输入时表现的就像占位符。情况为一个类似水印的东西在用户输入区域，一旦用户开始输入便会消失(见图片)。</p>
<p>在 Android 的默认样式下当输入框获得焦点后，若存在一个绝对定位或者 fixed 的元素，布局会被破坏，其他元素与系统输入字段会发生重叠(如搜索图标将消失为搜索字段)，可以观察到布局与原始输入字段有偏差(见截图)。</p>
<p>这是一个相当复杂的问题，以下简单布局可以重现这个问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;label for=&quot;phone&quot;&gt;Phone: *&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;tel&quot; name=&quot;phone&quot; id=&quot;phone&quot; minlength=&quot;10&quot; maxlength=&quot;10&quot; inputmode=&quot;latin digits&quot; required=&quot;required&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-user-modify: read-write-plaintext-only</span><br></pre></td></tr></table></figure>

<p>详细参考<a href="http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/">http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/</a> 注意，该属性会导致中文不能输入词组，只能单个字。感谢鬼哥与飞（游勇飞）贡献此问题与解决方案</p>
<p>另外，在position:fixed后的元素里，尽量不要使用输入框。更多的bug可参考<a href="http://www.cosdiv.com/page/M0/S882/882353.html">http://www.cosdiv.com/page/M0/S882/882353.html</a></p>
<p>依旧无法解决（摩托罗拉ME863手机），则使用input:text类型而非password类型，并设置其设置 -webkit-text-security: disc; 隐藏输入密码从而解决。</p>
<h4 id="JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用"><a href="#JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用" class="headerlink" title="JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用"></a>JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用</h4><p>解决方法删除了overflow-x:hidden; 然后在JS生成下来菜单之后focus聚焦，这两步操作之后解决了问题。(来自岛都-小Qi)</p>
<p>参考<a href="http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator">http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator</a></p>
<h4 id="Andriod-上去掉语音输入按钮"><a href="#Andriod-上去掉语音输入按钮" class="headerlink" title="Andriod 上去掉语音输入按钮"></a>Andriod 上去掉语音输入按钮</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input::-webkit-input-speech-button &#123;display: none&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IE10-的特殊鼠标事件"><a href="#IE10-的特殊鼠标事件" class="headerlink" title="IE10 的特殊鼠标事件"></a>IE10 的特殊鼠标事件</h4><p><a href="http://www.mansonchor.com/blog/blog_detail_73.html">IE10 事件监听</a></p>
<h4 id="iOS-输入框最佳实践"><a href="#iOS-输入框最佳实践" class="headerlink" title="iOS 输入框最佳实践"></a>iOS 输入框最佳实践</h4><p><a href="http://stackoverflow.com/questions/11219242/mobile-friendly-input-of-a-digits-spaces-string-a-credit-card-number">Mobile-friendly input of a digits + spaces string (a credit card number)</a></p>
<p><a href="http://stackoverflow.com/questions/8216278/html5-input-type-number-vs-tel">HTML5 input type number vs tel</a></p>
<p><a href="http://stackoverflow.com/questions/6178556/iphone-numeric-keyboard-for-text-input">iPhone: numeric keyboard for text input</a></p>
<p><a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html">Text Programming Guide for iOS - Managing the Keyboard</a></p>
<p><a href="http://www.miketaylr.com/code/input-type-attr.html">HTML5 inputs and attribute support</a></p>
<h4 id="往返缓存问题"><a href="#往返缓存问题" class="headerlink" title="往返缓存问题"></a>往返缓存问题</h4><p>点击浏览器的回退，有时候不会自动执行js，特别是在mobilesafari中。这与**往返缓存(bfcache)**有关系。有很多hack的处理方法，可以参考</p>
<p><a href="http://stackoverflow.com/questions/24046/the-safari-back-button-problem">http://stackoverflow.com/questions/24046/the-safari-back-button-problem</a></p>
<p><a href="http://stackoverflow.com/questions/11979156/mobile-safari-back-button">http://stackoverflow.com/questions/11979156/mobile-safari-back-button</a></p>
<h4 id="不暂停的计时器（safari的进程冻结）"><a href="#不暂停的计时器（safari的进程冻结）" class="headerlink" title="不暂停的计时器（safari的进程冻结）"></a>不暂停的计时器（safari的进程冻结）</h4><p><a href="https://www.imququ.com/post/ios-none-freeze-timer.html">https://www.imququ.com/post/ios-none-freeze-timer.html</a> 或者可以用postmessage方式: 主页面:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决ios safari tab在后台会遭遇进程冻结问题</span><br><span class="line">// http://www.apple.com/safari/#gallery-icloud-tabs</span><br><span class="line">// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1</span><br><span class="line">var work;</span><br><span class="line">function startWorker() &#123;</span><br><span class="line">    if (typeof(Worker) !== &quot;undefined&quot;) &#123;</span><br><span class="line">        if (typeof(work) == &quot;undefined&quot;) &#123;</span><br><span class="line">            work = new Worker(&quot;/workers.js&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        work.onmessage = function(event) &#123;</span><br><span class="line">            // document.getElementById(&quot;result-count&quot;).innerHTML = event.data.count;</span><br><span class="line">            // document.getElementById(&quot;result-url&quot;).innerHTML = event.data.targetURL;</span><br><span class="line">            if (target &amp;&amp; event.data.targetURL != &quot;&quot;) target.location.href = event.data.targetURL;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;does not support Web Workers...&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stopWorker() &#123;</span><br><span class="line">    work.terminate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startWorker();</span><br></pre></td></tr></table></figure>

<p>worker:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 解决ios safari tab在后台会遭遇进程冻结问题</span><br><span class="line">// http://www.apple.com/safari/#gallery-icloud-tabs</span><br><span class="line">// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1</span><br><span class="line"></span><br><span class="line">importScripts(&#x27;/socket.io/socket.io.js&#x27;);</span><br><span class="line"></span><br><span class="line">var count = 0,</span><br><span class="line">    targetURL = &#x27;&#x27;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">var socket = io.connect(&#x27;/&#x27;);</span><br><span class="line">socket.on(&#x27;navigate&#x27;, function (data) &#123;</span><br><span class="line">  count = count++;</span><br><span class="line">  postMessage(&#123;targetURL:data.url,count:count&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Web移动端Fixed布局的解决方案"><a href="#Web移动端Fixed布局的解决方案" class="headerlink" title="Web移动端Fixed布局的解决方案"></a>Web移动端Fixed布局的解决方案</h4><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>
<h4 id="ios上background-attachment-fixed不能正常工作"><a href="#ios上background-attachment-fixed不能正常工作" class="headerlink" title="ios上background-attachment:fixed不能正常工作"></a>ios上background-attachment:fixed不能正常工作</h4><p>参考 <a href="http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7">http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7</a></p>
<h4 id="如何让音频跟视频在ios跟android上自动播放"><a href="#如何让音频跟视频在ios跟android上自动播放" class="headerlink" title="如何让音频跟视频在ios跟android上自动播放"></a>如何让音频跟视频在ios跟android上自动播放</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio autoplay &gt;&lt;source  src=&quot;audio/alarm1.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure>

<p>系统默认情况下 audio的autoplay属性是无法生效的，这也是手机为节省用户流量做的考虑。 如果必须要自动播放，有两种方式可以解决。</p>
<p>1.捕捉一次用户输入后，让音频加载，下次即可播放。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//play and pause it once</span><br><span class="line">document.addEventListener(&#x27;touchstart&#x27;, function () &#123;</span><br><span class="line">    document.getElementsByTagName(&#x27;audio&#x27;)[0].play();</span><br><span class="line">    document.getElementsByTagName(&#x27;audio&#x27;)[0].pause();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这种方法需要捕获一次用户的点击事件来促使音频跟视频加载。当加载后，你就可以用javascript控制音频的播放了，如调用audio.play()</p>
<p>2.利用iframe加载资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ifr=document.createElement(&quot;iframe&quot;);</span><br><span class="line">ifr.setAttribute(&#x27;src&#x27;, &quot;http://mysite.com/myvideo.mp4&quot;);</span><br><span class="line">ifr.setAttribute(&#x27;width&#x27;, &#x27;1px&#x27;);</span><br><span class="line">ifr.setAttribute(&#x27;height&#x27;, &#x27;1px&#x27;);</span><br><span class="line">ifr.setAttribute(&#x27;scrolling&#x27;, &#x27;no&#x27;);</span><br><span class="line">ifr.style.border=&quot;0px&quot;;</span><br><span class="line">document.body.appendChild(ifr);</span><br></pre></td></tr></table></figure>

<p>这种方式其实跟第一种原理是一样的。当资源加载了你就可以控制播放了，但是这里使用iframe来加载，相当于直接触发资源加载。 注意，使用创建audio标签并让其加载的方式是不可行的。 慎用这种方法，会对用户造成很糟糕的影响。。</p>
<h4 id="iOS-6-跟-iPhone-5-的那些事"><a href="#iOS-6-跟-iPhone-5-的那些事" class="headerlink" title="iOS 6 跟 iPhone 5 的那些事"></a>iOS 6 跟 iPhone 5 的那些事</h4><h5 id="IP5-的媒体查询"><a href="#IP5-的媒体查询" class="headerlink" title="IP5 的媒体查询"></a>IP5 的媒体查询</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media (device-height: 568px) and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line"></span><br><span class="line">/* iPhone 5 or iPod Touch 5th generation */</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用媒体查询，提供不同的启动图片："><a href="#使用媒体查询，提供不同的启动图片：" class="headerlink" title="使用媒体查询，提供不同的启动图片："></a>使用媒体查询，提供不同的启动图片：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;startup-568h.png&quot; rel=&quot;apple-touch-startup-image&quot; media=&quot;(device-height: 568px)&quot;&gt;</span><br><span class="line">&lt;link href=&quot;startup.png&quot; rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x920&quot; media=&quot;(device-height: 480px)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="拍照上传"><a href="#拍照上传" class="headerlink" title="拍照上传"></a>拍照上传</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=file accept=&quot;video/*&quot;&gt;</span><br><span class="line">&lt;input type=file accept=&quot;image/*&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>不支持其他类型的文件 ，如音频，Pages文档或PDF文件。 也没有getUserMedia摄像头的实时流媒体支持。</p>
<h4 id="可以使用的-HTML5-高级-api"><a href="#可以使用的-HTML5-高级-api" class="headerlink" title="可以使用的 HTML5 高级 api"></a>可以使用的 HTML5 高级 api</h4><ul>
<li>multipart POST 表单提交上传</li>
<li>XMLHttpRequest 2 AJAX 上传（甚至进度支持）</li>
<li>文件 API ，在 iOS 6 允许 JavaScript 直接读取的字节数和客户端操作文件。</li>
</ul>
<h4 id="智能应用程序横幅"><a href="#智能应用程序横幅" class="headerlink" title="智能应用程序横幅"></a>智能应用程序横幅</h4><p>有了智能应用程序横幅，当网站上有一个相关联的本机应用程序时，Safari浏览器可以显示一个横幅。 如果用户没有安装这个应用程序将显示“安装”按钮，或已经安装的显示“查看”按钮可打开它。</p>
<p>在 iTunes Link Maker 搜索我们的应用程序和应用程序ID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用 app-argument 提供字符串值，如果参加iTunes联盟计划，可以添加元标记数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx, affiliate-data=partnerId=99&amp;siteID=XXXX&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>横幅需要156像素（设备是312 hi-dpi）在顶部，直到用户在下方点击内容或关闭按钮，你的网站才会展现全部的高度。 它就像HTML的DOM对象，但它不是一个真正的DOM。</p>
<p>CSS3 滤镜</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-filter: blur(5px) grayscale (.5) opacity(0.66) hue-rotate(100deg);</span><br></pre></td></tr></table></figure>

<p>交叉淡变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image: -webkit-cross-fade(url(&quot;logo1.png&quot;), url(&quot;logo2.png&quot;), 50%);</span><br></pre></td></tr></table></figure>

<p>Safari中的全屏幕</p>
<p>除了chrome-less 主屏幕meta标签，现在的iPhone和iPod Touch（而不是在iPad）支持全屏幕模式的窗口。 没有办法强制全屏模式，它需要由用户启动（工具栏上的最后一个图标）。需要引导用户按下屏幕上的全屏图标来激活全屏效果。 可以使用onresize事件检测是否用户切换到全屏幕。</p>
<p>支持requestAnimationFrameAPI</p>
<p>支持image-set,retina屏幕的利器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-image-set(url(low.png) 1x, url(hi.jpg) 2x)</span><br></pre></td></tr></table></figure>

<p>应用程序缓存限制增加至25MB。</p>
<p>Web View（pseudobrowsers，PhoneGap/Cordova应用程序，嵌入式浏览器） 上Javascript运行比Safari慢3.3倍（或者说，Nitro引擎在Safari浏览器是Web应用程序是3.3倍速度）。</p>
<p>autocomplete属性的输入遵循DOM规范</p>
<p>来自DOM4的Mutation Observers已经实现。 您可以使用WebKitMutationObserver构造器捕获DOM的变化</p>
<p>Safari不再总是对用 -webkit-transform:preserve-3d 的元素创建硬件加速</p>
<p>支持window.selection 的Selection API</p>
<p>Canvas更新 ：createImageData有一个参数，现在有两个新的功能做好准备，用webkitGetImageDataHD和webkitPutImageDataHD提供高分辨率图像 。</p>
<p>更新SVG处理器和事件构造函数</p>
<h4 id="IOS7的大更新"><a href="#IOS7的大更新" class="headerlink" title="IOS7的大更新"></a>IOS7的大更新</h4><p><a href="http://jinlong.github.io/blog/2013/09/23/safari-ios7-html5-problems-apis-review/#jtss-tsina">iOS 7 的 Safari 和 HTML5：问题，变化和新 API</a>(张金龙翻译)</p>
<p><a href="http://www.sencha.com/blog/the-html5-scorecard-the-good-the-bad-and-the-ugly-in-ios7">iOS 7 的一些坑(英文)</a></p>
<p><a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review">ios7的一些坑2(英文)</a></p>
<h4 id="webview相关"><a href="#webview相关" class="headerlink" title="webview相关"></a>webview相关</h4><h5 id="Cache开启和设置"><a href="#Cache开启和设置" class="headerlink" title="Cache开启和设置"></a>Cache开启和设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setAppCacheEnabled(true); browser.getSettings().setAppCachePath(&quot;/data/data/[com.packagename]/cache&quot;); browser.getSettings().setAppCacheMaxSize(5*1024*1024); // 5MB</span><br></pre></td></tr></table></figure>

<h5 id="LocalStorage相关设置"><a href="#LocalStorage相关设置" class="headerlink" title="LocalStorage相关设置"></a>LocalStorage相关设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setDatabaseEnabled(true);</span><br><span class="line">browser.getSettings().setDomStorageEnabled(true);</span><br><span class="line">String databasePath = browser.getContext().getDir(&quot;databases&quot;, Context.MODE_PRIVATE).getPath();</span><br><span class="line">browser.getSettings().setDatabasePath(databasePath);//Android　webview的LocalStorage有个问题，关闭APP或者重启后，就清楚了，所以需要browser.getSettings().setDatabase相关的操作，把LocalStoarge存到DB中</span><br><span class="line"></span><br><span class="line">myWebView.setWebChromeClient(new WebChromeClient()&#123;</span><br><span class="line">　　　 @Override</span><br><span class="line">　　　 public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)</span><br><span class="line">　　　 &#123;</span><br><span class="line">　　　　　　　 quotaUpdater.updateQuota(estimatedSize * 2);</span><br><span class="line">　　　 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="浏览器自带缩放按钮取消显示"><a href="#浏览器自带缩放按钮取消显示" class="headerlink" title="浏览器自带缩放按钮取消显示"></a>浏览器自带缩放按钮取消显示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.getSettings().setBuiltInZoomControls(false);</span><br></pre></td></tr></table></figure>

<h5 id="几个比较好的实践"><a href="#几个比较好的实践" class="headerlink" title="几个比较好的实践"></a>几个比较好的实践</h5><p>使用localstorage缓存html</p>
<p>使用lazyload，还要记得lazyload占位图虽然小，但是最好能提前加载到缓存</p>
<p>延时加载执行js</p>
<p>主要原因就在于Android Webview的onPageFinished事件，Android端一般是用这个事件来标识页面加载完成并显示的，也就是说在此之前，会一直loading，但是Android的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。</p>
<h5 id="manifest与缓存相关"><a href="#manifest与缓存相关" class="headerlink" title="manifest与缓存相关:"></a>manifest与缓存相关:</h5><p><a href="http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/">http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/</a> 相关解决方案 <a href="http://mt.tencent.com/">http://mt.tencent.com/</a></p>
<h3 id="移动端调适篇"><a href="#移动端调适篇" class="headerlink" title="移动端调适篇"></a>移动端调适篇</h3><h4 id="手机抓包与配host"><a href="#手机抓包与配host" class="headerlink" title="手机抓包与配host"></a>手机抓包与配host</h4><p>在PC上，我们可以很方便地配host，但是手机上如何配host，这是一个问题。</p>
<p>这里主要使用fiddler和远程代理，实现手机配host的操作，具体操作如下：</p>
<p>首先，保证PC和移动设备在同一个局域网下；</p>
<p>PC上开启fiddler，并在设置中勾选“allow remote computers to connect”</p>
<ol>
<li>首先，保证PC和移动设备在同一个局域网下；</li>
<li>PC上开启fiddler，并在设置中勾选“allow remote computers to connect” </li>
</ol>
<p>​    <img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/fiddler.png" alt="fiddler"></p>
<ol>
<li>手机上设置代理，代理IP为PC的IP地址，端口为8888（这是fiddler的默认端口）。通常手机上可以直接设置代理，如果没有，可以去下载一个叫ProxyDroid的APP来实现代理的设置。</li>
<li>此时你会发现，用手机上网，走的其实是PC上的fiddler，所有的请求包都会在fiddler中列出来，配合willow使用，即可实现配host，甚至是反向代理的操作。</li>
</ol>
<p>也可以用CCProxy之类软件，还有一种方法就是买一个随身wifi，然后手机连接就可以了！</p>
<h4 id="高级抓包"><a href="#高级抓包" class="headerlink" title="高级抓包"></a>高级抓包</h4><p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012112353515306/?suggestedreading&wumii">iPhone上使用Burp Suite捕捉HTTPS通信包方法</a></p>
<p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012101331848980/">mobile app 通信分析方法小议（iOS/Android)</a></p>
<p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012111954741585/">实时抓取移动设备上的通信包(ADVsock2pipe+Wireshark+nc+tcpdump)</a></p>
<h4 id="静态资源缓存问题"><a href="#静态资源缓存问题" class="headerlink" title="静态资源缓存问题"></a>静态资源缓存问题</h4><p>一般用代理软件代理过来的静态资源可以设置nocache避免缓存，但是有的手机比较诡异，会一直缓存住css等资源文件。由于静态资源一般都是用版本号管理的，我们以charles为例子来处理这个问题</p>
<p>charles 选择静态的html页面文件-saveResponse。之后把这个文件保存一下，修改一下版本号。之后继续发请求， 刚才的html页面文件 右键选择 –map local 选择我们修改过版本号的html文件即ok。这其实也是fiddler远程映射并修改文件的一个应用场景。</p>
<h4 id="安卓模拟器和真机区别"><a href="#安卓模拟器和真机区别" class="headerlink" title="安卓模拟器和真机区别"></a>安卓模拟器和真机区别</h4><p><a href="http://www.farsight.com.cn/news/emb105.htm">http://www.farsight.com.cn/news/emb105.htm</a></p>
<p><a href="http://testerhome.com/topics/388">http://testerhome.com/topics/388</a></p>
<p><a href="http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html">http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html</a></p>
<h3 id="移动浏览器篇"><a href="#移动浏览器篇" class="headerlink" title="移动浏览器篇"></a>移动浏览器篇</h3><h4 id="微信浏览器"><a href="#微信浏览器" class="headerlink" title="微信浏览器"></a>微信浏览器</h4><p>微信浏览器的调试技巧[<a href="http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076]">http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076]</a>(<a href="http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5">http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5</a> 3076)</p>
<p>微信浏览器的各种bug汇总 （x5内核） <a href="http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/">http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/</a></p>
<p>因为微信浏览器屏蔽了一部分链接图片，所以需要引导用户去打开新页面，可以用以下方式判断微信浏览器的ua</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixn()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后端判断也很简单，比如php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixin()&#123;</span><br><span class="line">    if ( strpos($_SERVER[&#x27;HTTP_USER_AGENT&#x27;], &#x27;MicroMessenger&#x27;) !== false ) &#123;</span><br><span class="line">            return true;</span><br><span class="line">    &#125;  </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/31">https://github.com/maxzhang/maxzhang.github.com/issues/31</a> 微信浏览器踩坑，来自maxZhang <a href="https://github.com/maxzhang">https://github.com/maxzhang</a></p>
<h4 id="【UC浏览器】video标签脱离文档流"><a href="#【UC浏览器】video标签脱离文档流" class="headerlink" title="【UC浏览器】video标签脱离文档流"></a>【UC浏览器】video标签脱离文档流</h4><p>场景：标签的父元素(祖辈元素)设置transform样式后，标签会脱离文档流。</p>
<p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p>
<p>Demo：<a href="http://t.cn/zj3xiyu">http://t.cn/zj3xiyu</a></p>
<p>解决方案：不使用transform属性。translate用top、margin等属性替代。</p>
<h4 id="【UC浏览器】video标签总在最前"><a href="#【UC浏览器】video标签总在最前" class="headerlink" title="【UC浏览器】video标签总在最前"></a>【UC浏览器】video标签总在最前</h4><p>场景：标签总是在最前（可以理解为video标签的z-index属性是Max）。</p>
<p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p>
<h4 id="【UC浏览器】position-fixed-属性在UC浏览器的奇葩现象"><a href="#【UC浏览器】position-fixed-属性在UC浏览器的奇葩现象" class="headerlink" title="【UC浏览器】position:fixed 属性在UC浏览器的奇葩现象"></a>【UC浏览器】position:fixed 属性在UC浏览器的奇葩现象</h4><p>场景：设置了position: fixed 的元素会遮挡z-index值更高的同辈元素。</p>
<p>　　　在8.6的版本,这个情况直接出现。</p>
<p>　　　在8.7之后的版本,当同辈元素的height大于713这个「神奇」的数值时,才会被遮挡。</p>
<p>测试环境：UC浏览器 8.8_beta/8.7/8.6 + Android 2.3/4.0 。</p>
<p>Demo：<a href="http://t.cn/zYLTSg6">http://t.cn/zYLTSg6</a></p>
<h4 id="【UC浏览器】rem-不能正确计算的问题"><a href="#【UC浏览器】rem-不能正确计算的问题" class="headerlink" title="【UC浏览器】rem 不能正确计算的问题"></a>【UC浏览器】rem 不能正确计算的问题</h4><p>场景：使用以下代码，横竖屏操作后，rem并没有被重新计算，一开始以为是页面没有重绘，强制重绘页面后，发现问题并没有解决。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (doc, win) &#123;</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">      resizeEvt = &#x27;orientationchange&#x27; in window ? &#x27;orientationchange&#x27; : &#x27;resize&#x27;,</span><br><span class="line">      recalc = function () &#123;</span><br><span class="line">          var clientWidth = docEl.clientWidth;</span><br><span class="line">          if (!clientWidth) return;</span><br><span class="line">          docEl.style.fontSize = 100 * (clientWidth / 320) + &#x27;px&#x27;;</span><br><span class="line">      &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  if (!doc.addEventListener) return;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">  doc.addEventListener(&#x27;DOMContentLoaded&#x27;, recalc, false);</span><br><span class="line">&#125;)(document, window);</span><br></pre></td></tr></table></figure>

<p>测试环境：UC浏览器 V10.9 + Android 6.0+ 。</p>
<p>解决方案：手动在head中插入style，给html设置font-size,并使用 !important 增加优先级，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (doc, win) &#123;</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">      resizeEvt = &#x27;orientationchange&#x27; in window ? &#x27;orientationchange&#x27; : &#x27;resize&#x27;,</span><br><span class="line">      recalc = function () &#123;</span><br><span class="line">          var clientWidth = docEl.clientWidth;</span><br><span class="line">          if (!clientWidth) return;</span><br><span class="line">          var style;</span><br><span class="line">          if(style=document.getElementById(&quot;hackUcRem&quot;))&#123;</span><br><span class="line">              style.parentNode.removeChild(style);</span><br><span class="line">          &#125;</span><br><span class="line">          style = document.createElement(&quot;style&quot;);</span><br><span class="line">          style.id=&quot;hackUcRem&quot;;</span><br><span class="line">          document.head.appendChild(style);</span><br><span class="line">          style.appendChild(document.createTextNode(&quot;html&#123;font-size:&quot; + 100 * (clientWidth / 320) + &quot;px !important;&#125;&quot;));</span><br><span class="line">          docEl.style.fontSize = 100 * (clientWidth / 320) + &#x27;px&#x27;;</span><br><span class="line">      &#125;;</span><br><span class="line">  recalc();</span><br><span class="line">  if (!doc.addEventListener) return;</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">  doc.addEventListener(&#x27;DOMContentLoaded&#x27;, recalc, false);</span><br><span class="line">&#125;)(document, window);</span><br></pre></td></tr></table></figure>

<h4 id="【QQ手机浏览器】不支持HttpOnly"><a href="#【QQ手机浏览器】不支持HttpOnly" class="headerlink" title="【QQ手机浏览器】不支持HttpOnly"></a>【QQ手机浏览器】不支持HttpOnly</h4><p>场景：带有HttpOnly属性的Cookie，在QQ手机浏览器版本从4.0开始失效。JavaScript可以直接读取设置了HttpOnly的Cookie值。</p>
<p>测试环境：QQ手机浏览器 4.0/4.1/4.2 + Android 4.0 。</p>
<h4 id="【MIUI原生浏览器】浏览器地址栏hash不改变"><a href="#【MIUI原生浏览器】浏览器地址栏hash不改变" class="headerlink" title="【MIUI原生浏览器】浏览器地址栏hash不改变"></a>【MIUI原生浏览器】浏览器地址栏hash不改变</h4><p>场景：location.hash 被赋值后，地址栏的地址不会改变。</p>
<p>　　　但实际上 location.href 已经更新了，通过JavaScript可以顺利获取到更新后的地址。</p>
<p>　　　虽然不影响正常访问，但用户无法将访问过程中改变hash后的地址存为书签。</p>
<p>测试环境：MIUI 4.0</p>
<h4 id="【Chrome-Mobile】fixed元素无法点击"><a href="#【Chrome-Mobile】fixed元素无法点击" class="headerlink" title="【Chrome Mobile】fixed元素无法点击"></a>【Chrome Mobile】fixed元素无法点击</h4><p>场景：父元素设置position: fixed;</p>
<p>　　　子元素设置position: absolute;</p>
<p>　　　此时，如果父元素/子元素还设置了overflow: hidden 则出现“父元素遮挡该子元素“的bug。</p>
<p>　　　视觉(view)层并没有出现遮挡，只是无法触发绑定在该子元素上的事件。可理解为：「看到点不到」。</p>
<p>补充： 页面往下滚动，触发position: fixed;的特性时，才会出现这个bug，在最顶不会出现。</p>
<p>测试平台： 小米1S，Android4.0的Chrome18</p>
<p>demo： <a href="http://maplejan.sinaapp.com/demo/fixed_chromemobile.html">http://maplejan.sinaapp.com/demo/fixed_chromemobile.html</a></p>
<p>解决办法： 把父元素和子元素的overflow: hidden去掉。</p>
<p>以上来源于 <a href="http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html">http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html</a></p>
<h4 id="库的使用实践"><a href="#库的使用实践" class="headerlink" title="库的使用实践"></a>库的使用实践</h4><h5 id="zepto-js"><a href="#zepto-js" class="headerlink" title="zepto.js"></a>zepto.js</h5><p><a href="http://chaoskeh.com/blog/some-experience-of-using-zepto.html">zepto的一篇使用注意点讲解</a></p>
<p><a href="http://blog.youyo.name/archives/zepto-tap-click-through-research.html">zepto的著名的tap“点透”bug</a></p>
<p><a href="http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto源码注释</a></p>
<h5 id="使用zeptojs内嵌到android-webview影响正常滚动时"><a href="#使用zeptojs内嵌到android-webview影响正常滚动时" class="headerlink" title="使用zeptojs内嵌到android webview影响正常滚动时"></a>使用zeptojs内嵌到android webview影响正常滚动时</h5><p><a href="https://github.com/madrobby/zepto/blob/master/src/touch.js">https://github.com/madrobby/zepto/blob/master/src/touch.js</a> 去掉61行,其实就是使用原生的滚动</p>
<h5 id="iscroll4"><a href="#iscroll4" class="headerlink" title="iscroll4"></a>iscroll4</h5><p>iscroll4 的几个bug(来自 <a href="http://www.mansonchor.com/blog/blog_detail_64.html">http://www.mansonchor.com/blog/blog_detail_64.html</a> 内有详细讲解)</p>
<p>1.滚动容器点击input框、select等表单元素时没有响应】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onBeforeScrollStart: function (e) &#123; e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onBeforeScrollStart: function (e) &#123; var nodeType = e.explicitOriginalTarget © e.explicitOriginalTarget.nodeName.toLowerCase():(e.target © e.target.nodeName.toLowerCase():&#x27;&#x27;);if(nodeType !=&#x27;select&#x27;&amp;&amp; nodeType !=&#x27;option&#x27;&amp;&amp; nodeType !=&#x27;input&#x27;&amp;&amp; nodeType!=&#x27;textarea&#x27;) e.preventDefault(); &#125;</span><br></pre></td></tr></table></figure>

<p>2.往iscroll容器内添加内容时，容器闪动的bug</p>
<p>源代码的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">has3d = &#x27;WebKitCSSMatrix&#x27; in window &amp;&amp; &#x27;m11&#x27; in new WebKitCSSMatrix()</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">has3d = false</span><br></pre></td></tr></table></figure>

<p>在配置iscroll时，useTransition设置成false</p>
<p>3.过长的滚动内容，导致卡顿和app直接闪退</p>
<ol>
<li><p>不要使用checkDOMChanges。虽然checkDOMChanges很方便，定时检测容器长度是否变化来refresh，但这也意味着你要消耗一个Interval的内存空间</p>
</li>
<li><p>隐藏iscroll滚动条，配置时设置hScrollbar和vScrollbar为false。</p>
</li>
<li><p>不得已的情况下，去掉各种效果，momentum、useTransform、useTransition都设置为false</p>
<p>4.左右滚动时，不能正确响应正文上下拉动</p>
</li>
</ol>
<p>iscroll的闪动问题也与渲染有关系，可以参考 <a href="http://www.iunbug.com/archives/2012/09/19/411.html">运用webkit绘制渲染页面原理解决iscroll4闪动的问题</a> <a href="http://blog.csdn.net/gcz564539969/article/details/9156141">iscroll4升级到5要注意的问题</a></p>
<h5 id="iscroll或者滚动类框架滚动时不点击的方法"><a href="#iscroll或者滚动类框架滚动时不点击的方法" class="headerlink" title="iscroll或者滚动类框架滚动时不点击的方法"></a>iscroll或者滚动类框架滚动时不点击的方法</h5><p>可以使用以下的解决方案(利用data-setapi)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a ontouchmove=&quot;this.s=1&quot; ontouchend=&quot;this.s || window.open(this.dataset.href),this.s=0&quot; target=&quot;_blank&quot; data-href=&quot;http://www.hao123.com/topic/pig&quot;&gt;黄浦江死猪之谜&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>也可以用这种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).delegate(&#x27;[data-target]&#x27;, &#x27;touchmove&#x27;, function () &#123;</span><br><span class="line">    $(this).attr(&#x27;moving&#x27;,&#x27;moving&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(document).delegate(&#x27;[data-target]&#x27;, &#x27;touchend&#x27;, function () &#123;</span><br><span class="line">    if ($(this).attr(&#x27;moving&#x27;) !== &#x27;moving&#x27;) &#123;</span><br><span class="line">     //做你想做的。。</span><br><span class="line">        $(this).attr(&#x27;moving&#x27;, &#x27;notMoving&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $(this).attr(&#x27;moving&#x27;, &#x27;notMoving&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="移动端字体问题"><a href="#移动端字体问题" class="headerlink" title="移动端字体问题"></a>移动端字体问题</h4><p>[知乎专栏 - <a href="http://zhuanlan.zhihu.com/zhezhexiong/19565895">无线手册-4] dp、sp、px傻傻分不清楚[完整]</a></p>
<p><a href="http://www.sencha.com/blog/resolution-independent-mobile-ui">Resolution Independent Mobile UI</a></p>
<p><a href="http://stackoverflow.com/questions/12058574/pixel-density-retina-display-and-font-size-in-css">Pixel density, retina display and font-size in CSS</a></p>
<p><a href="http://bjango.com/articles/min-device-pixel-ratio/">Device pixel density tests</a></p>
<h4 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h4><p>手机浏览器也是浏览器，在ajax调用外部api的时候也存在跨域问题。当然利用 PhoneGap 打包后，由于协议不一样就不存在跨域问题了。 但页面通常是需要跟后端进行调试的。一般会报类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load XXX</span><br><span class="line">Origin null is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://. Request header field Content-Type is not allowed by Access-Control-Allow-Headers.&quot;</span><br></pre></td></tr></table></figure>

<p>这时候可以让后端加上两个http头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin &quot;*&quot;</span><br><span class="line">Access-Control-Allow-Headers &quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span><br></pre></td></tr></table></figure>

<p>第一个头可以避免跨域问题，第二个头可以方便ajax请求设置content-type等配置项</p>
<p>这个会存在一些安全问题，可以参考这个问题的讨论 <a href="http://www.zhihu.com/question/22992229">http://www.zhihu.com/question/22992229</a></p>
<h4 id="PhoneGap-部分"><a href="#PhoneGap-部分" class="headerlink" title="PhoneGap 部分"></a>PhoneGap 部分</h4><p><a href="http://snoopyxdy.blog.163.com/blog/static/60117440201432491123551">http://snoopyxdy.blog.163.com/blog/static/60117440201432491123551</a> 这里有一大堆snoopy总结的phonggap开发坑</p>
<h4 id="Should-not-happen-no-rect-based-test-nodes-found"><a href="#Should-not-happen-no-rect-based-test-nodes-found" class="headerlink" title="Should not happen: no rect-based-test nodes found"></a>Should not happen: no rect-based-test nodes found</h4><p>在 Android 项目中的 assets 中的 HTML 页面中加入以下代码，便可解决问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window,html,body&#123;</span><br><span class="line">    overflow-x:hidden !important;</span><br><span class="line">    -webkit-overflow-scrolling: touch !important;</span><br><span class="line">    overflow: scroll !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/12090899/android-webview-jellybean-should-not-happen-no-rect-based-test-nodes-found">http://stackoverflow.com/questions/12090899/android-webview-jellybean-should-not-happen-no-rect-based-test-nodes-found</a></p>
<h4 id="拿联系人的时候报-ContactFindOptions-is-not-defined"><a href="#拿联系人的时候报-ContactFindOptions-is-not-defined" class="headerlink" title="拿联系人的时候报 ContactFindOptions is not defined"></a>拿联系人的时候报 ContactFindOptions is not defined</h4><p>出现这个问题可能是因为 Navigator 取 contacts 时绑定的 window.onload</p>
<p>注意使用 PhoneGap 的 API 时，一定要在 devicereay 事件的处理函数中使用 API</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);</span><br><span class="line"></span><br><span class="line">function onDeviceReady() &#123;    </span><br><span class="line">    callFetchContacts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function callFetchContacts()&#123;</span><br><span class="line">var options = new ContactFindOptions();</span><br><span class="line">options.multiple = true;</span><br><span class="line">var fields       = [&quot;displayName&quot;, &quot;name&quot;,&quot;phoneNumbers&quot;];</span><br><span class="line">navigator.contacts.find(fields, onSuccess, onError,options);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="移动端适配：font-size"><a href="#移动端适配：font-size" class="headerlink" title="移动端适配：font-size"></a>移动端适配：font-size</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html&#123;font-size:10px&#125;</span><br><span class="line">@media screen and (min-width:321px) and (max-width:375px)&#123;html&#123;font-size:11px&#125;&#125;</span><br><span class="line">@media screen and (min-width:376px) and (max-width:414px)&#123;html&#123;font-size:12px&#125;&#125;</span><br><span class="line">@media screen and (min-width:415px) and (max-width:639px)&#123;html&#123;font-size:15px&#125;&#125;</span><br><span class="line">@media screen and (min-width:640px) and (max-width:719px)&#123;html&#123;font-size:20px&#125;&#125;</span><br><span class="line">@media screen and (min-width:720px) and (max-width:749px)&#123;html&#123;font-size:22.5px&#125;&#125;</span><br><span class="line">@media screen and (min-width:750px) and (max-width:799px)&#123;html&#123;font-size:23.5px&#125;&#125;</span><br><span class="line">@media screen and (min-width:800px)&#123;html&#123;font-size:25px&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/kkk0526/article/details/9836369/">在 iOS 应用中直接跳转到 AppStore 的方法</a></p>
<p><strong>移动端避免使用fixed定位</strong>，并且避免同时有fixed和输入框同时出现</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="https://book.douban.com/subject/20390374/">《响应式Web设计》</a></p>
<p><a href="https://book.douban.com/subject/6025285/">《 HTML5 与 CSS3 权威指南》</a></p>
<h4 id="获取安卓手机版本"><a href="#获取安卓手机版本" class="headerlink" title="获取安卓手机版本"></a>获取安卓手机版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var u = navigator.userAgent;</span><br><span class="line">var arr = u.split(&#x27;;&#x27;)</span><br><span class="line">console.log(arr)</span><br><span class="line">for(var i in arr) &#123;</span><br><span class="line">    if(arr[i].indexOf(&#x27;Android&#x27;) &gt; -1) &#123;</span><br><span class="line">        console.log(arr[i]);</span><br><span class="line">        var arr2 = arr[i].trim().split(&#x27; &#x27;);</span><br><span class="line">        console.log(arr2);</span><br><span class="line">        var version = arr2[1].charAt(0);</span><br><span class="line">        console.log(version)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取设备dpr"><a href="#获取设备dpr" class="headerlink" title="获取设备dpr"></a>获取设备dpr</h4><p><a href="https://blog.csdn.net/xueli_2017/article/details/91492971">设备像素比（devicePixelRatio）</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.devicePixelRatio</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html">devicePixelRatio</a></li>
<li><a href="https://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html">More about devicePixelRatio</a></li>
<li><a href="https://www.quirksmode.org/mobile/viewports2.html">A tale of two viewports — part two</a></li>
</ul>
<h4 id="获取设备宽度"><a href="#获取设备宽度" class="headerlink" title="获取设备宽度"></a>获取设备宽度</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// alert($(window).width())</span><br><span class="line"></span><br><span class="line">// var w = $(&quot;#to-withdraw&quot;).width()</span><br><span class="line">// alert(w)</span><br></pre></td></tr></table></figure>



<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/-webkit-device-pixel-ratio">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/-webkit-device-pixel-ratio</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution">https://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution</a></p>
<p><a href="https://blog.csdn.net/wys997/article/details/111380796">教你@media媒体查询来适配ipad iphone5678plus 各种屏幕</a></p>
<h4 id="移动端媒体查询media的设置"><a href="#移动端媒体查询media的设置" class="headerlink" title="移动端媒体查询media的设置"></a>移动端媒体查询media的设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; rel=&quot;stylesheet/less&quot; type=&quot;text/less&quot; scoped&gt;</span><br><span class="line">  /*iPhone6/7/8*/</span><br><span class="line">  @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*iPhone6/7/8 Plus*/</span><br><span class="line">  @media only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*iPhone X*/</span><br><span class="line">  @media only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-device-pixel-ratio: 3) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*移动端竖屏 css*/</span><br><span class="line">  @media only screen and (orientation: portrait) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*移动端横屏 css*/</span><br><span class="line">  @media only screen and (orientation: landscape) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断ipad */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* ipad横屏 */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* ipad竖屏 */</span><br><span class="line">  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断iphone5 */ /* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 判断iphone4-iphone4s */ /* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">  @media only screen and (min-device-width: 320px) and (max-device-width: 480px) &#123;</span><br><span class="line">    /* .属性名&#123;</span><br><span class="line">      ...样式</span><br><span class="line">    &#125; */</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>@media媒体查询 这功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的web页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 判断ipad */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* ipad横屏 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)</span><br><span class="line">and (orientation : landscape)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* ipad竖屏 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 768px)</span><br><span class="line">and (max-device-width : 1024px)</span><br><span class="line">and (orientation : portrait)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* 判断iphone5 *//* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 320px)</span><br><span class="line">and (max-device-width : 568px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* 判断iphone4-iphone4s *//* 横屏竖屏判断方法与ipad一样 */</span><br><span class="line">@media only screen</span><br><span class="line">and (min-device-width : 320px)</span><br><span class="line">and (max-device-width : 480px)&#123;</span><br><span class="line">/* style */</span><br><span class="line">&#125;</span><br><span class="line">/* iphone5分辨率 */</span><br><span class="line">screen Width = 320px (css像素)</span><br><span class="line">screen Height = 568px (css像素)</span><br><span class="line">screen Width = 640px (实际像素)</span><br><span class="line">screen Height = 1136px (实际像素)</span><br><span class="line">Device-pixel-ratio:2</span><br><span class="line">/* iphone4-iphone4s分辨率 */</span><br><span class="line">screen Width = 320px (css像素)</span><br><span class="line">screen Height = 480px (css像素)</span><br><span class="line">screen Width = 640px (实际像素)</span><br><span class="line">screen Height = 960px (实际像素)</span><br><span class="line">Device-pixel-ratio:2</span><br></pre></td></tr></table></figure>



<p>连接手机到电脑，传输文件时，不能两台手机同时连电脑，会识别不出来</p>
<p><a href="https://blog.csdn.net/g1437353759/article/details/118574134">Media媒体查询使用大全</a></p>
<p><a href="https://www.php.cn/css-tutorial-462277.html">详解CSS中的Media媒体查询</a></p>
<p><a href="https://www.jb51.net/article/262042.htm">Android Studio模拟器运行apk文件</a></p>
<p><a href="https://blog.csdn.net/qq_48211069/article/details/123918040">Android Studio模拟器如何运行apk文件</a></p>
<p><a href="https://blog.csdn.net/weixin_64094652/article/details/126032471">adb 出现 adb.exe: more than one device/emulator 解决方法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">依次输入以下命令，再重新启动模拟器</span><br><span class="line"></span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">adb remount</span><br></pre></td></tr></table></figure>

<p>如果显示以下提示，表示重启成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br></pre></td></tr></table></figure>

<p>然后重新输入以下命令完成apk文件的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install base.apk</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>工作笔记</tag>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端初中高+资深+专家</title>
    <url>/2021/01/21/web%E5%89%8D%E7%AB%AF%E5%88%9D%E4%B8%AD%E9%AB%98-%E8%B5%84%E6%B7%B1-%E4%B8%93%E5%AE%B6/</url>
    <content><![CDATA[<p>课程网址：<a href="https://www.bilibili.com/video/av46236917?from=search&seid=11530041288730825105">【极客学院】web前端工程师 初级+中级+高级+资深+专家级（五部分完）</a></p>
<h3 id="HTML5与HTML4的区别"><a href="#HTML5与HTML4的区别" class="headerlink" title="HTML5与HTML4的区别"></a>HTML5与HTML4的区别</h3><h4 id="一、推出的理由及目标"><a href="#一、推出的理由及目标" class="headerlink" title="一、推出的理由及目标"></a>一、推出的理由及目标</h4><p>HTML5的出现，对于Web来说意义是非常重大的，因为他的意图是想要把目前Web上存在的各种问题一并解决掉了。</p>
<ul>
<li><p>Web浏览器之间的兼容性很低</p>
</li>
<li><p>文档结构不够明确</p>
</li>
<li><p>Web应用程序的功能受到了限制</p>
<p>世界知名浏览器厂商对HTML5的支持<br>微软、Google、苹果、Opera、Mozilla</p>
</li>
</ul>
<h4 id="二、语法的改变"><a href="#二、语法的改变" class="headerlink" title="二、语法的改变"></a>二、语法的改变</h4><ul>
<li>内容类型</li>
<li>DOCTYPE声明</li>
<li>指定字符编码</li>
<li>可以省略标记的元素</li>
<li>具有boolean值的属性</li>
<li>省略引号</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>可省略引号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; checked=checked&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三、新增的元素和废除的元素"><a href="#三、新增的元素和废除的元素" class="headerlink" title="三、新增的元素和废除的元素"></a>三、新增的元素和废除的元素</h4><ul>
<li><p>新增的结构元素</p>
<p>section、article、aside、header、hgroup、footer、nav、figure</p>
</li>
<li><p>新增的其他元素<br>video、audio、embed、mark、progress、meter、time、ruby、rt、rp、wbr、canvas、command、details、datalist、datagrid、keygen、output、source、menu</p>
</li>
<li><p>新增的input元素的类型<br>email、url、number、range、Date Pickers</p>
</li>
</ul>
<h4 id="四、新增的属性和废除的属性"><a href="#四、新增的属性和废除的属性" class="headerlink" title="四、新增的属性和废除的属性"></a>四、新增的属性和废除的属性</h4><ul>
<li>contentEditable属性</li>
<li>designMode属性</li>
<li>hidden属性</li>
<li>spellcheck属性</li>
<li>tabindex属性</li>
</ul>
<blockquote>
<p>hidden属性：hidden的元素不渲染</p>
</blockquote>
<p>tabindex为-1时按tab获取不了焦点，但开发中js可以获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;tabindex=&quot;&quot;1&quot;&gt;hello&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;tabindex=&quot;3&quot;&gt;hello&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;tabindex=&quot;2&quot;&gt;hello&lt;/a&gt;</span><br><span class="line">&lt;ul tabindex=&quot;-1&quot;&gt;</span><br><span class="line">	&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h4 id="五、全局属性"><a href="#五、全局属性" class="headerlink" title="五、全局属性"></a>五、全局属性</h4>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>听课笔记</category>
      </categories>
      <tags>
        <tag>听课笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn-笔记</title>
    <url>/2021/04/24/yarn%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://yarnpkg.com/">yarn官网</a></p>
<p><a href="https://www.yarnpkg.cn/">yarn中文官网</a></p>
<p><a href="http://yarnpkg.top/">yarn-中文官网</a></p>
<h4 id="全局安装yarn"><a href="#全局安装yarn" class="headerlink" title="全局安装yarn"></a>全局安装yarn</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>

<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>

<h4 id="启动开发环境服务"><a href="#启动开发环境服务" class="headerlink" title="启动开发环境服务"></a>启动开发环境服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="打包（生成静态文件）"><a href="#打包（生成静态文件）" class="headerlink" title="打包（生成静态文件）"></a>打包（生成静态文件）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<h4 id="创建React项目"><a href="#创建React项目" class="headerlink" title="创建React项目"></a><a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app">创建React项目</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<h4 id="添加React-Router"><a href="#添加React-Router" class="headerlink" title="添加React Router"></a>添加React Router</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom@6</span><br></pre></td></tr></table></figure>





<h4 id="使用Vite创建Vue项目"><a href="#使用Vite创建Vue项目" class="headerlink" title="使用Vite创建Vue项目"></a>使用Vite创建Vue项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">√ Project name: ... Vue3_yarn</span><br><span class="line">√ Package name: ... vue3-yarn</span><br><span class="line">√ Select a framework: » vue</span><br><span class="line">√ Select a variant: » vue-ts</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Vue3_yarn</span><br><span class="line">yarn</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure>



<h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">question name (yarn_test):</span><br><span class="line">question version (1.0.0):</span><br><span class="line">question description:</span><br><span class="line">question entry point (index.js):</span><br><span class="line">question repository url:</span><br><span class="line">question author:</span><br><span class="line">question license (MIT):</span><br><span class="line">question private:</span><br><span class="line">success Saved package.json</span><br></pre></td></tr></table></figure>

<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a><strong>添加依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>

<h3 id="将依赖项添加到不同的依赖类别中"><a href="#将依赖项添加到不同的依赖类别中" class="headerlink" title="将依赖项添加到不同的依赖类别中"></a>将依赖项添加到不同的依赖类别中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package] --dev  <span class="comment"># dev dependencies</span></span><br><span class="line">yarn add [package] --peer <span class="comment"># peer dependencies</span></span><br></pre></td></tr></table></figure>

<h4 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a><strong>更新依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>

<h4 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a><strong>删除依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<h4 id="根据package-json文件为项目安装所有依赖"><a href="#根据package-json文件为项目安装所有依赖" class="headerlink" title="根据package.json文件为项目安装所有依赖"></a><strong>根据package.json文件为项目安装所有依赖</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>

<h4 id="更新-Yarn-本体"><a href="#更新-Yarn-本体" class="headerlink" title="更新 Yarn 本体"></a>更新 Yarn 本体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">set</span> version latest</span><br><span class="line">yarn <span class="built_in">set</span> version from sources</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>包管理器</tag>
      </tags>
  </entry>
  <entry>
    <title>《React学习手册》-笔记</title>
    <url>/2021/10/15/%E3%80%8AReact%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C%E3%80%8B-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="第1章-初识React"><a href="#第1章-初识React" class="headerlink" title="第1章 初识React"></a>第1章 初识React</h3><h4 id="障碍和绊脚石"><a href="#障碍和绊脚石" class="headerlink" title="障碍和绊脚石"></a>障碍和绊脚石</h4><h4 id="React技术展望"><a href="#React技术展望" class="headerlink" title="React技术展望"></a>React技术展望</h4><h4 id="拥抱变化"><a href="#拥抱变化" class="headerlink" title="拥抱变化"></a>拥抱变化</h4><h4 id="文件资源"><a href="#文件资源" class="headerlink" title="文件资源"></a>文件资源</h4><h3 id="第2章-JavaScript新特性"><a href="#第2章-JavaScript新特性" class="headerlink" title="第2章 JavaScript新特性"></a>第2章 JavaScript新特性</h3><h4 id="ES6中的变量声明"><a href="#ES6中的变量声明" class="headerlink" title="ES6中的变量声明"></a>ES6中的变量声明</h4><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><h4 id="ES6转译"><a href="#ES6转译" class="headerlink" title="ES6转译"></a>ES6转译</h4><h4 id="ES6的对象和数组"><a href="#ES6的对象和数组" class="headerlink" title="ES6的对象和数组"></a>ES6的对象和数组</h4><h4 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h4><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h4 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import">import</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export">export</a></p>
<h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><h3 id="第3章-JavaScript函数式编程"><a href="#第3章-JavaScript函数式编程" class="headerlink" title="第3章  JavaScript函数式编程"></a>第3章  JavaScript函数式编程</h3><h4 id="什么是函数式声明"><a href="#什么是函数式声明" class="headerlink" title="什么是函数式声明"></a>什么是函数式声明</h4><h4 id="命令式和声明式"><a href="#命令式和声明式" class="headerlink" title="命令式和声明式"></a>命令式和声明式</h4><h4 id="函数式编程基本概念"><a href="#函数式编程基本概念" class="headerlink" title="函数式编程基本概念"></a>函数式编程基本概念</h4><h3 id="第4章-React进阶"><a href="#第4章-React进阶" class="headerlink" title="第4章 React进阶"></a>第4章 React进阶</h3><h4 id="独立页面"><a href="#独立页面" class="headerlink" title="独立页面"></a>独立页面</h4><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><h4 id="React元素"><a href="#React元素" class="headerlink" title="React元素"></a>React元素</h4><h4 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h4><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><h4 id="使用数据构造元素"><a href="#使用数据构造元素" class="headerlink" title="使用数据构造元素"></a>使用数据构造元素</h4><h4 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h4><h4 id="DOM渲染"><a href="#DOM渲染" class="headerlink" title="DOM渲染"></a>DOM渲染</h4><h3 id="第5章React与JSX"><a href="#第5章React与JSX" class="headerlink" title="第5章React与JSX"></a>第5章React与JSX</h3><h4 id="React元素与JSX"><a href="#React元素与JSX" class="headerlink" title="React元素与JSX"></a>React元素与JSX</h4><h4 id="JSX小技巧"><a href="#JSX小技巧" class="headerlink" title="JSX小技巧"></a>JSX小技巧</h4><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><h4 id="菜谱与JSX"><a href="#菜谱与JSX" class="headerlink" title="菜谱与JSX"></a>菜谱与JSX</h4><h4 id="Wepack简介"><a href="#Wepack简介" class="headerlink" title="Wepack简介"></a>Wepack简介</h4><h3 id="第6章-Props、State和组件树"><a href="#第6章-Props、State和组件树" class="headerlink" title="第6章 Props、State和组件树"></a>第6章 Props、State和组件树</h3><h4 id="属性验证"><a href="#属性验证" class="headerlink" title="属性验证"></a>属性验证</h4><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><h4 id="React的State管理"><a href="#React的State管理" class="headerlink" title="React的State管理"></a>React的State管理</h4><h4 id="组件树的内部State"><a href="#组件树的内部State" class="headerlink" title="组件树的内部State"></a>组件树的内部State</h4><h3 id="第7章-组件扩展"><a href="#第7章-组件扩展" class="headerlink" title="第7章 组件扩展"></a>第7章 组件扩展</h3><h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h4><h4 id="集成JavaScript脚本库"><a href="#集成JavaScript脚本库" class="headerlink" title="集成JavaScript脚本库"></a>集成JavaScript脚本库</h4><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><h4 id="在React之外管理State"><a href="#在React之外管理State" class="headerlink" title="在React之外管理State"></a>在React之外管理State</h4><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><h3 id="第8章-Redux"><a href="#第8章-Redux" class="headerlink" title="第8章 Redux"></a>第8章 Redux</h3><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h4><h4 id="Action生成器"><a href="#Action生成器" class="headerlink" title="Action生成器"></a>Action生成器</h4><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><h3 id="第9章-React-Redux"><a href="#第9章-React-Redux" class="headerlink" title="第9章 React Redux"></a>第9章 React Redux</h3><h4 id="显式传递State"><a href="#显式传递State" class="headerlink" title="显式传递State"></a>显式传递State</h4><h4 id="通过上下文传递Store"><a href="#通过上下文传递Store" class="headerlink" title="通过上下文传递Store"></a>通过上下文传递Store</h4><h4 id="表现层和容器组件"><a href="#表现层和容器组件" class="headerlink" title="表现层和容器组件"></a>表现层和容器组件</h4><h4 id="React-Redux的Provider"><a href="#React-Redux的Provider" class="headerlink" title="React Redux的Provider"></a>React Redux的Provider</h4><h4 id="React-Redux的connect函数"><a href="#React-Redux的connect函数" class="headerlink" title="React Redux的connect函数"></a>React Redux的connect函数</h4><h3 id="第10章-测试"><a href="#第10章-测试" class="headerlink" title="第10章 测试"></a>第10章 测试</h3><h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><h4 id="测试Redux"><a href="#测试Redux" class="headerlink" title="测试Redux"></a>测试Redux</h4><h4 id="测试React组件"><a href="#测试React组件" class="headerlink" title="测试React组件"></a>测试React组件</h4><h4 id="快照测试"><a href="#快照测试" class="headerlink" title="快照测试"></a>快照测试</h4><h4 id="代码覆盖率测试"><a href="#代码覆盖率测试" class="headerlink" title="代码覆盖率测试"></a>代码覆盖率测试</h4><h3 id="第11章-React-Router"><a href="#第11章-React-Router" class="headerlink" title="第11章 React Router"></a>第11章 React Router</h3><h4 id="集成Router"><a href="#集成Router" class="headerlink" title="集成Router"></a>集成Router</h4><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><h4 id="Router参数"><a href="#Router参数" class="headerlink" title="Router参数"></a>Router参数</h4><h3 id="第12章-React服务器端应用"><a href="#第12章-React服务器端应用" class="headerlink" title="第12章 React服务器端应用"></a>第12章 React服务器端应用</h3><h4 id="同构性和通用性"><a href="#同构性和通用性" class="headerlink" title="同构性和通用性"></a>同构性和通用性</h4><h4 id="通用颜色管理器"><a href="#通用颜色管理器" class="headerlink" title="通用颜色管理器"></a>通用颜色管理器</h4><h4 id="与服务器端交互"><a href="#与服务器端交互" class="headerlink" title="与服务器端交互"></a>与服务器端交互</h4>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>《Vue.js前端开发技术》</title>
    <url>/2020/06/15/%E3%80%8AVue-js%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E3%80%8B/</url>
    <content><![CDATA[<h2 id="第1章-Vue入门"><a href="#第1章-Vue入门" class="headerlink" title="第1章 Vue入门"></a>第1章 Vue入门</h2><p>Vue.js是构建Web界面的JavaScript库，也是一个通过简洁的API提供高效数据绑定和灵活组件的系统。</p>
<p>Weex</p>
<h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ol>
<li>轻量级的框架</li>
<li>双向数据绑定<br> 声明式渲染是数据双向绑定的主要体现，同样也是Vue.js的核心</li>
<li>指令</li>
<li>组件化<br> 是Vue.js最强大的功能之一，可大量减少代码编写量，组件还支持热重载（当我们做了修改时，不会刷新页面，只是对组件本身进行立刻重载，不会影响整个应用当前的状态。CSS也支持热重载。）</li>
<li>客户端路由<br> Vue-router的Vue.js官方的路由插件</li>
<li>状态管理<br> 就是一个单向的数据流,State驱动View的渲染，而用户对View进行操作产生Action,使State产生变化，从而使View重新渲染，形成一个单独的组件</li>
</ol>
<h4 id="Vue-js的优势"><a href="#Vue-js的优势" class="headerlink" title="Vue.js的优势"></a>Vue.js的优势</h4><p>与其他几个框架比，最轻量化</p>
<p>npm速度慢的话，可以使用淘宝镜像安装</p>
<h4 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h4><p>vue-cli脚手架是Vue.js提供的一个官方命令行工具，用于快速搭建大型单页应用</p>
<p>创建项目——进入项目目录安装依赖项——运行项目</p>
<h4 id="项目文件目录结构"><a href="#项目文件目录结构" class="headerlink" title="项目文件目录结构"></a>项目文件目录结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── build               ——保存webpack的基本配置</span><br><span class="line">├── config              ——保存项目基本配置</span><br><span class="line">├── node_modules        ——npm加载的项目依赖的模块</span><br><span class="line">├── src                 ——我们要开发的目录           </span><br><span class="line">├    |——assets          ——放置图片</span><br><span class="line">├    |——common          ——存放字体文件和通用的样式文件</span><br><span class="line">├    |——components      ——放组件文件</span><br><span class="line">├    |——App.vue         ——项目入口文件</span><br><span class="line">├── static              ——放置静态资源目录</span><br><span class="line">├── index.html          ——首页入口文件</span><br><span class="line">├── package.json        ——项目配置文件</span><br></pre></td></tr></table></figure>

<h4 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">created() &#123;&#125; ——&gt; mounted() &#123;&#125; ——&gt;  updated () &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h4><p>Model-View-ViewModelD 的缩写，是基于前端开发的架构模式<br><strong>专注于View层</strong><br>它的核心是MVVM中的VM，也就是ViewModel,负责连接View和Model，保证视图和数据的一致性<br><strong>ViewModel是Vue.js的核心，它是一个Vue实例。</strong></p>
<p>DOM Listeners 和Data Bindings看作两个工具，是实现双向绑定的关键。</p>
<h2 id="第2章-Vue数据绑定"><a href="#第2章-Vue数据绑定" class="headerlink" title="第2章 Vue数据绑定"></a>第2章 Vue数据绑定</h2><h3 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h3><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mustache 语法 “&#123;&#123; &#125;&#125;”</span><br></pre></td></tr></table></figure>

<h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;你好： &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">如果要插入html要使用v-html</span><br><span class="line"></span><br><span class="line">&lt;div v-html=&quot;message&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">message: &#x27;用户名&lt;input type=&quot;text&quot; value=&quot;&quot;/&gt;&#x27;</span><br><span class="line">（这里不支持换行，如果要换行，用单引号括起来后用+号连接</span><br></pre></td></tr></table></figure>
<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>Vue支持JavaScript的所有表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1&#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;</span><br><span class="line">&#123;&#123; number + 1&#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line">&lt;div v-bind:id=&quot;&#x27;list-&#x27; + id&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>但有一个限制，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; var a = 1&#125;&#125;</span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>只适用简单的表达式，复杂的可以使用computed</p>
<h3 id="响应式声明渲染机制"><a href="#响应式声明渲染机制" class="headerlink" title="响应式声明渲染机制"></a>响应式声明渲染机制</h3><p>Vue是一个响应式系统，模型(Model)层只是普通的JavaScript对象，修改它则视图(View)自动更新。Vue的工作原理是当把一个普通的JavaScript对象传给Vue实例的data选项时，Vue的工作原理是一个普通的JavaScript对象传给Vue实例的data选项时，Vue会遍历此对象的所有属性，在属性被访问和修改时通知变化，并把数据渲染进DOM。</p>
<h4 id="响应式声明渲染机制简介"><a href="#响应式声明渲染机制简介" class="headerlink" title="响应式声明渲染机制简介"></a>响应式声明渲染机制简介</h4><p>采用简洁的模板语法声明式地将数据渲染进DOM的系统。<br>使用v-model绑定输入框</p>
<h4 id="Vue属性绑定"><a href="#Vue属性绑定" class="headerlink" title="Vue属性绑定"></a>Vue属性绑定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href= &#123;&#123; url&#125;&#125;&gt;&lt;/a&gt;</span><br><span class="line">运行后会发现并没有生成超链接</span><br><span class="line"></span><br><span class="line">要使用v-bind绑定</span><br><span class="line"></span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Vue双向数据绑定"><a href="#Vue双向数据绑定" class="headerlink" title="Vue双向数据绑定"></a>Vue双向数据绑定</h4><p>一种是表达式绑定，一种是属性名也是一种指令，如v-model就是双向绑定</p>
<h3 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h3><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>computed，有缓存功能，可防止复杂计算逻辑多次调用引起的性能问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  totalPrice() &#123;</span><br><span class="line">    return (this.book.price*this.book.count)*this.discount + this.deliver</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">通过计算属性的使用，view层的代码会变得非常精简，且容易维护。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstName: &#x27;Foo&#x27;,</span><br><span class="line">lastName: &#x27;Bar&#x27;,</span><br><span class="line"></span><br><span class="line"> computed: &#123;</span><br><span class="line">  fullname: &#123;</span><br><span class="line">    //gettet</span><br><span class="line">    get() &#123;</span><br><span class="line">      return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    //setter</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">      var names = newValue.split(&#x27; &#x27;);</span><br><span class="line">      this.firstName = names[0];</span><br><span class="line">      this.lastName = names[names.length - 1];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在浏览器控制层输入vm.fullname = &#x27;menu Bar&#x27;，再输出vm.firstName是menu，vm.lastName是Bar。</span><br><span class="line">setter和getter的区别在于，setter是当computed这个属性的值变化时所触发。</span><br></pre></td></tr></table></figure>

<h4 id="计算属性与methods的区别"><a href="#计算属性与methods的区别" class="headerlink" title="计算属性与methods的区别"></a>计算属性与methods的区别</h4><p>计算属性只有在它的相关依赖发生变化时才回重新求值。这意味着只要book的属性还没有发生改变，多次访问totalPrice计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>相比之下，每当触发重新渲染时，调用方法将总是再次执行函数。为什么需要缓存？假设有一个性能开销比较大的计算属性，需要遍历一个巨大的数组并做大量的计算，然后又缓存，所以每次访问都要重新执行。如果你不需要缓存功能，就使用methods。</p>
<p>计算属性的特点：</p>
<ol>
<li>计算属性使数据处理结构清晰</li>
<li>依赖于数据，若数据更新，则处理结果自动更新</li>
<li>计算属性内部this指向vm实例</li>
<li>在模板调用时，直接写计算属性名即可。</li>
<li>常用的是getter方法，用于获取数据，也可以使用setter方法改变数据</li>
<li>相较于methods，不管改变依赖的数据是否改变，methods都会重新计算，但是依赖数据不变的时候，computed从缓存中获取，不会重新计算。</li>
</ol>
<h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><h4 id="Vue生命周期详解"><a href="#Vue生命周期详解" class="headerlink" title="Vue生命周期详解"></a>Vue生命周期详解</h4><p>activated：需要配合动态组件keep-alive属性使用，在动态组件初始化渲染的过程中调用该方法<br>deactivated：需要配合动态组件keep-alive属性使用，在动态组件初始化移出的过程中调用该方法</p>
<h4 id="Vue各生命周期适合开发的业务逻辑"><a href="#Vue各生命周期适合开发的业务逻辑" class="headerlink" title="Vue各生命周期适合开发的业务逻辑"></a>Vue各生命周期适合开发的业务逻辑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">created：进行AJAX请求异步数据的获取、初始化数据</span><br><span class="line">mounted：挂载元素内DOM节点的获取</span><br><span class="line">nextTick： 针对单一事件更新数据后立即操作DOM</span><br><span class="line">updated：数据更新的统一业务逻辑处理</span><br><span class="line">watch：监听具体数据变化，并做相应的处理</span><br></pre></td></tr></table></figure>

<h2 id="第3章-Vue指令"><a href="#第3章-Vue指令" class="headerlink" title="第3章 Vue指令"></a>第3章 Vue指令</h2><h3 id="Vue指令概述"><a href="#Vue指令概述" class="headerlink" title="Vue指令概述"></a>Vue指令概述</h3><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p v-if=&quot;flag&quot;&gt;插入或移除&lt;p&gt;标签&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h4 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;.&quot;表示特殊后缀，表示指令应该以特殊的方式绑定</span><br><span class="line">&lt;from v-on:submit.prevent=&quot;check&quot;&gt;&lt;/from&gt;</span><br><span class="line"></span><br><span class="line">.prevent 阻止表单默认的提交行为，相当于调用了事件的event.preventDefault()</span><br><span class="line"></span><br><span class="line">.stop 修饰符将阻止事件向上冒泡，相当于调用了事件的event.stopPropagation()</span><br></pre></td></tr></table></figure>

<h3 id="Vue指令详解"><a href="#Vue指令详解" class="headerlink" title="Vue指令详解"></a>Vue指令详解</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>根据表达式的值在DOM中生成或移除一个元素<br>注意：v-if是一个指令，需要添加到一个元素上才有效，如果想要切换多个元素，可以把<template>元素当作包装元素，使用v-if来切换元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;template&gt;是Vue的容器元素，目前不支持v-show，但支持v-if --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template v-if=&quot;flag&quot;&gt;</span><br><span class="line">  &lt;h1&gt;通知&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;限时免费&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;全场店庆5折起&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p><strong>v-else</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span v-if=&quot;ok&quot;&gt;</span><br><span class="line">  当ture时，显示本内容</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span v-else&gt;</span><br><span class="line">  当flase时，显示本内容</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p><strong>v-else-if</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span v-if=&quot;type== &#x27;A&#x27;&quot;&gt;</span><br><span class="line">  A</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span v-else-if=&quot;type== &#x27;B&#x27;&quot;&gt;</span><br><span class="line">  B</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span v-else-if=&quot;type== &#x27;C&#x27;&quot;&gt;</span><br><span class="line">  C</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span v-else&gt;</span><br><span class="line">  NOT A/B/C</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="指令v-for"><a href="#指令v-for" class="headerlink" title="指令v-for"></a>指令v-for</h3><p>根据一组数组的选项列表进行渲染，需要用一个item in items的特殊语法，items是源数据数组，item是数组元素迭代的别名。</p>
<h4 id="v-for-迭代数组"><a href="#v-for-迭代数组" class="headerlink" title="v-for 迭代数组"></a>v-for 迭代数组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in items&quot; :key=&quot;item.message&quot;&gt;</span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">items: [</span><br><span class="line">  &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="line">  &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong><a href="https://cn.vuejs.org/v2/guide/list.html">官网文档</a></strong></p>
<h4 id="v-for-迭代对象"><a href="#v-for-迭代对象" class="headerlink" title="v-for 迭代对象"></a>v-for 迭代对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（4）整数迭代</span><br><span class="line">&lt;span v-for=&quot;n in 10&quot;&gt; &#123;&#123; n &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h4 id="v-for-Template"><a href="#v-for-Template" class="headerlink" title="v-for Template"></a>v-for Template</h4><p>利用带有 v-for 的 <template> 来循环渲染一段包含多个元素的内容,template标签不显示，只是起到了包裹作用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;template v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;p class=&quot;divider&quot; role=&quot;presentation&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on指令绑定一个事件监听器<br><strong><a href="https://cn.vuejs.org/v2/guide/events.html">官网文档-事件处理</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">warn: function (message, event) &#123;</span><br><span class="line">  // 现在我们可以访问原生事件对象</span><br><span class="line">  if (event) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">  alert(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事件修饰符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>按键修饰符<br>.enter<br>.tab<br>.delete (捕获“删除”和“退格”键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right</p>
<p>系统修饰键<br>.ctrl<br>.alt<br>.shift<br>.meta</p>
<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>控制元素的显示隐藏，即控制元素的display，v-hide与v-show相反</p>
<p>v-if有更高的切换消耗，而v-show有更高的初始渲染消耗，因此，如果需要频繁切换，则使用v-show较好；<br>如果在运行时条件不大可能改变，则使用v-if较好。</p>
<h3 id="Vue动态样式绑定"><a href="#Vue动态样式绑定" class="headerlink" title="Vue动态样式绑定"></a>Vue动态样式绑定</h3><h4 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class"></a>v-bind绑定class</h4><p><strong><a href="https://cn.vuejs.org/v2/guide/class-and-style.html">官网文档-绑定HTML Class</a></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 采用对象表达式 --&gt;</span><br><span class="line">&lt;div</span><br><span class="line">  class=&quot;static&quot;</span><br><span class="line">  v-bind:class=&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span><br><span class="line">&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    &#x27;text-danger&#x27;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或：</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数组表达式 --&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  activeClass: &#x27;active&#x27;,</span><br><span class="line">  errorClass: &#x27;text-danger&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue表单输入绑定"><a href="#Vue表单输入绑定" class="headerlink" title="Vue表单输入绑定"></a>Vue表单输入绑定</h3><p><strong><a href="https://cn.vuejs.org/v2/guide/forms.html">官网文档-表单输入绑定</a></strong></p>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h5 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。</span><br><span class="line">你可以添加 lazy 修饰符，从而转为在 change 事件_之后_进行同步：</span><br><span class="line">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：</span><br><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br><span class="line">这通常很有用，因为即使在 type=&quot;number&quot; 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</span><br><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue事件处理"><a href="#Vue事件处理" class="headerlink" title="Vue事件处理"></a>Vue事件处理</h3><p><strong><a href="https://cn.vuejs.org/v2/guide/events.htm">官网文档-表单输入绑定</a></strong></p>
<h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>监听事件直接把事件写在v-on指令中.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;counter += 1&quot;&gt;Add 1&lt;/button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h4><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。<br>因此 v-on 还可以接收一个需要调用的方法名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h4><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&#x27;hi&#x27;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&#x27;what&#x27;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">传参</span><br></pre></td></tr></table></figure>
<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"> warn: function (message, event) &#123;</span><br><span class="line">    // 现在我们可以访问原生事件对象</span><br><span class="line">    if (event) &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>优化JS代码的34种方法</title>
    <url>/2021/09/10/%E4%BC%98%E5%8C%96JS%E4%BB%A3%E7%A0%81%E7%9A%8434%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="优化JS代码的34种方法"><a href="#优化JS代码的34种方法" class="headerlink" title="优化JS代码的34种方法"></a>优化JS代码的34种方法</h3><h4 id="1-含有多个条件的if语句"><a href="#1-含有多个条件的if语句" class="headerlink" title="1. 含有多个条件的if语句"></a>1. 含有多个条件的if语句</h4><p>我们可以在数组中存储多个值，也可以使用数据的includes方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// longhand</span><br><span class="line">if (x=== &#x27;abc&#x27; || x === &#x27;def&#x27; || x === &#x27;ghi&#x27; || x ===jkl&#x27;) &#123;</span><br><span class="line">	// logic</span><br><span class="line">&#125;</span><br><span class="line">// shorthand</span><br><span class="line">if ([ &#x27;abc &#x27;, &#x27;def&#x27;, &#x27;ghi&#x27;, &#x27;jkl&#x27; ].includes (x)) &#123;</span><br><span class="line">    // logic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-If-…-else的缩写法"><a href="#2-If-…-else的缩写法" class="headerlink" title="2. If … else的缩写法"></a>2. If … else的缩写法</h4><p>当我们在if-else条件下的逻辑比较简单时，我们可以使用三元条件运算符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let test: boolean;</span><br><span class="line"></span><br><span class="line">if(x &gt; 100)&#123;</span><br><span class="line">	test = true;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    test = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// shorthand</span><br><span class="line">let test = (x &gt; 10) ? true : false;</span><br><span class="line"></span><br><span class="line">// or we can use directly</span><br><span class="line">let test = x &gt; 10;</span><br><span class="line"></span><br><span class="line">console.log (test) ;</span><br></pre></td></tr></table></figure>

<p>如果包含嵌套条件，也可以使用这种方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = 300,</span><br><span class="line">test2 = (x &gt; 100) ? &#x27;greater 100&#x27; : (x&lt;50) ? &#x27;less 50&#x27; : &#x27;between50 and 100&#x27;;</span><br><span class="line"></span><br><span class="line">console.log (test2);    // &quot;greater than 100&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-定义变量"><a href="#3-定义变量" class="headerlink" title="3. 定义变量"></a>3. 定义变量</h4><p>当我们想要定义两个变量，并且这两个变量拥有相同的值或者类型的话，我们可以运用此种简略的表达方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let testl;</span><br><span class="line">let test2 = 1;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">let test1, test2 = 1;</span><br></pre></td></tr></table></figure>

<h4 id="4-关于Null-undefined的检查"><a href="#4-关于Null-undefined的检查" class="headerlink" title="4. 关于Null, undefined的检查"></a>4. 关于Null, undefined的检查</h4><p>当我们创建新的变量时，有时候需要检查我们引用变量的值是否为null或是undefined，js本身就有一种缩写法能实现这个功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">if (testl !== null || test1 !== undefined || test1 !== &#x27;&#x27;) &#123;</span><br><span class="line">	let test2 - test1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// shorthand</span><br><span class="line">let test2 = test1 || &#x27;&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="5-Null值检查与指定默认赋值"><a href="#5-Null值检查与指定默认赋值" class="headerlink" title="5. Null值检查与指定默认赋值"></a>5. Null值检查与指定默认赋值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let test1 = null,</span><br><span class="line">	test2 = test1 || &#x27;&#x27;;</span><br><span class="line">	</span><br><span class="line">console.log (&quot;null check&quot;, test2); // output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="6-Undefined值检查与默认赋值"><a href="#6-Undefined值检查与默认赋值" class="headerlink" title="6. Undefined值检查与默认赋值"></a>6. Undefined值检查与默认赋值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let testl = undefined,</span><br><span class="line">	test2 = testl l| &#x27;&#x27;;</span><br><span class="line">	</span><br><span class="line">console.log (&quot;undefined check&quot;, test2); // output will be &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>正常值检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let test1 = &#x27;test&#x27;,</span><br><span class="line">    test2 = test1 || &#x27;&#x27;;</span><br><span class="line">    </span><br><span class="line">console.log(test2);  // output: &#x27;test&#x27;</span><br></pre></td></tr></table></figure>

<p>（现在我们可以在4、5、6条中使用 ?? 运算符了）</p>
<h4 id="7-聚合运算符"><a href="#7-聚合运算符" class="headerlink" title="7. 聚合运算符"></a>7. 聚合运算符</h4><p>**??**是聚合运算符，如果左值为null或undefined，就返回右值。默认返回左值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const test= null ?? &#x27;default&#x27;;</span><br><span class="line">console.log(test);</span><br><span class="line">// expected output: &quot;default&quot;const test1 =0 ?? 2;</span><br><span class="line">console.log(test1);</span><br><span class="line">// expected output: 0</span><br></pre></td></tr></table></figure>

<h4 id="8-为多个变量赋值"><a href="#8-为多个变量赋值" class="headerlink" title="8. 为多个变量赋值"></a>8. 为多个变量赋值</h4><p>当我们处理多个变量，想为不同的变量赋不同的值时，就会真正发现这种简略的表达方式的实用之处了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">let test1, test2, test3;</span><br><span class="line">test1 = 1;</span><br><span class="line">test2 = 2;</span><br><span class="line">test3 = 3;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">let [testl, test2, test3] = [1，2，3];</span><br></pre></td></tr></table></figure>

<h4 id="9-赋值运算符简略的表达方式"><a href="#9-赋值运算符简略的表达方式" class="headerlink" title="9. 赋值运算符简略的表达方式"></a>9. 赋值运算符简略的表达方式</h4><p>通常，我们会在程序中处理大量的算术运算符。而对于JavaScript变量的赋值运算符来说，这是其中一个实用的技巧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Longhand</span><br><span class="line">testl = testl + l;</span><br><span class="line">test2 = test2 - 1;</span><br><span class="line">test3 = test3 *20;</span><br><span class="line"></span><br><span class="line">// Shorthand</span><br><span class="line">test1++;</span><br><span class="line">test2--;</span><br><span class="line">test3 *= 20;</span><br></pre></td></tr></table></figure>

<h4 id="10-判断变量是否存在的缩写法"><a href="#10-判断变量是否存在的缩写法" class="headerlink" title="10. 判断变量是否存在的缩写法"></a>10. 判断变量是否存在的缩写法</h4>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>七夕情人节</title>
    <url>/2018/08/17/%E4%B8%83%E5%A4%95%E6%83%85%E4%BA%BA%E8%8A%82/</url>
    <content><![CDATA[<p>祝大家七夕情人节快乐！ <a href="http://cms.xiaochao.me/yanyi/transition/" title="" target="">点这里前往</a></p>
<p>拿别人的素材，自己弄了一个玩玩，是有点简单。</p>
]]></content>
  </entry>
  <entry>
    <title>免费API接口</title>
    <url>/2021/01/08/%E5%85%8D%E8%B4%B9API%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>1、音乐电台接口：</p>
<p><a href="https://api.apiopen.top/musicBroadcasting">https://api.apiopen.top/musicBroadcasting</a></p>
<p>2、音乐电台详情接口：</p>
<p><a href="https://api.apiopen.top/musicBroadcastingDetails?channelname=public_tuijian_spring">https://api.apiopen.top/musicBroadcastingDetails?channelname=public_tuijian_spring</a></p>
<p>3、音乐排行榜接口：</p>
<p><a href="https://api.apiopen.top/musicRankings">https://api.apiopen.top/musicRankings</a></p>
<p>4、音乐排行榜详情接口：</p>
<p><a href="https://api.apiopen.top/musicRankingsDetails?type=1">https://api.apiopen.top/musicRankingsDetails?type=1</a></p>
<p>5、每日视频推荐接口：</p>
<p><a href="https://api.apiopen.top/todayVideo">https://api.apiopen.top/todayVideo</a></p>
<p>6、视频大纲获取接口：</p>
<p><a href="https://api.apiopen.top/videoHomeTab">https://api.apiopen.top/videoHomeTab</a></p>
<p>7、视频分类推荐接口：</p>
<p><a href="https://api.apiopen.top/videoCategory">https://api.apiopen.top/videoCategory</a></p>
<p><a href="https://api.apiopen.top/videoCategoryDetails?id=14">https://api.apiopen.top/videoCategoryDetails?id=14</a></p>
<p>9、根据ID推荐接口：</p>
<p><a href="https://api.apiopen.top/videoRecommend?id=127398">https://api.apiopen.top/videoRecommend?id=127398</a></p>
<p>10、新闻接口：</p>
<p><a href="https://www.apiopen.top/journalismApi">https://www.apiopen.top/journalismApi</a></p>
<p>11、随机推荐热门段子（包含文字、图片、GIF、视频）：</p>
<p><a href="https://www.apiopen.top/satinApi?type=1&amp;page=1">https://www.apiopen.top/satinApi?type=1&amp;page=1</a></p>
<p>12、随机推荐热门段子【神评版本】（包含文字、图片、GIF、视频）：</p>
<p><a href="https://www.apiopen.top/satinGodApi?type=1&amp;page=1">https://www.apiopen.top/satinGodApi?type=1&amp;page=1</a></p>
<p>13、随机推荐热门段子【神评版本】评论列表：</p>
<p><a href="https://www.apiopen.top/satinCommentApi?id=27610708&amp;page=1">https://www.apiopen.top/satinCommentApi?id=27610708&amp;page=1</a></p>
<p>14、热门小说推荐：</p>
<p><a href="https://www.apiopen.top/novelApi">https://www.apiopen.top/novelApi</a></p>
<p>15、小说搜索接口：</p>
<p><a href="https://www.apiopen.top/novelSearchApi?name=%E7%9B%97%E5%A2%93%E7%AC%94%E8%AE%B0">https://www.apiopen.top/novelSearchApi?name=盗墓笔记</a></p>
<p>16、小说详情接口：</p>
<p><a href="https://www.apiopen.top/novelInfoApi?name=%E7%9B%97%E5%A2%93%E7%AC%94%E8%AE%B0">https://www.apiopen.top/novelInfoApi?name=盗墓笔记</a></p>
<p>17、天气获取接口：</p>
<p><a href="https://www.apiopen.top/weatherApi?city=%E4%B8%8A%E6%B5%B7">https://www.apiopen.top/weatherApi?city=%E4%B8%8A%E6%B5%B7</a></p>
<p>18、美图获取接口：</p>
<p><a href="https://www.apiopen.top/meituApi?page=1">https://www.apiopen.top/meituApi?page=1</a></p>
<p>19、个性网名获取接口：</p>
<p><a href="https://www.apiopen.top/femaleNameApi?page=1">https://www.apiopen.top/femaleNameApi?page=1</a></p>
<p>20、用户注册接口：</p>
<p><a href="https://www.apiopen.top/createUser?key=00d91e8e0cca2b76f515926a36db68f5&amp;phone=13594347817&amp;passwd=123654">https://www.apiopen.top/createUser?key=00d91e8e0cca2b76f515926a36db68f5&amp;phone=13594347817&amp;passwd=123654</a></p>
<p>文章摘自：<a href="https://zhuanlan.zhihu.com/p/79463188">开放的免费API接口总结</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>免费API接口</category>
      </categories>
      <tags>
        <tag>免费API接口</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cmd命令删除文件夹</title>
    <url>/2019/12/06/%E4%BD%BF%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h6 id="1、删除空文件夹"><a href="#1、删除空文件夹" class="headerlink" title="1、删除空文件夹"></a>1、删除空文件夹</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> 空文件夹名</span><br></pre></td></tr></table></figure>
<h6 id="2、删除文件夹以及文件夹内所有内容（-s是删除所有子目录以及其中的内容；-q是在删除时，不提示yes-or-no）"><a href="#2、删除文件夹以及文件夹内所有内容（-s是删除所有子目录以及其中的内容；-q是在删除时，不提示yes-or-no）" class="headerlink" title="2、删除文件夹以及文件夹内所有内容（/s是删除所有子目录以及其中的内容；/q是在删除时，不提示yes or no）"></a>2、删除文件夹以及文件夹内所有内容（/s是删除所有子目录以及其中的内容；/q是在删除时，不提示yes or no）</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> /s/q 文件夹名</span><br></pre></td></tr></table></figure>
<h6 id="3、删除指定盘符的文件夹-删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示"><a href="#3、删除指定盘符的文件夹-删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示" class="headerlink" title="3、删除指定盘符的文件夹(删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示)"></a>3、删除指定盘符的文件夹(删除D盘multify文件夹下的my-multify文件夹以及子内容，并且不提示)</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> /s/q d:\multify\my-multify</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>前端CSS问题</title>
    <url>/2020/06/30/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/autoXingJY/p/11576469.html">html页面在苹果手机内，safari浏览器，微信中滑动不流畅问题解决方案</a></p>
<p><a href="https://blog.csdn.net/weixin_30896511/article/details/98370605">iPhone mobile safari fixed 元素滚动慢的问题处理</a></p>
<p><a href="http://www.wjhsh.net/autoXingJY-p-11576469.html">html页面在苹果手机内，safari浏览器，微信中滑动不流畅问题解决方案</a></p>
<h4 id="CSS控制字体自动转换成大写字母"><a href="#CSS控制字体自动转换成大写字母" class="headerlink" title="CSS控制字体自动转换成大写字母"></a>CSS控制字体自动转换成大写字母</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-transform: uppercase;</span><br></pre></td></tr></table></figure>



<h4 id="修改滚动条样式"><a href="#修改滚动条样式" class="headerlink" title="修改滚动条样式"></a>修改滚动条样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 滚动条样式 */</span><br><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  width: 2px;</span><br><span class="line">  height: 5px;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb&#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track&#123;</span><br><span class="line">  background-color: #001529;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="html5-video在固定的宽度和高度内铺满"><a href="#html5-video在固定的宽度和高度内铺满" class="headerlink" title="html5 video在固定的宽度和高度内铺满"></a>html5 video在固定的宽度和高度内铺满</h5><p>一般是视频的缩略图或者视频需要铺满我们固定的区域。<br>video ： poster是缩略图</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">video</span>&#123;</span><br><span class="line">    <span class="attribute">object-fit</span>:fill;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://developers.weixin.qq.com/community/develop/doc/0004403ab0c158af9f0adf1bd5b800">https://developers.weixin.qq.com/community/develop/doc/0004403ab0c158af9f0adf1bd5b800</a></p>
<p><a href="https://bbs.csdn.net/topics/392450329">https://bbs.csdn.net/topics/392450329</a></p>
<p><a href="https://blog.csdn.net/sepier/article/details/112780701">https://blog.csdn.net/sepier/article/details/112780701</a></p>
<h5 id="隐藏video的全屏按钮"><a href="#隐藏video的全屏按钮" class="headerlink" title="隐藏video的全屏按钮"></a>隐藏video的全屏按钮</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">video::-webkit-media-controls-fullscreen-button &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度"><a href="#video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度" class="headerlink" title="video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度"></a>video按全屏按钮后变形，因为只设置了宽度，要给video设置宽度和高度</h5><h4 id="Chrome下面查看placeholder的样式"><a href="#Chrome下面查看placeholder的样式" class="headerlink" title="Chrome下面查看placeholder的样式"></a><a href="https://blog.csdn.net/weixin_30657999/article/details/95180171">Chrome下面查看placeholder的样式</a></h4><p>F12——&gt;Settings——&gt;Preferences——&gt;Element——&gt;Show user agent shadow DOM（将这个勾选上）</p>
<h4 id="浏览器默认滚动条默认样式"><a href="#浏览器默认滚动条默认样式" class="headerlink" title="浏览器默认滚动条默认样式"></a>浏览器默认滚动条默认样式</h4><ol>
<li><p><strong>火狐和IE浏览器不可以修改浏览器滚动条默认样式</strong>，IE浏览器可以修改滚动条颜色，但不能修改宽度</p>
</li>
<li><p>谷歌和360浏览器修改默认样式代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /*滚动条样式*/</span><br><span class="line">::-webkit-scrollbar &#123;/*滚动条整体样式*/</span><br><span class="line">  width: 2px;     /*高宽分别对应横竖滚动条的尺寸*/</span><br><span class="line">  height: 2px;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;/*滚动条里面小方块*/</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  box-shadow: inset 0 0 5px rgba(0,0,0,0.2);</span><br><span class="line">  background: rgba(0,0,0,0.2);</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;/*滚动条里面轨道*/</span><br><span class="line">  box-shadow: inset 0 0 5px rgba(0,0,0,0);</span><br><span class="line">  border-radius: 0;</span><br><span class="line">  background: rgba(0,0,0,0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果只修改某个盒子的滚动条：</span><br><span class="line">.box-name::-webkit-scrollbar&#123;&#125;</span><br><span class="line">.box-name::-webkit-scrollbar-thumb&#123;&#125;</span><br><span class="line">.box-name::-webkit-scrollbar-track&#123;&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="获取已知元素的前一个元素"><a href="#获取已知元素的前一个元素" class="headerlink" title="获取已知元素的前一个元素"></a>获取已知元素的前一个元素</h4><p>css不能实现，使用js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;已知元素&quot;).prev(&quot;需要获取的元素&quot;)</span><br><span class="line">$(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="获取已知元素的后一个元素，使用"><a href="#获取已知元素的后一个元素，使用" class="headerlink" title="获取已知元素的后一个元素，使用 +"></a>获取已知元素的后一个元素，使用 +</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#certify .swiper-slide.swiper-slide-next + .swiper-slide&#123;</span><br><span class="line">    transform: translateX(-986px) scale(0.6) !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="safari浏览器下-input-select-表单的阴影"><a href="#safari浏览器下-input-select-表单的阴影" class="headerlink" title="safari浏览器下 input/select 表单的阴影"></a>safari浏览器下 input/select 表单的阴影</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">	-webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line">加上这个，单选/复选框按钮会不显示</span><br><span class="line">select&#123;</span><br><span class="line">	-webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iPhone-Safari浏览器字体放大-——解决方法"><a href="#iPhone-Safari浏览器字体放大-——解决方法" class="headerlink" title="iPhone Safari浏览器字体放大 ——解决方法"></a>iPhone Safari浏览器字体放大 ——解决方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-size-adjust: 100%;</span><br><span class="line">-webkit-text-size-adjust: 100%;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css1.png" alt="iPhone Safari浏览器字体放大"></p>
<h3 id="去除Safari浏览器下复选框和下拉框默认样式"><a href="#去除Safari浏览器下复选框和下拉框默认样式" class="headerlink" title="去除Safari浏览器下复选框和下拉框默认样式"></a>去除Safari浏览器下复选框和下拉框默认样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select&#123;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）"><a href="#表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）" class="headerlink" title="表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）"></a>表格中内容超出指定宽度隐藏，鼠标上移，在指定宽度内换行显示。（不需要js，css的hover解决）</h3><h5 id="需要在td里面加上span等标签来限制宽度和溢出隐藏"><a href="#需要在td里面加上span等标签来限制宽度和溢出隐藏" class="headerlink" title="需要在td里面加上span等标签来限制宽度和溢出隐藏"></a>需要在td里面加上span等标签来限制宽度和溢出隐藏</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table&#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: 30%;</span><br><span class="line">    border: 1px solid #666;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-collapse:collapse;</span><br><span class="line">&#125;</span><br><span class="line">th&#123;</span><br><span class="line">    height:40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">td&#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">tr&#123;</span><br><span class="line">    border-bottom: 1px solid #666;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td span &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width:160px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">td span:hover &#123;</span><br><span class="line">    white-space: inherit;</span><br><span class="line">    text-overflow: inherit;</span><br><span class="line">    overflow: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;简介&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;羊羊羊&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;25&lt;/td&gt;</span><br><span class="line">        &lt;td &gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">                79942 79942 79942 79942 79942 79942 79942 79942 79942 79942 79942 79942</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<h5 id="溢出隐藏："><a href="#溢出隐藏：" class="headerlink" title="溢出隐藏："></a>溢出隐藏：</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css2.png" alt="溢出隐藏"></p>
<h5 id="鼠标上移，换行显示全部内容："><a href="#鼠标上移，换行显示全部内容：" class="headerlink" title="鼠标上移，换行显示全部内容："></a>鼠标上移，换行显示全部内容：</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/css3.png" alt="鼠标上移，换行显示全部内容"></p>
<h3 id="css3超出宽度自动换行以及超出宽度显示…"><a href="#css3超出宽度自动换行以及超出宽度显示…" class="headerlink" title="css3超出宽度自动换行以及超出宽度显示…"></a>css3超出宽度自动换行以及超出宽度显示…</h3><h4 id="css3超出宽度自动换行，并且首行缩进2字符"><a href="#css3超出宽度自动换行，并且首行缩进2字符" class="headerlink" title="css3超出宽度自动换行，并且首行缩进2字符"></a>css3超出宽度自动换行，并且首行缩进2字符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">    word-break: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单行超出宽度显示…"><a href="#单行超出宽度显示…" class="headerlink" title="单行超出宽度显示…"></a>单行超出宽度显示…</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行"><a href="#多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行" class="headerlink" title="多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行"></a>多行超出宽度显示…以及要求显示几行或者说根据文字多少显示几行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: 2;  //控制显示几行</span><br><span class="line">    -webkit-box-orient: vertical;   //webbox方向</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CSS3强制英文、中文换行与不换行-强制英文换行"><a href="#CSS3强制英文、中文换行与不换行-强制英文换行" class="headerlink" title="CSS3强制英文、中文换行与不换行 强制英文换行"></a>CSS3强制英文、中文换行与不换行 强制英文换行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. word-break:break-all;只对英文起作用，以字母作为换行依据</span><br><span class="line">2. word-wrap:break-word; 只对英文起作用，以单词作为换行依据</span><br><span class="line">3. white-space:pre-wrap; 只对中文起作用，强制换行</span><br><span class="line">4. white-space:nowrap; 强制不换行，都起作用 </span><br><span class="line">5. white-space:nowrap; overflow:hidden; text-overflow:ellipsis;不换行，超出部分隐藏且以省略号形式出现（部分浏览器支持）</span><br></pre></td></tr></table></figure>

<h4 id="input输入框禁止显示历史记录"><a href="#input输入框禁止显示历史记录" class="headerlink" title="input输入框禁止显示历史记录"></a>input输入框禁止显示历史记录</h4><p>在输入input时会提示原来输入过的内容，还会出现下拉的历史记录，禁止这种情况(关闭自动提示)，只需在input中加入：<br>autocomplete=”off”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;  autocomplete=&quot;off&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>如果所有表单元素都不想使用自动提示功能，只需在表单form上设置autocomplete=off：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form autocomplete=&quot;off&quot;&gt; </span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/amao_aguai/article/details/83344455">参考博客</a></p>
<h4 id="【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景"><a href="#【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景" class="headerlink" title="【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景"></a>【解决方案】去掉谷歌浏览器获取焦点时默认的input、textarea的边框和背景</h4><p>1、使用Chrome的都知道，当鼠标焦点在input\textarea这些元素上时，Chrome默认的会给它们加上黄色的边框。 可以使用下面的css代码去掉所有元素的边框：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*:focus&#123;outline:none;&#125;</span><br></pre></td></tr></table></figure>

<p>2、Chrome默认用户可以控制textarea的大小，在CSS中加入下面一句就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea &#123;resize:none;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览器记住密码的情况下，解决密码输入框自动填充密码框（input-type-”password”-的问题）"><a href="#浏览器记住密码的情况下，解决密码输入框自动填充密码框（input-type-”password”-的问题）" class="headerlink" title="浏览器记住密码的情况下，解决密码输入框自动填充密码框（input type=”password” 的问题）"></a>浏览器记住密码的情况下，解决密码输入框自动填充密码框（input type=”password” 的问题）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名：&lt;input type=&#x27;text&#x27; autocomplete=&#x27;off&#x27;&gt;</span><br><span class="line">密码：&lt;input type=&#x27;password&#x27; autocomplete=&quot;new-password&quot; style=&quot;background-color: #fff!important;&quot; readonly onfocus=&quot;this.removeAttribute(&#x27;readonly&#x27;);&quot; onblur=&quot;this.setAttribute(&#x27;readonly&#x27;,true);&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="解决html页面英文和数字不自动换行，但中文就可以自动换行"><a href="#解决html页面英文和数字不自动换行，但中文就可以自动换行" class="headerlink" title="解决html页面英文和数字不自动换行，但中文就可以自动换行"></a>解决html页面英文和数字不自动换行，但中文就可以自动换行</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/huanhang.png" alt="处理换行"></p>
<h6 id="解决方法：添加css属性word-break-break-all"><a href="#解决方法：添加css属性word-break-break-all" class="headerlink" title="解决方法：添加css属性word-break: break-all;"></a>解决方法：添加css属性word-break: break-all;</h6><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AFCSS%E9%97%AE%E9%A2%98/huanhang2.png" alt="word-break: break-all"></p>
<h4 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure>

<h4 id="溢出文字省略号显示"><a href="#溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.content&#123;</span><br><span class="line">    /* display:block; */</span><br><span class="line">    width:200px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：如果是表格元素，需要加上display:block;</p>
</blockquote>
<p>处理IE浏览器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function($) &#123; </span><br><span class="line">    $.fn.ellipsis = function(enableUpdating)&#123; </span><br><span class="line">        var s = document.documentElement.style; </span><br><span class="line">        if (!(&#x27;textOverflow&#x27; in s || &#x27;OTextOverflow&#x27; in s)) &#123; </span><br><span class="line">            return this.each(function()&#123; </span><br><span class="line">                var el = $(this); </span><br><span class="line">                if(el.css(&quot;overflow&quot;) == &quot;hidden&quot;)&#123; </span><br><span class="line">                    var originalText = el.html(); </span><br><span class="line">                    var w = el.width(); </span><br><span class="line"></span><br><span class="line">                  var t = $(this.cloneNode(true)).hide().css(&#123; </span><br><span class="line">                      &#x27;position&#x27;: &#x27;absolute&#x27;, </span><br><span class="line">                      &#x27;width&#x27;: &#x27;auto&#x27;, </span><br><span class="line">                      &#x27;overflow&#x27;: &#x27;visible&#x27;, </span><br><span class="line">                      &#x27;max-width&#x27;: &#x27;inherit&#x27; </span><br><span class="line">                  &#125;); </span><br><span class="line">                  el.after(t); </span><br><span class="line"></span><br><span class="line">                  var text = originalText; </span><br><span class="line">                  while(text.length &gt; 0 &amp;&amp; t.width() &gt; el.width())&#123; </span><br><span class="line">                         text = text.substr(0, text.length - 1); </span><br><span class="line">                         t.html(text + &quot;...&quot;); </span><br><span class="line">                     &#125; </span><br><span class="line">                     el.html(t.html()); </span><br><span class="line"></span><br><span class="line">                     t.remove(); </span><br><span class="line"></span><br><span class="line">                     if(enableUpdating == true)&#123; </span><br><span class="line">                         var oldW = el.width(); </span><br><span class="line">                         setInterval(function()&#123; </span><br><span class="line">                             if(el.width() != oldW)&#123; </span><br><span class="line">                                 oldW = el.width(); </span><br><span class="line">                                 el.html(originalText); </span><br><span class="line">                                 el.ellipsis(); </span><br><span class="line">                             &#125; </span><br><span class="line">                         &#125;, 200); </span><br><span class="line">                     &#125; </span><br><span class="line">                 &#125; </span><br><span class="line">             &#125;); </span><br><span class="line">         &#125; else return this; </span><br><span class="line">     &#125;; </span><br><span class="line"> &#125;)(jQuery);</span><br></pre></td></tr></table></figure>

<p>要调整placeholder属性的样式，如果在谷歌浏览器下审核不了placeholder</p>
<p>解决方法：</p>
<ol>
<li>F12，打开控制台</li>
<li>在控制台右上角，选择三个点（更多选项图标），选择“Settings”</li>
<li>将Show user agent shadow DOM勾选上</li>
</ol>
<h4 id="文本域-textarea-的提示文字-placeholder-换行显示"><a href="#文本域-textarea-的提示文字-placeholder-换行显示" class="headerlink" title="文本域(textarea)的提示文字(placeholder)换行显示"></a>文本域(textarea)的提示文字(placeholder)换行显示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在需要换行的地方加上&amp;#13;&amp;#10;</span><br><span class="line"></span><br><span class="line">placeholder=&quot;请输入微信APP支付参数，便于技术查看，涉及字段如下：&amp;#13;&amp;#10;微信支付商户号：&amp;#13;&amp;#10;商户Key：&amp;#13;&amp;#10;微信AppID：&amp;#13;&amp;#10;AppSecret:&quot;</span><br></pre></td></tr></table></figure>

<h4 id="修改placeholder样式"><a href="#修改placeholder样式" class="headerlink" title="修改placeholder样式"></a>修改placeholder样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123; /* Chrome/Opera/Safari */ </span><br><span class="line">	color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder &#123; /* Firefox 19+ */  </span><br><span class="line">	color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123; /* IE 10+ */ </span><br><span class="line"> color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">:-moz-placeholder &#123; /* Firefox 18- */ </span><br><span class="line"> color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="textarea元素的placeholder属性不显示"><a href="#textarea元素的placeholder属性不显示" class="headerlink" title="textarea元素的placeholder属性不显示"></a>textarea元素的placeholder属性不显示</h4><blockquote>
<p>textarea的placeholder属性值不显示的原因可能是<code>&lt;textarea&gt;</code>与<code>&lt;/textarea&gt;</code>之间存在空格或者换行</p>
</blockquote>
<h4 id="placeholder兼容浏览器的解决方案"><a href="#placeholder兼容浏览器的解决方案" class="headerlink" title="placeholder兼容浏览器的解决方案"></a><a href="https://blog.csdn.net/xw505501936/article/details/52815876">placeholder兼容浏览器的解决方案</a></h4><blockquote>
<p>关于placeholder的使用，众所周知它是h5的新属性，所以IE9以下就别想用它了，不支持。 那么我们必须要低版本的浏览器，做一些降级处理的兼容，原理自然就是：提示语placeholder用其他方式替代显示咯。 以下是一小段兼容处理。 </p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;welcome to ixiewei world&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        body&#123;font:12px/1.5 &quot;\5FAE\8F6F\96C5\9ED1&quot;,&quot;\9ED1\4F53&quot;,Helvetica,Tahoma,arial,sans-serif; margin:0 auto; color:#333;&#125;</span><br><span class="line">        p,ul,ol,dl,dt,dd,h1,h2,h3,h4,h5,h6,form,input,select,button,textarea,iframe&#123;margin:0; padding:0;&#125;</span><br><span class="line">        .clearfix:after&#123;content:&quot;.&quot;;display:block;height:0;clear: both;visibility:hidden;&#125;</span><br><span class="line">        .clearfix&#123;*zoom:1;&#125;</span><br><span class="line">        .fl&#123; float:left;_display: inline&#125;</span><br><span class="line">        .pr&#123; position:relative&#125;</span><br><span class="line">        .abs&#123;position:absolute;&#125;</span><br><span class="line"> </span><br><span class="line">        /*placeholder字体颜色*/</span><br><span class="line">        ::-webkit-input-placeholder &#123; /* WebKit browsers */</span><br><span class="line">            color:    #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">        :-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */</span><br><span class="line">            color:    #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">        ::-moz-placeholder &#123; /* Mozilla Firefox 19+ */</span><br><span class="line">            color:    #ccc;opacity:1</span><br><span class="line">        &#125;</span><br><span class="line">        :-ms-input-placeholder &#123; /* Internet Explorer 10+ */</span><br><span class="line">            color:    #ccc !important;</span><br><span class="line">        &#125;</span><br><span class="line">        input:-webkit-autofill &#123; /* 谷歌浏览器-文本框边框阴影遮住了背景颜色浅黄*/</span><br><span class="line">            -webkit-box-shadow: 0 0 0 1000px #ffffff inset !important;</span><br><span class="line">        &#125;</span><br><span class="line">        .demod&#123;width:440px;height:auto;background:#ffffff;padding-top:35px;position:relative;font-family:microsoft yahei&#125;</span><br><span class="line">        .demod .demodin&#123;height:40px;margin:0 37px 20px;border:1px solid #d2d6e0&#125;</span><br><span class="line">        .demod .demodin .input_d&#123;height:30px;margin:5px 0 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d input&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#333;outline: none&#125;</span><br><span class="line">        .demod .demodin .input_d label&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#ccc;top:0;left:0;display:none&#125;</span><br><span class="line">        .demod&#123;width:440px;height:auto;background:#ffffff;position:relative;font-family:microsoft yahei&#125;</span><br><span class="line">        .demod .demodin&#123;height:40px;margin:0 37px 20px;border:1px solid #d2d6e0&#125;</span><br><span class="line">        .demod .demodin p&#123;height:16px;width:34px;border-right:1px solid #ddd;margin:13px 12px 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d&#123;height:30px;margin:5px 0 0 0&#125;</span><br><span class="line">        .demod .demodin .input_d input&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#333;outline: none&#125;</span><br><span class="line">        .demod .demodin .input_d label&#123;height:30px;line-height:30px;width:280px;border:0;font-size:14px;font-family:microsoft yahei;color:#ccc;top:0;left:0;display:none&#125;</span><br><span class="line">        .demod .demodin .input_d_pwd input&#123;width:240px&#125;</span><br><span class="line">        .demod .demodin .see_pwd_btn&#123;display:block;top:10px;right:10px;cursor:pointer;height:22px&#125;</span><br><span class="line">        .demod .demodin .see_pwd_on&#123;color:#00AA00&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--demo示例--&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;demod&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d fl&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; placeholder=&quot;请输入手机号&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d fl pr&quot;&gt;</span><br><span class="line">                &lt;label class=&quot;abs&quot;&gt;&lt;/label&gt;</span><br><span class="line">                &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; autocomplete=&quot;new-password&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;demodin clearfix pr&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input_d input_d_pwd fl pr&quot;&gt;</span><br><span class="line">                &lt;label class=&quot;abs&quot;&gt;&lt;/label&gt;</span><br><span class="line">                &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码2&quot; autocomplete=&quot;new-password&quot; class=&quot;ch_reg_pwd&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;see_pwd_btn abs&quot;&gt;查看密码&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        //兼容不支持placeholder的浏览器[ie浏览器，并且10以下均采用替代方式处理]</span><br><span class="line">        if ((navigator.appName == &quot;Microsoft Internet Explorer&quot;) &amp;&amp; (document.documentMode &lt; 10 || document.documentMode == undefined)) &#123;</span><br><span class="line">            var $placeholder = $(&quot;input[placeholder]&quot;);</span><br><span class="line">            for (var i = 0; i &lt; $placeholder.length; i++) &#123;</span><br><span class="line">                if ($placeholder.eq(i).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    $placeholder.eq(i).siblings(&quot;label&quot;).text($placeholder.eq(i).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $placeholder.eq(i).val($placeholder.eq(i).attr(&quot;placeholder&quot;)).css(&#123;&quot;color&quot;: &quot;#ccc&quot;&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $placeholder.focus(function () &#123;</span><br><span class="line">                if ($(this).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    $(this).siblings(&quot;label&quot;).hide()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if ($(this).val() == $(this).attr(&quot;placeholder&quot;)) &#123;</span><br><span class="line">                        $(this).val(&quot;&quot;).css(&#123;&quot;color&quot;: &quot;#333&quot;&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).blur(function () &#123;</span><br><span class="line">                if ($(this).attr(&quot;type&quot;) == &quot;password&quot;) &#123;</span><br><span class="line">                    if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                        $(this).siblings(&quot;label&quot;).text($(this).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                        $(this).val($(this).attr(&quot;placeholder&quot;)).css(&#123;&quot;color&quot;: &quot;#ccc&quot;&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&quot;.clone_input_text&quot;).live(&quot;focus&quot;, function () &#123;</span><br><span class="line">                $(this).siblings(&quot;label&quot;).hide()</span><br><span class="line">            &#125;).live(&quot;blur&quot;, function () &#123;</span><br><span class="line">                if ($(this).val() == &quot;&quot;) &#123;</span><br><span class="line">                    $(this).siblings(&quot;label&quot;).text($(this).attr(&quot;placeholder&quot;)).show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $placeholder.siblings(&quot;label&quot;).click(function () &#123;</span><br><span class="line">                if ($(this).parent(&quot;div&quot;).siblings(&quot;.see_pwd_btn&quot;).attr(&quot;data-flag&quot;) == &quot;1&quot;) &#123;</span><br><span class="line">                    $(this).hide().next(&quot;input&quot;).next(&quot;input&quot;).focus()</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $(this).hide().next(&quot;input&quot;).focus()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        //可视密码</span><br><span class="line">        $(&quot;.see_pwd_btn&quot;).click(function() &#123;</span><br><span class="line">            var obj=$(this);</span><br><span class="line">            var ch_reg_pwd = $(&quot;.ch_reg_pwd&quot;);</span><br><span class="line">            if (obj.attr(&quot;data-flag&quot;) != 1) &#123;</span><br><span class="line">                var clone_input = &#x27;&lt;input type=&quot;text&quot; class=&quot;clone_input_text&quot; placeholder=&quot;&#x27;+ ch_reg_pwd.attr(&quot;placeholder&quot;) + &#x27;&quot; value=&quot;&#x27; + ch_reg_pwd.val() + &#x27;&quot;/&gt;&#x27;;</span><br><span class="line">                ch_reg_pwd.after(clone_input);</span><br><span class="line">                ch_reg_pwd.hide();</span><br><span class="line">                obj.addClass(&quot;see_pwd_on&quot;).attr(&quot;data-flag&quot;, 1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ch_reg_pwd.val($(&quot;.clone_input_text&quot;).val()).show();</span><br><span class="line">                $(&quot;.clone_input_text&quot;).remove();</span><br><span class="line">                obj.removeClass(&quot;see_pwd_on&quot;).attr(&quot;data-flag&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="HTML5-INPUT-placeholder及兼容性处理"><a href="#HTML5-INPUT-placeholder及兼容性处理" class="headerlink" title="HTML5 INPUT placeholder及兼容性处理"></a><a href="https://www.cnblogs.com/dachie/archive/2012/08/10/2632422.html">HTML5 INPUT placeholder及兼容性处理</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTML5对Web Form做了许多增强，比如input新增的type类型、Form Validation等。Placeholder是HTML5新增的另一个属性，当input或者textarea设置了该属性后，该值的内容将作为灰字提示显示在文本框中，当文本框获得焦点时，提示文字消失。以前要实现这效果都是用JavaScript来控制才能实现： </span><br><span class="line">请输入文字</span><br><span class="line">由于placeholder是个新增属性，目前只有少数浏览器支持，如何检测浏览器是否支持它呢？(更多HTML5/CSS3特性检测可以访问)</span><br><span class="line"></span><br><span class="line">function hasPlaceholderSupport() &#123;</span><br><span class="line">  return &#x27;placeholder&#x27; in document.createElement(&#x27;input&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">默认提示文字是灰色的，可以通过CSS来改变文字样式：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">/* all */</span><br><span class="line">::-webkit-input-placeholder &#123; color:#f00; &#125;</span><br><span class="line">input:-moz-placeholder &#123; color:#f00; &#125;</span><br><span class="line"> </span><br><span class="line">/* individual: webkit */</span><br><span class="line">#field2::-webkit-input-placeholder &#123; color:#00f; &#125;</span><br><span class="line">#field3::-webkit-input-placeholder &#123; color:#090; background:lightgreen; text-transform:uppercase; &#125;</span><br><span class="line">#field4::-webkit-input-placeholder &#123; font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; &#125;</span><br><span class="line"> </span><br><span class="line">/* individual: mozilla */</span><br><span class="line">#field2:-moz-placeholder &#123; color:#00f; &#125;</span><br><span class="line">#field3:-moz-placeholder &#123; color:#090; background:lightgreen; text-transform:uppercase; &#125;</span><br><span class="line">#field4:-moz-placeholder &#123; font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">兼容其他不支持placeholder的浏览器：</span><br><span class="line"></span><br><span class="line">var PlaceHolder = &#123;</span><br><span class="line">    _support: (function() &#123;</span><br><span class="line">        return &#x27;placeholder&#x27; in document.createElement(&#x27;input&#x27;);</span><br><span class="line">    &#125;)(),</span><br><span class="line"></span><br><span class="line">    //提示文字的样式，需要在页面中其他位置定义</span><br><span class="line">    className: &#x27;abc&#x27;,</span><br><span class="line"></span><br><span class="line">    init: function() &#123;</span><br><span class="line">        if (!PlaceHolder._support) &#123;</span><br><span class="line">            //未对textarea处理，需要的自己加上</span><br><span class="line">            var inputs = document.getElementsByTagName(&#x27;input&#x27;);</span><br><span class="line">            PlaceHolder.create(inputs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    create: function(inputs) &#123;</span><br><span class="line">        var input;</span><br><span class="line">        if (!inputs.length) &#123;</span><br><span class="line">            inputs = [inputs];</span><br><span class="line">        &#125;</span><br><span class="line">        for (var i = 0, length = inputs.length; i &lt;length; i++) &#123;</span><br><span class="line">            input = inputs[i];</span><br><span class="line">            if (!PlaceHolder._support &amp;&amp; input.attributes &amp;&amp; input.attributes.placeholder) &#123;</span><br><span class="line">                PlaceHolder._setValue(input);</span><br><span class="line">                input.addEventListener(&#x27;focus&#x27;, function(e) &#123;</span><br><span class="line">                    if (this.value === this.attributes.placeholder.nodeValue) &#123;</span><br><span class="line">                        this.value = &#x27;&#x27;;</span><br><span class="line">                        this.className = &#x27;&#x27;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, false);</span><br><span class="line">                input.addEventListener(&#x27;blur&#x27;, function(e) &#123;</span><br><span class="line">                    if (this.value === &#x27;&#x27;) &#123;</span><br><span class="line">                        PlaceHolder._setValue(this);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _setValue: function(input) &#123;</span><br><span class="line">        input.value = input.attributes.placeholder.nodeValue;</span><br><span class="line">        input.className = PlaceHolder.className;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//页面初始化时对所有input做初始化</span><br><span class="line">//PlaceHolder.init();</span><br><span class="line">//或者单独设置某个元素</span><br><span class="line">//PlaceHolder.create(document.getElementById(&#x27;t1&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="关于input标签和placeholder在IE8，9下的兼容问题"><a href="#关于input标签和placeholder在IE8，9下的兼容问题" class="headerlink" title="关于input标签和placeholder在IE8，9下的兼容问题"></a><a href="https://www.cnblogs.com/2010master/p/6194291.html">关于input标签和placeholder在IE8，9下的兼容问题</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一、input常用在表单的输入，包括text，password，H5后又新增了许多type属性值，如url, email, member等等，考虑到非现代浏览器的兼容性问题，这些新的type常用在移动端的项目中。</span><br><span class="line"></span><br><span class="line">二、IE10+浏览器下，input标签会有一个默认的样式，比如文本框的‘×’号，密码框的小眼睛。初衷是好的，有时候很方便，但有时候我们会自己设置样式和功能。可以用伪元素方法去除： </span><br><span class="line"></span><br><span class="line">::-ms-clear, ::-ms-reveal&#123;display: none;&#125;</span><br><span class="line"> </span><br><span class="line">三、在低版本的IE下，input中的文字位置会改变（偏上显示），解决方法：（思路： 设置input的高度=行高）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">    height: 60px;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">四、实际中，我们会在input的前面用label标签或其他，提示input的内容信息。在IE下，在获得焦点、失去焦点时，label标签里的文字会出现抖动问题。解决方法：（设置input的显示方式为行内块）</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  display: inline-block;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">五、##placeholder是H5的一个新属性，但是在IE9以下是不支持的，为此我们会封装一个函数进行能力检测。　</span><br><span class="line">参考地址：http://www.studyofnet.com/news/1022.html</span><br><span class="line">###以下是代码部分：</span><br><span class="line"></span><br><span class="line"> 1 $(function() &#123;</span><br><span class="line"> 2     // 如果不支持placeholder，用jQuery来完成</span><br><span class="line"> 3     if(!isSupportPlaceholder()) &#123;</span><br><span class="line"> 4         // 遍历所有input对象, 除了密码框</span><br><span class="line"> 5         $(&#x27;input&#x27;).not(&quot;input[type=&#x27;password&#x27;]&quot;).each(</span><br><span class="line"> 6             function() &#123;</span><br><span class="line"> 7                 var self = $(this);</span><br><span class="line"> 8                 var val = self.attr(&quot;placeholder&quot;);</span><br><span class="line"> 9                 input(self, val);</span><br><span class="line">10             &#125;</span><br><span class="line">11         );</span><br><span class="line">12 </span><br><span class="line">13         /**</span><br><span class="line">14          *  对password框的特殊处理</span><br><span class="line">15          * 1.创建一个text框 </span><br><span class="line">16          * 2.获取焦点和失去焦点的时候切换</span><br><span class="line">17          */</span><br><span class="line">18         $(&#x27;input[type=&quot;password&quot;]&#x27;).each(</span><br><span class="line">19             function() &#123;</span><br><span class="line">20                 var pwdField    = $(this);</span><br><span class="line">21                 var pwdVal      = pwdField.attr(&#x27;placeholder&#x27;);</span><br><span class="line">22                 var pwdId       = pwdField.attr(&#x27;id&#x27;);</span><br><span class="line">23                 // 重命名该input的id为原id后跟1</span><br><span class="line">24                 pwdField.after(&#x27;&lt;input id=&quot;&#x27; + pwdId +&#x27;1&quot; type=&quot;text&quot; value=&#x27;+pwdVal+&#x27; autocomplete=&quot;off&quot; /&gt;&#x27;);</span><br><span class="line">25                 var pwdPlaceholder = $(&#x27;#&#x27; + pwdId + &#x27;1&#x27;);</span><br><span class="line">26                 pwdPlaceholder.show();</span><br><span class="line">27                 pwdField.hide();</span><br><span class="line">28 </span><br><span class="line">29                 pwdPlaceholder.focus(function()&#123;</span><br><span class="line">30                     pwdPlaceholder.hide();</span><br><span class="line">31                     pwdField.show();</span><br><span class="line">32                     pwdField.focus();</span><br><span class="line">33                 &#125;);</span><br><span class="line">34 </span><br><span class="line">35                 pwdField.blur(function()&#123;</span><br><span class="line">36                     if(pwdField.val() == &#x27;&#x27;) &#123;</span><br><span class="line">37                         pwdPlaceholder.show();</span><br><span class="line">38                         pwdField.hide();</span><br><span class="line">39                     &#125;</span><br><span class="line">40                 &#125;);</span><br><span class="line">41             &#125;</span><br><span class="line">42         );</span><br><span class="line">43     &#125;</span><br><span class="line">44 &#125;);</span><br><span class="line">45 </span><br><span class="line">46 // 判断浏览器是否支持placeholder属性</span><br><span class="line">47 function isSupportPlaceholder() &#123;</span><br><span class="line">48     var input = document.createElement(&#x27;input&#x27;);</span><br><span class="line">49     return &#x27;placeholder&#x27; in input;</span><br><span class="line">50 &#125;</span><br><span class="line">51 </span><br><span class="line">52 // jQuery替换placeholder的处理</span><br><span class="line">53 function input(obj, val) &#123;</span><br><span class="line">54     var $input = obj;</span><br><span class="line">55     var val = val;</span><br><span class="line">56     $input.attr(&#123;value:val&#125;);</span><br><span class="line">57     $input.focus(function() &#123;</span><br><span class="line">58         if ($input.val() == val) &#123;</span><br><span class="line">59             $(this).attr(&#123;value:&quot;&quot;&#125;);</span><br><span class="line">60         &#125;</span><br><span class="line">61     &#125;).blur(function() &#123;</span><br><span class="line">62         if ($input.val() == &quot;&quot;) &#123;</span><br><span class="line">63             $(this).attr(&#123;value:val&#125;);</span><br><span class="line">64         &#125;</span><br><span class="line">65     &#125;);</span><br><span class="line">66 &#125;</span><br></pre></td></tr></table></figure>



<h4 id="修改input-type-”file”按钮样式"><a href="#修改input-type-”file”按钮样式" class="headerlink" title="修改input type=”file”按钮样式"></a>修改input type=”file”按钮样式</h4><p>html结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;iconBtn&quot;&gt;</span><br><span class="line">	&lt;span&gt;上传子活动文件&lt;/span&gt;</span><br><span class="line">	&lt;input class=&quot;inputFile&quot; type=&quot;file&quot; name=&quot;semfile&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>css样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.iconBtn &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 1px solid #c9c9c9;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    padding: 6px 10px 7px;</span><br><span class="line">    color: #666;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #fbfbfb;</span><br><span class="line">&#125;</span><br><span class="line">.inputFile &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    filter: alpha(opacity=0);</span><br><span class="line">    width: 100%;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    height: 100%;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="头部和底部固定定位，中间内容区滚动展示"><a href="#头部和底部固定定位，中间内容区滚动展示" class="headerlink" title="头部和底部固定定位，中间内容区滚动展示"></a>头部和底部固定定位，中间内容区滚动展示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;header class=&quot;head&quot;&gt;顶部固定区域&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">&lt;article  class=&quot;main&quot; id=&quot;wrapper&quot;&gt;  </span><br><span class="line">&lt;/article&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer class=&quot;foot&quot;&gt;底部固定区域&lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.head,.foot&#123;position:fixed;left:0;height:38px;line-height:38px;width:100%;background-color:#999;&#125;</span><br><span class="line"></span><br><span class="line">.head&#123;top:0;&#125;</span><br><span class="line"></span><br><span class="line">.foot&#123;bottom:0;&#125;</span><br><span class="line"></span><br><span class="line">.main&#123;position:fixed;top:38px;bottom:38px;width:100%;overflow:scroll;background-color:#f2f2f2;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="出现浮层时，禁止页面滚动"><a href="#出现浮层时，禁止页面滚动" class="headerlink" title="出现浮层时，禁止页面滚动"></a>出现浮层时，禁止页面滚动</h4><p>当浮层出现的时候∶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;htm1&#x27;).addc1ass(&quot;noscro1l&#x27;);</span><br></pre></td></tr></table></figure>

<p>当浮层隐藏的时候︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;htm1&#x27;).removec1ass(&quot;noscro1l&#x27;);</span><br></pre></td></tr></table></figure>

<p>可以让一部分浏览器的窗体不能滚动，但不包括Safari等浏览器，怎么办呢?</p>
<p>我们可以在浮层<code>touchmove</code>的时候，阻止默认事件达到避免滚动的问题，例如︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;aside&#x27;).on(&#x27;touchmove&#x27;, function(event)&#123;</span><br><span class="line">	event.preventDefault();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这种处理兼容性强，效果最好，但是有一个问题，就是如果浮层自己也有滚动，那么这种处理会让浮层里面自己的滚动行为也无法触发，因此，我们的处理要更进一步，如下:</p>
<ol>
<li>当手指<code>touchstart</code>的元素不是滚动容器同时不失容器的子元素的时候，阻止默认行为;</li>
<li>如果手指<code>touchstart</code>的元素是滚动容器或者容器子元素的时候，不阻止默认行为，但不包括滚动到容器边缘的时候。</li>
</ol>
<p>根据上述原理，我自己抽象了一个简单的方法，方法名和语法如下，完整代码见这里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.smartscro11(container, selectorscro11able);</span><br></pre></td></tr></table></figure>



<h4 id="选择倒数第n个元素"><a href="#选择倒数第n个元素" class="headerlink" title="选择倒数第n个元素"></a>选择倒数第n个元素</h4><p>css3    :nth-last-child()选择器</p>
<p>规定属于其父元素的第二个子元素的每个p元素，从最后一个子元素开始计数∶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p:nth-last-child(2) &#123;</span><br><span class="line">	background: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Chrome提示框（弹窗）字体模糊"><a href="#Chrome提示框（弹窗）字体模糊" class="headerlink" title="Chrome提示框（弹窗）字体模糊"></a>Chrome提示框（弹窗）字体模糊</h4><p>白己写的一个很简单的提示框弹窗，firefox , Safari , ie都清晰，但是chrome就惑觉很模糊</p>
<p>导致模糊的原因：在提示框样式中使用了transform、z-index样式有可能导致这个问题</p>
<blockquote>
<p>例如： transform: translate(-50%, -50%); //让提示框垂直居中和水平居中</p>
<p>解决办法：弹窗提示框不使用transform来做垂直居中水平居中。</p>
<p>1，如果弹窗是大小固定的，可以使用：left:50%;top:50%; margin-left:-（弹窗宽度/2）px; margin-top:-（弹窗高度/2）px;</p>
<p>2，如果弹窗大小不固定；可以使用js获取弹窗高度和高度，然后按照1方法中的方式，让盒子居中</p>
</blockquote>
<h4 id="取消a标签在移动端点击时的蓝色"><a href="#取消a标签在移动端点击时的蓝色" class="headerlink" title="取消a标签在移动端点击时的蓝色:"></a>取消a标签在移动端点击时的蓝色:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color: rgba(255,255,255, 0);</span><br><span class="line">-webkit-user-select: none;</span><br><span class="line">-moz-user-focus: none;</span><br><span class="line">-moz-user-select: none;</span><br></pre></td></tr></table></figure>

<h4 id="使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰"><a href="#使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰" class="headerlink" title="使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰"></a>使用图片作为a标签的点击按钮时，当触发touchstart的时候，往往会有一个灰色的背景︰</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,a:hover,a:active,a:visited,a:link,a:focus&#123;</span><br><span class="line">	-webkit-tap-highlight-color:rgba(0,0,0,0);</span><br><span class="line">	-webkit-tap-highlight-color: transparent;</span><br><span class="line">	outline:none;</span><br><span class="line">	background: none;</span><br><span class="line">	text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变选中内容的背景颜色"><a href="#改变选中内容的背景颜色" class="headerlink" title="改变选中内容的背景颜色"></a>改变选中内容的背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">	background: #FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">	background: #FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">)</span><br><span class="line">::-webkit-selection &#123;</span><br><span class="line">	background:#FFF;</span><br><span class="line">	color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="input-消除自动记忆功能-关闭浏览器自动填充输入框"><a href="#input-消除自动记忆功能-关闭浏览器自动填充输入框" class="headerlink" title="input 消除自动记忆功能 关闭浏览器自动填充输入框"></a>input 消除自动记忆功能 关闭浏览器自动填充输入框</h4><p>input 的autocomplete属性默认是on：其含义代表是否让浏览器自动记录之前输入的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocomplete=&quot;off&quot;</span><br></pre></td></tr></table></figure>

<h4 id="去除ios-input框点击时的灰色背景︰"><a href="#去除ios-input框点击时的灰色背景︰" class="headerlink" title="去除ios input框点击时的灰色背景︰"></a>去除ios input框点击时的灰色背景︰</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-webkit-tap-highlight-color:rgba(0,0,0,0);</span><br></pre></td></tr></table></figure>

<h4 id="区分标准模式下ie6-ie9和Firefox-Chrome的hack："><a href="#区分标准模式下ie6-ie9和Firefox-Chrome的hack：" class="headerlink" title="区分标准模式下ie6~ie9和Firefox/Chrome的hack："></a>区分标准模式下ie6~ie9和Firefox/Chrome的hack：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color:orange;       //all - for Firefox/Chrome</span><br><span class="line">background-color:red\0;        //ie 8/9/10/Opera - for ie8/ie10/Opera</span><br><span class="line">background-color:blue\9\0;     //ie 9/10 - for ie9/10</span><br><span class="line">*background-color:black;       //ie 6/7 -for ie7</span><br><span class="line">_background-color:green;      //ie6 - for ie6</span><br><span class="line"></span><br><span class="line">IE6显示为：绿色，</span><br><span class="line">IE7显示为：黑色，</span><br><span class="line">IE8显示为：红色，</span><br><span class="line">IE9显示为：蓝色，</span><br><span class="line">Firefox/Chrome显示为：橘色</span><br><span class="line">（本例IE10效果同IE9，Opera最新版效果同IE8）</span><br></pre></td></tr></table></figure>

<h4 id="自定义滚动条样式，兼容IE浏览器"><a href="#自定义滚动条样式，兼容IE浏览器" class="headerlink" title="自定义滚动条样式，兼容IE浏览器"></a>自定义滚动条样式，兼容IE浏览器</h4><h5 id="Chrome浏览器滚动条自定义样式修改"><a href="#Chrome浏览器滚动条自定义样式修改" class="headerlink" title="Chrome浏览器滚动条自定义样式修改"></a>Chrome浏览器滚动条自定义样式修改</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  /*滚动条滑块按钮的颜色*/</span><br><span class="line">  scrollbar-face-color: #134187;</span><br><span class="line">  /*滚动条整体颜色*/</span><br><span class="line">  scrollbar-highlight-color: #134187;</span><br><span class="line">  /*滚动条轨道颜色*/</span><br><span class="line">  scrollbar-track-color: #011433;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条整体部分,必须要设置*/</span><br><span class="line">::-webkit-scrollbar&#123;</span><br><span class="line">  background-color: #011433;</span><br><span class="line">  width:10px;</span><br><span class="line">  height:10px;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条的轨道*/</span><br><span class="line">::-webkit-scrollbar-track&#123;</span><br><span class="line">  background-color: #011433;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">/*滚动条的滑块按钮*/</span><br><span class="line">::-webkit-scrollbar-thumb&#123;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background-color: #134087;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="IE浏览器滚动条自定义样式修改"><a href="#IE浏览器滚动条自定义样式修改" class="headerlink" title="IE浏览器滚动条自定义样式修改"></a>IE浏览器滚动条自定义样式修改</h5><p>在写样式之前，我们看一下IE浏览器滚动条样式设置位置参考图：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F%EF%BC%8C%E5%85%BC%E5%AE%B9IE%E6%B5%8F%E8%A7%88%E5%99%A8/ie-scrollar.png" alt="IE浏览器滚动条样式设置位置参考图"></p>
<table>
<thead>
<tr>
<th>滚动条样式</th>
<th>支持情况</th>
<th>支持浏览器版本</th>
<th>可否继承</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>scrollbar-3dlight-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头左上边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-highlight-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头左上边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-face-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框和滚动条箭头的颜色</td>
</tr>
<tr>
<td>scrollbar-arrow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置i滚动条箭头的颜色</td>
</tr>
<tr>
<td>scrollbar-shadow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动框的和滚动条箭头右下边缘的颜色</td>
</tr>
<tr>
<td>scrollbar-dark-shadow-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条槽的颜色</td>
</tr>
<tr>
<td>scrollbar-base-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条主要构成部分的颜色</td>
</tr>
<tr>
<td>scrollbar-track-color</td>
<td>IE特有属性</td>
<td>IE5.5+</td>
<td>y</td>
<td>设置滚动条轨迹组成部分的颜色</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//IE下滚动条样式</span><br><span class="line">HTML &#123;</span><br><span class="line">  scrollbar-base-color: #134087;</span><br><span class="line">  //scrollbar-base-color: #134087;</span><br><span class="line">  scrollbar-3dlight-color:#134087;</span><br><span class="line">  scrollbar-highlight-color: #134087;</span><br><span class="line">  scrollbar-track-color: #011433;</span><br><span class="line">  scrollbar-arrow-color: #011433;</span><br><span class="line">  scrollbar-shadow-color:#011433;</span><br><span class="line">  //scrollbar-dark-shadow-color: #011433;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>摘抄自：<a href="https://blog.csdn.net/qq_36727756/article/details/92795170">https://blog.csdn.net/qq_36727756/article/details/92795170</a></p>
<h4 id="下划线css偏移量"><a href="#下划线css偏移量" class="headerlink" title="下划线css偏移量"></a>下划线css偏移量</h4><p><a href="https://www.cnblogs.com/yeminglong/p/5481645.html">用CSS下划线距离</a></p>
<p>代码一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">    text-decoration: none; </span><br><span class="line">    background: url(underline.gif) repeat-x 100% 100%;</span><br><span class="line">    padding-bottom: 4px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123; </span><br><span class="line">	text-decoration: none;</span><br><span class="line">	padding:0 0 6 0;</span><br><span class="line">	border-bottom-color:0;</span><br><span class="line">	border-bottom-width:1px;</span><br><span class="line">	border-bottom-style:solid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&#123;  </span><br><span class="line">    text-decoration:none; </span><br><span class="line">    border-bottom:1px solid #ccc; /* #ccc换成链接的颜色 */</span><br><span class="line">    display: inline-block; </span><br><span class="line">    padding-bottom:10px;  /*这里设置你要空的距离*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="解决IE阴影兼容性"><a href="#解决IE阴影兼容性" class="headerlink" title="解决IE阴影兼容性"></a>解决IE阴影兼容性</h4><p><a href="https://www.cnblogs.com/viewcozy/p/4828122.html">ie-css3.htc</a>       <a href="http://css3pie.com/about/">CSS3PIe</a></p>
<h4 id="IE样式的兼容写法"><a href="#IE样式的兼容写法" class="headerlink" title="IE样式的兼容写法"></a>IE样式的兼容写法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.example&#123;</span><br><span class="line">    color:#fff;//FF,OP,IE8</span><br><span class="line">    *color:#ff0;//IE7</span><br><span class="line">    _color:#f00;//IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元素在盒子中水平居中-垂直居中"><a href="#元素在盒子中水平居中-垂直居中" class="headerlink" title="元素在盒子中水平居中+垂直居中"></a>元素在盒子中水平居中+垂直居中</h4><p><a href="https://blog.csdn.net/qq_27576607/article/details/78697812">参考文章</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: flex;//flex布局</span><br><span class="line">justify-content: center;//使子项目水平居中</span><br><span class="line">align-items: center;//使子项目垂直居中</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/namechenfl/article/details/83029189">参考教程</a></p>
<h4 id="KindEditor在移动端默认显示源码模式"><a href="#KindEditor在移动端默认显示源码模式" class="headerlink" title="KindEditor在移动端默认显示源码模式"></a>KindEditor在移动端默认显示源码模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var editor;</span><br><span class="line">KindEditor.ready(function(K) &#123;</span><br><span class="line">	editor = K.create(&#x27;textarea[name=&quot;content&quot;]&#x27;, &#123;</span><br><span class="line">		resizeType : 1,</span><br><span class="line">		allowPreviewEmoticons : false,</span><br><span class="line">		allowImageUpload : false,</span><br><span class="line">		items : [</span><br><span class="line">			&#x27;source&#x27;, &#x27;fontsize&#x27;, &#x27;|&#x27;, &#x27;forecolor&#x27;, &#x27;hilitecolor&#x27;, &#x27;bold&#x27;, &#x27;italic&#x27;, &#x27;underline&#x27;,</span><br><span class="line">			&#x27;removeformat&#x27;, &#x27;|&#x27;, &#x27;justifyleft&#x27;, &#x27;justifycenter&#x27;, &#x27;justifyright&#x27;, &#x27;insertorderedlist&#x27;,</span><br><span class="line">			&#x27;insertunorderedlist&#x27;, &#x27;|&#x27;, &#x27;link&#x27;]</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">    // 安卓手机兼容性处理(KindEditor在移动端默认显示源码模式)</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    var isAndroid = u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Adr&#x27;) &gt; -1;</span><br><span class="line">    if(isAndroid) &#123;</span><br><span class="line">        $(&quot;.ke-outline[data-name=&#x27;source&#x27;]&quot;).click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但如果想要对IE8单独定义样式，可以这样：<br>html*~body .example{这里是针对IE8识别的样式}</p>
<p>针对IE9的CSS只需在相应CSS代码加入只有IE9识别的 \9\0。具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.div&#123; background-color:#0f0\9\0;/* ie9 */ &#125;</span><br></pre></td></tr></table></figure>

<p>其他浏览器写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color:#f00;/*all*/</span><br><span class="line">background-color:#0ff\0;/* ie 8/9 */</span><br><span class="line">background-color:#0f0\9\0;/* ie9 */</span><br><span class="line">*background-color:#00f;/*ie7*/</span><br><span class="line">_background-color:#ff0;/*ie6*/</span><br><span class="line">background-color//:#090;/*非IE*/</span><br><span class="line">background-color:#900\9;/*所有ie*/</span><br></pre></td></tr></table></figure>

<p>怎么规定CSS的属性仅在IE下生效？在非IE浏览器下不生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--[if IE]&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.test&#123;color:red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>

<p>css中判断<a href="https://www.baidu.com/s?wd=IE&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IE</a>版本的语句</p>
<h4 id="Koala设置scss编译后的输出路径"><a href="#Koala设置scss编译后的输出路径" class="headerlink" title="Koala设置scss编译后的输出路径"></a>Koala设置scss编译后的输出路径</h4><h4 id="IE兼容性处理"><a href="#IE兼容性处理" class="headerlink" title="IE兼容性处理"></a>IE兼容性处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--[if !IE]&gt; 除IE外都可识别 &lt;!--&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 5.0]&gt; 只有IE5.0可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 5]&gt; 仅IE5.0与IE5.5可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gt IE 5.0]&gt; IE5.0以及IE5.0以上版本都可以识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>

<h4 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">textarea[name=&#x27;test&#x27;]::-webkit-input-placeholder::after &#123;</span><br><span class="line">    display:block;</span><br><span class="line">    content:&quot;Line 2\A Line 3&quot;;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">textarea[name=&#x27;test&#x27;]::-webkit-input-placeholder::before &#123;</span><br><span class="line">    color:#666;</span><br><span class="line">    content:&quot;Line 1\A Line 2\A Line 3\A&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>css问题</category>
      </categories>
      <tags>
        <tag>css问题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发代码规范</title>
    <url>/2021/02/08/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="最佳原则"><a href="#最佳原则" class="headerlink" title="最佳原则"></a>最佳原则</h2><p>坚持制定好的代码规范。</p>
<p>无论团队人数多少，代码应该同出一门。</p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="项目命名"><a href="#项目命名" class="headerlink" title="项目命名"></a>项目命名</h3><p>全部采用小写方式， 以下划线分隔。</p>
<p>例：my_project_name</p>
<h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><p>参照项目命名规则；</p>
<p>有复数结构时，要采用复数命名法。</p>
<p>例：scripts, styles, images, data_models</p>
<h3 id="JS文件命名"><a href="#JS文件命名" class="headerlink" title="JS文件命名"></a>JS文件命名</h3><p>全部采用小写方式， 以下划线分隔。</p>
<p>例：model.js, account_model.js</p>
<h3 id="CSS文件命名"><a href="#CSS文件命名" class="headerlink" title="CSS文件命名"></a>CSS文件命名</h3><p>全部采用小写方式， 以下划线分隔。</p>
<p>例：style.css, common_style.css</p>
<h3 id="HTML文件命名"><a href="#HTML文件命名" class="headerlink" title="HTML文件命名"></a>HTML文件命名</h3><p>全部采用小写方式， 以下划线分隔。</p>
<p>例：index.html, news_list.html</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>缩进使用tab（4个空格）；</li>
<li>嵌套的节点应该缩进；</li>
<li>在属性上，使用双引号，不要使用单引号；</li>
<li>属性名全小写，用中划线做分隔符；</li>
<li>对于无需自闭合的标签，不允许自闭合；</li>
<li>不要忽略可选的关闭标签，例：<code>&lt;/li&gt;</code>、<code>&lt;/body&gt;</code> 。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company_logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hello-world&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML5-doctype"><a href="#HTML5-doctype" class="headerlink" title="HTML5 doctype"></a>HTML5 doctype</h3><p>在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；</p>
<p>虽然doctype不区分大小写，但是按照惯例，doctype大写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a>lang属性</h3><p>根据HTML5规范：</p>
<blockquote>
<p>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为’UTF-8’。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IE兼容模式"><a href="#IE兼容模式" class="headerlink" title="IE兼容模式"></a>IE兼容模式</h3><p>用 <code>&lt;meta&gt;</code> 标签可以指定页面应该用什么版本的IE来渲染；</p>
<p>不同doctype在不同浏览器下会触发不同的渲染模式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入CSS-JavaScript"><a href="#引入CSS-JavaScript" class="headerlink" title="引入CSS, JavaScript"></a>引入CSS, JavaScript</h3><p>在 head 中引入页面需要的所有 <code>CSS</code> 资源</p>
<p>引入CSS 时必须指明 <code>rel=&quot;stylesheet&quot;</code></p>
<p><code>JavaScript</code> 应当放在页面末尾，或采用异步加载</p>
<p>根据HTML5规范, 通常在引入CSS和JavaScript时不需要指明 <code>type</code>，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是他们的默认值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部 CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;common_header.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在文件中 CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外部 JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;common_header.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在文件中 JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Title标签声明"><a href="#Title标签声明" class="headerlink" title="Title标签声明"></a>Title标签声明</h3><p>页面必须包含 title 标签声明标题</p>
<blockquote>
<p>title 必须作为 head 的直接子元素，并紧随 charset 声明之后</p>
<p>title 中如果包含 ascii 之外的字符，浏览器需要知道字符编码类型才能进行解码，否则可能导致乱码。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="favicon-ico"><a href="#favicon-ico" class="headerlink" title="favicon.ico"></a>favicon.ico</h3><p>如有添加 <code>favicon.ico</code>，保证可以访问</p>
<p>1、在 Web Server 根目录放置 <code>favicon.ico</code> 文件。</p>
<p>2、使用 link 指定 favicon。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;path/to/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>若页面对移动设备友好，需指定页面的 <code>viewport</code></p>
<p>设置 viewport 的 width 值来适应你的页面宽度。</p>
<p>同时因为不同移动设备分辨率不同，在设置时，应当使用 device-width 和 device-height 变量</p>
<p>为了使 viewport 正常工作，在页面内容样式布局设计上也要做相应调整，如避免绝对定位等。</p>
<p>viewport 的更多介绍，可以参见 <a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html#//apple_ref/doc/uid/TP40006509-SW26">Safari Web Content Guide的介绍</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="img-图片"><a href="#img-图片" class="headerlink" title="img 图片"></a>img 图片</h3><p>禁止 <code>img</code> 的 <code>src</code> 取值为空</p>
<p>避免为 <code>img </code>添加不必要的 <code>title</code> 属性</p>
<p>为重要图片添加 <code>alt</code> 属性</p>
<p>有下载需求的图片采用 <code>img</code> 标签实现，无下载需求的图片采用 <code>CSS</code> 背景图实现</p>
<p>添加 <code>width</code> 和 <code>height</code> 属性，以避免页面抖动</p>
<p><code>src</code> 取值为空，会导致部分浏览器重新加载一次当前页面</p>
<p>多余的 <code>title</code> 影响看图体验，并且增加了页面尺寸</p>
<p>添加 <code>alt</code> 属性,可以提高图片加载失败时的用户体验。</p>
<p>产品 <code>logo</code>、生成的图片有潜在下载需求的图片，以 <code>img</code> 形式实现，能方便用户下载。</p>
<p>无下载需求的图片，比如：<code>icon</code>、背景、代码使用的图片等，尽可能采用 <code>css</code> 背景图实现。</p>
<h3 id="JS生成标签"><a href="#JS生成标签" class="headerlink" title="JS生成标签"></a>JS生成标签</h3><p>在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出现。</p>
<h3 id="减少标签数量"><a href="#减少标签数量" class="headerlink" title="减少标签数量"></a>减少标签数量</h3><p>在编写HTML代码时，需要尽量避免多余的父节点；</p>
<p>很多时候，需要通过迭代和重构来使HTML变得更少。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实用高于完美"><a href="#实用高于完美" class="headerlink" title="实用高于完美"></a>实用高于完美</h3><p>尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价；</p>
<p>任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>缩进 使用<code>tab</code>（4个空格）。</p>
<p>不允许使用 <code>2</code> 个空格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号 <code>;</code> 。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>以下几种情况不需要空格：</p>
<ul>
<li>属性名后</li>
<li>多个规则的分隔符’<code>,</code>‘前</li>
<li><code>!important</code> ‘!’后</li>
<li>属性值中’(‘后和’)’前</li>
<li>行末不要有多余的空格</li>
</ul>
<p>以下几种情况需要空格：</p>
<ul>
<li>属性值前</li>
<li>选择器’&gt;’, ‘+’, ‘~’前后</li>
<li>‘{‘前</li>
<li><code>!important</code> ‘!’前</li>
<li><code>@else</code> 前后</li>
<li>属性值中的’,’后</li>
<li>注释’/<em>‘后和’</em>/‘前</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span> :red! important;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> ,</span><br><span class="line"><span class="selector-class">.dialog</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span>,</span><br><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span>&gt;<span class="selector-class">.dialog</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &gt; <span class="selector-class">.dialog</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>以下几种情况不需要换行：</p>
<ul>
<li>‘<code>&#123;</code>‘ 前</li>
</ul>
<p>以下几种情况需要换行：</p>
<ul>
<li>‘<code>&#123;</code>‘ 后和 ‘<code>&#125;</code>‘ 前</li>
<li>每个属性独占一行</li>
<li>多个规则的分隔符’,’后</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span></span><br><span class="line">&#123;<span class="attribute">color</span>: red; <span class="attribute">background-color</span>: black;&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span>, <span class="selector-class">.dialog</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span>,</span><br><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释统一用 ‘<code>/* */</code>‘，具体参照右边的写法；</p>
<p>缩进与下一行代码保持一致；</p>
<p>可位于一个代码行的末尾，与代码间隔一个空格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Modal header */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Modal header</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">    <span class="comment">/* 50px */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* color red */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>最外层统一使用双引号；</p>
<p>url的内容要用引号；</p>
<p>属性选择器中的属性值需要引号。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;logo.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[data-type=<span class="string">&quot;single&quot;</span>]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul>
<li>类名使用小写字母，以中划线分隔</li>
<li>id采用驼峰式命名</li>
<li>scss中的变量、函数、混合、placeholder采用驼峰式命名</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* class */</span></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element-content</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* id */</span></span><br><span class="line"><span class="selector-id">#myDialog</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建动画函数 */</span></span><br><span class="line"><span class="keyword">@keyframes</span>  pxToRem &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性声明顺序"><a href="#属性声明顺序" class="headerlink" title="属性声明顺序"></a>属性声明顺序</h3><p>同一规则下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。</p>
<p>解释：</p>
<ul>
<li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li>
<li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li>
<li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li>
<li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li>
</ul>
<p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-nav</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       -moz-<span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色16进制用小写字母；</p>
<p>颜色16进制尽量用简写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ABCDEF</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#001122</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#abcdef</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#012</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h3><p>在可以使用缩写的情况下，尽量使用属性缩写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="number">12px</span>/<span class="number">1.5</span>  arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样式选择器"><a href="#样式选择器" class="headerlink" title="样式选择器"></a>样式选择器</h3><p>选择器的嵌套层级应不大于 <strong>3</strong> 级，位置靠后的限定条件应尽可能精确</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>代码规则</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.element</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.element-avatar</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不允许有空的规则；</p>
<p>元素选择器用小写字母；</p>
<p>去掉小数点前面的0；</p>
<p>去掉数字中不必要的小数点和末尾的0；</p>
<p>属性值’0’后面不要加单位；</p>
<p>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法；</p>
<p>无前缀的标准属性应该写在有前缀的属性后面；</p>
<p>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；</p>
<p>不要在一个文件里出现两个相同的规则；</p>
<p>用 <code>border: 0;</code> 代替 <code>border: none;</code>；</p>
<p>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；</p>
<p>发布的代码中不要有 <code>@import</code>；</p>
<p>尽量少用’*’选择器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-tag">LI</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50.0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确写法 */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">       -moz-<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">background</span>:    <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">background</span>:         <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#fff</span> <span class="number">0</span>, <span class="number">#eee</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>不允许使用 <strong>2</strong> 个空格，使用soft tab（4个空格）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>,</span><br><span class="line">    y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">    x += <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="单行长度"><a href="#单行长度" class="headerlink" title="单行长度"></a>单行长度</h3><p>不要超过80，但如果编辑器开启word wrap可以不考虑单行长度。</p>
<h3 id="分号-1"><a href="#分号-1" class="headerlink" title="分号"></a>分号</h3><p>以下几种情况后需加分号：</p>
<ul>
<li>变量声明</li>
<li>表达式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 变量声明 */</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表达式语句 */</span></span><br><span class="line">x=x+z;</span><br></pre></td></tr></table></figure>

<h3 id="空格-1"><a href="#空格-1" class="headerlink" title="空格"></a>空格</h3><p>以下几种情况不需要空格：</p>
<ul>
<li>对象的属性名后</li>
<li>前缀一元运算符后</li>
<li>后缀一元运算符前</li>
<li>函数调用括号前</li>
<li>无论是函数声明还是函数表达式，’<strong>(</strong>‘前不要空格</li>
<li>数组的’<strong>[</strong>‘后和’<strong>]</strong>‘前</li>
<li>对象的’<strong>{</strong>‘后和’<strong>}</strong>‘前</li>
<li>运算符’<strong>(</strong>‘后和’<strong>)</strong>‘前</li>
</ul>
<p>以下几种情况需要空格：</p>
<ul>
<li>二元运算符前后</li>
<li>三元运算符’<strong>?:</strong>‘前后</li>
<li>代码块’<strong>{</strong>‘前</li>
<li>下列关键字前：<code>else</code>, <code>while</code>, <code>catch</code>, <code>finally</code></li>
<li>下列关键字后：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>case</code>, <code>try</code>, <code>catch</code>, <code>finally</code>, <code>with</code>, <code>return</code>, <code>typeof</code></li>
<li>单行注释’<strong>//</strong>‘后（若单行注释和代码同行，则’<strong>//</strong>‘前也需要），多行注释’*****’后</li>
<li>对象的属性值前</li>
<li><code>for</code>循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格</li>
<li>无论是函数声明还是函数表达式，’<strong>{</strong>‘前一定要有空格</li>
<li>函数的参数之间</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    b :<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line">++ x;</span><br><span class="line">y ++;</span><br><span class="line">z = x?<span class="number">1</span>:<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line">++x;</span><br><span class="line">y++;</span><br><span class="line">z = x ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = [ <span class="number">1</span>, <span class="number">2</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = ( <span class="number">1</span>+<span class="number">2</span> )*<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = (<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no space before &#x27;(&#x27;, one space before &#x27;&#123;&#x27;, one space between function parameters</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no space before &#x27;(&#x27;</span></span><br><span class="line"><span class="title function_">doSomething</span>(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>以下几种情况需要空行：</p>
<ul>
<li>变量声明后（当变量声明在代码块的最后一行时，则无需空行）</li>
<li>注释前（当注释在代码块的第一行时，则无需空行）</li>
<li>代码块后（在函数调用、数组、对象中则无需空行）</li>
<li>文件最后保留一个空行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明后需空白行</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明在当前块中最后一个表达式时，不需要一个空白行</span></span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要行注释前空白行</span></span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当你不需要的空白线是第一块线</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块后需空白行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在参数列表、数组、对象时不需要空格</span></span><br><span class="line"><span class="title function_">func</span>(</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = [</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="换行-1"><a href="#换行-1" class="headerlink" title="换行"></a>换行</h3><p>换行的地方，行末必须有’<strong>,</strong>‘或者运算符<strong>；</strong></p>
<p>以下几种情况不需要换行：</p>
<ul>
<li>下列关键字后：<code>else</code>, <code>catch</code>, <code>finally</code></li>
<li>代码块’{‘前</li>
</ul>
<p>以下几种情况需要换行：</p>
<ul>
<li>代码块’{‘后和’}’前</li>
<li>变量赋值后</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">x = y</span><br><span class="line">    ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">x = y ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">x = y ?</span><br><span class="line">    <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no need line break with &#x27;else&#x27;, &#x27;catch&#x27;, &#x27;finally&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a, foo = <span class="number">7</span>, b,</span><br><span class="line">    c, bar = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a,</span><br><span class="line">    foo = <span class="number">7</span>,</span><br><span class="line">    b, c, bar = <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>双斜线后，必须跟一个空格；</p>
<p>缩进与下一行代码保持一致；</p>
<p>可位于一个代码行的末尾，与代码间隔一个空格。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// if you made it here, then all security checks passed</span></span><br><span class="line">    <span class="title function_">allowed</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zhangsan = <span class="string">&#x27;zhangsan&#x27;</span>; <span class="comment">// one space after code</span></span><br></pre></td></tr></table></figure>

<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>最少三行, ‘*’后跟一个空格，具体参照右边的写法；</p>
<p>建议在以下情况下使用：</p>
<ul>
<li>难于理解的代码段</li>
<li>可能存在错误的代码段</li>
<li>浏览器特殊的HACK代码</li>
<li>业务逻辑强相关的代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * one space after &#x27;*&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>各类标签@param, @method等请参考<a href="http://yuri4ever.github.io/jsdoc/">JSDoc Guide</a>；</p>
<p>建议在以下情况下使用：</p>
<ul>
<li>所有常量</li>
<li>所有函数</li>
<li>所有类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@func</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 一个带参数的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">a</span> - 参数a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; b=1 - 参数b默认值为1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; <span class="variable">d</span> - 参数d为一个对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; d.e - 参数d的e属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; d.f - 参数d的f属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object[]</span>&#125; <span class="variable">g</span> - 参数g为一个对象数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; g.h - 参数g数组中一项的h属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; g.i - 参数g数组中一项的i属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; [j] - 参数j是一个可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c, d, g, j</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引号-1"><a href="#引号-1" class="headerlink" title="引号"></a>引号</h3><p>最外层统一使用单引号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    z = <span class="string">&#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul>
<li>标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）</li>
<li>‘ID’在变量名中全大写</li>
<li>‘URL’在变量名中全大写</li>
<li>‘Android’在变量名中大写第一个字母</li>
<li>‘iOS’在变量名中小写第一个，大写后两个字母</li>
<li>常量全大写，用下划线连接</li>
<li>构造函数，大写第一个字母</li>
<li>jquery对象必须以’$’开头命名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> thisIsMyName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> goodID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reportURL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AndroidVersion</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iOSVersion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">MAX_COUNT</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明，不允许出现两个连续的var声明，用<code>,</code>号隔开就行了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomethingWithItems</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用一个变量</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">10</span>,</span><br><span class="line">        result = value + <span class="number">10</span>,</span><br><span class="line">        i,</span><br><span class="line">        len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = items.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        result += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格；</p>
<p>函数调用括号前不需要空格；</p>
<p>立即执行函数外必须包一层括号；</p>
<p>参数之间用’, ‘分隔，注意逗号后有一个空格。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// no space before &#x27;(&#x27;, but one space before&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line">doSomething (item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="title function_">doSomething</span>(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求立即调用函数表达式中的圆括号</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &#x27;,&#x27; 分隔函数参数</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="数组、对象"><a href="#数组、对象" class="headerlink" title="数组、对象"></a>数组、对象</h3><p>对象属性名不需要加引号；</p>
<p>对象以缩进的形式书写，不要写在一行；</p>
<p>数组、对象最后不要有逗号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：<code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>do</code>, <code>switch</code>, <code>try</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    <span class="title function_">doSomething</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="title function_">doSomething</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>适用场景：</p>
<ul>
<li>初始化一个将来可能被赋值为对象的变量</li>
<li>与已经初始化的变量做比较</li>
<li>作为一个参数为对象的函数的调用传参</li>
<li>作为一个返回对象的函数的返回值</li>
</ul>
<p>不适用场景：</p>
<ul>
<li>不要用null来判断函数调用时有无传参</li>
<li>不要与未初始化的变量做比较</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// B等于null 才执行</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>永远不要直接使用undefined进行变量判断；</p>
<p>使用typeof和字符串’undefined’对变量进行判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不正确写法</span></span><br><span class="line"><span class="keyword">if</span> (person === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> person === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h2><h3 id="sublime3编辑器"><a href="#sublime3编辑器" class="headerlink" title="sublime3编辑器"></a>sublime3编辑器</h3><ol>
<li>安装sublime3组件 <a href="https://packagecontrol.io/installation#st3">Package Control</a><ul>
<li>按下 `ctrl+``</li>
<li>复制粘贴以下代码，粘贴以下代码到底部命令行并回车<code>import urllib.request,os,hashlib; h = &#39;eb2297e1a458f27d836c04bb0cbaf282&#39; + &#39;d0e7a3098092775ccb37ca9d6b2e4b7d&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)</code></li>
<li>重启Sublime Text</li>
<li>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功</li>
</ul>
</li>
<li>安装sublime3插件<ul>
<li>按下 <code>ctrl+shift+p</code> 调出命令面板，输入’ip’（Install Package）</li>
<li>输入以下插件的名字，按顺序逐个进行安装：<ul>
<li><code>Emmet</code></li>
<li><code>Sublime Alignment</code></li>
<li><code>jQuery</code></li>
<li><code>Sublime CodeIntel</code></li>
<li><code>Bracket Highlighter</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Brackets编辑器"><a href="#Brackets编辑器" class="headerlink" title="Brackets编辑器"></a>Brackets编辑器</h3><ol>
<li>安装Brackets ，打开<a href="http://brackets.io/">brackets.io</a> 点击 Download Brackets<ul>
<li>切换语言 1、Debug -&gt; Switch Language 2、点开下拉菜单，选择你想要的语言 3、点击 Reload Brackets</li>
</ul>
</li>
<li>安装Brackets插件<ul>
<li>方法一：目录选择 文件 -&gt; 扩展管理器</li>
<li>方法二：编辑器主界面右上角的闪电式的图标</li>
<li>打开扩展管理器以后，可以找到想要使用的扩展，点击安装（以下是常用扩展）<ul>
<li><code>快速编辑代码 - Emmet</code></li>
<li><code>改变样式 - Themes</code></li>
<li><code>折叠代码块 - Code Folding</code></li>
<li><code>自动格式化 - Beautify</code></li>
<li><code>JS 帮助文档 - QuickDocsJS</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="Html的命名规则"><a href="#Html的命名规则" class="headerlink" title="Html的命名规则"></a>Html的命名规则</h4><ul>
<li><ul>
<li><p>文件名称命名规则</p>
</li>
<li><ul>
<li><p>统一使用小写的英文字母、数字和下划线的组合，不得包含汉字、空格和特殊字符</p>
</li>
<li><p>命名的原则</p>
</li>
<li><ul>
<li>方便理解</li>
<li>方便查找</li>
</ul>
</li>
</ul>
</li>
<li><p>索引文件命名原则</p>
</li>
<li><ul>
<li>index.htm</li>
<li>index.html</li>
<li>index.asp</li>
<li>index.aspx</li>
<li>index.jsp</li>
<li>index.php</li>
</ul>
</li>
<li><p>各子页命名的原则</p>
</li>
<li><ul>
<li>统一用翻译的英文命名</li>
<li>统一用拼音命名</li>
<li>注意：不要英语拼音混用</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端规范</tag>
      </tags>
  </entry>
  <entry>
    <title>前端资源教程</title>
    <url>/2021/01/29/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>转自：<a href="https://cnodejs.org/topic/56ef3edd532839c33a99d00e">https://cnodejs.org/topic/56ef3edd532839c33a99d00e</a></p>
<ol>
<li>综合类<ul>
<li><a href="http://www.cnblogs.com/sb19871023/p/3894452.html">前端知识体系</a></li>
<li><a href="https://github.com/JacksonTian/fks">前端知识结构</a></li>
<li><a href="https://github.com/unruledboy/WebFrontEndStack">Web前端开发大系概览</a></li>
<li><a href="http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html">Web前端开发大系概览-中文版</a></li>
<li>[Web Front-end Stack v2.2](<a href="https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web">https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web</a> Front End Stack.png)</li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/dypsilon/frontend-dev-bookmarks">前端书籍</a></li>
<li><a href="https://github.com/vhf/free-programming-books">前端免费书籍大全</a></li>
<li><a href="http://www.cnblogs.com/sb19871023/p/3894452.html">前端知识体系</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索引</a></li>
<li><a href="http://study.163.com/course/introduction/224014.htm">智能社 - 精通JavaScript开发</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></li>
<li><a href="http://v.163.com/special/opencourse/bianchengdaolun.html">麻省理工学院公开课：计算机科学及编程导论</a></li>
<li><a href="http://segmentfault.com/a/1190000002640298">JavaScript中的this陷阱的最全收集–没有之一</a></li>
<li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">JS函数式编程指南</a></li>
<li><a href="http://liubin.github.io/promises-book/">JavaScript Promise迷你书（中文版）</a></li>
<li><a href="https://github.com/AlloyTeam/Mars">腾讯移动Web前端知识库</a></li>
<li><a href="https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide">Front-End-Develop-Guide 前端开发指南</a></li>
<li><a href="https://li-xinyang.gitbooks.io/frontend-notebook/content/">前端开发笔记本</a></li>
<li><a href="https://github.com/nieweidong/fetool">大前端工具集 - 聂微东</a></li>
<li><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content/">前端开发者手册</a></li>
</ul>
</li>
<li>入门类<ul>
<li><a href="http://www.cnblogs.com/jikey/p/3613082.html">前端入门教程</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">瘳雪峰的Javascript教程</a></li>
<li><a href="http://www.imooc.com/view/11">jQuery基础教程</a></li>
<li><a href="http://www.imooc.com/view/506">前端工程师必备的PS技能——切图篇</a></li>
<li><a href="https://github.com/qiu-deqing/FE-learning">结合个人经历总结的前端入门方法</a></li>
</ul>
</li>
<li>效果类<ul>
<li><a href="http://www.imooc.com/learn/58">弹出层</a></li>
<li><a href="http://www.imooc.com/learn/18">焦点图轮播特效</a></li>
</ul>
</li>
<li>工具类<ul>
<li><a href="http://www.imooc.com/learn/93">css sprite 雪碧图制作</a></li>
<li><a href="http://www.imooc.com/learn/390">版本控制入门 – 搬进 Github</a></li>
<li><a href="http://www.imooc.com/learn/30">Grunt-beginner前端自动化工具</a></li>
</ul>
</li>
<li>慕课专题<ul>
<li><a href="http://www.imooc.com/space/teacher/id/197450">张鑫旭 - 慕课系列</a></li>
<li><a href="http://www.imooc.com/space/teacher/id/104593">lyn - 慕课系列</a></li>
<li><a href="http://www.imooc.com/space/teacher/id/290139">艾伦 - 慕课系列</a></li>
<li><a href="http://www.imooc.com/view/494">碧仔 - Hello，移动WEB</a></li>
</ul>
</li>
<li>周报类<ul>
<li><a href="https://github.com/PaicHyperionDev/MobileDevWeekly">平安科技移动开发二队技术周报</a></li>
</ul>
</li>
</ol>
<h3 id="六-API"><a href="#六-API" class="headerlink" title="六. API:"></a>六. API:</h3><h4 id="1-总目录"><a href="#1-总目录" class="headerlink" title="1. 总目录"></a>1. 总目录</h4><ol>
<li>开发中心<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">mozilla js参考</a></li>
<li><a href="https://developer.chrome.com/extensions/api_index.html">chrome开发中心（chrome的内核已转向blink）</a></li>
<li><a href="https://developer.apple.com/library/safari/navigation">safari开发中心</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94).aspx">microsoft js参考</a></li>
<li><a href="http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html">js秘密花园</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/">js秘密花园</a></li>
<li><a href="http://www.w3help.org/">w3help</a> 综合Bug集合网站</li>
</ul>
</li>
<li>综合搜索<ul>
<li><a href="http://www.javascripting.com/">javascripting</a></li>
<li><a href="http://microjs.com/">各种流行库搜索</a></li>
</ul>
</li>
<li>综合API<ul>
<li><a href="http://www.runoob.com/">runoob.com-包含各种API集合</a></li>
<li><a href="http://tool.oschina.net/apidocs">开源中国在线API文档合集</a></li>
<li><a href="http://devdocs.io/">devdocs</a> 英文综合API网站</li>
</ul>
</li>
</ol>
<h4 id="2-jQuery"><a href="#2-jQuery" class="headerlink" title="2. jQuery"></a>2. jQuery</h4><ul>
<li><a href="http://www.jquery123.com/">jQuery API 中文文档</a></li>
<li><a href="http://hemin.cn/jq/">hemin 在线版</a></li>
<li><a href="http://www.css88.com/jqapi-1.9/on/">css88 jq api</a></li>
<li><a href="http://www.css88.com/jquery-ui-api/">css88 jqui api</a></li>
<li><a href="http://learn.jquery.com/">学习jquery</a></li>
<li><a href="http://james.padolsey.com/jquery/">jquery 源码查找</a></li>
</ul>
<h4 id="3-Ecmascript"><a href="#3-Ecmascript" class="headerlink" title="3. Ecmascript"></a>3. Ecmascript</h4><ul>
<li><a href="https://leanpub.com/understandinges6/read">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li>
<li><a href="https://leanpub.com/exploring-es6/read">exploring-es6</a></li>
<li><a href="https://github.com/es6-org/exploring-es6">exploring-es6翻译</a></li>
<li><a href="http://es6-org.github.io/exploring-es6/">exploring-es6翻译后预览</a></li>
<li><a href="http://es6.ruanyifeng.com/">阮一峰 es6</a></li>
<li><a href="http://javascript.ruanyifeng.com/">阮一峰 Javascript</a></li>
<li><a href="http://yanhaijing.com/es5/">ECMA-262，第 5 版</a></li>
<li><a href="http://es5.github.io/">es5</a></li>
</ul>
<h4 id="4-Js-template"><a href="#4-Js-template" class="headerlink" title="4. Js template"></a>4. Js template</h4><ul>
<li><a href="http://garann.github.io/template-chooser/">template-chooser</a></li>
<li><a href="https://github.com/aui/artTemplate">artTemplate</a></li>
<li><a href="https://github.com/aui/tmodjs/blob/master/README.md">tomdjs</a></li>
<li><a href="http://juicer.name/docs/docs_zh_cn.html">淘宝模板juicer模板</a></li>
<li><a href="http://koen301.github.io/fxtpl/">Fxtpl v1.0 繁星前端模板引擎</a></li>
<li><a href="http://laytpl.layui.com/">laytpl</a></li>
<li><a href="https://github.com/mozilla/nunjucks">mozilla - nunjucks</a></li>
<li><a href="https://github.com/PaulGuo/Juicer">Juicer</a></li>
<li><a href="http://akdubya.github.io/dustjs/">dustjs</a></li>
<li><a href="http://ecomfe.github.io/etpl/">etpl</a></li>
</ul>
<h4 id="5-弹出层"><a href="#5-弹出层" class="headerlink" title="5. 弹出层"></a>5. 弹出层</h4><ul>
<li><a href="https://github.com/aui/artDialog">artDialog 最新版</a></li>
<li><a href="http://aui.github.io/artDialog/doc/index.html">artDialog 文档</a></li>
<li><a href="https://code.google.com/p/artdialog/downloads/list">google code 下载地址</a></li>
<li><a href="http://layer.layui.com/">贤心弹出层</a></li>
<li><a href="https://github.com/bh-lay/UI">响应式用户交互组件库</a></li>
<li><a href="http://t4t5.github.io/sweetalert/">sweetalert-有css3动画弹出层</a></li>
</ul>
<h4 id="6-CSS"><a href="#6-CSS" class="headerlink" title="6. CSS"></a>6. CSS</h4><ul>
<li><a href="http://tympanus.net/codrops/css_reference/">CSS 语法参考</a></li>
<li><a href="http://isux.tencent.com/css3/index.html">CSS3动画手册</a></li>
<li><a href="http://isux.tencent.com/css3/tools.html">腾讯css3动画制作工具</a></li>
<li><a href="http://linxz.github.io/tianyizone/">志爷css小工具集合</a></li>
<li><a href="http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb">css3 js 移动大杂烩</a></li>
<li><a href="http://bouncejs.com/">bouncejs 触摸库</a></li>
<li><a href="http://fian.my.id/Waves/">css3 按钮动画</a></li>
<li><a href="http://daneden.github.io/animate.css/">animate.css</a></li>
<li>[全局CSS的终结(狗带) <a href="http://www.alloyteam.com/2015/10/8536/">译]</a></li>
</ul>
<h4 id="7-Angularjs"><a href="#7-Angularjs" class="headerlink" title="7. Angularjs"></a>7. Angularjs</h4><ul>
<li><a href="https://github.com/dolymood/AngularLearning">Angular.js 的一些学习资源</a></li>
<li><a href="http://angularjs.cn/">angularjs中文社区</a></li>
<li><a href="http://www.cnblogs.com/xuwenmin888/p/3739096.html">Angularjs源码学习</a></li>
<li><a href="http://www.ifeenan.com/?c=AngularJS">Angularjs源码学习</a></li>
<li><a href="http://angular-ui.github.io/bootstrap/">angular对bootstrap的封装</a></li>
<li><a href="https://cnodejs.org/topic/51404e0f069911196d2e3923">angularjs + nodejs</a></li>
<li><a href="http://www.cnblogs.com/lvdabao/tag/AngularJs/">吕大豹 Angularjs</a></li>
<li><a href="http://www.infoq.com/cn/news/2013/02/angular-web-app">AngularJS 最佳实践</a></li>
<li><a href="http://www.lovelucy.info/angularjs-best-practices.html">Angular的一些扩展指令</a></li>
<li><a href="https://github.com/Pasvaz/bindonce">Angular数据绑定原理</a></li>
<li><a href="https://github.com/angular-ui/">一些扩展Angular UI组件</a></li>
<li><a href="http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/">Ember和AngularJS的性能测试</a></li>
<li><a href="http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html">带你走近AngularJS - 基本功能介绍</a></li>
<li><a href="http://angular.duapp.com/docs/guide">Angularjs开发指南</a></li>
<li><a href="http://www.cnblogs.com/amosli/p/3710648.html">Angularjs学习</a></li>
<li><a href="http://www.rainweb.cn/article/angularjs-jquery.html">不要带着jQuery的思维去学习AngularJS</a></li>
<li><a href="http://wangjiatao.diandian.com/?tag=angularjs">angularjs 学习笔记</a></li>
<li><a href="http://www.angularjs.cn/T008">angularjs 开发指南</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning">angularjs 英文资料</a></li>
<li><a href="http://angular-ui.github.io/bootstrap/">angular bootstrap</a></li>
<li><a href="https://github.com/opitzconsulting/jquery-mobile-angular-adapter">angular jq mobile</a></li>
<li><a href="http://mgcrea.github.io/angular-strap/">angular ui</a></li>
<li><a href="http://www.tuicool.com/articles/7ZZVr2">整合jQuery Mobile+AngularJS经验谈</a></li>
<li><a href="http://blog.jobbole.com/46589/">有jQuery背景，该如何用AngularJS编程思想</a></li>
<li><a href="http://each.sinaapp.com/angular/">AngularJS在线教程</a></li>
<li><a href="http://www.zouyesheng.com/angular.html">angular学习笔记</a></li>
</ul>
<h4 id="8-React"><a href="#8-React" class="headerlink" title="8. React"></a>8. React</h4><ul>
<li><a href="http://www.react-china.org/">react.js 中文论坛</a></li>
<li><a href="https://facebook.github.io/react/index.html">react.js 官方网址</a></li>
<li><a href="https://facebook.github.io/react/docs/getting-started.html">react.js 官方文档</a></li>
<li><a href="http://material-ui.com/#/">react.js material UI</a></li>
<li><a href="http://touchstonejs.io/">react.js TouchstoneJS UI</a></li>
<li><a href="http://amazeui.org/react/">react.js amazeui UI</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html">React 入门实例教程 - 阮一峰</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/react-native/">React Native 中文版</a></li>
<li>[Webpack 和 React 小书 - 前端乱炖](<a href="http://www.html-js.com/article/Fakefish">http://www.html-js.com/article/Fakefish</a> 3053)</li>
<li><a href="https://fakefish.github.io/react-webpack-cookbook/">Webpack 和 React 小书 - gitbook</a></li>
<li><a href="https://github.com/webpack/webpack">webpack</a></li>
<li><a href="http://html-js.com/article/3009">Webpack，101入门体验</a></li>
<li><a href="http://html-js.com/article/3113">webpack入门教程</a></li>
<li><a href="http://segmentfault.com/a/1190000003499526">基于webpack搭建前端工程解决方案探索</a></li>
<li><a href="http://www.piliyu.com/">React原创实战视频教程</a></li>
</ul>
<h4 id="9-移动端API"><a href="#9-移动端API" class="headerlink" title="9. 移动端API"></a>9. 移动端API</h4><ol>
<li>API<ul>
<li><a href="https://github.com/jtyjty99999/mobileTech">99移动端知识集合</a></li>
<li><a href="https://github.com/AlloyTeam/Mars">移动端前端开发知识库</a></li>
<li><a href="http://caibaojian.com/mobile-web-bug.html">移动前端的一些坑和解决方法（外观表现）</a></li>
<li><a href="http://www.cnblogs.com/PeunZhang/p/3407453.html">【原】移动web资源整理</a></li>
<li><a href="http://mweb.baidu.com/zeptoapi/">zepto 1.0 中文手册</a></li>
<li><a href="http://www.html-5.cn/Manual/Zepto/">zepto 1.0 中文手册</a></li>
<li><a href="http://www.css88.com/doc/zeptojs_api/">zepto 1.1.2</a></li>
<li><a href="http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto 中文注释</a></li>
<li><a href="http://app-framework-software.intel.com/api.php">jqmobile 手册</a></li>
<li><a href="https://github.com/maxzhang/maxzhang.github.com/issues">移动浏览器开发集合</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites">移动开发大杂烩</a></li>
<li><a href="http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/">微信webview中的一些问题</a></li>
</ul>
</li>
<li>框架<ul>
<li><a href="http://framework7.taobao.org/">特色的HTML框架可以创建精美的iOS应用</a></li>
<li><a href="http://m.sui.taobao.org/">淘宝SUI</a></li>
</ul>
</li>
</ol>
<h4 id="10-avalon"><a href="#10-avalon" class="headerlink" title="10. avalon"></a>10. avalon</h4><ul>
<li><a href="http://avalonjs.github.io/">avalonjs</a></li>
<li><a href="http://ued.qunar.com/oniui/index.html">Avalon新一代UI库： OniUI</a></li>
<li><a href="https://github.com/RubyLouvre/avalon.oniui">avalon.oniui-基于avalon的组件库</a></li>
<li></li>
</ul>
<h4 id="11-Requriejs"><a href="#11-Requriejs" class="headerlink" title="11. Requriejs"></a>11. Requriejs</h4><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript模块化编程（二）：AMD规范</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html">RequireJS入门（一）</a></li>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html">RequireJS入门（二）</a></li>
<li><a href="http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html">RequireJS进阶（三）</a></li>
<li><a href="http://www.cnblogs.com/yexiaochai/p/3632580.html">requrie源码学习</a></li>
<li><a href="http://www.oschina.net/translate/getting-started-with-the-requirejs-library">requrie 入门指南</a></li>
<li><a href="http://www.cnblogs.com/yexiaochai/p/3214926.html">requrieJS 学习笔记</a></li>
<li><a href="http://cyj.me/why-seajs/requirejs/">requriejs 其一</a></li>
<li><a href="http://www.cnblogs.com/yexiaochai/p/3221081.html">require backbone结合</a></li>
</ul>
<h4 id="12-Seajs"><a href="#12-Seajs" class="headerlink" title="12. Seajs"></a>12. Seajs</h4><ul>
<li><a href="http://seajs.org/">seajs</a></li>
<li><a href="http://cyj.me/why-seajs/zh/">seajs 中文手册</a></li>
</ul>
<h4 id="13-Less-sass"><a href="#13-Less-sass" class="headerlink" title="13. Less,sass"></a>13. Less,sass</h4><ul>
<li><a href="http://www.w3cplus.com/sassguide/">sass</a></li>
<li><a href="http://www.sass.hk/">sass教程-sass中国</a></li>
<li><a href="http://sass.bootcss.com/">Sass 中文文档</a></li>
<li><a href="http://less.bootcss.com/">less</a></li>
</ul>
<h4 id="14-Markdown"><a href="#14-Markdown" class="headerlink" title="14. Markdown"></a>14. Markdown</h4><ul>
<li><a href="http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版)</a></li>
<li><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md">markdown入门参考</a></li>
<li><a href="https://www.gitbook.com/">gitbook</a> 国外的在线markdown可编辑成书</li>
<li><a href="https://www.zybuluo.com/mdeditor">mdeditor</a> 一款国内的在线markdown编辑器</li>
<li><a href="https://stackedit.io/">stackedit</a> 国外的在线markdown编辑器，功能强大，同步云盘</li>
<li><a href="http://bh-lay.github.io/mditor/">mditor</a> 一款轻量级的markdown编辑器</li>
<li><a href="https://github.com/lepture/editor">lepture-editor</a></li>
<li><a href="https://github.com/jbt/markdown-editor">markdown-editor</a></li>
</ul>
<h4 id="15-D3"><a href="#15-D3" class="headerlink" title="15. D3"></a>15. D3</h4><ul>
<li><a href="https://github.com/mbostock/d3/wiki/Tutorials">d3 Tutorials</a></li>
<li><a href="https://github.com/mbostock/d3/wiki/Gallery">Gallery</a></li>
<li><a href="http://datavisual.lofter.com/post/40cf3a_188e535">lofter</a></li>
<li><a href="http://alanland.iteye.com/blog/1878595">iteye</a></li>
<li><a href="http://javascript.ruanyifeng.com/library/d3.html">ruanyifeng</a></li>
</ul>
<h4 id="16-兼容性"><a href="#16-兼容性" class="headerlink" title="16. 兼容性"></a>16. 兼容性</h4><ul>
<li><a href="http://kangax.github.io/compat-table/es6/">esma 兼容列表</a></li>
<li><a href="http://jigsaw.w3.org/css-validator/validator.html.zh-cn">W3C CSS验证服务</a></li>
<li><a href="http://caniuse.com/#index">caniuse</a></li>
<li><a href="http://csscreator.com/properties">csscreator</a></li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85).aspx">microsoft</a></li>
<li><a href="http://www.responsinator.com/">在线测兼容-移动端</a></li>
<li><a href="https://www.manymo.com/emulators">emulators</a></li>
</ul>
<h4 id="17-UI相关"><a href="#17-UI相关" class="headerlink" title="17. UI相关"></a>17. UI相关</h4><ul>
<li><a href="http://v3.bootcss.com/">bootcss</a></li>
<li><a href="http://www.w3cplus.com/MetroUICSS/">MetroUICSS</a></li>
<li><a href="http://semantic-ui.com/">semantic</a></li>
<li><a href="http://alexwolfe.github.io/Buttons/">Buttons</a></li>
<li><a href="http://hiloki.github.io/kitecss/">kitecss</a></li>
<li><a href="http://www.pintuer.com/">pintuer</a></li>
<li><a href="http://amazeui.org/">amazeui</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html">worldhello</a></li>
<li><a href="http://igit.linuxtoy.org/contents.html">linuxtoy</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">gitmagic</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">rogerdudler</a></li>
<li><a href="http://gitref.justjavac.com/">gitref</a></li>
<li><a href="http://git-scm.com/book/zh">book</a></li>
<li><a href="http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/">gogojimmy</a></li>
</ul>
<h4 id="18-HTTP"><a href="#18-HTTP" class="headerlink" title="18. HTTP"></a>18. HTTP</h4><ul>
<li><a href="http://segmentfault.com/bookmark/1230000002521721">HTTP API 设计指南</a></li>
</ul>
<h4 id="19-其它API"><a href="#19-其它API" class="headerlink" title="19. 其它API"></a>19. 其它API</h4><ul>
<li><a href="https://cnodejs.org/topic/56ef3edd532839c33a99d00e">javascript流行库汇总</a></li>
<li><a href="http://niceue.com/validator/demo/index.php">验证api</a></li>
<li><a href="http://www.css88.com/doc/underscore/">underscore 中文手册</a></li>
<li>[underscore源码分析](<a href="http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis">http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis</a> 3031)</li>
<li><a href="http://yalishizhude.github.io/tags/underscore/">underscore源码分析-亚里士朱德的博客</a></li>
<li><a href="http://underscorejs.org/">underscrejs en api</a></li>
<li><a href="https://lodash.com/">lodash - underscore的代替品</a></li>
<li><a href="http://extjs-doc-cn.github.io/ext4api/">ext4api</a></li>
<li><a href="http://www.csser.com/tools/backbone/backbone.js.html">backbone 中文手册</a></li>
<li><a href="http://dev.qwrap.com/resource/js/_docs/_youa/#/qw/base/loadJs_.htm">qwrap手册</a></li>
<li><a href="http://easings.net/zh-cn">缓动函数</a></li>
<li><a href="http://www.w3school.com.cn/svg/svg_reference.asp">svg 中文参考</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG">svg mdn参考</a></li>
<li><a href="https://github.com/gabelerner/canvg">svg 导出 canvas</a></li>
<li><a href="https://github.com/exupero/saveSvgAsPng">svg 导出 png</a></li>
<li><a href="http://www.zamzar.com/convert/ai-to-svg/">ai-to-svg</a></li>
<li><a href="https://github.com/machao/localStorage">localStorage 库</a></li>
</ul>
<h4 id="20-图表类"><a href="#20-图表类" class="headerlink" title="20. 图表类"></a>20. 图表类</h4><ul>
<li><a href="http://www.hcharts.cn/api/index.php">Highcharts 中文API</a></li>
<li><a href="http://api.highcharts.com/highcharts">Highcharts 英文API</a></li>
<li><a href="http://echarts.baidu.com/">ECharts 百度的图表软件</a></li>
<li><a href="http://lbs.amap.com/api/">高德地图</a></li>
<li><a href="http://paperjs.org/">开源的矢量图脚本框架</a></li>
<li><a href="http://jvectormap.com/">svg 地图</a></li>
</ul>
<h4 id="21-vue"><a href="#21-vue" class="headerlink" title="21. vue"></a>21. vue</h4><ul>
<li><a href="http://cn.vuejs.org/">Vue</a></li>
<li><a href="http://forum.vuejs.org/">Vue 论坛</a></li>
<li><a href="http://www.cnblogs.com/aaronjs/p/3660102.html">Vue 入门指南</a></li>
<li><a href="http://segmentfault.com/a/1190000000411057">Vue 的一些资源索引</a></li>
<li></li>
</ul>
<h4 id="21-正则"><a href="#21-正则" class="headerlink" title="21. 正则"></a>21. 正则</h4><ul>
<li><a href="http://segmentfault.com/a/1190000002471140">JS正则表达式元字符</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN-正则表达式</a></li>
<li><a href="http://javascript.ruanyifeng.com/stdlib/regexp.html">ruanyifeng - RegExp对象</a></li>
<li><a href="http://div.io/topic/764?page=1">小胡子哥 - 进阶正则表达式</a></li>
<li><a href="https://github.com/Cedriking/is.js/blob/master/is.js">is.js</a></li>
<li><a href="http://regexper.com/">正则在线测试</a></li>
<li></li>
</ul>
<h4 id="22-ionic"><a href="#22-ionic" class="headerlink" title="22. ionic"></a>22. ionic</h4><ul>
<li><a href="https://github.com/ychow/ionic-guide">ionic</a></li>
</ul>
<h4 id="23-其它"><a href="#23-其它" class="headerlink" title="23. 其它"></a>23. 其它</h4><ul>
<li><a href="http://mockjs.com/">Mock.js 是一款模拟数据生成器</a></li>
</ul>
<h3 id="七-开发规范"><a href="#七-开发规范" class="headerlink" title="七. 开发规范"></a>七. 开发规范</h3><ol>
<li>前端<ul>
<li><a href="http://alloyteam.github.io/CodeGuide">通过分析github代码库总结出来的工程师代码书写习惯</a></li>
<li><a href="http://codeguide.bootcss.com/">HTML&amp;CSS编码规范 by @mdo</a></li>
<li><a href="http://www.alloyteam.com/2011/10/107/">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li>
<li><a href="http://yuwenhui.github.io/">前端编码规范之js - by yuwenhui</a></li>
<li><a href="http://www.cnblogs.com/hustskyking/p/javascript-spec.html">前端编码规范之js - by 李靖</a></li>
<li><a href="http://zhibimo.com/read/Ashu/front-end-style-guide/">前端开发规范手册</a></li>
<li><a href="https://github.com/yuche/javascript#table-of-contents">Airbnb JavaScript 编码规范（简体中文版）</a></li>
<li><a href="http://www.zhihu.com/question/20351507">AMD与CMD规范的区别</a></li>
<li><a href="http://www.cnblogs.com/tugenhua0707/p/3507957.html">AMD与CMD规范的区别</a></li>
<li><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html">KISSY 源码规范</a></li>
<li><a href="http://codeguide.bootcss.com/">bt编码规范</a></li>
<li><a href="https://github.com/Suxiaogang/Code_Guide">规范加强版</a></li>
<li><a href="http://blog.jobbole.com/79075/">前端代码规范 及 最佳实践</a></li>
<li><a href="http://coderlmn.github.io/code-standards/">百度前端规范</a></li>
<li><a href="http://isobar-idev.github.io/code-standards/">百度前端规范</a></li>
<li><a href="http://zhuanlan.zhihu.com/fuyun/19884834">百度前端规范</a></li>
<li><a href="https://github.com/gf-rd/es6-coding-style">ECMAScript6 编码规范–广发证券前端团队</a></li>
<li><a href="http://blog.jobbole.com/79484/">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li>
<li><a href="http://nec.netease.com/standard">网易前端开发规范</a></li>
<li><a href="http://www.75team.com/archives/1049">css模块</a></li>
<li><a href="https://github.com/ecomfe/spec">前端规范资源列表</a></li>
</ul>
</li>
<li>PHP<ul>
<li><a href="http://segmentfault.com/a/1190000000443795">最流行的PHP 代码规范</a></li>
<li><a href="https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md">最流行的PHP 代码规范</a></li>
</ul>
</li>
<li>Android<ul>
<li><a href="http://www.cnblogs.com/lcw/p/3619181.html">【敏捷开发】Android团队开发规范</a></li>
<li><a href="http://www.jianshu.com/p/4390f4fe19b3">Android 开发规范与应用</a></li>
</ul>
</li>
</ol>
<h3 id="八-其它收集"><a href="#八-其它收集" class="headerlink" title="八. 其它收集"></a>八. 其它收集</h3><h4 id="1-各大公司开源项目"><a href="#1-各大公司开源项目" class="headerlink" title="1. 各大公司开源项目"></a>1. 各大公司开源项目</h4><ul>
<li><a href="https://code.facebook.com/projects/web/">Facebook Projects</a></li>
<li><a href="http://fex.baidu.com/">百度web前端研发部</a></li>
<li><a href="http://efe.baidu.com/">百度EFE</a></li>
<li><a href="https://github.com/fex-team/">百度github</a></li>
<li><a href="http://www.alloyteam.com/">alloyteam</a></li>
<li><a href="http://alloyteam.github.io/">alloyteam-github</a></li>
<li><a href="https://github.com/AlloyTeam/AlloyGameEngine">alloyteam-AlloyGameEngine</a></li>
<li><a href="http://alloyteam.github.io/AlloyDesigner/">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li>
<li><a href="http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li>
<li><a href="http://aeditor.alloyteam.com/">AEditor</a> H5动画交互页开发的工具</li>
<li><a href="http://forum.maka.im/wordpress/">maka</a></li>
<li><a href="https://github.com/fenbility/weekly-feed">值得订阅的weekly</a></li>
<li><a href="http://cube.qq.com/">腾讯html5</a></li>
<li><a href="http://75team.github.io/">奇舞团开源项目</a></li>
<li><a href="http://ued.qunar.com/">Qunar UED</a></li>
</ul>
<h4 id="2-Javascript"><a href="#2-Javascript" class="headerlink" title="2. Javascript"></a>2. Javascript</h4><ol>
<li>常用<ul>
<li><a href="http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/">ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性</a></li>
<li><a href="http://mottie.github.io/Keyboard/">模拟键盘</a></li>
<li><a href="https://github.com/hotoo/pinyin">拼音</a></li>
<li><a href="https://github.com/mc-zone/IDValidator">中国个人身份证号验证</a></li>
</ul>
</li>
<li>算法<ul>
<li><a href="https://github.com/Ralph-Wang/algorithm.in.js">数据结构与算法 JavaScript 描述. 章节练习</a></li>
<li><a href="https://github.com/twobin/twobinSort">常见排序算法（JS版）</a></li>
<li><a href="https://github.com/luofei2011/jsAgm/blob/master/js/sort.js">经典排序</a></li>
<li><a href="https://github.com/hechangmin/jssort">常见排序算法-js版本</a></li>
<li><a href="https://github.com/lightningtgc/JavaScript-Algorithms">JavaScript 算法与数据结构 精华集</a></li>
<li><a href="http://www.nowcoder.com/live/courses">面试常考算法题精讲</a></li>
<li></li>
</ul>
</li>
<li>移动端<ul>
<li><a href="https://github.com/ftlabs/fastclick">fastclick</a></li>
<li><a href="https://github.com/mmastrac/jquery-noclickdelay">no-click-delay</a></li>
</ul>
</li>
<li>JSON<ul>
<li><a href="http://beta.json-generator.com/">模拟生成JSON数据</a></li>
<li><a href="http://jsonp.afeld.me/">返回跨域JSONAPI</a></li>
</ul>
</li>
</ol>
<h4 id="3-Html5"><a href="#3-Html5" class="headerlink" title="3. Html5"></a>3. Html5</h4><ul>
<li><a href="http://www.zhihu.com/question/24398907">HTML5 有哪些让你惊艳的 demo？</a></li>
</ul>
<h4 id="4-CSS"><a href="#4-CSS" class="headerlink" title="4. CSS"></a>4. CSS</h4><ul>
<li><a href="http://browserhacks.com/">browserhacks</a></li>
<li></li>
</ul>
<h4 id="5-jQuery"><a href="#5-jQuery" class="headerlink" title="5. jQuery"></a>5. jQuery</h4><ol>
<li>焦点图<ul>
<li><a href="https://github.com/koen301/myfocus">myfocus</a></li>
<li><a href="http://www.chhua.com/myfocus/">myfocus-官方演示站</a></li>
<li><a href="http://www.superslide2.com/">SuperSlidev2.1 – 大话主席</a></li>
<li><a href="http://www.bujichong.com/sojs/soChange/index.html">soChange</a></li>
</ul>
</li>
</ol>
<h4 id="6-Ext-EasyUI-J-UI-及其它各种UI方案"><a href="#6-Ext-EasyUI-J-UI-及其它各种UI方案" class="headerlink" title="6. Ext, EasyUI, J-UI 及其它各种UI方案"></a>6. Ext, EasyUI, J-UI 及其它各种UI方案</h4><ol>
<li>Ext<ul>
<li><a href="https://www.sencha.com/products/extjs/">extjs</a></li>
<li><a href="http://docs.sencha.com/extjs/4.0.7/">ext4英文api</a></li>
<li><a href="http://extjs-doc-cn.github.io/ext4api/">ext4中文api</a></li>
<li></li>
</ul>
</li>
<li>EasyUI<ul>
<li><a href="http://jquery-easyui.googlecode.com/svn/trunk/src/">jquery easyui 未压缩源代码</a></li>
</ul>
</li>
<li>J-UI<ul>
<li><a href="http://jui.org/">J-UI</a></li>
</ul>
</li>
<li>Other<ul>
<li><a href="http://dcloudio.github.io/mui/">MUI-最接近原生APP体验的高性能前端框架</a></li>
<li><a href="http://amazeui.org/">Amaze UI | 中国首个开源 HTML5 跨屏前端框架</a></li>
<li><a href="http://m.sui.taobao.org/">淘宝 HTML5 前端框架</a></li>
<li><a href="http://docs.kissyui.com/">KISSY - 阿里前端JavaScript库</a></li>
<li><a href="http://nej.netease.com/">网易Nej - Nice Easy Javascript</a></li>
<li><a href="http://demos.telerik.com/kendo-ui/mvvm/index">Kendo UI MVVM Demo</a></li>
<li><a href="http://www.bootcss.com/">Bootstrap</a></li>
<li><a href="http://smartui.chinamzz.com/">Smart UI</a></li>
<li><a href="http://developer.yahoo.com/yui/grids/">雅虎UI - CSS UI</a></li>
</ul>
</li>
</ol>
<h4 id="7-页面-社会化-分享功能"><a href="#7-页面-社会化-分享功能" class="headerlink" title="7. 页面 社会化 分享功能"></a>7. 页面 社会化 分享功能</h4><ul>
<li><a href="http://share.baidu.com/">百度分享</a> pc端</li>
<li><a href="http://jiathis.com/">JiaThis</a> pc端</li>
<li><a href="http://developer.baidu.com/soc/share">社会化分享组件</a> 移动端</li>
<li><a href="http://www.mob.com/#/index">ShareSDK 轻松实现社会化功能</a> 移动端</li>
<li><a href="http://dev.umeng.com/social/android/quick-integration">友盟分享</a> 移动端</li>
</ul>
<h4 id="8-富文本编辑器"><a href="#8-富文本编辑器" class="headerlink" title="8. 富文本编辑器"></a>8. 富文本编辑器</h4><ul>
<li><a href="http://ueditor.baidu.com/website/">百度 ueditor</a></li>
<li><a href="http://ckeditor.com/">经典的ckeditor</a></li>
<li><a href="http://kindeditor.net/">经典的kindeditor</a></li>
<li><a href="http://www.bootcss.com/p/bootstrap-wysiwyg/">wysiwyg</a></li>
<li><a href="http://integ.github.io/BachEditor/">一个有情怀的编辑器。Bach’s Editor</a></li>
<li><a href="https://github.com/mycolorway/simditor">tower用的编辑器</a></li>
<li><a href="https://github.com/summernote/summernote">summernote 编辑器</a></li>
<li><a href="http://neilj.github.io/Squire/">html5编辑器</a></li>
<li><a href="http://lab.hustlzp.com/XEditor/">XEditor</a></li>
<li><a href="https://github.com/wangfupeng1988/wangEditor">wangEditor</a></li>
</ul>
<h4 id="9-日历"><a href="#9-日历" class="headerlink" title="9. 日历"></a>9. 日历</h4><ol>
<li><p>PC</p>
<ul>
<li><a href="http://www.my97.net/dp/demo/index.htm">经典my97</a></li>
<li><a href="http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html">强大的独立日期选择器</a></li>
<li><a href="http://fullcalendar.io/">fullcalendar</a></li>
<li><a href="http://blog.csdn.net/francislaw/article/details/7740630">fullcalendar日历控件知识点集合</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html">中文api</a></li>
<li><a href="https://github.com/zzyss86/LunarCalendar">农历日历</a></li>
<li><a href="http://www.sucaisj.com/jiaoben/date/201509/16856.html">超酷的仿百度带节日日历老黄历控件</a></li>
<li><a href="http://momentjs.com/">日期格式化</a></li>
<li><a href="https://github.com/Johnqing/QPAYCalendar/">大牛日历控件</a></li>
<li><a href="https://github.com/Iamlars/dateMarker">我群某管理作品</a></li>
<li><a href="http://digitalbush.com/projects/masked-input-plugin/">input按位替换-官网</a></li>
<li><a href="https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2">input按位替换-github</a></li>
<li><a href="https://github.com/dangrossman/bootstrap-daterangepicker">bootstrap-daterangepicker</a></li>
<li><a href="http://www.vandelaydesign.com/30-best-free-jquery-plugins/">国外30个插件集合</a></li>
<li><a href="http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/">JavaScript datepicker</a></li>
<li><a href="http://jonthornton.github.io/Datepair.js/">Datepair.js</a></li>
<li><a href="https://github.com/glad/glDatePicker">一个风格多样的日历</a></li>
<li><a href="http://amsul.ca/pickadate.js/date/">弹出层式的全日历</a></li>
<li><a href="http://www.daterangepicker.com/">jquery双日历</a></li>
</ul>
</li>
<li><p>移动</p>
<ul>
<li><a href="http://www.frankdemo.cn/index.php?c=content&a=show&id=115">大气实用jQuery手机移动端日历日期选择插件</a></li>
<li><a href="https://mobiscroll.com/">jQuery Mobile 移动开发中的日期插件Mobiscroll</a></li>
</ul>
</li>
<li><p>Date library</p>
<ul>
<li><a href="https://github.com/datejs/Datejs">Datejs</a></li>
<li><a href="http://sugarjs.com/api/Date">sugarjs</a></li>
</ul>
</li>
</ol>
<h4 id="10-综合效果搜索平台"><a href="#10-综合效果搜索平台" class="headerlink" title="10. 综合效果搜索平台"></a>10. 综合效果搜索平台</h4><ul>
<li><a href="http://www.jq22.com/">效果网</a></li>
<li><a href="http://www.17sucai.com/">17素材</a></li>
<li><a href="http://microjs.com/">常用的JavaScript代码片段</a></li>
</ul>
<h4 id="11-前端工程化"><a href="#11-前端工程化" class="headerlink" title="11. 前端工程化"></a>11. 前端工程化</h4><ol>
<li>概述<ul>
<li><a href="http://www.awesomes.cn/">前端工具大全</a></li>
<li><a href="https://github.com/fouber/blog/issues/10?from=timeline&isappinstalled=0#">什么是前端工程化</a></li>
</ul>
</li>
<li>Gulp<ul>
<li><a href="http://gulpjs.com/">Gulp官网</a></li>
<li><a href="http://www.gulpjs.com.cn/">Gulp中文网</a></li>
<li><a href="https://github.com/Platform-CUF/use-gulp">gulp资料收集</a></li>
<li><a href="http://javascript.ruanyifeng.com/tool/gulp.html">Gulp：任务自动管理工具 - ruanyifeng</a></li>
<li><a href="http://gulpjs.com/plugins/">Gulp插件</a></li>
<li><a href="http://www.ido321.com/1622.html">Gulp不完全入门教程</a></li>
<li><a href="https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33">为什么使用gulp?</a></li>
<li><a href="http://www.dbpoo.com/getting-started-with-gulp/">Gulp安装及配合组件构建前端开发一体化</a></li>
<li><a href="https://github.com/nimojs/gulp-book">Gulp 入门指南</a></li>
<li><a href="https://github.com/nimojs/blog/issues/19">Gulp 入门指南 - nimojs</a></li>
<li><a href="http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/">Gulp入门教程</a></li>
<li><a href="http://www.imooc.com/video/5692">Gulp in Action</a></li>
<li><a href="http://www.w3ctech.com/topic/134">Gulp开发教程（翻译）</a></li>
<li><a href="http://www.cnblogs.com/2050/p/4198792.html">前端构建工具gulpjs的使用介绍及技巧</a></li>
</ul>
</li>
<li>Grunt<ul>
<li><a href="http://gruntjs.com/">gruntjs</a></li>
<li><a href="http://www.gruntjs.net/">Grunt中文网</a></li>
</ul>
</li>
<li>Fis<ul>
<li><a href="http://fex-team.github.io/fis-site/index.html">fis 官网</a></li>
<li><a href="http://fis.baidu.com/">fis</a></li>
</ul>
</li>
</ol>
<h4 id="12-轮播图"><a href="#12-轮播图" class="headerlink" title="12. 轮播图"></a>12. 轮播图</h4><ol>
<li>pc图轮<ul>
<li><a href="http://www.jsfoot.com/jquery/demo/2011-09-20/192.html">单屏轮播sochange</a></li>
<li><a href="http://bxslider.com/examples/carousel-demystified">左右按钮多图切换</a></li>
<li><a href="https://github.com/alvarotrigo/fullPage.js/">fullpage全屏轮播</a></li>
</ul>
</li>
<li>移动端<ul>
<li><a href="http://www.swipejs.com/">无缝切换</a></li>
<li><a href="http://www.idangero.us/swiper/">滑屏效果</a></li>
<li><a href="https://github.com/peunzhang/fullpage">全屏fullpage</a></li>
<li><a href="https://github.com/qiqiboy/touchslider">单个图片切换</a></li>
<li><a href="https://github.com/peunzhang/slip.js">单个全屏切换</a></li>
<li><a href="http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group">百度的切换库</a></li>
<li><a href="https://github.com/peunzhang/iSlider">单个全屏切换</a></li>
<li><a href="https://github.com/saw/touch-interfaces">滑屏效果</a></li>
<li><a href="http://baijs.com/tinycircleslider/">旋转拖动设置</a></li>
<li><a href="http://touchslider.com/">类似于swipe切换</a></li>
<li><a href="http://www.swiper.com.cn/demo/index.html">支持多种形式的触摸滑动</a></li>
<li><a href="https://github.com/joker-ye/main/blob/master/wap/index.html">滑屏效果</a></li>
<li><a href="http://www.superslide2.com/">大话主席pc移动图片轮换</a></li>
<li><a href="https://github.com/hahnzhu/parallax.js">滑屏效果</a></li>
<li><a href="https://github.com/yanhaijing/zepto.fullpage">基于zepto的fullpage</a></li>
<li>[<a href="http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html">WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</a></li>
<li><a href="http://loo2k.com/blog/detecting-wechat-client/">判断微信客户端的那些坑</a></li>
<li><a href="https://github.com/JefferyWang/nativeShare.js">可以通过javascript直接调用原生分享的工具</a></li>
<li><a href="http://www.jiathis.com/help/html/weixin-share-code">JiaThis 分享到微信代码</a></li>
<li><a href="http://fex.baidu.com/blog/2015/05/cross-mobile/">聊聊移动端跨平台开发的各种技术</a></li>
<li><a href="http://www.zhihu.com/question/29922082">前端自动化测试</a></li>
<li><a href="http://ajccom.github.io/niceslider/">多种轮换图片</a></li>
<li><a href="https://mango.github.io/slideout/">滑动侧边栏</a></li>
</ul>
</li>
</ol>
<h4 id="13-文件上传"><a href="#13-文件上传" class="headerlink" title="13. 文件上传"></a>13. 文件上传</h4><ul>
<li><a href="http://fex.baidu.com/webuploader/">百度上传组件</a></li>
<li><a href="https://blueimp.github.io/jQuery-File-Upload/">上传</a></li>
<li><a href="http://www.hdfu.net/">flash 头像上传</a></li>
<li><a href="http://www.dropzonejs.com/">图片上传预览</a></li>
<li><a href="http://elemefe.github.io/image-cropper/">图片裁剪</a></li>
<li><a href="http://www.shearphoto.com/">图片裁剪-shearphoto</a></li>
<li><a href="http://www.oschina.net/project/tag/284/jquery-image-tools?lang=0&os=0&sort=view&p=2">jQuery图片处理</a></li>
<li></li>
</ul>
<h4 id="14-模拟select"><a href="#14-模拟select" class="headerlink" title="14. 模拟select"></a>14. 模拟select</h4><ul>
<li><a href="http://aui.github.io/popupjs/doc/selectbox.html">糖饼 select</a></li>
<li><a href="https://github.com/rmm5t/jquery-flexselect">flexselect</a></li>
<li><a href="http://loudev.com/">双select</a></li>
<li><a href="http://select2.github.io/">select2</a></li>
<li></li>
</ul>
<h4 id="15-取色插件"><a href="#15-取色插件" class="headerlink" title="15. 取色插件"></a>15. 取色插件</h4><ul>
<li><a href="http://www.jq22.com/plugin/367">类似 Photoshop 的界面取色插件</a></li>
<li><a href="https://github.com/jquery/jquery-color/">jquery color</a></li>
<li><a href="http://www.oschina.net/project/tag/287/color-picker">取色插件集合</a></li>
<li><a href="https://github.com/mattfarina/farbtastic">farbtastic 圆环＋正方形</a></li>
<li></li>
</ul>
<h4 id="16-城市联动"><a href="#16-城市联动" class="headerlink" title="16. 城市联动"></a>16. 城市联动</h4><ul>
<li><a href="http://www.ijquery.cn/?p=360">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li>
<li></li>
</ul>
<h4 id="17-剪贴板"><a href="#17-剪贴板" class="headerlink" title="17. 剪贴板"></a>17. 剪贴板</h4><ul>
<li><a href="https://github.com/zeroclipboard/zeroclipboard">剪贴板</a></li>
<li><a href="http://zenorocha.github.io/clipboard.js/">clipboard 最新的剪切方案</a></li>
<li><a href="https://github.com/zenorocha/clipboard.js">不是Flash的剪贴板</a></li>
</ul>
<h4 id="18-简繁转换"><a href="#18-简繁转换" class="headerlink" title="18. 简繁转换"></a>18. 简繁转换</h4><ul>
<li><a href="https://github.com/BYVoid/OpenCC">简繁转换</a></li>
</ul>
<h4 id="19-表格-Grid"><a href="#19-表格-Grid" class="headerlink" title="19. 表格 Grid"></a>19. 表格 Grid</h4><ul>
<li><a href="http://facebook.github.io/fixed-data-table/">facebook表格</a></li>
<li><a href="http://handsontable.com/">类似于Excel编辑表格-handsontable</a></li>
<li><a href="http://bootstrap-table.wenzhixin.net.cn/">bootstrap-table插件</a></li>
<li><a href="https://www.datatables.net/">datatables</a></li>
</ul>
<h4 id="20-在线演示"><a href="#20-在线演示" class="headerlink" title="20. 在线演示"></a>20. 在线演示</h4><ul>
<li><a href="http://runjs.cn/">js 在线编辑 - runjs</a></li>
<li><a href="http://jsbin.com/">js 在线编辑 - jsbin</a></li>
<li><a href="http://codepen.io/">js 在线编辑 - codepen</a></li>
<li><a href="http://jsfiddle.net/">js 在线编辑 - jsfiddle</a></li>
<li><a href="http://ideone.com/">java 在线编辑 - runjs</a></li>
<li><a href="http://code.hcharts.cn/">js 在线编辑 - hcharts</a></li>
<li><a href="http://jsdm.com/">js 在线编辑 - jsdm</a></li>
<li><a href="http://sqlfiddle.com/">sql 在线编辑 - sqlfiddle</a></li>
<li><a href="https://thimble.mozilla.org/">mozilla 在线编辑器</a></li>
</ul>
<h4 id="21-播放器"><a href="#21-播放器" class="headerlink" title="21. 播放器"></a>21. 播放器</h4><ul>
<li><a href="https://github.com/zmmbreeze/DeadSimpleVideoPlayer">Html5 VideoPlayer</a></li>
</ul>
<h4 id="22-粒子动画"><a href="#22-粒子动画" class="headerlink" title="22. 粒子动画"></a>22. 粒子动画</h4><ul>
<li><a href="http://a-jie.github.io/Proton/#example">Proton 烟花</a></li>
</ul>
<h3 id="九-Nodejs"><a href="#九-Nodejs" class="headerlink" title="九. Nodejs"></a>九. Nodejs</h3><ul>
<li><a href="http://liuqing.pw/">nodejs 篇幅比较巨大</a></li>
<li><a href="https://github.com/alsotang/node-lessons">Node.js 包教不包会</a></li>
<li><a href="http://www.rainweb.cn/article/category/Nodejs">篇幅比较少</a></li>
<li><a href="http://www.w3cfuns.com/article-5598538-1-1.html">node express 入门教程</a></li>
<li><a href="http://my.oschina.net/u/568264/blog/193773">nodejs定时任务</a></li>
<li><a href="http://60sky.com/">一个nodejs博客</a></li>
<li><a href="http://www.cnblogs.com/yexiaochai/p/3536547.html">【NodeJS 学习笔记04】新闻发布系统</a></li>
<li><a href="http://www.cnblogs.com/qqloving/p/3541099.html">过年7天乐，学nodejs 也快乐</a></li>
<li><a href="https://github.com/nqdeng/7-days-nodejs">七天学会NodeJS</a></li>
<li><a href="http://www.cnblogs.com/zhongweiv/p/nodejs_events.html">Nodejs学习笔记（二）— 事件模块</a></li>
<li><a href="http://www.cnblogs.com/liusuqi/p/3735491.html">nodejs入门</a></li>
<li><a href="https://github.com/zensh/jsgen">angularjs nodejs</a></li>
<li><a href="http://blog.fens.me/series-nodejs/">从零开始nodejs系列文章</a></li>
<li><a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">理解nodejs</a></li>
<li><a href="http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/">nodejs事件轮询</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html">node入门</a></li>
<li><a href="http://ourjs.com/detail/53e1f281c5910a9806000001">nodejs cms</a></li>
<li><a href="http://ourjs.com/detail/529ca5950cb6498814000005">Node初学者入门，一本全面的NodeJS教程</a></li>
<li><a href="http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/">NodeJS的代码调试和性能调优</a></li>
</ul>
<h3 id="十-性能优化"><a href="#十-性能优化" class="headerlink" title="十. 性能优化"></a>十. 性能优化</h3><ol>
<li>常规优化<ul>
<li><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering">Javascript高性能动画与页面渲染</a></li>
<li><a href="http://isux.tencent.com/h5-performance.html">移动H5前端性能优化指南</a></li>
<li><a href="http://ued.5173.com/?p=1731">5173首页前端性能优化实践</a></li>
<li><a href="http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers">给网页设计师和前端开发者看的前端性能优化</a></li>
<li><a href="http://www.orzpoint.com/profiling-css-and-optimization-notes/">复杂应用的 CSS 性能分析和优化建议</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/">张鑫旭——前端性能</a></li>
<li><a href="http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html">前端性能监控总结</a></li>
<li><a href="http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/">网站性能优化之CSS无图片技术</a></li>
<li><a href="http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html">web前端性能优化进阶路</a></li>
<li><a href="http://my.eoe.cn/tuwandou/archive/4544.html">前端技术：网站性能优化之CSS无图片技术</a></li>
<li><a href="http://www.baiduux.com/blog/2011/02/15/browser-loading/">浏览器的加载与页面性能优化</a></li>
<li><a href="http://www.w3ctech.com/p/1503">页面加载中的图片性能优化</a></li>
<li><a href="http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD">Hey——前端性能</a></li>
<li><a href="http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/">html优化</a></li>
<li><a href="http://www.99css.com/tag/%E6%80%A7%E8%83%BD">99css——性能</a></li>
<li><a href="http://www.yslow.net/category.php?cid=20">Yslow——性能优化</a></li>
<li><a href="http://www.cnblogs.com/yslow/">YSLOW中文介绍</a></li>
<li><a href="http://www.360ito.com/article/40.html">转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化</a></li>
<li><a href="http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml">Yahoo!团队实践分享：网站性能</a></li>
<li><a href="http://blog.jiasule.com/i/153">网站性能优化指南：什么使我们的网站变慢？</a></li>
<li><a href="http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html">网站性能优化实践，减少加载时间，提高用户体验</a></li>
<li><a href="http://www.umtry.com/archives/747.html">浅谈网站性能优化 前端篇</a></li>
<li><a href="http://www.adinnet.cn/blog/designview/2012-7-12/678.html">前端重构实践之如何对网站性能优化？</a></li>
<li><a href="http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/">前端性能优化：使用媒体查询加载指定大小的背景图片</a></li>
<li><a href="http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html">网站性能系列博文</a></li>
<li><a href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml">加载，不只是少一点点</a></li>
<li><a href="http://mzhou.me/article/95310/">前端性能的测试与优化</a></li>
<li><a href="http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/">分享网页加载速度优化的一些技巧？</a></li>
<li><a href="http://www.f2es.com/images-bytes-opt/">页面加载中的图片性能优化</a></li>
<li><a href="http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html">web前端优化(基于Yslow)</a></li>
<li><a href="https://www.qianduan.net/website-performance-optimization-tool.html">网站性能优化工具大全</a></li>
<li><a href="http://www.alloyteam.com/2012/10/high-performance-html/">【高性能前端1】高性能HTML</a></li>
<li><a href="http://www.alloyteam.com/2012/10/high-performance-css/">【高性能前端2】高性能CSS</a></li>
<li><a href="http://coolshell.cn/articles/6470.html">由12306谈谈网站前端性能和后端性能优化</a></li>
<li><a href="http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/">AlloyTeam——前端优化</a></li>
<li><a href="http://www.cnblogs.com/developersupport/p/3248695.html">毫秒必争，前端网页性能最佳实践</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html">网站性能工具Yslow的使用方法</a></li>
<li><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1">前端工程与性能优化（上）：静态资源版本更新与缓存</a></li>
<li><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2">前端工程与性能优化（下）：静态资源管理与模板框架</a></li>
<li><a href="http://blog.jobbole.com/48369/">HTTPS连接的前几毫秒发生了什么</a></li>
<li><a href="http://uicss.cn/yslow/#more-12319">Yslow</a></li>
<li><a href="http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/">Essential Web Performance Metrics — A Primer, Part 1</a></li>
<li><a href="http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/">Essential Web Performance Metrics — Part 2</a></li>
<li><a href="http://jayli.github.io/blog/data/2011/12/23/yuislide.html">YUISlide,针对移动设备的动画性能优化</a></li>
<li><a href="http://joelglovier.com/improving-site-performance/">Improving Site Performance</a></li>
<li><a href="http://segmentfault.com/a/1190000000367899">让网站提速的最佳前端实践</a></li>
<li><a href="http://sixrevisions.com/web-development/why-website-speed-is-important/">Why Website Speed is Important</a></li>
<li><a href="https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/">Need for Speed – How to Improve your Website Performance</a></li>
<li><a href="https://github.com/amfe/article/issues/1">阿里无线前端性能优化指南 (Pt.1 加载期优化)</a></li>
<li></li>
</ul>
</li>
<li>优化工具<ul>
<li><a href="http://www.html-js.com/article/3083">JavaScript 性能分析新工具 OneProfile</a></li>
<li><a href="http://www.html-js.com/article/3091">JavaScript 堆内存分析新工具 OneHeap</a></li>
</ul>
</li>
<li>在线工具<ul>
<li><a href="https://developers.google.com/speed/pagespeed/insights/">google在线工具</a></li>
<li><a href="http://www.alibench.com/">阿里测</a></li>
<li><a href="http://itest.aliyun.com/">阿里-免费测试服务</a></li>
<li><a href="https://github.com/alibaba/f2etest">阿里-F2etest多浏览器兼容性测试解决方案</a></li>
<li><a href="http://jsperf.com/">js性能测试</a></li>
<li></li>
</ul>
</li>
</ol>
<h3 id="十一-前端架构"><a href="#十一-前端架构" class="headerlink" title="十一. 前端架构"></a>十一. 前端架构</h3><ul>
<li><a href="http://www.zhihu.com/topic/19612641">技术架构</a></li>
<li><a href="http://saito.im/note/The-Architecture-of-F2E/">前端架构</a></li>
<li><a href="http://www.zhihu.com/question/24092572">如何成为前端架构师</a></li>
<li><a href="http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html">关于前端架构-张克军</a></li>
<li><a href="http://www.zhihu.com/question/25583350">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li>
<li></li>
</ul>
<h3 id="十二-个人作品"><a href="#十二-个人作品" class="headerlink" title="十二. 个人作品"></a>十二. 个人作品</h3><h4 id="1-推荐作品"><a href="#1-推荐作品" class="headerlink" title="1. 推荐作品"></a>1. 推荐作品</h4><ul>
<li><a href="https://gist.github.com/wintercn">winter代码片段需要翻墙</a></li>
<li><a href="http://www.fgm.cc/learn/">fgm</a></li>
<li><a href="https://github.com/hongru/hongru.github.com">岑安作品集</a></li>
<li><a href="http://kmdjs.github.io/">当耐特demo集合</a></li>
<li><a href="http://www.laoshu133.com/Lab/">米空格 js作品</a></li>
<li><a href="http://koen301.github.io/">myFocus</a></li>
<li><a href="http://panxuepeng.github.io/seajslib/">SeaJS组件库</a></li>
<li><a href="http://yanhaijing.com/myProject/">颜海镜作品</a></li>
<li><a href="http://jo2.org/category/myworks/">脚儿网作品</a></li>
<li><a href="http://www.cnitblog.com/yemoo/category/3107.html">javascript个人作品</a></li>
<li><a href="http://bbs.miaov.com/forum.php?mod=viewthread&tid=7790">妙味的雷东升游戏作品</a></li>
<li><a href="http://bbs.csdn.net/topics/380227212">javascript作品集</a></li>
<li><a href="https://github.com/TooBug/works">云五笔，灰度产生生成工具</a></li>
<li><a href="http://koen301.github.io/">项目主页</a></li>
<li><a href="http://zaole.net/">个性的作品主页</a></li>
<li><a href="http://static.tingall.com/v2/player/">播放器</a></li>
<li><a href="http://ucren.com/blog/demos">ucren js demos 集</a></li>
<li><a href="http://www.zhinengshe.com/works_list.html">智能社</a></li>
<li><a href="http://demos.shizuwu.cn/">实例陈列架</a></li>
<li><a href="http://zoye.sinaapp.com/demo">zoye demo</a></li>
<li><a href="http://lab.yuanwai.wang/">王员外</a></li>
<li><a href="http://pingfan1990.sinaapp.com/">平凡</a></li>
<li><a href="http://www.lovewebgames.com/">jyg 游戏案例</a></li>
<li><a href="http://www.helloweba.com/list.html">很多jquery插件</a></li>
<li><a href="http://www.bujichong.com/sojs/api/index.html">不羁虫 - soJs 作品系列</a></li>
<li><a href="http://frozenui.github.io/case.html">frozenui</a></li>
<li><a href="http://js-game.github.io/othello/">黑白棋</a></li>
<li><a href="http://yansm.github.io/fromone/index.html">fromone</a></li>
</ul>
<h4 id="2-群员作品"><a href="#2-群员作品" class="headerlink" title="2. 群员作品"></a>2. 群员作品</h4><ul>
<li>[MDialog - <a href="http://demo.webjyh.com/">合肥-M.J]</a></li>
<li>[轮播图 - <a href="http://sandbox.runjs.cn/show/do6zlrrk">上海－冷静]</a></li>
<li>[<a href="http://www.replace5.com/">广州—坚壳]</a></li>
<li>[<a href="http://www.seejs.com/demos/">成都 - 无痕]　感恩节专题</a></li>
<li>[<a href="http://hacke2.github.io/works">球霸天]</a></li>
<li>[<a href="http://www.cnblogs.com/mcat/">北京-小数]</a></li>
<li>[<a href="http://thx.github.io/magix/">ptf] Magix 工具</a></li>
<li>[<a href="http://thx.github.io/magix/">杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li>
<li>[<a href="http://bh-lay.com/labs/">上海-剧中人]-实验室</a></li>
<li>[<a href="http://jikeytang.github.io/">上海-豪情 ] 作品集合</a></li>
<li>[<a href="http://guoshan.sinaapp.com/">成都-feeling]</a></li>
<li>[<a href="http://www.cnblogs.com/liyunhua/">上海-angela]</a></li>
<li>[<a href="http://hcjp.github.io/work/demo/">海南-hank]作品</a></li>
<li>[<a href="https://github.com/yibuyisheng/blogs/issues">上海-张力]博客</a></li>
<li>[<a href="http://zkske121.github.io/">上海-zenki]作品</a></li>
<li><a href="http://01google.sinaapp.com/locker.html">移动端图案解锁</a></li>
<li>[<a href="https://github.com/webjyh/MPreview.mobile">合肥-M.J] - MPreview 移动端图片预览组</a></li>
<li>[<a href="https://github.com/webjyh/Mexam">合肥-M.J] - Mexam 移动端在线做题组</a></li>
<li>[<a href="http://letyougo.github.io/dancer/">北京-苏瑞] - dancer小人</a></li>
<li>[<a href="http://k.swao.cn/js/">上海-玄沐]- 个人网站</a></li>
<li>[<a href="http://www.meckodo.com/">厦门-二哲]- 个人博客</a></li>
</ul>
<h4 id="3-国外大牛精品"><a href="#3-国外大牛精品" class="headerlink" title="3. 国外大牛精品"></a>3. 国外大牛精品</h4><ul>
<li><a href="http://pazguille.me/">pazguille</a></li>
</ul>
<h3 id="十三-简历模板"><a href="#十三-简历模板" class="headerlink" title="十三. 简历模板"></a>十三. 简历模板</h3><ul>
<li><a href="http://learnshare.github.io/about/index.html">不错的个人简历</a></li>
<li><a href="http://hcy2367.github.io/resume/">简历</a></li>
<li><a href="http://ncuey.sinaapp.com/CrispElite/">张伦</a></li>
<li><a href="https://github.com/hacke2/ResumeSample">简历</a></li>
<li><a href="http://blog.dandyweng.com/2013/07/how-my-website-was-created/">翁天信</a></li>
<li><a href="http://www.webhek.com/misc/interactive-resume/">动画方式的简历</a></li>
<li><a href="http://www.linqing07.com/resume.html">组件丰富简历</a></li>
<li><a href="http://www.mojianli.com/resume/view">简历池</a></li>
<li><a href="http://www.haorooms.com/about">haorooms博客</a></li>
<li><a href="http://cv.youngdze.com/">Justin Young</a></li>
<li></li>
</ul>
<h3 id="十四-面试题"><a href="#十四-面试题" class="headerlink" title="十四. 面试题"></a>十四. 面试题</h3><ul>
<li><a href="http://www.nowcoder.com/discuss/3196">那几个月在找工作（百度，网易游戏）</a></li>
<li><a href="http://www.html-js.com/article/1743">2014最新面试题</a></li>
<li><a href="http://www.w3cfuns.com/thread-5598563-2-1.html">阿里前端面试题</a></li>
<li><a href="http://www.cnblogs.com/imwtr/p/4685546.html">2016校招内推 – 阿里巴巴前端 – 三面面试经历</a></li>
<li><a href="http://www.w3cfuns.com/article-5599657-1-1.html">腾讯面试题</a></li>
<li><a href="http://www.cnblogs.com/lvdabao/p/3660707.html">年后跳槽那点事：乐视+金山+360面试之行</a></li>
<li><a href="http://fatesinger.com/2722.html">阿里前端面试题上线</a></li>
<li><a href="http://www.cnblogs.com/52cik/p/js-question-lg.html">拉勾网js面试题</a></li>
<li><a href="http://www.cnblogs.com/allenxing/p/3724382.html">前端面试</a></li>
<li><a href="http://mianshiti.diandian.com/">Web开发笔试面试题 大全</a></li>
<li><a href="http://segmentfault.com/a/1190000000465431">前端开发面试题</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">2014最新前端面试题</a></li>
<li><a href="https://github.com/fex-team/interview-questions">百度面试</a></li>
<li><a href="http://www.w3cfuns.com/forum.php?mod=forumdisplay&fid=51&filter=typeid&typeid=177">面试题</a></li>
<li><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese">前端工作面试问题</a></li>
<li><a href="http://segmentfault.com/a/1190000000465431">前端开发面试题</a></li>
<li><a href="http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98">5个经典的前端面试问题</a></li>
<li><a href="http://segmentfault.com/a/1190000002562454">最全前端面试问题及答案总结</a></li>
<li>[如何面试一名前端开发工程师？](<a href="http://www.html-js.com/article/Large-search-front-team-column">http://www.html-js.com/article/Large-search-front-team-column</a> 2961)</li>
<li><a href="https://github.com/hawx1993/Front-end-Interview-questions">史上最全 前端开发面试问题及答案整理</a></li>
<li><a href="http://www.cnblogs.com/xiaoruo/p/4665163.html">前端实习生面试总结</a></li>
<li><a href="https://github.com/hawx1993/Front-end-Interview-questions">史上最全 前端开发面试问题及答案整理</a></li>
<li><a href="http://blog.jobbole.com/78738/">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li>
<li><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question">前端开发面试题大收集</a></li>
<li><a href="https://github.com/qiu-deqing/FE-interview">收集的前端面试题和答案</a></li>
<li><a href="http://www.zhihu.com/question/19568008">如何面试前端工程师</a></li>
<li><a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md">前端开发面试题</a></li>
<li><a href="http://www.nowcoder.com/discuss?type=2">牛客网-笔试面经</a></li>
</ul>
<h3 id="十五-iconfont"><a href="#十五-iconfont" class="headerlink" title="十五. iconfont"></a>十五. iconfont</h3><ul>
<li><a href="http://www.zhihu.com/question/21253343">中文字体</a></li>
<li><a href="http://iconfont.cn/">淘宝字库</a></li>
<li><a href="http://mux.alimama.com/fonts">字体</a></li>
<li><a href="http://iconfont.cn/help/platform.html">制作教程</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/?s=icomoon">zhangxinxu-icommon</a></li>
<li><a href="https://icomoon.io/app/">icommon</a></li>
<li><a href="http://imooc.com/learn/243">用字体在网页中画ICON图标(推荐教程)</a></li>
<li><a href="http://font-spider.org/">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li>
</ul>
<h3 id="十六-开发工具类"><a href="#十六-开发工具类" class="headerlink" title="十六. 开发工具类"></a>十六. 开发工具类</h3><ol>
<li>前端开发工具<ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">IntelliJ IDEA 简体中文专题教程</a></li>
<li><a href="http://t.cn/8kZZ1Uy">Webstorm,InterllIdea,Phpstorm</a></li>
<li><a href="https://github.com/jikeytang/sublime-text">SublimeText</a></li>
<li><a href="https://atom.io/">Atom</a></li>
<li><a href="https://code.visualstudio.com/">visual studio code</a></li>
</ul>
</li>
<li>Chrome, Firebug, Filddle 调试<ol>
<li>Fiddler<ul>
<li><a href="http://www.cnblogs.com/tugenhua0707/p/4623317.html">Fiddler调式使用知多少(一)深入研究</a></li>
<li><a href="http://www.cnblogs.com/strick/p/4570006.html">微信fiddle</a></li>
<li><a href="http://gaoboy.com/article/26.html">微信fiddle</a></li>
<li></li>
</ul>
</li>
<li>Chrome<ul>
<li><a href="https://developer.chrome.com/devtools">Google Chrome 官方</a></li>
<li><a href="http://www.cnblogs.com/constantince/p/4565261.html">Chrome - 基础</a></li>
<li><a href="http://www.cnblogs.com/constantince/p/4579121.html">Chrome - 进阶</a></li>
<li><a href="http://www.cnblogs.com/constantince/p/4585983.html">Chrome - 性能</a></li>
<li><a href="http://www.cnblogs.com/constantince/p/4607497.html">Chrome - 性能进阶</a></li>
<li><a href="http://www.cnblogs.com/constantince/p/4624241.html">Chrome - 移动</a></li>
<li><a href="http://www.cnblogs.com/liyunhua/p/4544738.html">Chrome - 使用技巧</a></li>
<li><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">Chrome - Console控制台不完全指南</a></li>
<li><a href="http://c7sky.com/chrome-devtools-workspace.html">Chrome - Workspace使浏览器变成IDE</a></li>
<li>[network面板](<a href="http://www.html-js.com/article/Nothing-blind">http://www.html-js.com/article/Nothing-blind</a> 2975)</li>
<li><a href="http://anti-code.com/devtools-cheatsheet/">chrome开发工具快捷键</a></li>
<li><a href="http://www.html-js.com/article/2327">chrome调试工具常用功能整理</a></li>
<li><a href="http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/">Chrome 开发工具 Workspace 使用</a></li>
<li><a href="http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html">Chrome神器Vimium快捷键学习记录</a></li>
<li><a href="http://www.w3cplus.com/sassguide/debug.html">sass调试-w3cplus</a></li>
<li><a href="http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html">如何更专业的使用Chrome开发者工具-w3cplus</a></li>
<li><a href="http://sentsin.com/web/253.html">chrome调试canvas</a></li>
<li><a href="https://developer.chrome.com/devtools/index">chrome profiles1</a></li>
<li><a href="http://h5dev.uc.cn/article-25-1.html">chrome profiles2</a></li>
<li><a href="http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles">chrome profiles3</a></li>
<li><a href="https://developer.chrome.com/devtools/docs/mobile-emulation">chrome移动版调试</a></li>
<li><a href="http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool/">chrome调试</a></li>
<li><a href="http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html">chrome的调试</a></li>
<li><a href="https://developer.chrome.com/devtools/docs/commandline-api">chrome console 命令详解</a></li>
<li><a href="http://www.cnblogs.com/leonkao/p/3809655.html">查看事件绑定1</a></li>
<li><a href="http://www.cnblogs.com/xiaoyao2011/p/3447421.html">查看事件绑定2</a></li>
<li><a href="http://segmentfault.com/a/1190000000683599">神器——Chrome开发者工具(一)</a></li>
<li><a href="https://xinranliu.me/2015-05-22-qiqu-performance/">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li>
<li><a href="http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html">chrome 开发者工具的 15 个小技巧</a></li>
<li><a href="http://1ke.co/course/361">Chrome开发者工具不完全指南</a></li>
<li><a href="http://segmentfault.com/a/1190000003882567">Chrome 开发者工具使用技巧</a></li>
</ul>
</li>
<li>Firebug<ul>
<li><a href="http://www.imooc.com/learn/137">firebug视频教程</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE">firefox 模拟器</a></li>
<li><a href="http://www.cnblogs.com/ctriphire/p/4116207.html">console.log 命令详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html">Firebug入门指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html">Firebug控制台详解</a></li>
<li></li>
</ul>
</li>
<li>移动,微信调试<ul>
<li><a href="https://openstf.github.io/">浏览器端调试安卓</a></li>
<li><a href="http://yujiangshui.com/multidevice-frontend-debug/">移动端前端开发调试</a></li>
<li><a href="https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md">使用 Chrome 远程调试 Android 设备</a></li>
<li><a href="http://plus.uc.cn/document/webapp/doc5.html">mac移动端调试</a></li>
<li><a href="http://www.mihtool.com/">mac移动端调试</a></li>
<li><a href="http://thx.github.io/mobile/debugging-in-mobile/">无线调试攻略</a></li>
<li><a href="http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/">无线调试攻略</a></li>
<li><a href="http://www.jianshu.com/p/ccf124f1f74b">屌爆了,完美调试 微信webview(x5)</a></li>
<li><a href="http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">微信调试的那些事</a></li>
<li><a href="http://jsconsole.com/">远程console</a></li>
<li><a href="http://blog.qqbrowser.cc/">微信调试工具</a></li>
<li><a href="https://github.com/jieyou/remote_inspect_web_on_real_device">各种真机远程调试方法汇总</a></li>
</ul>
</li>
<li>iOS Simulator<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html">Simulator</a></li>
<li><a href="http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li>
</ul>
</li>
</ol>
</li>
<li>img<ul>
<li><a href="http://preloaders.net/en/circular">loading img</a></li>
<li><a href="http://zhitu.isux.us/">智图-图片优化平台</a></li>
<li><a href="https://tinypng.com/">在线png优化</a></li>
</ul>
</li>
<li>生成二维码<ul>
<li><a href="http://cli.im/">生成二维码</a></li>
</ul>
</li>
<li>浏览器同步<ul>
<li><a href="https://github.com/leeluolee/puer">puer</a></li>
<li><a href="http://livereload.com/">liveReload</a></li>
<li><a href="http://getf5.com/">f5</a></li>
<li><a href="http://geek100.com/2608/">File Watchers</a></li>
</ul>
</li>
<li>在线PPT制作<ul>
<li><a href="http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/">nodePPT</a></li>
<li><a href="https://github.com/ksky521/nodePPT">PPT</a></li>
<li><a href="https://github.com/hakimel/reveal.js/">reveal</a></li>
<li><a href="https://github.com/Seldaek/slippy">slippy</a></li>
</ul>
</li>
</ol>
<h3 id="十七-前端导航网站"><a href="#十七-前端导航网站" class="headerlink" title="十七. 前端导航网站"></a>十七. 前端导航网站</h3><ul>
<li><a href="http://uxbees.com/index.html">界面清爽的前端导航</a></li>
<li><a href="http://whycss.com/">前端导航</a></li>
<li><a href="http://www.daqianduan.com/nav">前端网址导航</a></li>
<li><a href="http://sentsin.com/daohang/">前端名录</a></li>
<li><a href="http://123.jser.us/">前端导航</a></li>
<li><a href="http://www.css88.com/nav/">前端开发资源</a></li>
<li><a href="http://www.haourl.cn/">网址导航</a></li>
<li><a href="http://code.ciaoca.com/">前端开发仓库 - 众多效果的收集地</a></li>
<li><a href="https://github.com/jnoodle/f2e-collect">前端资源导航</a></li>
<li><a href="http://f2e.im/static/pages/nav/index.html">F2E 前端导航</a></li>
</ul>
<h3 id="十八-常用CDN"><a href="#十八-常用CDN" class="headerlink" title="十八. 常用CDN"></a>十八. 常用CDN</h3><ul>
<li><a href="http://lib.sinaapp.com/">新浪CDN</a></li>
<li><a href="http://cdn.code.baidu.com/">百度静态资源公共库</a></li>
<li><a href="http://libs.useso.com/">360网站卫士常用前端公共库CDN服务</a></li>
<li><a href="http://www.bootcdn.cn/">Bootstrap中文网开源项目免费 CDN 服务</a></li>
<li><a href="http://staticfile.org/">开放静态文件 CDN - 七牛</a></li>
<li><a href="http://www.jq22.com/cdn/">CDN加速 - jq22</a></li>
<li><a href="http://code.jquery.com/">jQuery CDN</a></li>
<li><a href="http://www.google-jquery-cdn.com/">Google jQuery CDN</a></li>
<li><a href="http://www.asp.net/ajax/cdn">微软CDN</a></li>
</ul>
<h3 id="十九-Git-SVN-Github"><a href="#十九-Git-SVN-Github" class="headerlink" title="十九. Git,SVN,Github"></a>十九. Git,SVN,Github</h3><ol>
<li>Git<ul>
<li><a href="http://git-scm.com/">git-scm</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰-Git教程</a></li>
<li><a href="https://git-for-windows.github.io/">git-for-windows</a></li>
<li><a href="http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/">GitHub 添加 SSH keys</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html">gogithub</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/">git常规命令练习</a></li>
<li><a href="https://github.com/xirong/my-git">git的资料整理</a></li>
<li><a href="http://www.cnblogs.com/fanfan259/p/4810517.html">我所记录的git命令（非常实用）</a></li>
<li><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md">企业开发git工作流模式探索部分休整</a></li>
<li><a href="https://github.com/phodal/github-roam">GitHub 漫游指南</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md">GitHub秘籍</a></li>
<li><a href="http://livoras.com/post/28">使用git和github进行协同开发流程</a></li>
<li><a href="http://onlywei.github.io/explain-git-with-d3/">动画方式练习git</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端插件-使用</title>
    <url>/2021/01/27/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><a href="http://www.bootstrapmb.com/chajian">前端插件</a></p>
<p><a href="http://www.bootstrapmb.com/muban">前端模板</a></p>
<h4 id="Jquery-Upload-File"><a href="#Jquery-Upload-File" class="headerlink" title="Jquery Upload File"></a>Jquery Upload File</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;js/jQuery-File-Upload-9.18.0/css/jquery.fileupload.css&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;js/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/vendor/jquery.ui.widget.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/jquery.iframe-transport.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jQuery-File-Upload-9.18.0/js/jquery.fileupload.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;game_apk&quot; /&gt;</span><br><span class="line">&lt;span class=&quot;btn btn-success fileinput-button&quot;&gt;</span><br><span class="line">	&lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt;</span><br><span class="line">	&lt;span&gt;请上传apk文件&lt;/span&gt;</span><br><span class="line"> 	 &lt;input id=&quot;fileupload_1&quot; type=&quot;file&quot; name=&quot;files[]&quot; multiple&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;div id=&quot;progress&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#fileupload_1&#x27;).fileupload(&#123;</span><br><span class="line">    url: &quot;上传文件请求地址&quot;,</span><br><span class="line">    dataType: &#x27;json&#x27;,</span><br><span class="line">    done: function (e, data) &#123;</span><br><span class="line">        $.each(data.result.files, function (index, file) &#123;</span><br><span class="line">          $(&#x27;:input[name=game_apk]&#x27;).val(decodeURIComponent(file.url));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: function (e, data) &#123;</span><br><span class="line">        console.log(&quot;上传失败&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    progressall: function (e, data) &#123;</span><br><span class="line">        console.log(progress);</span><br><span class="line">        $(&quot;#progress&quot;).html(progress + &#x27;%&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jquery-copy-js"><a href="#jquery-copy-js" class="headerlink" title="jquery.copy.js"></a>jquery.copy.js</h4><blockquote>
<p>点击复制内容移动端全兼容(专治各种移动端浏览器)</p>
</blockquote>
<ul>
<li>单页面一个复制</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;copy&quot;&gt;复制链接&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.copy(&#123;</span><br><span class="line">    // imgUrl:&quot;success-tips.png&quot;,   // 分享图标地址</span><br><span class="line">    text:&quot;复制成功&quot;, //分享提示文案</span><br><span class="line">    copyUrl:&quot;复制的内容/链接&quot;,   // 自定义复制链接地址</span><br><span class="line">    tipTime:2000, 	// 分享提示消失时间</span><br><span class="line">    copyId:&quot;#copy&quot;	// 复制按钮id</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<ul>
<li>单页面多个复制链接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.baidu.com&quot; &#125;,</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.qq.com&quot; &#125;,</span><br><span class="line">    &#123; &quot;url&quot;: &quot;www.163.com&quot; &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$.each(data,function(i,item)&#123;</span><br><span class="line">    $(&quot;body&quot;).append(&#x27;&lt;button id=&quot;copy&#x27;+i+&#x27;&quot;&gt;复制链接&lt;/button&gt;&#x27;);</span><br><span class="line">    $.copy(&#123;</span><br><span class="line">        // imgUrl:&quot;success-tips.png&quot;,  // 分享图标地址</span><br><span class="line">        text:&quot;复制成功&quot;,  // 分享提示文案</span><br><span class="line">        copyUrl:item.url,  // 自定义复制链接地址</span><br><span class="line">        tipTime:2000,  // 分享提示消失时间</span><br><span class="line">        copyId:&quot;#copy&quot;+i  // 复制按钮id</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="mobileSelect-js-多级联动下拉菜单"><a href="#mobileSelect-js-多级联动下拉菜单" class="headerlink" title="mobileSelect.js-多级联动下拉菜单"></a>mobileSelect.js-多级联动下拉菜单</h4><p><a href="https://github.com/onlyhom/mobileSelect.js">mobileSelect.js-github</a></p>
<h4 id="datetimepicker多次点击input日期选择器不显示"><a href="#datetimepicker多次点击input日期选择器不显示" class="headerlink" title="datetimepicker多次点击input日期选择器不显示"></a>datetimepicker多次点击input日期选择器不显示</h4><p>遇到datetimepicker多次（包括第二次点击）点击input框时日期选择器不显示，需要使用鼠标监听触发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*点方input框时加租监听毒件*/</span><br><span class="line">document.getElementsByName(&#x27;input的name名称&#x27;)[0].addEventListener(&#x27;click&#x27;,myfunc)</span><br><span class="line">function myfunc(e)&#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上这段代码必须放在datetimepicker方法的后面。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//日历</span><br><span class="line">var startDate = $(&#x27;#startDate&#x27;).fdatepicker(&#123;</span><br><span class="line">	format: &quot;yyyy-mm-dd&quot;,</span><br><span class="line">	todayBtn: true</span><br><span class="line">&#125;).on(&#x27;changeDate&#x27;, function (ev)&#123;</span><br><span class="line">	startDate.hide();</span><br><span class="line">	$(&#x27;#endDate&#x27;)[0].focus();</span><br><span class="line">&#125;).data(&#x27;datepicker&#x27;);</span><br><span class="line"></span><br><span class="line">var endDate = $(&#x27;#endDate&#x27;).fdatepicker(&#123;</span><br><span class="line">	format: &quot;yyyy-mm-dd&quot;,</span><br><span class="line">	todayBtn: true,</span><br><span class="line">&#125;).on(&#x27;changeDate&#x27;, function (ev)&#123;</span><br><span class="line">	endDate.hide();</span><br><span class="line">&#125;).data(&#x27;datepicker&#x27;);</span><br><span class="line"></span><br><span class="line">//解决输入框点击多次（包括两次）不显示的问题</span><br><span class="line">document.getElementById(&#x27;startDate&#x27;).addEventListener(&#x27;click&#x27;,myfunc);</span><br><span class="line">document.getElementById(&#x27;endDate&#x27;).addEventListener(&#x27;click&#x27;,myfunc);</span><br><span class="line">function myfunc(e)&#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="swiper"><a href="#swiper" class="headerlink" title="swiper"></a><a href="https://www.swiper.com.cn/">swiper</a></h4><h5 id="轮播图由两层效果改为三层"><a href="#轮播图由两层效果改为三层" class="headerlink" title="轮播图由两层效果改为三层"></a>轮播图由两层效果改为三层</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 加上这个样式，控制偏移量</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-prev&#123;</span><br><span class="line">        transform: translateX(480px) scale(0.8) !important;</span><br><span class="line">    &#125;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-next&#123;</span><br><span class="line">        transform: translateX(-480px) scale(0.8) !important;</span><br><span class="line">    &#125;</span><br><span class="line">    #certify .swiper-slide.swiper-slide-next + .swiper-slide&#123;</span><br><span class="line">        transform: translateX(-986px) scale(0.6) !important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var certifySwiper = new Swiper(&#x27;.detail&#x27;, &#123;</span><br><span class="line">    watchSlidesProgress: true,</span><br><span class="line">    slidesPerView: &#x27;auto&#x27;,</span><br><span class="line">    centeredSlides: true,</span><br><span class="line">    loop: true,</span><br><span class="line">    loopedSlides: 5,</span><br><span class="line">    autoplay: true,</span><br><span class="line">    navigation: &#123;</span><br><span class="line">        nextEl: &#x27;.swiper-button-next&#x27;,</span><br><span class="line">        prevEl: &#x27;.swiper-button-prev&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // pagination: &#123;</span><br><span class="line">    // 	el: &#x27;.swiper-pagination&#x27;,</span><br><span class="line">    // 	clickable: true,</span><br><span class="line">    // &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">        progress: function (progress) &#123;</span><br><span class="line">            for (i = 0; i &lt; this.slides.length; i++) &#123;</span><br><span class="line">                var slide = this.slides.eq(i);</span><br><span class="line">                var slideProgress = this.slides[i].progress;</span><br><span class="line">                modify = 1;</span><br><span class="line">                if (Math.abs(slideProgress) &gt; 1) &#123;</span><br><span class="line">                    modify = (Math.abs(slideProgress) - 1) * 0.3 + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                translate = slideProgress * modify * 260 + &#x27;px&#x27;;</span><br><span class="line">                scale = 1 - Math.abs(slideProgress) / 5;</span><br><span class="line">                zIndex = 999 - Math.abs(Math.round(10 * slideProgress));</span><br><span class="line">                slide.transform(&#x27;translateX(&#x27; + translate + &#x27;) scale(&#x27; + scale + &#x27;)&#x27;);</span><br><span class="line">                slide.css(&#x27;zIndex&#x27;, zIndex);</span><br><span class="line">                slide.css(&#x27;opacity&#x27;, 1);</span><br><span class="line">                if (Math.abs(slideProgress) &gt; 3) &#123;</span><br><span class="line">                    slide.css(&#x27;opacity&#x27;, 0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        setTransition: function (transition) &#123;</span><br><span class="line">            for (var i = 0; i &lt; this.slides.length; i++) &#123;</span><br><span class="line">                var slide = this.slides.eq(i)</span><br><span class="line">                slide.transition(transition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        // 加上这段代码</span><br><span class="line">        slideChangeTransitionStart: function() &#123;</span><br><span class="line">            $(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;).css(&#123;&quot;transform&quot;: &quot;translateX(986px) scale(0.6)&quot;&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> // 加上这段代码</span><br><span class="line">// 修改样式</span><br><span class="line">$(&quot;#certify  .swiper-slide-prev&quot;).prev(&quot;.swiper-slide&quot;).css(&#123;&quot;transform&quot;: &quot;translateX(986px) scale(0.6)&quot;&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="jquery-cityselect-js—城市选择插件—省市联动效果"><a href="#jquery-cityselect-js—城市选择插件—省市联动效果" class="headerlink" title="jquery.cityselect.js—城市选择插件—省市联动效果"></a>jquery.cityselect.js—城市选择插件—省市联动效果</h4><p><a href="http://www.ijquery.cn/?p=360">第74款插件：jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML代码</span><br><span class="line">&lt;div id=&quot;city&quot;&gt; </span><br><span class="line">    &lt;select class=&quot;prov&quot;&gt;&lt;/select&gt;  </span><br><span class="line">    &lt;select class=&quot;city&quot; disabled=&quot;disabled&quot;&gt;&lt;/select&gt; </span><br><span class="line">    &lt;select class=&quot;dist&quot; disabled=&quot;disabled&quot;&gt;&lt;/select&gt; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// JS和CSS代码 ，请注意这里默认需要把城市数据库 city.min.js 放到 jquery.cityselect.js 所在的数据库中，千万不要丢失！</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/City/jquery.cityselect.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&quot;#city&quot;).citySelect(&#123;</span><br><span class="line">            nodata:&quot;none&quot;,</span><br><span class="line">            required:false</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>注意：要配置服务器访问页面，不然city.min.js的获取路径有问题</code></p>
<h4 id="Bootstrap-Multiselect"><a href="#Bootstrap-Multiselect" class="headerlink" title="Bootstrap Multiselect"></a>Bootstrap Multiselect</h4><p><a href="https://www.bootstrap-multiselect.cn/">Bootstrap Multiselect 中文网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/bootstrap/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;./js/Plugins/bootstrap-multiselect/bootstrap-multiselect.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/bootstrap-multiselect/bootstrap-multiselect.css&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;example-getting-started&quot; multiple=&quot;multiple&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;cheese&quot;&gt;Cheese&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;tomatoes&quot;&gt;Tomatoes&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;mozarella&quot;&gt;Mozzarella&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;mushrooms&quot;&gt;Mushrooms&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;pepperoni&quot;&gt;Pepperoni&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;onions&quot;&gt;Onions&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        $(&#x27;#example-getting-started&#x27;).multiselect();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CKEditor-富文本编辑器"><a href="#CKEditor-富文本编辑器" class="headerlink" title="CKEditor-富文本编辑器"></a><a href="https://ckeditor.com/ckeditor-5/demo/#document">CKEditor</a>-富文本编辑器</h4><p><a href="https://cdn.ckeditor.com/">CKEditor CDN</a></p>
<p><a href="https://ckeditor.com/">CKEditor</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CKEditor 5 – Classic editor&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.ckeditor.com/ckeditor5/35.0.1/classic/ckeditor.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Classic editor&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;editor&quot;&gt;</span><br><span class="line">        &lt;p&gt;This is some sample content.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        ClassicEditor</span><br><span class="line">            .create( document.querySelector( &#x27;#editor&#x27; ) )</span><br><span class="line">            .catch( error =&gt; &#123;</span><br><span class="line">                console.error( error );</span><br><span class="line">            &#125; );</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Distpicker—中国省市区地址三级联动插件"><a href="#Distpicker—中国省市区地址三级联动插件" class="headerlink" title="Distpicker—中国省市区地址三级联动插件"></a><a href="http://fengyuanchen.github.io/distpicker/">Distpicker</a>—中国省市区地址三级联动插件</h4><p><a href="https://github.com/fengyuanchen/distpicker">distpicker-github</a></p>
<p><a href="https://www.jq22.com/jquery-info8054">jQuery中国省市区地址三级联动插件Distpicker</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/distpicker/distpicker.data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/distpicker/distpicker.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-toggle=&quot;distpicker&quot;&gt;</span><br><span class="line">  &lt;select data-province=&quot;---- 选择省 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select data-city=&quot;---- 选择市 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select data-district=&quot;---- 选择区 ----&quot;&gt;&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;distpicker1&quot;&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">  &lt;select&gt;&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;#distpicker1&quot;).distpicker();</span><br></pre></td></tr></table></figure>

<h4 id="city-picker—地区联动插件"><a href="#city-picker—地区联动插件" class="headerlink" title="city-picker—地区联动插件"></a><a href="http://tshi0912.github.io/city-picker/">city-picker</a>—地区联动插件</h4><p><a href="https://github.com/tshi0912/city-picker">city-picker—github</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./js/Plugins/city-picker/city-picker.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/city-picker/city-picker.data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/Plugins/city-picker/city-picker.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;position: relative;&quot;&gt;&lt;!-- container --&gt;</span><br><span class="line">    &lt;input readonly type=&quot;text&quot; data-toggle=&quot;city-picker&quot; placeholder=&quot;请选择省/市&quot; data-level=&quot;city&quot; &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Web-Uploader—现代文件上传组件"><a href="#Web-Uploader—现代文件上传组件" class="headerlink" title="Web Uploader—现代文件上传组件"></a><a href="http://fex.baidu.com/webuploader/">Web Uploader</a>—现代文件上传组件</h4><h4 id="zTree—-jQuery-树插件"><a href="#zTree—-jQuery-树插件" class="headerlink" title="zTree— jQuery 树插件"></a><a href="https://treejs.cn/v3/main.php#_zTreeInfo">zTree</a>— jQuery 树插件</h4><h4 id="jstree—树插件"><a href="#jstree—树插件" class="headerlink" title="jstree—树插件"></a><a href="https://www.jstree.com/">jstree</a>—树插件</h4><h4 id="Font-Awesome—字体图标"><a href="#Font-Awesome—字体图标" class="headerlink" title="Font Awesome—字体图标"></a><a href="http://www.fontawesome.com.cn/">Font Awesome</a>—字体图标</h4><h4 id="fastclick—解决移动端click事件延迟300ms"><a href="#fastclick—解决移动端click事件延迟300ms" class="headerlink" title="fastclick—解决移动端click事件延迟300ms"></a>fastclick—解决移动端click事件延迟300ms</h4><p><a href="https://github.com/ftlabs/fastclick">fastclick-github</a></p>
<h4 id="jQuery-WeUI"><a href="#jQuery-WeUI" class="headerlink" title="jQuery WeUI"></a><a href="https://github.com/lihongxun945/jquery-weui">jQuery WeUI</a></h4><h4 id="swiper-1"><a href="#swiper-1" class="headerlink" title="swiper"></a><a href="https://www.swiper.com.cn/index.html">swiper</a></h4><h4 id="粒子插件–页面特效"><a href="#粒子插件–页面特效" class="headerlink" title="粒子插件–页面特效"></a><a href="https://github.com/VincentGarreau/particles.js">粒子插件–页面特效</a></h4><h5 id="Particles"><a href="#Particles" class="headerlink" title="Particles"></a>Particles</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install particles.js</span><br></pre></td></tr></table></figure>

<p><a href="http://www.bootstrapmb.com/tag/particles">particles-插件</a></p>
<h4 id="前端react-粒子特效"><a href="#前端react-粒子特效" class="headerlink" title="前端react 粒子特效"></a><a href="https://blog.csdn.net/weixin_54127208/article/details/124380211">前端react 粒子特效</a></h4><h4 id="particles官网"><a href="#particles官网" class="headerlink" title="particles官网"></a><a href="https://particles.js.org/">particles官网</a></h4><h4 id="particles的使用"><a href="#particles的使用" class="headerlink" title="particles的使用"></a>particles的使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Particles from &quot;react-tsparticles&quot;;</span><br><span class="line">import &#123; loadFull &#125; from &quot;tsparticles&quot;;</span><br><span class="line"></span><br><span class="line">// 在组件外定义下面两个函数</span><br><span class="line">const particlesInit = async (main) =&gt; &#123;</span><br><span class="line">  console.log(main);</span><br><span class="line">  await loadFull(main);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const particlesLoaded = (container) =&gt; &#123;</span><br><span class="line">  console.log(container);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 粒子参数</span><br><span class="line">const options = &#123;</span><br><span class="line">    &quot;background&quot;: &#123;</span><br><span class="line">        &quot;color&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;#232741&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;position&quot;: &quot;50% 50%&quot;,</span><br><span class="line">        &quot;repeat&quot;: &quot;no-repeat&quot;,</span><br><span class="line">        &quot;size&quot;: &quot;cover&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 帧数，越低越卡,默认60</span><br><span class="line">    &quot;fpsLimit&quot;: 120,</span><br><span class="line">    &quot;fullScreen&quot;: &#123;</span><br><span class="line">        &quot;zIndex&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;interactivity&quot;: &#123;</span><br><span class="line">        &quot;events&quot;: &#123;</span><br><span class="line">            &quot;onClick&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true,</span><br><span class="line">                &quot;mode&quot;: &quot;push&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;onHover&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true,</span><br><span class="line">                &quot;mode&quot;: &quot;slow&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;modes&quot;: &#123;</span><br><span class="line">            &quot;push&quot;: &#123;</span><br><span class="line">                //点击是添加1个粒子</span><br><span class="line">                &quot;quantity&quot;: 3,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;bubble&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 200,</span><br><span class="line">                &quot;duration&quot;: 2,</span><br><span class="line">                &quot;opacity&quot;: 0.8,</span><br><span class="line">                &quot;size&quot;: 20,</span><br><span class="line">                &quot;divs&quot;: &#123;</span><br><span class="line">                    &quot;distance&quot;: 200,</span><br><span class="line">                    &quot;duration&quot;: 0.4,</span><br><span class="line">                    &quot;mix&quot;: false,</span><br><span class="line">                    &quot;selectors&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;grab&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 400</span><br><span class="line">            &#125;,</span><br><span class="line">            //击退</span><br><span class="line">            &quot;repulse&quot;: &#123;</span><br><span class="line">                &quot;divs&quot;: &#123;</span><br><span class="line">                    //鼠标移动时排斥粒子的距离</span><br><span class="line">                    &quot;distance&quot;: 200,</span><br><span class="line">                    //翻译是持续时间</span><br><span class="line">                    &quot;duration&quot;: 0.4,</span><br><span class="line">                    &quot;factor&quot;: 100,</span><br><span class="line">                    &quot;speed&quot;: 1,</span><br><span class="line">                    &quot;maxSpeed&quot;: 50,</span><br><span class="line">                    &quot;easing&quot;: &quot;ease-out-quad&quot;,</span><br><span class="line">                    &quot;selectors&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //缓慢移动</span><br><span class="line">            &quot;slow&quot;: &#123;</span><br><span class="line">                //移动速度</span><br><span class="line">                &quot;factor&quot;: 2,</span><br><span class="line">                //影响范围</span><br><span class="line">                &quot;radius&quot;: 200,</span><br><span class="line">            &#125;,</span><br><span class="line">            //吸引</span><br><span class="line">            &quot;attract&quot;: &#123;</span><br><span class="line">                &quot;distance&quot;: 200,</span><br><span class="line">                &quot;duration&quot;: 0.4,</span><br><span class="line">                &quot;easing&quot;: &quot;ease-out-quad&quot;,</span><br><span class="line">                &quot;factor&quot;: 3,</span><br><span class="line">                &quot;maxSpeed&quot;: 50,</span><br><span class="line">                &quot;speed&quot;: 1</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //  粒子的参数</span><br><span class="line">    &quot;particles&quot;: &#123;</span><br><span class="line">        //粒子的颜色</span><br><span class="line">        &quot;color&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        //是否启动粒子碰撞</span><br><span class="line">        &quot;collisions&quot;: &#123;</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        //粒子之间的线的参数</span><br><span class="line">        &quot;links&quot;: &#123;</span><br><span class="line">            &quot;color&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;distance&quot;: 150,</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">            &quot;warp&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;move&quot;: &#123;</span><br><span class="line">            &quot;attract&quot;: &#123;</span><br><span class="line">                &quot;rotate&quot;: &#123;</span><br><span class="line">                    &quot;x&quot;: 600,</span><br><span class="line">                    &quot;y&quot;: 1200</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;enable&quot;: true,</span><br><span class="line">            &quot;outModes&quot;: &#123;</span><br><span class="line">                &quot;bottom&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;left&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;right&quot;: &quot;out&quot;,</span><br><span class="line">                &quot;top&quot;: &quot;out&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;speed&quot;: 6,</span><br><span class="line">            &quot;warp&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;number&quot;: &#123;</span><br><span class="line">            &quot;density&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            //初始粒子数</span><br><span class="line">            &quot;value&quot;: 40</span><br><span class="line">        &#125;,</span><br><span class="line">        //透明度</span><br><span class="line">        &quot;opacity&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 0.5,</span><br><span class="line">            &quot;animation&quot;: &#123;</span><br><span class="line">                &quot;speed&quot;: 3,</span><br><span class="line">                &quot;minimumValue&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //大小</span><br><span class="line">        &quot;size&quot;: &#123;</span><br><span class="line">            &quot;random&quot;: &#123;</span><br><span class="line">                &quot;enable&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;value&quot;: &#123;</span><br><span class="line">                &quot;min&quot;: 1,</span><br><span class="line">                &quot;max&quot;: 3</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;animation&quot;: &#123;</span><br><span class="line">                &quot;speed&quot;: 20,</span><br><span class="line">                &quot;minimumValue&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;/* 粒子插件 */&#125;</span><br><span class="line">&lt;Particles</span><br><span class="line">  id=&quot;tsparticles&quot;</span><br><span class="line">  init=&#123;particlesInit&#125;</span><br><span class="line">  loaded=&#123;particlesLoaded&#125;</span><br><span class="line">  options=&#123;options&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>前端资源列表</title>
    <url>/2021/01/29/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>转自：<a href="https://github.com/windiest/Front-end-tutorial">https://github.com/windiest/Front-end-tutorial</a></p>
<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/57">Javascript深浅拷贝</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/56">Javascript中的apply和call继承</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/55">Javascript的jsonp原理</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/49">Javascript监听触摸事件</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/52">Javascript中的var self = this</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/32">Javascript面向对象编程</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/14">Javascript滑屏切换场景</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/16">Javascript获取经纬度，关于调用百度API的问题</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/3">妙用Javascript运算符</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/1">深入理解Javascript函数编程</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/4">Javascript的setTimeout详细用例</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/42">sessionstorage，localstorage和cookie</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/11">JS日期对比</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/10">JSONP参考文章</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/createElement.html">Javascript的createElement</a></td>
<td><a href="https://wscats.github.io/angular-demo/createDocumentFragment.html">Javascript的createDocumentFragment</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html">sessionStorage和localStorage</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E5%83%8F%E7%B4%A0%E5%8A%A8%E7%94%BB.html">像素帧动画</a></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="https://github.com/windiest/Front-end-tutorial">收集最全前端学习资料</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share">最全前端教程-猫的回忆录</a></td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000002640298">JavaScript中的this陷阱的最全收集–没有之一</a></td>
<td><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">JS函数式编程指南</a></td>
</tr>
<tr>
<td><a href="http://liubin.github.io/promises-book">JavaScript Promise迷你书（中文版）</a></td>
<td><a href="http://javascript.ruanyifeng.com/">阮一峰 Javascript</a></td>
</tr>
<tr>
<td><a href="https://www.awesomes.cn/rank">前端 TOP 100</a></td>
<td><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">小白的零基础JavaScript全栈教程</a></td>
</tr>
</tbody></table>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/weui/weui">WeUI</a></td>
<td><a href="http://www.bootcss.com/">Bootstrap</a></td>
</tr>
<tr>
<td><a href="http://dev.dcloud.net.cn/mui/">MUI-最接近原生APP体验的高性能前端框架</a></td>
<td><a href="http://amazeui.org/">Amaze UI中国首个开源HTML5跨屏前端框架</a></td>
</tr>
<tr>
<td><a href="http://frozenui.github.io/">Frozen UI</a></td>
<td><a href="http://foundation.zurb.com/">Foundation</a></td>
</tr>
<tr>
<td><a href="http://sui.taobao.org/sui/docs/">SUI</a></td>
<td><a href="https://github.com/easysoft/zui">ZUI</a></td>
</tr>
<tr>
<td><a href="http://m.sui.taobao.org/">淘宝HTML5前端框架</a></td>
<td><a href="http://docs.kissyui.com/">KISSY - 阿里前端JavaScript库</a></td>
</tr>
<tr>
<td><a href="http://nej.netease.com/">网易Nej - Nice Easy Javascript</a></td>
<td><a href="http://demos.telerik.com/kendo-ui/mvvm/index">Kendo UI MVVM Demo</a></td>
</tr>
<tr>
<td><a href="http://smartui.chinamzz.com/">Smart UI</a></td>
<td><a href="http://developer.yahoo.com/yui/grids">雅虎UI - CSS UI</a></td>
</tr>
</tbody></table>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/41">CSS Flex布局</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/38">移动前端开发CSS3</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/43">响应式布局 媒体查询</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/34">CSS图片响应式布局</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/stylesheets/styles.less">lessDemo的less文件</a></td>
<td></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="http://tympanus.net/codrops/css_reference">CSS 语法参考</a></td>
<td><a href="http://isux.tencent.com/css3/index.html">CSS3动画手册</a></td>
</tr>
<tr>
<td><a href="http://isux.tencent.com/css3/tools.html">腾讯css3动画制作工具</a></td>
<td><a href="http://daneden.github.io/animate.css">animate.css</a></td>
</tr>
<tr>
<td><a href="http://tympanus.net/Development/AnimatedBooks/">Animated Books with CSS 3D Transforms</a></td>
<td><a href="http://browserhacks.com/">Browserhacks</a></td>
</tr>
</tbody></table>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.zhihu.com/question/24398907">HTML5有哪些让你惊艳的demo</a></td>
<td><a href="http://www.wallpaperbetter.com/">Wallpaperbetter</a></td>
</tr>
</tbody></table>
<h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Angular文档</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/26">Angular源码解读publishExternalAPI函数</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/25">Angular源码解读setupModuleLoader函数</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/35">Angular的ng-style用法</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/29">Angular判断在那个浏览器下打开的服务</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/28">Angular文字折叠展开组件的原理分析</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/21">Angular服务Request异步请求的详细分析</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/24">Angular自定义service服务详解</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/22">Angular自定义判断上一页是否存在的服务</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/19">Angular操作cookies方法</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/18">Angular打印错误的minErr函数</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/17">Angular的fromJson与toJson方法</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/12">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/6">Angular的run方法巧妙运用</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/5">Angular处理Html转义问题</a></td>
</tr>
<tr>
<td><a href="ng-repeat%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%B5%8C%E5%A5%97">ng-repeat绑定事件和嵌套</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/4">Angular的post请求后台接受不了数据的解决方法</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/issues/19">ionic总结</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/17">ui-route和ng-route</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/issues/15">ng-options&amp;&amp;ng-switch</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/14">directive组件作用域</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/issues/13">表单认证</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/11">$broadcast,$emit and $on</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/issues/9">自定义过滤器</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/8">自定义手势指令ng-touch</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/issues/7">ng-animate</a></td>
<td><a href="https://github.com/Wscats/angular-demo/issues/3">单页面应用的技术点</a></td>
</tr>
<tr>
<td><strong>Guess you like</strong></td>
<td><strong>AppDemo</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html">Angular商城Demo</a></td>
<td><a href="https://wscats.github.io/angular-demo/spa/CNode/index.html">Angular的Cnode社区</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/spa/Stovepipe/index.html">AngularStovepipe</a></td>
<td><a href="https://wscats.github.io/angular-demo/spa/TT/index.html">Angular的新闻客户端</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html">Angular商城Demo</a></td>
<td><a href="https://wscats.github.io/angular-demo/spa/CNode/index.html">Angular的Cnode社区</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html">Angular内联编辑器</a></td>
<td><a href="https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html">Angular即时搜索</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html">Angular导航菜单</a></td>
<td><a href="https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html">Angular订单表单</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html">Angular切换网格</a></td>
<td><a href="https://wscats.github.io/angular-demo/spa/news/index.html">Angular新闻＋WEUI DEMO</a> <a href="https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News">源码</a></td>
</tr>
<tr>
<td><strong>Controller</strong></td>
<td><strong>控制器</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/view/student.html">Angular控制器demo</a></td>
<td></td>
</tr>
<tr>
<td><strong>SPA DEMO</strong></td>
<td><strong>单页面应用</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/weui%E6%AF%8F%E6%97%A5%E7%AC%91%E8%AF%9D.html">Angular+Weui单页面应用DEMO-每日笑话</a></td>
<td></td>
</tr>
<tr>
<td><strong>Service</strong></td>
<td><strong>服务</strong></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md">Angular自定义服务的常用方法</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E9%83%A8%E5%88%86%E6%9C%8D%E5%8A%A1demo.html">Angular部分服务demo</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/Angular%E8%87%AA%E5%AE%9A%E4%B9%89Canvas%E7%94%BB%E5%9B%BE%E6%9C%8D%E5%8A%A1.html">Angular自定义Canvas画图服务</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E8%87%AA%E5%AE%9A%E4%B9%89http%E6%9C%8D%E5%8A%A1.html">Angular自定义http服务 面向对象封装</a></td>
</tr>
<tr>
<td><strong>Directive</strong></td>
<td><strong>组件与指令</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%8B%E5%8A%BF%E4%BA%8B%E4%BB%B6.html">Angular自定义手势指令</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E8%87%AA%E5%AE%9A%E4%B9%89directive%E8%BD%AE%E6%92%AD%E5%9B%BE.html">Angular自定义轮播图组件</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.html">Angular自定义下拉刷新组件1</a></td>
<td><a href="https://wscats.github.io/angular-demo/Angular%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6.html">Angular自定义下拉刷新组件2</a></td>
</tr>
<tr>
<td><strong>Router</strong></td>
<td><strong>路由</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/UI%E8%B7%AF%E7%94%B1%E5%B5%8C%E5%A5%97DEMO.html">Angular路由嵌套</a></td>
<td><a href="https://wscats.github.io/angular-demo/uiRoute/index.html">Angular路由单页多个ui-view</a></td>
</tr>
<tr>
<td><strong>Filter</strong></td>
<td><strong>过滤器</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/angular%E8%87%AA%E5%B8%A6%E8%BF%87%E6%BB%A4%E5%99%A8.html">Angular自带过滤器</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%B3%E9%94%AE%E8%AF%8D%E6%A3%80%E7%B4%A2%E8%BF%87%E6%BB%A4%E5%99%A8.html">Angular自定义关键词检索过滤器</a></td>
</tr>
<tr>
<td><strong>Animate</strong></td>
<td><strong>动画</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/ng-animate%E5%8A%A8%E7%94%BB.html">Angular ng-animate动画1</a></td>
<td><a href="https://wscats.github.io/angular-demo/ng-animate%E5%8A%A8%E7%94%BB2.html">Angular ng-animate动画2</a></td>
</tr>
<tr>
<td><strong>Other</strong></td>
<td><strong>其他</strong></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/iframesdemo.html">Angular中使用iframe</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html">Angular三级联动(1)</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/ngSwitch.html">Angular中使用ng-switch</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%AE%9A%E4%BD%8DDEMO.html">百度定位DEMO</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E6%94%B9%E8%BF%9B.html">Angular三级联动(2)</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html">Angular事件监听</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/jquery%E6%A8%A1%E6%8B%9Fng-repeat.html">jQuery模拟ng-repeat</a></td>
<td><a href="https://wscats.github.io/angular-demo/lessDemo.html">lessDemo</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/ngCookie.html">Angular自定义cookie服务和ngCookie的使用</a></td>
<td><a href="https://wscats.github.io/angular-demo/%E5%9B%BE%E7%81%B5%E6%9C%BA%E5%99%A8%E4%BA%BA.html">图灵机器人</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/angular%E6%A8%A1%E5%9D%97%E5%8C%96.html">Angular利用angular.module()实现模块化</a></td>
<td><a href="https://wscats.github.io/angular-demo/form%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html">Angular的form表单验证</a></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/angular-demo/ng-repeat%E5%B5%8C%E5%A5%97.html">Angular的ng-repeat嵌套</a></td>
<td><a href="https://wscats.github.io/angular-demo/angular%E6%A8%A1%E5%9D%97%E5%8C%962.html">Angular利用angular.module()实现模块化2</a></td>
</tr>
<tr>
<td><strong>PHP</strong></td>
<td><strong>PHP</strong></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/53">PHP CURL请求的小细节</a></td>
<td></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000000443795">最流行的PHP 代码规范</a></td>
<td><a href="https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md">最流行的PHP 代码规范</a></td>
</tr>
<tr>
<td><a href="http://blog.aijc.net/AngularLearning/">Angular.js的一些学习资源</a></td>
<td><a href="http://angularjs.cn/">Angularjs中文社区</a></td>
</tr>
<tr>
<td><a href="https://github.com/angular-ui">一些扩展Angular UI组件</a></td>
<td><a href="http://mgcrea.github.io/angular-strap">Angular UI</a></td>
</tr>
<tr>
<td><a href="http://each.sinaapp.com/angular">AngularJS在线教程</a></td>
<td><a href="http://www.zouyesheng.com/angular.html">Angular学习笔记</a></td>
</tr>
</tbody></table>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><table>
<thead>
<tr>
<th>React</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.runoob.com/react/react-tutorial.html">React教程 菜鸟教程</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu">React Router 使用教程</a></td>
</tr>
<tr>
<td><a href="http://wiki.jikexueyuan.com/project/react/">React开发中文手册-极客学院</a></td>
<td><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/">React教程-汇智网</a></td>
</tr>
<tr>
<td><a href="http://www.phperz.com/article/15/0712/140537.html#">React.js快速开始</a></td>
<td><a href="http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/">Reactjs 2016最佳实践</a></td>
</tr>
<tr>
<td><a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html">React 入门教程</a></td>
<td><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam">汇智网 React教程</a></td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000002767365">轻松入门React和Webpack</a></td>
<td><a href="http://nav.react-china.org/#docs">React中文索引</a></td>
</tr>
<tr>
<td><a href="http://cn.redux.js.org/">Redux 中文文档</a></td>
<td><a href="https://github.com/react-guide/react-router-cn">React Router官方文档中文翻译</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/kunyashaw/p/5619256.html">React入门教程</a></td>
<td><a href="http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html">React介绍及实践教程</a></td>
</tr>
<tr>
<td><a href="https://facebook.github.io/react/index.html">React.js 官方网址</a></td>
<td><a href="https://facebook.github.io/react/docs/getting-started.html">React.js 官方文档</a></td>
</tr>
<tr>
<td><a href="http://material-ui.com/#">React.js material UI</a></td>
<td><a href="http://touchstonejs.io/">React.js TouchstoneJS UI</a></td>
</tr>
<tr>
<td><a href="http://amazeui.org/react">React.js amazeui UI</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2015/03/react.html">React 入门实例教程 - 阮一峰</a></td>
</tr>
<tr>
<td><a href="http://wiki.jikexueyuan.com/project/react-native">React Native 中文版</a></td>
<td><a href="https://fakefish.github.io/react-webpack-cookbook">Webpack 和 React 小书 - gitbook</a></td>
</tr>
</tbody></table>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><table>
<thead>
<tr>
<th>Vue</th>
<th>AppDemo</th>
<th>Demo</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://wscats.github.io/vue-demo/news/index.html">NewsDemo</a></td>
<td><a href="https://wscats.github.io/vue-demo/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.html">vue计算属性</a></td>
<td><a href="https://wscats.github.io/vue-demo/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html">vue生命周期</a></td>
</tr>
<tr>
<td><strong>Article</strong></td>
<td><strong>Vue文档</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/vue-demo/issues/2">Vue-cli脚手架</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/3">Vue组件</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/8">vue自定义指令</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/vue-demo/issues/9">Vue过渡动画</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/7">Vue指令</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/6">Vue api文档</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/vue-demo/issues/5">Vue执行ajax请求</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/4">vue实现类似angular服务的方法</a></td>
<td><a href="https://github.com/Wscats/vue-demo/issues/10">Vue源码参考文档</a></td>
</tr>
<tr>
<td><strong>Router</strong></td>
<td><strong>路由</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/%E8%B7%AF%E7%94%B1.html">路由demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/%E8%B7%AF%E7%94%B12.html">路由demo2</a></td>
<td></td>
</tr>
<tr>
<td><strong>Directive</strong></td>
<td><strong>指令</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/%E6%8C%87%E4%BB%A4.html">指令demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.html">自定义指令demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/%E6%BB%91%E5%8A%A8%E6%89%8B%E5%8A%BF%E6%8C%87%E4%BB%A4.html">滑动手势demo</a></td>
</tr>
<tr>
<td><strong>Filter</strong></td>
<td><strong>过滤器</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/%E8%BF%87%E6%BB%A4%E5%99%A8.html">过滤器demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/vue%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5.html">过滤器实现分页demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE.html">过滤器读写数据</a></td>
</tr>
<tr>
<td><strong>Transition</strong></td>
<td><strong>过渡</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/%E8%BF%87%E6%B8%A1.html">过渡demo</a></td>
<td><a href="https://wscats.github.io/vue-demo/%E8%BF%87%E6%B8%A12.html">过渡demo2</a></td>
<td></td>
</tr>
<tr>
<td><strong>Form</strong></td>
<td><strong>表单</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/vue%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%80%BC.html">获取表单值</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Computed</strong></td>
<td><strong>计算</strong></td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.html">计算属性</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Component</td>
<td>组件</td>
<td></td>
</tr>
<tr>
<td><a href="https://wscats.github.io/vue-demo/%E7%BB%84%E4%BB%B6.html">组件demo</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="http://cn.vuejs.org/">Vue官网</a></td>
<td><a href="http://forum.vuejs.org/">Vue论坛</a></td>
<td><a href="https://github.com/vuejs/awesome-vue">Awesome-vue</a></td>
</tr>
</tbody></table>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><table>
<thead>
<tr>
<th>Node</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/44">node技巧</a></td>
<td><a href="https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer">NodeJs静态服务器</a></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="https://github.com/alsotang/node-lessons">Node.js 包教不包会</a></td>
<td><a href="http://nqdeng.github.io/7-days-nodejs/">七天学会NodeJS</a></td>
</tr>
<tr>
<td><a href="http://blog.fens.me/series-nodejs">从零开始nodejs系列文章</a></td>
<td><a href="http://www.nodebeginner.org/index-zh-cn.html">Node入门</a></td>
</tr>
<tr>
<td><a href="http://ourjs.com/detail/529ca5950cb6498814000005">Node初学者入门，一本全面的NodeJS教程</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><table>
<thead>
<tr>
<th>Gulp</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/glup">Gulp Demo</a></td>
<td></td>
</tr>
<tr>
<td><strong>Gulp</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="http://gulpjs.com/">Gulp官网</a></td>
<td><a href="http://www.gulpjs.com.cn/">Gulp中文网</a></td>
</tr>
<tr>
<td><a href="https://github.com/Platform-CUF/use-gulp">Gulp资料收集</a></td>
<td><a href="http://javascript.ruanyifeng.com/tool/gulp.html">Gulp：任务自动管理工具 - ruanyifeng</a></td>
</tr>
<tr>
<td><a href="http://gulpjs.com/plugins]">Gulp插件</a></td>
<td><a href="http://www.ido321.com/1622.html">Gulp不完全入门教程</a></td>
</tr>
<tr>
<td><a href="https://github.com/nimojs/gulp-book">Gulp 入门指南</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th>Other</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/node-demo/issues/4">关于Pornographic website的一些前端分析</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/50">微信公众号开发</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/30">Atom技巧总结</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/46">Mac小技巧</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/9">CSDN页面内JS跳转脚本</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/8">CSDN博客隐藏配置</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/7">百度设置小度机器人出现</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/2">前端冷知识，妙用浏览器地址栏</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/27">Vim笔记</a></td>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/48">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td>
</tr>
<tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/33">IE8及以下按钮超链接无法跳转的问题</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><table>
<thead>
<tr>
<th>Share</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://share.baidu.com/">百度分享(PC)</a></td>
<td><a href="http://jiathis.com/">JiaThis(PC)</a></td>
</tr>
<tr>
<td><a href="http://developer.baidu.com/soc/share">社会化分享组件(Mobile)</a></td>
<td><a href="http://www.mob.com/">ShareSDK轻松实现社会化功能(Mobile)</a></td>
</tr>
<tr>
<td><a href="http://dev.umeng.com/social/android/quick-integration">友盟分享(Mobile)</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://runjs.cn/">js 在线编辑 - runjs</a></td>
<td><a href="http://jsbin.com/">js 在线编辑 - jsbin</a></td>
</tr>
<tr>
<td><a href="http://codepen.io/">js 在线编辑 - codepen</a></td>
<td><a href="http://jsfiddle.net/">js 在线编辑 - jsfiddle</a></td>
</tr>
<tr>
<td><a href="http://ideone.com/">java 在线编辑 - runjs</a></td>
<td><a href="http://code.hcharts.cn/">js 在线编辑 - hcharts</a></td>
</tr>
<tr>
<td><a href="http://jsdm.com/">js 在线编辑 - jsdm</a></td>
<td><a href="http://sqlfiddle.com/">sql 在线编辑 - sqlfiddle</a></td>
</tr>
<tr>
<td><a href="https://thimble.mozilla.org/">mozilla 在线编辑器</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://ueditor.baidu.com/website">百度ueditor</a></td>
<td><a href="http://ckeditor.com/">ckeditor</a></td>
</tr>
<tr>
<td><a href="https://www.tinymce.com/">tinymce</a></td>
<td><a href="http://kindeditor.net/">kindeditor</a></td>
</tr>
<tr>
<td><a href="http://www.bootcss.com/p/bootstrap-wysiwyg">wysiwyg</a></td>
<td><a href="http://integ.github.io/BachEditor">BachEditor</a></td>
</tr>
<tr>
<td><a href="https://github.com/mycolorway/simditor">simditor</a></td>
<td><a href="https://github.com/summernote/summernote">summernote</a></td>
</tr>
<tr>
<td><a href="http://neilj.github.io/Squire">Squire</a></td>
<td><a href="https://github.com/wangfupeng1988/wangEditor">wangEditor</a></td>
</tr>
</tbody></table>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.cnblogs.com/constantince/p/4565261.html">Chrome - 基础</a></td>
<td><a href="http://www.cnblogs.com/constantince/p/4579121.html">Chrome - 进阶</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/constantince/p/4585983.html">Chrome - 性能</a></td>
<td><a href="http://www.cnblogs.com/constantince/p/4607497.html">Chrome - 性能进阶</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/constantince/p/4624241.html">Chrome - 移动</a></td>
<td><a href="http://www.cnblogs.com/liyunhua/p/4544738.html">Chrome - 使用技巧</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">Chrome - Console控制台不完全指南</a></td>
<td><a href="http://anti-code.com/devtools-cheatsheet">chrome开发工具快捷键</a></td>
</tr>
<tr>
<td><a href="http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace">Chrome 开发工具 Workspace 使用</a></td>
<td><a href="http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html">Chrome神器Vimium快捷键学习记录</a></td>
</tr>
<tr>
<td><a href="http://www.w3cplus.com/sassguide/debug.html">Sass调试-w3cplus</a></td>
<td><a href="http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html">如何更专业的使用Chrome开发者工具-w3cplus</a></td>
</tr>
<tr>
<td><a href="http://sentsin.com/web/253.html">Chrome调试canvas</a></td>
<td><a href="https://segmentfault.com/a/1190000000683599">神器——Chrome开发者工具(一)</a></td>
</tr>
<tr>
<td><a href="https://xinranliu.me/2015-05-22-qiqu-performance">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td>
<td><a href="http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html">Chrome 开发者工具的 15 个小技巧</a></td>
</tr>
<tr>
<td><a href="http://1ke.co/course/361">Chrome开发者工具不完全指南</a></td>
<td><a href="http://segmentfault.com/a/1190000003882567">Chrome 开发者工具使用技巧</a></td>
</tr>
</tbody></table>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering">Javascript高性能动画与页面渲染</a></td>
<td><a href="http://isux.tencent.com/h5-performance.html">移动H5前端性能优化指南</a></td>
</tr>
<tr>
<td><a href="http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers">给网页设计师和前端开发者看的前端性能优化</a></td>
<td><a href="http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/">张鑫旭——前端性能</a></td>
</tr>
<tr>
<td><a href="http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html">web前端性能优化进阶路</a></td>
<td><a href="http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD">Hey——前端性能</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/yslow">YSLOW中文介绍</a></td>
<td><a href="http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml">Yahoo!团队实践分享：网站性能</a></td>
</tr>
<tr>
<td><a href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml">加载，不只是少一点点</a></td>
<td><a href="http://coolshell.cn/articles/6470.html">由12306谈谈网站前端性能和后端性能优化</a></td>
</tr>
<tr>
<td><a href="http://www.alloyteam.com/2012/10/high-performance-html">【高性能前端1】高性能HTML</a></td>
<td><a href="http://www.alloyteam.com/2012/10/high-performance-css">【高性能前端2】高性能CSS</a></td>
</tr>
<tr>
<td><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td>
<td><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2">前端工程与性能优化（下）：静态资源管理与模板框架</a></td>
</tr>
<tr>
<td><a href="http://blog.jobbole.com/48369">HTTPS连接的前几毫秒发生了什么</a></td>
<td><a href="http://uicss.cn/yslow/#more-12319">Yslow</a></td>
</tr>
<tr>
<td><a href="https://github.com/amfe/article/issues/1">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td>
<td><a href="http://www.cnblogs.com/developersupport/p/3248695.html">毫秒必争，前端网页性能最佳实践</a></td>
</tr>
</tbody></table>
<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.bootcdn.cn/jquery">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td>
<td><a href="http://www.bootcdn.cn/">Bootstrap中文网开源项目免费 CDN 服务</a></td>
</tr>
<tr>
<td><a href="http://lib.sinaapp.com/">新浪CDN</a></td>
<td><a href="http://cdn.code.baidu.com/">百度静态资源公共库</a></td>
</tr>
<tr>
<td><a href="http://staticfile.org/">开放静态文件 CDN - 七牛</a></td>
<td><a href="http://www.jq22.com/cdn">CDN加速 - jq22</a></td>
</tr>
<tr>
<td><a href="http://www.asp.net/ajax/cdn">微软CDN</a></td>
<td><a href="https://code.angularjs.org/1.5.8/">Angular CDN</a></td>
</tr>
<tr>
<td><a href="http://libs.useso.com/">360网站卫士常用前端公共库CDN服务</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/Good-text-Share/issues/20">Git操作</a></td>
<td><a href="http://blog.csdn.net/qq_27080247/article/details/49942991">Git CSDN Blog</a></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="http://git-scm.com/">Git-scm</a></td>
<td><a href="https://git-for-windows.github.io/">Git-for-windows</a></td>
</tr>
<tr>
<td><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰-Git教程</a></td>
<td><a href="http://www.worldhello.net/gotgithub/index.html">Gogithub</a></td>
</tr>
<tr>
<td><a href="http://pcottle.github.io/learnGitBranching">Git常规命令练习</a></td>
<td><a href="https://github.com/xirong/my-git">Git的资料整理</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/fanfan259/p/4810517.html">我所记录的git命令（非常实用）</a></td>
<td><a href="https://github.com/phodal/github-roam">GitHub 漫游指南</a></td>
</tr>
<tr>
<td><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md">GitHub秘籍</a></td>
<td><a href="http://onlywei.github.io/explain-git-with-d3">动画方式练习git</a></td>
</tr>
</tbody></table>
<h2 id="Sass-amp-Less"><a href="#Sass-amp-Less" class="headerlink" title="Sass&amp;Less"></a>Sass&amp;Less</h2><table>
<thead>
<tr>
<th>Article</th>
<th>Article</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Wscats/less-demo/issues/1">Less教程</a></td>
<td></td>
</tr>
<tr>
<td><strong>Reference</strong></td>
<td><strong>Reference</strong></td>
</tr>
<tr>
<td><a href="http://www.w3cplus.com/sassguide">Sass</a></td>
<td><a href="http://sass.bootcss.com/">Sass中文文档</a></td>
</tr>
<tr>
<td><a href="http://less.bootcss.com/">Less</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://wowubuntu.com/markdown">Markdown 语法说明 (简体中文版)</a></td>
<td><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md">Markdown入门参考</a></td>
</tr>
<tr>
<td><a href="https://www.zybuluo.com/mdeditor">Mdeditor(一款国内的在线markdown编辑器)</a></td>
<td><a href="https://stackedit.io/">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td>
</tr>
<tr>
<td><a href="http://bh-lay.github.io/mditor">Mditor一款轻量级的markdown编辑器</a></td>
<td><a href="https://github.com/lepture/editor">lepture-editor</a></td>
</tr>
<tr>
<td><a href="https://github.com/jbt/markdown-editor">Markdown-editor</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="前端文档"><a href="#前端文档" class="headerlink" title="前端文档"></a>前端文档</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/JacksonTian/fks">前端知识结构</a></td>
<td><a href="https://github.com/unruledboy/WebFrontEndStack">Web前端开发大系概览</a></td>
</tr>
<tr>
<td><a href="https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索</a></td>
<td><a href="https://github.com/dypsilon/frontend-dev-bookmarks">前端书籍</a></td>
</tr>
<tr>
<td><a href="https://github.com/vhf/free-programming-books">前端免费书籍大全</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍JavaScript（JS教程）</a></td>
</tr>
<tr>
<td>[Gitbook](<a href="https://www.gitbook.com/">https://www.gitbook.com</a> 国外的在线markdown可编辑成书)</td>
<td><a href="https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide">Front-End-Develop-Guide 前端开发指南</a></td>
</tr>
<tr>
<td><a href="https://li-xinyang.gitbooks.io/frontend-notebook/content">前端开发笔记本</a></td>
<td><a href="https://github.com/nieweidong/fetool">大前端工具集</a></td>
</tr>
<tr>
<td><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content">前端开发者手册</a></td>
<td><a href="https://github.com/qiu-deqing/FE-learning">结合个人经历总结的前端入门方法</a></td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/qq_25827845/article/details/53079094">2016最新前端学习计划</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://alloyteam.github.io/CodeGuide/">通过分析github代码库总结出来的工程师代码书写习惯</a></td>
<td><a href="http://codeguide.bootcss.com/">HTML&amp;CSS编码规范 by @mdo</a></td>
</tr>
<tr>
<td><a href="http://yuwenhui.github.io/">前端编码规范之js - by yuwenhui</a></td>
<td><a href="http://www.cnblogs.com/hustskyking/p/javascript-spec.html">前端编码规范之js - by 李靖</a></td>
</tr>
<tr>
<td><a href="https://github.com/yuche/javascript#table-of-contents">Airbnb JavaScript 编码规范（简体中文版）</a></td>
<td><a href="http://www.zhihu.com/question/20351507">AMD与CMD规范的区别</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/tugenhua0707/p/3507957.html">AMD与CMD规范的区别</a></td>
<td><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html">KISSY 源码规范</a></td>
</tr>
<tr>
<td><a href="http://blog.jobbole.com/79075">前端代码规范及最佳实践</a></td>
<td><a href="http://coderlmn.github.io/code-standards">百度前端规范</a></td>
</tr>
<tr>
<td><a href="http://blog.jobbole.com/79484">JavaScript风格指南/编码规范（Airbnb公司版）</a></td>
<td><a href="http://nec.netease.com/standard">网易前端开发规范</a></td>
</tr>
<tr>
<td><a href="https://github.com/ecomfe/spec">前端规范资源列表</a></td>
<td><a href="http://codecloud.net/5622.html">Web 前端开发规范文档</a></td>
</tr>
</tbody></table>
<h2 id="前端面试"><a href="#前端面试" class="headerlink" title="前端面试"></a>前端面试</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.cnblogs.com/imwtr/p/4685546.html">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td>
<td><a href="https://www.nowcoder.com/discuss/3196">那几个月在找工作（百度，网易游戏，华为）</a></td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000000465431">前端开发面试题</a></td>
<td><a href="https://github.com/hawx1993/Front-end-Interview-questions">Front-end-Interview-questions</a></td>
</tr>
<tr>
<td><a href="http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E">5个经典的前端面试问题</a></td>
<td><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese">Front-end-Developer-Interview-Questions</a></td>
</tr>
<tr>
<td><a href="http://blog.jobbole.com/78738/">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td>
<td><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question">前端开发面试题大收集</a></td>
</tr>
<tr>
<td><a href="https://github.com/qiu-deqing/FE-interview">收集的前端面试题和答案</a></td>
<td><a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md">前端开发面试题</a></td>
</tr>
<tr>
<td><a href="https://segmentfault.com/a/1190000005947094">前端面试大全</a></td>
<td><a href="https://mdluo.github.io/blog/about-front-end-interview/">关于前端面试</a></td>
</tr>
</tbody></table>
<h2 id="前端网站"><a href="#前端网站" class="headerlink" title="前端网站"></a>前端网站</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://gold.xitu.io/">掘金</a></td>
<td><a href="http://fex.baidu.com/">百度FEX</a></td>
</tr>
<tr>
<td><a href="http://www.aliued.com/">阿里UED</a></td>
<td><a href="http://www.runoob.com/">菜鸟教程</a></td>
</tr>
<tr>
<td><a href="http://www.qdfuns.com/portal.php">QDFuns</a></td>
<td><a href="http://www.imooc.com/">幕课网</a></td>
</tr>
<tr>
<td><a href="http://codepen.io/">Codepen</a></td>
<td><a href="http://sentsin.com/daohang/">Sentsin</a></td>
</tr>
<tr>
<td><a href="http://www.ctolib.com/javascript/">CTOLib</a></td>
<td><a href="http://www.ctolib.com/nodejs/">CTOLib/Node</a></td>
</tr>
</tbody></table>
<h2 id="JS练习"><a href="#JS练习" class="headerlink" title="JS练习"></a>JS练习</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.codewars.com/">Codewars</a></td>
<td><a href="http://javascript-puzzlers.herokuapp.com/">Javascript-puzzlers</a></td>
</tr>
<tr>
<td><a href="https://freecodecamp.cn/">Freecodecamp中文版</a></td>
<td><a href="http://es6katas.org/">ES6katas</a></td>
</tr>
<tr>
<td><a href="https://www.nowcoder.com/ta/js-assessment">Now Coder牛客网</a></td>
<td><a href="https://leetcode.com/">Leetcode</a></td>
</tr>
<tr>
<td><a href="https://nodeschool.io/">Nodeschool</a></td>
<td><a href="https://www.hackerrank.com/">Hackerrank</a></td>
</tr>
</tbody></table>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Ralph-Wang/algorithm.in.js">数据结构与算法 JavaScript 描述. 章节练习</a></td>
<td><a href="https://github.com/twobin/twobinSort">常见排序算法（JS版）</a></td>
</tr>
<tr>
<td><a href="https://github.com/luofei2011/jsAgm/blob/master/js/sort.js">经典排序</a></td>
<td><a href="https://github.com/hechangmin/jssort">常见排序算法-js版本</a></td>
</tr>
</tbody></table>
<h2 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h2><table>
<thead>
<tr>
<th>Reference</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://es6-org.github.io/exploring-es6/">Exploring-ES6翻译</a></td>
<td><a href="http://es6.ruanyifeng.com/">阮一峰 ES6</a></td>
</tr>
<tr>
<td><a href="http://yanhaijing.com/es5">ECMA-262，第 5 版</a></td>
<td><a href="http://es5.github.io/">ES5</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题</title>
    <url>/2018/09/19/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a>基础题</h4><ol>
<li>prototype和 proto的关系是什么</li>
<li>meta viewport 原理</li>
<li>域名收敛是什么</li>
<li>float和display : inline-block :区别</li>
<li>前端优化策略列举</li>
<li>首屏白屏时间如何计算</li>
<li>闭包</li>
<li>作用连接</li>
<li> ajax如何实现。readystate五中状态的含义</li>
<li> jsonp如何实现</li>
<li>怎么处理跨域</li>
<li> restful的method解释</li>
<li>get和post的区别</li>
<li>事件模型解释</li>
<li>编写一个元素拖拽的插件</li>
<li>编写一个Contextmenu插件</li>
<li>编写web端cookie的设置和获取方法</li>
<li>兼容ie 8的水平垂直居中</li>
<li>兼容IE的事件封装</li>
<li>Html5和原生Android的优缺点</li>
<li>编写H5需要注意什么</li>
<li>XSS和crsf的原理以及怎么预防</li>
<li>css优先级</li>
<li>如何实现点击radio的文字描述控制radio的状态（通过label实现)</li>
<li>delegate如何实现</li>
</ol>
<p><strong>前端面试题：</strong></p>
<p><a href="http://www.jobui.com/mianshiti/it/web/5066/">http://www.jobui.com/mianshiti/it/web/5066/</a></p>
<p><a href="http://www.qdfuns.com/notes/24610/01b6dcaafaf78da4a2b79ebcbca9e4b6.html">http://www.qdfuns.com/notes/24610/01b6dcaafaf78da4a2b79ebcbca9e4b6.html</a></p>
<p><a href="http://www.qdfuns.com/notes/23515/c9163ddd620baac5dd23141d41982bb8.html">http://www.qdfuns.com/notes/23515/c9163ddd620baac5dd23141d41982bb8.html</a></p>
<p><a href="http://web.jobbole.com/88041/">http://web.jobbole.com/88041/</a></p>
<p><strong>同源策略：</strong><a href="http://blog.csdn.net/ligaoyang/article/details/52182476">http://blog.csdn.net/ligaoyang/article/details/52182476</a></p>
<p>同源策略，</p>
<p><strong>原型链</strong>（利于封装</p>
<p><a href="http://www.cnblogs.com/shuiyi/p/5305435.html">http://www.cnblogs.com/shuiyi/p/5305435.html</a></p>
<p><a href="http://www.jb51.net/article/80109.htm">http://www.jb51.net/article/80109.htm</a></p>
<p>__proto__是每个对象都有的属性</p>
<p>prototype是函数才有这个属性</p>
<p>对象有”prototype”属性，函数对象有”prototype”属性，原型对象有”constructor”属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var A = function()&#123;&#125;;</span><br><span class="line">var a = new A();</span><br><span class="line">console.log(a.__proto__); //A &#123;&#125;（即构造器function A 的原型对象）</span><br><span class="line">console.log(a.__proto__.__proto__); //Object &#123;&#125;（即构造器function Object 的原型对象）</span><br><span class="line">console.log(a.__proto__.__proto__.__proto__); //null</span><br></pre></td></tr></table></figure>

<p>prototype 属性使您有能力向对象添加属性和方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object.prototype.name=value</span><br></pre></td></tr></table></figure>

<p>Object对象本身是一个函数对象。(CODE TEST) 既然是Object函数，就肯定会有prototype属性，所以可以看到<code>”Object.prototype”</code>的值就是”Object {}”这个原型对象。反过来，当访问<code>”Object.prototype”</code>对象的”constructor”这个属性的时候，就得到了Obejct函数。</p>
<p>另外，当通过<code>”Object.prototype._proto_”</code>获取Object原型的原型的时候，将会得到”null”，也就是说<code>”Object &#123;&#125;”</code>原型对象就是原型链的终点了。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/1.png" alt="原型链"></p>
<p>数组去重：<a href="http://www.jb51.net/article/46154.htm">http://www.jb51.net/article/46154.htm</a></p>
<p>统计字符串中出现次数最多的字符， <a href="http://www.jb51.net/article/62095.htm">http://www.jb51.net/article/62095.htm</a></p>
<p>清除浮动的几种方式<a href="https://my.oschina.net/leipeng/blog/221125">https://my.oschina.net/leipeng/blog/221125</a>  <a href="http://www.cnblogs.com/AnotherLife/p/5800751.html">http://www.cnblogs.com/AnotherLife/p/5800751.html</a>  <a href="http://www.jianshu.com/p/e97e82ebf3b0">http://www.jianshu.com/p/e97e82ebf3b0</a></p>
<p>H5游戏链接：<a href="http://pages.ssq.weiduanxian.com/pokerIndex.html">http://pages.ssq.weiduanxian.com/pokerIndex.html</a></p>
<p>类选择，</p>
<p>节流</p>
<p>渲染</p>
<p>选择有a或者有b这个类</p>
<p>百度搜索下拉提示</p>
<p>防抖</p>
<p>奕顺：（防抖就是，下拉的时候，如果用户在一定时间内一直触发活动，那么就不要执行滚动绑定的操作）</p>
<p>变量提升</p>
<p>事件冒泡</p>
<p>业务流程</p>
<p>捕获</p>
<p>事件过程</p>
<p>call/apply的区别</p>
<p>优化（性能优化）</p>
<p>闭包</p>
<p>回调</p>
<p>递归</p>
<p>兼容（处理好层级，知道IE的盒子模型和其他浏览器不一样，padding和margin这些计算不太一样）</p>
<p>placeholder的兼容处理</p>
<p>跨域通讯</p>
<p>cookie,session,localstorage</p>
<p>this的指向</p>
<p>function fn 和 var aa = function的区别</p>
<p>js的解析</p>
<p>渲染</p>
<p>选择有a或者有b这个类</p>
<p>百度搜索</p>
<p>自动化工具</p>
<p><a href="https://webpack.github.io/">webpack</a></p>
<p><a href="http://gruntjs.com/">gruntjs</a></p>
<p><a href="http://gulpjs.com/">gulp</a></p>
<p><a href="https://github.com/bower/bower">bower</a></p>
<p><a href="http://yeoman.io/">yeoman</a></p>
<p><a href="https://babeljs.io/">babeljs</a></p>
<p><a href="https://github.com/wchaowu/jsMonkey">jsmonkey</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>元组的使用和类型约束</title>
    <url>/2020/11/09/%E5%85%83%E7%BB%84%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h6 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// const xiaojiejie : (string | number)[] = [ &#x27;dajiao &#x27; , &#x27;teacher &#x27;, 28]</span><br></pre></td></tr></table></figure>

<h5 id="元组的写法"><a href="#元组的写法" class="headerlink" title="元组的写法"></a>元组的写法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejie : [string,string,number] = [ &#x27;dajiao&#x27; , &#x27;teacher&#x27;,28]</span><br></pre></td></tr></table></figure>

<h5 id="CSV（现在很少用）"><a href="#CSV（现在很少用）" class="headerlink" title="CSV（现在很少用）"></a>CSV（现在很少用）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const xiaojiejies : [string, string, number][] =[</span><br><span class="line">	[ &#x27;dajiao &#x27; , &#x27;teacher&quot; ,28],</span><br><span class="line">	[ &#x27;liuying&quot; , &#x27;teacher&#x27; ,18],</span><br><span class="line">	[ &quot; cuihua &#x27; , &#x27;teacher&quot; ,22]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>工作笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中发布文章</title>
    <url>/2018/08/02/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h4 id="1、新建一篇文章"><a href="#1、新建一篇文章" class="headerlink" title="1、新建一篇文章"></a>1、新建一篇文章</h4><p>（1）在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;在这里&quot;</span></span><br></pre></td></tr></table></figure>
<p>（2）在博客目录下的/source/_posts/ 文件夹下，可以看到已经生成了标题为(在这里.md)的博客文件：<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai.png" alt="生成的博客文件"><br>（3）在（在这里.md）文件中编辑自己的博客文章即可。<br>注意：Hexo 发布的文章是 Markdown 格式的文件， Markdown 基本语法的网址：<a href="http://www.markdown.cn/" title="" target="">点这里前往</a> </p>
<span id="more"></span>
<h4 id="2、给文章添加分类和标签"><a href="#2、给文章添加分类和标签" class="headerlink" title="2、给文章添加分类和标签"></a>2、给文章添加分类和标签</h4><p>(1) 在（在这里.md）文件中设置tags和categories属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: 在这里</span><br><span class="line"><span class="built_in">date</span>: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           //多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-edit.png" alt="博客文章-基本设置"></p>
<h4 id="3、启动服务器，本地测试"><a href="#3、启动服务器，本地测试" class="headerlink" title="3、启动服务器，本地测试"></a>3、启动服务器，本地测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-page.png" alt="查看博客文章"></p>
<h4 id="4、添加“阅读全文”按钮"><a href="#4、添加“阅读全文”按钮" class="headerlink" title="4、添加“阅读全文”按钮"></a>4、添加“阅读全文”按钮</h4><p>方法一：在文章任意你想添加的位置添加<!--more-->即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;        </span><br></pre></td></tr></table></figure>
<p>例如：<br>在这里.md里面的内容是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 在这里</span><br><span class="line"><span class="built_in">date</span>: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客</span><br><span class="line">- hexo</span><br><span class="line">categories: web前端</span><br><span class="line">---</span><br><span class="line">javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">后面的内容在首页不显示，只显示到&lt;!--more--&gt;这里</span><br></pre></td></tr></table></figure>
<p>在页面中显示的效果是：<br>![阅读全文按钮-更多]](<a href="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-more.png">https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/zai-more.png</a>)<br>方法二：设置首页文章以摘要形式显示，打开主题配置文件，找到auto_excerpt进行修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>其中length代表显示摘要的截取字符长度。<br>注：这两种方法，在博客首页显示的效果不一样，根据自己的需要，选择自己喜欢的方法</p>
<h4 id="5、在博文中添加图片"><a href="#5、在博文中添加图片" class="headerlink" title="5、在博文中添加图片"></a>5、在博文中添加图片</h4><p>方法一：<br>(1)在hexo目录下，安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>(2)在hexo\source 目录下新建一个img文件夹，把图片放置在里面；<br>(3)在xxx.md文件中引用图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![header]( img/header.jpg)</span><br></pre></td></tr></table></figure>
<p>方法二：<br>(1)在全局配置文件（hexo/_config.yml)中将post_asset_folder设置为true；<br>(2)创建文章（在创建的时候，会在hexo/source/_post目录下，生成一个XXX.md文件和一个XXX的文件夹）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;XXX&quot;</span></span><br></pre></td></tr></table></figure>
<p>(3)把XXX这个博文需要展示的图片放在XXX文件夹目录下；<br>(4)在XXX.md文件中引入图片的方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、发布到Github上"><a href="#6、发布到Github上" class="headerlink" title="6、发布到Github上"></a>6、发布到Github上</h4><p>（1）发表的文章在本地预览无误后，在 Git Bash 命令窗口执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>（2）在浏览器，访问自己的博客域名，即可看到刚 发布的文章</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>在Vue项目中使用sass的配置方法</title>
    <url>/2020/03/19/%E5%9C%A8Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8sass%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="1、安装sass的依赖包"><a href="#1、安装sass的依赖包" class="headerlink" title="1、安装sass的依赖包"></a>1、安装sass的依赖包</h4><p>sass-loader依赖于node-sass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev </span><br></pre></td></tr></table></figure>
<h4 id="2、在build文件夹下的webpack-base-conf-js的rules里面添加配置"><a href="#2、在build文件夹下的webpack-base-conf-js的rules里面添加配置" class="headerlink" title="2、在build文件夹下的webpack.base.conf.js的rules里面添加配置"></a>2、在build文件夹下的webpack.base.conf.js的rules里面添加配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> test: /\.sass$/,</span><br><span class="line"> loaders: [&#x27;style&#x27;, &#x27;css&#x27;, &#x27;scss&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">	rules:[</span><br><span class="line">		...</span><br><span class="line">		&#123;</span><br><span class="line">			test: /\.scss$/,</span><br><span class="line">			loaders:[&#x27;style&#x27;,&#x27;css&#x27;,&#x27;sass&#x27;]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、在APP-vue中修改style标签"><a href="#3、在APP-vue中修改style标签" class="headerlink" title="3、在APP.vue中修改style标签"></a>3、在APP.vue中修改style标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">   $blue:red;</span><br><span class="line">    .common-header&#123;</span><br><span class="line">        color: $blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4、运行项目"><a href="#4、运行项目" class="headerlink" title="4、运行项目"></a>4、运行项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>如有以下报错，是版本的问题影响的：</p>
<p>Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</p>
<p><strong>解决方法</strong>： 选择更低版本的sass-loader</p>
<p><strong>卸载当前版本</strong>：npm uninstall sass-loader<br><strong>安装指定版本</strong>：npm install <a href="mailto:&#115;&#97;&#115;&#115;&#45;&#x6c;&#x6f;&#97;&#100;&#x65;&#x72;&#64;&#x37;&#46;&#x33;&#46;&#x31;">&#115;&#97;&#115;&#115;&#45;&#x6c;&#x6f;&#97;&#100;&#x65;&#x72;&#64;&#x37;&#46;&#x33;&#46;&#x31;</a> –save-dev</p>
<p>参考： <a href="https://blog.csdn.net/ze1024/article/details/100516650">安装node-sass运行报错</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>在这里</title>
    <url>/2018/08/02/%E5%9C%A8%E8%BF%99%E9%87%8C/</url>
    <content><![CDATA[<p>javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</p>
<span id="more"></span>
<p>后面的内容在首页不显示，在博客首页只显示到这里</p>
<p>javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令</title>
    <url>/2020/05/25/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装依赖包：</span><br><span class="line">cnpm i</span><br><span class="line"></span><br><span class="line">运行项目：</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">打包：</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure>



<p><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></p>
<p><a href="http://gitref.justjavac.com/">Git 参考手册</a></p>
<h3 id="Git提交代码到Github"><a href="#Git提交代码到Github" class="headerlink" title="Git提交代码到Github"></a>Git提交代码到Github</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;注释内容&quot;</span><br><span class="line">git pull </span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure>

<h4 id="git查看仓库代码"><a href="#git查看仓库代码" class="headerlink" title="git查看仓库代码"></a>git查看仓库代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h4 id="删除远程地址"><a href="#删除远程地址" class="headerlink" title="删除远程地址"></a><a href="https://www.cnblogs.com/stronger-xsw/p/12991139.html">删除远程地址</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<h4 id="添加新地址"><a href="#添加新地址" class="headerlink" title="添加新地址"></a>添加新地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure>

<h4 id="更新package-json依赖到最新版本"><a href="#更新package-json依赖到最新版本" class="headerlink" title="更新package.json依赖到最新版本"></a>更新package.json依赖到最新版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line"></span><br><span class="line">ncu -u</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>npm 可改为cnpm</p>
</blockquote>
<h4 id="git-add-添加错文件-撤销"><a href="#git-add-添加错文件-撤销" class="headerlink" title="git add 添加错文件 撤销"></a>git add 添加错文件 撤销</h4><p><strong>git add 添加 多余文件</strong><br>这样的错误是由于， 有的时候 可能</p>
<p>git add . （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件</p>
<p>git add 如果添加了错误的文件的话</p>
<p>撤销操作</p>
<p>git status 先看一下add 中的文件<br>git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了<br>git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</p>
<h4 id="查看Node-js版本"><a href="#查看Node-js版本" class="headerlink" title="查看Node.js版本"></a>查看Node.js版本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h4 id="Giteet特技"><a href="#Giteet特技" class="headerlink" title="Giteet特技"></a>Giteet特技</h4><ol>
<li> 使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li>
<li> Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li>
<li> 你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li>
<li> <a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li>
<li> Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li>
<li> Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li>
</ol>
<h3 id="Hexo指令"><a href="#Hexo指令" class="headerlink" title="Hexo指令"></a><a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s (运行)</span><br><span class="line">hexo new &quot;aaa&quot; (新增)</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d (发布)   // 在git bash中</span><br></pre></td></tr></table></figure>

<h5 id="启动个人博客"><a href="#启动个人博客" class="headerlink" title="启动个人博客"></a>启动个人博客</h5><ol>
<li>在根目录，鼠标右键，选择“Git Bash Here”</li>
<li>启动服务：hexo s</li>
</ol>
<p>重装系统后，要重新安装以下两个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="JsonServer"><a href="#JsonServer" class="headerlink" title="JsonServer"></a><a href="https://www.npmjs.com/package/json-server">JsonServer</a></h2><ol>
<li>安装</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g json-server</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建db目录，新建json文件</li>
</ol>
<blockquote>
<p>把db.json文件当作数据库文件，可以对它进行增删改查，执行方法，会直接改变这个json文件里面的内容</p>
</blockquote>
<ol start="3">
<li>开启服务(在 db.json文件所在目录中)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json-server --watch db.json --port 5000</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:5000/posts</span><br></pre></td></tr></table></figure>



<h3 id="快速生成目录结构"><a href="#快速生成目录结构" class="headerlink" title="快速生成目录结构"></a>快速生成目录结构</h3><p><a href="https://blog.csdn.net/qq_43538596/article/details/111089188">参考博客</a></p>
<h4 id="一、进入需要生成目录的文件夹"><a href="#一、进入需要生成目录的文件夹" class="headerlink" title="一、进入需要生成目录的文件夹"></a>一、进入需要生成目录的文件夹</h4><h5 id="Window系统下"><a href="#Window系统下" class="headerlink" title="Window系统下"></a>Window系统下</h5><p>1、打开windows命令窗口（或windows+R，输入cmd，enter）</p>
<p>2、使用cd命令进入到指定目录</p>
<h5 id="linux系统下"><a href="#linux系统下" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>1、打开命令窗口，cd进入指定目录</p>
<h4 id="二、使用tree命令"><a href="#二、使用tree命令" class="headerlink" title="二、使用tree命令"></a>二、使用tree命令</h4><h5 id="Window系统下-1"><a href="#Window系统下-1" class="headerlink" title="Window系统下"></a>Window系统下</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree /f</span><br></pre></td></tr></table></figure>

<h5 id="linux系统下-1"><a href="#linux系统下-1" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>这里的n表示数字，指你要展示的最深层级，如n为2时表示深度为2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L n</span><br></pre></td></tr></table></figure>

<p>这里已经完成了我们所需要的功能，如果你还想进一步把目录结构存进文件里方便查看，那么可以采用输出<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&spm=1001.2101.3001.7020">重定向</a>的方式将tree命令的输出结果输出到指定文件下，如我要<strong>将tree命令结果输出到一个名为result.txt文件下</strong>：</p>
<h5 id="Window系统下-2"><a href="#Window系统下-2" class="headerlink" title="Window系统下"></a>Window系统下</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree /f &gt; result.txt</span><br></pre></td></tr></table></figure>

<h5 id="linux系统下-2"><a href="#linux系统下-2" class="headerlink" title="linux系统下"></a>linux系统下</h5><p>深度为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L 2 &gt; result.txt</span><br></pre></td></tr></table></figure>

<p>清空终端控制台的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure>

<h4 id="win10-输入法-繁简-切换"><a href="#win10-输入法-繁简-切换" class="headerlink" title="win10 输入法 繁简 切换"></a><a href="https://m.uc23.net/jiaocheng/51690.html">win10 输入法 繁简 切换</a></h4><p>方法一：</p>
<p>1、在微软输入法的情况下，直接按下【Ctrl + Shift + F】即可在简体和繁体之间互相切换。</p>
<h4 id="快速打开命令窗口"><a href="#快速打开命令窗口" class="headerlink" title="快速打开命令窗口"></a>快速打开命令窗口</h4><p>在文件路径地址栏，输入”cmd“或”powershell”可以打开命令窗口</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>将Hexo博客主题更换为NexT主题</title>
    <url>/2018/08/01/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<p>1、<a href="https://gitforwindows.org/" title="" target="">下载NexT主题</a>，下载解压后，将该文件夹命名为next，把这个文件夹放置到博客目录的themes 文件夹下，如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/next.png" alt="将主题的文件夹命名为next"><br>想了解更多，可以查看NexT 主题使用文档： <a href="http://theme-next.iissnan.com/" title="" target="">官方使用文档</a></p>
<span id="more"></span>
<p>2、修改主配置文件_config.yml（hexo目录下的_config.yml文件），将theme属性修改为next，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions 扩展</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>3、在博客目录，右键点击Git Bash，进入命令窗口，输入下面的命令，本地预览博客，如果发现Hexo博客的主题已经变成了NexT主题，说明你已经成功更换主题了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>4、打开主题配置文件 _config.yml<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/next-config.png" alt="打开主题配置文件 _config.yml"><br>5、在主题配置文件 _config.yml中将scheme设置为 Pisces（Hexo默认样式是Muse，根据你自己的喜好选择你想要设置的样式，这里以Pisces为例）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p>6、在主题配置文件 _config.yml中配置博客网站底部的基本信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  since: 2018      <span class="comment">#网站起始运营年份</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  icon: user     <span class="comment">#声明图标</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  copyright: winney07   <span class="comment">#版权所有</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  powered: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">false</span>    <span class="comment">#是否显示主题</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    version: <span class="literal">false</span>     <span class="comment">#是否显示驱动</span></span><br></pre></td></tr></table></figure>
<p> 7、在主题配置文件 _config.yml中配置菜单按钮，找到menu属性，做以下配置：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"> home: / || home     <span class="comment">#首页，后面的表示图标</span></span><br><span class="line"> categories: /categories/ || th   <span class="comment">#分类</span></span><br><span class="line"> tags: /tags/ || tags       <span class="comment">#标签</span></span><br><span class="line"> archives: /archives/ || archive     <span class="comment">#归档</span></span><br><span class="line"> about: /about/ || user       <span class="comment">#关于</span></span><br><span class="line"> <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line"> <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"> <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><br>8、创建相应的页面<br>（1）执行命令hexo s，本地预览我们的博客页面，会发现，点击分类、标签、关于这几个页面的时候，会显示404。<br>（2）在Git Bash命令窗口，输入以下命令来创建相应页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&#x27;categories&#x27;</span></span><br><span class="line">hexo new page <span class="string">&#x27;tags&#x27;</span></span><br><span class="line">hexo new page <span class="string">&#x27;about&#x27;</span></span><br></pre></td></tr></table></figure>
<p>（3）可以在hexo/source目录下看到创建的3个文件夹<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/source.png" alt="在hexo/source目录下看到创建的3个文件夹"><br>9、每一个分类菜单都生成了一个 index.md 初始文件（在刚创建的文件夹目录下），默认包含了 title 和 date 字段，我们需要给每一 index.md 文件添加上 type 字段<br>如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:28:33</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:28:54</span><br><span class="line"><span class="built_in">type</span>: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line"><span class="built_in">date</span>: 2018-07-30 16:29:13</span><br><span class="line"><span class="built_in">type</span>: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>10、配置搜索菜单：<br>（1）安装 hexo-generator-searchdb ，在 Git Bash 命令窗口，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>（2）打开全局配置文件（hexo/_config.yml），新增以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>（3）打开主题配置文件（hexo/themes/next/_config.yml），找到 local_search 属性，开启本地搜索功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>
<p>11、执行命令hexo s，本地预览我们的博客页面，发现刚才的配置已经完成<br>如图所示：<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B0%86Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E4%B8%BANexT%E4%B8%BB%E9%A2%98/winney-blog.png" alt="预览本地博客页面"><br>12、在命令窗口，输入以下命令，将修改后的本地hexo项目托管到GitHub上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>13、上传成功后，可以通过自己的博客域名访问修改主题和修改相关配置后的博客页面</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>平面设计</title>
    <url>/2018/09/22/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h4 id="视频制作："><a href="#视频制作：" class="headerlink" title="视频制作："></a>视频制作：</h4><p>用CDR做出来的文件，导出大小为1920px宽，200dpi的PSD，保留透明图层</p>
<h4 id="名片制作："><a href="#名片制作：" class="headerlink" title="名片制作："></a>名片制作：</h4><p>标准尺寸为<code>90mm*54mm</code>；制作的时候，要多做3mm，因为会被裁剪掉，所以制作时的尺寸是：<code>93mm*57mm</code>，做好后用一个大小为<code>90mm*54mm</code>的框来框选各名片内的内容，确保准确。</p>
<h4 id="X架大小："><a href="#X架大小：" class="headerlink" title="X架大小："></a>X架大小：</h4><p>600mm*1600mm</p>
<h4 id="易拉宝大小："><a href="#易拉宝大小：" class="headerlink" title="易拉宝大小："></a>易拉宝大小：</h4><p>800mm*2000mm</p>
<h4 id="CDR快捷键："><a href="#CDR快捷键：" class="headerlink" title="CDR快捷键："></a>CDR快捷键：</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/CDR1.jpg" alt="快捷键"></p>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>工程化的Vue.js开发</title>
    <url>/2019/06/24/%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84Vue-js%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>Vue 提供一套简化开发、测试与部署的方案，不再需要花大量的时间去学习理解框架的使用概念，以及耗费大量的精力去建立复杂的自动化环境。</p>
<h3 id="脚手架-vue-cli"><a href="#脚手架-vue-cli" class="headerlink" title="脚手架 vue-cli"></a>脚手架 vue-cli</h3><p>这个工具可以让一个简单的命令行工具快速地构建一个足以支撑实际项目开发的Vue环境。 vue-cli的存在将项目环境的初始化工作与复杂度降到最低。</p>
<span id="more"></span>
<h5 id="1、安装vue-cli"><a href="#1、安装vue-cli" class="headerlink" title="1、安装vue-cli"></a>1、安装vue-cli</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-cli -g</span><br><span class="line"></span><br><span class="line">(希望能在本机的任意目录下创建项目，那就得将它安装到node.js的全局运行目录下)</span><br></pre></td></tr></table></figure>
<h5 id="2、使用vue-cli初始化项目"><a href="#2、使用vue-cli初始化项目" class="headerlink" title="2、使用vue-cli初始化项目"></a>2、使用vue-cli初始化项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue   ——   查看帮助文件</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue list  ——   查看有哪些官方模板可用</span><br><span class="line"></span><br><span class="line">（这些官方模板存在的意义在于提供强大的项目构建能力，用户可以尽可能快地进行开发。）</span><br></pre></td></tr></table></figure>
<hr>
<p>将list指令的输出结果翻译一下,就可以清楚地了解这些官方模板应用于哪些使用场景:</p>
<ul>
<li>browserify—拥有高级功能的Browserify + vueify 用于正式开发;</li>
<li>browserify-simple——拥有基础功能的 Browserify + vueify用于快速原型开发;</li>
<li>simple—适用于单页应用开发的最小化配置;</li>
<li>webpack——拥有高级功能的webpack + vue-loader用于正式开发;</li>
<li>webpack-simple—拥有基础功能的webpack + vue-loader用于快速原型开发。</li>
</ul>
<p>browserify的模板做得比较简陋，就算是用于正式开发还是会有些不足，配置的是Karma+Jasmine的单元测试框架，而browserify属于比较老旧的构建工具，估计官方提供这两个模板页是出于对经常使用browserify 的开发人员提供一个熟悉环境的考虑。到了正式的项目开发时，我们还是会走上 webpack的道路。</p>
<p><strong>所以我建议初学者可以跳过 browserify 的两个模板，直接使用webpack的两个模板。首先 webpack-simple正如其名，配置了最简单的可直接支持ES6的Vue.js编译环境</strong>，可以应对那些要求时间短，结构相对简单的小型应用。如果对所有环境工具都非常熟悉，开发者也可以由这个模板入手，为项目底板定制更适应自身开发要求的环境。</p>
<p>其次，<strong>webpack模板是一个非常赞的脚手架</strong>，将其分析透彻之后，就会知道Vue的官方开发团队在其中花了很大的功夫，将上文所叙述的开发、测试与生产环境做了非常完善的配置，从最大程度上简化了由于工具而引入项目的复杂度，也降低了开发人员对工具的学习成本，这个模板也将是本书中讲述的重点。</p>
<hr>
<h5 id="3、创建项目"><a href="#3、创建项目" class="headerlink" title="3、创建项目"></a>3、创建项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>

<p>查看项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project   </span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h3 id="深入vue-cli的工程模板"><a href="#深入vue-cli的工程模板" class="headerlink" title="深入vue-cli的工程模板"></a>深入vue-cli的工程模板</h3><p>webpack和 webpack-simple这两个模板从文件结构上看几乎是一致的，只是一个是简化版，另一个是完全版。其实不然，webpack-simple是基于<a href="mailto:&#87;&#x65;&#98;&#112;&#97;&#x63;&#x6b;&#64;&#x32;&#x2e;&#49;&#x2e;&#x30;&#x2d;&#98;&#x65;&#116;&#97;&#46;&#x32;&#53;">&#87;&#x65;&#98;&#112;&#97;&#x63;&#x6b;&#64;&#x32;&#x2e;&#49;&#x2e;&#x30;&#x2d;&#98;&#x65;&#116;&#97;&#46;&#x32;&#53;</a>进行配置的版本，而 webpack模板则是基于Webpack ^1.3.2配置的。<strong>这两个版本暂时是互相不兼容的，而且使用的依赖包的版本也不一样，所以不要将webpack模板创建的项目文件结构复制到webpack-simple中进行直接的取代升级</strong>,而是需要将node_modules内安装的所有的依赖包删除，然后重新安装才有可能迁移成功，这一点是需要注意的。</p>
<h4 id="webpack-simple-模板"><a href="#webpack-simple-模板" class="headerlink" title="webpack-simple 模板"></a>webpack-simple 模板</h4><p>具体约定如下:<br>（1）  公共组件、指令、过滤器（多于三个文件以上的引用）将分别存放于src目录下的</p>
<ul>
<li>components;</li>
<li>directives;</li>
<li>filters 。</li>
</ul>
<p>（2）以使用场景命名 Vue的页面文件。<br>（3）当页面文件具有私有组件、指令和过滤器时，则建立一个与页面同名的目录，页面文件更名为index.vue，将页面与相关的依赖文件放在一起。<br>（4）目录由全小写的名词、动名词或分词命名，由两个以上的词组成，以“-”进行分隔。<br>（5）Vue文件统一以大驼峰命名法命名，仅入口文件index.vue采用小写。<br>（6）测试文件一律以测试目标文件名.spec.js命名。<br>（7）资源文件一律以小写字符命名，由两个以上的词组成，以“-”进行分隔。</p>
<h4 id="webpack模板"><a href="#webpack模板" class="headerlink" title="webpack模板"></a>webpack模板</h4><p>bulid——存放用于编译用的webpack配置与相关的辅助工具代码；<br>config——存放三大环境配置文件，用于设定环境变量和必要的路径信息；<br>test——存放E2E测试与单元测试文件以及相关的配置文件；<br>static——存放项目所需要的其他静态资源文件；<br>dist——存放运行npm run build 指令的生产环境输出文件，可直接部署到服务器对应的静态资源文件夹内，该文件夹只有在运行build之后才会生成。</p>
<h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><h5 id="1、编译开发环境"><a href="#1、编译开发环境" class="headerlink" title="1、编译开发环境"></a>1、编译开发环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>这个指令的配置是在 package.,json 的 script属性中设置的，实质上它是由npm来引导执行入口程序dev-server.js完成以下的加载过程：</p>
<ol>
<li>加载环境变量</li>
<li>合并webpack配置</li>
<li>配置热加载</li>
<li>配置代理服务</li>
<li>配置回退支持</li>
<li>配置静态资源</li>
<li>加载开发服务器</li>
</ol>
<h6 id="加载环境变量"><a href="#加载环境变量" class="headerlink" title="加载环境变量"></a>加载环境变量</h6><p>该环节从config目录加载index.js和 dev.env.js两个模块，准备开发调试环境所必需的-些目录和全局变量。</p>
<h6 id="合并webpack配置"><a href="#合并webpack配置" class="headerlink" title="合并webpack配置"></a>合并webpack配置</h6><p>在 build目录下一共有三个webpack的配置文件:</p>
<ul>
<li>webpack.base.conf.js——公用的基本webpack配置;</li>
<li>webpack.dev.conf.js—开发环境专用的 webpack配置项;</li>
<li>webpack.prod.conf.js——生产环境专用的 webpack配置项。</li>
</ul>
<p>这里使用了一个叫 webpack-merge的包来进行两个 webpack配置之间的合并，这个环节就是通过这个包将webpack.base.conf.js和 webpack.dev.conf.js合并成最终的webpack配置。<br>请记住这几个配置文件，在下面的章节中我们会对这些配置的内容进行调整。</p>
<h6 id="配置热加载"><a href="#配置热加载" class="headerlink" title="配置热加载"></a>配置热加载</h6><p>热加载是一个非常棒的功能，这个功能启用后的效果就是:当开发环境被启动并进入调试模式后，一旦我们修改了任意地方的源代码，浏览器中对应的内容就会被自动刷新，而无须手工对浏览器进行刷新的操作，这个配置将是我们做页面布局或者功能调整时的一大臂助。</p>
<h6 id="配置代理服务器"><a href="#配置代理服务器" class="headerlink" title="配置代理服务器"></a>配置代理服务器</h6><p>这个环境是为我们的代码增加一个模拟的服务端做准备，有了它的存在，我们就可以在没有后端程序支持的情况下，直接模拟远程服务器执行的一些请求的效果。例如，向服务器发出一个 HTTP GET /api/books/的请求,那么我们就可以利用代理服务器将这一请求截获下来，然后返回一组这个 API应该执行成功的返回结果，这样我们的前端程序运行起来的效果就与接入了服务端后的效果是一致的了。我们将这一技术称为服务模拟，在后面的章节中会具体介绍这一技术。</p>
<h6 id="加载开发服务器"><a href="#加载开发服务器" class="headerlink" title="加载开发服务器"></a>加载开发服务器</h6><p>启动一个Express的 Web服务器，将上述各个环境中配置好的模块进行加载，并使程序能通过浏览器进行访问。<br>以上就是npm run dev的完整执行思路。</p>
<h5 id="2、编译生产环境"><a href="#2、编译生产环境" class="headerlink" title="2、编译生产环境"></a>2、编译生产环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<h3 id="Vue工程化的webpack配置与基本用法"><a href="#Vue工程化的webpack配置与基本用法" class="headerlink" title="Vue工程化的webpack配置与基本用法"></a>Vue工程化的webpack配置与基本用法</h3><p>webpack是一个模块打包的工具，它的作用是把互相依赖的模块处理成静态资源，如下图所示。</p>
<p><a href="https://webpack.docschina.org/">模块依赖—–&gt;静态资源</a></p>
<h3 id="webpack的特点"><a href="#webpack的特点" class="headerlink" title="webpack的特点"></a>webpack的特点</h3><h4 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h4><p>在 webpack的依赖树里有两种类型的依赖:同步依赖和异步依赖。异步依赖会成为一个代码分割点，并且组成一个新的代码块。在代码块组成的树被优化之后，每个代码块都会保存在一个单独的文件里。</p>
<h4 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h4><p>webpack原生是只能处理JavaScript的，而加载器的作用是把其他的代码转换成JavaScript代码，这样一来所有种类的代码都能组成一个模块，也就是说，我们可以在代码内通过import将 webpack打包的资源以模块的方式引入到程序中。</p>
<p>以下是Vue项目中常用到的加载器（它们都是以NPM库形式提供的)：</p>
<ul>
<li>vue-loader——用于加载与编译*.vue文件;</li>
<li>vue-style-loader——用于加载.vue文件中的样式;</li>
<li>style-loader——用于将样式直接插入到页面的<code>&lt;style&gt;</code>内;</li>
<li>css-loader——用于加载*.css样式表文件;*</li>
<li>less-loader——用于编译与加载.less文件(需要依赖于less库);</li>
<li>babel-loader—用于将ES6编译成为浏览器兼容的ES5;</li>
<li>file-loader——用于直接加载文件;</li>
<li>url-loader—用于加载URL指定的文件，多用于字体与图片的加载;</li>
<li>json-loader——用于加载*.json文件为JS 实例。</li>
</ul>
<h4 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h4><p>webpack的智能解析器能处理几乎所有的第三方库，它甚至允许依赖里出现这样的表达式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require(&quot;./components/&quot;+ name + &quot;.vue&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这一点恰恰是browserify不能做到的。</p>
</blockquote>
<p>它能处理大多数的模块系统，比如说CommonJS和AMD。</p>
<h4 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h4><p>webpack有丰富的插件系统，大多数内部的功能都是基于这个插件系统的。这也使得我们可以定制 webpack，把它打造成能满足我们需求的工具，并且把自己做的插件开源出去。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>（webpack的打包依赖于它的一个重要配置文件webpack.config.js）</p>
<h5 id="样式表引用"><a href="#样式表引用" class="headerlink" title="样式表引用"></a>样式表引用</h5><p>某些页面或者组件可能具有特定的样式定义，这些样式对于其他页面说是冗余的，我们只希望这些组件在应用时才自动加载这些特定的样式、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import Vue form <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">//...省略</span><br><span class="line">//引用指定的样式源文件</span><br><span class="line">import <span class="string">&#x27;./app/assets/less/dark.less&#x27;</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    // ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(需要在webpack的配置中加入less-loader)</p>
<h5 id="字体的引用"><a href="#字体的引用" class="headerlink" title="字体的引用"></a>字体的引用</h5><h4 id="用别名取代路径引用"><a href="#用别名取代路径引用" class="headerlink" title="用别名取代路径引用"></a>用别名取代路径引用</h4><p>在项目开发过程中有可能有许多包是没有放在npm 上的，有一些较老的可能还依然只存在于bower 上，某些甚至在 bower与 npm上都找不到，而不得不通过下载的方式在项目内引用，这样一来我们的代码可能通过require就得在代码内引用一段很长的文件路径，如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Selector from &#x27;../ ../bower_components/bootstrap-select/dist/js/select&#x27;</span><br></pre></td></tr></table></figure>

<p>这种包的引用方式明显违反了CommonJS的编程规范，对于这些长路径，甚至还具有“…””这些相对路径搜索的定义,我们可以通过webpack 的resolve配置项来解决.就以select这个组件为例，在 webpack.base.config.js中加入以下的这个别名的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports =&#123;</span><br><span class="line">    entry:&#123; ... &#125;,</span><br><span class="line">    output: &#123; ﹒. . &#125;,</span><br><span class="line">    module:&#123; ...&#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions:[&#x27;&#x27;,&#x27;·js&#x27;],</span><br><span class="line">        alias:&#123;</span><br><span class="line">            &#x27;bs-select&#x27;:&#x27;bower_components/bootstrap-select/dist/js/select.js&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个定义以后，我们就可以将上面那个长引用改为下面的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Selector from &#x27;bs-select&#x27;;</span><br></pre></td></tr></table></figure>

<p>绝对不要让路径引用进入到我们的代码，因为这是代码的“癌症”,一旦开始植入并生长起来，以前的代码将难以维护！</p>
<h4 id="配置多入口程序"><a href="#配置多入口程序" class="headerlink" title="配置多入口程序"></a>配置多入口程序</h4><p>不单只有一个入口，例如：前台提供最终用户使用（<a href="http://domain.com/index),%E5%90%8E%E5%8F%B0%E6%8F%90%E4%BE%9B%E7%BB%99%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%EF%BC%88http://domain.com/admin/)%EF%BC%8C%E9%82%A3%E4%B9%88%E8%87%AA%E7%84%B6%E9%9C%80%E8%A6%81%E5%A4%9A%E4%B8%AA%E4%B8%8Emain.js%E7%B1%BB%E4%BC%BC%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3%E3%80%82">http://domain.com/index),后台提供给登录用户使用（http://domain.com/admin/)，那么自然需要多个与main.js类似的程序入口。</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先在build/webpack.base.conf.js配置文件中的entry配置属性上加上新的入口文件：</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">        admin: <span class="string">&#x27;./src/admin-main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（其他相关设置，需要用到时参考书上内容)</p>
<h4 id="基于Karma-Phantom-Mocha-Sinon-Chai的单元测试环境"><a href="#基于Karma-Phantom-Mocha-Sinon-Chai的单元测试环境" class="headerlink" title="基于Karma + Phantom + Mocha + Sinon + Chai的单元测试环境"></a>基于Karma + Phantom + Mocha + Sinon + Chai的单元测试环境</h4><h4 id="基于Nightwatch的端到端测试环境"><a href="#基于Nightwatch的端到端测试环境" class="headerlink" title="基于Nightwatch的端到端测试环境"></a>基于Nightwatch的端到端测试环境</h4>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Vue2.js</category>
      </categories>
      <tags>
        <tag>《Vue2实践揭秘》</tag>
      </tags>
  </entry>
  <entry>
    <title>微信开发</title>
    <url>/2020/07/26/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><a href="https://developers.weixin.qq.com/doc/">微信官网文档</a></p>
<p><a href="https://developers.weixin.qq.com/community/homepage">微信开放社区</a></p>
<p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">微信公众号-开发文档</a></p>
<p><a href="https://github.com/Tencent/weui">weui-ui框架</a></p>
<p><a href="https://weui.io/">WeUI体验官网</a></p>
<p><a href="https://www.kancloud.cn/ywfwj2008/weui/274290">WeUI中文文档</a></p>
<p><a href="https://www.zcool.com.cn/article/ZODQ2Mzg0.html">移动端设计规范和方法汇总</a></p>
<p><a href="http://www.uishe.cn/153001.html">超全面的移动端UI 设计规范整理汇总</a></p>
<p><a href="https://www.uisdc.com/mobile-ui-design-specifications">超全面的移动端UI 设计规范整理汇总</a></p>
<p>使用flex布局</p>
<h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>1、安装后：</p>
<p>启动的时候，扫描这个二维码：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/1.png" alt="二维码"></p>
<p>2、选择</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2.png" alt="选择"></p>
<p>3、创建目录：</p>
<p>项目——新建项目——填写内容——确定按钮</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/3.png" alt="创建目录"></p>
<p>4、会自动生成以下文件：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/4.png" alt="文件"></p>
<p><a href="http://blog.chengsanjin.com/2016/09/21/yingyonghaoawesome/">微信应用号资料</a></p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html">微信小程序文档</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket?t=1475052049833">Web API</a></p>
<h4 id="微信小程序-替换文件"><a href="#微信小程序-替换文件" class="headerlink" title="微信小程序-替换文件"></a>微信小程序-替换文件</h4><h5 id="Mac测试可用-Windows测试可用"><a href="#Mac测试可用-Windows测试可用" class="headerlink" title="Mac测试可用, Windows测试可用"></a>Mac测试可用, Windows测试可用</h5><ol>
<li><p>下载开发工具，并安装(注意: 一定要安装0.9版本)</p>
</li>
<li><p>打开「微信Web开发者工具」的程序目录</p>
<ul>
<li><p>Windows: 使用资源管理器查看</p>
</li>
<li><p>Mac: 右键点击图标，选择「显示包内容」</p>
</li>
</ul>
</li>
<li><p>进入程序目录后，替换以下文件(只需要替换0.9版本里的，0.7版本用来登陆) ：</p>
<ul>
<li>Windows:<ul>
<li><code>\package.nw\app\dist\components\create\createstep.js</code></li>
<li><code>\package.nw\app\dist\stroes\projectStores.js</code>或<code>\package.nw\app\dist\stores\projectStores.js </code>(0.9.0923002之后版本）</li>
<li><code>package.nw\app\dist\weapp\appservice\asdebug.js</code></li>
</ul>
</li>
<li>Mac:<ul>
<li><code>/Resources/app.nw/app/dist/components/create/createstep.js</code></li>
<li><code>/Resources/app.nw/app/dist/stroes/projectStores.js </code>或<code>/Resources/app.nw/app/dist/stroes/projectStores.js</code><br>(0.9.092300之后版本)</li>
<li><code>/Resources/app.nw/app/dist/weapp/appservice/asdebug.js</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="微信公众号-菜单设置的跳转链接不匹配"><a href="#微信公众号-菜单设置的跳转链接不匹配" class="headerlink" title="微信公众号-菜单设置的跳转链接不匹配"></a>微信公众号-菜单设置的跳转链接不匹配</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E8%8F%9C%E5%8D%95.png" alt="微信公众号菜单"></p>
<p>重现bug：</p>
<p>1. </p>
]]></content>
      <tags>
        <tag>微信开发</tag>
        <tag>微信小程序</tag>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键</title>
    <url>/2020/09/07/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>Alt+F4：关闭当前活动项目或退出活动程序</p>
<p>Alt+Tab：在打开的项目中进行切换</p>
<p>Alt+向上方向键：在Windows Explorer中查看当前文件夹的上一级目录</p>
<p>Ctrl+A：在文档或窗口中全选Ctrl+C：复制选中项目:</p>
<p>Ctrl+向下方向键：将光标移到下一段的段首</p>
<p>Ctrl+ Esc：打开开始菜单</p>
<p>Ctrl+F4：关闭活动文档(在程序中能够让你同时打开多个文档)</p>
<p>CTRL+上方向键：将光标移动到之前一段的开头</p>
<p>CTRL+V：粘贴选定项目</p>
<p>CTRL+X：剪切选定项目</p>
<p>CTRL+Y：还原一个操作</p>
<p>CTRL+Z：撤销-一个操作</p>
<p>DELETE：删除选定项目并移动到回收站</p>
<p>ESC：取消当前任务</p>
<p>F2：重命名选定的项目</p>
<p>F4：在Windows Explorer中显示地址栏列表</p>
<p>F5：刷新活动窗口</p>
<h2 id="操作系统常用快捷键"><a href="#操作系统常用快捷键" class="headerlink" title="操作系统常用快捷键"></a>操作系统常用快捷键</h2><p>Win+数字键：打开/显示超级任务栏第N个图标代表的程序</p>
<p>Win+D：快速显示桌面</p>
<p>Win+R：快速运行，打开软件，cmd命令行等</p>
<p>Win+E：快速打开资源管理器</p>
<p>Win+方向键：最大化、还原/最小化窗口</p>
<p>Win+L：快速锁定计算机</p>
<p>Ctrl+Alt+ Del：显示以下选项:锁定该计算机、切换用户、注销、更改密码和启动任务管理器</p>
<p>CTRL+SHIFT+ESC：打开任务管理器</p>
<h3 id="Sublime3的Win常用快捷键和使用"><a href="#Sublime3的Win常用快捷键和使用" class="headerlink" title="Sublime3的Win常用快捷键和使用"></a>Sublime3的Win常用快捷键和使用</h3><p>Sublime项目管理</p>
<p>新建文件和文件夹</p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键:"></a>快捷键:</h4><p>ctrl+/ :注释</p>
<p>ctrl+x\v\y\z剪切、粘贴、重复、取消</p>
<p>ctrl+滚动缩放大小</p>
<p>ctrl+n：新建</p>
<p>ctrl+回车， 在光标当前行下面创建一个新行，并让光标跳到新行|</p>
<p>行首。ctrl+shift+回车: 正好相反。</p>
<p>ctrl+shift+v粘贴并保持缩进</p>
<p>ctrl+shift+d复制当前行</p>
<p>ctrl+shift+个 向上移动行，↓同样道理</p>
<p>shift+鼠标右键选中多行同时编辑</p>
<p>ctrl+f查找ctrl+h查找 和替换</p>
<p>ctrl+[增加左缩进ctrl+]增 加右缩进</p>
<p>ctrl+g:跳转到第几行</p>
<h2 id="关于路径"><a href="#关于路径" class="headerlink" title="关于路径"></a>关于路径</h2><h4 id="dos中的cd命令"><a href="#dos中的cd命令" class="headerlink" title="dos中的cd命令"></a>dos中的cd命令</h4><ul>
<li>cd命令格式:<code> cd 路径</code> （切换到某个盘：  <code>cd e: </code> 或者 <code>e:</code>)</li>
<li><code>“/”</code>：表示当前目录</li>
<li><code>cd ../</code>：返回上一级菜单(../表示上一级)（回到父级目录）</li>
<li><code>cd ../../</code>：返回相对于当前目录的上两级菜单</li>
<li><code>cd C:\Users\malunmac\ </code>：直接到c盘的一个具体位置，这就是绝对路径。</li>
<li><code>dir</code>：显示当前目录下的文件和文件夹</li>
</ul>
<p>相对路径: <code>/../..</code></p>
<p>绝对路径:<code> C:\Users\</code></p>
]]></content>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>插件</title>
    <url>/2019/07/22/%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_41309331/article/details/98476467">移动前端学习笔记（2）——移动端点击（touch、click、tap、fastclick）</a></p>
<h4 id="iScroll-js"><a href="#iScroll-js" class="headerlink" title="iScroll.js"></a>iScroll.js</h4><p><a href="https://www.cnblogs.com/JoannaQ/p/3155873.html">改变滚动条滚动速度</a></p>
<p><a href="https://www.cnblogs.com/JoannaQ/p/3155873.html">iScroll框架的使用和修改</a></p>
<p> <strong>鼠标滚轮滚动</strong></p>
<p>iscroll支持在pc端浏览器中使用鼠标滚轮控制区域滚动，但操作起来很不灵敏。这是由于iscroll对鼠标滚轮事件做了拦截，然后缩小了滚轮的滚动距离，详见iscroll4.js源代码608-609行：<br>wheelDeltaX = e.wheelDeltaX / 12;//控制X轴鼠标滚轮速度*<br>wheelDeltaY = e.wheelDeltaY / 12;//控制Y轴鼠标滚轮速度</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/iScroll.js%E4%BF%AE%E6%94%B9%E6%BB%9A%E5%8A%A8%E9%80%9F%E5%BA%A6.png" alt="iScroll.js修改滚动速度"></p>
<h4 id="Easy-Sass"><a href="#Easy-Sass" class="headerlink" title="Easy Sass"></a><a href="https://www.pianshen.com/article/4482303415/">Easy Sass</a></h4><p><a href="https://www.imooc.com/article/19624">使用 VSCode 编辑器来编译 Sass</a></p>
<h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><a href="https://www.npmjs.com/package/jquery.pagination" title="" target="">jquery.pagination</a>

<p><a href="https://docs.djangoproject.com/en/dev/topics/pagination/">Pagination</a></p>
<p><a href="https://www.jq22.com/jquery-info5697">jQuery分页插件pagination.js</a></p>
<h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p><a href="https://www.jstree.com/">jsTree</a>  注意：要使用高版本的JQ版本</p>
<h4 id="单选-多选下拉框"><a href="#单选-多选下拉框" class="headerlink" title="单选/多选下拉框"></a>单选/多选下拉框</h4><p><a href="https://fly.layui.com/extend/xmSelect/">xm-select</a>      <a href="https://maplemei.gitee.io/xm-select/#/component/install">使用手册</a>      </p>
<h4 id="拾色器插件"><a href="#拾色器插件" class="headerlink" title="拾色器插件"></a>拾色器插件</h4><p> <a href="https://github.com/jdavidhermoso">jdavidhermoso</a>/ <a href="https://github.com/jdavidhermoso/jQueryColorPicker">jQueryColorPicker</a></p>
<p>jquerycolorpicker</p>
<p><a href="https://www.jq22.com/jquery-info2021">jQuery颜色选择器ColorPicker</a></p>
<p><a href="https://plugins.jquery.com/tag/colorpicker/">Tagged: colorpicker</a></p>
<h4 id="图片放大功能-类似放大镜"><a href="#图片放大功能-类似放大镜" class="headerlink" title="图片放大功能(类似放大镜)"></a>图片放大功能(类似放大镜)</h4><p>enlarge.js</p>
<p><a href="https://github.com/filamentgroup">filamentgroup</a> / <a href="https://github.com/filamentgroup/enlarge">enlarge</a></p>
<p><a href="https://github.com/yb">yb</a> /<a href="https://github.com/yb/enlarge.js">enlarge.js</a></p>
<p><a href="http://filamentgroup.github.io/enlarge/docs/">页面效果</a></p>
<h4 id="拖拽替换图片的排列顺序"><a href="#拖拽替换图片的排列顺序" class="headerlink" title="拖拽替换图片的排列顺序"></a>拖拽替换图片的排列顺序</h4><h4 id="上拉加载下拉刷新"><a href="#上拉加载下拉刷新" class="headerlink" title="上拉加载下拉刷新"></a>上拉加载下拉刷新</h4><p><a href="http://caibaojian.com/iscroll-5/">iScroll 5</a></p>
<p>swiper</p>
<p>pulltorefresh</p>
<p><a href="https://github.com/cubiq">cubiq</a>/<a href="https://github.com/cubiq/iscroll">iscroll</a></p>
<p><a href="https://www.jq22.com/jquery-info378">daterangepicker日历插件</a></p>
<h4 id="模拟ios日历时间选择效果"><a href="#模拟ios日历时间选择效果" class="headerlink" title="模拟ios日历时间选择效果"></a>模拟ios日历时间选择效果</h4><p><a href="https://docs.mobiscroll.com/2-13-2">Mobiscroll</a>     <a href="https://demo.mobiscroll.com/select/country-picker#language=zh&display=modal">demo</a>      <a href="https://demo.mobiscroll.com/v4/datetime#demo=mobile-desktop-usage">demo</a></p>
<p><a href="https://www.jq22.com/jquery-info7072">jQuery-mobiscroll</a></p>
<h4 id="jQuery仿QQ登录表单弹出窗"><a href="#jQuery仿QQ登录表单弹出窗" class="headerlink" title="jQuery仿QQ登录表单弹出窗"></a>jQuery仿QQ登录表单弹出窗</h4><p><a href="https://www.jq22.com/jquery-info8342">jQuery仿QQ登录表单弹出窗</a></p>
<h4 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h4><p><a href="https://select2.org/">Select2</a>    <a href="https://github.com/select2/select2">select2-github</a></p>
<p><a href="https://www.bootstrapselect.cn/">bootstrap-select</a>    <a href="http://file.moyublog.com/code/5dc59f18be908/index.html">jQuery Selectric</a>     <a href="http://file.moyublog.com/code/5dc59f18be908/index.html">jQuery Selectric</a></p>
<p><a href="https://www.jq22.com/jquery-info17279">好用的自定义select下拉插件jQuery Selectric</a></p>
<p><a href="https://www.jq22.com/jquery-info14788">jQuery模拟select下拉框插件SelectBox</a></p>
<p><a href="https://www.jq22.com/jquery-info20485">jQuery自定义下拉框插件select-mania</a></p>
<h5 id="可搜索、多选的下拉框插件-简单-xm-select"><a href="#可搜索、多选的下拉框插件-简单-xm-select" class="headerlink" title="可搜索、多选的下拉框插件-简单-xm-select"></a>可搜索、多选的下拉框插件-简单-<a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select</a></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步: 下载 https://gitee.com/maplemei/xm-select/blob/master/dist/xm-select.js#</span><br><span class="line">第二步: 引入 xm-select.js</span><br><span class="line">第三步: 写一个`&lt;div id=&quot;demo1&quot;&gt;&lt;/div&gt;`</span><br><span class="line">第四步: 渲染</span><br><span class="line">	var demo1 = xmSelect.render(&#123;</span><br><span class="line">		el: &#x27;#demo1&#x27;,</span><br><span class="line">		language: &#x27;zn&#x27;,</span><br><span class="line">		data: [</span><br><span class="line">			&#123;name: &#x27;张三&#x27;, value: 1&#125;,</span><br><span class="line">			&#123;name: &#x27;李四&#x27;, value: 2&#125;,</span><br><span class="line">			&#123;name: &#x27;王五&#x27;, value: 3&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;game_id_select&quot; class=&quot;xm-select-demo&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 游戏数据列表</span><br><span class="line">var applist = [] </span><br><span class="line">// 游戏下拉框</span><br><span class="line">var game_id_select = xmSelect.render(&#123;</span><br><span class="line">	el: &#x27;#game_id_select&#x27;, </span><br><span class="line">	name:&#x27;&#x27;,   // 如果将值存在另外一个隐藏input里，将name设置为空，否则为对应的name值</span><br><span class="line">	filterable: true,	// 可搜索</span><br><span class="line">	tips: &#x27;请选择游戏&#x27;,</span><br><span class="line">	searchTips: &#x27;请输入游戏&#x27;,</span><br><span class="line">	height: 300,</span><br><span class="line">	style: &#123;</span><br><span class="line">		width: &#x27;200px&#x27;</span><br><span class="line">	&#125;,</span><br><span class="line">	prop: &#123;</span><br><span class="line">		name: &#x27;app_name&#x27;,  // 数据中对应的name值的属性名</span><br><span class="line">		value: &#x27;app_id&#x27;,	// 数据中对应的value值的属性名</span><br><span class="line">	&#125;,</span><br><span class="line">	data: applist,</span><br><span class="line">	on: function(data)&#123;</span><br><span class="line">		 /*---处理动态赋值-开始-----*/</span><br><span class="line">		var arr = data.arr      // 当前多选已选中的数据</span><br><span class="line">			, str = &#x27;&#x27;;         // 选中数据的valueStr集合</span><br><span class="line">		arr.map(function(item, index) &#123;</span><br><span class="line">			console.log(item);</span><br><span class="line">			str += (index == 0) ? item.app_id : &#x27;,&#x27; + item.app_id;</span><br><span class="line">		&#125;)</span><br><span class="line">		// 动态赋值(在on时触发事件，获取到的值不是最新选择的值,是上次选中的值，要动态赋值)</span><br><span class="line">		// mini.get(&#x27;game_id&#x27;).setValue(str)  mini的用法</span><br><span class="line">		$(&#x27;[name=&quot;game_id&quot;]&#x27;).val(str)</span><br><span class="line">		/*---处理动态赋值-结束-----*/</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="3D轮播图支持滚轮"><a href="#3D轮播图支持滚轮" class="headerlink" title="3D轮播图支持滚轮"></a>3D轮播图支持滚轮</h4><p>jQuery-3dlbt</p>
<h4 id="jQuery头像上传裁剪"><a href="#jQuery头像上传裁剪" class="headerlink" title="jQuery头像上传裁剪"></a>jQuery头像上传裁剪</h4><p>jqueryJcropPhp</p>
<h4 id="日历插件"><a href="#日历插件" class="headerlink" title="日历插件"></a>日历插件</h4><p><a href="http://www.my97.net/">My97DatePicker</a></p>
<h4 id="穿梭插件"><a href="#穿梭插件" class="headerlink" title="穿梭插件"></a>穿梭插件</h4><h4 id="左侧导航栏"><a href="#左侧导航栏" class="headerlink" title="左侧导航栏"></a>左侧导航栏</h4><h4 id="导出数据表格"><a href="#导出数据表格" class="headerlink" title="导出数据表格"></a>导出数据表格</h4><p><a href="https://github.com/wangerzi/layui-excel">layui-excel-GitHub</a></p>
<p><a href="http://excel.wj2015.com/_book/">LAY-EXCEL 简单快捷的导出插件</a></p>
<p><a href="http://excel.wj2015.com/">excel导出</a></p>
<p><a href="https://github.com/rainabba/jquery-table2excel">table2excel</a></p>
<p><a href="https://github.com/clarketm/TableExport">TableExport</a></p>
<h4 id="绘制图表插件"><a href="#绘制图表插件" class="headerlink" title="绘制图表插件"></a>绘制图表插件</h4><p><a href="https://www.highcharts.com.cn/">Highcharts</a></p>
<blockquote>
<p>Highcharts兼容 IE6+、完美支持移动端、图表类型丰富、方便快捷的 HTML5 交互性图表库</p>
</blockquote>
<h4 id="获取地图位置"><a href="#获取地图位置" class="headerlink" title="获取地图位置"></a>获取地图位置</h4><p><a href="http://api.map.baidu.com/api?v=2.0&ak=0PkXrIRUF8zocV4bv8aYNr06DZaHjWXa">百度</a></p>
<p><a href="https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js">QQ</a></p>
<h4 id="移动端下拉刷新，上拉加载更多插件"><a href="#移动端下拉刷新，上拉加载更多插件" class="headerlink" title="移动端下拉刷新，上拉加载更多插件"></a>移动端下拉刷新，上拉加载更多插件</h4><p><a href="https://github.com/wangshengxuan/dropload-gh-pages">dropload-gh-pages</a></p>
<h4 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h4><p><a href="https://validator.niceue.com/">nice-validator</a> </p>
<h4 id="jQuery仿QQ登录表单弹出窗-1"><a href="#jQuery仿QQ登录表单弹出窗-1" class="headerlink" title="jQuery仿QQ登录表单弹出窗"></a>jQuery仿QQ登录表单弹出窗</h4><p><a href="https://www.jq22.com/jquery-info8342">https://www.jq22.com/jquery-info8342</a></p>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p><a href="http://danml.com/download.html">download.js</a></p>
<h4 id="Bootstrap-select-匹配实时搜索功能下拉框"><a href="#Bootstrap-select-匹配实时搜索功能下拉框" class="headerlink" title="Bootstrap-select-匹配实时搜索功能下拉框"></a>Bootstrap-select-匹配实时搜索功能下拉框</h4><p><a href="https://www.bootstrapselect.cn/">https://www.bootstrapselect.cn/</a></p>
<h4 id="Query-file-upload-的正确用法（限制上传大小和文件类型）"><a href="#Query-file-upload-的正确用法（限制上传大小和文件类型）" class="headerlink" title="Query file upload 的正确用法（限制上传大小和文件类型）"></a>Query file upload 的正确用法（限制上传大小和文件类型）</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://www.cnblogs.com/jinzhao/p/5914211.html">参考</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add: function (e, data) &#123;</span><br><span class="line">    var file = data.originalFiles[0].name.split(&quot;.&quot;);</span><br><span class="line">    </span><br><span class="line">    文件名有可能是sdk-icon1.apk.zip   所以不能只判断含有apk，而是判断根据.拆分的数组中的最后一个是不是apk</span><br><span class="line">    if(file[file.length -1].indexOf(&quot;apk&quot;) == -1) &#123;</span><br><span class="line">      msg(&quot;请上传apk后缀名文件&quot;);</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // data.originalFiles[0].size   这里的大小的单位是b</span><br><span class="line">    if(data.originalFiles[0].size &gt; 2 * 1024 * 1024 * 1024) &#123;</span><br><span class="line">      msg(&quot;应用完整包文件不能超过2G&quot;);    //</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data.submit();    //如果满足条件就上传文件（执行上传文件）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="is-js-强大的通用js表单验证插件"><a href="#is-js-强大的通用js表单验证插件" class="headerlink" title="is.js-强大的通用js表单验证插件"></a>is.js-强大的通用js表单验证插件</h4><p><a href="https://www.javascriptcn.com/post/52057">is.js</a> 是一个微型通用性数据检查验证包。目前提供了数据类型、存在性、正则表达、字符串、数学、对象、数组、运行环境、时间、配置10大类110个验证方法。</p>
<h4 id="移动端选择控件"><a href="#移动端选择控件" class="headerlink" title="移动端选择控件"></a>移动端选择控件</h4><p>原生 js 移动端选择控件，不依赖任何库</p>
<p>仿IOS选择下拉框</p>
<p><a href="https://github.com/onlyhom/mobileSelect.js/blob/master/docs/README-CN.md">mobileSelect.js</a></p>
<h4 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h4><p><a href="http://www.sublimetext.com/">Sublime Text</a></p>
<p><a href="https://www.haorooms.com/post/sublime_use">前端神器-sublime text3插件安装及使用</a></p>
<h4 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a><a href="https://github.com/ftlabs/fastclick">fastclick</a></h4><p>处理移动端click延迟</p>
<h4 id="日期选择器-datetimepicker"><a href="#日期选择器-datetimepicker" class="headerlink" title="日期选择器-datetimepicker"></a>日期选择器-datetimepicker</h4><p>多次点击input日期选择器不显示</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//解决输入框点击多次（包括两次）不显示的问题</span><br><span class="line">document.getElementById(&#x27;startDate&#x27;).addEventListener(&#x27;click&#x27;, myfunc);</span><br><span class="line">document.getElementById(&#x27;endDate&#x27;).addEventListener(&#x27;click&#x27;, myfunc);</span><br><span class="line">function myfunc(e) &#123;</span><br><span class="line">	e.currentTarget.blur();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="兼容IE日历插件—My97DatePicker"><a href="#兼容IE日历插件—My97DatePicker" class="headerlink" title="**兼容IE日历插件—My97DatePicker **"></a>**兼容IE日历插件—My97DatePicker **</h4><p><a href="http://www.my97.net/">My97DatePicker</a> </p>
<p>调用方法： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、&lt;script type=&quot;text/javascript&quot; src=&quot;libs/My97DatePicker/WdatePicker.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">2、直接调用：在调用的输入框  onclick = &quot;WdatePicker(&#123;dateFmt:&#x27;yyyy/MM/dd&#x27;&#125;);&quot;    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>技术胖浏览器收藏夹公开</title>
    <url>/2020/08/25/%E6%8A%80%E6%9C%AF%E8%83%96%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%B6%E8%97%8F%E5%A4%B9%E5%85%AC%E5%BC%80/</url>
    <content><![CDATA[<h1 id="收藏夹"><a href="#收藏夹" class="headerlink" title="收藏夹"></a>收藏夹</h1><h4 id="01-JavaScript"><a href="#01-JavaScript" class="headerlink" title="01.JavaScript"></a>01.JavaScript</h4><ul>
<li><a href="https://wangdoc.com/javascript/">JavaScript 教程 | 通俗易懂的JavaScript教程</a></li>
<li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 | 通俗易懂的ES6入门教程</a></li>
<li><a href="https://javascript30.com/">JavaScript 30  |  使用原生JavaScript在30天内完成30个项目</a></li>
<li><a href="https://zh.javascript.info/">现代 JavaScript 教程 |  最近很流行的JavaScript教程</a></li>
<li><a href="https://blog.poetries.top/node-learning-notes/">Node.js学习指南 | 系统的Node.js学习教程和笔记系统整理</a></li>
<li><a href="https://github.com/ryanmcdermott/clean-code-javascript">JS 代码规范 | 优秀的 JS代码规范</a></li>
<li><a href="https://github.com/xcatliu/typescript-tutorial">TypeScript 教程 | 通俗易懂的TypeScript教程</a></li>
<li><a href="https://jspang.com/detailed?id=63">TypeScript 教程 |  最好的TypeScript 视频+图文教程</a></li>
</ul>
<h4 id="02-CSS样式"><a href="#02-CSS样式" class="headerlink" title="02.CSS样式"></a>02.CSS样式</h4><ul>
<li><a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/">CSS Tricks 效果大全 | CSS的各种效果实现 有很多动画效果</a></li>
<li><a href="https://github.com/chokcoco/CSS-Inspiration">CSS Inspiration |  CSS灵感的诞生地  我每天都的网站</a></li>
<li><a href="https://github.com/QiShaoXuan/css_tricks"> CSS 常用样式 |  有很多常用的CSS样式</a></li>
<li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li>
<li><a href="https://animista.net/"> Animista | CSS动画库  主打按需定制CSS动画效果</a></li>
<li><a href="https://cssminifier.com/"> CSS Minifier | 在线CSS代码简化/压缩工具</a></li>
<li><a href="https://sass.bootcss.com/documentation"> Sass: Sass 文档 | Sass 中文网  成熟、稳定、强大的CSS扩展语言</a></li>
<li><a href="https://less.bootcss.com/"> Less 快速入门 | Less.js 中文文档 将CSS赋予了动态语言特性的样式语言</a></li>
<li><a href="https://stylus-lang.com/"> stylus | CSS扩展  富有变现里、动态、健壮的CSS</a></li>
</ul>
<h4 id="03-算法数据"><a href="#03-算法数据" class="headerlink" title="03.算法数据"></a>03.算法数据</h4><ul>
<li><a href="http://github.com/trekhleb/javascript-algorithms"> JavaScript 算法与数据结构 | 多种基于JavaScript的算法与数据结构</a></li>
<li><a href="https://github.com/azl397985856/leetcode"> leetcode 解题之路 |  私藏LeetCode解题攻略 </a></li>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation"> 五分钟学算法 |  每天拿出五分钟  学学算法  比如上个厕所就学了 </a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/43">数据结构与算法项目推荐 | Github上170K+Star的前端学习数据结构和算法题目 </a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/42">JavaScript  十大经典排序算法 | JavaScript排序必会题目  作者功力很深 值得学习 </a></li>
<li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">算法可视化工具 |  用可视化工具和交互方式 让你从代码中可视化算法 </a></li>
<li><a href="https://visualgo.net/en">算法可视化来源 </a></li>
<li><a href="https://github.com/skidding/illustrated-algorithms">算法的工作方式 | 变量和操作的可视化表示 增强了控制流和实际源代码 </a></li>
</ul>
<h4 id="04-前端面试"><a href="#04-前端面试" class="headerlink" title="04.前端面试"></a>04.前端面试</h4><ul>
<li><a href="https://blog.poetries.top/FE-Interview-Questions/">前端面试常考问题整理 |  按模块和知识点分类</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">前端开发面试题</a></li>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/">WEB前端面试宝典</a></li>
<li><a href="https://github.com/shfshanyue/blog/blob/master/post/juejin-interview.md">掘金前端面试题合集</a></li>
<li><a href="https://yuchengkai.cn/">前端面试图谱</a></li>
<li><a href="https://github.com/biaochenxuying/blog/issues/47">前端面试开源项目汇总 | Github上100K+ Star 的前端面试开源项目汇总</a></li>
</ul>
<h4 id="05-技术社区"><a href="#05-技术社区" class="headerlink" title="05.技术社区"></a>05.技术社区</h4><ul>
<li><a href="https://github.com/">GitHub  |  高质量内容创作和分享平台</a></li>
<li><a href="https://stackoverflow.com/">Stackoverflow |一个回答技术问题的网站</a></li>
<li><a href="https://juejin.cn/">掘金 | 国内的很多优质前端文章都掘金</a></li>
<li><a href="https://www.cnblogs.com/">博客园  | 一个很纯粹的技术博客平台</a></li>
<li><a href="https://www.zhihu.com/">知乎 |  很多程序人喜欢泡在知乎</a></li>
<li><a href="https://www.csdn.net/">CSDN  | 老牌社区  程序员必上的一个社区</a></li>
<li><a href="https://www.v2ex.com/">v2ex  | 程序员分享和探索的社区</a></li>
<li><a href="https://segmentfault.com/">segmentfault  | 低调技术博客社区</a></li>
<li><a href="https://cnodejs.org/">Node.js 中文社区 |  node专业中文社区</a></li>
<li><a href="https://www.smashingmagazine.com/">博客杂志站点 | 一个 web 技术类的博客杂志站点</a></li>
<li><a href="https://www.jstips.co/">JS 技术的网站 | 每天推出一个JS技巧的网站</a></li>
<li><a href="https://www.jstips.co/">W3Cplus | 推广国内行业的技术博客</a></li>
<li><a href="https://docschina.org/">印记中文 | 最权威的技术中文文档社区</a></li>
</ul>
<h4 id="06-前端博客"><a href="#06-前端博客" class="headerlink" title="06.前端博客"></a>06.前端博客</h4><ul>
<li><a href="https://jspang.com/">技术胖博客 |  专注前端 每年100集免费前端视频</a></li>
<li><a href="http://www.alloyteam.com/">腾讯Alloy Team  | 腾讯前端博客 每天必看</a></li>
<li><a href="https://isux.tencent.com/">腾讯用户体验博客 | 专注于前端用户体验</a></li>
<li><a href="https://fed.taobao.org/">淘系前端博客 |  淘宝前端博客 代表中国最强前端实力</a></li>
<li><a href="https://aotu.io/">京东凹凸实验室  |  京东前端技术博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/ElemeFE">饿了么前端博客  |  知乎上的最强前端博客</a></li>
<li><a href="http://fex.baidu.com/">百度前端博客  |  百度前端团队旗下博客</a></li>
<li><a href="https://75.team/">360奇舞团  |  360公司前端团队</a></li>
<li><a href="https://tech.meituan.com/">美团技术博客  |  美团技术团队博客</a></li>
</ul>
<h4 id="07-构建工具"><a href="#07-构建工具" class="headerlink" title="07.构建工具"></a>07.构建工具</h4><ul>
<li><a href="https://www.npmjs.com/">NPM |  包管理 和 项目构建工具</a></li>
<li><a href="https://webpack.js.org/">webpack  | 前端最流行的项目构建工具</a></li>
<li><a href="https://yarnpkg.com/">Yarn  |  后起之秀 优秀的包管理和构建工具</a></li>
<li><a href="https://www.gulpjs.com.cn/">Gulp  |  老牌构建工具</a></li>
<li><a href="https://babeljs.io/">Babel  | ES6构建转换工具</a></li>
<li><a href="https://cn.eslint.org/">ESLint  | 可组装的JavaScript和JSX检查工具</a></li>
<li><a href="https://www.postcss.com.cn/">PostCSS | 用JavaScript转换CSS代码的工具</a></li>
</ul>
<h4 id="08-部署工具"><a href="#08-部署工具" class="headerlink" title="08.部署工具"></a>08.部署工具</h4><ul>
<li><a href="https://pages.github.com/">Github Page  | Github提供的免费静态网站托管服务</a></li>
<li><a href="https://www.netlify.com/">Netlify  |  30秒内部署你的网站</a></li>
<li><a href="https://vercel.com/">Vercel  |  快速部署你的网站 国外很流行</a></li>
<li><a href="https://surge.sh/">Surge  |  一个命令部署你的网站</a></li>
<li><a href="https://www.heroku.com/">Heroku  |  运动构建 、 运行你的网站和应用</a></li>
</ul>
<h4 id="09-静态站点搭建"><a href="#09-静态站点搭建" class="headerlink" title="09.静态站点搭建"></a>09.静态站点搭建</h4><ul>
<li><a href="https://hexo.io/zh-cn/">Hexo  |  最流行的静态博客程序 Markdown编写 生成静态站点</a></li>
<li><a href="https://www.vuepress.cn/">VuePress  |  Vue驱动的静态网站生成器</a></li>
<li><a href="https://www.gitbook.com/">GitBook  | 现代化的文档平台，支持团队协作</a></li>
</ul>
<h4 id="10-前端代码规范"><a href="#10-前端代码规范" class="headerlink" title="10.前端代码规范"></a>10.前端代码规范</h4><ul>
<li><a href="https://tgideas.qq.com/doc/index.html">Tgideas | 腾讯前端代码规范 值得参考</a></li>
<li><a href="https://guide.aotu.io/index.html">京东  |  京东前端代码规范文档 分类详细</a></li>
<li><a href="https://codeguide.bootcss.com/">Bootstrap编码规范  |  适合个人和小团队使用的代码规范 不复杂</a></li>
<li><a href="https://es6.ruanyifeng.com/#docs/style">ES6 编程风格  | 阮一峰编写的ES6代码规范  值得每个人阅读并参考</a></li>
<li><a href="https://github.com/airbnb/javascript">Airbnb  前端代码规范  |  国外企业的前端代码规范</a></li>
<li><a href="https://eslint.org/">ESLint  |  代码规范检查和格式化工具</a></li>
<li><a href="https://prettier.io/">Prettier  | VSCode 最热门的代码格式化工具  让你写出漂亮的代码</a></li>
</ul>
<h4 id="11-调试抓包"><a href="#11-调试抓包" class="headerlink" title="11.调试抓包"></a>11.调试抓包</h4><ul>
<li><a href="https://wproxy.org/whistle/">Whistle  |  代理抓包工具  我一直在用的工具 很好很强大</a></li>
<li><a href="https://www.telerik.com/fiddler">Fiddler  |  使用人数最多的抓包工具</a></li>
</ul>
<h4 id="12-在线工具"><a href="#12-在线工具" class="headerlink" title="12.在线工具"></a>12.在线工具</h4><ul>
<li><a href="https://codepen.io/">CodePen  |  前端在线测试和演示工具  国外站点</a></li>
<li><a href="https://caniuse.com/">Can  I  use |  Web前端兼容性列表</a></li>
<li><a href="https://tinypng.com/">TinyPNG  |  PNG/JPG 图片在线压缩工具</a></li>
<li><a href="https://www.umeng.com/">CNZZ |  老牌站点统计工具  5年前国内站长必上网站</a></li>
<li><a href="https://web.dev/measure/">web.dev  |  评测网站性能  基于Lighthouse</a></li>
<li><a href="https://www.shapedivider.app/">Shape Divider  | 定制各种形状SVG的工具</a></li>
<li><a href="https://gtmetrix.com/">GTmetrix  |  网页性能在线分析工具</a></li>
<li><a href="https://carbon.now.sh/">Carbon  |  代码转图片工具  </a></li>
<li><a href="https://www.wappalyzer.com/">Wappalyzer  |  检测某个网站的技术栈  </a></li>
<li><a href="https://unbug.github.io/codelf">CODEIF | 变量方法起名工具  人工智能加持  </a></li>
<li><a href="https://tool.lu/"> tool.lu  |  程序员在线工具大全   </a></li>
</ul>
<h4 id="13-开发工具"><a href="#13-开发工具" class="headerlink" title="13.开发工具"></a>13.开发工具</h4><ul>
<li><a href="https://code.visualstudio.com/"> VSCode  |  前端最流行的编辑器   </a></li>
<li><a href="https://www.sublimetext.com/"> Sublime Text  |  轻量级代码编辑工具 曾经我的最爱   </a></li>
<li><a href="https://www.jetbrains.com/webstorm/"> WebStom |  忠爱粉最多的编辑器 </a></li>
<li><a href="https://atom.io/"> Atom  |   用的人很多  我却不喜欢的编辑器 </a></li>
<li><a href="https://www.typora.io/"> Typora |  程序人Mrakdown笔记  一直在用的笔记工具 </a></li>
</ul>
<h4 id="14-开发者大会"><a href="#14-开发者大会" class="headerlink" title="14.开发者大会"></a>14.开发者大会</h4><ul>
<li><a href="https://fequan.com/"> Vue.js开发者大会 |  前端人必须关注的前端大会 </a></li>
<li><a href="https://jsconfchina.com/"> 中国JS开发者大会  |  公司每年必组织参加的技术大会 </a></li>
<li><a href="https://css.w3ctech.com/"> CSS开发者大会 |  提高CSS技术的开发者大会  打开视野 面向世界 </a></li>
<li><a href="https://www.alibabaf2e.com/"> D2前端开发者大会 |  阿里组织的大会 可以看直播  </a></li>
</ul>
<h4 id="15-WEB图标"><a href="#15-WEB图标" class="headerlink" title="15.WEB图标"></a>15.WEB图标</h4><ul>
<li><a href="http://www.fontawesome.com.cn/"> Font Awesome  |  网站开发最流行的图标集  </a></li>
<li><a href="https://feathericons.com/"> Feather |  简洁美观的开源图标  </a></li>
<li><a href="https://material.io/resources/icons/"> Material  Design Icons  |  轻快、精美的符号图标  </a></li>
<li><a href="https://tablericons.com/"> Tabler Icons | 681枚可定制的开源SVG图标  </a></li>
<li><a href="https://simpleicons.org/"> 常见品牌的SVG图标  </a></li>
</ul>
<h1 id="B站学习资源整合"><a href="#B站学习资源整合" class="headerlink" title="B站学习资源整合"></a>B站学习资源整合</h1><h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><p>（Internet）</p>
<ul>
<li><ol>
<li>网络工作原理</li>
</ol>
</li>
<li>计算机网络原理：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></li>
<li><ol>
<li>什么是HTTP</li>
</ol>
</li>
<li>HTTP协议详解：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></li>
<li><ol>
<li>浏览器及工作方式</li>
</ol>
</li>
<li>浏览器是如何运作的？：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a></li>
<li><ol>
<li>DNS 及其工作原理</li>
</ol>
</li>
<li>DNS基本工作原理：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a></li>
<li>直观DNS科普：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></li>
<li><ol>
<li>域名相关知识</li>
</ol>
</li>
<li>域名解析完整讲解：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></li>
<li><ol>
<li>云服务相关知识</li>
</ol>
</li>
<li>揭秘阿里云服务器：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a></li>
</ul>
<h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>（HTML）</p>
<ul>
<li><ol>
<li>HTML基础知识学习</li>
</ol>
</li>
<li>HTML全套基础教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></li>
<li><ol>
<li>HTML 编写规则 和语义化写法</li>
</ol>
</li>
<li>HTML 速成：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></li>
<li><ol>
<li>表单和验证</li>
</ol>
</li>
<li>html5表单验证：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></li>
<li><ol>
<li>公约和最佳实践方法</li>
</ol>
</li>
<li>前端代码规范秘籍：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></li>
<li><ol>
<li>SEO 基础知识</li>
</ol>
</li>
<li>SEO优化学习教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a></li>
</ul>
<h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><p>（CSS)</p>
<ul>
<li><ol>
<li>CSS 基础知识学习</li>
</ol>
</li>
<li><p>CSS3基础教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a></p>
</li>
<li><p>CSS3全套教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></p>
</li>
<li><ol>
<li>页面切图和布局实现</li>
</ol>
</li>
<li><p>浮动布局</p>
</li>
<li><p>浮动布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></p>
</li>
<li><p>定位布局</p>
</li>
<li><p>CSS定位布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></p>
</li>
<li><p>Display</p>
</li>
<li><p>display&amp;visibility：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></p>
</li>
<li><p>盒子模型</p>
</li>
<li><p>CSS盒子模型与定位：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></p>
</li>
<li><p>Grid 布局</p>
</li>
<li><p>如何用grid：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></p>
</li>
<li><p>Flex 布局</p>
</li>
<li><p>Flex伸缩布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a></p>
</li>
<li><ol>
<li>页面响应式布局设计</li>
</ol>
</li>
<li><p>六个案例学会响应式布局：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a></p>
</li>
</ul>
<h2 id="浏览器脚本语言"><a href="#浏览器脚本语言" class="headerlink" title="浏览器脚本语言"></a>浏览器脚本语言</h2><p>(JavaScript)</p>
<ul>
<li><ol>
<li>JavaScript基础语法和知识</li>
</ol>
</li>
<li>JavaScript基础语法：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li>
<li><ol>
<li>使用JavaScript 操作 DOM元素</li>
</ol>
</li>
<li>JS必会的DOM BOM操作：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></li>
<li><ol>
<li>Ajax 异步请求相关知识学习</li>
</ol>
</li>
<li>Ajax入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li>
<li><ol>
<li>ES6 以上版本 的JavaScript</li>
</ol>
</li>
<li>ES6-ES11新特性：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></li>
</ul>
<h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2><p>Version Control System</p>
<ul>
<li><ol>
<li>Git的基本用法</li>
</ol>
</li>
<li><p>Git最新教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></p>
</li>
<li><ol>
<li>相关平台/软件的使用</li>
</ol>
</li>
<li><p>GitHub</p>
</li>
<li><p>十分钟学会Github：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></p>
</li>
<li><p>GitLab</p>
</li>
<li><p>gitlab使用说明：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></p>
</li>
<li><p>Gitee</p>
</li>
<li><p>这个看中文网址就可以了，目前B站还没有很好的视频介绍</p>
</li>
</ul>
<h2 id="网络安全相关知识"><a href="#网络安全相关知识" class="headerlink" title="网络安全相关知识"></a>网络安全相关知识</h2><p>Web Security Knowledge</p>
<ul>
<li><ol>
<li>HTTPS 原理和使用</li>
</ol>
</li>
<li>你连HTTPS原理都不懂：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></li>
<li><ol>
<li>CORS 跨域请求和安全知识</li>
</ol>
</li>
<li>什么是CORS：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></li>
<li><ol>
<li>内容安全策略</li>
</ol>
</li>
<li>网络渗透：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></li>
<li><ol>
<li>OWASP 安全风险知识</li>
</ol>
</li>
<li>OWASP TOP10：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a></li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>Package Managers</p>
<ul>
<li><ol>
<li>npm</li>
</ol>
</li>
<li>包管理工具：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li>
<li><ol>
<li>yarn</li>
</ol>
</li>
<li>Yarn入门：<a href="https://gitee.com/link?target=https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a> (B站没有，推荐这个免费)</li>
</ul>
<h2 id="CSS-预处理-语言"><a href="#CSS-预处理-语言" class="headerlink" title="CSS 预处理 语言"></a>CSS 预处理 语言</h2><p>CSS Preprocessors</p>
<ul>
<li><ol>
<li>Sass</li>
</ol>
</li>
<li>SCSS从入门到实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></li>
<li><ol>
<li>PostCSS</li>
</ol>
</li>
<li>B站没太好的视频，建议买书《深入PostCSS Web设计》</li>
<li><ol>
<li>Less</li>
</ol>
</li>
<li>前端less教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a></li>
</ul>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>Build Tools</p>
<ul>
<li><ol>
<li>任务执行命令 [Task Runners]</li>
</ol>
</li>
<li><p>npm scripts</p>
</li>
<li><p>npm包管理应用：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></p>
</li>
<li><p>Gulp</p>
</li>
<li><p>Gulp入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a></p>
</li>
<li><ol>
<li>打包工具</li>
</ol>
</li>
<li><p>Webpack</p>
</li>
<li><p>Webpack从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></p>
</li>
<li><p>Parcel</p>
</li>
<li><p>Parcel初体验：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a></p>
</li>
<li><ol>
<li>代码格式化工具</li>
</ol>
</li>
<li><p>Prettier</p>
</li>
<li><p>Prettier和ESLint使用：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></p>
</li>
<li><p>ESLint</p>
</li>
<li><p>ESLint基础入门：<a href="https://gitee.com/link?target=https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a></p>
</li>
</ul>
<h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2><p>Web Framework</p>
<ul>
<li>React.js</li>
<li>React基础视频：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a></li>
<li>React全家桶：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></li>
<li>React实战博客：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a></li>
<li>React商城实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a></li>
<li>Vue.js</li>
<li>Vue2全家桶：<a href="https://gitee.com/link?target=https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a></li>
<li>Vue3全家桶：<a href="https://gitee.com/link?target=https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a></li>
<li>vuejs从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a></li>
<li>Angular</li>
<li>Angular基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a></li>
</ul>
<h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2><p>Web Components</p>
<ul>
<li>HTML Templates</li>
<li>Custom Elements</li>
<li>Shadow DOM</li>
<li>概要: 此部分内容没有找到合适视频</li>
</ul>
<h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2><p>CSS Frameworks</p>
<ul>
<li>BootStrap</li>
<li>一周学会BootStrap：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a></li>
<li>Material UI</li>
<li>Material UI入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a></li>
<li>Materialize CSS</li>
<li>Materialize CSS Crash Course：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a></li>
<li>ReactStrap</li>
</ul>
<h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2><p>Type Checkers</p>
<ul>
<li>TypeScript</li>
<li>TypeScript从入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a></li>
<li>Flow</li>
</ul>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>Server Side Rendering （SSR）</p>
<ul>
<li><p>React.js</p>
</li>
<li><p>Next.js</p>
</li>
<li><p>Next.js入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></p>
</li>
<li><p>GatsbyJS</p>
</li>
<li><p>GatsbyJS 实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</p>
</li>
<li><p>Vue.js</p>
</li>
<li><p>Nuxt.js</p>
</li>
<li><p>Nuxt.js入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></p>
</li>
<li><p>Angular</p>
</li>
<li><p>Universal</p>
</li>
</ul>
<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2><p>GraphQL</p>
<ul>
<li>Cocos Creator</li>
<li>Cocos 图形游戏开发：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a></li>
<li>Three.js</li>
<li>Three.js基础教程-英文：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a></li>
<li>Three.js教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a></li>
</ul>
<h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2><p>Static Site Generators</p>
<ul>
<li>Next.js</li>
<li>Next.js入门教程：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li>
<li>GatsbyJS</li>
<li>GatsbyJS 实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</li>
<li>Nuxt.js</li>
<li>Nuxt.js入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></li>
<li>Vuepress</li>
<li>Vuepress入门到精通：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a></li>
<li>Hugo</li>
<li>10分钟搭建个人网站：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a></li>
</ul>
<h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2><p>Mobile Applications</p>
<ul>
<li>React Native</li>
<li>ReactNatvie基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a></li>
<li>ReactNatvie实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a></li>
<li>UniApp</li>
<li>Uni-App从入门到实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a></li>
<li>Uni-App美团外卖：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a></li>
<li>Flutter</li>
<li>Flutter基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a></li>
<li>Flutter实战：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a></li>
<li>Ionic</li>
<li>Ionic入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a></li>
</ul>
<h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2><p>Desktop Applications</p>
<ul>
<li>Electron</li>
<li>Electron入门：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a></li>
<li>Electron基础：<a href="https://gitee.com/link?target=https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器个人博客</title>
    <url>/2022/08/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="使用宝塔和wordpress搭建个人博客"><a href="#使用宝塔和wordpress搭建个人博客" class="headerlink" title="使用宝塔和wordpress搭建个人博客"></a>使用宝塔和wordpress搭建个人博客</h2><h3 id="1-宝塔的安装"><a href="#1-宝塔的安装" class="headerlink" title="1.宝塔的安装"></a>1.宝塔的安装</h3><h4 id="1-1安装方式"><a href="#1-1安装方式" class="headerlink" title="1.1安装方式"></a>1.1安装方式</h4><ol>
<li><a href="https://www.code-nav.cn/">编程导航</a> 搜”宝塔“</li>
<li>选择”<strong>Linux面板</strong>“（<a href="https://www.bt.cn/new/download.html">选择安装</a> ）</li>
<li>选“安装脚本”</li>
<li>复制 “<strong>Centos安装脚本</strong>” 的代码</li>
<li>粘贴命令，直接安装【在git上登录服务器，切换到opt目录（cd /opt）】</li>
<li>把面板地址和用户名密码记住</li>
</ol>
<h4 id="1-2-8888端口不可以访问-要做以下两个配置"><a href="#1-2-8888端口不可以访问-要做以下两个配置" class="headerlink" title="1.2 8888端口不可以访问-要做以下两个配置"></a>1.2 8888端口不可以访问-要做以下两个配置</h4><ol>
<li><h5 id="在腾讯云控制台，配置安全组"><a href="#在腾讯云控制台，配置安全组" class="headerlink" title="在腾讯云控制台，配置安全组"></a>在腾讯云控制台，配置安全组</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image.png" alt="配置安全组"></p>
</li>
<li><h5 id="在腾讯云控制台，配置防火墙"><a href="#在腾讯云控制台，配置防火墙" class="headerlink" title="在腾讯云控制台，配置防火墙"></a>在腾讯云控制台，配置防火墙</h5><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image2.png" alt="配置防火墙"></p>
</li>
</ol>
<h3 id="2-登录面板地址后"><a href="#2-登录面板地址后" class="headerlink" title="2.登录面板地址后"></a>2.登录面板地址后</h3><h4 id="2-1注册宝塔账号"><a href="#2-1注册宝塔账号" class="headerlink" title="2.1注册宝塔账号"></a>2.1注册宝塔账号</h4><h4 id="2-2安装推荐套件（使用默认推荐即可）"><a href="#2-2安装推荐套件（使用默认推荐即可）" class="headerlink" title="2.2安装推荐套件（使用默认推荐即可）"></a>2.2安装推荐套件（使用默认推荐即可）</h4><p><code>备注：安装LNMP(推荐)</code></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image3.png" alt="配置防火墙"></p>
<h3 id="3-网站-添加站点"><a href="#3-网站-添加站点" class="headerlink" title="3.网站-添加站点"></a>3.网站-添加站点</h3><h3 id="4-WordPress安装"><a href="#4-WordPress安装" class="headerlink" title="4. WordPress安装"></a>4. WordPress安装</h3><p><code>备注：1.先把刚建的站点删除，以免冲突； </code></p>
<p>4.1<a href="https://wordpress.org/download/">wordpress官网</a>下载安装包（ .tar.gz格式的）</p>
<p>4.2将 .tar.gz文件上传到站点根目录</p>
<p>4.3鼠标放上 .tar.gz文件，选择“解压”</p>
<p>4.4进入解压后的文件夹，将里面的文件全部复制到站点根目录</p>
<p>4.5安装包和解压后的文件夹可以删掉了</p>
<p><a href="https://blog.csdn.net/qq_33468857/article/details/124652515">宝塔wordpress安装及使用（宝塔wordpress建站教程）</a></p>
<p><a href="https://blog.csdn.net/JunyouYH/article/details/123448276">宝塔面板安装wordpress详细教程</a></p>
<h4 id="添加子域名"><a href="#添加子域名" class="headerlink" title="添加子域名"></a>添加子域名</h4><p>在阿里云-控制台-域名解析-解析设置，添加记录值</p>
<p><code>注：需要等10分钟，才生效</code></p>
<h4 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a><a href="https://vuepress.vuejs.org/zh/">VuePress</a></h4><p><a href="https://github.com/vuejs/vuepress/tree/master/packages/%40vuepress/core">极简静态网站生成器</a></p>
<p>可以直接 云开发</p>
<p><a href="https://github.com/Tencent/cloudbase-framework?site=vuepress#%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B">https://github.com/Tencent/cloudbase-framework?site=vuepress#%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B</a></p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>深入解读ES6系列(全18讲)</title>
    <url>/2021/01/13/%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BBES6%E7%B3%BB%E5%88%97-%E5%85%A818%E8%AE%B2/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1xW411x7sw?from=search&seid=5749967641596037277">教程地址</a></p>
<h2 id="1-ES6怎么来的"><a href="#1-ES6怎么来的" class="headerlink" title="1. ES6怎么来的"></a>1. ES6怎么来的</h2><ul>
<li><p>ECMAScript 和 JavaScript</p>
<ul>
<li>ECMA 是标准，JS 是实现</li>
<li>ECMAScript 简称 ECMA 或 ES</li>
</ul>
</li>
<li><p>历史版本</p>
<ul>
<li>1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现</li>
<li>1999, ES3.0 被广泛支持</li>
<li>2011, ES5.1 成为 ISO 国际标准</li>
<li>2015, ES6.0 正式发布</li>
</ul>
</li>
</ul>
<h2 id="2-ES6兼容性"><a href="#2-ES6兼容性" class="headerlink" title="2. ES6兼容性"></a>2. ES6兼容性</h2><ul>
<li><p>ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS</p>
</li>
<li><p>解决不兼容办法，编译、转换</p>
<ul>
<li>在线转换</li>
<li>或者提前编译</li>
</ul>
</li>
<li><p><a href="https://www.babeljs.cn/">Babel 中文网</a></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel 入门教程 阮一峰</a></li>
<li>Babel 是一个 JavaScript 编译器</li>
<li>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</li>
<li>现在就用 ES6 编写程序，而不用担心现有环境是否支持</li>
</ul>
</li>
</ul>
<h3 id="3-ES6精髓"><a href="#3-ES6精髓" class="headerlink" title="3. ES6精髓"></a>3. ES6精髓</h3><ol>
<li>变量</li>
<li>函数</li>
<li>数组</li>
<li>字符串</li>
<li>面向对象</li>
<li>Promise</li>
<li>generator</li>
<li>模块化</li>
</ol>
<h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4.  变量"></a>4.  变量</h3><ul>
<li><p>var 的问题</p>
<ul>
<li>可以重复声明，没有报错和警告</li>
<li>无法限制修改</li>
<li>没有块级作用域， <code>&#123; &#125;</code> </li>
</ul>
</li>
<li><p>let 和 const</p>
<ul>
<li>不能重复声明</li>
<li>都是块级作用域, <code>&#123; &#125;</code> 块内声明的，块外无效</li>
<li>let 是变量，可以修改</li>
<li>const 是常量，不能修改</li>
</ul>
</li>
<li><p>块级作用域举例</p>
<ul>
<li>原来用 var 的方式，结果弹出的都是 3</li>
<li>或者将变量 封装到函数里，限制作用域，但比较麻烦</li>
<li>用 let 最简单，直接 var 改 let，解决作用域问题</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span>= <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var aBtn = document.getElementsByTagName(&#x27;input&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            for (var i=0; i &lt; aBtn.length; i++) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                aBtn[i].onclick = function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    alert(i)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> aBtn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aBtn.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                aBtn[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(i)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            var aBtn = document.getElementsByTagName(&#x27;input&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            for (var i = 0; i &lt; aBtn.length; i++) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // 封装到函数里，限制作用域</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                (function (i) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    aBtn[i].onclick = function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                        alert(i)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;)(i)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;*/</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-函数-箭头函数"><a href="#4-函数-箭头函数" class="headerlink" title="4.函数-箭头函数"></a>4.函数-箭头函数</h2><ul>
<li>箭头函数，就是函数的简写<ul>
<li>如果只有一个参数，<code>()</code> 可以省</li>
<li>如果只有一个<code>return</code>，<code>&#123;&#125;</code>可以省</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数，去掉 function， 加上 =&gt;</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> show1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">show2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">show1</span>() <span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">show2</span>()</span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">99</span>, <span class="number">33</span>, <span class="number">14</span>, <span class="number">26</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1-n2;</span><br><span class="line">&#125;)</span><br><span class="line">箭头函数：</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">n1,n2</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> n1-n2;</span><br><span class="line">&#125;)</span><br><span class="line">简写：省去<span class="keyword">return</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">n1,n2</span>) =&gt;</span> n1-n2)</span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> show4 = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">简写：</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">show5</span> = a =&gt; a * <span class="number">2</span>  <span class="comment">//简洁，类似python lambda 函数</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">show4</span>(<span class="number">10</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">show5</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h2 id="5-函数-参数"><a href="#5-函数-参数" class="headerlink" title="5.函数-参数"></a>5.函数-参数</h2><ul>
<li>参数扩展／展开 <code>...args</code><ul>
<li>收集剩余的参数，必须当到最后一个参数位置</li>
<li>展开数组，简写，效果和直接把数组的内容写在这儿一样</li>
</ul>
</li>
<li>默认参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">a, b, ...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">show</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">a,b,c</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">    <span class="title function_">alert</span>(b);</span><br><span class="line">    <span class="title function_">alert</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);    <span class="comment">//1——&gt;2——&gt;3</span></span><br><span class="line"><span class="title function_">show</span>(...arr1);	<span class="comment">//1——&gt;2——&gt;3</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">默认参数：没有传值的时候，使用默认参数</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show2</span>(<span class="params">a, b=<span class="number">5</span>, c=<span class="number">8</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show2</span>(<span class="number">88</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6.解构赋值"></a>6.解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [json, arr, num, str] = [&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">8</span>, <span class="string">&#x27;str&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json, arr, num, str)</span><br></pre></td></tr></table></figure>

<ul>
<li>解构赋值<ul>
<li>左右两个边结构必须一样</li>
<li>右边必须是个东西</li>
<li>声明和赋值赋值不能分开，必须在一句话里<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">声明和赋值不能分开的意思：</span><br><span class="line">这样写，会报错：</span><br><span class="line">let [a, b];</span><br><span class="line">[a, b] = [12, 5];</span><br><span class="line"></span><br><span class="line">要写在一起：</span><br><span class="line">let [a, b] = [12, 5];</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a>7.数组</h2><ul>
<li>新增4个方法（map,  reduce,  filter, forEach)</li>
<li>map 映射  一个对一个</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> result2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item*<span class="number">2</span>) <span class="comment">// 简写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">18</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">24</span>]</span><br><span class="line"><span class="keyword">let</span> result3 = score.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">60</span> ? <span class="string">&#x27;及格&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="number">24</span>, <span class="number">10</span>, <span class="number">16</span> ]</span><br><span class="line">[ <span class="string">&#x27;不及格&#x27;</span>, <span class="string">&#x27;及格&#x27;</span>, <span class="string">&#x27;及格&#x27;</span>, <span class="string">&#x27;不及格&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce 汇总  一堆出来一个<ul>
<li>用于比如，算个总数，算个平均</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">tmp, item, index</span>) &#123;</span><br><span class="line">    <span class="comment">//tmp 上次结果，item当前数，index次数1开始</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp, item, index)</span><br><span class="line">    <span class="keyword">return</span> tmp + item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">tmp, item, index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index != arr.<span class="property">length</span> - <span class="number">1</span>) &#123; <span class="comment">// 不是最后一次</span></span><br><span class="line">        <span class="keyword">return</span> tmp + item</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tmp + item)/arr.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// 平均值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>filter 过滤器 保留为true的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> (item % <span class="number">3</span> === <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&#x27;西瓜&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">json</span> =&gt;</span> json.<span class="property">price</span> &gt;= <span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach 循环迭代</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(item, index))</span><br></pre></td></tr></table></figure>

<h2 id="8-字符串"><a href="#8-字符串" class="headerlink" title="8.字符串"></a>8.字符串</h2><ul>
<li><strong>多了两个新方法</strong><ul>
<li><code>startsWith</code></li>
<li><code>endsWith</code></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var url = &#x27;http://qq.com&#x27;</span><br><span class="line">console.log(url.startsWith(&#x27;http&#x27;))</span><br><span class="line">console.log(url.endsWith(&#x27;com&#x27;))</span><br><span class="line">// 都是 true</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串模版</strong><ul>
<li>使用反单引号，<code>$&#123;变量&#125;</code></li>
<li>可以折行</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 12</span><br><span class="line">let str1 = `asdf$&#123;a&#125;`</span><br><span class="line">console.log(str1)</span><br><span class="line"></span><br><span class="line">let title = &#x27;标题&#x27;</span><br><span class="line">let content = &#x27;内容&#x27;</span><br><span class="line">let str = `&lt;div&gt;</span><br><span class="line">&lt;h1&gt;$&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;$&#123;content&#125;&lt;/p&gt;</span><br><span class="line">`</span><br><span class="line">console.log(str)</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;内容&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-面向对象-基础"><a href="#9-面向对象-基础" class="headerlink" title="9.面向对象-基础"></a>9.面向对象-基础</h2><ul>
<li>原来写法<ul>
<li>类和构造函数一样</li>
<li>属性和方法分开写的</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 老版本</span><br><span class="line">function User(name, pass) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">    this.pass = pass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User.prototype.showName = function () &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.showPass = function () &#123;</span><br><span class="line">    console.log(this.pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var u1 = new User(&#x27;able&#x27;, &#x27;1233&#x27;)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line">// 老版本继承</span><br><span class="line">function VipUser(name, pass, level) &#123;</span><br><span class="line">    User.call(this, name, pass)</span><br><span class="line">    this.level = level</span><br><span class="line">&#125;</span><br><span class="line">VipUser.prototype = new User()</span><br><span class="line">VipUser.prototype.constructor = VipUser</span><br><span class="line">VipUser.prototype.showLevel = function () &#123;</span><br><span class="line">    console.log(this.level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var v1 = new VipUser(&#x27;blue&#x27;, &#x27;1234&#x27;, 3)</span><br><span class="line">v1.showName()</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure>

<ul>
<li>新版面向对象<ul>
<li>有了 class 关键字、构造器和类分开了</li>
<li>class 里面直接加方法</li>
<li>重点是继承，super 超类==父类</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    constructor(name, pass) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.pass = pass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showName() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">    showPass() &#123;</span><br><span class="line">        console.log(this.pass)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var u1 = new User(&#x27;able2&#x27;, &#x27;111&#x27;)</span><br><span class="line">u1.showName()</span><br><span class="line">u1.showPass()</span><br><span class="line"></span><br><span class="line">// 新版本继承</span><br><span class="line">class VipUser extends User &#123;</span><br><span class="line">    constructor(name, pass, level) &#123;</span><br><span class="line">        super(name, pass)</span><br><span class="line">        this.level = level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel()&#123;</span><br><span class="line">        console.log(this.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var v1 = new VipUser(&#x27;blue&#x27;, &#x27;123&#x27;, 3)</span><br><span class="line">v1.showLevel()</span><br></pre></td></tr></table></figure>

<h2 id="10-面向对象应用"><a href="#10-面向对象应用" class="headerlink" title="10.面向对象应用"></a>10.面向对象应用</h2><ul>
<li>React<ul>
<li>用于构建用户界面的 JavaScript 库</li>
<li>组件化，一个组件就是一个 class</li>
<li>JSX == babel == browser.js</li>
<li>JSX (js扩展版)</li>
</ul>
</li>
</ul>
<p>使用的时候，引入react.js，react-dom.js，browser.js。</p>
<figure class="highlight plaintext"><figcaption><span>></span></figcaption><table><tr><td class="code"><pre><span class="line">注意type写babel</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-json"><a href="#11-json" class="headerlink" title="11.json"></a>11.json</h2><ul>
<li>JSON 格式<ul>
<li>JavaScript Object Notation 的缩写，是一种用于数据交换的文本格式</li>
<li>JSON 是 JS对象 的严格子集</li>
<li>JSON 的标准写法</li>
<li>只能用双引号</li>
<li>所有的key都必须用双引号包起来</li>
</ul>
</li>
<li>JSON 对象<ul>
<li>JSON 对象是 JavaScript 的原生对象，用来处理 JSON 格式数据，有两个静态方法</li>
<li>JSON.parse(string) ：接受一个 <strong>JSON 字符串</strong>并将其转换成一个  <strong>JavaScript对象</strong>。</li>
<li>JSON.stringify(obj) ：接受一个 <strong>JavaScript对象</strong> 并将其转换为一个 <strong>JSON 字符串</strong>。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var json = &#123;a: 12, b: 5&#125;</span><br><span class="line">var str = &#x27;hi,&#x27; + JSON.stringify(json)</span><br><span class="line">var url = &#x27;http://www.xx.com/&#x27; + encodeURIComponent(JSON.stringify(json))</span><br><span class="line">console.log(str)</span><br><span class="line">console.log(url)</span><br><span class="line"></span><br><span class="line">var str0 = &#x27;&#123;a: 12, b: 4, c: &quot;abc&quot;&#125;&#x27;</span><br><span class="line">var json = JSON.parse(str0)——》这样会报错</span><br><span class="line"></span><br><span class="line">json的标准写法：</span><br><span class="line">1、只能用双引号</span><br><span class="line">2、所有的属性都必须要用引号包起来</span><br><span class="line">&#123;a:12, b:5&#125; ×</span><br><span class="line">&#123;&quot;a&quot;:12, &quot;b&quot;:5&#125;√</span><br><span class="line"></span><br><span class="line">&#123;a:&#x27;abc&#x27;, b:5&#125; ×</span><br><span class="line">&#123;&quot;a&quot;:&quot;abc&quot;, &quot;b&quot;:5&#125;√</span><br><span class="line"></span><br><span class="line">var str = &#x27;&#123;&quot;a&quot;: 12, &quot;b&quot;: 4, &quot;c&quot;: &quot;abc&quot;&#125;&#x27;</span><br><span class="line">var json = JSON.parse(str)</span><br><span class="line">console.log(json)</span><br><span class="line">hi,&#123;&quot;a&quot;:12,&quot;b&quot;:5&#125;</span><br><span class="line">http://www.xx.com/%7B%22a%22%3A12%2C%22b%22%3A5%7D</span><br><span class="line">&#123; a: 12, b: 4, c: &#x27;abc&#x27; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对象（object）<ul>
<li>是 JavaScript 语言的核心概念，也是最重要的数据类型</li>
<li>对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合</li>
<li>对象的所有键名都是字符串, 所以加不加引号都可以</li>
<li>如果键名是数值，会被自动转为字符串</li>
<li>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型</li>
<li>如果一个属性的值为函数，通常把这个属性称为“方法”，它可以像函数那样调用</li>
<li>in 运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值</li>
<li>for…in循环用来遍历一个对象的全部属性</li>
</ul>
</li>
<li>对象 简写<ul>
<li>key-value 一样时可以简写</li>
<li>里面函数可以简写, 去掉</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 12, b = 5</span><br><span class="line">console.log(&#123;a:a, b:b&#125;)</span><br><span class="line">console.log(&#123;a, b&#125;)</span><br><span class="line">console.log(&#123;a, b, c:&quot;c&quot;&#125;)</span><br><span class="line">console.log(&#123; a, b, show()&#123; console.log(&#x27;a&#x27;) &#125;&#125;)</span><br><span class="line">&#123; a: 12, b: 5 &#125;</span><br><span class="line">&#123; a: 12, b: 5 &#125;</span><br><span class="line">&#123; a: 12, b: 5, c: &#x27;c&#x27; &#125;</span><br><span class="line">&#123; a: 12, b: 5, show: [Function: show] &#125;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">let a = 12; let b = 5;</span><br><span class="line">let json = &#123;a: a, b: b&#125;;</span><br><span class="line">key-value 一样时可以简写:</span><br><span class="line">let json = &#123;a, b&#125;;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">方法: function 一块删</span><br><span class="line">show:function() &#123;....&#125;</span><br><span class="line">show() &#123;.....&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12.Promise"></a>12.Promise</h2><p>(消除异步操作)</p>
<ul>
<li>异步和同步<ul>
<li>异步，操作之间没有关系，同时执行多个操作， 代码复杂</li>
<li>同步，同时只能做一件事，代码简单</li>
</ul>
</li>
<li>Promise 对象<ul>
<li>用同步的方式来书写异步代码</li>
<li>Promise 让异步操作写起来，像在写同步操作的流程，不必一层层地嵌套回调函数</li>
<li>改善了可读性，对于多层嵌套的回调函数很方便</li>
<li>充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口</li>
</ul>
</li>
<li>Promise 也是一个构造函数<ul>
<li>接受一个回调函数f1作为参数，f1里面是异步操作的代码</li>
<li>返回的p1就是一个 Promise 实例</li>
<li>所有异步任务都返回一个 Promise 实例</li>
<li>Promise 实例有一个then方法，用来指定下一步的回调函数</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let p = new Promise(function (resolve, reject)) &#123;</span><br><span class="line">	//异步代码</span><br><span class="line">	//resolve——成功了</span><br><span class="line">	//reject——失败了</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">function f1(resolve, reject) &#123;</span><br><span class="line">  // 异步代码...</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Promise(f1);</span><br><span class="line">p1.then(f2); // f1的异步操作执行完成，就会执行f2。</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise 使得异步流程可以写成同步流程</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 传统写法</span><br><span class="line">step1(function (value1) &#123;</span><br><span class="line">  step2(value1, function(value2) &#123;</span><br><span class="line">    step3(value2, function(value3) &#123;</span><br><span class="line">      step4(value3, function(value4) &#123;</span><br><span class="line">        // ...</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Promise 的写法</span><br><span class="line">(new Promise(step1))</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4);</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.all(promiseArray)方法<ul>
<li>将多个Promise对象实例包装，生成并返回一个新的Promise实例</li>
<li>promise数组中所有的promise实例都变为resolve的时候，该方法才会返回</li>
<li>并将所有结果传递results数组中</li>
<li>promise数组中任何一个promise为reject的话，则整个Promise.all调用会立即终止，并返回一个reject的新的promise对象</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p1 = Promise.resolve(1),</span><br><span class="line">    p2 = Promise.resolve(2),</span><br><span class="line">    p3 = Promise.resolve(3);</span><br><span class="line">Promise.all([p1, p2, p3]).then(function (results) &#123;</span><br><span class="line">    console.log(results);  // [1, 2, 3]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Promise.all(&#123;</span><br><span class="line">	p1,p2</span><br><span class="line">&#125;).then(function () &#123;</span><br><span class="line">	alert(&quot;全都成功了&quot;);</span><br><span class="line">&#125;, function () &#123;</span><br><span class="line">	alert(&quot;至少有一个失败了&quot;);</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function createPromise(url) &#123;</span><br><span class="line">	return new Promise(function (resolve, reject)) &#123;</span><br><span class="line">        //异步代码</span><br><span class="line">        //resolve——成功了</span><br><span class="line">        //reject——失败了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Promise.all(&#123;</span><br><span class="line">	createPromise(&#x27;路径1&#x27;)</span><br><span class="line">	createPromise(&#x27;路径2&#x27;)</span><br><span class="line">&#125;).then(function (arr) &#123;</span><br><span class="line">	let[res1,res2] = arr;</span><br><span class="line">	</span><br><span class="line">	alert(&quot;全都成功了&quot;);</span><br><span class="line">	alert(res1);</span><br><span class="line">	alert(res2);</span><br><span class="line">&#125;, function () &#123;</span><br><span class="line">	alert(&quot;至少有一个失败了&quot;);</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.race([p1, p2, p3])<ul>
<li>Promse.race就是赛跑的意思</li>
<li>哪个结果获得的快，就返回那个结果</li>
<li>不管结果本身是成功状态还是失败状态</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/01/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="https://c.runoob.com/front-end/854/">正则表达式示例</a></p>
<p><a href="https://tool.chinaz.com/Tools/regexgenerate">常用正则表达式</a></p>
<p><a href="https://tool.chinaz.com/regex">正则测试</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/note1.png" alt="正则表达式-思维导图"></p>
<h4 id="最全的常用正则表达式大全-校验数字-字符-号码等"><a href="#最全的常用正则表达式大全-校验数字-字符-号码等" class="headerlink" title="最全的常用正则表达式大全(校验数字,字符,号码等)"></a><a href="https://www.cnblogs.com/yoyowin/p/12208917.html">最全的常用正则表达式大全(校验数字,字符,号码等)</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reg = /^[\u4e00-\u9fffa-zA-Z]&#123;1,15&#125;$/;</span><br><span class="line">if(!reg.test(value)) &#123;</span><br><span class="line">  callback(new Error(&#x27;请输入15个以内的字符&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="大于0的所有数，小数点后保留两位小数："><a href="#大于0的所有数，小数点后保留两位小数：" class="headerlink" title="大于0的所有数，小数点后保留两位小数："></a>大于0的所有数，小数点后保留两位小数：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^0\.([1-9]|\d[1-9])$|^[1-9]\d&#123;0,8&#125;\.\d&#123;0,2&#125;$|^[1-9]\d&#123;0,8&#125;$/</span><br></pre></td></tr></table></figure>

<h4 id="正整数-不包括0"><a href="#正整数-不包括0" class="headerlink" title="正整数(不包括0)"></a>正整数(不包括0)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^\+?[1-9][0-9]*$/</span><br></pre></td></tr></table></figure>

<h4 id="正整数-包括0"><a href="#正整数-包括0" class="headerlink" title="正整数(包括0)"></a>正整数(包括0)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^\d+$/</span><br></pre></td></tr></table></figure>

<h4 id="大于0的整数—使用这个"><a href="#大于0的整数—使用这个" class="headerlink" title="大于0的整数—使用这个"></a>大于0的整数—使用这个</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d*$/      // 表示所有大于等于1的整数(整数第一位不为0，后面的随意)</span><br></pre></td></tr></table></figure>



<h4 id="用户名、密码等15个常用的js正则表达式"><a href="#用户名、密码等15个常用的js正则表达式" class="headerlink" title="用户名、密码等15个常用的js正则表达式"></a><a href="https://blog.csdn.net/qq_41465646/article/details/108105076">用户名、密码等15个常用的js正则表达式</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 用户名正则，4到16位（字母，数字，下划线，减号）  </span><br><span class="line">var uPattern = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/;  </span><br><span class="line">//输出 true  </span><br><span class="line">console.log(uPattern.test(&quot;iFat3&quot;)); </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!/^[A-Za-z0-9@*_-\u4E00-\u9FA5]&#123;1,20&#125;$/.test(params.name)) &#123;</span><br><span class="line">    layer.msg(&#x27;姓名请输入20位字符以内的中英文或数字或@*_-&#x27;, &#123;time: 1000&#125;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>date（日期格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(\d&#123;4&#125;)[-\/](\d&#123;1&#125;|0\d&#123;1&#125;|1[0-2])([-\/](\d&#123;1&#125;|0\d&#123;1&#125;|[1-2][0-9]|3[0-1]))*$/</span><br></pre></td></tr></table></figure>

<p>email（邮箱格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span><br></pre></td></tr></table></figure>

<p>identity（请输入正确的身份证号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(x|X|\d)$)/</span><br></pre></td></tr></table></figure>

<p>phone（请输入正确的手机号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^1\d&#123;10&#125;$/</span><br></pre></td></tr></table></figure>

<p>required（必填项不能为空）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/[\S]+/</span><br></pre></td></tr></table></figure>

<p>url（链接格式不正确）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/(^#)|(^http(s*):\/\/[^\s]+\.[^\s]+)/</span><br></pre></td></tr></table></figure>

<p>请输入数字/小数点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>最多只能输入两位小数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>判断是否为数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(Number(money))</span><br></pre></td></tr></table></figure>

<p>只能输入百分比正则（数字+%）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>判断是否是非数字值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN()</span><br><span class="line"></span><br><span class="line">例如：isNaN(Number(money))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果参数值为 NaN 或字符串、对象、undefined等非数字值则返回 true, 否则返回 false。</p>
</blockquote>
<p>正浮点数正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(\d+)(\.\d+)?$/.test()</span><br><span class="line"></span><br><span class="line">例如：/^(\d+)(\.\d+)?$/.test(money)</span><br></pre></td></tr></table></figure>

<p>url正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&amp;=]*)?$/</span><br><span class="line"></span><br><span class="line">/^((ht|f)tps?):\/\/[\w\-]+(\.[\w\-]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?$/</span><br></pre></td></tr></table></figure>

<p>0-100的正整数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:0|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>

<p>数字/小大写字母/（30个字以内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9]&#123;1,30&#125;$/</span><br></pre></td></tr></table></figure>

<p>只能输入汉字（30个字以内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[\u4e00-\u9fa5]&#123;1,30&#125;$/</span><br></pre></td></tr></table></figure>

<p>2-6位汉字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[\u4E00-\u9FA5]&#123;2,6&#125;$/</span><br></pre></td></tr></table></figure>

<p>不能输入汉字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[^\u4e00-\u9fa5]&#123;0,&#125;$/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文字符：[\u4e00-\u9fa5]</span><br><span class="line">双字节字符：[^\x00-\xff]</span><br><span class="line">空白行：\s</span><br><span class="line">Email地址：\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]&#123;2,14&#125;</span><br><span class="line">网址URL：^((https|http|ftp|rtsp|mms)?:\/\/)[^\s]+</span><br><span class="line">手机（国内）：0?(13|14|15|17|18|19)[0-9]&#123;9&#125;</span><br><span class="line">电话号码（国内）：[0-9-()（）]&#123;7,18&#125;</span><br><span class="line">负浮点数：-([1-9]\d*.\d*|0.\d*[1-9]\d*)</span><br><span class="line">匹配整数：-?[1-9]\d*</span><br><span class="line">正浮点数：[1-9]\d*.\d*|0.\d*[1-9]\d*</span><br><span class="line">腾讯QQ号：[1-9]([0-9]&#123;5,11&#125;)</span><br><span class="line">邮政编码：\d&#123;6&#125;</span><br><span class="line">IP：(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)</span><br><span class="line">身份证号：\d&#123;17&#125;[\d|x]|\d&#123;15&#125;</span><br><span class="line">格式日期：\d&#123;4&#125;(\-|\/|.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;</span><br><span class="line">正整数：[1-9]\d*</span><br><span class="line">负整数：-[1-9]\d*</span><br><span class="line">用户名：[A-Za-z0-9_\-\u4e00-\u9fa5]+</span><br></pre></td></tr></table></figure>

<p>JavaScript代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var pattern = /[\u4e00-\u9fa5]/,</span><br><span class="line">	str = &#x27;&#x27;;</span><br><span class="line">console.log(pattern.test(str));</span><br></pre></td></tr></table></figure>

<p>用户名—3-12位字符（大小写字母或数字）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9_]&#123;3,12&#125;$/</span><br></pre></td></tr></table></figure>

<p>用户密码—6-16位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[A-Za-z0-9!@#$%^&amp;*()&lt;&gt;,.?-_+=`~]&#123;6,16&#125;$/</span><br></pre></td></tr></table></figure>

<p>昵称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[a-zA-Z\u4e00-\u9fa5]&#123;1,10&#125;$/</span><br></pre></td></tr></table></figure>

<p>身份证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;5&#125;(19|20)\d&#123;2&#125;[01]\d[0123]\d\d&#123;3&#125;[xX\d]$/</span><br></pre></td></tr></table></figure>

<p>身份证号码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/</span><br></pre></td></tr></table></figure>

<p>匹配0到100之间的正整数的正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:0|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>

<p>匹配1到100之间的正整数的正则表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^(?:1|[1-9][0-9]?|100)$/</span><br></pre></td></tr></table></figure>



<h4 id="regular-config-js"><a href="#regular-config-js" class="headerlink" title="regular.config.js"></a><code>regular.config.js</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const regExpConfig = &#123;</span><br><span class="line">IDcard: /^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/, // 身份证</span><br><span class="line">mobile: /^1([3|4|5|7|8|])\d&#123;9&#125;$/, // 手机号码</span><br><span class="line">telephone: /^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;$/, // 固定电话</span><br><span class="line">num: /^[0-9]*$/, // 数字</span><br><span class="line">phoneNo: /(^1([3|4|5|7|8|])\d&#123;9&#125;$)|(^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;$)/, // 电话或者手机</span><br><span class="line">policeNo: /^[0-9A-Za-z]&#123;4,10&#125;$/, // 账号4-10位数字或字母组成</span><br><span class="line">pwd: /^[0-9A-Za-z]&#123;6,16&#125;$/, // 密码由6-16位数字或者字母组成</span><br><span class="line">isNumAlpha: /^[0-9A-Za-z]*$/, // 字母或数字</span><br><span class="line">isAlpha: /^[a-zA-Z]*$/, // 是否字母</span><br><span class="line">isNumAlphaCn: /^[0-9a-zA-Z\u4E00-\uFA29]*$/, // 是否数字或字母或汉字</span><br><span class="line">isPostCode: /^[\d-]*$/i, // 是否邮编</span><br><span class="line">isNumAlphaUline: /^[0-9a-zA-Z_]*$/, // 是否数字、字母或下划线</span><br><span class="line">isNumAndThanZero: /^([1-9]\d*(\.\d+)?|0)$/, // 是否为整数且大于0/^[1-9]\d*(\.\d+)?$/</span><br><span class="line">isNormalEncode: /^(\w||[\u4e00-\u9fa5])&#123;0,&#125;$/, // 是否为非特殊字符（包括数字字母下划线中文）</span><br><span class="line">isTableName: /^[a-zA-Z][A-Za-z0-9#$_-]&#123;0,29&#125;$/, // 表名</span><br><span class="line">isInt: /^-?\d+$/, // 整数</span><br><span class="line">isTableOtherName: /^[\u4e00-\u9fa5]&#123;0,20&#125;$/, // 别名</span><br><span class="line">// isText_30: /^(\W|\w&#123;1,2&#125;)&#123;0,15&#125;$/, // 正则</span><br><span class="line">// isText_20: /^(\W|\w&#123;1,2&#125;)&#123;0,10&#125;$/, // 正则</span><br><span class="line">isText_30: /^(\W|\w&#123;1&#125;)&#123;0,30&#125;$/, // 匹配30个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_50: /^(\W|\w&#123;1&#125;)&#123;0,50&#125;$/, // 匹配50个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_20: /^(\W|\w&#123;1&#125;)&#123;0,20&#125;$/, // 匹配20个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_100: /^(\W|\w&#123;1&#125;)&#123;0,100&#125;$/, // 匹配100个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isText_250: /^(\W|\w&#123;1&#125;)&#123;0,250&#125;$/, // 匹配250个字符，字符可以使字母、数字、下划线、非字母，一个汉字算1个字符</span><br><span class="line">isNotChina: /^[^\u4e00-\u9fa5]&#123;0,&#125;$/, // 不为中文  IDcard: /^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X)$/, // 身份证</span><br><span class="line">IDcardAndAdmin: /^(([1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$|^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X))|(admin))$/, // 身份证或者是admin账号</span><br><span class="line">IDcardTrim: /^\s*(([1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;)|([1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;([0-9]|X))|(admin))\s*$/, // 身份证</span><br><span class="line">num1: /^[1-9]*$/, // 数字</span><br><span class="line">companyNO: /^qqb_[0-9a-zA-Z_]&#123;1,&#125;$/, // 公司人员账号</span><br><span class="line">imgType: /image\/(png|jpg|jpeg|gif)$/, // 上传图片类型</span><br><span class="line">isChina: /^[\u4e00-\u9fa5]&#123;2,8&#125;$/,</span><br><span class="line">isNozeroNumber: /^\+?[1-9]\d*$/, // 大于零的正整数</span><br><span class="line">float: /^\d+(\.?|(\.\d+)?)$/, // 匹配正整数或者小数 或者0.这个特殊值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流效果</title>
    <url>/2019/08/15/%E7%80%91%E5%B8%83%E6%B5%81%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h4 id="JS实现瀑布流效果"><a href="#JS实现瀑布流效果" class="headerlink" title="JS实现瀑布流效果"></a>JS实现瀑布流效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  	.....</span><br><span class="line">    &lt;div class=&quot;item&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">   margin: 0;</span><br><span class="line">   padding: 0;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&#123;</span><br><span class="line">   width: 100%;</span><br><span class="line">   height: 2000px;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&gt;div&#123;</span><br><span class="line">   float: left;</span><br><span class="line">   border: 1px solid #ddd;</span><br><span class="line">   padding: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> .content&gt;div&gt;img&#123;</span><br><span class="line">   width: 130px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onload =  function () &#123;</span><br><span class="line">    // 获取主容器的宽度</span><br><span class="line">    var content = document.getElementsByClassName(&#x27;content&#x27;)[0];</span><br><span class="line">    contentWidth = content.offsetWidth;</span><br><span class="line"></span><br><span class="line">    // 获取单个图片的宽度</span><br><span class="line">    var imgs = content.children;</span><br><span class="line">    var imgsWidth = imgs[0].offsetWidth;</span><br><span class="line"></span><br><span class="line">    // 第一行可以排列多少张图片</span><br><span class="line">    var nums = Math.floor(contentWidth/imgsWidth)</span><br><span class="line"></span><br><span class="line">    // 收集第一排的所有高度</span><br><span class="line">    var arrHeight = [];</span><br><span class="line"></span><br><span class="line">    for(var i = 0; i &lt; imgs.length; i++) &#123;</span><br><span class="line">      if(i &lt; nums) &#123;</span><br><span class="line">        arrHeight.push(imgs[i].offsetHeight)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 创建一个元素的对象</span><br><span class="line">        var obj = &#123;</span><br><span class="line">          minH: arrHeight[0],</span><br><span class="line">          minI: 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(var j = 0; j &lt; arrHeight.length; j++) &#123;</span><br><span class="line">          if(arrHeight[j] &lt; obj.minH) &#123;</span><br><span class="line">            obj.minH = arrHeight[j]</span><br><span class="line">            obj.minI = j</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        imgs[i].style.position = &quot;absolute&quot;</span><br><span class="line">        imgs[i].style.left = imgs[obj.minI].offsetLeft + &quot;px&quot;</span><br><span class="line">        imgs[i].style.top = obj.minH + &quot;px&quot;</span><br><span class="line">        arrHeight[obj.minI] = arrHeight[obj.minI] + imgs[i].offsetHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="纯CSS实现瀑布流效果-方法1"><a href="#纯CSS实现瀑布流效果-方法1" class="headerlink" title="纯CSS实现瀑布流效果-方法1"></a>纯CSS实现瀑布流效果-方法1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;shell&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .shell&#123;</span><br><span class="line">        max-width: 1300px;</span><br><span class="line">        column-count: 5;</span><br><span class="line">        column-gap: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .image&#123;</span><br><span class="line">        margin-bottom: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .image img&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:1200px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:850px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @media (max-width:600px)&#123;</span><br><span class="line">        .shell&#123;</span><br><span class="line">            column-count: 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>pinterest是使用瀑布流最具代表性的网站</p>
<h4 id="纯CSS实现瀑布流效果-方法2-带编号（竖向）"><a href="#纯CSS实现瀑布流效果-方法2-带编号（竖向）" class="headerlink" title="纯CSS实现瀑布流效果-方法2-带编号（竖向）"></a>纯CSS实现瀑布流效果-方法2-带编号（竖向）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;shell&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;./images/pubuliu/30.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">.shell&#123;</span><br><span class="line">    column-count: 4;</span><br><span class="line">    column-gap: 0;</span><br><span class="line">&#125;</span><br><span class="line">.image&#123;</span><br><span class="line">    padding: 2px;</span><br><span class="line">    position: relative;</span><br><span class="line">    counter-increment: item-counter;</span><br><span class="line">&#125;</span><br><span class="line">.image img&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line">.image::after&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    display: block;</span><br><span class="line">    top: 2px;</span><br><span class="line">    left: 2px;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    color: #fff;</span><br><span class="line">    content: counter(item-counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/stevenlei/pen/vYNZaZN">https://codepen.io/stevenlei/pen/vYNZaZN</a></p>
<h4 id="纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox"><a href="#纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox" class="headerlink" title="纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox"></a>纯CSS实现瀑布流效果-方法3-带编号（横向-左到右，上到下）-flexbox</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;masonry&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;https://picsum.photos/360/460?random=1&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">	......</span><br><span class="line">  &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;https://picsum.photos/360/420?random=15&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  margin: 4px;</span><br><span class="line">  font-family: Helvetica;</span><br><span class="line">  </span><br><span class="line">  /* Centering &amp; Limit Width */</span><br><span class="line">  margin: auto;</span><br><span class="line">  width: 720px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.masonry &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding: 2px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  counter-increment: item-counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item img &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item::after &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  display: block;</span><br><span class="line">  top: 2px;</span><br><span class="line">  left: 2px;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 24px;</span><br><span class="line">  background-color: #000;</span><br><span class="line">  color: #fff;</span><br><span class="line">  content: counter(item-counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+1) &#123;</span><br><span class="line">  order: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+2) &#123;</span><br><span class="line">  order: 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n+3) &#123;</span><br><span class="line">  order: 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(4n) &#123;</span><br><span class="line">  order: 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片资源：<a href="https://picsum.photos/">picsum</a></p>
<p>引用方式：<a href="https://picsum.photos/360/460?random=1">https://picsum.photos/360/460?random=1</a></p>
<p>代码参考：<a href="https://codepen.io/stevenlei/pen/PoPjBBm">https://codepen.io/stevenlei/pen/PoPjBBm</a> </p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端调试方法汇总</title>
    <url>/2019/07/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="移动端开发所的资源与小技巧"><a href="#移动端开发所的资源与小技巧" class="headerlink" title="移动端开发所的资源与小技巧"></a><a href="https://github.com/jtyjty99999/mobileTech">移动端开发所的资源与小技巧</a></h4><h3 id="一：Android手机-chrome（真机调试）"><a href="#一：Android手机-chrome（真机调试）" class="headerlink" title="一：Android手机 + chrome（真机调试）"></a>一：Android手机 + chrome（真机调试）</h3><p><a href="https://juejin.im/post/5b15022ff265da6e163720c6">参考的博客-掘金</a></p>
<h5 id="一台Android手机，一台电脑，一根Android数据线"><a href="#一台Android手机，一台电脑，一根Android数据线" class="headerlink" title="一台Android手机，一台电脑，一根Android数据线"></a>一台Android手机，一台电脑，一根Android数据线</h5><h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><p>1、在Android手机上安装<strong>chrome浏览器</strong><br>2、打开手机的开发者模式（开发人员选项——“USB调试”打开）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/usb0.png" alt="打开“USB调试”"><br>3、将手机与电脑通过USB线连接，弹出对话框<strong>“是否允许USB调试”</strong>，选择“确定”<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/usb.png" alt="允许USB调试"></p>
<p><strong>遇到的问题：</strong><br>问题一：连接电脑显示  “无法识别的USB”<br>解决方法：<a href="https://www.yunqishi.net/video/9896.html">参考的链接</a><br>    1. 在控制面板打开设备管理器<br>    2. 展开通用串行总线控制器，右击设备选择卸载， 每个设备重复以上操作，重启计算机系统会自动安装usb控制器<br>    （这里我选择了unknown的卸载了，拔掉USB线，然后重启电脑）<br>    3.重启电脑之后，重新插上USB线，会自动安装驱动</p>
<p>问题二：如果连不了，可以下载360手机助手连接一下手机。</p>
<p>4、打开手机上的chrome浏览器，并进入需要调试的页面（例如：进入百度搜索内容）<br>5、打开PC端chrome浏览器，在地址栏中输入chrome://inspect/，进入调试页面，此时，我们发现，chrome检测到了我们的手机<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/chrome.png" alt="chrome检测到了我们的手机"><br>6、点击<strong>inspect</strong> 会弹出chrome调试工具，然后就可以在电脑上调试真机了</p>
<p><strong>注意事项：</strong><br>在上面第6步的时候，点击inspect后，弹出的面板可能是一片空白，这是因为，<strong>首次使用该功能时，需要连接外网（翻墙）</strong>，初始化后，成功显示了调试工具的面板后，以后就不需要翻墙了。</p>
<h3 id="二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole"><a href="#二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole" class="headerlink" title="二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole"></a>二：如果想在手机端中，查看console的内容，看有没有报错之类的。可以使用vConsole</h3><p>在页面中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vConsole/3.3.3/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vConsole = new VConsole();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>加入之后，在移动端页面就可以看到console.log打印出来的结果了</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/vConsole.png" alt="移动端-打印输出"><br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/vConsole2.png" alt="移动端-打印输出"></p>
<h4 id="判断是否为移动端设备"><a href="#判断是否为移动端设备" class="headerlink" title="判断是否为移动端设备"></a>判断是否为移动端设备</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isMobile()&#123;</span><br><span class="line">  if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为PC端"><a href="#判断是否为PC端" class="headerlink" title="判断是否为PC端"></a>判断是否为PC端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function IsPC() &#123;</span><br><span class="line">     var userAgentInfo = navigator.userAgent;</span><br><span class="line">     var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">                 &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">                 &quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">     var flag = true;</span><br><span class="line">     for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">         if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">             flag = false;</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return flag;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="移动端设备旋转设备为横屏时，刷新页面"><a href="#移动端设备旋转设备为横屏时，刷新页面" class="headerlink" title="移动端设备旋转设备为横屏时，刷新页面"></a>移动端设备旋转设备为横屏时，刷新页面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mobile = isMobile();</span><br><span class="line">if(mobile) &#123;</span><br><span class="line">    window.addEventListener(&quot;orientationchange&quot;, function() &#123;</span><br><span class="line">        //横屏，刷新页面</span><br><span class="line">        if(window.orientation == 90) &#123;</span><br><span class="line">            window.top.document.location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">如果是刷新当前页面，直接Window.location.reload();就可以。</span><br><span class="line">如果是使用iframe嵌套页面的，要往上一层去刷新，window.top.document.location.reload();</span><br></pre></td></tr></table></figure>

<p>使用window.top.document.location.reload();的原因，是使用iframe嵌套页面的：（蓝色区域为子页面嵌套在里面）<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/main.png" alt="iframe嵌套页面"></p>
<h4 id="判断是否移动设备是否为横屏"><a href="#判断是否移动设备是否为横屏" class="headerlink" title="判断是否移动设备是否为横屏"></a>判断是否移动设备是否为横屏</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//判断是否移动设备是否横屏状态</span><br><span class="line">function isLandscape() &#123;</span><br><span class="line">	if (window.orientation === 180 || window.orientation === 0) &#123; </span><br><span class="line">		return false;</span><br><span class="line">	&#125; </span><br><span class="line">	if (window.orientation === 90 || window.orientation === -90 )&#123; </span><br><span class="line">		return true;</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取iframe父子页面之间获取元素"><a href="#获取iframe父子页面之间获取元素" class="headerlink" title="获取iframe父子页面之间获取元素"></a>获取iframe父子页面之间获取元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【父找子】</span><br><span class="line">//从父级找到iframe，然后找contents</span><br><span class="line">var inputs = $(&quot;.tab-pane.active iframe&quot;).contents().find(&quot;input&quot;);</span><br><span class="line">【子找父】</span><br><span class="line">//从子页面找到parent.document,然后找对应元素</span><br><span class="line">$(window.parent.document).find(&quot;.content-wrapper&quot;).offset(&#123;top:0&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="处理移动端页面，软键盘弹起导致页面底部空白"><a href="#处理移动端页面，软键盘弹起导致页面底部空白" class="headerlink" title="处理移动端页面，软键盘弹起导致页面底部空白"></a>处理移动端页面，软键盘弹起导致页面底部空白</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/input.png" alt="软键盘弹起导致页面底部空白"><br>实际上，页面内容是在的，只是被挡住了，所以要将最外层的页面高度设置到跟设备一样高</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function setOffset() &#123;</span><br><span class="line">  //是否为移动端</span><br><span class="line">  var mobile = isMobile();</span><br><span class="line">  //是否是横屏状态</span><br><span class="line">  var landscape = isLandscape();</span><br><span class="line"></span><br><span class="line">  //移动端横屏状态 监听输入框输入状态</span><br><span class="line">  if(mobile &amp;&amp; landscape) &#123;</span><br><span class="line">    var flag = true;</span><br><span class="line">    var inputs = $(&quot;.tab-pane.active iframe&quot;).contents().find(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">    inputs.on(&quot;compositionstart&quot;, function() &#123;</span><br><span class="line">      flag = false;</span><br><span class="line">    &#125;);</span><br><span class="line">    inputs.on(&quot;compositionend&quot;, function() &#123;</span><br><span class="line">      flag = true;</span><br><span class="line">    &#125;);</span><br><span class="line">    inputs.on(&quot;keyup&quot;, function() &#123;</span><br><span class="line">      if(flag) &#123;</span><br><span class="line">        //设置iframe的offsetTop</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).offset(&#123;top:0&#125;);</span><br><span class="line">        $(document).find(&quot;.permiss&quot;).offset(&#123;top:143&#125;);</span><br><span class="line"></span><br><span class="line">        【解决问题的主要代码】</span><br><span class="line">        //将最外层的页面高度设置到跟设备一样高</span><br><span class="line"></span><br><span class="line">        //获取屏幕高度</span><br><span class="line">        var bodyHeight = $(&#x27;body&#x27;)[0].clientHeight;</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).css(&quot;height&quot;, bodyHeight + &quot;px&quot;);</span><br><span class="line">        $(window.parent.document).find(&quot;.content-wrapper&quot;).css(&quot;top&quot;, &quot;0px&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="响应式调试"><a href="#响应式调试" class="headerlink" title="响应式调试"></a>响应式调试</h4><p>Firefox 浏览器内置了 <code>自定义设计视图</code> 的功能，可以通过<code> Firefox-&gt;Web 开发者-&gt;自定义设计视图</code>（或者摁下 <code>Shift + Ctrl + m</code>）。相比网络工具，运行更加流畅，无需联网。</p>
<p><code>Shift + Ctrl + m</code>：手机模式和PC模式之间进行切换</p>
<p><a href="http://www.responsinator.com/">移动端在线调试工具</a></p>
<p><a href="http://responsivepx.com/">在线调试工具</a>—手动设置宽度</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>火狐兼容</title>
    <url>/2019/07/11/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="文本溢出省略号显示-火狐不兼容"><a href="#文本溢出省略号显示-火狐不兼容" class="headerlink" title="文本溢出省略号显示-火狐不兼容"></a>文本溢出省略号显示-火狐不兼容</h3><h4 id="第一种解决方案："><a href="#第一种解决方案：" class="headerlink" title="第一种解决方案："></a>第一种解决方案：</h4><p>layui框架对文本溢出隐藏省略号显示<br><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/1.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<h5 id="解决：将溢出文字修剪，而不用省略号显示"><a href="#解决：将溢出文字修剪，而不用省略号显示" class="headerlink" title="解决：将溢出文字修剪，而不用省略号显示"></a>解决：将溢出文字修剪，而不用省略号显示</h5><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.activity-table .layui-table-cell&#123;</span><br><span class="line">    text-overflow: clip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/2.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<h4 id="第二种解决方案："><a href="#第二种解决方案：" class="headerlink" title="第二种解决方案："></a>第二种解决方案：</h4><p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%81%AB%E7%8B%90%E5%85%BC%E5%AE%B9/3.png" alt="文本溢出省略号显示-火狐不兼容"></p>
<p>使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>
<p>在谷歌浏览器没有问题。火狐浏览器不兼容，IE对文本溢出本来是没有兼容问题的，因为这个文本是在表格（table）里面的，所以IE也会有兼容问题。</p>
<p>要解决IE的兼容问题，要将td改为display:inline-block;</p>
<p>由于改为这样，样式需要改变的地方比较多，而且还是不兼容火狐，所以<b>使用JQ截取字符串来解决.</b></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//页面结构</span><br><span class="line">&lt;td class=<span class="string">&quot;link word_cont&quot;</span>&gt;</span><br><span class="line">Android：&lt;a href=<span class="string">&quot;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">ios：&lt;a href=<span class="string">&quot;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">//处理溢出隐藏省略号显示 兼容性问题</span><br><span class="line">$(<span class="string">&#x27;.word_cont a&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    //获取td宽度</span><br><span class="line">    var tdWidth = $(<span class="string">&quot;.word_cont&quot;</span>).width();</span><br><span class="line">    //一个字符宽度</span><br><span class="line">    var internal = 5; </span><br><span class="line">    //显示个数</span><br><span class="line">    var maxwidth = Math.floor((tdWidth- 160)/internal) ;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>($(this).text().length&gt;maxwidth)&#123;</span><br><span class="line">        //截取字符串</span><br><span class="line">        $(this).text($(this).text().substring(0,maxwidth));</span><br><span class="line">        //多余的用省略号显示</span><br><span class="line">        $(this).html($(this).html()+<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    //先隐藏，截取之后，再显示</span><br><span class="line">    $(this).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;inline-block&quot;</span>);   </span><br><span class="line">&#125;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>但是有个问题，由于字母，数字，分号(.)，空格(&nbsp;)的字符大小不太一样，<br>所以以一个字符5px来算，不是特别精准。但大致可以解决这个问题。<br>（若有更好的方法，可以留言给我，感谢！）</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>火狐兼容</category>
      </categories>
      <tags>
        <tag>火狐兼容</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记</title>
    <url>/2021/06/23/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_34764577/article/details/81184628">Chrome的插件扩展程序安装目录是什么？在哪个文件夹？</a></p>
<h4 id="浏览器调试工具如何查看placeholder值"><a href="#浏览器调试工具如何查看placeholder值" class="headerlink" title="浏览器调试工具如何查看placeholder值"></a><a href="https://blog.csdn.net/qq_36485978/article/details/97897798">浏览器调试工具如何查看placeholder值</a></h4><h4 id="访问他人本地项目–使用火狐浏览器代理"><a href="#访问他人本地项目–使用火狐浏览器代理" class="headerlink" title="访问他人本地项目–使用火狐浏览器代理"></a>访问他人本地项目–使用火狐浏览器代理</h4><p>设置——常规——网络设置——手动配置代理</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/1.png" alt="火狐浏览器配置代理"></p>
<h4 id="手机访问电脑本地项目——使用Charles代理"><a href="#手机访问电脑本地项目——使用Charles代理" class="headerlink" title="手机访问电脑本地项目——使用Charles代理"></a>手机访问电脑本地项目——使用Charles代理</h4><p><code>备注：使用手机端访问本地后台项目，在手机wifi里配置代理</code></p>
<h5 id="注意：连接不成功，看一下端口号是否写错了"><a href="#注意：连接不成功，看一下端口号是否写错了" class="headerlink" title="注意：连接不成功，看一下端口号是否写错了"></a><code>注意：连接不成功，看一下端口号是否写错了</code></h5><p><code>首次连接，需要在Charles上授权（allow）</code></p>
<ul>
<li>电脑安装Charles，进行代理设置：“代理”——“代理设置”</li>
</ul>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/Charles%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png" alt="代理设置"></p>
<ul>
<li>在手机端要设置“HTTP代理”【注意：手机连接的WiFi要跟电脑端是在同一个路由】</li>
</ul>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210622185834.png" alt="img"> <img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202106221858341.png" alt="img"> <img src="https://raw.githubusercontent.com/winney07/Images/main/Note/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202106221858342.png" alt="img"></p>
<ul>
<li>配置好手机HTTP代理之后，在Charles中会弹出一个是否同意的一个确认框，选择同意之后；手机就可以访问本地的项目</li>
</ul>
<p>如果在手机中忽略过该WiFi，重新连接上该WiFi后要重新设置“HTTP代理”</p>
<h2 id="Atom-工具使用"><a href="#Atom-工具使用" class="headerlink" title="Atom_工具使用"></a>Atom_工具使用</h2><p>由github发布的前端开发工具</p>
<p>非常强大和非常开发的开发工具平台</p>
<ul>
<li>官网地址: <a href="https://atom.io/">https://atom.io/</a></li>
<li>百度网盘下载地址：<a href="http://pan.baidu.com/s/1ntszCgT">http://pan.baidu.com/s/1ntszCgT</a></li>
</ul>
<p>Atom的插件和主题安装和配置</p>
<h2 id="WebStorm10"><a href="#WebStorm10" class="headerlink" title="WebStorm10"></a>WebStorm10</h2><p>WebStorm是最专业的前端IDE开发工具</p>
<p>WebStorm配置和快捷键</p>
<h2 id="操作系统常用配置"><a href="#操作系统常用配置" class="headerlink" title="操作系统常用配置"></a>操作系统常用配置</h2><ul>
<li><p>系统调整为最佳性能(建议设置)</p>
</li>
<li><ul>
<li>开始菜单&gt;控制面板&gt;性能信息和工具&gt;调整视觉效果&gt;调整到最佳性能</li>
</ul>
</li>
<li><p>文件夹显示设置(强烈建议设置)</p>
</li>
<li><ul>
<li>列表显示文件夹（要用这种形式才比较专业）</li>
<li>显示隐藏文件</li>
<li>应用到所有文件</li>
<li>操作：工具→文件夹选项&gt;隐藏已知文件类型.. (去掉）&gt;应用到所有文件夹</li>
</ul>
</li>
</ul>
<p>注意：隐藏已知文件类型的扩展名（这个一定要去掉），在标题栏显示完整路径（这个要勾选上）</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/2.png" alt="img"></p>
<ul>
<li><p>任务栏设置(建议设置)</p>
</li>
<li><ul>
<li>任务栏右击&gt;锁定任务栏+任务栏使用小图标</li>
</ul>
</li>
</ul>
<h4 id="修改图片的相对路径"><a href="#修改图片的相对路径" class="headerlink" title="修改图片的相对路径"></a>修改图片的相对路径</h4><p>（可以不需要在Typora里面设置，直接写相对路径）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![备注文字](./images/note6.png)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%AC%94%E8%AE%B0/3.png" alt="修改图片的相对路径"></p>
<h4 id="浏览器无法播放flash"><a href="#浏览器无法播放flash" class="headerlink" title="浏览器无法播放flash"></a>浏览器无法播放flash</h4><p>安装Adobe Flash Player PPAPI</p>
<h4 id="设置电脑桌面上的图标和文件随意摆放"><a href="#设置电脑桌面上的图标和文件随意摆放" class="headerlink" title="设置电脑桌面上的图标和文件随意摆放"></a>设置电脑桌面上的图标和文件随意摆放</h4><p>在桌面右击鼠标，选“查看”，把“自动排列图标”和“将图标与网格对齐”取消勾选就可以。</p>
<h4 id="如何把文件夹里的文件名都复制下来"><a href="#如何把文件夹里的文件名都复制下来" class="headerlink" title="如何把文件夹里的文件名都复制下来"></a><a href="https://jingyan.baidu.com/article/b24f6c82000491c7bfe5daff.html">如何把文件夹里的文件名都复制下来</a></h4><h4 id="备注信息的注意事项"><a href="#备注信息的注意事项" class="headerlink" title="备注信息的注意事项"></a>备注信息的注意事项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(os === 1)&#123;	// iOS</span><br><span class="line">	// iOS</span><br><span class="line">&#125; else if(os === 2) &#123; // 安卓</span><br><span class="line">	// 安卓</span><br><span class="line">&#125; else if(os === 3) &#123;// H5小游戏        // 这样写会影响后面的代码执行  &#123;与//之间要有空格</span><br><span class="line">	// H5小游戏</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="PHP输出某个变量"><a href="#PHP输出某个变量" class="headerlink" title="PHP输出某个变量"></a>PHP输出某个变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var channels = &lt;?php echo json_encode($channels); ?&gt;;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.icode9.com/content-4-1302901.html">接口测试工具Apifox 基础篇：配置环境</a></p>
]]></content>
  </entry>
  <entry>
    <title>网站素材</title>
    <url>/2021/01/08/%E7%BD%91%E7%AB%99%E7%B4%A0%E6%9D%90/</url>
    <content><![CDATA[<div class="website-collect">
[JoshWComeau](https://www.joshwcomeau.com/)

<p><a href="https://goshacmd.com/">Gosha Arinich</a></p>
<h4 id="前端-常用"><a href="#前端-常用" class="headerlink" title="前端-常用"></a>前端-常用</h4><p>CODEPEN——The best place to build, test, and discover front-end code.</p>
<table>
<thead>
<tr>
<th><a href="https://codepen.io/">CODEPEN—示例</a></th>
<th><a href="https://caniuse.com/">Can I use</a>-兼容性速查表</th>
<th><a href="https://stackoverflow.com/questions/6165472/custom-css-scrollbar-for-firefox">Stack Overflow</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript-MDN</a> |<a href="https://developer.mozilla.org/en-US/">MDN</a></td>
<td><a href="https://tool.chinaz.com/">站长工具</a>  |<a href="https://tool.chinaz.com/map.aspx">工具导航</a></td>
</tr>
<tr>
<td><a href="https://cli.im/">草料二维码</a>    |  <a href="https://tinypng.com/">TinyPNG </a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN Web Docs</a>  | <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a></td>
<td><a href="https://kb.cnblogs.com/list/1002/">博客园</a>  | <a href="https://www.ltonus.com/">前端这点事</a></td>
</tr>
<tr>
<td><a href="http://mobile.chinaz.com/mft.html">移动适配报告</a> |<a href="http://mobile.chinaz.com/fitscreen.html">移动跨屏模拟</a></td>
<td><a href="http://www.responsinator.com/">移动端在线调试工具</a></td>
<td><a href="http://tool.chinaz.com/tools/httptest.aspx">在线HTTP接口测试</a></td>
</tr>
<tr>
<td><a href="https://www.apifox.cn/apihub/">API Hub-开放API共享平台</a></td>
<td><a href="https://gitee.com/">Gitee</a>  | <a href="https://github.com/">GitHub</a></td>
<td><a href="https://home.code-nav.cn/">编程导航</a> |<a href="http://www.h-ui.net/site.shtml">IT网址导航</a> |<a href="http://caibaojian.com/fedbook/">前端开发者手册</a></td>
</tr>
<tr>
<td><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></td>
<td><a href="https://react.docschina.org/">React </a></td>
<td><a href="https://cloud.tencent.com/developer/section/1072218">开发者手册</a></td>
</tr>
<tr>
<td><a href="https://www.iconfont.cn/">iconfont</a></td>
<td><a href="https://codesandbox.io/search?refinementList%5Btemplate%5D%5B0%5D=create-react-app&page=1&configure%5BhitsPerPage%5D=12">react学习demo</a></td>
<td><a href="https://cn.vuejs.org/">Vue.js</a></td>
</tr>
<tr>
<td><a href="https://antd-mobile.gitee.io/zh">Ant Design Mobile</a>   |  <a href="https://ant.design/index-cn">Antd</a>  | <a href="https://vant-contrib.gitee.io/vant/#/zh-CN">Vant 3 </a></td>
<td><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts">React Router</a></td>
<td><a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md">JavaScript standard代码规范的全文</a></td>
</tr>
<tr>
<td><a href="https://codesandbox.io/search?refinementList%5Btemplate%5D%5B0%5D=vue-cli&page=1&configure%5BhitsPerPage%5D=12">vue学习demo</a></td>
<td><a href="https://reactrouter.com/docs/en/v6/getting-started/concepts">React Router</a></td>
<td><a href="http://html5please.com/">HTML5与CSS3技术应用评估</a></td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/">npm</a></td>
<td><a href="https://vitejs.cn/">Vite中文</a></td>
<td><a href="https://vitejs.dev/">Vite</a></td>
</tr>
<tr>
<td><a href="https://www.antdv.com/docs/vue/migration-v3-cn">Antd Vue</a></td>
<td><a href="https://www.layui.site/demo/laydate.html">layDate</a></td>
<td><a href="https://www.bianchengquan.com/">编程圈</a> |<a href="http://www.haorooms.com/nav">前端导航</a></td>
</tr>
<tr>
<td><a href="https://linjinze999.github.io/vue-llplatform/">vue-llplatform</a></td>
<td><a href="https://ionic.io/ionicons">Ionicons</a></td>
<td><a href="https://cloud.tencent.com/developer/user/1036137">前端达人</a></td>
</tr>
<tr>
<td><a href="https://www.kancloud.cn/ywfwj2008/weui/274290">ActionSheet · WeUI 中文文档 · 看云</a></td>
<td><a href="https://cloud.tencent.com/developer/rank">腾讯云开发者社区</a></td>
<td><a href="https://github.com/Tencent/weui">weui</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/community/homepage">首页|微信开放社区</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">微信公众平台开发概述|微信开放文档</a></td>
<td><a href="https://weui.io/">WeUI</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档|微信开放文档</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/iOS_WKWebview.html">背景|微信开放文档</a></td>
<td><a href="https://www.runoob.com/jsref/met-win-btoa.html">Browser 对象</a></td>
</tr>
<tr>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档|微信开放文档</a></td>
<td><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/iOS_WKWebview.html">背景|微信开放文档</a></td>
<td><a href="https://www.runoob.com/jsref/jsref-obj-array.html">JavaScript 对象</a></td>
</tr>
<tr>
<td><a href="http://kangax.github.io/compat-table/es6/">ECMAScript 6 compatibility table</a> —测试浏览器对 ECMAScript6 的支持度</td>
<td><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">自适应网页设计</a></td>
<td><a href="http://www.divcss5.com/">DIVCSS5</a></td>
</tr>
<tr>
<td><a href="http://resource.haorooms.com/">前端资料库</a></td>
<td><a href="https://tool.css-js.com/jsonformat.html">JSON格式化</a></td>
<td><a href="https://tool.css-js.com/html2js.html">JS与HTML互转</a></td>
</tr>
<tr>
<td><a href="https://tool.css-js.com/htmlchar.html">HTML特殊符号对照表</a></td>
<td><a href="https://tool.css-js.com/base64.html">图片在线转换Base64</a></td>
<td><a href="https://www.atool99.com/img2base64.php">图片转Base64编码工具</a></td>
</tr>
<tr>
<td><a href="https://tool.css-js.com/rgba.html">RGB与16进制色互转</a></td>
<td><a href="https://tool.oschina.net/jscompress">在线JS/CSS/HTML压缩</a></td>
<td><a href="https://tool.css-js.com/compressor.html">CSS, JavaScript 压缩, 美化, 加密, 解密</a></td>
</tr>
<tr>
<td><a href="https://tool.lu/css/">css工具</a></td>
<td><a href="http://think2011.net/localResizeIMG/test/">在线压缩图片</a></td>
<td><a href="https://www.bitbug.net/">在线制作ico图标</a></td>
</tr>
<tr>
<td><a href="http://www.5idev.com/javascript/">5idev.com—JavaScript基础教程</a></td>
<td><a href="http://www.yyyweb.com/">前端里</a></td>
<td><a href="https://www.mindmeister.com/zh">mindmeister-在线创建的思维导图</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/sb19871023/p/3894452.html">前端知识体系</a></td>
<td><a href="https://validator.niceue.com/">validator-表单验证解决方案</a></td>
<td><a href="https://niceue.com/validator/demo/index.php">nice Validator 示例</a></td>
</tr>
<tr>
<td><a href="https://github.com/jikeytang/front-end-collect">性能优化优秀教程</a></td>
<td><a href="https://fontawesome.dashgame.com/">Font Awesome</a></td>
<td><a href="https://www.quirksmode.org/blog/">QuirksBlog</a></td>
</tr>
</tbody></table>
<p>工作流</p>
<ul>
<li>前端</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.csdn.net/?spm=1001.2101.3001.4476">CSDN</a></th>
<th><a href="https://juejin.cn/">掘金</a></th>
<th><a href="https://chinese.freecodecamp.org/learn/front-end-development-libraries/">前端开发库</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.microsoft.com/zh-cn/documentation/">Microsoft 文档-技术文档</a></td>
<td><a href="https://home.code-nav.cn/">编程导航-程序员导航</a></td>
<td><a href="https://www.code-nav.cn/">编程导航</a></td>
</tr>
<tr>
<td><a href="https://www.w3cplus.com/">W3Cplus-博客</a></td>
<td><a href="https://www.w3school.com.cn/">w3school</a>  |  <a href="https://www.w3cschool.cn/doc_css/">w3cschool</a></td>
<td><a href="http://www.web-jshtml.cn/#/">手把手撸码前端</a></td>
</tr>
<tr>
<td><a href="https://www.jb51.cc/css/662083.html">编程之家</a></td>
<td><a href="https://cloud.tencent.com/developer/section/1072218">腾讯云-开发者手册</a></td>
<td><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=9_20&index=1">微信支付–开发文档</a></td>
</tr>
<tr>
<td><a href="https://meyerweb.com/eric/tools/css/reset/">CSS Tools: Reset CSS</a></td>
<td><a href="https://api.aa1.cn/">免费API</a></td>
<td><a href="https://docschina.org/">印记中国</a></td>
</tr>
<tr>
<td><a href="https://xiaoman.blog.csdn.net/?type=blog">小满zs-CSDN博客</a></td>
<td><a href="https://ionic.io/ionicons">ionicons</a></td>
<td><a href="http://www.manongjc.com/">码农教程</a></td>
</tr>
<tr>
<td><a href="https://www.bootcdn.cn/">BootCDN</a></td>
<td><a href="https://www.w3cplus.com/">W3cplus</a></td>
<td><a href="https://support.cloudflare.com/hc/zh-cn/articles/360029779472-Troubleshooting-Cloudflare-1XXX-errors?utm_source=1020_error#error1000">Cloudflare 1XXX 错误故障排除</a></td>
</tr>
<tr>
<td><a href="https://www.quirksmode.org/compatibility.html">Compatibility overview-浏览器兼容表</a></td>
<td><a href="https://html5boilerplate.com/">HTML5 Boilerplate</a>—前端模板</td>
<td><a href="https://www.zhihu.com/question/19551815">什么是 HTML5 Boilerplate ?</a></td>
</tr>
<tr>
<td><a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a></td>
<td><a href="https://webix.com/">支持移动端的框架</a></td>
<td><a href="https://webix.com/">JavaScript UI库;HTML5 JS框架</a></td>
</tr>
<tr>
<td><a href="https://www.jsdaima.com/">JS代码</a></td>
<td><a href="https://www.lanrentuku.com/js/">JS代码-懒人图库</a></td>
<td><a href="https://www.processon.com/view/593749b6e4b01e98478ef98e">JavaScript学习导图</a></td>
</tr>
<tr>
<td><a href="https://www.templatemonster.com/">HTML5响应式模板</a></td>
<td><a href="https://zh.wix.com/">专业网页制作</a></td>
<td><a href="https://www.gavick.com/">Joomla Templates and WordPress Themes</a></td>
</tr>
<tr>
<td><a href="http://beecloud.cn/">BeeCloud</a>-全新的秒支付应用支付接口</td>
<td><a href="https://easings.net/zh-cn">easings-缓动函数速查表</a></td>
<td><a href="https://www.webdesignerdepot.com/">Web Design Blog</a></td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/svg/svg_reference.asp">SVG参考手册</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVG</a></td>
<td><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></td>
<td><a href="https://github.com/mailzwj/node.js">Node.js 资源汇总</a></td>
</tr>
<tr>
<td><a href="https://github.com/jikeytang/front-end-collect">前端收集</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><table>
<thead>
<tr>
<th><a href="https://excalidraw.com/">画图工具</a></th>
<th><a href="https://www.uupoop.com/#/">在线PS软件</a></th>
<th><a href="https://ps.gaoding.com/#/">在线PS</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><a href="https://koutu.gaoding.com/passport">证件照</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>手册网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Learn"> Web 开发/MDN</a>  | <a href="https://developer.mozilla.org/en-US/docs/Web/API">Web APIs</a></th>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Web/API">API 接口参考/MDN</a></th>
<th><a href="https://tool.oschina.net/apidocs">在线API文档</a></th>
<th><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors">JS错误参考列表</a></th>
<th><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN-JavaScript</a></td>
<td><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档</a></td>
<td><a href="https://www.axios-http.cn/">Axios</a></td>
<td><a href="https://www.lanmper.cn/">学编程</a></td>
<td><a href="http://caibaojian.com/fedbook/">前端开发者手册</a></td>
</tr>
<tr>
<td><a href="https://www.runoob.com/">菜鸟教程</a></td>
<td><a href="https://cloud.tencent.com/developer/devdocs">开发者手册-腾讯云</a></td>
<td><a href="https://www.html.cn/study/manual/">web前端手册</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">fetch</a></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Games/Examples">网页游戏开发-Examples</a></td>
</tr>
<tr>
<td><a href="https://www.awesomes.cn/rank">前端TOP100</a></td>
<td><a href="http://restful.p2hp.com/resources/http-status-codes">HTTP状态码</a></td>
<td><a href="https://www.javascriptcn.com/">JavaScript中文网</a></td>
<td><a href="http://c.biancheng.net/js/">JavaScript学习指南</a></td>
<td><a href="https://www.w3school.com.cn/html5/html_5_form_input_types.asp">HTML5 Input 类型</a></td>
</tr>
<tr>
<td><a href="http://es6.ruanyifeng.com/">ECMAScript 6入门</a></td>
<td><a href="http://tool.oschina.net/apidocs/apidoc?api=jquery">在线文档-jQuery</a></td>
<td><a href="http://www.bootcss.com/p/underscore/">Underscore.js中文文档</a></td>
<td><a href="http://www.w3school.com.cn/">w3school在线教程</a></td>
<td><a href="https://developers.weixin.qq.com/doc/">微信官方文档</a></td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/b.asp">浏览器脚本教程</a></td>
<td><a href="https://www.w3.org/html/ig/zh/wiki/Main_Page">W3C</a></td>
<td><a href="http://javascript.ruanyifeng.com/tool/requirejs.html">RequireJS和AMD规范</a></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">JavaScript</a></td>
<td><a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015">ECMAScript</a></td>
</tr>
<tr>
<td><a href="http://hemin.cn/jq/index.html">jQuery 手册</a>  |  <a href="https://learn.jquery.com/">jQuery</a></td>
<td><a href="https://api.jquery.com/">jQuery API</a> | <a href="http://hemin.cn/jq/">jQuery在线手册</a></td>
<td><a href="http://jquery.cuishifeng.cn/index.html">jQuery API 中文</a></td>
<td><a href="http://www.jq22.com/chm/jquery/">jQuery速查表</a></td>
<td><a href="https://www.bootcss.com/">Bootstrap相关优质项目推荐</a></td>
</tr>
<tr>
<td><a href="https://docs.wex5.com/">WeX5</a></td>
<td><a href="https://www.imangodoc.com/">芒果文档</a></td>
<td><a href="https://www.underscore-js.com/">underscorejs中文网</a></td>
<td><a href="https://web.dev/learn/">web.dev</a></td>
<td><a href="http://browserhacks.com/">Browserhacks-浏览器hack</a></td>
</tr>
<tr>
<td><a href="https://developer.apple.com/safari/resources/">safari开发中心</a></td>
<td><a href="https://devdocs.io/">DevDocs API Documentation</a></td>
<td><a href="http://es5.github.io/">Annotated ECMAScript 5</a></td>
<td><a href="http://yanhaijing.com/es5/#about">ECMAScript5.1中文版</a></td>
<td><a href="https://www.typescriptlang.org/">TypeScript</a></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/?redirectedfrom=MSDN">Microsoft Edge developer documentation</a></td>
<td><a href="https://www.jquery123.com/">jQuery API 中文文档</a></td>
<td><a href="http://koen301.github.io/fxtpl/">Fxtpl—前端模板引擎</a></td>
<td><a href="http://underscorejs.org/#">Underscore.js</a></td>
<td><a href="https://flow.org/en/docs/types/">Flow 文档：类型注解</a></td>
</tr>
<tr>
<td><a href="http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html">js秘密花园</a></td>
<td><a href="https://aui.github.io/art-template/zh-cn">art-template—高性能 JavaScript 模板引擎</a></td>
<td><a href="https://github.com/aui/art-template">art-template—github</a></td>
<td><a href="https://github.com/aui/art-template-loader">art-template-loader</a></td>
<td><a href="https://github.com/aui/tmodjs">tmodjs</a></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions//cc351024(v=vs.85)?redirectedfrom=MSDN">CSS 兼容性和 Internet Explorer</a></td>
<td><a href="https://csscreator.com/properties">CSS Properties &amp; Selectors  | CSS Creator</a></td>
<td><a href="http://www.worldhello.net/gotgithub/index.html">GotGitHub</a></td>
<td><a href="https://www.cyj.me/why-seajs/zh/">SeaJS</a>  | <a href="http://seajs.org/">seajs</a></td>
<td><a href="http://extjs-doc-cn.github.io/ext4api/">Ext4.1.0 Doc中文版</a></td>
</tr>
<tr>
<td><a href="https://git-scm.com/book/zh/v2">Git-Book</a></td>
<td><a href="http://gitref.justjavac.com/">Git 参考手册</a></td>
<td><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">Git Magic</a></td>
<td><a href="https://lbs.amap.com/api/">高德地图API</a></td>
<td><a href="https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter">在 React 中使用 TypeScript</a></td>
</tr>
</tbody></table>
<ul>
<li>博客网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://winney07.github.io/">Github个人博客</a></th>
<th><a href="https://www.jspang.com/">技术胖</a></th>
<th><a href="https://www.jb51.net/">脚本之家</a></th>
<th><a href="https://github.com/happypeter">happypeter</a></th>
<th><a href="http://www.zhangxinxu.com/">张鑫旭播客</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.awesomes.cn/rank">前端TOP100</a></td>
<td><a href="https://www.winney07.cn/">我的博客</a></td>
<td><a href="https://winney07.github.io/">Github个人博客</a></td>
<td><a href="http://winney.gitee.io/">Gitee 个人博客</a></td>
<td><a href="https://gitee.com/help#article-header0">Gitee帮助中心</a></td>
</tr>
<tr>
<td><a href="www.nczonline.net">Nicholas C.Zakas（尼古拉斯泽卡斯）</a></td>
<td><a href="https://www.oreilly.com/">oreilly</a></td>
<td><a href="http://www.safaribooksonline.com/">Safari Books Online-数字图书馆</a></td>
<td><a href="https://rmurphey.com/">Rebecca Murphey</a></td>
<td><a href="https://www.jianshu.com/p/937c6003851a">手把手教你封装JavaScript插件</a></td>
</tr>
<tr>
<td><a href="https://www.joshwcomeau.com/">JoshWComeau</a></td>
<td></td>
<td></td>
<td><a href="https://goshacmd.com/">Gosha Arinich</a></td>
<td></td>
</tr>
<tr>
<td><a href="http://winney.gitee.io/">Gitee 个人博客</a></td>
<td><a href="http://www.ruanyifeng.com/blog/">阮一峰网络日志</a></td>
<td><a href="https://mubiaozhan.cn/">目标站</a></td>
<td><a href="https://github.com/happypeter/peter-vim">peter-vim</a></td>
<td><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></td>
</tr>
<tr>
<td><a href="https://gitee.com/help#article-header0">Gitee 帮助中心</a></td>
<td><a href="http://www.ruanyifeng.com/home.html">阮一峰的个人网站</a></td>
<td><a href="https://www.jianshu.com/u/379793a403c7">视觉派Pie</a></td>
<td><a href="https://github.com/ruanyf/weekly">科技爱好者周刊</a></td>
<td><a href="https://www.cnblogs.com/">博客园</a></td>
</tr>
<tr>
<td><a href="https://gitee.com/help/articles/4136#article-header0">Gitee Pages</a></td>
<td><a href="http://www.itprobie.com/Default.html">ITPROBIE-程序员的基础教程</a></td>
<td><a href="https://www.imooc.com/u/2667395/articles">五月君</a></td>
<td><a href="http://blog.northpark.cn/">Northpark博客</a></td>
<td><a href="https://www.cnblogs.com/xiaohuochai/">博客园-xiaohuochai</a></td>
</tr>
<tr>
<td><a href="http://www.360doc.com/content/18/1220/07/6889381_803045204.shtml">javascript学习目录</a></td>
<td><a href="https://segmentfault.com/a/1190000022736837">前端常用60余种工具方法</a></td>
<td><a href="https://www.vue-js.com/topic/5ecc88c10ef711364aa1f24d">前端常用工具方法</a></td>
<td><a href="https://www.xuebuyuan.com/">学步园</a></td>
<td><a href="http://www.maxzhang.com/">Max Zhang博客</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/xiaomili/p/7862819.html">JavaScript如何封装插件</a></td>
<td><a href="https://www.cnblogs.com/xiaomili/default.html?page=1">黄鹂</a></td>
<td><a href="https://www.cnblogs.com/chenguiya/p/5278387.html">【javascript详细说明】js封装插件的方法</a></td>
<td><a href="http://javascript.ruanyifeng.com/">JavaScript 标准参考教程（alpha）</a></td>
<td><a href="https://cloud.tencent.com/developer/user/1036137">前端达人</a></td>
</tr>
<tr>
<td><a href="https://cloud.tencent.com/developer/rank">腾讯云开发者社区作者排行榜</a></td>
<td><a href="https://blog.csdn.net/weixin_43880397?type=blog">前端人-CDN</a></td>
<td><a href="https://www.cnblogs.com/makalochen">makalo</a></td>
<td><a href="http://www.manongjc.com/">码农教程</a></td>
<td><a href="https://www.shuzhiduo.com/search/JavaScript/">术之多</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/lhb25/p/loading-spinners-animated-with-css3.html">使用 CSS3 实现超炫的 Loading（加载）动画效果</a></td>
<td><a href="https://www.processon.com/view/5903f7a9e4b027506a44c494">前端基础知识</a></td>
<td><a href="http://www.maxzhang.com/">博客：Max Zhang 的空岛</a></td>
<td><a href="https://www.cnblogs.com/jikey/p/3632392.html">6. web前端开发分享-css,js移动篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/">豪情</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/yexiaochai/p/4901341.html">前端优化带来的思考，浅谈前端工程化 </a></td>
<td><a href="https://www.cnblogs.com/iamzhanglei/">当耐特</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3600308.html">web前端开发分享-css,js入门篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3601666.html">web前端开发分享-css,js进阶篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3604459.html">web前端开发分享-css,js提高篇</a></td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/jikey/p/3607133.html">web前端开发分享-css,js工具篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3611394.html">web前端开发分享-css,js深化篇</a></td>
<td><a href="http://www.cnblogs.com/jikey/p/3632392.html">web前端开发分享-css,js移动篇</a></td>
<td><a href="https://www.iteye.com/blog/desert3-1198400">JavaScript语言精粹读书笔记- JavaScript函数</a></td>
<td><a href="https://www.iteye.com/blog/zzy603-973649">JS的Object漫想：从现象到“本质”</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/fool/tag/%E7%90%86%E8%A7%A3Javascript/">理解Javascript</a></td>
<td><a href="https://www.cnblogs.com/RicCC/archive/2008/02/15/JavaScript-Object-Model-Execution-Model.html">JavaScript对象模型-执行模型</a></td>
<td><a href="https://www.iteye.com/topic/288808">javascript面向对象技术基础(四)</a></td>
<td><a href="https://www.cnblogs.com/mrsunny/archive/2011/05/09/2041185.html">javascript 类属性、类方法、类实例、实例属性、实例方法、prototype、<strong>proto</strong> 测试与小结</a></td>
<td><a href="https://www.cnblogs.com/jeffwongishandsome/archive/2009/05/17/1457674.html">javascript作用域链(Scope Chain)初探</a></td>
</tr>
<tr>
<td><a href="http://www.linuxfly.org/post/524/">JavaScript 的in 操作符</a></td>
<td><a href="https://blog.csdn.net/aimingoo/article/details/6634977">再谈JavaScript的数据类型问题</a></td>
<td><a href="https://bbs.csdn.net/topics/360024555">JavaScript对象与继承教程之内置对象（下）</a></td>
<td><a href="https://bbs.csdn.net/topics/360022809">JavaScript对象与继承教程之内置对象（上）</a></td>
<td><a href="https://www.cnblogs.com/qiantuwuliang/archive/2009/10/17/1584998.html">JavaScript面向对象-静态方法-私有方法-公有方法-特权方法</a></td>
</tr>
<tr>
<td><a href="https://baijiahao.baidu.com/s?id=1719903131321243042&wfr=spider&for=pc">百度智能云实战——静态文件CDN加速</a></td>
<td><a href="http://caibaojian.com/toutiao/">前端头条</a></td>
<td><a href="http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/">Git 教學(1) : Git 的基本使用</a></td>
<td><a href="https://gogojimmy.net/">好麻煩部落格</a></td>
<td><a href="https://www.cnblogs.com/wangfupeng1988/p/4649709.html">自己总结的web前端知识体系大全</a></td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/yexiaochai/p/4901341.html">前端优化带来的思考，浅谈前端工程化</a></td>
<td><a href="http://www.h-ui.net/">H-ui 前端框架</a></td>
<td><a href="https://www.jianshu.com/p/b25c5b88baf5">前端chrome浏览器调试总结</a></td>
<td><a href="https://www.cr173.com/gonglue/62840_1.html">谷歌浏览器开发调试工具中Sources面板 js调试等 完全介绍</a></td>
<td><a href="https://www.jianshu.com/p/00baf1e65322">WEB前端知识体系脑图</a></td>
</tr>
</tbody></table>
<ul>
<li>CSS</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://meyerweb.com/eric/tools/css/reset/">reset.css</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.colorzilla.com/gradient-editor/">css3渐变在线制作器</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://xiebiji.com/2010/01/static_js/?wptheme=Plainscape&ie=1">人像</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>课程平台</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.imooc.com/">慕课网</a></th>
<th></th>
<th></th>
<th><a href="http://www.icketang.com/">爱创课堂</a></th>
<th><a href="http://www.zhinengshe.com/">智能社</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.icourse163.org/">中国大学</a></td>
<td><a href="https://www.w3cschool.cn/">W3Cschool</a></td>
<td><a href="https://www.lmonkey.com/">学习猿地</a></td>
<td><a href="http://www.zhufengpeixun.cn/">珠峰培训</a></td>
<td><a href="http://www.itblw.com/">部落窝教育</a></td>
</tr>
<tr>
<td><a href="https://cloud.tencent.com/edu/learning?from=gw.head">腾讯云</a></td>
<td><a href="https://www.kaikeba.com/">开课吧</a></td>
<td><a href="https://www.vue-js.com/topic/5e4c0d497a28821363fb68b5">2020 年最新前后端编程学习视频</a></td>
<td><a href="https://www.vue-js.com/topic/5e58b40e7d2d480729ae7685">前后端编程视频</a></td>
<td><a href="https://www.html.cn/">Html中文网</a></td>
</tr>
<tr>
<td><a href="https://e.jikexueyuan.com/html5.html?hmsr=baidu_sem_html5_dy_5">极客学院</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>课程链接</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.bilibili.com/video/av46236917?from=search&seid=11530041288730825105">web前端 初中高+资深+专家</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>API 文档、API 调试、API Mock、API 自动化测试</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://apifox.apipark.cn/">Apifox</a></th>
<th>Postman</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://swagger.io/">Swagger-定义API文档</a></td>
<td><a href="https://www.jianshu.com/p/33c28a65deb8">Swagger-强大的API文档工具</a></td>
<td>Jmeter-写测试用例</td>
</tr>
</tbody></table>
<ul>
<li>前端框架</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></th>
<th><a href="https://www.vuepress.cn/">VuePress</a></th>
<th></th>
<th></th>
<th><a href="https://www.iviewui.com/components/select">View UI</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.dcloud.net.cn/mui/">MUI</a></td>
<td><a href="https://cba.github.io/layuiAdmin-doc/">layuiAdmin pro-文档</a></td>
<td><a href="http://www.h-ui.net/">H-ui框架</a></td>
<td><a href="https://gitee.com/yingjienet/h-ui">H-ui-Gitee</a></td>
<td><a href="https://github.com/youzan/zanui-weapp.git">Zan UI</a></td>
</tr>
<tr>
<td><a href="https://www.vue-js.com/">Vue.js社区</a></td>
<td><a href="https://www.kancloud.cn/chenmk/web-knowledges/1077402">H5·前端小册</a></td>
<td><a href="https://www.highcharts.com.cn/">Highcharts</a></td>
<td><a href="https://www.canvasapi.cn/CanvasRenderingContext2D/canvas">Canvas API</a></td>
<td><a href="https://github.com/Tencent/weui">WeUI</a></td>
</tr>
<tr>
<td><a href="https://github.com/tsunhua/egret_demo">egret_demo-白鹭引擎</a></td>
<td><a href="https://github.com/egret-labs/egret-game-library">egret-game-library</a></td>
<td><a href="https://github.com/schteppe/p2.js">p2.js</a></td>
<td><a href="https://github.com/schteppe/p2.js/wiki/Chinese-wiki-%E4%B8%AD%E6%96%87%E7%BB%B4%E5%9F%BA">p2.js中文文档</a></td>
<td><a href="https://github.com/egret-labs/egret-core">egret-core</a></td>
</tr>
<tr>
<td><a href="https://github.com/backstage/backstage">backstage</a></td>
<td><a href="https://github.com/ant-design/ant-design-pro">ant-design-pro</a></td>
<td><a href="http://www.h-ui.net/bug.shtml">兼容性及经验汇总</a></td>
<td><a href="http://www.bootcss.com/">Bootstrap中文网</a></td>
<td><a href="http://www.dedecms.com/">织梦CMS</a></td>
</tr>
<tr>
<td><a href="https://tumult.com/">Tumult Hype</a> —macOS的HTML5创建应用程序</td>
<td><a href="https://semantic-ui.com/">Semantic UI</a></td>
<td><a href="https://unicorn-ui.com/">Unicorn UI</a></td>
<td><a href="https://unicorn-ui.com/buttons/builder/">Buttons</a></td>
<td><a href="http://hiloki.github.io/kitecss/">Kite</a></td>
</tr>
</tbody></table>
<ul>
<li>素材网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.iconfont.cn/">Iconfont</a></th>
<th><a href="http://sc.chinaz.com/">站长素材</a></th>
<th><a href="http://www.fontawesome.com.cn/">Font Awesome-字体图标</a></th>
<th><a href="https://icomoon.io/">IconMoon</a></th>
<th><a href="http://www.bootcss.com/p/font-awesome/">bootsrap 图标库</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://api.it120.cc/doc.html#/home">前端接口列表</a></td>
<td><a href="https://www.jianshu.com/p/7bc1fa9b5ef8">免费API接口分享</a></td>
<td><a href="https://www.58pic.com/">千图网</a></td>
<td><a href="http://iconfont.cn/">阿里iconfont</a></td>
<td><a href="https://cdnjs.com/">cdnjs</a></td>
</tr>
<tr>
<td><a href="https://zhuanlan.zhihu.com/p/79463188">免费API接口</a></td>
<td><a href="http://www.sucaijishi.com/">素材集市</a></td>
<td><a href="https://ajz.fkw.com/pro11.html?_ta=2298">凡科建站-3000套模板免费任换</a></td>
<td><a href="http://www.cssmoban.com/">网页/网站模板</a></td>
<td><a href="https://www.kancloud.cn/explore">看云·广场</a></td>
</tr>
<tr>
<td><a href="http://blog.csdn.net/wcqwcq123/article/details/53408789">百度云干货资源</a></td>
<td><a href="http://www.htmleaf.com/ziliaoku/qianduanjiaocheng/">前端教程资料库</a></td>
<td><a href="http://www.h-ui.net/site.shtml">IT网址导航</a></td>
<td><a href="http://www.icketang.com/2017/ickt_state_0713/190.html?shcss881">2018年1000集大型Web前端视频教程</a></td>
<td><a href="https://www.mycodes.net/154/">后台模板-网站模板</a></td>
</tr>
<tr>
<td><a href="https://www.oreilly.com/">Safari Books Online</a></td>
<td><a href="https://jz.fkw.com/muban.html?_ta=2298">免费网站模板</a></td>
<td><a href="http://www.cssmoban.com/">模板之家</a></td>
<td><a href="https://sc.chinaz.com/moban/">站长之家-模板</a></td>
<td><a href="http://www.dedecms51.com/">织梦无忧-模板</a></td>
</tr>
<tr>
<td><a href="https://www.pageadmin.net/moban/">PAGEADMIN-模板</a></td>
<td><a href="https://muban.io/">模板</a></td>
<td><a href="https://picsum.photos/">图片资源</a></td>
<td><a href="https://mb.bootcss.com/">Bootstrap · 精选模板</a></td>
<td><a href="https://stock.tuchong.com/">图虫</a></td>
</tr>
<tr>
<td><a href="https://www.eightandfour.com/">eight&amp;four</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://tool.oschina.net/">在线工具</a></th>
<th><a href="http://tool.lu/">在线工具</a></th>
<th><a href="http://www.minifycss.com/">Minify CSS</a></th>
<th><a href="https://tool.chinaz.com/tools/unicode.aspx">站长工具</a></th>
<th><a href="http://fis.baidu.com/">FIS3-构建工具</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://webpack.github.io/">wepack</a></td>
<td><a href="https://www.gulpjs.com.cn/">Gulp</a></td>
<td><a href="https://www.gruntjs.net/">Grunt</a></td>
<td><a href="https://yarn.bootcss.com/">Yarn</a> || <a href="https://www.yarnpkg.cn/">Yarn</a></td>
<td><a href="https://jingyan.baidu.com/article/e8cdb32b37c7fa37052bad8b.html">汉化SVN</a></td>
</tr>
<tr>
<td><a href="http://sfz.uzuzuz.com/?region=110101&birthday=19920307&sex=1&num=5&r=50">生成身份证号码</a></td>
<td><a href="http://fex-team.github.io/fis-plus/document.html#%25E5%25BF%25AB%25E9%2580%259F%25E5%2585%25A5%25E9%2597%25A8">FIS-PLUS</a></td>
<td><a href="http://fis.baidu.com/">FIS3-工程构建</a></td>
<td><a href="https://coding.net/">CODING-团队协作</a></td>
<td><a href="https://tortoisesvn.net/downloads.zh.html">下载SVN</a></td>
</tr>
<tr>
<td><a href="http://lisperator.net/uglifyjs/">UglifyJS</a></td>
<td><a href="https://excalidraw.com/">绘图/画图</a></td>
<td><a href="https://www.yuque.com/">语雀·笔记软件</a></td>
<td>jest-JavaScript 测试框架<a href="https://jestjs.io/zh-Hans/">https://jestjs.io/zh-Hans/</a></td>
<td><a href="http://dynalon.github.io/mdwiki/#!index.md">MDkiti</a></td>
</tr>
<tr>
<td><a href="https://docsify.js.org/#/">docsify</a></td>
<td><a href="https://docsify.js.org/#/zh-cn/more-pages">docsify-中文版</a></td>
<td>拾色器-jcpicker.exe</td>
<td>beyond compare-代码对比工具</td>
<td><a href="https://cn.wordpress.org/">博客工具-workpress</a></td>
</tr>
<tr>
<td><a href="http://caibaojian.com/vuepress/guide/">VuePress</a></td>
<td><a href="https://gitee.com/">码云-gitee</a></td>
<td><a href="https://colormania.en.softonic.com/">吸色工具-ColorMania</a></td>
<td><a href="http://naotu.baidu.com/">百度脑图</a></td>
<td><a href="http://share.baidu.com/">百度分享</a></td>
</tr>
<tr>
<td><a href="https://www.pc-daily.com/ruanjian/58782.html">vscode注释快捷键</a></td>
<td><a href="http://xqtesting.sxl.cn/">fiddler-小强测试品牌</a></td>
<td></td>
<td><a href="http://html5test.com/">HTML5test</a></td>
<td><a href="https://tongji.baidu.com/web/welcome/login">百度统计</a></td>
</tr>
<tr>
<td><a href="https://github.com/fanmingfei/qiniu_cdn_tool">七牛 CDN 上传工具</a></td>
<td><a href="https://www.laozuo.org/20743.html">网站测速</a></td>
<td><a href="http://www.um.com/">友盟统计</a></td>
<td><a href="http://tongji.baidu.com/data/browser">百度PC平台浏览器，分辨率，操作系统，网名，流量统计</a></td>
<td><a href="http://tongji.baidu.com/data/mobile/brand">百度移动统计（移动端设备品牌占比，移动设备市场份额）</a></td>
</tr>
<tr>
<td><a href="https://www.netmarketshare.com/browser-market-share.aspx?qprid=0&qpcustomd=1">全球移动端浏览器统计</a></td>
<td></td>
<td><a href="http://www.umindex.com/">友盟指数</a></td>
<td><a href="http://brow.data.cnzz.com/">CNZZ桌面及移动端浏览器统计</a></td>
<td><a href="https://www.fontsquirrel.com/tools/webfont-generator">Webfont Generator</a>—在线转换字体</td>
</tr>
<tr>
<td><a href="http://www.opera.com/zh-cn/developer/mobile-emulator">Opera多终端界面模拟</a></td>
<td><a href="https://developer.ibm.com/">IBM Developer</a></td>
<td><a href="https://www.oschina.net/news/54483/21-best-node-js-frameworks-2014">为开发者推荐 21 款最佳的 Node.js 框架</a></td>
<td><a href="https://bestwebhostingaustralia.org/browserscope-org-joins-aussie-hosting/">Browser Scope Has Merged With Aussie Hosting</a>—浏览器的一些独特参数</td>
<td><a href="https://www.jetbrains.com/webstorm/">WebStorm</a></td>
</tr>
<tr>
<td><a href="https://coding.net/">Coding -让开发更简单</a></td>
<td><a href="https://www.wex5.com/wex5/?utm_source=Baidu">WeX5</a></td>
<td><a href="https://www.pintuer.com/">拼图大前端</a></td>
<td><a href="https://github.com/jikeytang/sublime-text">sublime-text</a></td>
<td><a href="https://account.aliyun.com/login/login.htm?oauth_callback=https://pts.aliyun.com/lite/test.htm?spm=0.0.0.0.cI5G4F&lang=zh#/home">性能测试</a></td>
</tr>
</tbody></table>
<p><a href="https://devopshub.cn/2018/10/14/mdwiki/">使用 MDWiki 搭建个人轻博客、知识库或文档中心</a></p>
<ul>
<li>站长工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://tool.chinaz.com/map.aspx">日常实用工具-站长工具</a></th>
<th><a href="http://mobile.chinaz.com/mft.html">移动适配报告</a></th>
<th><a href="http://mobile.chinaz.com/fitscreen.html">移动跨屏模拟</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://tool.chinaz.com/Tools/regexgenerate">正则表达式在线生成</a></td>
<td><a href="https://tool.chinaz.com/regex">正则测试</a></td>
<td><a href="http://tool.chinaz.com/js.aspx">JS混淆加密压缩</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/jsformat.aspx">JS/HTML格式化</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_js.aspx">HTML/JS转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/jscodeconfusion.aspx">JS代码混淆</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/jsonformat.aspx">JSON格式化/校验</a></td>
<td><a href="http://tool.chinaz.com/Tools/jsonescape.aspx">JSON压缩转义</a></td>
<td><a href="http://tool.chinaz.com/Tools/json2entity.aspx">JSON生成实体类</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/base64.aspx">Base64加密、解密</a></td>
<td><a href="http://tool.chinaz.com/Tools/json2get.aspx">JSON-GET互转</a></td>
<td><a href="http://tool.chinaz.com/Tools/jsoneditor.aspx">JSON在线编辑</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/scriptencode.aspx">JS加密、解密</a></td>
<td><a href="http://tool.chinaz.com/Tools/md5.aspx">MD5加密</a></td>
<td><a href="http://tool.chinaz.com/Tools/textencrypt.aspx">文字在线加密解密</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/unicode.aspx">Unicode编码转换</a></td>
<td><a href="http://tool.chinaz.com/Tools/unixtime.aspx">Unix时间戳转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/urlencode.aspx">UrlEncode编码/UrlDecode解码</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/Tools/utf-8.aspx">UTF-8 转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_js.aspx">HTML/JS转换工具</a></td>
<td><a href="http://tool.chinaz.com/Tools/html_ubb.aspx">HTML/UBB代码转换工具</a></td>
</tr>
<tr>
<td><a href="http://tool.chinaz.com/htmlfilter">在线HTML/Js/Css过滤</a></td>
<td><a href="http://tool.chinaz.com/tools/httptest.aspx">在线HTTP POST/GET接口测试</a></td>
<td><a href="http://tool.chinaz.com/tools/dwz.aspx">短链生成</a></td>
</tr>
</tbody></table>
<ul>
<li>编辑工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://code.visualstudio.com/">VScode</a></th>
<th><a href="https://www.postman.com/">Postman-接口测试</a></th>
<th><a href="http://markdown.p2hp.com/index.html">markdown</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.typora.io/">Typora</a></td>
<td><a href="http://www.navicat.com.cn/">Navicat-数据库管理</a></td>
<td>WebStorm</td>
<td></td>
<td><a href="https://sspai.com/post/52176">Notion</a></td>
</tr>
</tbody></table>
<ul>
<li>插件</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.javascriptcn.com/read-35553.html">jquery.fileDownload</a></th>
<th><a href="http://www.clipboardjs.cn/">clipboard.js-复制功能</a></th>
<th><a href="https://www.jstree.com.cn/">jsTree中文网</a></th>
<th><a href="https://www.jq22.com/">jQuery插件库</a></th>
<th><a href="https://jqueryui.com/datepicker/">Datepicker</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.cnblogs.com/ghfjj/p/6732855.html">Foundation datepicker</a></td>
<td><a href="http://foundation-datepicker.peterbeno.com/">Foundation-datepicker.js</a></td>
<td><a href="https://www.jstree.com/">jsTree-树</a></td>
<td><a href="https://ant.design/components/date-picker-cn/">Datepicker日期插件</a></td>
<td><a href="https://cloud.tencent.com/developer/section/1489878">DatePicker</a></td>
</tr>
<tr>
<td><a href="http://www.my97.net/demo/resource/main.asp#m1">My97 DatePicker</a></td>
<td><a href="http://foundation-datepicker.peterbeno.com/">Foundation-datepicker.js</a></td>
<td><a href="http://code.ciaoca.com/javascript/qrcode/demo/">QRCode.js 生成二维码</a></td>
<td><a href="https://github.com/davidshimjs/qrcodejs">qrcodejs-github</a></td>
<td><a href="http://nodeca.github.io/pako/">pako</a></td>
</tr>
<tr>
<td><a href="https://github.com/blueimp/jQuery-File-Upload">jQuery-File-Upload</a></td>
<td><a href="https://www.jq22.com/jquery-info230">jQuery File Upload-jQuery</a></td>
<td><a href="https://www.swiper.com.cn/">Swiper-滑动功能，触摸导航</a></td>
<td><a href="https://github.com/smalot/bootstrap-datetimepicker">bootstrap-datetimepicker</a></td>
<td><a href="https://demo.16css.com/qtdm/1195/demo.html">jquery.pagination.js-分页</a></td>
</tr>
<tr>
<td><a href="https://terryz.github.io/bpage/index.html">bpage-分页插件</a></td>
<td><a href="https://www.highcharts.com.cn/">Highcharts</a></td>
<td><a href="https://github.com/cubiq/iscroll">iscroll-github</a></td>
<td><a href="http://caibaojian.com/iscroll-5/">iscroll5 API</a></td>
<td><a href="http://www.htmleaf.com/ziliaoku/">jQuery之家-插件库</a></td>
</tr>
<tr>
<td><a href="http://www.bshare.cn/">bShare分享</a></td>
<td><a href="http://www.superslide2.com/">superslide</a></td>
<td><a href="http://www.jq22.com/yanshi819">Animate.css 一款强大的预设css</a></td>
<td><a href="https://jqueryui.com/datepicker/">datepicker</a></td>
<td><a href="http://www.ijquery.cn/">插件库</a></td>
</tr>
<tr>
<td><a href="https://iscrolljs.com/#initialization">iScroll.js</a></td>
<td><a href="https://jqpaginator.keenwon.com/">jqPaginator</a>-分页插件</td>
<td><a href="http://www.bshare.cn/">爱点击-bShare分享代码|分享按钮</a></td>
<td><a href="https://github.com/aui/artDialog">artDialog</a>—网页对话框</td>
<td><a href="https://blueimp.github.io/jQuery-File-Upload/">jQuery File Upload</a></td>
</tr>
<tr>
<td><a href="https://www.dowebok.com/77.html">jQuery全屏滚动插件fullPage.js</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>K线</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://blog.csdn.net/u010527630/article/details/52098999?locationNum=2&fps=1">k线图学习</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.highcharts.com/demo/stock/basic-line">Hightcharts</a></td>
<td><a href="http://h5.vstock.cairenhui.com/">k线案例</a></td>
<td><a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></td>
</tr>
<tr>
<td>CSDN-<a href="https://so.csdn.net/so/search?q=k%E7%BA%BF%E5%9B%BE">K线图</a></td>
<td><a href="http://www.zcool.com.cn/work/ZMTMzOTQ1OTY=.html">聚宝盆APP</a></td>
<td></td>
</tr>
<tr>
<td>Github-<a href="https://github.com/search?utf8=%E2%9C%93&q=k%E7%BA%BF">K线图</a></td>
<td><a href="http://www.zcool.com.cn/work/ZMTM3NzIxMzY=.html">金融App</a></td>
<td><a href="https://echarts.apache.org/handbook/zh/get-started">快速入门</a><a href="https://echarts.apache.org/examples/zh/index.html">所有示例</a><a href="https://www.zcool.com.cn/work/ZMTI5MjAwNTI=.html">股票配资</a></td>
</tr>
</tbody></table>
<p>bug论坛  <a href="https://stackoverflow.com/">stackoverflow</a></p>
<ul>
<li>网站模板</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.cssmoban.com/cssthemes/10773.shtml">CloudAdmin网站后台管理系统</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>ui框架</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://bulma.io/">bulma</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>Bulma 是一款基于 Flexbox 的现代 CSS 框架。有以下特性：</p>
<ul>
<li>响应式，Bulma 是一个优先考虑移动版的框架</li>
<li>模块化，只需导入你需要的</li>
<li>现代化，基于 Flexbox</li>
</ul>
</blockquote>
<h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><ul>
<li>Vue.js</li>
</ul>
<table>
<thead>
<tr>
<th>官网+社区</th>
<th><a href="https://vuex.vuejs.org/zh/">Vuex</a></th>
<th><a href="https://cli.vuejs.org/zh/">Vue CLI</a></th>
<th>全家桶</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://cn.vuejs.org/v2/guide/">Vue.js</a></td>
<td><a href="https://vuex.vuejs.org/api/">Vuex英文版官网</a></td>
<td><a href="https://router.vuejs.org/zh/">Vue Router</a></td>
<td><a href="https://vue-js.com/topic/5dcf8c7fe71cf96248983463">TypesScript + Node.js + Express + Mongoose</a></td>
</tr>
<tr>
<td><a href="https://www.vue-js.com/">Vue.js专业社区</a></td>
<td><a href="https://linjinze999.github.io/vue-llplatform/">vue-llplatform-搭建一个后台管理项目</a></td>
<td><a href="http://www.axios-js.com/">axios中文官网</a></td>
<td><a href="https://vue-js.com/topic/596ad6b24357a3434f91f5a3">vue+express+mongodb-个人博客</a></td>
</tr>
<tr>
<td><a href="https://vuejs.org/v2/guide/list.html#Maintaining-State">Vue.js英文版官网</a></td>
<td></td>
<td></td>
<td><a href="https://www.vue-js.com/topic/5979b2d04357a3434f91f82c">vue2+node(express)+mongodb(mongoose)</a></td>
</tr>
<tr>
<td><a href="https://vueschool.io/courses">Vue School</a></td>
<td><a href="https://www.vue-js.com/topic/5ed9ba550ef711364aa1f258">Vue优秀文章集合</a></td>
<td><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></td>
<td><a href="https://vue-js.com/topic/592e7622fbaee51e2432c1e2">vue+websocket+express+mongodb-实时聊天</a></td>
</tr>
<tr>
<td><a href="https://learning.dcloud.io/#/">Vue.js教程</a></td>
<td><a href="https://www.vue-js.com/topic/5ed9b90c0ef711364aa1f255">Vue3学习资源集合</a></td>
<td><a href="https://panjiachen.github.io/vue-element-admin-site/zh/">vue-element-admin</a></td>
<td><a href="https://segmentfault.com/a/1190000013025450">vue+node+mongodb-搭建博客</a></td>
</tr>
<tr>
<td><a href="http://coffee-script.org/">CoffeeScript</a></td>
<td><a href="https://ant.design/index-cn">Ant</a></td>
<td><a href="https://bulma.io/">Bulma</a></td>
<td><a href="https://github.com/seajs/seajs">Seajs</a></td>
</tr>
<tr>
<td><a href="https://cn.wordpress.org/">WordPress</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="vue-llplatform-基于Vue-Element搭建一个后台管理项目"><a href="#vue-llplatform-基于Vue-Element搭建一个后台管理项目" class="headerlink" title="vue-llplatform-基于Vue + Element搭建一个后台管理项目"></a>vue-llplatform-基于Vue + Element搭建一个后台管理项目</h5><p>教学说明：<a href="https://linjinze999.github.io/vue-llplatform/">https://linjinze999.github.io/vue-llplatform/</a></p>
<p>源码地址：<a href="https://github.com/linjinze999/vue-llplatform">https://github.com/linjinze999/vue-llplatform</a></p>
<p>在线预览：<a href="https://linjinze999.github.io/vue-llplatform/preview/#/login">https://linjinze999.github.io/vue-llplatform/preview/#/login</a></p>
<h4 id="View-UI"><a href="#View-UI" class="headerlink" title="View UI"></a>View UI</h4><table>
<thead>
<tr>
<th><a href="https://www.iviewui.com/docs/introduce">View UI</a> (基于vue.js UI框架)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>React</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://zh-hans.reactjs.org/">React中文官网</a></th>
<th><a href="https://github.com/facebook/react/blob/main/CHANGELOG.md">React-GitHub</a></th>
<th><a href="https://zh-hans.reactjs.org/docs/react-component.html">React-API</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://zh-hans.reactjs.org/docs/glossary.html">React 术语词汇表</a></td>
<td><a href="https://zh-hans.reactjs.org/docs/faq-structure.html">项目文件结构</a></td>
<td><a href="https://reactrouter.com/">React Router—看这里的最新用法</a></td>
</tr>
<tr>
<td><a href="https://zh-hans.reactjs.org/docs/faq-ajax.html">AJAX and APIs</a></td>
<td><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html">react-边学边做</a></td>
<td><a href="https://zh-hans.reactjs.org/blog/2021/12/17/react-conf-2021-recap.html">react版本更新</a></td>
</tr>
<tr>
<td><a href="https://zh-hans.reactjs.org/docs/faq-state.html">组件状态</a></td>
<td><a href="https://atomicdesign.bradfrost.com/">Atomic Design by Brad Frost</a></td>
<td><a href="https://github.com/facebook/react/releases">react版本</a></td>
</tr>
<tr>
<td><a href="https://www.nextjs.cn/">Next.js</a></td>
<td><a href="https://github.com/typescript-cheatsheets/react">React+TypeScript Cheatsheets</a></td>
<td><a href="https://bradfrost.com/blog/post/atomic-web-design/">原子设计</a></td>
</tr>
<tr>
<td><a href="https://github.com/reduxjs/redux">Redux</a></td>
<td><a href="https://github.com/reduxjs/rtk-convert-todos-example">rtk-convert-todos-example</a></td>
<td><a href="https://github.com/nokazn/redux-essentials-example">redux-essentials-example</a></td>
</tr>
<tr>
<td><a href="https://github.com/HY88883/admin-client_final_redux">admin-client_final_redux</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Element-UI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://element.eleme.cn/2.13/#/zh-CN/component/installation">Element</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Vant</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://youzan.github.io/vant/#/zh-CN/form">Vant</a></th>
<th><a href="https://github.com/vant-ui/vant-demo">vant-ui—vant-demo</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://youzan.github.io/vant-weapp/#/intro">Vant Weapp</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>layuiAdmin Pro</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.layui.com/admin/pro/#/">layuiAdmin Pro</a></th>
<th><a href="https://cba.github.io/layuiAdmin-doc/">layuiAdmin pro v1.x 开发者文档</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/pizepei">pizepei</a> / <a href="https://github.com/pizepei/LayuiAdminProPHP">LayuiAdminProPHP</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Node.js</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://nodejs.org/en/">Node.js</a></th>
<th><a href="https://pan.baidu.com/s/12ixFs">《深入浅出Node.js.pdf》</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://nodejs.cn/">Node.js中文网</a></td>
<td><a href="https://github.com/nvm-sh/nvm">nvm</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Git</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://git-scm.com/">Git官网</a></th>
<th><a href="https://git-scm.com/book/zh/v2">Git文档</a></th>
<th><a href="https://www.w3cschool.cn/git/git-tutorial.html">Git教程_w3cschool</a></th>
<th><a href="https://gitforwindows.org/">安装包下载地址</a></th>
<th><a href="https://git-scm.com/docs">Git完整命令手册</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://npm.taobao.org/mirrors/git-for-windows/">git-for-windows Mirror</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用Git命令清单</a></td>
<td><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰官方网站</a></td>
<td><a href="https://desktop.github.com/">Github客户端</a></td>
<td><a href="https://www.w3cschool.cn/statics/demosource/github-git-cheat-sheet.pdf">PDF版命令手册</a></td>
</tr>
<tr>
<td><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html">Git远程操作详解</a></td>
<td><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a></td>
<td><a href="https://blog.csdn.net/duomoke/article/details/49992039">git操作详解（阮一峰）</a></td>
<td><a href="https://www.techug.com/post/git-use-process.html">阮一峰：Git 使用规范流程</a></td>
<td><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">非常详细准确的git学习资料</a></td>
</tr>
<tr>
<td><a href="https://github.com/flyhigher139/Git-Cheat-Sheet#%E9%85%8D%E7%BD%AE">git-cheat-sheet中文版</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>MongoDB</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.mongodb.com/">MongoDB</a></th>
<th><a href="https://www.mongodb.com/cn">mongoDB</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.mongodb.org.cn/">mongoDB</a></td>
<td><a href="https://www.jianshu.com/p/60e5775937b5">mongoDB基本操作</a></td>
<td></td>
<td></td>
<td><a href="https://docs.mongodb.com/manual/">MongoDB Manual</a></td>
</tr>
</tbody></table>
<ul>
<li>Hexo</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://hexo.io/zh-cn/index.html">Hexo</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://bigzcoder.gitee.io/2020/06/27/autohexomaker/">Hexo自动化工具</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Markdown</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://markdown.p2hp.com/">Markdown中文网</a></th>
<th></th>
<th><a href="https://www.jianshu.com/p/093aba73b751?utm_source=oschina-app">用“思维导图”写md</a></th>
<th><a href="https://www.jianshu.com/p/e74eb43960a1">md数学公式语法</a></th>
<th><a href="https://www.jianshu.com/p/abb8b9407911">有道云md输入数学公式</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.markdownguide.org/">Markdown Guide</a></td>
<td><a href="http://www.mdeditor.com/">md在线编辑器</a></td>
<td><a href="https://www.jianshu.com/p/25f0139637b7">md中公式编辑教程</a></td>
<td><a href="https://www.jianshu.com/p/c2814458dbfe">md 公式指导手册</a></td>
<td><a href="https://list.yinxiang.com/markdown/eef42447-db3f-48ee-827b-1bb34c03eb83.php">印象笔记 md 入门指南</a></td>
</tr>
<tr>
<td><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/?id=markdown-preview-enhanced">Markdown Preview Enhanced</a></td>
<td></td>
<td></td>
<td><a href="http://note.youdao.com/iyoudao/?p=2411">有道云笔记md指南-简明</a></td>
<td><a href="http://note.youdao.com/iyoudao/?p=2445">有道云笔记md指南-进阶</a></td>
</tr>
</tbody></table>
<blockquote>
<p><strong>Markdown Preview Enhanced</strong> 是一款为 <a href="https://atom.io/packages/markdown-preview-enhanced"><strong>Atom</strong></a> 以及 <a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced"><strong>Visual Studio Code</strong></a> 编辑器编写的<strong>超级强大的</strong> Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。</p>
</blockquote>
<ul>
<li>ECMAScript 6</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://es6.ruanyifeng.com/">ECMAScript 6</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.jianshu.com/p/2bfb741b1f01">Promise完全详解</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Typescript</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.typescriptlang.org/">Typescript</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.typescriptlang.org/zh/">Typescript中文</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Layui</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.layui.com/">layui</a></th>
<th><a href="https://fly.layui.com/notice/close.html">layui社区</a></th>
<th><a href="https://gitee.com/sentsin/layui/issues">layui-码云</a></th>
<th><a href="https://fly.layui.com/extend/xmSelect/">xmSelect下拉多选</a></th>
<th><a href="https://maplemei.gitee.io/xm-select/#/component/install">xm-select文档</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://fly.layui.com/extend/excel/">layui.excel</a></td>
<td><a href="http://excel.wj2015.com/_book/">LAY-EXCEL-导出插件</a></td>
<td><a href="https://fly.layui.com/extend/">layui 第三方组件平台</a></td>
<td><a href="https://fly.layui.com/extend/formSelects/#doc">formSelects 4</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Bootstrap</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://v2.bootcss.com/index.html">Bootstrap</a></th>
<th><a href="http://expo.bootcss.com/">Bootstrap优站精选</a></th>
<th><a href="http://www.bootcss.com/">Bootstrap中文网</a></th>
<th><a href="http://v3.bootcss.com/">Bootstrap 中文文档</a></th>
<th><a href="https://www.bootcss.com/p/layoutit/">Bootstrap可视化布局系统-</a>拖拽布局</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.bootstrap-table.com.cn/doc/api/table-options/#rowstyle">Bootstrap-Table</a></td>
<td><a href="http://www.w3cschool.cc/bootstrap/bootstrap-intro.html">Bootstrap 简介 | w3cschool菜鸟教程</a></td>
<td><a href="http://www.bootcss.com/p/layoutit/">Bootstrap可视化布局系统</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Flutter</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://flutterchina.club/get-started/install/">Flutter中文网</a></th>
<th><a href="https://juejin.cn/tag/Flutter?utm_source=flutterchina&utm_medium=word&utm_medium=word&utm_content=btn&utm_content=btn&utm_campaign=q3_website?utm_source=flutterchina&utm_campaign=q3_website">Flutter-掘金标签</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/flutter/flutter/wiki">flutter-github</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>H+</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://yanshi.sucaihuo.com/modals/40/4078/demo/">H+</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Weex</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://weex.apache.org/zh/guide/introduction.html">Weex</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>WeUI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://weui.io/1.x/">WeUI</a></th>
<th><a href="https://www.kancloud.cn/ywfwj2008/weui/274286">WeUI中文文档</a></th>
<th><a href="http://weui.github.io/weui">WeUI 官方 Demo</a></th>
<th><a href="https://github.com/weui/weui/wiki">WeUI 官方 Wiki</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developers.weixin.qq.com/miniprogram/design/#%E9%87%8D%E7%82%B9%E7%AA%81%E5%87%BA">微信小程序设计指南</a></td>
<td><a href="https://github.com/weui/weui">WeUI 官方 Github</a></td>
<td><a href="https://github.com/weui/weui/releases">WeUI 官方 Releases</a></td>
<td></td>
<td><a href="https://www.jianshu.com/p/6c8e55fc501b">WeUI简明入门指南</a></td>
</tr>
</tbody></table>
<ul>
<li>MUI</li>
</ul>
<table>
<thead>
<tr>
<th><strong><a href="https://github.com/liganghui/mui-learn-demo"> mui-learn-demo</a></strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/dcloudio/mui">mui-github</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://dcloud.io/hellomui/">Hello mui</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>jQuery</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://jquery.com/">jQuery</a></th>
<th><a href="http://www.jquery123.com/">jQuery | jQuery 中文网</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.jq22.com/">jQuery插件库</a></td>
<td><a href="http://www.jeasyui.net/">JQuery EasyUI中文网</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>jQuery MiniUI</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.miniui.com/index.html">jQuery MiniUI</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>webpack</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.webpackjs.com/">webpack中文文档</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Babel</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://babeljs.io/">Babel</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.babeljs.cn/">Babel中文网</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>FastAdmin</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.fastadmin.net/">FastAdmin框架文档</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Express</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.expressjs.com.cn/">Express</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>uni-app</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://uniapp.dcloud.io/">uni-app</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>QRcode.js-二维码生成器</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/davidshimjs/qrcodejs">qrcode-github</a></th>
<th><a href="http://code.ciaoca.com/javascript/qrcode/">qrcode-文档</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/w3cnote/javascript-qrcodejs-library.html">qrcode-菜鸟教程</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://github.com/NicepageApp/Nicepage">NicePage</a>：基于强大的<a href="https://www.layui.com/"> layui </a>框架,通过扩展laypage.js, <a href="https://github.com/nicez2/nicepage">nicePage.js</a>实现JSON数据格式的自动表格分页和跳转功能</p>
<ul>
<li>Sea.js</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.w3cschool.cn/seajs/">sea.js使用手册</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/seajs/seajs">sea.js-github</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>yarn</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://yarnpkg.com/">yarn</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>nvm</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://github.com/nvm-sh/nvm">nvm-github</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>GUI</p>
<h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><table>
<thead>
<tr>
<th><a href="https://www.cnblogs.com/manongxiaobing/p/4720568.html">移动端图片上传解决方案localResizeIMG先压缩后ajax无刷新上传</a></th>
<th><a href="https://www.iteye.com/blog/elim-1109315">使用swfUpload进行批量上传图片</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://segmentfault.com/q/1010000000094937">关于客户端JS能否等比例压缩图片的请教</a></td>
<td><a href="https://www.cnblogs.com/zjfree/archive/2010/12/26/1917222.html">图片压缩后上传【Flash】</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.jb51.net/article/68949.htm">angularjs客户端实现压缩图片文件并上传实例</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://blog.csdn.net/alexwang1983/article/details/46744207">在angularjs客户端压缩图片文件然后上传</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul>
<li>资源网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://huaban.com/">花瓣网</a></th>
<th><a href="https://unsplash.com/">Unsplash-免版权图库</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://v.paixin.com/">拍信创意</a></td>
<td><a href="https://showroom.littleworkshop.fr/">室内设计稿</a></td>
<td><a href="https://www.taptap.com/">TapTap-发现好游戏</a></td>
<td><a href="https://www.5tu.cn/colors/yansebiao.html">百图汇-颜色表</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>图库网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.socwall.com/">Desktop Wallpaper-壁纸</a></th>
<th><a href="https://pixabay.com/zh/photos/?order=latest">免费正版高清照片素材库</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://desktopography.net/">Desktopgraphy-壁纸</a></td>
<td><a href="https://500px.com/popular">热门照片-500px</a></td>
<td><a href="https://www.123rf.com.cn/">图片库-专业商业图片素材网</a></td>
</tr>
<tr>
<td><a href="https://www.stockvault.net/">Free Stock Photos，Images</a></td>
<td><a href="https://www.pexels.com/zh-cn/">Pexels-免费素材图片</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://wallhaven.cc/">Awesome Wallpapers-壁纸</a></td>
<td><a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">百度识图</a></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>学习网站</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.gogoup.com/">站酷高高手</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.snipaste.com/">Snipaste-颜色吸取</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.figma.com/">Figma-设计工具</a></td>
<td><a href="https://figmachina.com/">Figma-中文</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>原型</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.xiaopiu.com/square?platform=web">即时原型</a></th>
<th><a href="http://www.colordrop.io/">Colordrop</a></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.yrucd.com/">云端</a></td>
<td><a href="http://khroma.co/">khroma</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://creativemarket.com/">Creative</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://placeit.net/">Placeit</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h3><table>
<thead>
<tr>
<th><a href="https://study.163.com/course/introduction.htm?courseId=214003#/courseDetail?tab=1">手绘POP生活插画精选范例-汤小元</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>视频素材</p>
<p><a href="https://699pic.com/media/">摄图</a></p>
<p><a href="https://www.paixin.com/video">拍信创意</a></p>
<p><a href="https://www.51miz.com/so-sound/220452.html?utm_term=1682992&utm_source=baidu&bd_vid=7543317075384873797">音频下载</a></p>
<h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul>
<li>资源网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.52pojie.cn/">吾爱破解</a></th>
<th><a href="http://www.nlc.cn/dsb_zyyfw/ts/tszyk/">中国国家图书馆</a></th>
<th><a href="https://www.zjlib.cn/zyzxyd/index.htm">在线阅读</a></th>
<th><a href="http://www.rejoiceblog.com/">rejoice-海量电子书</a></th>
<th><a href="https://www.sohu.com/a/255356802_800660">52个办案检索网站</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.gzlib.org.cn/">广州图书馆</a></td>
<td><a href="http://h.bkzx.cn/">中国大百科全书数据库</a></td>
<td><a href="https://www.mbalib.com/">MBA智库</a></td>
<td><a href="http://www.360doc.com/index.html">360doc个人图书馆</a></td>
<td><a href="https://se.zhangyue.com/channel/index?appId=fcfa84ba">公共数字文化工程</a></td>
</tr>
<tr>
<td><a href="http://opac.gzlib.org.cn/opac/reader/login?returnUrl=/reader/space">我的图书馆</a></td>
<td><a href="https://max.book118.com/">原创力文档</a></td>
<td><a href="http://czjy.100xuexi.com/">电子书</a></td>
<td><a href="http://gz.bendibao.com/life/20121121/110006.shtml">广州居住证办理地点-览表</a></td>
<td><a href="http://www.legalinfo.gov.cn/pub/sfbzhfx/index.html">智慧普法平台</a></td>
</tr>
<tr>
<td><a href="http://ds.eywedu.com/">在线读书网</a></td>
<td><a href="http://www.cas.cn/ky/kycc/kxsjk/">科学数据库-中国科学院</a></td>
<td><a href="https://mso.pansoso.com/">网盘搜索</a></td>
<td><a href="http://deng.resgain.net/index.html">姓名参考网</a></td>
<td><a href="https://www.net-a-porter.com/cn/zh/?cm_mmc=BaiduChinaCN--c-_-NAP_CN_CN_SIMPLE-_-BrandZone--PCtitle-_-newarrivals">NET-A-PORTER.COM-购物</a></td>
</tr>
<tr>
<td><a href="http://ishare.iask.sina.com.cn/">sina爱问共享资料</a></td>
<td><a href="http://www.qqstudent.com/baidupanxuexi/">百度云网盘资源</a></td>
<td><a href="http://www.qqstudent.com/search.php">QQ学生网</a></td>
<td><a href="http://tieba.baidu.com/f/user/passport?jumpUrl=http://tieba.baidu.com">百度贴吧</a></td>
<td><a href="http://focus.tianya.cn/">天涯社区</a></td>
</tr>
<tr>
<td><a href="http://cha.buyiju.com/">卜易居-实用查询</a></td>
<td><a href="http://www.tup.tsinghua.edu.cn/index.html">清华大学出版社</a></td>
<td><a href="https://www.zhihu.com/">知乎</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>网站模板</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.cssmoban.com/">模板之家</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.wemorefun.com/">微魔</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cssmoban.com/preview/index.html?url=http://demo.kangjingept.com:8020/cssthemes6/4.10ZF02/index.html&id=21150&tid=20125072756579">数据管理后台模板参考</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cssmoban.com/preview/index.html?url=http://demo.kangjingept.com:8020/cssthemes6/1.13ZF04/index.html&id=17280&tid=20137004880497">企事业通用后台管理模板</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>工具网站</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://pandownload.com/">PanDownload-下载</a></th>
<th><a href="https://duplicatefilefinder4pc.com/duplicate-file-finder-plus.htm?selectedTab=updates">Duplicate-重复文件查找器</a></th>
<th><a href="http://www.navicat.com.cn/products/navicat-for-mysql/">Navicat</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.yuque.com/">语雀-写作工具</a></td>
<td><a href="https://www.voidtools.com/zh-cn/">Everything-快速定位文件</a></td>
<td><a href="https://www.wangeditor.com/">wangEditor-富文本编辑器</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://saladict.crimx.com/">Saladict 沙拉查词</a></td>
<td><a href="https://www.i4.cn/">爱思助手-苹果刷机</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://ad.oceanengine.com/pages/login/index.html">广告投放平台</a></p>
<ul>
<li>资讯网</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://www.admin5.com/">A5创业网</a></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://news.baidu.com/">百度新闻</a></td>
<td><a href="https://shixian.com/">实现网</a></td>
<td></td>
</tr>
</tbody></table>
<h3 id="教师资格证"><a href="#教师资格证" class="headerlink" title="教师资格证"></a>教师资格证</h3><table>
<thead>
<tr>
<th><a href="http://ntce.neea.edu.cn/">NTCE - 中国教育考试网</a></th>
<th><a href="http://www.zgjsks.com/html/2019/linianzhenti_0107/351947.html">中公教师</a></th>
<th><a href="http://www.hteacher.net/zige/">华图教师</a></th>
<th><a href="https://www.tingkez.com/">听课站</a></th>
<th><a href="http://www.dogwood.com.cn/">新东方图书网</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.fenbi.com/spa/tiku/guide/catalog/jszgz?prefix=jszgzhz">粉笔网题库</a></td>
<td><a href="https://www.sp910.com/">教视网-优质课</a></td>
<td><a href="https://www.xueersi.com/">学而思网校</a></td>
<td><a href="http://www.dzkbw.com/">电子课本网</a></td>
<td><a href="https://www.pep.com.cn/">人民教育出版社</a></td>
</tr>
<tr>
<td><a href="https://www.zxxk.com/">学科网</a></td>
<td><a href="https://www.21cnjy.com/">21世纪教育网-教案-课件</a></td>
<td><a href="https://book.21cnjy.com/">21书城-资源专辑</a></td>
<td><a href="http://www.dearedu.com/">第二教育网</a></td>
<td><a href="https://www.17kjs.com/Course/together?exam=certification&type=interview">一起考教师-面试</a></td>
</tr>
<tr>
<td><a href="https://www.examw.com/">中华考试网</a></td>
<td><a href="http://www.xdf.cn/">新东方网</a></td>
<td><a href="https://tiku.baidu.com/tikupc/homepage/1742a8956bec0975f465e205">百度题库</a></td>
<td><a href="https://www.educity.cn/tiku/">e希赛</a></td>
<td><a href="https://wenku.baidu.com/">百度文库</a></td>
</tr>
<tr>
<td><a href="http://www.zgjsks.com/html/jszg/mianshi/">中公教师-面试</a></td>
<td><a href="http://www.offcn.com/">中公教育</a></td>
<td><a href="http://www.eoffcn.com/">中公网校</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>信息技术</li>
</ul>
<table>
<thead>
<tr>
<th><a href="https://book.21cnjy.com/book?stage=3&subject_id=14&version_id=0&isjin=&idtype=&typeidroot=&isfinish=&year=">高中信息技术书籍汇编</a></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://ke.qq.com/course/64825?taid=922859622956345">《Excel小白脱白系列课程》</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>数学</li>
</ul>
<table>
<thead>
<tr>
<th><a href="http://www.dzkbw.com/books/chuzhong-shuxue/">初中数学电子课本</a></th>
<th><a href="http://www.zgjsks.com/html/jszg/xueke/shuxue/">数学考试试题及答案</a></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.renjiaoshe.com/shuxue/">教师之家-数学备课网</a></td>
<td><a href="https://www.hxx100.com/show.php?id=7024">高等数学-宋浩老师</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>地理</li>
</ul>
<p>这里给大家总结了一份CIE官网推荐的A-level地理学习网站！不要太贴心了！</p>
<p><a href="https://www.zhihu.com/question/23427617">如何构建自己的笔记系统？</a></p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="https://book.douban.com/subject/3590768/">《JavaScript语言精粹》</a></p>
<p><a href="https://book.douban.com/subject/10733304/">《基于MVC的JavaScript Web富应用开发》</a></p>
<p><a href="https://book.douban.com/subject/10826093/">《HTML5实验室》</a></p>
<p><a href="https://book.douban.com/subject/23820912/">《HTML5 Canvas游戏开发实战》</a>——这书前半部分是canvas基础，后半部分是游戏的示例。</p>
<p><a href="http://book.douban.com/subject/5402708/">《 HTML5高级程序设计》</a></p>
<p><a href="https://book.douban.com/subject/26369130/">《移动Web手册》</a></p>
<p>【1】 ES5/词法 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">https://www.w3.org/html/ig/zh/wiki/ES5/lexical</a><br>【2】 阮一峰Javascript标准参考教程——语法概述 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">http://javascript.ruanyifeng.com/grammar/basic.html</a><br>【3】 W3School-Javascript高级教程——ECMAScript语法 <a href="https://www.w3.org/html/ig/zh/wiki/ES5/lexical">http://www.w3school.com.cn/js/pro_js_syntax.asp</a><br>【4】《javascript权威指南(第6版)》第2章 词法结构<br>【5】《javascript高级程序设计(第3版)》第3章 基本概念<br>【6】《javascript语言精粹(修订版)》第2章 语法<br>【7】《javascript DOM编程艺术(第2版)》第2章 Javascript语法</p>
<ol>
<li>javascript高级程序设计【红宝书】</li>
<li>javascript忍者秘籍</li>
<li>你不知道的javascript 【小黄书】</li>
<li>javascript语言精粹与编程实践【绿皮书】</li>
<li>how javascript works</li>
<li>javascript20年（电子八卦书）</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9aa1JkS2VuMVNJZFlOaWExcmdUZzU3TlVFYThJWllHazJqblQxcHhhazZxbnprREpUQ1RpY2FRYVlJd2ljZ2FBT1IyVWlidE9pYUxQVndpYjRmRnJmS0wyOWRpYncvNjQw?x-oss-process=image/format,png" alt="img"></p>
<p><strong>About Geography</strong></p>
<p><a href="http://www.geography.about.com/">www.geography.about.com</a></p>
<p><strong>Bennett</strong></p>
<p><a href="http://www.bennett.karoo.net/">www.bennett.karoo.net</a></p>
<p><strong>Geo Resources</strong></p>
<p><a href="http://www.georesources.co.uk/">www.georesources.co.uk</a></p>
<p><strong>Geography</strong></p>
<p><a href="http://www.geography.org.uk/">www.geography.org.uk</a></p>
<p><strong>Greenpeace</strong></p>
<p><a href="http://www.greenpeace.org.uk/">www.greenpeace.org.uk</a></p>
<p><strong>Kapili</strong></p>
<p><a href="http://www.kapili.com/terrarum/index.html">www.kapili.com/terrarum/index.html</a></p>
<p><strong>Panda</strong></p>
<p><a href="http://www.panda.org/">www.panda.org</a></p>
<p><strong>Pavilion</strong></p>
<p><a href="http://www.pavilion.co.uk/dwakefield">www.pavilion.co.uk/dwakefield</a></p>
<p><strong>People and Planet</strong></p>
<p><a href="http://www.peopleandplanet.net/">www.peopleandplanet.net</a></p>
<p><strong>Popexpo</strong></p>
<p><a href="http://www.popexpo.net/eMain.html">www.popexpo.net/eMain.html</a></p>
<p><strong>Schoolsnet</strong></p>
<p><a href="http://www.schoolsnet.com/cgi-bin/inetcgi/schoolsnet/classroom/geo004.jsp">www.schoolsnet.com/cgi-bin/inetcgi/schoolsnet/classroom/geo004.jsp</a></p>
<p><strong>University of Keele</strong></p>
<p>（多数政府网站链接都能找到）</p>
<p><a href="http://www.psr.keele.ac.uk/official.htm">www.psr.keele.ac.uk/official.htm</a></p>
<p><strong>World-Tourism</strong></p>
<p><a href="http://www.world-tourism.org/">www.world-tourism.org</a></p>
<p><strong>Zephryus</strong></p>
<p><a href="http://www.zephryus.demon.co.uk/geography/resources/earth/tect.html">www.zephryus.demon.co.uk/geography/resources/earth/tect.html</a></p>
<p>1、中学地理<a href="http://gzdl.2000y.net/">http://gzdl.2000y.net/</a></p>
<p>2、资源集锦之动画之高一篇<a href="http://lwl.czyz.com.cn/ziyuanjijing/donghua/gaoyi/">http://lwl.czyz.com.cn/ziyuanjijing/donghua/gaoyi/</a></p>
<p>3、互联网上的地理教学资源<a href="http://www.nhyz.org/yxx/jxzy/jy/jy1.htm">http://www.nhyz.org/yxx/jxzy/jy/jy1.htm</a></p>
<p>4、网页素材结合国<a href="http://sosoo.cnnb.net/gifs/">http://sosoo.cnnb.net/gifs/</a></p>
<p>5、中教导星多媒体教导资源库&amp;平台<a href="http://estar.rdfz.cn/">http://estar.rdfz.cn/</a></p>
<p>6、Flash作品<a href="http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi">http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi</a></p>
<p>7、CCTV国度地理<a href="http://www.cctv.com/geography/index.shtml">http://www.cctv.com/geography/index.shtml</a></p>
<p>8、中国外交部<a href="http://www.fmprc.gov.cn/chn/">http://www.fmprc.gov.cn/chn/</a></p>
<p>9、地理教师网<a href="http://dljsw.myrice.com/">http://dljsw.myrice.com/</a></p>
<p>10、地理图库<a href="http://dili.cpedu.net/tuku/tukukj.htm">http://dili.cpedu.net/tuku/tukukj.htm</a></p>
<p>11、中国国度地理中文网<a href="http://www.cng.com.cn/">http://www.cng.com.cn/</a></p>
<p>12、中国地理教学资源网<a href="http://61.142.127.153:8081/">http://61.142.127.153:8081/</a></p>
<p>13、地理教导网<a href="http://geo.qdedu.net/">http://geo.qdedu.net/</a></p>
<p>14、地理知识<a href="http://dlpy.myrice.com/adlzs.htm">http://dlpy.myrice.com/adlzs.htm</a></p>
<p>15、中国科普博览之南极<a href="http://www.kepu.org.cn/gb/earth/antarctica/index.html">http://www.kepu.org.cn/gb/earth/antarctica/index.html</a></p>
<p>16、地理教与学<a href="http://210.39.136.105/Sites/dili/">http://210.39.136.105/Sites/dili/</a></p>
<p>17、地理E家<a href="http://www.dili.cn.gs/">http://www.dili.cn.gs/</a></p>
<p>18、三思科学网<a href="http://www.oursci.org/">http://www.oursci.org/</a></p>
<p>19、北京地理教学资源网<a href="http://www.zxdl.bjedu.gov.cn/new/">http://www.zxdl.bjedu.gov.cn/new/</a></p>
<p>20、马鞍山地理教学网<a href="http://www.zxdili.com/">http://www.zxdili.com/</a></p>
<p>21、新新地理课堂<a href="http://www.hsyfg.net/tl/xinxin/news/index.asp">http://www.hsyfg.net/tl/xinxin/news/index.asp</a></p>
<p>22、<a href="http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi">http://www.hubce.edu.cn/jwc/jwc5/flash/index.cgi</a></p>
<p>23、大连教育网<a href="http://www.foredu.com.cn/subject/index.jsp?subjectid=118">http://www.foredu.com.cn/subject/index.jsp?subjectid=118</a></p>
<p>24、中国科普博览</p>
<p><a href="http://www.kepu.com.cn/gb/index.html">http://www.kepu.com.cn/gb/index.html</a></p>
<p>25、水利人的网上家园<a href="http://video.waterinfo.net.cn/">http://video.waterinfo.net.cn/</a></p>
<p>26、<a href="http://www.ltyz.gx.cn/dljxzyw/bus/">http://www.ltyz.gx.cn/dljxzyw/bus/</a></p>
<p>27、<a href="http://www.scxxt.com.cn/ziyuan/mdv/seniorgeo/">http://www.scxxt.com.cn/ziyuan/mdv/seniorgeo/</a></p>
<p>28、<a href="http://jy.nbedu.net.cn:60003/xinjc/xjc-main.htm">http://jy.nbedu.net.cn:60003/xinjc/xjc-main.htm</a></p>
<p>29、地理课堂<a href="http://www.zydl.net/news/index.asp">http://www.zydl.net/news/index.asp</a></p>
<p>30、多媒体课堂——慈溪电子备课体系<a href="http://beike.cixiedu.net/">http://beike.cixiedu.net/</a></p>
<p>31、地理柳州巴士站<a href="http://www.ltyz.gx.cn/dili/ffeeii/index.asp">http://www.ltyz.gx.cn/dili/ffeeii/index.asp</a></p>
<p>32、<a href="http://www.iecn.cn/zgpd/ccdl.htm">http://www.iecn.cn/zgpd/ccdl.htm</a></p>
<p>33、喜好者<a href="http://61.184.119.196:8018/default.aspCAI">http://61.184.119.196:8018/default.aspCAI</a></p>
<p>34、世界自然基金会中国网<a href="http://www.wwfchina.org/">http://www.wwfchina.org/</a></p>
<p>35、大科普网<a href="http://www.ikepu.com.cn/">http://www.ikepu.com.cn/</a></p>
<p>36、地理雪窗<a href="http://wujh.sosoo.net/">http://wujh.sosoo.net/</a></p>
<p>37、地理教师<a href="http://geoteach.jyjy.net.cn/">http://geoteach.jyjy.net.cn/</a></p>
<p>38、地理课<a href="http://www.qd65.qdedu.net/teacher/bbs/index.asp">http://www.qd65.qdedu.net/teacher/bbs/index.asp</a></p>
<p>39、地理课件积件库<a href="http://zjycy.myetang.com/kjzc/dlkjml.htm">http://zjycy.myetang.com/kjzc/dlkjml.htm</a></p>
<p>40、地理频道<a href="http://www.dlpd.com/">http://www.dlpd.com/</a></p>
<p>41、地理纵横<a href="http://61.130.175.245/dl/index.htm">http://61.130.175.245/dl/index.htm</a></p>
<p>42、风水宝地<a href="http://61.177.236.130/1/index.asp">http://61.177.236.130/1/index.asp</a></p>
<p>43、国度电力信息网<a href="http://www.sp.com.cn/default.htm">http://www.sp.com.cn/default.htm</a></p>
<p>44、国家基本地理信息体系<a href="http://nfgis.nsdi.gov.cn/">http://nfgis.nsdi.gov.cn/</a></p>
<p>45、海洋科学<a href="http://www.bjkp.gov.cn/gkjqy/hykx/left.htm">http://www.bjkp.gov.cn/gkjqy/hykx/left.htm</a></p>
<p>前端注重：</p>
<p>1、业务</p>
<p>2、插件，框架开发（vue,angular,react)</p>
<p>3、简化业务，提高开发效率</p>
<p><a href="https://www.zhihu.com/question/289588888">https://www.zhihu.com/question/289588888</a>  一个人的离职成本有多高</p>
<p><a href="https://remixicon.com/">https://remixicon.com/</a> 推荐一套开源图标库</p>
<p><a href="https://juejin.im/post/5cd8c361f265da03a33c5521">https://juejin.im/post/5cd8c361f265da03a33c5521</a>  25 岁，毕业写前端的这三年</p>
<p><a href="https://juejin.im/post/5cda10f9f265da0368147cc8#heading-28">https://juejin.im/post/5cda10f9f265da0368147cc8#heading-28</a>  程序员画像，十年沉浮</p>
<p><a href="https://segmentfault.com/a/1190000019147365">https://segmentfault.com/a/1190000019147365</a>  What’s New in JavaScript</p>
<p><a href="https://segmentfault.com/a/1190000019161737">https://segmentfault.com/a/1190000019161737</a>  从 React Native 到 Flutter，移动跨平台方案的真相</p>
<p><a href="https://shimo.im/docs/VXEZSWMLxlw4XB2M/read">https://shimo.im/docs/VXEZSWMLxlw4XB2M/read</a>  FDCon2019  会后资料下载</p>
<p><a href="https://chvin.github.io/react-tetris/?lan=en">https://chvin.github.io/react-tetris/?lan=en</a>  react俄罗斯方块</p>
<p><a href="https://juejin.im/post/5cd4cbe2518825408b33e9c5">https://juejin.im/post/5cd4cbe2518825408b33e9c5</a> 【译】前端练级攻略</p>
<p>《Flutter实战》电子书 <a href="https://book.flutterchina.club/">https://book.flutterchina.club</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>网站素材</category>
      </categories>
      <tags>
        <tag>网站素材</tag>
      </tags>
  </entry>
  <entry>
    <title>网页设计</title>
    <url>/2018/09/22/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h4 id="素材网"><a href="#素材网" class="headerlink" title="素材网"></a>素材网</h4><table>
<thead>
<tr>
<th><a href="https://www.nipic.com/">昵图网</a></th>
<th><a href="http://www.sccnn.com/">素材中国</a></th>
<th><a href="http://www.zcool.com.cn/">站酷</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://huaban.com/">花瓣网</a></td>
<td><a href="http://www.17sucai.com/">17素材</a></td>
<td><a href="https://www.uisdc.com/">优设网</a></td>
</tr>
<tr>
<td><a href="http://down.chinavisual.com/">视觉中国</a></td>
<td><a href="http://www.taopic.com/">淘图网</a></td>
<td><a href="http://www.sccooo.com/">素材酷</a></td>
</tr>
<tr>
<td><a href="http://www.sucaitianxia.com/">素材天下</a></td>
<td><a href="http://www.quanjing.com/">全景图库</a></td>
<td><a href="http://www.gettyimages.cn/">华盖创意</a></td>
</tr>
<tr>
<td><a href="http://www.3lian.com/">三联素材</a></td>
<td><a href="http://www.lanrentuku.com/">懒人图库</a></td>
<td><a href="http://www.mypsd.com.cn/">蚂蚁图库</a></td>
</tr>
<tr>
<td><a href="http://www.5utu.com/">无忧图库</a></td>
<td><a href="http://www.52-design.net/">设计之家</a></td>
<td><a href="http://www.coolsc.net/">酷素材</a></td>
</tr>
<tr>
<td><a href="http://plane.a963.com/">中华平面设计网</a></td>
<td><a href="http://sc.chinaz.com/">站长素材</a></td>
<td><a href="http://www.itdream.com.cn/">梦想设计</a></td>
</tr>
<tr>
<td><a href="http://www.chuangyitang.com/">创意堂</a></td>
<td><a href="http://www.web07.cn/">E网素材库</a></td>
<td><a href="http://www.uuuu.cc/sc/">下吧素材</a></td>
</tr>
<tr>
<td><a href="http://www.sc115.com/">素彩网</a></td>
<td><a href="http://www.psdsucai.com/">设计素材网</a></td>
<td><a href="http://www.yunsc.com/">云素材</a></td>
</tr>
<tr>
<td><a href="https://image.baidu.com/">百度图片</a></td>
<td><a href="https://color.adobe.com/zh/create/color-wheel/">色彩配置 - Adobe Color CC</a></td>
<td><a href="https://www.ooopic.com/">我图网</a></td>
</tr>
<tr>
<td><a href="https://www.behance.net/">Online Portfolios on Behance</a></td>
<td><a href="https://www.pinterest.com/pinterest/">Pinterest on Pinterest</a></td>
<td><a href="http://www.sccnn.com/">素材中国</a></td>
</tr>
<tr>
<td><a href="https://www.ifanr.com/">爱范儿</a></td>
<td><a href="https://www.gnomon.edu/">Gnomon</a></td>
<td><a href="http://www.uimaker.com/uimakerhtml/uidesign/icontubiao/2013/0301/69489.html">苹果APP图标UI</a></td>
</tr>
<tr>
<td><a href="https://www.hellorf.com/">站酷海洛</a></td>
<td><a href="https://www.25xt.com/subject/4667.html">一组科技主题的扁平化网站笑脸设计素材推荐</a></td>
<td><a href="https://niice.co/">Niice</a></td>
</tr>
<tr>
<td><a href="http://www.uisheji.com/">UI设计网</a></td>
<td><a href="https://www.lanrentuku.com/">懒人图库</a></td>
<td><a href="https://www.dowebok.com/">dowebok</a></td>
</tr>
<tr>
<td><a href="http://www.25xt.com/">25学堂</a></td>
<td><a href="https://www.woshipm.com/">人人都是产品经理</a></td>
<td><a href="http://www.uimaker.com/">uimaker</a>-UI设计</td>
</tr>
<tr>
<td><a href="https://ishijue.com/">爱视觉</a></td>
<td><a href="https://www.hellorf.com/">站酷海洛</a></td>
<td><a href="https://www.doooor.com/">DOOOOR</a>-国外设计欣赏网站</td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="https://isux.tencent.com/">Tencent ISUX Design</a></td>
</tr>
</tbody></table>
<h4 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h4><p>相关笔记，在有道云笔记中</p>
<p><a href="https://www.xueui.cn/ui-tutorial-collection">移动端Ui入门知识大汇集</a></p>
<blockquote>
<p>从用户体验（UX）的角度来看，要记住：表单越大，失去用户的风险就越大。保持简单，保持专注：只要求必要的数据</p>
</blockquote>
<h4 id="常用配色表"><a href="#常用配色表" class="headerlink" title="常用配色表"></a>常用配色表</h4><table>
<thead>
<tr>
<th><a href="http://tool.chinaz.com/Tools/cj">中日传统色彩</a></th>
<th><a href="http://tool.chinaz.com/Tools/use">网页常用色彩</a></th>
<th><a href="http://tool.chinaz.com/Tools/web">WEB安全色</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://tool.chinaz.com/tools/selectcolor.aspx">颜色代码查询、RGB颜色值</a></td>
<td><a href="https://color.adobe.com/zh/create/color-wheel">色轮、调色盘产生器</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="Photoshop"><a href="#Photoshop" class="headerlink" title="Photoshop"></a>Photoshop</h4><table>
<thead>
<tr>
<th><a href="https://www.uupoop.com/#/">在线PS软件</a></th>
<th><a href="https://ps.gaoding.com/#/">在线PS</a></th>
<th><a href="https://www.16xx8.com/">PS教程自学网</a></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.cutterman.cn/zh">Cutterman</a>—切图/标注工具</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.yestone.com/">字体-音乐-插画</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.vecteezy.com/">笔刷库-Vecteezy</a></td>
<td><a href="http://subtlepatterns.com/page/2/">Toptal-背景纹理</a></td>
<td></td>
</tr>
<tr>
<td><a href="https://www.16xx8.com/">PS教程自学网</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://tieba.baidu.com/f?kw=ps&ie=utf-8">ps吧-百度贴吧</a></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://www.uisdc.com/sketch-hype3-beginner-tutorial">Sketch神助攻！无代码做动效神器Hype3入门教程</a></p>
<h4 id="PS操作"><a href="#PS操作" class="headerlink" title="PS操作"></a>PS操作</h4><ul>
<li><p><a href="https://jingyan.baidu.com/article/f0062228de51a4fbd3f0c811.html">ps如何定义图案</a></p>
</li>
<li><p><a href="https://jingyan.baidu.com/article/925f8cb8f1cb23c0dce05665.html">PS技巧之添加光影效果</a></p>
</li>
<li><p><a href="https://jingyan.baidu.com/article/cdddd41c488d0753cb00e199.html">photoshop文字浮雕效果的制做</a></p>
</li>
<li><p><a href="https://jingyan.baidu.com/article/ad310e80f15ec21849f49ee4.html">用ps制作文字的浮雕立体效果</a></p>
</li>
</ul>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="http://product.dangdang.com/23497052.html">《素描的诀窍》</a></p>
<p><a href="http://product.dangdang.com/23202223.html">《铅笔素描从入门到精通》</a></p>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>网页特效</title>
    <url>/2021/01/19/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h4 id="轻松解决网站大部分特效展示问题"><a href="#轻松解决网站大部分特效展示问题" class="headerlink" title="轻松解决网站大部分特效展示问题"></a>轻松解决网站大部分特效展示问题</h4><p><a href="http://www.superslide2.com/index.html">SuperSlide</a>     <a href="https://www.swiper.com.cn/">Swiper</a>     <a href="https://github.com/nolimits4web/swiper">Swiper-github</a></p>
<h4 id="拖拽排序图片"><a href="#拖拽排序图片" class="headerlink" title="拖拽排序图片"></a>拖拽排序图片</h4><p><a href="https://www.jq22.com/jquery-info572">模仿360首页导航Div排序插件</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/note1.png" alt="移动替换效果"></p>
<p><a href="https://www.jq22.com/jquery-info14968">jquery 拖拽排序</a></p>
<h4 id="鼠标点击网页出现爱心特效"><a href="#鼠标点击网页出现爱心特效" class="headerlink" title="鼠标点击网页出现爱心特效"></a>鼠标点击网页出现爱心特效</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function(window,document,undefined)&#123;</span><br><span class="line">    var hearts = [];</span><br><span class="line">    window.requestAnimationFrame = (function()&#123;</span><br><span class="line">        return window.requestAnimationFrame ||</span><br><span class="line">        window.webkitRequestAnimationFrame ||</span><br><span class="line">        window.mozRequestAnimationFrame ||</span><br><span class="line">        window.oRequestAnimationFrame ||</span><br><span class="line">        window.msRequestAnimationFrame ||</span><br><span class="line">        function (callback)&#123;</span><br><span class="line">            setTimeout(callback,1000/60);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    init();</span><br><span class="line">    function init()&#123;</span><br><span class="line">        css(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;);</span><br><span class="line">        attachEvent();</span><br><span class="line">        gameloop();</span><br><span class="line">    &#125;</span><br><span class="line">    function gameloop()&#123;</span><br><span class="line">        for(var i=0;i&lt;hearts.length;i++)&#123;</span><br><span class="line">            if(hearts[i].alpha &lt;=0)&#123;</span><br><span class="line">                document.body.removeChild(hearts[i].el);</span><br><span class="line">                hearts.splice(i,1);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].y--;</span><br><span class="line">            hearts[i].scale += 0.004;</span><br><span class="line">            hearts[i].alpha -= 0.013;</span><br><span class="line">            hearts[i].el.style.cssText = &quot;left:&quot;+hearts[i].x+&quot;px;top:&quot;+hearts[i].y+&quot;px;opacity:&quot;+hearts[i].alpha+&quot;;transform:scale(&quot;+hearts[i].scale+&quot;,&quot;+hearts[i].scale+&quot;) rotate(45deg);background:&quot;+hearts[i].color;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line">    function attachEvent()&#123;</span><br><span class="line">        var old = typeof window.onclick===&quot;function&quot; &amp;&amp; window.onclick;</span><br><span class="line">        window.onclick = function(event)&#123;</span><br><span class="line">            old &amp;&amp; old();</span><br><span class="line">            createHeart(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function createHeart(event)&#123;</span><br><span class="line">        var d = document.createElement(&quot;div&quot;);</span><br><span class="line">        d.className = &quot;heart&quot;;</span><br><span class="line">        hearts.push(&#123;</span><br><span class="line">            el : d,</span><br><span class="line">            x : event.clientX - 5,</span><br><span class="line">            y : event.clientY - 5,</span><br><span class="line">            scale : 1,</span><br><span class="line">            alpha : 1,</span><br><span class="line">            color : randomColor()</span><br><span class="line">        &#125;);</span><br><span class="line">        document.body.appendChild(d);</span><br><span class="line">    &#125;</span><br><span class="line">    function css(css)&#123;</span><br><span class="line">        var style = document.createElement(&quot;style&quot;);</span><br><span class="line">        style.type=&quot;text/css&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            style.appendChild(document.createTextNode(css));</span><br><span class="line">        &#125;catch(ex)&#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style);</span><br><span class="line">    &#125;</span><br><span class="line">    function randomColor()&#123;</span><br><span class="line">        return &quot;rgb(&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;,&quot;+(~~(Math.random()*255))+&quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window,document);</span><br></pre></td></tr></table></figure>

<h4 id="TouchSlide"><a href="#TouchSlide" class="headerlink" title="TouchSlide"></a>TouchSlide</h4><p><a href="http://www.superslide2.com/TouchSlide/">TouchSlide</a></p>
<p>触屏滑动特效插件，移动端滑动特效，触屏焦点图，触屏Tab切换，触屏多图切换等</p>
<h4 id="点击鼠标，图片落在鼠标点击的位置"><a href="#点击鼠标，图片落在鼠标点击的位置" class="headerlink" title="点击鼠标，图片落在鼠标点击的位置"></a>点击鼠标，图片落在鼠标点击的位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/beetle.gif&quot; id=&quot;pic&quot; style=&quot;visibility:hidden;position:absolute&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function show()&#123;</span><br><span class="line">        pic.style.left = event.x + &quot;px&quot;;</span><br><span class="line">        pic.style.top  = event.y + &quot;px&quot;;</span><br><span class="line">        pic.style.visibility = &quot;visible&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    document.onclick = show;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="鼠标移到文字上，出现提示信息"><a href="#鼠标移到文字上，出现提示信息" class="headerlink" title="鼠标移到文字上，出现提示信息"></a>鼠标移到文字上，出现提示信息</h4><ul>
<li><p>使用title属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; title=&quot;提示信息&quot;&gt;超链接文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义事件和自定义样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;tip&quot; &gt;这是提示信息&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; onMouseOver=&quot;mm()&quot; onmouseout=&quot;tip.style.visibility=&#x27;hidden&#x27;&quot;&gt;超链接文字&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link&#123;text-decoration: none;&#125;</span><br><span class="line">#tip&#123;</span><br><span class="line">    background:#fcfcfc;</span><br><span class="line">    position:absolute;</span><br><span class="line">    width:auto;</span><br><span class="line">    height:auto;</span><br><span class="line">    visibility:hidden;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    border:1px solid #ccc;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    border-radius:4px;</span><br><span class="line">    box-shadow: 2px 4px 7px #ccc;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function mm()&#123;  </span><br><span class="line">        tip.style.visibility=&#x27;visible&#x27;;</span><br><span class="line">        tip.style.top = (event.y+10) + &quot;px&quot;;</span><br><span class="line">        tip.style.left = (event.x+10) + &quot;px&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="按←↑→↓键移到图片位置"><a href="#按←↑→↓键移到图片位置" class="headerlink" title="按←↑→↓键移到图片位置"></a>按←↑→↓键移到图片位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img id=&quot;pic&quot; src=&quot;images/beetle.gif&quot; style=&quot;position:absolute;left:100px;top:100px;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function move()&#123;</span><br><span class="line">        var key = event.keyCode;</span><br><span class="line">        var x = parseInt(pic.style.left);</span><br><span class="line">        var y = parseInt(pic.style.top);</span><br><span class="line">        var step = 10;</span><br><span class="line">        if (key == 37)  pic.style.left = x - step + &quot;px&quot;;</span><br><span class="line">        if (key == 38)  pic.style.top  = y - step + &quot;px&quot;;</span><br><span class="line">        if (key == 39)  pic.style.left = x + step + &quot;px&quot;;</span><br><span class="line">        if (key == 40)  pic.style.top  = y + step + &quot;px&quot;;</span><br><span class="line"></span><br><span class="line">        console.log(key)</span><br><span class="line">        console.log(x)</span><br><span class="line">        console.log(y)</span><br><span class="line">    &#125;</span><br><span class="line">    document.onkeydown=move;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="文字滚动效果"><a href="#文字滚动效果" class="headerlink" title="文字滚动效果"></a>文字滚动效果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;marquee direction =&quot;left&quot; onMouseOver=&quot;this.stop()&quot; onMouseOut=&quot;this.start()&quot; scrollamount=3&gt;JavaScript特效制作最新JavaScript特效常用HTML标签讲解ASP入门教程Dreamweaver 8 教程</span><br><span class="line">&lt;/marquee&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用鼠标拖到图片到相应位置"><a href="#使用鼠标拖到图片到相应位置" class="headerlink" title="使用鼠标拖到图片到相应位置"></a>使用鼠标拖到图片到相应位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;images/beetle.gif&quot;  style=&quot;position:absolute;left:0px;top:0px;&quot; onMouseDown=&quot;dragImage(this)&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var down = false;</span><br><span class="line">    var x,y,imgID;</span><br><span class="line"></span><br><span class="line">    function dragImage(obj)&#123;</span><br><span class="line">        imgID = obj;</span><br><span class="line">        x = event.x - parseInt(imgID.style.left);</span><br><span class="line">        y = event.y - parseInt(imgID.style.top);</span><br><span class="line"></span><br><span class="line">        down=true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function cancelDrag()&#123;  down=false; &#125;</span><br><span class="line"></span><br><span class="line">    function moveImage()&#123;</span><br><span class="line">        if(down)&#123;</span><br><span class="line">            //要加上单位“px”，不然图片不能移动</span><br><span class="line">            imgID.style.left  = (event.x - x) + &quot;px&quot;;</span><br><span class="line">            imgID.style.top   = (event.y - y) + &quot;px&quot;;   </span><br><span class="line"></span><br><span class="line">            event.returnValue = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    document.onmousemove = moveImage;</span><br><span class="line">    document.onmouseup = cancelDrag;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/winney/work/blob/master/effects/follow-mouse/mousemove.html">跟随鼠标移动的文字</a></p>
<h4 id="tpanorama-全景图"><a href="#tpanorama-全景图" class="headerlink" title="tpanorama-全景图"></a>tpanorama-全景图</h4><p><a href="https://github.com/ConardLi/tpanorama">github地址</a></p>
<p><a href="http://www.bootstrapmb.com/item/5657/preview">效果预览</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机常用命令</title>
    <url>/2019/07/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="命令行新建文件和文件夹"><a href="#命令行新建文件和文件夹" class="headerlink" title="命令行新建文件和文件夹"></a>命令行新建文件和文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.cmd           ——进去命令行提示符</span><br><span class="line">2.D:            ——去到对应的盘</span><br><span class="line">3.<span class="built_in">dir</span>           ——查看d盘下所有目录和文件</span><br><span class="line">4.<span class="built_in">cd</span> baidu      ——例如进去baidu文件夹目录</span><br><span class="line">5.<span class="built_in">dir</span>           ——查看D盘baidu文件夹下的所有目录</span><br><span class="line">6.md xx         ——创建一个baidu文件夹下的xx文件夹</span><br><span class="line">7.<span class="built_in">dir</span>           ——查看xx这个文件夹已经创建成功了</span><br><span class="line">8.<span class="built_in">cd</span>.&gt;.babelrc  ——创建一个.babelrc的文件，<span class="built_in">cd</span>.表示为当前目录</span><br><span class="line">9.<span class="built_in">dir</span>           ——可以看到baidu文件夹下已经生成了“.babelrc”文件</span><br><span class="line">10.EXIT         ——退出命令行提示符</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作笔记</category>
        <category>常用命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>路由与页面间导航</title>
    <url>/2019/06/27/%E8%B7%AF%E7%94%B1%E4%B8%8E%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h5 id="从思维导图到网站地图"><a href="#从思维导图到网站地图" class="headerlink" title="从思维导图到网站地图"></a>从思维导图到网站地图</h5><h5 id="设计原型"><a href="#设计原型" class="headerlink" title="设计原型"></a>设计原型</h5><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>前端路由是直接找到与地址匹配的一个组件或者对象并将其渲染出来。改变浏览器地址而不向服务器发出请求有两种做法，一是在地址中加入#以欺骗浏览器，地址的改变是由于正在进行页内导航；二是使用HTML5的window.history功能，使用URL的Hash来模拟一个完整的URL。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router -D</span><br><span class="line"></span><br><span class="line">打开main.js文件并加入以下的引用：</span><br><span class="line">import Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import VueRouter from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h5 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h5><table>
<thead>
<tr>
<th>名称</th>
<th>路由</th>
<th>组件</th>
</tr>
</thead>
<tbody><tr>
<td>首页</td>
<td>/home</td>
<td>Home.vue</td>
</tr>
<tr>
<td>分类</td>
<td>/explorer</td>
<td>Explorer.vue</td>
</tr>
<tr>
<td>购物车</td>
<td>/cart</td>
<td>Cart.vue</td>
</tr>
<tr>
<td>我</td>
<td>/me</td>
<td>Me.vue</td>
</tr>
</tbody></table>
<blockquote>
<p>*.vue文件是Vue的单页式组件文件格式，它可以同时包括模板定义、样式定义和组件<br>模块定义。</p>
</blockquote>
<p>首先，我们在项目目录下分别建立这四个项层页面的Vue组件文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|--src</span><br><span class="line">|	|--App.vue</span><br><span class="line">|	|--assets</span><br><span class="line">|	|--Home.vue</span><br><span class="line">|	|--App.vue</span><br><span class="line">|	|--Explorer.vue</span><br><span class="line">|	|--Cart.vue</span><br><span class="line">|	|--Me.vue</span><br><span class="line">|	|--main.js</span><br><span class="line">|---webpack.config.js</span><br></pre></td></tr></table></figure>

<p>这些新建的页面组件内容暂时都可以是同样的结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--/Home.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>接下来就是在main.js文件中定义路由与这些组件的匹配规则了。VueRouter 的定义非常简单易懂，只需要创建一 个VueRouter实例，将路由path指定到一个组件类型上就可以了，代码如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.j s</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">// 引入创建的四个页面</span><br><span class="line">import Home from&#x27;./Home.vue&#x27;</span><br><span class="line">import Explorer from &#x27;./Explorer.vue&#x27;</span><br><span class="line">import Cart from &#x27;./Cart.vue&#x27;</span><br><span class="line">import Me from ’./Me.vue&#x27;</span><br><span class="line">// 使用路由实例插件</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const router = new VueRouter (&#123;</span><br><span class="line">    mode; &#x27;history&#x27;,</span><br><span class="line">    base: _dirname,</span><br><span class="line">    routes :[</span><br><span class="line">        // 将页面组件与path指定的路由关联</span><br><span class="line">        &#123;path: &#x27;/home&#x27;, component: Home&#125;，</span><br><span class="line">        &#123;path: &#x27;/explorer&#x27;，component: Explorer&#125;,</span><br><span class="line">        &#123;path: &#x27;/cart&#x27;, component: Cart&#125;，</span><br><span class="line">        &#123;path: &#x27;/me&#x27;, component: Me &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    // 将路由实例添加到Vue实例中</span><br><span class="line">    router,</span><br><span class="line">    render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在真实的项目开发中，由于我们可能需要引入很多不同的第三方库，如上述代码所示，每个库基本上都需要进行一些基本的配置，很明显这些配置会根据实际开发的需要不断地增加内容。如果我们将这些配置全部都放在main.js 文件内，那么这个全局配置文件就会变得越来越长，非常不利于维护。所以我们可以将这些配置独立出来，正如现在讲述的路由配置，我们可以将它独立到一个routes.js文件内，那么main.js的内容就会被减缩成以下的样子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import router from &#x27;./config/routes&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    // 将路由实例添加到Vue实例中</span><br><span class="line">    router,</span><br><span class="line">    render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当我们增加页面或者路由时就直接修改routes.js的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">// 引入创建的四个页面</span><br><span class="line">import Home from&#x27;./Home.vue&#x27;</span><br><span class="line">import Explorer from &#x27;./Explorer.vue&#x27;</span><br><span class="line">import Cart from &#x27;./Cart.vue&#x27;</span><br><span class="line">import Me from ’./Me.vue&#x27;</span><br><span class="line">// 使用路由实例插件</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">export default = new VueRouter (&#123;</span><br><span class="line">    mode; &#x27;history&#x27;,</span><br><span class="line">    base: _dirname,</span><br><span class="line">    routes :[</span><br><span class="line">        // 将页面组件与path指定的路由关联</span><br><span class="line">        &#123;path: &#x27;/home&#x27;, component: Home&#125;，</span><br><span class="line">        &#123;path: &#x27;/explorer&#x27;，component: Explorer&#125;,</span><br><span class="line">        &#123;path: &#x27;/cart&#x27;, component: Cart&#125;，</span><br><span class="line">        &#123;path: &#x27;/me&#x27;, component: Me &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>同理，以后凡是遇到配置文件，就可以将其放置到config目录下，在main.js中仅引用配置到全局Vue实例内的配置对象，这样会非常便于我们维护各种各样的配置。</p>
<h3 id="路由的模式"><a href="#路由的模式" class="headerlink" title="路由的模式"></a>路由的模式</h3><p>传统意义上路由是由多个URL或者URL规则组成的，对服务端而言，网页的访问是<b>无状态</b>的，称之为服务器路由。而浏览器的History API则给予了一种实现可<b>状态化</b>页面的问题，因为页面的跳转（URL的改写）并不会出现页面刷新，这样一来状态就被维护在浏览器的History的内部状态存储之中。</p>
<p>我们创建VueRouter实例时有那个了mode:history的参数，这个值的意思是使用history模式，这种模式充分利用了history.pushState API来完成URL跳转而无须重新加载页面。</p>
<p>如果不是使用history模式，当访问home的时候地址就会变为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost/<span class="comment">#home</span></span><br><span class="line"></span><br><span class="line">http://localhost/home</span><br></pre></td></tr></table></figure>
<p>这就是history模式与hash模式的区别了。<br><b>·Hash：</b>使用URL hash值来作为路由。支持所有浏览器，包括不支持HTML5 History API的浏览器。<br><b>·History：</b>依赖HTML5 History API和服务器配置。查看HTML5 History模式。<br><b>·Abstract：</b>支持所有Javascript运行环境，如Node.js服务器端。如果发现没有浏览器的API，路由会自动强制进入这个模式。</p>
<p>base为应用的基路径。例如，整个单页应用服务在/app/下，那么base就应该设为“/app/”,当你在HTML5history模式下使用base选项之后，所有的to属性都不需要写基路径了。</p>
<h3 id="路由与导航"><a href="#路由与导航" class="headerlink" title="路由与导航"></a>路由与导航</h3><p>vue-router提供了两个指令标签（directive）组件来处理这个导航与自动渲染逻辑；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">·&lt;router-view&gt;——渲染路径匹配的视图组件，它还可以内嵌自己的&lt;router-view&gt;，</span><br><span class="line">根据嵌套路径渲染嵌套组件。</span><br><span class="line">·&lt;router-link&gt;——支持用户在具有路由功能的应用中（点击）导航</span><br></pre></td></tr></table></figure>
<p>用这两个 directive替换上述的设计图我们就能清楚理解它们在页面布局上的用法了：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%B7%AF%E7%94%B1%E4%B8%8E%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%AF%BC%E8%88%AA/zujian1.png" alt="页面布局"></p>
<p>经过这样的一番分析与准备，程序主入口 App.vue组件的功能已基本清晰，接下来我们就在App.vue文件内用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code>改写<code>&lt;template&gt;</code>中的模板内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id-&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;!--使用router-link指向定义的path--&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/home&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                        	&lt;img src=&quot;../assets/images/home.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/categories&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;img src=&quot;../assets/images/category.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    	&lt;div&gt;分类&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/shopping-cart&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;img src=&quot;../assets/images/cart.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    	&lt;div&gt;购物车&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/me&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                        	&lt;img src=&quot;../assets/images/me.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;我&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;!--用router-view渲染视图--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>上述代码是否有问题?请仔细地阅读一次，然后思考一下。</p>
<p>我们来提出一些质疑:</p>
<ul>
<li>在<code>&lt;router-link&gt;</code>的to属性内显式地引用路径(如: <code>to=&quot;/shopping-cart&quot;</code>)的做法对吗?</li>
<li>这个路径不是在VueRouter的全局配置中已经出现过吗?</li>
<li>万一需要修改这个URL怎么办，在使用过的地方都要改一次?</li>
</ul>
<p>​        无论我们是做服务端开发还是前端开发，路由的使用都有一个明确的原则:<strong>不直接引用路由定义</strong>。</p>
<p>​        这是一个很容易想到的问题，当显式引用路由定义的URL一旦产生变更，所有引用的地方都需要改，当程序开始规模化时路由变得越来越多的时候，这种变更所带来的工作量是可想而知的!所以我们应该在一开始就注意到这一点，vue-router提供了一种隐式的路由引用方式，vue-router将之称为“命名路由”，简单点说就是通过路由的名称引用取代URL的直接引用。为此我们需要先在 VueRouter 的配置上做一些重构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const router = new vueRouter(&#123;</span><br><span class="line">    mode: &#x27;history&#x27;,</span><br><span class="line">    base: dirname,routes: [</span><br><span class="line">        // 将页面组件与path指定的路由关联</span><br><span class="line">        &#123;name:&#x27;Home&#x27;, path:&#x27;/&#x27;,component: Home&#125;,</span><br><span class="line">        &#123;name:&#x27;Categories&#x27;, path:&#x27;/categories&#x27;,component: Category),</span><br><span class="line">        &#123;name:&#x27;ShoppingCart&#x27;,path:&#x27;/shopping-cart&#x27;, component: ShoppingCart),</span><br><span class="line">        &#123;name:&#x27;Me&#x27;, path:&#x27;/me&#x27;, component: Me&#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>&lt;router-link&gt;</code>内通过名称引用路由需要向to 属性传入一个对象显式声明路由的名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to-&quot;&#123;name: &#x27;Home&#x27;]&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>有一个细节需要留意，使用命名路由引用时采用的是<code>:to </code>而不是 to，因为这个时候向<code>&lt;router-link&gt;</code>传入的是一个对象<code>&#123;name:&#39;Home&#39;&#125;</code>而不是字符串。<br>按照这个规则，我们将页面上的引用改为命名路由方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;!--使用router-link指向定义的path --&gt;</span><br><span class="line">                    &lt;router-link :to=&quot;&#123;name:&#x27;Home&#x27;]&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                        &lt;img src=&quot;../assets/images/home.svg&quot;&gt;&lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link :to=&quot;&#123;name:&#x27;Categories&#x27;&#125;&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                        &lt;img src=&quot;../assets/images/category.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;分类&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link :to=&quot;&#123;name:&#x27;ShoppingCart&#x27;&#125;&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;img src=&quot; ../assets/images/cart.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;购物车&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;router-link :to=&quot;(name: &#x27;Me&#x27;&#125;&quot;&gt;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;img src=&quot;../assets/images/me.svg&quot;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div&gt;我&lt;/div&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;!--用router-view渲染视图--&gt;</span><br><span class="line">            &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>切记：虽然命名路由的方式会比直接引用path 多写一些代码，但这是值得的，因为一旦遇到路径的修改只需要在main.js 的全局路由设置中进行修改而不用在每个用到的地方都改一次!</p>
</blockquote>
<h5 id="输出指定元素"><a href="#输出指定元素" class="headerlink" title="输出指定元素"></a>输出指定元素</h5><p><code>&lt;router-link&gt;</code>组件支持用户在具有路由功能的应用中（点击）导航。通过 to属性指定目标地址，<strong>默认渲染成带有正确链接的<code>&lt;a&gt;</code>标签</strong>。也就是说，上述代码最终的输出结构是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;img src=&quot; . ./assets/images/home.svg&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt; ... &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>其实，<strong>我们并不需要输出<code>&lt;a&gt;</code>元素标记，因为我们并没有具体的链接地址</strong>，由<code>&lt;li&gt;</code>元素同样可以处理来自用户的点击切换路由的事件。<code>&lt;router-link&gt;</code>可以通过<strong>配置tag 属性</strong>生成别的标签，<strong>利用这个属性我们可以直接输出<code>&lt;li&gt;</code>而节省更多的代码</strong>，将上述代码进行重构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123;name : &#x27;Home&#x27;]&quot; tag=&quot;li&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=&quot;../assets/images/home.svg&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<p>最终的输出结果就变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    &lt;div&gt;&lt;img src=&quot;../assets/images/home. svg&quot;&gt;&lt;/div&gt;</span><br><span class="line">	....</span><br></pre></td></tr></table></figure>

<h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><p>应该先实现顶层页面还是实现所有的路由定义？<br>——先实现所有路由的定义。（因为路由是连接整个项目的主线，便于多人之间协作开发）</p>
<p>首先是图书详情,这是一个拥有多个链接入口的页面，同时它也要转换至结算页面(在界面设计中图书详情内可以点击“立即购买”，然后直接转跳至结算页)，每个图书详情显示的是单本书的详细信息，这些数据是存在于服务端的。也就是说，<strong>当转到这个页面时它应该先从服务端读取这本书的具体数据对象，那这个读取动作也必然需要通过图书的唯-编号作为查询条件。</strong>可以得到一个结论:图书详情页需要从路由中读取一个书号的参数，然后以此书号查询服务器的图书数据对象。<br>将参数作路由的习惯性做法不是在路由后面以“参数=值”的方式，因为这种方式已经非常过时与老旧，而且可读性极差，我们可以将参数融入到路由的路径定义之内成为路径的一部分，使之更具有可读性，我们称这种参数为**“动态路径参数”，具体的做法是在参数名之前加上“:”**，然后将参数写在路由的path内，具体定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes: [&#123;</span><br><span class="line">    name: &#x27;BookDetails&#x27;,</span><br><span class="line">    path:&#x27;/books/:id&#x27;,</span><br><span class="line">    component: BookDetails</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>这样定义以后，vue-router就会自动匹配所有/books/1、/books/2、…、/books/n形式在路由模式，因为这样定义的路由的数量是不确定的，所以也被称为“动态路由”。<br>在<code>&lt;router-link&gt;</code>中我们就可以<strong>加入一个params的属性</strong>来指定具体的参数值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;BookDetails&#x27;, params: &#123; id: 1&#125;&#125;&quot;&gt;</span><br><span class="line">	....</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果同时要传递多个参数，只要按以上的命名方法来加入参数，传递时在params中对应地声明参数值即可，vue-router只要匹配到路由模式的定义就会自动对参数进行分解取值。</p>
</blockquote>
<p>那在图书详情页内又如何从路由中重新将这个:id参数读取出来呢?做法非常简单，<strong>可以通过<code>$router.params</code>这个属性获取指定的参数值</strong>，例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">        const bookID = this.$router.params.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺便提一下，当使用路由参数时，例如从/books/1导航到 books/2，原来的组件实例会被复用。因为两个路由都渲染同一个组件，比起销毁再创建，复用则显得更加高效。不过,这也意味着组件的<strong>生命周期钩子不会再被调用</strong>，也就是说created、mounted等钩子函数在页面第二次加载时将失效。那么，当复用组件时，想对路由参数的变化做出响应的话，就需要在<strong>watch对象</strong>内添加对Sroute对象变化的<strong>跟踪函数:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">	template: &#x27;...&#x27;,</span><br><span class="line">	watch:&#123;</span><br><span class="line">        &#x27;$route&#x27;(to, from)&#123;</span><br><span class="line">            // 对路由变化作出响应</span><br><span class="line">         &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>$router.params</code>定义的参数必然是整个路由的其中一部分，vue-router 还可以让我们使用“/path?参数=值”的方式，也就是俗称的查询字符串（Query string)传递数据。如果要从Srouter 中读取Query string 的参数，可以使用<code>$router.query</code>.参数名的方式读取。除了params 和 query, vue-router还提供一种常量参数定义meta，我们可以在路由定义中先定义meta 的值，然后在路由实例中通过<code>$router.meta</code>参数获取具体常量值。</p>
</blockquote>
<h5 id="嵌套式路由"><a href="#嵌套式路由" class="headerlink" title="嵌套式路由"></a>嵌套式路由</h5><p>当我们将前文中首页的设计图与图书详情页的设计图放在一起就会发现一个问题，如果按照之前的做法，那么所有的页面内都应该具有与首页相同的底部导航条，也就是说如果按前文的<strong>App.vue结构定义是不可以导航到图书详情页的</strong>，请看以下的示意图：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%B7%AF%E7%94%B1%E4%B8%8E%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%AF%BC%E8%88%AA/routes3.png" alt="App结构"></p>
<p>此时就有必要对我们之前的路由结构按照界面的需要进行一次调整了。首先，所有的页面都应该处于一个大的容器内，相应地路由就需要一个根入口，其导航效果应该如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%B7%AF%E7%94%B1%E4%B8%8E%E9%A1%B5%E9%9D%A2%E9%97%B4%E5%AF%BC%E8%88%AA/routes4.png" alt="导航效果"></p>
<p><strong>由上图可知，App.vue页面除了<code>&lt;router-view&gt;</code>就不需要其他的元素了，说白了就是一个最大的页面容器。</strong><br>原有导航部分的内容应该移到一个新的页面上，也就是上图中的Main.vue。Main.vue中的<code>&lt;router-view&gt;</code>相对于App.vue中的<code>&lt;router-view&gt;</code>，就是一个用于显示子路由的视图。</p>
<p>关于视图的代码此处就不再重复了，现在重点是怎样<strong>重构 routes.js</strong> 中的路由配置要将路由显示到<strong>子视图</strong>中就要相应的子路由与之对应，那么只要在路由定义中用<strong>children数组属性</strong>就可以定义子路由，具体做法如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default =new VueRouter(&#123;</span><br><span class="line">    mode: &#x27;history&#x27;,</span><br><span class="line">    base: __dirname,</span><br><span class="line">    linkActiveClass: &quot;active&quot;,</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">        	name: &#x27;Main&#x27;,</span><br><span class="line">            path: &#x27;/&#x27;,</span><br><span class="line">            component:Main,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;name: &#x27;Home&#x27;, path:&#x27;home&#x27;,component: Home&#125;,</span><br><span class="line">                &#123;name: &#x27;Categories&#x27;, path: &#x27;categories&#x27;, component: Category&#125;,</span><br><span class="line">                &#123;name: &#x27;ShoppingCart&#x27;, path: &#x27;shopping-cart&#x27;, component:shoppingcart&#125;,</span><br><span class="line">                &#123;name: &#x27;Me&#x27;, path: &#x27;me&#x27; , component: Me&#125;,</span><br><span class="line">                &#123;name: &#x27;BookDetail&#x27;, path: &#x27;/books/:id&#x27;,component: BookDetail&#125;</span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样“Main”和“BookDetail”就会作为根路由显示于App.vue的<code>&lt;router-view&gt;</code>中，而在“Main”的children内声明的子路由自然就会显示在 Main.vue页定义的<code>&lt;router-view&gt;</code>子视图中了。</p>
<blockquote>
<p>注意：子路由中的 path 就不需要重新声明主路由上的 path了在生成路由时，主路由的 path会被自动添加到子路由之前。另外，以“1”开头的嵌套路径会被当作根路径，所以不要在子路由上加上“/“。</p>
</blockquote>
<h5 id="切页动效"><a href="#切页动效" class="headerlink" title="切页动效"></a>切页动效</h5><p>Vue提供了transition的封装组件，在下列情形中，可以给任何元素和组件添加进入（entering）和退出（leaving）的过渡效果。<br><code>&#123;% link Vue官方的中文手册  https://cn.vuejs.org/v2/guide/transitions.html %&#125; </code></p>
<ul>
<li>CSS类名-enter：定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li>
<li>CSS类名-enter-active：定义进入过渡的结束状态。在元素被插入时生效，在transition/animation完成之后移除。</li>
<li>CSS类名-leave：定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li>
<li>CSS类名-leave-active：定义离开过渡的结束状态。在离开过渡被触发时生效，在transition/animation完成之后移除。</li>
</ul>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;transition name=<span class="string">&quot;slide-fade&quot;</span>&gt;</span><br><span class="line">        &lt;router-view&gt;</span><br><span class="line">        &lt;/router-view&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .slide-fade-enter-active &#123;</span><br><span class="line">        transition: all .3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">    .slide-fade-leave-active &#123;</span><br><span class="line">        transition: all .3s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span><br><span class="line">    &#125;</span><br><span class="line">    .slide-fade-enter, .slide-fade-leave-active &#123;</span><br><span class="line">        tranform: translateX(-430px);</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="导航状态样式"><a href="#导航状态样式" class="headerlink" title="导航状态样式"></a>导航状态样式</h3><p>当用户点击Tabs上的任意一个标签组件时，组件应该进入一个“激活”的状态，显示为红色。这一点VueRouter也为我们想到了，在默认情况下当<code>&lt;router-link&gt;</code>对应的路由匹配成功时，就会自动设置class属性值为.router-link-active，如果我们想要将“激活”状态样式类命名为active，可以通过active-class属性进行设置，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123; name: &#x27;Home&#x27;&#125;&quot;</span></span><br><span class="line">        tag=<span class="string">&quot;li&quot;</span></span><br><span class="line">        active-class=<span class="string">&quot;active&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;../assets/images/home.svg&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;首页&lt;/div&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<p>如果在页面上都是这样显式的声明，那么就需要在每个<code>&lt;router-link&gt;</code>组件元素上都要写一次，这样就不DRY了。我们还可以有另一个选择，就是在VueRouter的全局配置上进行声明，直接将.router-link-active这个默认值改为active，在main.js文件内的VueRouter配置中加入以下的语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    //... 省略</span><br><span class="line">    linkActiveClass: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过linkActiveClass全局属性就能进行统一的设置了。</p>
<h5 id="精确匹配与包含匹配"><a href="#精确匹配与包含匹配" class="headerlink" title="精确匹配与包含匹配"></a>精确匹配与包含匹配</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;router-link&gt;添加“激活”状态样式类的默认依据是对URL地址的全包含匹配。</span><br><span class="line">举个例子，如果当前的路径是/home，那么&lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">也会被匹配并设置CSS类名。</span><br><span class="line">想要链接使用“精确匹配模式”，则使用exact属性。在上面的例子中，</span><br><span class="line">“Home”路由就必须以精确匹配模式，否则它的tab被点中后，</span><br><span class="line">Home的tab会始终保持“激活”状态。</span><br><span class="line"></span><br><span class="line">&lt;!-- 这个链接只会在地址为/的时候被激活 --&gt;</span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name: &#x27;Home&#x27;&#125;&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<h3 id="History的控制"><a href="#History的控制" class="headerlink" title="History的控制"></a>History的控制</h3><p>另外有一点需要附加说明，当我们在使用HTML5的 History模式的时候，每次路由的改变都会被“推”( push）到导航历史中保留，在某些情况下我们并不需要浏览器这样做，而是希望它能将原有的记录进行替换，那么我们就要了解<code>&lt;router-link&gt;</code>是如何通过编程方式控制路由进行导航的。首先 Vue实例内有一个Srouter对象，这个对象会提供三个方法，<code>&lt;router-link&gt;</code>则是用两种属性来对应这三个方法的调用：</p>
<table>
<thead>
<tr>
<th>router的方法</th>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>push()</td>
<td>—</td>
<td>默认调用此方法</td>
</tr>
<tr>
<td>append()</td>
<td>append</td>
<td>将目标URL追加到当前URL下</td>
</tr>
<tr>
<td>replace()</td>
<td>replace</td>
<td>以目标URL替换现有的URL</td>
</tr>
</tbody></table>
<p>设置replace属性的话，当点击时，会调用router.replace()而不是router.push()，于是导航后不会留下History记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;Home&#x27; &#125;&quot; replace&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<p>设置append 属性后，则在当前（相对）路径前添加基路径。例如，我们从/a导航到一个相对路径b，如果没有配置append，则路径为/b，如果配置了，则为/a/b。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123;path: &#x27;relative/path&#x27;&#125;&quot; append&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<p>你可能会对此感到一些疑惑，到底这个URL的替换与追加有什么实际的作用与意义呢?举一个非常简单的例子你就可以理解了，如果你的Vue程序运行于微信客户端，按照用户一般的使用习惯，如果要回退到上一页，就会点击微信左上角的“返回”按钮，这个时候History API就会起作用，它就会默认返回至上一次执行 push 的那条历史路径上。如果导航至一个修改个人信息的页面，然后这个页面下又有其他子页，在这些子页中如果执行了一次 push返回到个人信息页，那么用户点击左上角的“返回”按钮就不是向上一个页返回，而是返回到子页内，显然这并不是我们想看到的。简单点说，push、append和replace是直接控制访问路由在History上历史记录的插入和更新方式的,如果用户点击浏览器的前进与后退，就会激发浏览器从这个 History中查找下一个路由的位置是什么。</p>
<p>最后，在命令行内键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>就可以看到我们所需要的运行效果了。</p>
<blockquote>
<p>如果你足够好奇，对Tab上的任意图标点击右键，然后点击“查看”的话，你会惊奇地发现图片的地址与我们写在代码中的完全是不一样的。以 home.svg 为例，在浏览器中可能会是这样一个地址/dist/home.svg?65bc5719926d723e279698eaa58d7f49。其实，你不需要感到惊讶，这要归功于webpack给我们做的编译处理。在<code>&lt;template&gt;</code>中显式引用的图片会被webpack 的加载规则所识别，这个规则在webpack.config.js 中可以找到：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">        // ..．省略</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.(png|jpg|gif|svg)$/,</span><br><span class="line">            loader: &#x27;file&#x27;,</span><br><span class="line">            query:&#123;</span><br><span class="line">                name: &#x27;[name].[ext]?[hash]&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个意义在于，我们不需要再去在意程序引入了哪些资源，在发布时应该对这些资源进行哪些处理，因为 webpack已经为我们做了。</p>
<h3 id="关于Fallback"><a href="#关于Fallback" class="headerlink" title="关于Fallback"></a>关于Fallback</h3><p>由于我们将路由配置成History模式，假如用户点击 Home 上的<code>&lt;router-link&gt;</code>时，浏览器的地址栏就会自动改变成对应的URL (<a href="http://localhost/home)%E3%80%82%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%E7%9B%B4%E6%8E%A5%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5http://localhost/home%EF%BC%8C%E4%BD%A0%E4%BC%9A%E6%83%8A%E5%A5%87%E5%9C%B0%E5%8F%91%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E5%87%BA%E7%8E%B0404%E7%9A%84%E9%94%99%E8%AF%AF">http://localhost/home)。如果我们直接在浏览器输入http://localhost/home，你会惊奇地发现浏览器会出现404的错误</a>!<br>这是由于直接在浏览器输入http:/localhost/home，浏览器就会直接将这个地址请求发送至服务器，先由服务器处理路由，而客户端路由的启动条件是要访问/index.html，这样的话客户端路由就完全失效了!<br>解决的办法是将所有发到服务端的请求利用服务端的URLRewrite模板重新转发给/index.html，启动VueRouter进行处理，而浏览器地址栏的URL保持不变。<br>这个问题在开发期是不会出现的，因为我们在开发环境中使用的是 webpack 的DevServer，DevServer是对这个问题进行了处理的，只要打开webpack.config.js，找到devServer配置属性就可以见到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">devserver: &#123;</span><br><span class="line">    historyApiFallback: true</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>而当我们部署到生产环境时,就需要在Web服务器上进行一些简单配置以支持Fallback了。<br><strong>Apache</strong><br>如果使用Apache就要在它的配置文件内加入以下 URLRewrite模块的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    RewriteBase /</span><br><span class="line">    RewriteRule ^index\.html$ -[L]</span><br><span class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">    Rewritecond %&#123;REQUEST_FILENAME] !-d</span><br><span class="line">    RewriteRule ./index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Nginx</strong><br>Nginx 则更加简单，当出现404时将自动重定向至index.html：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Node.js (Express)</strong><br>如果使用Nodek.js 作为服务端的话，可以安装一个 Fallback插件以支持此功能，可以到<a href="https://github.com/bripkens/connect-history-api-fallback%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E6%AD%A4%E6%8F%92%E4%BB%B6%E3%80%82">https://github.com/bripkens/connect-history-api-fallback下载并安装此插件。</a></p>
<p><strong>其他后端程序</strong><br>如果你使用的是Python或者Ruby on Rails这一类后端程序，单纯修改Web服务端的设置是不够的,因为Nginx或者Apache会将请求通过语言解释插件转发至Python或者Rails的处理程序，由它们的路由系统去判定应如何操作，所以我们只能在后端程序中加入一些特殊的处理以支持Fallback。</p>
<p><strong>Flask(Python)</strong><br>如果使用Flask的话，增加Fallback 会比较简单，只要增加一个全局的错误捕获装饰器进行重定义即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app= Flask(__name_)</span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#x27;index.html&#x27;)</span><br><span class="line">    </span><br><span class="line">@app.app_errorhandler(404)</span><br><span class="line">def api_fall_back(e):</span><br><span class="line">    return index ()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Ruby on Rails</strong><br>以下是 Rails的 Fallback支持，假定index页面在HomeController下的是Action，那么在路由文件内的设置将是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ~/config/routes.rb</span><br><span class="line">root &#x27;hometindex&quot;</span><br><span class="line"></span><br><span class="line"># ----</span><br><span class="line"></span><br><span class="line">match &quot;path*&#x27;, :to &quot;home#index &#x27;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong><br>一旦我们进行了上述的配置，你的服务器就不再返回404错误页面，因为对于所有路径都会返回index.html文件。为了避免发生这种情况，应该在Vue应用里面覆盖所有的路由情况，然后再给出一个404页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const router =new VueRouter(&#123;</span><br><span class="line">	mode : &quot;history&#x27;,</span><br><span class="line">    routes:[</span><br><span class="line">    &#123; path: &#x27;*&#x27;,component: NotFoundComponent&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者，如果用Node.js开发后台，可以使用服务端的路由来匹配URL，当没有匹配到路由的时候返回404，从而实现 Fallback。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>《Vue2实践揭秘》</category>
      </categories>
      <tags>
        <tag>《Vue2实践揭秘》</tag>
      </tags>
  </entry>
  <entry>
    <title>资源库</title>
    <url>/2020/12/07/%E8%B5%84%E6%BA%90%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、学习网站"><a href="#1、学习网站" class="headerlink" title="1、学习网站"></a>1、学习网站</h3><h4 id="1-1、国内在线课程"><a href="#1-1、国内在线课程" class="headerlink" title="1.1、国内在线课程"></a>1.1、国内在线课程</h4><ol>
<li><a href="https://open.163.com/ted/">网易公开课</a>   有TED、可汗学院、还有国内外各大高校的课程</li>
<li><a href="http://www.dxzy163.com/">大学资源网</a> 免费学习的网站，课程从小学到大学都有</li>
<li><a href="https://www.xuetangx.com/">学堂在线</a>  清华大学发起的在线学习平台</li>
<li><a href="https://www.bilibili.com/">B站</a> </li>
</ol>
<h4 id="1-2、海外在线课程"><a href="#1-2、海外在线课程" class="headerlink" title="1.2、海外在线课程"></a>1.2、海外在线课程</h4><ol>
<li><a href="http://www.edx.org/">【edx】</a>  哈佛和MIT共同创的网站，里面有哈佛，MIT，加州伯克利等等名校的免费课程</li>
<li><a href="https://ocw.mit.edu/">【MIT OpenCourseWare】</a>  2400个大学网课，特别详细，有视频，作业problem set加答案</li>
<li><a href="https://oyc.yale.edu/">【Yale Open Course】</a>  耶鲁大学的在线本科课程，免费</li>
<li><a href="https://www.coursera.org/">【Coursera】</a>  来自全球各地大学的免费课程，这个网站上也有一些付费的课程可供选择，完成后会拿到一个整数，可以放在领英和简历上</li>
</ol>
<h4 id="虚拟白板"><a href="#虚拟白板" class="headerlink" title="虚拟白板"></a>虚拟白板</h4><p><a href="https://excalidraw.com/">Excalidraw</a> 虚拟白板，用于素描手绘图</p>
<p><a href="https://kt.fkw.com/">凡科快图</a>  凡科快图是一个完全免费的图片海报制作网站、图片编辑网站、抠图网站，功能非常全面</p>
<p>它支持的图片处理工具包括:Al抠图、图片水印、图片旋转裁剪、图片分割、艺术二维码、图片压缩、词云、图片尺寸调整、ico生成器、图片格式转换、图片拼图。</p>
<h4 id="PDF转换编辑网站"><a href="#PDF转换编辑网站" class="headerlink" title="PDF转换编辑网站"></a>PDF转换编辑网站</h4><p><a href="https://easypdf.com/cn">EasyPDF</a><br>EasyPdf是一个完全免费的PDF转换编辑网站，它主要的特点包括:完全免费、不需要登录注册、无限制使用、保证文件的安全。<br>它支持无限制使用，部分功能PDF数量和文件大小都没有限制，部分功能只是PDF数量没有限制，但是 PDF大小有5OM的限制，你需要具体查看每个功能下面的文字描述。</p>
<p><a href="https://www.shudan.vip/">书单网</a><br><a href="https://www.soushu.vip/">搜书网</a></p>
<p>[时光邮局]  </p>
<p>它主要的功能是帮助你写一封信给未来的自己，然后通过邮箱的方式在未来的某一天发给你。<br>其实它不仅可以写给未来的自己，也可以写给他人。</p>
<p><a href="http://www.360doc.com/content/20/0426/22/34153382_908586514.shtml">软件推荐</a></p>
<p><a href="https://www.yuque.com/">语雀</a>  <a href="https://www.yuque.com/yuque/help/notes-intro">使用指南</a></p>
<p><a href="https://wangdoc.com/es6/index.html">ES6教程</a><br><a href="https://github.com/ruanyf">阮一峰GitHub</a></p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>资源库</category>
      </categories>
      <tags>
        <tag>资源库</tag>
      </tags>
  </entry>
  <entry>
    <title>阮一峰Git学习笔记</title>
    <url>/2021/02/19/%E9%98%AE%E4%B8%80%E5%B3%B0Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>阮一峰网络日志：<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>
<h3 id="1、Git-工作流程"><a href="#1、Git-工作流程" class="headerlink" title="1、Git 工作流程"></a>1、Git 工作流程</h3><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。</p>
<p>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。”工作流程”在英语里，叫做”workflow”或者”flow”，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p>
<p><img src="../images/clip_image002-1613720214906.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122301.png"></p>
<p>本文介绍三种广泛使用的工作流程：</p>
<ul>
<li>Git flow</li>
<li>Github flow</li>
<li>Gitlab flow</li>
</ul>
<p>如果你对Git还不是很熟悉，可以先阅读下面的文章。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html">《Git 使用规范流程》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">《常用 Git 命令清单》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html">《Git 远程操作详解》</a></li>
</ul>
<h4 id="一、功能驱动"><a href="#一、功能驱动" class="headerlink" title="一、功能驱动"></a>一、功能驱动</h4><p>本文的三种工作流程，有一个共同点：都采用<a href="https://en.wikipedia.org/wiki/Feature-driven_development">“功能驱动式开发”</a>（Feature-driven development，简称FDD）。</p>
<p>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p>
<h4 id="二、Git-flow"><a href="#二、Git-flow" class="headerlink" title="二、Git flow"></a>二、Git flow</h4><p>最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/">Git flow</a> 。</p>
<h5 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h5><p>它最主要的特点有两个。</p>
<p><img src="../images/clip_image003.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122302.png"></p>
<p>首先，项目存在两个长期分支。</p>
<ul>
<li>主分支master</li>
<li>开发分支develop</li>
</ul>
<p>前者用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；后者用于日常开发，存放最新的开发版。</p>
<p>其次，项目存在三种短期分支。</p>
<ul>
<li>功能分支（feature     branch）</li>
<li>补丁分支（hotfix     branch）</li>
<li>预发分支（release     branch）</li>
</ul>
<p>一旦完成开发，它们就会被合并进develop或master，然后被删除。</p>
<p>Git flow 的详细介绍，请阅读我翻译的中文版<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">《Git 分支管理策略》</a>。</p>
<h5 id="2-2-评价"><a href="#2-2-评价" class="headerlink" title="2.2 评价"></a>2.2 评价</h5><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将master当作默认分支，可是开发是在develop分支进行的，这导致经常要切换分支，非常烦人。</p>
<p>更大问题在于，这个模式是基于”版本发布”的，目标是一段时间以后产出一个新版本。但是，很多网站项目是”持续发布”，代码一有变动，就部署一次。这时，master分支和develop分支的差别不大，没必要维护两个长期分支。</p>
<h4 id="三、Github-flow"><a href="#三、Github-flow" class="headerlink" title="三、Github flow"></a>三、Github flow</h4><p><a href="http://scottchacon.com/2011/08/31/github-flow.html">Github flow</a> 是Git flow的简化版，专门配合”持续发布”。它是 Github.com 使用的工作流程。</p>
<h5 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h5><p>它只有一个长期分支，就是master，因此用起来非常简单。</p>
<p>官方推荐的<a href="https://guides.github.com/introduction/flow/index.html">流程</a>如下。</p>
<p><img src="../images/clip_image005.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122305.png"></p>
<p>第一步：根据需求，从master拉出新分支，不区分功能分支或补丁分支。</p>
<p>第二步：新分支开发完成后，或者需要讨论的时候，就向master发起一个<a href="https://help.github.com/articles/using-pull-requests/">pull request</a>（简称PR）。</p>
<p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p>
<p>第四步：你的Pull Request被接受，合并进master，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p>
<h5 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h5><p>Github flow 的最大优点就是简单，对于”持续发布”的产品，可以说是最合适的流程。</p>
<p>问题在于它的假设：master分支的更新与产品的发布是一致的。也就是说，master分支的最新代码，默认就是当前的线上代码。</p>
<p>可是，有些时候并非如此，代码合并进入master分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，master分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于master分支。</p>
<p>上面这种情况，只有master一个主分支就不够用了。通常，你不得不在master分支以外，另外新建一个production分支跟踪线上版本。</p>
<h4 id="四、Gitlab-flow"><a href="#四、Gitlab-flow" class="headerlink" title="四、Gitlab flow"></a>四、Gitlab flow</h4><p><a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html">Gitlab flow</a> 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p>
<h5 id="4-1-上游优先"><a href="#4-1-上游优先" class="headerlink" title="4.1 上游优先"></a>4.1 上游优先</h5><p>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），即只存在一个主分支master，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p>
<p><a href="https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first">Chromium项目</a>就是一个例子，它明确规定，上游分支依次为：</p>
<ol>
<li>Linus Torvalds的分支</li>
<li>子系统（比如netdev）的分支</li>
<li>设备厂商（比如三星）的分支</li>
</ol>
<h5 id="4-2-持续发布"><a href="#4-2-持续发布" class="headerlink" title="4.2 持续发布"></a>4.2 持续发布</h5><p>Gitlab flow 分成两种情况，适应不同的开发流程。</p>
<p><img src="../images/clip_image006.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122306.png"></p>
<p>对于”持续发布”的项目，它建议在master分支以外，再建立不同的环境分支。比如，”开发环境”的分支是master，”预发环境”的分支是pre-production，”生产环境”的分支是production。</p>
<p>开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到master，确认没有问题，再cherry-pick到pre-production，这一步也没有问题，才进入production。</p>
<p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p>
<h5 id="4-3-版本发布"><a href="#4-3-版本发布" class="headerlink" title="4.3 版本发布"></a>4.3 版本发布</h5><p><img src="../images/clip_image007.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122307.png"></p>
<p>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从master分支拉出一个分支，比如2-3-stable、2-4-stable等等。</p>
<p>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p>
<h4 id="五、一些小技巧"><a href="#五、一些小技巧" class="headerlink" title="五、一些小技巧"></a>五、一些小技巧</h4><h5 id="5-1-Pull-Request"><a href="#5-1-Pull-Request" class="headerlink" title="5.1 Pull Request"></a>5.1 Pull Request</h5><p><img src="../images/clip_image009.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122310.png"></p>
<p>功能分支合并进master分支，必须通过Pull Request（Gitlab里面叫做 Merge Request）。</p>
<p><img src="../images/clip_image011.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122308.png"></p>
<p>前面说过，Pull Request本质是一种对话机制，你可以在提交的时候，@相关<a href="https://github.com/blog/1004-mention-autocompletion">人员</a>或<a href="https://github.com/blog/1121-introducing-team-mentions">团队</a>，引起他们的注意。</p>
<h5 id="5-2-Protected-branch"><a href="#5-2-Protected-branch" class="headerlink" title="5.2 Protected branch"></a>5.2 Protected branch</h5><p>master分支应该受到保护，不是每个人都可以修改这个分支，以及拥有审批 Pull Request 的权力。</p>
<p><a href="https://help.github.com/articles/about-protected-branches/">Github</a> 和 <a href="http://doc.gitlab.com/ce/permissions/permissions.html">Gitlab</a> 都提供”保护分支”（Protected branch）这个功能。</p>
<h5 id="5-3-Issue"><a href="#5-3-Issue" class="headerlink" title="5.3 Issue"></a>5.3 Issue</h5><p>Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p>
<p>功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如”15-require-a-password-to-change-it”。</p>
<p><img src="../images/clip_image012.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122311.png"></p>
<p>开发完成后，在提交说明里面，可以写上”fixes #14”或者”closes #67”。Github规定，只要commit message里面有下面这些<a href="https://help.github.com/articles/closing-issues-via-commit-messages/">动词</a> + 编号，就会关闭对应的issue。</p>
<ul>
<li>close</li>
<li>closes</li>
<li>closed</li>
<li>fix</li>
<li>fixes</li>
<li>fixed</li>
<li>resolve</li>
<li>resolves</li>
<li>resolved</li>
</ul>
<p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是username/repository#issue_number。</p>
<p>Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p>
<h5 id="5-4-Merge节点"><a href="#5-4-Merge节点" class="headerlink" title="5.4 Merge节点"></a>5.4 Merge节点</h5><p>Git有两种合并：一种是”直进式合并”（fast forward），不生成单独的合并节点；另一种是”非直进式合并”（none fast-forword），会生成单独节点。</p>
<p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用–no-ff参数）。只要发生合并，就要有一个单独的合并节点。</p>
<h5 id="5-5-Squash-多个commit"><a href="#5-5-Squash-多个commit" class="headerlink" title="5.5 Squash 多个commit"></a>5.5 Squash 多个commit</h5><p>为了便于他人阅读你的提交，也便于cherry-pick或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。（前提是，该分支只有你一个人开发，且没有跟master合并过。）</p>
<p><img src="../images/clip_image014.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015122309.png"></p>
<p>这可以采用rebase命令附带的squash操作，具体方法请参考我写的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html">《Git 使用规范流程》</a>。</p>
<h3 id="2、Git分支管理策略"><a href="#2、Git分支管理策略" class="headerlink" title="2、Git分支管理策略"></a>2、Git分支管理策略</h3><p>如果你严肃对待编程，就必定会使用”<a href="http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html">版本管理系统</a>“（Version Control System）。</p>
<p>眼下最流行的”版本管理系统”，非<a href="http://git-scm.com/">Git</a>莫属。</p>
<p><img src="../images/clip_image015.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070501.png"></p>
<p>相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称”快照”）的指针，因此非常快捷易用。</p>
<p>但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。</p>
<p><img src="../images/clip_image017.jpg" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070502.png"></p>
<p><a href="http://nvie.com/">Vincent Driessen</a>提出了一个分支管理的<a href="http://nvie.com/posts/a-successful-git-branching-model/">策略</a>，我觉得非常值得借鉴。它可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。理论上，这些策略对所有的版本管理系统都适用，Git只是用来举例而已。如果你不熟悉Git，跳过举例部分就可以了。</p>
<p><strong>一、主分支Master</strong></p>
<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>
<p><img src="../images/clip_image018.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070503.png"></p>
<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>
<p><strong>二、开发分支Develop</strong></p>
<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>
<p><img src="../images/clip_image019.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070504.png"></p>
<p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>
<p>Git创建Develop分支的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b develop master</span><br></pre></td></tr></table></figure>

<p>将Develop分支发布到Master分支的命令：</p>
<p>　　### 切换到Master分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>



<p>　　### 对Develop分支进行合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge --no-ff develop</span><br></pre></td></tr></table></figure>

<p>这里稍微解释一下，上一条命令的–no-ff参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。</p>
<p><img src="../images/clip_image020.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070505.png"></p>
<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的<a href="http://sandofsky.com/blog/git-workflow.html">《Understanding the Git Workflow》</a>。</p>
<p><img src="../images/clip_image021.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070506.png"></p>
<p><strong>三、临时性分支</strong></p>
<p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>
<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<p>　　* 功能（feature）分支</p>
<p>　　* 预发布（release）分支</p>
<p>　　* 修补bug（fixbug）分支</p>
<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<p><strong>四、 功能分支</strong></p>
<p>接下来，一个个来看这三种”临时性分支”。</p>
<p>第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>
<p><img src="../images/clip_image022.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070507.png"></p>
<p>功能分支的名字，可以采用feature-*的形式命名。</p>
<p>创建一个功能分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure>

<p>开发完成后，将功能分支合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure>

<p>删除feature分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d feature-x</span><br></pre></td></tr></table></figure>

<p><strong>五、预发布分支</strong></p>
<p>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>
<p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>
<p>创建一个预发布分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure>

<p>确认没有问题后，合并到master分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure>



<p>对合并生成的新节点，做一个标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure>

<p>再合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure>

<p>最后，删除预发布分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure>

<p><strong>六、修补bug分支</strong></p>
<p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>
<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>
<p><img src="../images/clip_image023.png" alt="http://www.ruanyifeng.com/blogimg/asset/201207/bg2012070508.png"></p>
<p>创建一个修补bug分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure>

<p>修补结束后，合并到master分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line"></span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure>

<p>再合并到develop分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure>

<p>最后，删除”修补bug分支”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure>

<h3 id="3、常用-Git-命令清单"><a href="#3、常用-Git-命令清单" class="headerlink" title="3、常用 Git 命令清单"></a>3、常用 Git 命令清单</h3><p>我每天使用 Git ，但是很多命令记不住。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="../images/clip_image025.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><p>在当前目录新建一个Git代码库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure>

<p>下载一个项目和它的整个代码历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<p>显示当前的Git配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>编辑Git配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -e [--global]</span><br></pre></td></tr></table></figure>

<p>设置提交代码时的用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br><span class="line"></span><br><span class="line">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>

<h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><p>添加指定文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<p>添加指定目录到暂存区，包括子目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

<p>添加当前目录的所有文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>添加每个变化前，都会要求确认</p>
<p>对于同一个文件的多处变化，可以实现分次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure>

<p>删除工作区文件，并且将这次删除放入暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<p>停止追踪指定文件，但该文件会保留在工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached [file]</span><br></pre></td></tr></table></figure>

<p>改名文件，并且将这个改名放入暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><p>提交暂存区到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>

<p>提交暂存区的指定文件到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>

<p>提交工作区自上次commit之后的变化，直接到仓库区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>

<p>提交时显示所有diff信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -v</span><br></pre></td></tr></table></figure>

<p>使用一次新的commit，替代上一次提交</p>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>

<p>重做上一次commit，并包括指定文件的新变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><p>列出所有本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>列出所有远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<p>列出所有本地分支和远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p>新建一个分支，但依然停留在当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch-name]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，并切换到该分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，指向指定commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch] [commit]</span><br></pre></td></tr></table></figure>

<p>新建一个分支，与指定的远程分支建立追踪关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure>

<p>切换到指定分支，并更新工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>

<p>切换到上一个分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>

<p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure>

<p>合并指定分支到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure>

<p>选择一个commit，合并进当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cherry-pick [commit]</span><br></pre></td></tr></table></figure>

<p>删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d [branch-name]</span><br></pre></td></tr></table></figure>

<p>删除远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete [branch-name]</span><br><span class="line"></span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><p>列出所有tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p>新建一个tag在当前commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [tag]</span><br></pre></td></tr></table></figure>

<p>新建一个tag在指定commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [tag] [commit]</span><br></pre></td></tr></table></figure>

<p>删除本地tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d [tag]</span><br></pre></td></tr></table></figure>

<p>删除远程tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>

<p>查看tag信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [tag]</span><br></pre></td></tr></table></figure>

<p>提交指定tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] [tag]</span><br></pre></td></tr></table></figure>

<p>提交所有tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --tags</span><br></pre></td></tr></table></figure>

<p>新建一个分支，指向某个tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><p>显示有变更的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>显示当前分支的版本历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>显示commit历史，以及每次commit发生变更的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure>

<p>搜索提交历史，根据关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -S [keyword]</span><br></pre></td></tr></table></figure>

<p>显示某个commit之后的所有变动，每个commit占据一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [tag] HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>

<p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [tag] HEAD --grep feature</span><br></pre></td></tr></table></figure>

<p>显示某个文件的版本历史，包括文件改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --follow [file]</span><br><span class="line"></span><br><span class="line">git whatchanged [file]</span><br></pre></td></tr></table></figure>

<p>显示指定文件相关的每一次diff</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -p [file]</span><br></pre></td></tr></table></figure>

<p>显示过去5次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log -5 --pretty --oneline</span><br></pre></td></tr></table></figure>

<p>显示所有提交过的用户，按提交次数排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git shortlog -sn</span><br></pre></td></tr></table></figure>

<p>显示指定文件是什么人在什么时间修改过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame [file]</span><br></pre></td></tr></table></figure>

<p>显示暂存区和工作区的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>显示暂存区和上一个commit的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --cached [file]</span><br></pre></td></tr></table></figure>

<p>显示工作区与当前分支最新commit之间的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>

<p>显示两次提交之间的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>

<p>显示今天你写了多少行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>显示某次提交的元数据和内容变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]</span><br></pre></td></tr></table></figure>

<p>显示某次提交发生变化的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show --name-only [commit]</span><br></pre></td></tr></table></figure>

<p>显示某次提交时，某个文件的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show [commit]:[filename]</span><br></pre></td></tr></table></figure>

<p>显示当前分支的最近几次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><p>下载远程仓库的所有变动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch [remote]</span><br></pre></td></tr></table></figure>

<p>显示所有远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>显示某个远程仓库的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show [remote]</span><br></pre></td></tr></table></figure>

<p>增加一个新的远程仓库，并命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure>

<p>取回远程仓库的变化，并与本地分支合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>上传本地指定分支到远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>强行推送当前分支到远程仓库，即使有冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --force</span><br></pre></td></tr></table></figure>

<p>推送所有分支到远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>

<h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><p>恢复暂存区的指定文件到工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [file]</span><br></pre></td></tr></table></figure>

<p>恢复某个commit的指定文件到暂存区和工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [commit] [file]</span><br></pre></td></tr></table></figure>

<p>恢复暂存区的所有文件到工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [file]</span><br></pre></td></tr></table></figure>

<p>重置暂存区与工作区，与上一次commit保持一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset [commit]</span><br></pre></td></tr></table></figure>

<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard [commit]</span><br></pre></td></tr></table></figure>

<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --keep [commit]</span><br></pre></td></tr></table></figure>

<p>新建一个commit，用来撤销指定commit</p>
<p>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure>

<p>暂时将未提交的变化移除，稍后再移入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h4 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h4><p>生成一个可供发布的压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git archive</span><br></pre></td></tr></table></figure>

<h3 id="4、Git-使用规范流程"><a href="#4、Git-使用规范流程" class="headerlink" title="4、Git 使用规范流程"></a>4、Git 使用规范流程</h3><p>团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。</p>
<p>否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。</p>
<p>下面是<a href="https://github.com/thoughtbot/guides/tree/master/protocol/git">ThoughtBot</a> 的Git使用规范流程。我从中学到了很多，推荐你也这样使用Git。</p>
<p><img src="../images/clip_image027.png" alt="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png"></p>
<p>第一步：新建分支</p>
<p>首先，每次开发新功能，都应该新建一个单独的分支（这方面可以参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html">《Git分支管理策略》</a>）。</p>
<p>获取主干最新代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>新建一个开发分支myfeature</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure>

<p>第二步：提交分支commit</p>
<p>分支修改后，就可以提交commit了。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add --all</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git commit --verbose</span><br></pre></td></tr></table></figure>

<p>git add 命令的all参数，表示保存所有变化（包括新建、修改和删除）。从Git 2.0开始，all是 git add 的默认参数，所以也可以用 git add . 代替。</p>
<p>git status 命令，用来查看发生变动的文件。</p>
<p>git commit 命令的verbose参数，会列出 <a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html">diff</a> 的结果。</p>
<p>第三步：撰写提交信息</p>
<p>提交commit时，必须给出完整扼要的提交信息，下面是一个范本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Present-tense summary under 50 characters</span><br><span class="line"></span><br><span class="line">* More information about commit (under 72 characters).</span><br><span class="line"></span><br><span class="line">* More information about commit (under 72 characters).</span><br><span class="line"></span><br><span class="line">http://project.management-system.com/ticket/123</span><br></pre></td></tr></table></figure>

<p>第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、以及需要注意的问题。最后，提供对应的网址（比如Bug ticket）。</p>
<p>第四步：与主干同步</p>
<p>分支的开发过程中，要经常与主干保持同步。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure>

<p>第五步：合并commit</p>
<p>分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。</p>
<p>那么，怎样才能将多个commit合并呢？这就要用到 git rebase 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure>

<p>git rebase命令的i参数表示互动（interactive），这时git会打开一个互动界面，进行下一步操作。</p>
<p>下面采用<a href="https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history">Tute Costa</a>的例子，来解释怎么合并commit。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line">pick de9b1eb Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line">pick 3e7ee36 Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">pick fa20af3 git interactive rebase, squash, amend</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Rebase 8db7e8b..fa20af3 onto 8db7e8b</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">p, pick = use commit</span><br><span class="line"></span><br><span class="line">r, reword = use commit, but edit the commit message</span><br><span class="line"></span><br><span class="line">e, edit = use commit, but stop for amending</span><br><span class="line"></span><br><span class="line">s, squash = use commit, but meld into previous commit</span><br><span class="line"></span><br><span class="line">f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span><br><span class="line"></span><br><span class="line">x, exec = run command (the rest of the line) using shell</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br><span class="line">\#</span><br><span class="line"></span><br><span class="line">Note that empty commits are commented out</span><br></pre></td></tr></table></figure>

<p>上面的互动界面，先列出当前分支最新的4个commit（越下面越新）。每个commit前面有一个操作命令，默认是pick，表示该行commit被选中，要进行rebase操作。</p>
<p>4个commit的下面是一大堆注释，列出可以使用的命令。</p>
<ul>
<li>pick：正常选中</li>
<li>reword：选中，并且修改提交信息；</li>
<li>edit：选中，rebase时会暂停，允许你修改这个commit（参考<a href="https://schacon.github.io/gitbook/4_interactive_rebasing.html">这里</a>）</li>
<li>squash：选中，会将当前commit与上一个commit合并</li>
<li>fixup：与squash相同，但不会保存当前commit的提交信息</li>
<li>exec：执行其他shell命令</li>
</ul>
<p>上面这6个命令当中，squash和fixup可以用来合并commit。先把需要合并的commit前面的动词，改成squash（或者s）。</p>
<p>pick 07c5abd Introduce OpenPGP and teach basic usage</p>
<p>s de9b1eb Fix PostChecker::Post#urls</p>
<p>s 3e7ee36 Hey kids, stop all the highlighting</p>
<p>pick fa20af3 git interactive rebase, squash, amend</p>
<p>这样一改，执行后，当前分支只会剩下两个commit。第二行和第三行的commit，都会合并到第一行的commit。提交信息会同时包含，这三个commit的提交信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a combination of 3 commits.</span><br><span class="line"></span><br><span class="line">The first commit&#x27;s message is:</span><br><span class="line"></span><br><span class="line">Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 2nd commit message:</span><br><span class="line"></span><br><span class="line">Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 3rd commit message:</span><br><span class="line"></span><br><span class="line">Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">如果将第三行的squash命令改成fixup命令。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line">s de9b1eb Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line">f 3e7ee36 Hey kids, stop all the highlighting</span><br><span class="line"></span><br><span class="line">pick fa20af3 git interactive rebase, squash, amend</span><br></pre></td></tr></table></figure>

<p>运行结果相同，还是会生成两个commit，第二行和第三行的commit，都合并到第一行的commit。但是，新的提交信息里面，第三行commit的提交信息，会被注释掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a combination of 3 commits.</span><br><span class="line"></span><br><span class="line">The first commit&#x27;s message is:</span><br><span class="line"></span><br><span class="line">Introduce OpenPGP and teach basic usage</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 2nd commit message:</span><br><span class="line"></span><br><span class="line">Fix PostChecker::Post#urls</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">This is the 3rd commit message:</span><br><span class="line"></span><br><span class="line">Hey kids, stop all the highlighting</span><br></pre></td></tr></table></figure>

<p><a href="http://ponyfoo.com/articles/git-github-hacks">Pony Foo</a>提出另外一种合并commit的简便方法，就是先撤销过去5个commit，然后再建一个新的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD~5</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -am &quot;Here&#x27;s the bug fix that closes #28&quot;</span><br><span class="line"></span><br><span class="line">git push --force</span><br><span class="line"></span><br><span class="line">squash和fixup命令，还可以当作命令行参数使用，自动合并commit。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git commit --fixup </span><br><span class="line"></span><br><span class="line">git rebase -i --autosquash </span><br></pre></td></tr></table></figure>

<p>这个用法请参考<a href="http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html">这篇文章</a>，这里就不解释了。</p>
<h4 id="第六步：推送到远程仓库"><a href="#第六步：推送到远程仓库" class="headerlink" title="第六步：推送到远程仓库"></a>第六步：推送到远程仓库</h4><p>合并commit后，就可以推送当前分支到远程仓库了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --force origin myfeature</span><br></pre></td></tr></table></figure>

<p>git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送（参见<a href="http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/">这里</a>）。</p>
<h4 id="第七步：发出Pull-Request"><a href="#第七步：发出Pull-Request" class="headerlink" title="第七步：发出Pull Request"></a>第七步：发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p>
<h3 id="5、Git远程操作详解"><a href="#5、Git远程操作详解" class="headerlink" title="5、Git远程操作详解"></a>5、Git远程操作详解</h3><p><a href="http://zh.wikipedia.org/wiki/Git">Git</a>是目前最流行的<a href="http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html">版本管理系统</a>，学会Git几乎成了开发者的必备技能。</p>
<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>
<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>
<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>
<p><img src="../images/clip_image029.jpg" alt="git"></p>
<h4 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h4><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt;</span><br></pre></td></tr></table></figure>

<p>比如，克隆jQuery的版本库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>

<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt;&lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>

<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone http[s]://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone ssh://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone git://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone /opt/git/project.git </span><br><span class="line"></span><br><span class="line">git clone file:///opt/git/project.git</span><br><span class="line"></span><br><span class="line">git clone ftp[s]://example.com/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">git clone rsync://example.com/path/to/repo.git/</span><br></pre></td></tr></table></figure>

<p>SSH协议还有另一种写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure>

<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols">官方文档</a>。</p>
<h4 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h4><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</p>
<p>不带选项的时候，git remote命令列出所有远程主机。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br><span class="line"></span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>使用-v选项，可以参看远程主机的网址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">origin [git@github](mailto:git@github).com:jquery/jquery.git (fetch)</span><br><span class="line"></span><br><span class="line">origin [git@github](mailto:git@github).com:jquery/jquery.git (push)</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>
<p>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -o jQuery https://github.com/jquery/jquery.git</span><br><span class="line"></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line">jQuery</span><br></pre></td></tr></table></figure>

<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show命令加上主机名，可以查看该主机的详细信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote show &lt;主机名&gt;</span><br><span class="line">git remote add命令用于添加远程主机。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">git remote add &lt;主机名&gt;&lt;网址&gt;</span><br><span class="line">git remote rm命令用于删除远程主机。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote rm &lt;主机名&gt;</span><br><span class="line">git remote rename命令用于远程主机的改名。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote rename &lt;原主机名&gt;&lt;新主机名&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h4><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令将某个远程主机的更新，全部取回本地。</p>
<p>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>
<p>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程主机名&gt;&lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回origin主机的master分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br></pre></td></tr></table></figure>

<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。</p>
<p>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line">origin/master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">*master</span><br><span class="line"></span><br><span class="line">remotes/origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>
<p>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b newBrach origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>
<p>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure>

<p>上面命令表示在当前分支上，合并origin/master。</p>
<h4 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h4><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin next:master</span><br></pre></td></tr></table></figure>

<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin next</span><br></pre></td></tr></table></figure>

<p>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">git merge origin/next</span><br></pre></td></tr></table></figure>

<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>
<p>Git也允许手动建立追踪关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure>

<p>上面命令指定master分支追踪origin/next分支。</p>
<p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。</p>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>
<p>如果合并需要采用rebase模式，可以使用–rebase选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase &lt;远程主机名&gt;&lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。</p>
<p>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull -p</span><br></pre></td></tr></table></figure>

<p>等同于下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --prune origin </span><br><span class="line"></span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>



<h4 id="五、git-push"><a href="#五、git-push" class="headerlink" title="五、git push"></a>五、git push</h4><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;远程主机名&gt;&lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>
<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :master</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure>

<p>上面命令表示删除origin主机的master分支。</p>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global push.default matching</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global push.default simple</span><br></pre></td></tr></table></figure>

<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将所有本地分支都推送到origin主机。</p>
<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --force origin </span><br></pre></td></tr></table></figure>

<p>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>
<p>最后，git push不会推送标签（tag），除非使用–tags选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作笔记</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>页面的区块化与组件的封装</title>
    <url>/2019/07/02/%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>组件式开发是Vue.js的开发基础，同时也是我们在工程化开发时对功能的抽象与重用<br>的根本。所谓的组件化就是将复杂的、充满重复交互界面的组件逐步细化与抽象为简单的、<br>单一化的一个过程。</p>
<h4 id="区块的划分"><a href="#区块的划分" class="headerlink" title="区块的划分"></a>区块的划分</h4><p>我们做前端开发都是从上而下地进行设计与布局，如果按功能或者内容分类来对整个<br>页面进行划分的话，你会很自然地将一个页面的内容分为一个或多个功能区，事实上这是<br>人们的阅读习惯。从这种习惯入手，我们可以很容易将一个复杂的页面划分为功能单一的<br>Vue组件，划分区块的目的就在于将复杂问题简单化，将一个抽象的设计工作分解为具体<br>的开发工作。<br>本章将通过组件化的思维来设计与构建Home页，也会着重于实践，通过实践领悟个<br>中的理论比纯粹讲如何使用Vue会有意思得多。我们先从设计图入手，将Home的页面结<br>构从功能区块上来进行划分：</p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%9D%97%E5%8C%96%E4%B8%8E%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/zujian1.png" alt="组件拆分"></p>
<p>这是一个从具象化到抽象化的基本过程，如果没有这一-过程， 我们根本没有办法将这<br>些功能与实际工作相结合，继而进行工作的细分与实现步骤的安排。<br>首页上的“新书上架”和“编辑推荐”明显是由两个功能相同的组件构成的，那么我们可以将其视为两个类型相同的功能组件，然后就可以得到以下几个构成HOME页的组件。</p>
<table>
<thead>
<tr>
<th>功能区</th>
<th>组件</th>
<th>命名</th>
</tr>
</thead>
<tbody><tr>
<td>热门推荐</td>
<td>滚动滑块</td>
<td>slider</td>
</tr>
<tr>
<td>快讯</td>
<td>快讯</td>
<td>announcement</td>
</tr>
<tr>
<td>新书上架，编辑推荐</td>
<td>图书列表</td>
<td>book-list</td>
</tr>
</tbody></table>
<p><strong>主导航除了在四个顶层页面内显示，不会在其他页面或组件内使用，在实现上只需要写在Main.vue内即可，可见它是没有什么重用性需求的，我们并不需要对其进行组件化。</strong></p>
<p>接下来我们分别将slider、announcement 和book-list写成Vue的组件并用来装配Home页面。<br>我们一定要养成从框架入手的良好编程习惯，写代码就像是在画画一样，一 开始就应该从打草稿开始，然后慢慢地给草稿添加各种细节，多次细化后最终才完成这部作品。所以<strong>我们先不用关心这些组件如何来写，先将文件按照之前的命名约定先创建出来</strong>，组件的模板和上一章的页面模板一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--src</span><br><span class="line">	|--App.vue</span><br><span class="line">	|--Main.vue</span><br><span class="line">	|--assets</span><br><span class="line">	|--compinents</span><br><span class="line">			|--Announcements.vue</span><br><span class="line">			|--Booklist.vue</span><br><span class="line">			|--Slider.vue</span><br><span class="line">	|--Category.vue</span><br><span class="line">	|--Home.vue</span><br><span class="line">	|--Me.vue</span><br><span class="line">	|--Shoppingcart.vue</span><br><span class="line">	|--main.js</span><br></pre></td></tr></table></figure>

<h4 id="页面逻辑的页面"><a href="#页面逻辑的页面" class="headerlink" title="页面逻辑的页面"></a>页面逻辑的页面</h4><p>正如我们前文所说，“页面”在Vue中是不存在的，它只是一种逻辑上的概念。事实上，“页面”这个概念就是由DOM元素和一个甚至多个自定义Vue组件复合而成的<strong>复合型组件</strong>。我们应该如何分清楚哪些部分使用DOM元素实现，哪些部分又应该封装为更小级别的Vue组件呢？</p>
<p>首先，我们要从原型设计图入手，可以先从功能性布局上划分出对应的功能区域，如前面的设计图所示。<br>然后用HTML的注释标记作为页面上的“区域占位”，先给页面搭一个最基本的结构，这就像作画时先给整体打草稿勾一个轮廓一样。当我们一步一步地将这些细节描绘出来后，再将这些“轮廓线”从画中抹掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;section&quot;</span>&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;!-- 热门推荐 --&gt;</span><br><span class="line">                &lt;!-- 快讯 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;section&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 新书上架 --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;section&quot;</span>&gt;</span><br><span class="line">            &lt;!-- 编辑推荐 --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<a href="https://github.com/nolimits4web/swiper" title="" target="">Swiper</a>

<p>“热门推荐”是一个最常见的图片轮播功能，而且这是一款基于面向手机的应用，所以这个“热门推荐”区域除了支持横幅图片轮播的功能，还应该支持手势滑动换页的功能。这样的实现逻辑并不需要自己动手来从零开始，我们应该学会站在别人的肩膀上做开发，这样才走得更远走得更快。<strong>在这里推荐大家使用Swiper 这个组件，这个组件可以在<a href="https://github.com/nolimits4web/swiper/%E4%B8%8B%E8%BD%BD">https://github.com/nolimits4web/swiper/下载</a></strong>，它是一个具有9000多个star 的代码库！可见其受欢迎程度了。按照Swiper官方文档的要求，我们先将Swiper所需要的HTML格式和样式编写好，当然此时我们得严格地按照原型设计图将数据的样本和必要的图片资源准备好。代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">            &lt;!--热门推荐--&gt;</span><br><span class="line">            &lt;div class=&quot;swiper-container&quot;</span><br><span class="line">                ref=&quot;slider&quot;&gt;</span><br><span class="line">               &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;swiper-slide&quot;&gt;</span><br><span class="line">                        &lt;img src=&quot;./fixtures/sliders/t1.svg&quot;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class-&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;swiper-slide&quot;&gt;</span><br><span class="line">                        &lt;img src=&quot;./fixtures/sliders/t2.svg&quot;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class-&quot;swiper-pagination&quot;</span><br><span class="line">                    ref=&quot;pagination&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;!--快訊--&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class- &quot;section&quot;&gt;</span><br><span class="line">        &lt;!--新书上架--&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class-&quot;section&quot;&gt;</span><br><span class="line">        &lt;!--编辑推荐--&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br></pre></td></tr></table></figure>

<p>接下就要在代码中引入对.swiper -container DOM元素应用Swiper这个对象了。在它的官方文档中，Swiper 的使用是通过CSS选择器声明将Swiper应用到那个页面元素上的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const swiper = new Swiper(&#x27;.slider-container‘)</span><br></pre></td></tr></table></figure>

<p>如果我们直接将它抄过来，应用到我们的组件代码中会出现问题。一个好的组件应该是与外部没有依赖关系的，或者说依赖关系越少越好，<strong>这叫低耦合</strong>。<br>如果我们用CSS选择器作为Swiper定位页面上元素依据的话，假如在一个页面上同时有两个.slider-container,那么这个组件就会乱套!<br>所以，我们应该避免用这种模糊的指定方式，而应该使用Vue.is提供的更精确的指明方式在元素中添加ref属性，然后在代码内通过this.$refs.引用名来引用。<br>这是Vue.js 2.0后的变化，ref 标记是标准的HTML属性，它取代了Vue.js 1.x 中v-ref的写法。如果你曾是Vue.js 1.x的开发者，<strong>那么必须要留意这一点，v-ref已经被废弃了!</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    import Swiper from &quot;swiper&quot;		// 引入Swiper库</span><br><span class="line">    import &#x27;swiper/dist/css/swiper.css&#x27;  // 引入Swiper所需要的样式</span><br><span class="line"></span><br><span class="line">    export defaut&#123;</span><br><span class="line">        // 不要选用created钩子而应该采用mouted</span><br><span class="line">        // 否则Swiper不能生效，因为created调用时元素还没挂载到DOM上</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            new	Swiper(this.$refs.slider,&#123;</span><br><span class="line">                pagination: this.$refs.pagination,</span><br><span class="line">                paginationClickable: true,</span><br><span class="line">                spaceBetween: 30,</span><br><span class="line">                centeredSlides: true,</span><br><span class="line">                autoplay: 2500,</span><br><span class="line">                autoplayDisableOnInteraction: false</span><br><span class="line">            &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>组件化的过程就是在不断地对代码进行去重与抽象封装的过程</strong>，上述代码中<code>&lt;div class=&quot;swiper-container&quot;&gt;&lt;/div&gt;</code>元素内所包含的内容除了<code>&lt;img&gt;</code>的src 属性内的数据是不同的，其他的都是重复的，很明显这些图片的地址应该是从服务器中传过来的。首先我们将这些重复的图片地址先放到data属性内并重新改写上述代码。其次，<strong>考虑到用户点击当前显示的轮播图片时应该跳转到图书的详细页面内，那么这个slides 内存储的就不单单是个图片地址，应该还要有一个图书ID</strong>，用于作为路由跳转的参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            slides:[</span><br><span class="line">                &#123;id:l, img url:* ./fixtures/sliders/t2.svg&#x27;&#125;，</span><br><span class="line">                &#123;id:2, img url:* ./fixtures/sliders/t2.svg&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>用v-for指令标签对slides数组列表进行渲染</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;swiper-wrapper&quot;</span><br><span class="line">    v-for=&quot;slide in slides&quot;&gt;</span><br><span class="line">    &lt;router-link class=&quot;swiper-slide&quot;</span><br><span class="line">        tag=&quot;div&quot;</span><br><span class="line">        :to=&quot;( name: &#x27;BookDetail&#x27;, params:&#123;id: slide.id)&#125;&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;slide.img_url&quot;/&gt;</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>那么，“热门推荐”区域的功能就实现完成了，代码从堆被“压缩”成一小段了！ slides中的数据我们先暂时写死，后面我们再对数据进行统一的处理。<br>“快讯”区域的实现比较简单，思路与实现同“热门推荐”是一样的，先按原型图直接编写HTML,然后将应该服务器提取的数据部分抽取到data中，最后重构页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;announcement&quot;&gt;</span><br><span class="line">	&lt;label&gt;快讯&lt;/label&gt;</span><br><span class="line">	&lt;span&gt;&#123;&#123; announcement &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>data的定义代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data ()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            announcement:&#x27;4H. :.kf91H154H8 r&#x27;,</span><br><span class="line">            slides: [</span><br><span class="line">             &#123;id:1, img_url:&#x27;./fixtures/sliders/t2.svg&#x27;&#125;,</span><br><span class="line">             &#123;id:2, img_url:&#x27;./fixtures/sliders/t2.svg&#x27;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;，</span><br><span class="line">     // ... 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="封装可重用组件"><a href="#封装可重用组件" class="headerlink" title="封装可重用组件"></a>封装可重用组件</h4><p>重复性的内容就可以被提取出来封装成一个或多个组件，但封装之前我们得知道向这个组件输入一些什么样的数据，这个组件应该具有什么样的行为或者事件。</p>
<p>经过第一次的抽象，代码减少了很多，但是这两个Section内显示的内容除了标题与图书的数据源不同，其他的逻辑还是完全相同的。也就是说，它们应该是由一个组件渲染的结果，只是输入参数存在差异，那么就还存在一次融合抽象的可能。此时我们就可以动手将这两个列表封装成为一个Booklist组件。</p>
<p>先对原页面的内容进行重构，预先命名BookList组件，接着确定在页面上的用法。这很重要，<strong>Home 页面就是BookList的调用方，BookList 的输入属性是与Home之间的接口，当接口被确定了，组件的使用方式也同样被固定下来了。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div clasg=&quot;section&quot;&gt;</span><br><span class="line">    &lt;book-list :books=&quot;latestUpdated&quot;</span><br><span class="line">        heading=&quot;最新更新&quot;&gt;</span><br><span class="line">    &lt;/book-list&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div classa&quot;section&quot;&gt;</span><br><span class="line">    &lt;book-list :books=&quot;recommended&quot;</span><br><span class="line">        heading=&quot;编辑推荐&quot;&gt;</span><br><span class="line">    &lt;/book-list&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>标记名称被确定，类名与文件名也就被确定了，先在Home页中引入BookList组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  按照工程结构约定，组件放置在components目录</span><br><span class="line">import BookList from &quot;./components/BookList.vue&quot;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        announcement:&#x27;今日上架的图书全部8折&#x27;,</span><br><span class="line">        slides:[</span><br><span class="line">        	&#123;id:1, img_url:&#x27;./fixtures/sliders/t2.svg&#x27;&#125;,</span><br><span class="line">        	&#123;id:2, img_url:&#x27;./fixtures/sliders/t2.svg&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">    latestUpdated: [...],</span><br><span class="line">    recommended:[...]</span><br><span class="line">    components:&#123;</span><br><span class="line">        BookList</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里通过import导入组件定义，用components注册自定义组件，注意对引入的组件名称要采用<strong>大驼峰命名法</strong>。在Vue.js 的官方文档中是这样约定的：“所有引入的组件<strong>在<code>&lt;template&gt;</code>内使用时都以小写形式出现，</strong>如果类名由两个大写开头的单词所组成，那么在第二个大写字母前面需要添加“_”来与之前的单词进行分隔。”我们按照这个使用约定来构建<code>&lt;template&gt;</code>内的视图内容。</p>
<p>组件与标记的对应关系如下表所示。</p>
<table>
<thead>
<tr>
<th>组件注册名称</th>
<th>模块标记</th>
</tr>
</thead>
<tbody><tr>
<td>BookList</td>
<td><code>&lt;book-list&gt;</code></td>
</tr>
</tbody></table>
<p>以上这点必须谨记，否则Vue将不能识别注册的自定义组件。接口与用法都确定了我们就能开始真正地编写BookList组件了，在components目录内创建一个BookList.vue的组件文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    props:[</span><br><span class="line">        &#x27;heading&#x27;, // 标题</span><br><span class="line">        ’books’	// 图书对象数组</span><br><span class="line">    ],</span><br><span class="line">    filters:&#123;</span><br><span class="line">        join(args)&#123;</span><br><span class="line">            return args.join(&#x27;,&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>要向组件输入数据就不能使用data来作为数据的容器了，因为data是一个内 部对象，此时就要换成props.</strong><br>我们可以通过“作用城”来理解data和props, data 的作用域是仅仅适用于内部而对于外部的调用方是不可见的，换句话说它是一个私有的组件成员变量;而props是内部外部都可见，是一个公共的组件成员变量。</p>
<p>将之前提取的HTML内容放置其中，并用props定义的属性替换原有的数据对象。另外，这里定义了一个join过滤器，用于将authors (作者)数组输出为以逗号分隔的字符串，改写后的组件模板如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;book-list&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;heading&quot;&gt;&#123;&#123;heading&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;more&quot;&gt;更多...&lt;/div&gt; </span><br></pre></td></tr></table></figure>

<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>按照设计图，当用户点击某一本图书之时要弹出一个预览的对话框。<br>也就是说，每个图书元素要响应用户的点击事件，显示另一个窗口或对话框显然应该由Home页进行处理，所以就需要BookList在接收用户点击事件后，向Home组件发出一个事件通知，然后由Home组件接收并处理显示被点击图书的详情预览。</p>
<p>在第1章我们就介绍过如何通过v-bind指令标记接收并处理DOM元素的标准事件。此时需要更深入一步，<strong>就是为BookList定义-一个事件，并由它的父组件，也就是Home页接收并进行处理。</strong><br><strong>Vue的组件发出自定义事件非常简单，只要使用Semit(“事件名称”)方法，然后输入事件名称就可以触发指定“事件名称”的组件事件</strong>，具体如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class= &quot;book&quot;</span><br><span class="line">    v-for=&quot;book in books&quot;</span><br><span class="line">    @click=&quot;$emit(&#x27;onBookSelect&#x27;, book)&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cover&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;book.img_url&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;&#123;&#123;book.title&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;authors&quot;&gt;&#123;&#123;book.authors | join &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/dív&gt;</span><br></pre></td></tr></table></figure>

<p><strong>$emit的第一个参数是事件名称，第二个参数是向事件处理者传递当前被点击的图书的具体数据对象</strong>。完成这一步后， BookList 组件的封装工作就宣告结束，可以回到Home页中加入由BookList组件所发出的<strong>onBookSelect事件</strong>了。</p>
<blockquote>
<p>$emit()是Vue实例的方法，在<code>&lt;template&gt;</code>内所有调用的上下文都将默认指向Vue组件本身(this),所以无须声明，但如果是在代码内调用的话则需要通过this.$emit 方式显式引用。</p>
</blockquote>
<p>在Home中增加一个preview(book)的方法用来显示图书详情预览的对话框，preview方法可以先不实现，我们会将其留在下文中进行处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">    // ...省略</span><br><span class="line">    methods:&#123;</span><br><span class="line">        preview (book)&#123;</span><br><span class="line">            alert(&quot;显示图书详情”)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收自定义事件与接收DOM事件的方式是一样的，也是使用v-bind 指令标记接收onBookSelect事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;book-list :books=&quot;1atestUpdated&quot;</span><br><span class="line">    heading=&quot;最新更新&quot;</span><br><span class="line">    @onBookSelect &quot;preview($event)&quot;&gt;</span><br><span class="line">&lt;/book-list&gt;</span><br></pre></td></tr></table></figure>

<p>为什么这里会出现一个$event参数呢?其实这个参数是被Vue注入到this对象中的，当事件产生时，这个$event参数用于接收由$emit(‘onBookSelect’, book)的第二个传出参数book.每个采用v-bind指令接收的事件都会自动产生$event对象，如果事件本身没有传出的参数，那么这个$event就是-一个DOM事件对象实例。</p>
<h4 id="数据接口的分析与提取"><a href="#数据接口的分析与提取" class="headerlink" title="数据接口的分析与提取"></a>数据接口的分析与提取</h4><p>将写死在data内的数据变活，让它们从服务器端获取。<br>我们先将这些数据抽出来放到一个~/fixtures/home/home.json文件内，然后将data内的数据清空。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        announcement: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        slides:[],</span><br><span class="line">        latestUpdated: [],</span><br><span class="line">        recommended: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，将与服务器通信的数据接口和API的用法保存到~/fixtures/home/README.md，以下是API文档的样本：<br>请求地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP GET <span class="string">&#x27;/api/home&#x27;</span></span><br></pre></td></tr></table></figure>
<p>返回对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    annoouncement:&#x27;&#x27;	// 快讯的内容</span><br><span class="line">    slides: [			// 热门推荐图书</span><br><span class="line">        &#123;</span><br><span class="line">            id: 1,			// 图书编号</span><br><span class="line">            img_url: &#x27;/assets/banners/1.jpg&#x27; // 滑块图地址 大小</span><br><span class="line">        &#125;</span><br><span class="line">        //...</span><br><span class="line">    ],    </span><br><span class="line">    latestUpdated:[			// 新书上架</span><br><span class="line">        &#123;</span><br><span class="line">            id;1,	// 图书编号</span><br><span class="line">            title:&#x27;BookName&#x27;，	// 书名</span><br><span class="line">            img_url:&#x27;/assets/covers/1.jpg&#x27;, // 封面图地址</span><br><span class="line">            authors:[&quot;作者1&quot;，... , &quot;作者n&quot;]，// 作者列表</span><br><span class="line">        &#125;</span><br><span class="line">    ]，</span><br><span class="line">    recommended :[]		// 编辑推荐，对象定义与latestUpdated 相同</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>要确保前后端开发的一致性最关键是<strong>控制接口</strong>。因为它们是前端与后端关键结合点，API接口的任何变化都会导致前端与后端代码的修改甚至是进行新的迭代。</p>
<p>由于前端是消化用户需求的第一站，所以由前端来制定接口是最合适不过的了。因此，我在团队协作式开发过程中最重要的关键任务就是制作上述的这一份API接口说明文件，只有它呗确立之后才能真正地实现前后端的协作式开发。</p>
<p>对于较小的项目我们的做法是将所有的文档保存到项目根目录下的docs内，同时也纳入到Git的源码管理中，方便平时查阅。而对于规模较大的项目我们会使用GitBook编写一份更加完整的手册，文档在设计时编写是最容易的，如果到项目验收时才补充一定会有疏漏，不要让文档成为开发人员的技术债务。</p>
<h4 id="从服务端获取数据"><a href="#从服务端获取数据" class="headerlink" title="从服务端获取数据"></a>从服务端获取数据</h4><a href="https://github.com/pagekit" title="" target="">Pagekit</a>

<p>有了文档的定义，接下来就要实现从/api/home这个地址上获取数据了。<strong>Vue的标准库并没有提供访问远程服务器(AJAX)功能，所以我们需要安装另一个库一vue-resource。</strong><br>vue-resource并不是Vue官方提供的库，而是由Pagekit ( <a href="https://github.com/pagekit)%E5%9B%A2%E9%98%9F%E6%89%80%E5%BC%80%E5%8F%91%E7%9A%84%EF%BC%8C%E5%AE%83%E7%9A%84%E4%BD%93%E7%A7%AF%E5%B0%8F%EF%BC%8C%E5%AD%A6%E4%B9%A0%E6%88%90%E6%9C%AC%E4%BD%8E%EF%BC%8C%E6%98%AFVue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E4%BA%8E%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BC%98%E7%A7%80%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E3%80%82">https://github.com/pagekit)团队所开发的，它的体积小，学习成本低，是Vue项目中用于访问远程服务器的一个优秀的第三方库。</a></p>
<p>在讲述vue-resource 之前，先用最传统的方法来获取数据，然后再用vue-resource 改写这个过程。这样做的目的是不想打断我们现在的编程思路，因为vue-resource 的使用还涉及它的安装与配置等用法，因此先用jQuery.ajax的方式来编写这个数据获取的方法。</p>
<p>在Home页的created钩子内加入以下代码来获取data内的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            announcement:&#x27;&#x27;,</span><br><span class="line">            slides: [],</span><br><span class="line">            latestUpdated:[],</span><br><span class="line">            recommended :[]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        $.get(&quot;/api/home&#x27;).then(res =&gt;&#123;</span><br><span class="line">        self.announcement = res.announcemen&#123;</span><br><span class="line">            self.slides = res.slide s</span><br><span class="line">            self.latestUpdated = res.latestUpdated</span><br><span class="line">            self.recommended = res.recommanded</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用jQuery的话就需要引入jQuery内很多我们并不需要的内容(我们根本就不直接操作DOM, jQuery 在此一点用处都没有)。这样将增大编译后的文件大小，最终发布包的大小会影响下载速度，从而降低用户的使用体验。其次，从上述代码中可见，我们需要用一个self变量来“hold”住当前的Vue对象实例，这未免让代码显得很糟糕。而用vue-resource这个库的话，就可以规避掉使用jQuery所带来的这两个坏处。</p>
<ul>
<li><p>vue-resource插件具有以下特点:</p>
</li>
<li><p>体积小——vue-resource 非常小巧，压缩以后大约只有12KB，服务端启用gzip压缩<br>后只有4.5KB大小，这远比jQuery的体积要小得多。</p>
</li>
</ul>
<p>支持主流的浏览器——和 Vue.js 一样，vue-resource 除了不支持IE9以下的浏览器，其<br>他主流的浏览器都支持。<br>支持Promise API和URI Templates ——Promise 是ES6的特性，Promise 的中文含义为“承诺”，Promise 对象用于异步计算。URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p>
<p>支持拦截器——拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token, 或者在请求失败时，提供共通的处理方式。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我们可以用以下命令将v-resource安装到本地的开发环境中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i vue-resource -D</span><br></pre></td></tr></table></figure>

<p>vue-resource是一个Vue的插件，在安装完成后需要在main.js文件内载入这个插件，<br>代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue’</span><br><span class="line">import VueResource from &#x27;vue-resource&#x27;</span><br><span class="line">Vue.use(VueResource)</span><br></pre></td></tr></table></figure>

<p>对于那些不能处理REST/HTTP请求方法的老旧浏览器(例如IE6 ), vue-resource 可以打开emulateHTTP开关，以取得兼容的支持:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.http.options.emulateHTTP = true</span><br></pre></td></tr></table></figure>

<p><strong>通常RESTful API的一个约定俗成的规则是API的地址都以/api或/rest为资源根目录</strong>，我们在此也采用此约定。为了在调用时省下更多的代码，我们可以在Vue的实例配置内对<br>HTTP进行配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    http:&#123;</span><br><span class="line">        root: &#x27;/api&#x27;,  // 指定资源根目录</span><br><span class="line">        headers: &#123;&#125;	   // 添加自定义的http头变量</span><br><span class="line">    )，</span><br><span class="line">    //...省略</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>headers参数用于对发出的请求的头内容进行重写与自定义，例如加入验证信息或者代理信息等</strong>。</p>
<p><strong>使用use方法引入vue-resource后，vue-resource就会向Vue的根实例“注入”一个$http的对象</strong>，那么我们就可以在所有Vue实例内通过this Shttp 来引用它，它的用法与jQuery几乎一样，很容易上手。将前文的代码使用vue-resouce来改写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data ()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            announcement:’‘,</span><br><span class="line">            slides: [],</span><br><span class="line">            latestUpdated:[],</span><br><span class="line">            recommended :[]</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">    created ()(</span><br><span class="line">        // HTTP GET /api/home</span><br><span class="line">        this.$http.get (&#x27;/home&#x27;).then(res=&gt;&#123;</span><br><span class="line">            this.announcement = res.body.announcement</span><br><span class="line">            this.slides = res.body.slides</span><br><span class="line">            this.latestUpdated = res.body.latestUpdated</span><br><span class="line">            this.recommended = res.body.recommanded</span><br><span class="line">        ))</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>vue-resouce的一个最大的好处是它会自动为我们在异步成功调用返回后将Vue实例注入到回调方法中，这样我们就不需要额外地去用另一个变量来”hold住”this 了。</strong><br>我们还可以让代码变得更加简洁一些：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$http.get(&#x27;/api/home&#x27;)</span><br><span class="line">	.then((res) =&gt;&#123;</span><br><span class="line">		for prop in res.body&#123;</span><br><span class="line">			this[prop] = res.body[prop]</span><br><span class="line">		&#125;</span><br><span class="line">    ), (error) =&gt; &#123;</span><br><span class="line">		console.log(&#x27;获取数据失败： $&#123;error&#125;’)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="附加说明-http-API参考"><a href="#附加说明-http-API参考" class="headerlink" title="附加说明: $http API参考"></a>附加说明: $http API参考</h4><p>对应常用的HTTP方法，vue-resource在Shttp对象上提供了以下包装方法：</p>
<ul>
<li>get(url, [options])</li>
<li>head(url, [options])</li>
<li>delete(url, [options])</li>
<li>jsonp(url, [options])</li>
<li>post(url, [body], [options]) </li>
<li>put(url, [body], [options])</li>
<li>patch(url, [body], [options])</li>
</ul>
<h4 id="options-对象参考："><a href="#options-对象参考：" class="headerlink" title="options 对象参考："></a>options 对象参考：</h4><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>String</td>
<td>请求的URL</td>
</tr>
<tr>
<td>body</td>
<td>Object, FormData, string</td>
<td>写入请求body属性的数据对象(一般用于发送表单对象)</td>
</tr>
<tr>
<td>headers</td>
<td>Object</td>
<td>重写发出请求的HTTP头对象变量</td>
</tr>
<tr>
<td>params</td>
<td>Object</td>
<td>用作生成带参数URL的参数对象</td>
</tr>
<tr>
<td>method</td>
<td>String</td>
<td>HTTP方法(例如GET, POST, …)</td>
</tr>
<tr>
<td>timeout</td>
<td>Number</td>
<td>单位为毫秒的请求超时时间(0表示无超时时间)</td>
</tr>
<tr>
<td>before</td>
<td>function(request)</td>
<td>请求发送前的处理函数，类似于jQuery的beforeSend函数</td>
</tr>
<tr>
<td>progress</td>
<td>function(event)</td>
<td>上传数据时的ProgressEvent 事件的处理函数(用于计算上传进度)</td>
</tr>
<tr>
<td>credentials</td>
<td>Boolean</td>
<td>是否应使用凭据进行跨站点访问控制请求</td>
</tr>
<tr>
<td>emulateHTTP</td>
<td>Boolean</td>
<td>发送PUT、PATCH、 DELETE请求时以HTTP POST的方式发送，井设置请求头的X-HTTP-Method-Override</td>
</tr>
<tr>
<td>emulateJSON</td>
<td>Boolean</td>
<td>将request body的内容以application/x-www-form urlencoded编码方式发送</td>
</tr>
</tbody></table>
<p>回调参数response对象参考:</p>
<h4 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h4><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>String</td>
<td>原请求的URL地址</td>
</tr>
<tr>
<td>body</td>
<td>Object, Blob, string</td>
<td>响应对象的body内容</td>
</tr>
<tr>
<td>headers</td>
<td>Header</td>
<td>响应的请求头对象</td>
</tr>
<tr>
<td>ok</td>
<td>Boolean</td>
<td>响应的HTTP状态码在200- 299之间时，该属性为true</td>
</tr>
<tr>
<td>status</td>
<td>Number</td>
<td>响应的HTTP状态码</td>
</tr>
<tr>
<td>status Text</td>
<td>String</td>
<td>响应的状态文本</td>
</tr>
</tbody></table>
<h4 id="创建复合型的模板组件"><a href="#创建复合型的模板组件" class="headerlink" title="创建复合型的模板组件"></a>创建复合型的模板组件</h4><p>Home页组件内还有一个方法没有实现，那就是preview(),也就是当用户点击图书时弹出的一个模态窗口</p>
<p>对于这个应用场景，应用之前先创建”一个组件页，然后加入代码再重构的实现思路显然不可行，我们必须先实现一个模态窗口组件才能在其上放置显示图书详情的元素以及实现添加购物车和立即购买的功能。</p>
<p>这个模态窗口组件有一个特殊的地方，就是它自身是一个容器，我们需要在这个容器所提供的特定区域内放置其他的DOM元素或者组件。此时我们可以认为<strong>模态窗口组件就是一个复合型组件</strong>。Vue可以通过一特殊的指令标记来在组件模板内“划”出一个独立的区域让调用方(父组件)可以<strong>向模态窗口组件中插入新的代码，以扩充其功能。这种对外提供插入能力的指令就是所谓的“插槽也就是<code>&lt;slot&gt;</code>。</strong>新建一个<code>src/components/dialog.vue</code> 文件，具体内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class-&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;!--头部及标题--&gt; </span><br><span class="line">            &lt;slot name=&quot;header&quot;&gt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;!--内容区域--&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .dialog&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 24px;</span><br><span class="line">        left:24px;</span><br><span class="line">        right: 24px;</span><br><span class="line">        bottom: 24px;</span><br><span class="line">        display: none;</span><br><span class="line">        background: #fff;</span><br><span class="line">        box-shadow: 0 0 10px rgba(0,0,о, .5) ;</span><br><span class="line">        z-index: 500; /* 放置于顶层 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>这里同时采用了组件插槽与命名插槽两种方式</strong>，默认插槽也就是直接在组件模板内放置<code>&lt;slot&gt;&lt;/sloD&gt;</code>,那么当外部使用此组件时，在组件标记内的元素都会被自动插入到默认插槽中，这是一个很简洁的用法!<strong>一个组件只能拥有一个默认插槽，其他的插槽则需要采用name属性进行命名，在使用的时候也需要对插槽进行声明。</strong></p>
<blockquote>
<p>插槽本身只是一个占位标记，当组件渲染时，<code>&lt;slot&gt;&lt;/slot&gt;</code>标记自身并不会输出任何<br>DOM元素。</p>
</blockquote>
<p>我们马上在Home页内引入这个模态窗口组件来试试它的用法。<br><strong>首先，引入dialog.vue组件，并进行子组件注册操作：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ModalDialog from &quot;./components/dialog.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">    ...</span><br><span class="line">    components:&#123;</span><br><span class="line">        ModalDialog</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>然后在<code>&lt;template&gt;</code>内加入<code>&lt;modal-dialog&gt;</code>:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;modal-dialog&gt;</span><br><span class="line">            &lt;div slot=&quot;header&quot;&gt;此处是header插槽的内容&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;这个DIV将自动默认插槽的内容&lt;/div&gt;</span><br><span class="line">        &lt;/modal-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>我们将modal-dialog设计为默认情况下是不显示的，所以我们需要给它加入一些方法，让Home页能通过编程方式对其进行显示或隐藏的控制。<br><strong>在dialog.vue组件中加入open和close方法对:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">data ()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        is_open: false</span><br><span class="line">    ),</span><br><span class="line">methods:&#123;</span><br><span class="line">    open()&#123;</span><br><span class="line">        if (!thís.is open)&#123;</span><br><span class="line">            this.$emit(&#x27;dialog0pen&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        this.is_open = true</span><br><span class="line">    &#125;,</span><br><span class="line">    close () &#123;</span><br><span class="line">        if (this.is_open)</span><br><span class="line">            this.$emit(&#x27;dialogClose&#x27;)</span><br><span class="line">            this.is_open= false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在CSS中加入.open样式类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .dialog &#123;...&#125;</span><br><span class="line">    .dialog.open&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>最后在dialog.vue的顶层元素内加入class属性开关切换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template»</span><br><span class="line">    &lt;div class=&quot;dialog-wrapper&quot;</span><br><span class="line">        @class=&quot;&#123;&#x27;open&#x27;: is_poen)&#125;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>模态对话框组件就宣告完成了。<br>以下为dialog.vue完整代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template»</span><br><span class="line">   &lt;div class=&quot;dialog-wrapper&quot;</span><br><span class="line">        :class=&quot;&#123;&#x27;open&#x27;:is_open)&#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;overlay&quot; @click=&quot;close&quot;&gt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;heading&quot;&gt;</span><br><span class="line">                &lt;slot name=&quot;heading&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/dív&gt; </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &quot;./dialog.less&quot;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                is_open:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            open()&#123;</span><br><span class="line">                if (!this.is_open)&#123;</span><br><span class="line">                    // 触发模态窗口打开事件</span><br><span class="line">                    this.$emit(&#x27;dialogOpen&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">                this.is_open = true</span><br><span class="line">            &#125;,</span><br><span class="line">            close()&#123;</span><br><span class="line">            	if(this.is_open)&#123;</span><br><span class="line">            		// 触发模态窗口关闭事件</span><br><span class="line">            		this.$emit(&#x27;dialogClose&#x27;)</span><br><span class="line">            	&#125;</span><br><span class="line">            	this.is_open = false</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>dialog,less的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.dialog-wrapperi</span><br><span class="line">    $.open&#123;</span><br><span class="line">        display:block;</span><br><span class="line">    &#125;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: none;</span><br><span class="line">    &amp;&gt;.overlay &#123;</span><br><span class="line">        background: rgba(o, 0, 0, 0.3);</span><br><span class="line">        z-index: 1 ;</span><br><span class="line">        position: absolute ;</span><br><span class="line">        left: 0px;</span><br><span class="line">        top: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0 ;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;&gt;.dialog &#123;</span><br><span class="line">        z-index: 10;</span><br><span class="line">        background: f ff;</span><br><span class="line">        position :</span><br><span class="line">        fixed;</span><br><span class="line">        top: 24px;</span><br><span class="line">        left: 24px;</span><br><span class="line">        right: 24px;</span><br><span class="line">        bottom: 24px;</span><br><span class="line">        padding: 24px 14px;</span><br><span class="line">        box-shadow: 0 0 10px rgba(o, 0, 0, .8);</span><br><span class="line">        &amp; heading &#123;</span><br><span class="line">            padding: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>接下来在Home页组件对modal-dialog内增加引用声明和事件处理：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;modal-dialog ref=&quot;dialog&quot;</span><br><span class="line">    @dialogClose=&quot;selected=undefined&quot;&gt;</span><br><span class="line">    &lt;div slot=&quot;header&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;dismiss&quot;</span><br><span class="line">        @click.prevent=&quot;$refs.dialog.close()&quot;&gt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img :src=&quot;selected.img_url&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;selected.title&#125;&#125;</span><br><span class="line">    &lt;/div&gt; </span><br><span class="line">&lt;/modal-dialog&gt;</span><br></pre></td></tr></table></figure>

<p>最后完成preview方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">    data ()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            // ...省略</span><br><span class="line">            selected: undefined</span><br><span class="line">        &#125;</span><br><span class="line">    ),</span><br><span class="line">    methods:&#123;</span><br><span class="line">        preview (book)&#123;</span><br><span class="line">            this.selected = book</span><br><span class="line">            this.$refs.dialog.open()</span><br><span class="line">        ),</span><br><span class="line">        // ...省略</span><br><span class="line">    &#125;，</span><br><span class="line">    // ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据模拟"><a href="#数据模拟" class="headerlink" title="数据模拟"></a>数据模拟</h4><p>“数据模拟”就是用一个对象直接模拟服务端的实现返回的数据结果，而这些数据结果是我们预先采样收集来的，与真实运行数据几乎是一样的。通过数据模拟保证前端程序即使在没有服务端支持的情况下也能运行。<br>将data的样本数据抽取出来保存到了~/fixtures/home/home.json文件中。为了能先让开发环境运行起来，我们可以加入一些助手类来模拟实际的运行数据。</p>
<p>我们需要定义一个获取模拟数据的对象faker,在项目中所有模拟数据都通过它来获取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -/fixtures/faker.js</span><br><span class="line">import HomePageData from &quot;./home.json&quot;</span><br><span class="line"></span><br><span class="line">var slider_images.require.context(&#x27;./sliders&#x27;, false, /\.(png|jpg|gif|svg)$/)</span><br><span class="line">var cover_ images.require.context(&#x27;./covers&#x27;, false, /\.(png|jpg|gif|svg)$/)</span><br><span class="line"></span><br><span class="line">HomePageData.top.forEach((x)=&gt; &#123;</span><br><span class="line">	x.img_url.slider_images(&#x27;./&#x27; + x.img_url)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">HomePageData.promotions.forEach((x)=&gt; &#123;</span><br><span class="line">    x.img_url.cover_images(&#x27;./&#x27; + x.img_url)</span><br><span class="line">))</span><br><span class="line">export default&#123;</span><br><span class="line">    getHomeData ()&#123;</span><br><span class="line">        return HomePageData</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这个faker使用了一个动态加载图片的技巧，将一个指定目录下的所有文件全部加载到一个模块方法中</strong>，然后通过具体名称返回它在webpack 编译加载后的真实地址。不使用“./assets/sliders/图片.png”相对路径的方式引用，是因为webpack将程序编译并加载到开发服务器后，这些图片地址的真实路径并不是指向~/src/assets目录的，<strong>因此我们要用require. context函数将编译后的资源作为一个模块加载进来，然后再通过名称获取其正确的地址。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var slider_images.require.context(&#x27;./sliders&#x27;, false, /\.(png|jpg|gif|svg)$/)</span><br><span class="line"></span><br><span class="line">slider_images(&#x27;./1.png&#x27;) // =&gt; 获得真正的 /sliders/1.png的地址</span><br></pre></td></tr></table></figure>

<p>在home页面组件中，<strong>在created 钩子方法内加入faker</strong>，我们可以加入一个开关变量<strong>debug用于判断当前运行环境是否为开发环境，如果是则使用数据模拟方式获取数据。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import faker from &quot;../fixtures/faker&quot;</span><br><span class="line">// 判断当前环境是否是开发环境</span><br><span class="line">const debug = process.env.NODE_ENV !==&quot;production&quot;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    data ()&#123;</span><br><span class="line">        // ...省略</span><br><span class="line">    ),</span><br><span class="line">    created ()&#123;</span><br><span class="line">        if (debug)&#123;</span><br><span class="line">            const fakeData = faker.getHomeData ()</span><br><span class="line">            for prop in fakeData &#123;</span><br><span class="line">                this[prop].fakeData[prop]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.$http.get(&#x27;/api/home&#x27;)</span><br><span class="line">                .then((res) =&gt;&#123;</span><br><span class="line">                    for prop in res.body&#123;</span><br><span class="line">                        this[prop].res.body[prop]</span><br><span class="line">                    &#125;,(error)=&gt; &#123;</span><br><span class="line">                        console.log(&#x27;获取数据失败： $(error)&#x27;)</span><br><span class="line">                    &#125;);</span><br><span class="line">             &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">        // ...省略</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>现在我们就可以在终端运行$ npm run dev查看本示例的完整运行效果了。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>工作流程图：</p>
<ol>
<li>依葫芦画瓢</li>
<li>代码去重</li>
<li>抽取数据结构</li>
<li>采集与制作样本数据</li>
<li>分析设计组件接口</li>
<li>组件内部的细化与重构</li>
</ol>
<p>(1)<strong>依葫芦画瓢</strong>一 拿到界面设计图后无须思考太多，先用框架圈出功能区块，然后<br>直接编写视图的HTML.<br>(2)<strong>代码去重</strong>一将 视图模板中不断重复的逻辑封装为组件，减少页面的重复逻辑。<br>(3)<strong>抽取数据结构</strong>一将 页面中的文字用数据对象与数组取代，并制定数据结构的说<br>明文档。<br>(4)<strong>采集与制作样本数据</strong>一参 照数据结构说明文档采集更多的真实样本，切忌胡乱<br>地敲入一些字符，在数据不明确的情况下可能会遮盖一些本应很明显的使用需求。<br>(5)<strong>分析设计组件接口</strong>一简化组 件的使用接口，让组件变得更好用。<br>(6)<strong>组件内部的细化与重构</strong>一优化组件的内 部实现，使其变得更合理。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
        <category>《Vue2实践揭秘》</category>
      </categories>
      <tags>
        <tag>《Vue2实践揭秘》</tag>
      </tags>
  </entry>
  <entry>
    <title>视频剪辑-Adobe-Pr</title>
    <url>/2021/04/01/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91-Adobe-Pr/</url>
    <content><![CDATA[<h4 id="Adobe-Premiere"><a href="#Adobe-Premiere" class="headerlink" title="Adobe Premiere"></a>Adobe Premiere</h4><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ol>
<li>电影电视(院线电影、网络大电影、个人微电影、电视专题片)</li>
<li>节目剪辑(综艺娱乐、人物访谈、街坊)</li>
<li>抖音短视频( vlog、旅拍、剧情短片、炫酷视频)</li>
<li>宣传片广告片(企业宣传片、专题片、产品广告宣传片)</li>
<li>自媒体短视频（电影混剪、解说、音乐类、科普类等)</li>
<li>从事专业剪辑岗位(Premiere 、Final cut 、After Effects等)</li>
</ol>
<p><a href="http://p4.xmyjhkj.cn/index.php?m=goods&a=details&content_id=4#">官网正版授权  软件下载</a></p>
<p><img src="https://raw.githubusercontent.com/winney07/Images/main/winney07.github.io/%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91-Adobe-Pr/image-20210401174712668.png" alt="分辨率"></p>
<h4 id="帧速率"><a href="#帧速率" class="headerlink" title="帧速率"></a>帧速率</h4><ol>
<li>帧——影像动画中最小的单位,无数的帧构成了秒。</li>
<li>一帧相当于一个画面,一秒就是由一定的帧构成。</li>
<li>视频常用的帧数有:24帧、25帧、29.97帧以及30帧。</li>
<li>自媒体或一般的短视频剪辑：选择25帧/秒。</li>
</ol>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>Adobe-Pr</tag>
      </tags>
  </entry>
</search>
